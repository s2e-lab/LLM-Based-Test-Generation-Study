[
	{
		"original_code": "// TaskController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.task;\n\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\n\n/**\n * Task管理的Controller, 使用Restful风格的Urls:\n *\n * List page : GET /task/\n * Create page : GET /task/create\n * Create action : POST /task/create\n * Update page : GET /task/update/{id}\n * Update action : POST /task/update\n * Delete action : GET /task/delete/{id}\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/task\")\npublic class TaskController {\n\n    private static final String PAGE_SIZE = \"3\";\n\n    private static Map<String, String> sortTypes = Maps.newLinkedHashMap();\n\n    static {\n        sortTypes.put(\"auto\", \"自动\");\n        sortTypes.put(\"title\", \"标题\");\n    }\n\n    @Autowired\n    private TaskService taskService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String list(@RequestParam(value = \"page\", defaultValue = \"1\") int pageNumber, @RequestParam(value = \"page.size\", defaultValue = PAGE_SIZE) int pageSize, @RequestParam(value = \"sortType\", defaultValue = \"auto\") String sortType, Model model, ServletRequest request) {\n        Map<String, Object> searchParams = Servlets.getParametersStartingWith(request, \"search_\");\n        Long userId = getCurrentUserId();\n        Page<Task> tasks = taskService.getUserTask(userId, searchParams, pageNumber, pageSize, sortType);\n        model.addAttribute(\"tasks\", tasks);\n        model.addAttribute(\"sortType\", sortType);\n        model.addAttribute(\"sortTypes\", sortTypes);\n        // 将搜索条件编码成字符串，用于排序，分页的URL\n        model.addAttribute(\"searchParams\", Servlets.encodeParameterStringWithPrefix(searchParams, \"search_\"));\n        return \"task/taskList\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.GET)\n    public String createForm(Model model) {\n        model.addAttribute(\"task\", new Task());\n        model.addAttribute(\"action\", \"create\");\n        return \"task/taskForm\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.POST)\n    public String create(@Valid Task newTask, RedirectAttributes redirectAttributes) {\n        User user = new User(getCurrentUserId());\n        newTask.setUser(user);\n        taskService.saveTask(newTask);\n        redirectAttributes.addFlashAttribute(\"message\", \"创建任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"task\", taskService.getTask(id));\n        model.addAttribute(\"action\", \"update\");\n        return \"task/taskForm\";\n    }\n\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"task\") Task task, RedirectAttributes redirectAttributes) {\n        taskService.saveTask(task);\n        redirectAttributes.addFlashAttribute(\"message\", \"更新任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    @RequestMapping(value = \"delete/{id}\")\n    public String delete(@PathVariable(\"id\") Long id, RedirectAttributes redirectAttributes) {\n        taskService.deleteTask(id);\n        redirectAttributes.addFlashAttribute(\"message\", \"删除任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出Task对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getTask(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"task\", taskService.getTask(id));\n        }\n    }\n\n    /**\n     * 取出Shiro中的当前用户Id.\n     */\n    private Long getCurrentUserId() {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        return user.id;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/task/TaskControllerTest0.java",
		"test_prompt": "// TaskControllerTest0.java\npackage org.springside.examples.quickstart.web.task;\n\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TaskController}.\n* It contains ten unit test cases for the {@link TaskController#list(int, int, String, Model, ServletRequest)} method.\n*/\nclass TaskControllerTest0 {"
	},
	{
		"original_code": "// TaskController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.task;\n\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\n\n/**\n * Task管理的Controller, 使用Restful风格的Urls:\n *\n * List page : GET /task/\n * Create page : GET /task/create\n * Create action : POST /task/create\n * Update page : GET /task/update/{id}\n * Update action : POST /task/update\n * Delete action : GET /task/delete/{id}\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/task\")\npublic class TaskController {\n\n    private static final String PAGE_SIZE = \"3\";\n\n    private static Map<String, String> sortTypes = Maps.newLinkedHashMap();\n\n    static {\n        sortTypes.put(\"auto\", \"自动\");\n        sortTypes.put(\"title\", \"标题\");\n    }\n\n    @Autowired\n    private TaskService taskService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String list(@RequestParam(value = \"page\", defaultValue = \"1\") int pageNumber, @RequestParam(value = \"page.size\", defaultValue = PAGE_SIZE) int pageSize, @RequestParam(value = \"sortType\", defaultValue = \"auto\") String sortType, Model model, ServletRequest request) {\n        Map<String, Object> searchParams = Servlets.getParametersStartingWith(request, \"search_\");\n        Long userId = getCurrentUserId();\n        Page<Task> tasks = taskService.getUserTask(userId, searchParams, pageNumber, pageSize, sortType);\n        model.addAttribute(\"tasks\", tasks);\n        model.addAttribute(\"sortType\", sortType);\n        model.addAttribute(\"sortTypes\", sortTypes);\n        // 将搜索条件编码成字符串，用于排序，分页的URL\n        model.addAttribute(\"searchParams\", Servlets.encodeParameterStringWithPrefix(searchParams, \"search_\"));\n        return \"task/taskList\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.GET)\n    public String createForm(Model model) {\n        model.addAttribute(\"task\", new Task());\n        model.addAttribute(\"action\", \"create\");\n        return \"task/taskForm\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.POST)\n    public String create(@Valid Task newTask, RedirectAttributes redirectAttributes) {\n        User user = new User(getCurrentUserId());\n        newTask.setUser(user);\n        taskService.saveTask(newTask);\n        redirectAttributes.addFlashAttribute(\"message\", \"创建任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"task\", taskService.getTask(id));\n        model.addAttribute(\"action\", \"update\");\n        return \"task/taskForm\";\n    }\n\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"task\") Task task, RedirectAttributes redirectAttributes) {\n        taskService.saveTask(task);\n        redirectAttributes.addFlashAttribute(\"message\", \"更新任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    @RequestMapping(value = \"delete/{id}\")\n    public String delete(@PathVariable(\"id\") Long id, RedirectAttributes redirectAttributes) {\n        taskService.deleteTask(id);\n        redirectAttributes.addFlashAttribute(\"message\", \"删除任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出Task对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getTask(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"task\", taskService.getTask(id));\n        }\n    }\n\n    /**\n     * 取出Shiro中的当前用户Id.\n     */\n    private Long getCurrentUserId() {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        return user.id;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/task/TaskControllerTest1.java",
		"test_prompt": "// TaskControllerTest1.java\npackage org.springside.examples.quickstart.web.task;\n\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TaskController}.\n* It contains ten unit test cases for the {@link TaskController#createForm(Model)} method.\n*/\nclass TaskControllerTest1 {"
	},
	{
		"original_code": "// TaskController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.task;\n\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\n\n/**\n * Task管理的Controller, 使用Restful风格的Urls:\n *\n * List page : GET /task/\n * Create page : GET /task/create\n * Create action : POST /task/create\n * Update page : GET /task/update/{id}\n * Update action : POST /task/update\n * Delete action : GET /task/delete/{id}\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/task\")\npublic class TaskController {\n\n    private static final String PAGE_SIZE = \"3\";\n\n    private static Map<String, String> sortTypes = Maps.newLinkedHashMap();\n\n    static {\n        sortTypes.put(\"auto\", \"自动\");\n        sortTypes.put(\"title\", \"标题\");\n    }\n\n    @Autowired\n    private TaskService taskService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String list(@RequestParam(value = \"page\", defaultValue = \"1\") int pageNumber, @RequestParam(value = \"page.size\", defaultValue = PAGE_SIZE) int pageSize, @RequestParam(value = \"sortType\", defaultValue = \"auto\") String sortType, Model model, ServletRequest request) {\n        Map<String, Object> searchParams = Servlets.getParametersStartingWith(request, \"search_\");\n        Long userId = getCurrentUserId();\n        Page<Task> tasks = taskService.getUserTask(userId, searchParams, pageNumber, pageSize, sortType);\n        model.addAttribute(\"tasks\", tasks);\n        model.addAttribute(\"sortType\", sortType);\n        model.addAttribute(\"sortTypes\", sortTypes);\n        // 将搜索条件编码成字符串，用于排序，分页的URL\n        model.addAttribute(\"searchParams\", Servlets.encodeParameterStringWithPrefix(searchParams, \"search_\"));\n        return \"task/taskList\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.GET)\n    public String createForm(Model model) {\n        model.addAttribute(\"task\", new Task());\n        model.addAttribute(\"action\", \"create\");\n        return \"task/taskForm\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.POST)\n    public String create(@Valid Task newTask, RedirectAttributes redirectAttributes) {\n        User user = new User(getCurrentUserId());\n        newTask.setUser(user);\n        taskService.saveTask(newTask);\n        redirectAttributes.addFlashAttribute(\"message\", \"创建任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"task\", taskService.getTask(id));\n        model.addAttribute(\"action\", \"update\");\n        return \"task/taskForm\";\n    }\n\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"task\") Task task, RedirectAttributes redirectAttributes) {\n        taskService.saveTask(task);\n        redirectAttributes.addFlashAttribute(\"message\", \"更新任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    @RequestMapping(value = \"delete/{id}\")\n    public String delete(@PathVariable(\"id\") Long id, RedirectAttributes redirectAttributes) {\n        taskService.deleteTask(id);\n        redirectAttributes.addFlashAttribute(\"message\", \"删除任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出Task对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getTask(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"task\", taskService.getTask(id));\n        }\n    }\n\n    /**\n     * 取出Shiro中的当前用户Id.\n     */\n    private Long getCurrentUserId() {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        return user.id;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/task/TaskControllerTest2.java",
		"test_prompt": "// TaskControllerTest2.java\npackage org.springside.examples.quickstart.web.task;\n\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TaskController}.\n* It contains ten unit test cases for the {@link TaskController#create(Task, RedirectAttributes)} method.\n*/\nclass TaskControllerTest2 {"
	},
	{
		"original_code": "// TaskController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.task;\n\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\n\n/**\n * Task管理的Controller, 使用Restful风格的Urls:\n *\n * List page : GET /task/\n * Create page : GET /task/create\n * Create action : POST /task/create\n * Update page : GET /task/update/{id}\n * Update action : POST /task/update\n * Delete action : GET /task/delete/{id}\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/task\")\npublic class TaskController {\n\n    private static final String PAGE_SIZE = \"3\";\n\n    private static Map<String, String> sortTypes = Maps.newLinkedHashMap();\n\n    static {\n        sortTypes.put(\"auto\", \"自动\");\n        sortTypes.put(\"title\", \"标题\");\n    }\n\n    @Autowired\n    private TaskService taskService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String list(@RequestParam(value = \"page\", defaultValue = \"1\") int pageNumber, @RequestParam(value = \"page.size\", defaultValue = PAGE_SIZE) int pageSize, @RequestParam(value = \"sortType\", defaultValue = \"auto\") String sortType, Model model, ServletRequest request) {\n        Map<String, Object> searchParams = Servlets.getParametersStartingWith(request, \"search_\");\n        Long userId = getCurrentUserId();\n        Page<Task> tasks = taskService.getUserTask(userId, searchParams, pageNumber, pageSize, sortType);\n        model.addAttribute(\"tasks\", tasks);\n        model.addAttribute(\"sortType\", sortType);\n        model.addAttribute(\"sortTypes\", sortTypes);\n        // 将搜索条件编码成字符串，用于排序，分页的URL\n        model.addAttribute(\"searchParams\", Servlets.encodeParameterStringWithPrefix(searchParams, \"search_\"));\n        return \"task/taskList\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.GET)\n    public String createForm(Model model) {\n        model.addAttribute(\"task\", new Task());\n        model.addAttribute(\"action\", \"create\");\n        return \"task/taskForm\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.POST)\n    public String create(@Valid Task newTask, RedirectAttributes redirectAttributes) {\n        User user = new User(getCurrentUserId());\n        newTask.setUser(user);\n        taskService.saveTask(newTask);\n        redirectAttributes.addFlashAttribute(\"message\", \"创建任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"task\", taskService.getTask(id));\n        model.addAttribute(\"action\", \"update\");\n        return \"task/taskForm\";\n    }\n\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"task\") Task task, RedirectAttributes redirectAttributes) {\n        taskService.saveTask(task);\n        redirectAttributes.addFlashAttribute(\"message\", \"更新任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    @RequestMapping(value = \"delete/{id}\")\n    public String delete(@PathVariable(\"id\") Long id, RedirectAttributes redirectAttributes) {\n        taskService.deleteTask(id);\n        redirectAttributes.addFlashAttribute(\"message\", \"删除任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出Task对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getTask(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"task\", taskService.getTask(id));\n        }\n    }\n\n    /**\n     * 取出Shiro中的当前用户Id.\n     */\n    private Long getCurrentUserId() {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        return user.id;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/task/TaskControllerTest3.java",
		"test_prompt": "// TaskControllerTest3.java\npackage org.springside.examples.quickstart.web.task;\n\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TaskController}.\n* It contains ten unit test cases for the {@link TaskController#updateForm(Long, Model)} method.\n*/\nclass TaskControllerTest3 {"
	},
	{
		"original_code": "// TaskController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.task;\n\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\n\n/**\n * Task管理的Controller, 使用Restful风格的Urls:\n *\n * List page : GET /task/\n * Create page : GET /task/create\n * Create action : POST /task/create\n * Update page : GET /task/update/{id}\n * Update action : POST /task/update\n * Delete action : GET /task/delete/{id}\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/task\")\npublic class TaskController {\n\n    private static final String PAGE_SIZE = \"3\";\n\n    private static Map<String, String> sortTypes = Maps.newLinkedHashMap();\n\n    static {\n        sortTypes.put(\"auto\", \"自动\");\n        sortTypes.put(\"title\", \"标题\");\n    }\n\n    @Autowired\n    private TaskService taskService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String list(@RequestParam(value = \"page\", defaultValue = \"1\") int pageNumber, @RequestParam(value = \"page.size\", defaultValue = PAGE_SIZE) int pageSize, @RequestParam(value = \"sortType\", defaultValue = \"auto\") String sortType, Model model, ServletRequest request) {\n        Map<String, Object> searchParams = Servlets.getParametersStartingWith(request, \"search_\");\n        Long userId = getCurrentUserId();\n        Page<Task> tasks = taskService.getUserTask(userId, searchParams, pageNumber, pageSize, sortType);\n        model.addAttribute(\"tasks\", tasks);\n        model.addAttribute(\"sortType\", sortType);\n        model.addAttribute(\"sortTypes\", sortTypes);\n        // 将搜索条件编码成字符串，用于排序，分页的URL\n        model.addAttribute(\"searchParams\", Servlets.encodeParameterStringWithPrefix(searchParams, \"search_\"));\n        return \"task/taskList\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.GET)\n    public String createForm(Model model) {\n        model.addAttribute(\"task\", new Task());\n        model.addAttribute(\"action\", \"create\");\n        return \"task/taskForm\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.POST)\n    public String create(@Valid Task newTask, RedirectAttributes redirectAttributes) {\n        User user = new User(getCurrentUserId());\n        newTask.setUser(user);\n        taskService.saveTask(newTask);\n        redirectAttributes.addFlashAttribute(\"message\", \"创建任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"task\", taskService.getTask(id));\n        model.addAttribute(\"action\", \"update\");\n        return \"task/taskForm\";\n    }\n\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"task\") Task task, RedirectAttributes redirectAttributes) {\n        taskService.saveTask(task);\n        redirectAttributes.addFlashAttribute(\"message\", \"更新任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    @RequestMapping(value = \"delete/{id}\")\n    public String delete(@PathVariable(\"id\") Long id, RedirectAttributes redirectAttributes) {\n        taskService.deleteTask(id);\n        redirectAttributes.addFlashAttribute(\"message\", \"删除任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出Task对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getTask(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"task\", taskService.getTask(id));\n        }\n    }\n\n    /**\n     * 取出Shiro中的当前用户Id.\n     */\n    private Long getCurrentUserId() {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        return user.id;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/task/TaskControllerTest4.java",
		"test_prompt": "// TaskControllerTest4.java\npackage org.springside.examples.quickstart.web.task;\n\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TaskController}.\n* It contains ten unit test cases for the {@link TaskController#update(Task, RedirectAttributes)} method.\n*/\nclass TaskControllerTest4 {"
	},
	{
		"original_code": "// TaskController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.task;\n\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\n\n/**\n * Task管理的Controller, 使用Restful风格的Urls:\n *\n * List page : GET /task/\n * Create page : GET /task/create\n * Create action : POST /task/create\n * Update page : GET /task/update/{id}\n * Update action : POST /task/update\n * Delete action : GET /task/delete/{id}\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/task\")\npublic class TaskController {\n\n    private static final String PAGE_SIZE = \"3\";\n\n    private static Map<String, String> sortTypes = Maps.newLinkedHashMap();\n\n    static {\n        sortTypes.put(\"auto\", \"自动\");\n        sortTypes.put(\"title\", \"标题\");\n    }\n\n    @Autowired\n    private TaskService taskService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String list(@RequestParam(value = \"page\", defaultValue = \"1\") int pageNumber, @RequestParam(value = \"page.size\", defaultValue = PAGE_SIZE) int pageSize, @RequestParam(value = \"sortType\", defaultValue = \"auto\") String sortType, Model model, ServletRequest request) {\n        Map<String, Object> searchParams = Servlets.getParametersStartingWith(request, \"search_\");\n        Long userId = getCurrentUserId();\n        Page<Task> tasks = taskService.getUserTask(userId, searchParams, pageNumber, pageSize, sortType);\n        model.addAttribute(\"tasks\", tasks);\n        model.addAttribute(\"sortType\", sortType);\n        model.addAttribute(\"sortTypes\", sortTypes);\n        // 将搜索条件编码成字符串，用于排序，分页的URL\n        model.addAttribute(\"searchParams\", Servlets.encodeParameterStringWithPrefix(searchParams, \"search_\"));\n        return \"task/taskList\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.GET)\n    public String createForm(Model model) {\n        model.addAttribute(\"task\", new Task());\n        model.addAttribute(\"action\", \"create\");\n        return \"task/taskForm\";\n    }\n\n    @RequestMapping(value = \"create\", method = RequestMethod.POST)\n    public String create(@Valid Task newTask, RedirectAttributes redirectAttributes) {\n        User user = new User(getCurrentUserId());\n        newTask.setUser(user);\n        taskService.saveTask(newTask);\n        redirectAttributes.addFlashAttribute(\"message\", \"创建任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"task\", taskService.getTask(id));\n        model.addAttribute(\"action\", \"update\");\n        return \"task/taskForm\";\n    }\n\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"task\") Task task, RedirectAttributes redirectAttributes) {\n        taskService.saveTask(task);\n        redirectAttributes.addFlashAttribute(\"message\", \"更新任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    @RequestMapping(value = \"delete/{id}\")\n    public String delete(@PathVariable(\"id\") Long id, RedirectAttributes redirectAttributes) {\n        taskService.deleteTask(id);\n        redirectAttributes.addFlashAttribute(\"message\", \"删除任务成功\");\n        return \"redirect:/task/\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出Task对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getTask(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"task\", taskService.getTask(id));\n        }\n    }\n\n    /**\n     * 取出Shiro中的当前用户Id.\n     */\n    private Long getCurrentUserId() {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        return user.id;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/task/TaskControllerTest5.java",
		"test_prompt": "// TaskControllerTest5.java\npackage org.springside.examples.quickstart.web.task;\n\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TaskController}.\n* It contains ten unit test cases for the {@link TaskController#delete(Long, RedirectAttributes)} method.\n*/\nclass TaskControllerTest5 {"
	},
	{
		"original_code": "// ApiListController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.api;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@Controller\n@RequestMapping(value = \"/api\")\npublic class ApiListController {\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String list() {\n        return \"api/list\";\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/api/ApiListControllerTest.java",
		"test_prompt": "// ApiListControllerTest.java\npackage org.springside.examples.quickstart.web.api;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ApiListController}.\n* It contains ten unit test cases for the {@link ApiListController#list()} method.\n*/\nclass ApiListControllerTest {"
	},
	{
		"original_code": "// RegisterController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.account;\n\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\n\n/**\n * 用户注册的Controller.\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/register\")\npublic class RegisterController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String registerForm() {\n        return \"account/register\";\n    }\n\n    @RequestMapping(method = RequestMethod.POST)\n    public String register(@Valid User user, RedirectAttributes redirectAttributes) {\n        accountService.registerUser(user);\n        redirectAttributes.addFlashAttribute(\"username\", user.getLoginName());\n        return \"redirect:/login\";\n    }\n\n    /**\n     * Ajax请求校验loginName是否唯一。\n     */\n    @RequestMapping(value = \"checkLoginName\")\n    @ResponseBody\n    public String checkLoginName(@RequestParam(\"loginName\") String loginName) {\n        if (accountService.findUserByLoginName(loginName) == null) {\n            return \"true\";\n        } else {\n            return \"false\";\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/account/RegisterControllerTest0.java",
		"test_prompt": "// RegisterControllerTest0.java\npackage org.springside.examples.quickstart.web.account;\n\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RegisterController}.\n* It contains ten unit test cases for the {@link RegisterController#registerForm()} method.\n*/\nclass RegisterControllerTest0 {"
	},
	{
		"original_code": "// RegisterController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.account;\n\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\n\n/**\n * 用户注册的Controller.\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/register\")\npublic class RegisterController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String registerForm() {\n        return \"account/register\";\n    }\n\n    @RequestMapping(method = RequestMethod.POST)\n    public String register(@Valid User user, RedirectAttributes redirectAttributes) {\n        accountService.registerUser(user);\n        redirectAttributes.addFlashAttribute(\"username\", user.getLoginName());\n        return \"redirect:/login\";\n    }\n\n    /**\n     * Ajax请求校验loginName是否唯一。\n     */\n    @RequestMapping(value = \"checkLoginName\")\n    @ResponseBody\n    public String checkLoginName(@RequestParam(\"loginName\") String loginName) {\n        if (accountService.findUserByLoginName(loginName) == null) {\n            return \"true\";\n        } else {\n            return \"false\";\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/account/RegisterControllerTest1.java",
		"test_prompt": "// RegisterControllerTest1.java\npackage org.springside.examples.quickstart.web.account;\n\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RegisterController}.\n* It contains ten unit test cases for the {@link RegisterController#register(User, RedirectAttributes)} method.\n*/\nclass RegisterControllerTest1 {"
	},
	{
		"original_code": "// RegisterController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.account;\n\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\n\n/**\n * 用户注册的Controller.\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/register\")\npublic class RegisterController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String registerForm() {\n        return \"account/register\";\n    }\n\n    @RequestMapping(method = RequestMethod.POST)\n    public String register(@Valid User user, RedirectAttributes redirectAttributes) {\n        accountService.registerUser(user);\n        redirectAttributes.addFlashAttribute(\"username\", user.getLoginName());\n        return \"redirect:/login\";\n    }\n\n    /**\n     * Ajax请求校验loginName是否唯一。\n     */\n    @RequestMapping(value = \"checkLoginName\")\n    @ResponseBody\n    public String checkLoginName(@RequestParam(\"loginName\") String loginName) {\n        if (accountService.findUserByLoginName(loginName) == null) {\n            return \"true\";\n        } else {\n            return \"false\";\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/account/RegisterControllerTest2.java",
		"test_prompt": "// RegisterControllerTest2.java\npackage org.springside.examples.quickstart.web.account;\n\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RegisterController}.\n* It contains ten unit test cases for the {@link RegisterController#checkLoginName(String)} method.\n*/\nclass RegisterControllerTest2 {"
	},
	{
		"original_code": "// ProfileController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.account;\n\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\n\n/**\n * 用户修改自己资料的Controller.\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/profile\")\npublic class ProfileController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String updateForm(Model model) {\n        Long id = getCurrentUserId();\n        model.addAttribute(\"user\", accountService.getUser(id));\n        return \"account/profile\";\n    }\n\n    @RequestMapping(method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"user\") User user) {\n        accountService.updateUser(user);\n        updateCurrentUserName(user.getName());\n        return \"redirect:/\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出User对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getUser(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"user\", accountService.getUser(id));\n        }\n    }\n\n    /**\n     * 取出Shiro中的当前用户Id.\n     */\n    private Long getCurrentUserId() {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        return user.id;\n    }\n\n    /**\n     * 更新Shiro中当前用户的用户名.\n     */\n    private void updateCurrentUserName(String userName) {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        user.name = userName;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/account/ProfileControllerTest0.java",
		"test_prompt": "// ProfileControllerTest0.java\npackage org.springside.examples.quickstart.web.account;\n\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProfileController}.\n* It contains ten unit test cases for the {@link ProfileController#updateForm(Model)} method.\n*/\nclass ProfileControllerTest0 {"
	},
	{
		"original_code": "// ProfileController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.account;\n\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\n\n/**\n * 用户修改自己资料的Controller.\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/profile\")\npublic class ProfileController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String updateForm(Model model) {\n        Long id = getCurrentUserId();\n        model.addAttribute(\"user\", accountService.getUser(id));\n        return \"account/profile\";\n    }\n\n    @RequestMapping(method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"user\") User user) {\n        accountService.updateUser(user);\n        updateCurrentUserName(user.getName());\n        return \"redirect:/\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出User对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getUser(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"user\", accountService.getUser(id));\n        }\n    }\n\n    /**\n     * 取出Shiro中的当前用户Id.\n     */\n    private Long getCurrentUserId() {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        return user.id;\n    }\n\n    /**\n     * 更新Shiro中当前用户的用户名.\n     */\n    private void updateCurrentUserName(String userName) {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        user.name = userName;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/account/ProfileControllerTest1.java",
		"test_prompt": "// ProfileControllerTest1.java\npackage org.springside.examples.quickstart.web.account;\n\nimport javax.validation.Valid;\nimport org.apache.shiro.SecurityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProfileController}.\n* It contains ten unit test cases for the {@link ProfileController#update(User)} method.\n*/\nclass ProfileControllerTest1 {"
	},
	{
		"original_code": "// UserAdminController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.account;\n\nimport java.util.List;\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\n\n/**\n * 管理员管理用户的Controller.\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/admin/user\")\npublic class UserAdminController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String list(Model model) {\n        List<User> users = accountService.getAllUser();\n        model.addAttribute(\"users\", users);\n        return \"account/adminUserList\";\n    }\n\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"user\", accountService.getUser(id));\n        return \"account/adminUserForm\";\n    }\n\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"user\") User user, RedirectAttributes redirectAttributes) {\n        accountService.updateUser(user);\n        redirectAttributes.addFlashAttribute(\"message\", \"更新用户\" + user.getLoginName() + \"成功\");\n        return \"redirect:/admin/user\";\n    }\n\n    @RequestMapping(value = \"delete/{id}\")\n    public String delete(@PathVariable(\"id\") Long id, RedirectAttributes redirectAttributes) {\n        User user = accountService.getUser(id);\n        accountService.deleteUser(id);\n        redirectAttributes.addFlashAttribute(\"message\", \"删除用户\" + user.getLoginName() + \"成功\");\n        return \"redirect:/admin/user\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出User对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getUser(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"user\", accountService.getUser(id));\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/account/UserAdminControllerTest0.java",
		"test_prompt": "// UserAdminControllerTest0.java\npackage org.springside.examples.quickstart.web.account;\n\nimport java.util.List;\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserAdminController}.\n* It contains ten unit test cases for the {@link UserAdminController#list(Model)} method.\n*/\nclass UserAdminControllerTest0 {"
	},
	{
		"original_code": "// UserAdminController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.account;\n\nimport java.util.List;\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\n\n/**\n * 管理员管理用户的Controller.\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/admin/user\")\npublic class UserAdminController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String list(Model model) {\n        List<User> users = accountService.getAllUser();\n        model.addAttribute(\"users\", users);\n        return \"account/adminUserList\";\n    }\n\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"user\", accountService.getUser(id));\n        return \"account/adminUserForm\";\n    }\n\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"user\") User user, RedirectAttributes redirectAttributes) {\n        accountService.updateUser(user);\n        redirectAttributes.addFlashAttribute(\"message\", \"更新用户\" + user.getLoginName() + \"成功\");\n        return \"redirect:/admin/user\";\n    }\n\n    @RequestMapping(value = \"delete/{id}\")\n    public String delete(@PathVariable(\"id\") Long id, RedirectAttributes redirectAttributes) {\n        User user = accountService.getUser(id);\n        accountService.deleteUser(id);\n        redirectAttributes.addFlashAttribute(\"message\", \"删除用户\" + user.getLoginName() + \"成功\");\n        return \"redirect:/admin/user\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出User对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getUser(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"user\", accountService.getUser(id));\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/account/UserAdminControllerTest1.java",
		"test_prompt": "// UserAdminControllerTest1.java\npackage org.springside.examples.quickstart.web.account;\n\nimport java.util.List;\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserAdminController}.\n* It contains ten unit test cases for the {@link UserAdminController#updateForm(Long, Model)} method.\n*/\nclass UserAdminControllerTest1 {"
	},
	{
		"original_code": "// UserAdminController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.account;\n\nimport java.util.List;\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\n\n/**\n * 管理员管理用户的Controller.\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/admin/user\")\npublic class UserAdminController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String list(Model model) {\n        List<User> users = accountService.getAllUser();\n        model.addAttribute(\"users\", users);\n        return \"account/adminUserList\";\n    }\n\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"user\", accountService.getUser(id));\n        return \"account/adminUserForm\";\n    }\n\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"user\") User user, RedirectAttributes redirectAttributes) {\n        accountService.updateUser(user);\n        redirectAttributes.addFlashAttribute(\"message\", \"更新用户\" + user.getLoginName() + \"成功\");\n        return \"redirect:/admin/user\";\n    }\n\n    @RequestMapping(value = \"delete/{id}\")\n    public String delete(@PathVariable(\"id\") Long id, RedirectAttributes redirectAttributes) {\n        User user = accountService.getUser(id);\n        accountService.deleteUser(id);\n        redirectAttributes.addFlashAttribute(\"message\", \"删除用户\" + user.getLoginName() + \"成功\");\n        return \"redirect:/admin/user\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出User对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getUser(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"user\", accountService.getUser(id));\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/account/UserAdminControllerTest2.java",
		"test_prompt": "// UserAdminControllerTest2.java\npackage org.springside.examples.quickstart.web.account;\n\nimport java.util.List;\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserAdminController}.\n* It contains ten unit test cases for the {@link UserAdminController#update(User, RedirectAttributes)} method.\n*/\nclass UserAdminControllerTest2 {"
	},
	{
		"original_code": "// UserAdminController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.account;\n\nimport java.util.List;\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\n\n/**\n * 管理员管理用户的Controller.\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/admin/user\")\npublic class UserAdminController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String list(Model model) {\n        List<User> users = accountService.getAllUser();\n        model.addAttribute(\"users\", users);\n        return \"account/adminUserList\";\n    }\n\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"user\", accountService.getUser(id));\n        return \"account/adminUserForm\";\n    }\n\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"user\") User user, RedirectAttributes redirectAttributes) {\n        accountService.updateUser(user);\n        redirectAttributes.addFlashAttribute(\"message\", \"更新用户\" + user.getLoginName() + \"成功\");\n        return \"redirect:/admin/user\";\n    }\n\n    @RequestMapping(value = \"delete/{id}\")\n    public String delete(@PathVariable(\"id\") Long id, RedirectAttributes redirectAttributes) {\n        User user = accountService.getUser(id);\n        accountService.deleteUser(id);\n        redirectAttributes.addFlashAttribute(\"message\", \"删除用户\" + user.getLoginName() + \"成功\");\n        return \"redirect:/admin/user\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出User对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getUser(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"user\", accountService.getUser(id));\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/account/UserAdminControllerTest3.java",
		"test_prompt": "// UserAdminControllerTest3.java\npackage org.springside.examples.quickstart.web.account;\n\nimport java.util.List;\nimport javax.validation.Valid;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.service.account.AccountService;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserAdminController}.\n* It contains ten unit test cases for the {@link UserAdminController#delete(Long, RedirectAttributes)} method.\n*/\nclass UserAdminControllerTest3 {"
	},
	{
		"original_code": "// LoginController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.account;\n\nimport org.apache.shiro.web.filter.authc.FormAuthenticationFilter;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n/**\n * LoginController负责打开登录页面(GET请求)和登录出错页面(POST请求)，\n *\n * 真正登录的POST请求由Filter完成,\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/login\")\npublic class LoginController {\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String login() {\n        return \"account/login\";\n    }\n\n    @RequestMapping(method = RequestMethod.POST)\n    public String fail(@RequestParam(FormAuthenticationFilter.DEFAULT_USERNAME_PARAM) String userName, Model model) {\n        model.addAttribute(FormAuthenticationFilter.DEFAULT_USERNAME_PARAM, userName);\n        return \"account/login\";\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/account/LoginControllerTest0.java",
		"test_prompt": "// LoginControllerTest0.java\npackage org.springside.examples.quickstart.web.account;\n\nimport org.apache.shiro.web.filter.authc.FormAuthenticationFilter;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LoginController}.\n* It contains ten unit test cases for the {@link LoginController#login()} method.\n*/\nclass LoginControllerTest0 {"
	},
	{
		"original_code": "// LoginController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.web.account;\n\nimport org.apache.shiro.web.filter.authc.FormAuthenticationFilter;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n/**\n * LoginController负责打开登录页面(GET请求)和登录出错页面(POST请求)，\n *\n * 真正登录的POST请求由Filter完成,\n *\n * @author calvin\n */\n@Controller\n@RequestMapping(value = \"/login\")\npublic class LoginController {\n\n    @RequestMapping(method = RequestMethod.GET)\n    public String login() {\n        return \"account/login\";\n    }\n\n    @RequestMapping(method = RequestMethod.POST)\n    public String fail(@RequestParam(FormAuthenticationFilter.DEFAULT_USERNAME_PARAM) String userName, Model model) {\n        model.addAttribute(FormAuthenticationFilter.DEFAULT_USERNAME_PARAM, userName);\n        return \"account/login\";\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/web/account/LoginControllerTest1.java",
		"test_prompt": "// LoginControllerTest1.java\npackage org.springside.examples.quickstart.web.account;\n\nimport org.apache.shiro.web.filter.authc.FormAuthenticationFilter;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LoginController}.\n* It contains ten unit test cases for the {@link LoginController#fail(String, Model)} method.\n*/\nclass LoginControllerTest1 {"
	},
	{
		"original_code": "// AccountService.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.service.account;\n\nimport java.util.List;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.SecurityUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.repository.TaskDao;\nimport org.springside.examples.quickstart.repository.UserDao;\nimport org.springside.examples.quickstart.service.ServiceException;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.modules.security.utils.Digests;\nimport org.springside.modules.utils.Clock;\nimport org.springside.modules.utils.Encodes;\n\n/**\n * 用户管理类.\n *\n * @author calvin\n */\n// Spring Service Bean的标识.\n@Component\n@Transactional\npublic class AccountService {\n\n    public static final String HASH_ALGORITHM = \"SHA-1\";\n\n    public static final int HASH_INTERATIONS = 1024;\n\n    private static final int SALT_SIZE = 8;\n\n    private static Logger logger = LoggerFactory.getLogger(AccountService.class);\n\n    private UserDao userDao;\n\n    private TaskDao taskDao;\n\n    private Clock clock = Clock.DEFAULT;\n\n    public List<User> getAllUser() {\n        return (List<User>) userDao.findAll();\n    }\n\n    public User getUser(Long id) {\n        return userDao.findOne(id);\n    }\n\n    public User findUserByLoginName(String loginName) {\n        return userDao.findByLoginName(loginName);\n    }\n\n    public void registerUser(User user) {\n        entryptPassword(user);\n        user.setRoles(\"user\");\n        user.setRegisterDate(clock.getCurrentDate());\n        userDao.save(user);\n    }\n\n    public void updateUser(User user) {\n        if (StringUtils.isNotBlank(user.getPlainPassword())) {\n            entryptPassword(user);\n        }\n        userDao.save(user);\n    }\n\n    public void deleteUser(Long id) {\n        if (isSupervisor(id)) {\n            logger.warn(\"操作员{}尝试删除超级管理员用户\", getCurrentUserName());\n            throw new ServiceException(\"不能删除超级管理员用户\");\n        }\n        userDao.delete(id);\n        taskDao.deleteByUserId(id);\n    }\n\n    /**\n     * 判断是否超级管理员.\n     */\n    private boolean isSupervisor(Long id) {\n        return id == 1;\n    }\n\n    /**\n     * 取出Shiro中的当前用户LoginName.\n     */\n    private String getCurrentUserName() {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        return user.loginName;\n    }\n\n    /**\n     * 设定安全的密码，生成随机的salt并经过1024次 sha-1 hash\n     */\n    private void entryptPassword(User user) {\n        byte[] salt = Digests.generateSalt(SALT_SIZE);\n        user.setSalt(Encodes.encodeHex(salt));\n        byte[] hashPassword = Digests.sha1(user.getPlainPassword().getBytes(), salt, HASH_INTERATIONS);\n        user.setPassword(Encodes.encodeHex(hashPassword));\n    }\n\n    @Autowired\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    @Autowired\n    public void setTaskDao(TaskDao taskDao) {\n        this.taskDao = taskDao;\n    }\n\n    public void setClock(Clock clock) {\n        this.clock = clock;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/service/account/AccountServiceTest.java",
		"test_prompt": "// AccountServiceTest.java\npackage org.springside.examples.quickstart.service.account;\n\nimport java.util.List;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.SecurityUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springside.examples.quickstart.entity.User;\nimport org.springside.examples.quickstart.repository.TaskDao;\nimport org.springside.examples.quickstart.repository.UserDao;\nimport org.springside.examples.quickstart.service.ServiceException;\nimport org.springside.examples.quickstart.service.account.ShiroDbRealm.ShiroUser;\nimport org.springside.modules.security.utils.Digests;\nimport org.springside.modules.utils.Clock;\nimport org.springside.modules.utils.Encodes;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AccountService}.\n* It contains ten unit test cases for the {@link AccountService#findUserByLoginName(String)} method.\n*/\nclass AccountServiceTest {"
	},
	{
		"original_code": "// TaskRestController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.rest;\n\nimport java.net.URI;\nimport java.util.List;\nimport javax.validation.Validator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.util.UriComponentsBuilder;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.web.MediaTypes;\n\n/**\n * Task的Restful API的Controller.\n *\n * @author calvin\n */\n@RestController\n@RequestMapping(value = \"/api/v1/task\")\npublic class TaskRestController {\n\n    private static Logger logger = LoggerFactory.getLogger(TaskRestController.class);\n\n    @Autowired\n    private TaskService taskService;\n\n    @Autowired\n    private Validator validator;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaTypes.JSON_UTF_8)\n    public List<Task> list() {\n        return taskService.getAllTask();\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.GET, produces = MediaTypes.JSON_UTF_8)\n    public Task get(@PathVariable(\"id\") Long id) {\n        Task task = taskService.getTask(id);\n        if (task == null) {\n            String message = \"任务不存在(id:\" + id + \")\";\n            logger.warn(message);\n            throw new RestException(HttpStatus.NOT_FOUND, message);\n        }\n        return task;\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaTypes.JSON)\n    public ResponseEntity<?> create(@RequestBody Task task, UriComponentsBuilder uriBuilder) {\n        // 调用JSR303 Bean Validator进行校验, 异常将由RestExceptionHandler统一处理.\n        BeanValidators.validateWithException(validator, task);\n        // 保存任务\n        taskService.saveTask(task);\n        // 按照Restful风格约定，创建指向新任务的url, 也可以直接返回id或对象.\n        Long id = task.getId();\n        URI uri = uriBuilder.path(\"/api/v1/task/\" + id).build().toUri();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setLocation(uri);\n        return new ResponseEntity(headers, HttpStatus.CREATED);\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.PUT, consumes = MediaTypes.JSON)\n    // 按Restful风格约定，返回204状态码, 无内容. 也可以返回200状态码.\n    @ResponseStatus(HttpStatus.NO_CONTENT)\n    public void update(@RequestBody Task task) {\n        // 调用JSR303 Bean Validator进行校验, 异常将由RestExceptionHandler统一处理.\n        BeanValidators.validateWithException(validator, task);\n        // 保存任务\n        taskService.saveTask(task);\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.DELETE)\n    @ResponseStatus(HttpStatus.NO_CONTENT)\n    public void delete(@PathVariable(\"id\") Long id) {\n        taskService.deleteTask(id);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/rest/TaskRestControllerTest0.java",
		"test_prompt": "// TaskRestControllerTest0.java\npackage org.springside.examples.quickstart.rest;\n\nimport java.net.URI;\nimport java.util.List;\nimport javax.validation.Validator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.util.UriComponentsBuilder;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.web.MediaTypes;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TaskRestController}.\n* It contains ten unit test cases for the {@link TaskRestController#list()} method.\n*/\nclass TaskRestControllerTest0 {"
	},
	{
		"original_code": "// TaskRestController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.rest;\n\nimport java.net.URI;\nimport java.util.List;\nimport javax.validation.Validator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.util.UriComponentsBuilder;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.web.MediaTypes;\n\n/**\n * Task的Restful API的Controller.\n *\n * @author calvin\n */\n@RestController\n@RequestMapping(value = \"/api/v1/task\")\npublic class TaskRestController {\n\n    private static Logger logger = LoggerFactory.getLogger(TaskRestController.class);\n\n    @Autowired\n    private TaskService taskService;\n\n    @Autowired\n    private Validator validator;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaTypes.JSON_UTF_8)\n    public List<Task> list() {\n        return taskService.getAllTask();\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.GET, produces = MediaTypes.JSON_UTF_8)\n    public Task get(@PathVariable(\"id\") Long id) {\n        Task task = taskService.getTask(id);\n        if (task == null) {\n            String message = \"任务不存在(id:\" + id + \")\";\n            logger.warn(message);\n            throw new RestException(HttpStatus.NOT_FOUND, message);\n        }\n        return task;\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaTypes.JSON)\n    public ResponseEntity<?> create(@RequestBody Task task, UriComponentsBuilder uriBuilder) {\n        // 调用JSR303 Bean Validator进行校验, 异常将由RestExceptionHandler统一处理.\n        BeanValidators.validateWithException(validator, task);\n        // 保存任务\n        taskService.saveTask(task);\n        // 按照Restful风格约定，创建指向新任务的url, 也可以直接返回id或对象.\n        Long id = task.getId();\n        URI uri = uriBuilder.path(\"/api/v1/task/\" + id).build().toUri();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setLocation(uri);\n        return new ResponseEntity(headers, HttpStatus.CREATED);\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.PUT, consumes = MediaTypes.JSON)\n    // 按Restful风格约定，返回204状态码, 无内容. 也可以返回200状态码.\n    @ResponseStatus(HttpStatus.NO_CONTENT)\n    public void update(@RequestBody Task task) {\n        // 调用JSR303 Bean Validator进行校验, 异常将由RestExceptionHandler统一处理.\n        BeanValidators.validateWithException(validator, task);\n        // 保存任务\n        taskService.saveTask(task);\n    }\n\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.DELETE)\n    @ResponseStatus(HttpStatus.NO_CONTENT)\n    public void delete(@PathVariable(\"id\") Long id) {\n        taskService.deleteTask(id);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/rest/TaskRestControllerTest1.java",
		"test_prompt": "// TaskRestControllerTest1.java\npackage org.springside.examples.quickstart.rest;\n\nimport java.net.URI;\nimport java.util.List;\nimport javax.validation.Validator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.util.UriComponentsBuilder;\nimport org.springside.examples.quickstart.entity.Task;\nimport org.springside.examples.quickstart.service.task.TaskService;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.web.MediaTypes;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TaskRestController}.\n* It contains ten unit test cases for the {@link TaskRestController#create(Task, UriComponentsBuilder)} method.\n*/\nclass TaskRestControllerTest1 {"
	},
	{
		"original_code": "// RestExceptionHandler.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.rest;\n\nimport java.util.Map;\nimport javax.validation.ConstraintViolationException;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.mapper.JsonMapper;\nimport org.springside.modules.web.MediaTypes;\n\n/**\n * 自定义ExceptionHandler，专门处理Restful异常.\n *\n * @author calvin\n */\n// 会被Spring-MVC自动扫描，但又不属于Controller的annotation。\n@ControllerAdvice\npublic class RestExceptionHandler extends ResponseEntityExceptionHandler {\n\n    private JsonMapper jsonMapper = new JsonMapper();\n\n    /**\n     * 处理RestException.\n     */\n    @ExceptionHandler(value = { RestException.class })\n    public final ResponseEntity<?> handleException(RestException ex, WebRequest request) {\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.parseMediaType(MediaTypes.TEXT_PLAIN_UTF_8));\n        return handleExceptionInternal(ex, ex.getMessage(), headers, ex.status, request);\n    }\n\n    /**\n     * 处理JSR311 Validation异常.\n     */\n    @ExceptionHandler(value = { ConstraintViolationException.class })\n    public final ResponseEntity<?> handleException(ConstraintViolationException ex, WebRequest request) {\n        Map<String, String> errors = BeanValidators.extractPropertyAndMessage(ex.getConstraintViolations());\n        String body = jsonMapper.toJson(errors);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.parseMediaType(MediaTypes.TEXT_PLAIN_UTF_8));\n        return handleExceptionInternal(ex, body, headers, HttpStatus.BAD_REQUEST, request);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/rest/RestExceptionHandlerTest0.java",
		"test_prompt": "// RestExceptionHandlerTest0.java\npackage org.springside.examples.quickstart.rest;\n\nimport java.util.Map;\nimport javax.validation.ConstraintViolationException;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.mapper.JsonMapper;\nimport org.springside.modules.web.MediaTypes;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RestExceptionHandler}.\n* It contains ten unit test cases for the {@link RestExceptionHandler#handleException(RestException, WebRequest)} method.\n*/\nclass RestExceptionHandlerTest0 {"
	},
	{
		"original_code": "// RestExceptionHandler.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.quickstart.rest;\n\nimport java.util.Map;\nimport javax.validation.ConstraintViolationException;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.mapper.JsonMapper;\nimport org.springside.modules.web.MediaTypes;\n\n/**\n * 自定义ExceptionHandler，专门处理Restful异常.\n *\n * @author calvin\n */\n// 会被Spring-MVC自动扫描，但又不属于Controller的annotation。\n@ControllerAdvice\npublic class RestExceptionHandler extends ResponseEntityExceptionHandler {\n\n    private JsonMapper jsonMapper = new JsonMapper();\n\n    /**\n     * 处理RestException.\n     */\n    @ExceptionHandler(value = { RestException.class })\n    public final ResponseEntity<?> handleException(RestException ex, WebRequest request) {\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.parseMediaType(MediaTypes.TEXT_PLAIN_UTF_8));\n        return handleExceptionInternal(ex, ex.getMessage(), headers, ex.status, request);\n    }\n\n    /**\n     * 处理JSR311 Validation异常.\n     */\n    @ExceptionHandler(value = { ConstraintViolationException.class })\n    public final ResponseEntity<?> handleException(ConstraintViolationException ex, WebRequest request) {\n        Map<String, String> errors = BeanValidators.extractPropertyAndMessage(ex.getConstraintViolations());\n        String body = jsonMapper.toJson(errors);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.parseMediaType(MediaTypes.TEXT_PLAIN_UTF_8));\n        return handleExceptionInternal(ex, body, headers, HttpStatus.BAD_REQUEST, request);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/quickstart/src/main/java/org/springside/examples/quickstart/rest/RestExceptionHandlerTest1.java",
		"test_prompt": "// RestExceptionHandlerTest1.java\npackage org.springside.examples.quickstart.rest;\n\nimport java.util.Map;\nimport javax.validation.ConstraintViolationException;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.mapper.JsonMapper;\nimport org.springside.modules.web.MediaTypes;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RestExceptionHandler}.\n* It contains ten unit test cases for the {@link RestExceptionHandler#handleException(ConstraintViolationException, WebRequest)} method.\n*/\nclass RestExceptionHandlerTest1 {"
	},
	{
		"original_code": "// StoryController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.web;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class StoryController {\n\n    @RequestMapping(value = \"/story/{page}\")\n    public String story(@PathVariable(\"page\") String page) {\n        return \"story/\" + page;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/web/StoryControllerTest.java",
		"test_prompt": "// StoryControllerTest.java\npackage org.springside.examples.showcase.web;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StoryController}.\n* It contains ten unit test cases for the {@link StoryController#story(String)} method.\n*/\nclass StoryControllerTest {"
	},
	{
		"original_code": "// LoginController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.web;\n\nimport org.apache.shiro.web.filter.authc.FormAuthenticationFilter;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n/**\n * LoginController负责打开登录页面(GET请求)和登录出错页面(POST请求)，\n *\n * 真正登录的POST请求由Filter完成,\n *\n * @author calvin\n */\n@Controller\npublic class LoginController {\n\n    @RequestMapping(value = \"/login\", method = RequestMethod.GET)\n    public String login() {\n        return \"login\";\n    }\n\n    @RequestMapping(value = \"/login\", method = RequestMethod.POST)\n    public String fail(@RequestParam(FormAuthenticationFilter.DEFAULT_USERNAME_PARAM) String userName, Model model) {\n        model.addAttribute(FormAuthenticationFilter.DEFAULT_USERNAME_PARAM, userName);\n        return \"login\";\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/web/LoginControllerTest0.java",
		"test_prompt": "// LoginControllerTest0.java\npackage org.springside.examples.showcase.web;\n\nimport org.apache.shiro.web.filter.authc.FormAuthenticationFilter;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LoginController}.\n* It contains ten unit test cases for the {@link LoginController#login()} method.\n*/\nclass LoginControllerTest0 {"
	},
	{
		"original_code": "// LoginController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.web;\n\nimport org.apache.shiro.web.filter.authc.FormAuthenticationFilter;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n/**\n * LoginController负责打开登录页面(GET请求)和登录出错页面(POST请求)，\n *\n * 真正登录的POST请求由Filter完成,\n *\n * @author calvin\n */\n@Controller\npublic class LoginController {\n\n    @RequestMapping(value = \"/login\", method = RequestMethod.GET)\n    public String login() {\n        return \"login\";\n    }\n\n    @RequestMapping(value = \"/login\", method = RequestMethod.POST)\n    public String fail(@RequestParam(FormAuthenticationFilter.DEFAULT_USERNAME_PARAM) String userName, Model model) {\n        model.addAttribute(FormAuthenticationFilter.DEFAULT_USERNAME_PARAM, userName);\n        return \"login\";\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/web/LoginControllerTest1.java",
		"test_prompt": "// LoginControllerTest1.java\npackage org.springside.examples.showcase.web;\n\nimport org.apache.shiro.web.filter.authc.FormAuthenticationFilter;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LoginController}.\n* It contains ten unit test cases for the {@link LoginController#fail(String, Model)} method.\n*/\nclass LoginControllerTest1 {"
	},
	{
		"original_code": "// UserController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.web;\n\nimport java.util.List;\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.authz.annotation.Logical;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.apache.shiro.authz.annotation.RequiresRoles;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.WebDataBinder;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.service.AccountService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\n\n@Controller\n@RequestMapping(value = \"/account/user\")\npublic class UserController {\n\n    private static Map<String, String> allStatus = Maps.newHashMap();\n\n    static {\n        allStatus.put(\"enabled\", \"有效\");\n        allStatus.put(\"disabled\", \"无效\");\n    }\n\n    @Autowired\n    private AccountService accountService;\n\n    // 特别设定多个ReuireRoles之间为Or关系，而不是默认的And.\n    @RequiresRoles(value = { \"Admin\", \"User\" }, logical = Logical.OR)\n    @RequestMapping(value = \"\")\n    public String list(Model model, ServletRequest request) {\n        Map<String, Object> searchParams = Servlets.getParametersStartingWith(request, \"search_\");\n        List<User> users = accountService.searchUser(searchParams);\n        model.addAttribute(\"users\", users);\n        model.addAttribute(\"allStatus\", allStatus);\n        return \"account/userList\";\n    }\n\n    @RequiresRoles(\"Admin\")\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"user\", accountService.getUser(id));\n        model.addAttribute(\"allStatus\", allStatus);\n        model.addAttribute(\"allRoles\", accountService.getAllRole());\n        return \"account/userForm\";\n    }\n\n    /**\n     * 演示自行绑定表单中的checkBox roleList到对象中.\n     */\n    @RequiresPermissions(\"user:edit\")\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"user\") User user, @RequestParam(value = \"roleList\") List<Long> checkedRoleList, RedirectAttributes redirectAttributes) {\n        // bind roleList\n        user.getRoleList().clear();\n        for (Long roleId : checkedRoleList) {\n            Role role = new Role(roleId);\n            user.getRoleList().add(role);\n        }\n        accountService.saveUser(user);\n        redirectAttributes.addFlashAttribute(\"message\", \"保存用户成功\");\n        return \"redirect:/account/user\";\n    }\n\n    @RequestMapping(value = \"checkLoginName\")\n    @ResponseBody\n    public String checkLoginName(@RequestParam(\"oldLoginName\") String oldLoginName, @RequestParam(\"loginName\") String loginName) {\n        if (loginName.equals(oldLoginName)) {\n            return \"true\";\n        } else if (accountService.findUserByLoginName(loginName) == null) {\n            return \"true\";\n        }\n        return \"false\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出User对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getUser(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"user\", accountService.getUser(id));\n        }\n    }\n\n    /**\n     * 不自动绑定对象中的roleList属性，另行处理。\n     */\n    @InitBinder\n    protected void initBinder(WebDataBinder binder) {\n        binder.setDisallowedFields(\"roleList\");\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/web/UserControllerTest0.java",
		"test_prompt": "// UserControllerTest0.java\npackage org.springside.examples.showcase.web;\n\nimport java.util.List;\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.authz.annotation.Logical;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.apache.shiro.authz.annotation.RequiresRoles;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.WebDataBinder;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.service.AccountService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserController}.\n* It contains ten unit test cases for the {@link UserController#list(Model, ServletRequest)} method.\n*/\nclass UserControllerTest0 {"
	},
	{
		"original_code": "// UserController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.web;\n\nimport java.util.List;\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.authz.annotation.Logical;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.apache.shiro.authz.annotation.RequiresRoles;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.WebDataBinder;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.service.AccountService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\n\n@Controller\n@RequestMapping(value = \"/account/user\")\npublic class UserController {\n\n    private static Map<String, String> allStatus = Maps.newHashMap();\n\n    static {\n        allStatus.put(\"enabled\", \"有效\");\n        allStatus.put(\"disabled\", \"无效\");\n    }\n\n    @Autowired\n    private AccountService accountService;\n\n    // 特别设定多个ReuireRoles之间为Or关系，而不是默认的And.\n    @RequiresRoles(value = { \"Admin\", \"User\" }, logical = Logical.OR)\n    @RequestMapping(value = \"\")\n    public String list(Model model, ServletRequest request) {\n        Map<String, Object> searchParams = Servlets.getParametersStartingWith(request, \"search_\");\n        List<User> users = accountService.searchUser(searchParams);\n        model.addAttribute(\"users\", users);\n        model.addAttribute(\"allStatus\", allStatus);\n        return \"account/userList\";\n    }\n\n    @RequiresRoles(\"Admin\")\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"user\", accountService.getUser(id));\n        model.addAttribute(\"allStatus\", allStatus);\n        model.addAttribute(\"allRoles\", accountService.getAllRole());\n        return \"account/userForm\";\n    }\n\n    /**\n     * 演示自行绑定表单中的checkBox roleList到对象中.\n     */\n    @RequiresPermissions(\"user:edit\")\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"user\") User user, @RequestParam(value = \"roleList\") List<Long> checkedRoleList, RedirectAttributes redirectAttributes) {\n        // bind roleList\n        user.getRoleList().clear();\n        for (Long roleId : checkedRoleList) {\n            Role role = new Role(roleId);\n            user.getRoleList().add(role);\n        }\n        accountService.saveUser(user);\n        redirectAttributes.addFlashAttribute(\"message\", \"保存用户成功\");\n        return \"redirect:/account/user\";\n    }\n\n    @RequestMapping(value = \"checkLoginName\")\n    @ResponseBody\n    public String checkLoginName(@RequestParam(\"oldLoginName\") String oldLoginName, @RequestParam(\"loginName\") String loginName) {\n        if (loginName.equals(oldLoginName)) {\n            return \"true\";\n        } else if (accountService.findUserByLoginName(loginName) == null) {\n            return \"true\";\n        }\n        return \"false\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出User对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getUser(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"user\", accountService.getUser(id));\n        }\n    }\n\n    /**\n     * 不自动绑定对象中的roleList属性，另行处理。\n     */\n    @InitBinder\n    protected void initBinder(WebDataBinder binder) {\n        binder.setDisallowedFields(\"roleList\");\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/web/UserControllerTest1.java",
		"test_prompt": "// UserControllerTest1.java\npackage org.springside.examples.showcase.web;\n\nimport java.util.List;\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.authz.annotation.Logical;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.apache.shiro.authz.annotation.RequiresRoles;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.WebDataBinder;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.service.AccountService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserController}.\n* It contains ten unit test cases for the {@link UserController#updateForm(Long, Model)} method.\n*/\nclass UserControllerTest1 {"
	},
	{
		"original_code": "// UserController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.web;\n\nimport java.util.List;\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.authz.annotation.Logical;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.apache.shiro.authz.annotation.RequiresRoles;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.WebDataBinder;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.service.AccountService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\n\n@Controller\n@RequestMapping(value = \"/account/user\")\npublic class UserController {\n\n    private static Map<String, String> allStatus = Maps.newHashMap();\n\n    static {\n        allStatus.put(\"enabled\", \"有效\");\n        allStatus.put(\"disabled\", \"无效\");\n    }\n\n    @Autowired\n    private AccountService accountService;\n\n    // 特别设定多个ReuireRoles之间为Or关系，而不是默认的And.\n    @RequiresRoles(value = { \"Admin\", \"User\" }, logical = Logical.OR)\n    @RequestMapping(value = \"\")\n    public String list(Model model, ServletRequest request) {\n        Map<String, Object> searchParams = Servlets.getParametersStartingWith(request, \"search_\");\n        List<User> users = accountService.searchUser(searchParams);\n        model.addAttribute(\"users\", users);\n        model.addAttribute(\"allStatus\", allStatus);\n        return \"account/userList\";\n    }\n\n    @RequiresRoles(\"Admin\")\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"user\", accountService.getUser(id));\n        model.addAttribute(\"allStatus\", allStatus);\n        model.addAttribute(\"allRoles\", accountService.getAllRole());\n        return \"account/userForm\";\n    }\n\n    /**\n     * 演示自行绑定表单中的checkBox roleList到对象中.\n     */\n    @RequiresPermissions(\"user:edit\")\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"user\") User user, @RequestParam(value = \"roleList\") List<Long> checkedRoleList, RedirectAttributes redirectAttributes) {\n        // bind roleList\n        user.getRoleList().clear();\n        for (Long roleId : checkedRoleList) {\n            Role role = new Role(roleId);\n            user.getRoleList().add(role);\n        }\n        accountService.saveUser(user);\n        redirectAttributes.addFlashAttribute(\"message\", \"保存用户成功\");\n        return \"redirect:/account/user\";\n    }\n\n    @RequestMapping(value = \"checkLoginName\")\n    @ResponseBody\n    public String checkLoginName(@RequestParam(\"oldLoginName\") String oldLoginName, @RequestParam(\"loginName\") String loginName) {\n        if (loginName.equals(oldLoginName)) {\n            return \"true\";\n        } else if (accountService.findUserByLoginName(loginName) == null) {\n            return \"true\";\n        }\n        return \"false\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出User对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getUser(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"user\", accountService.getUser(id));\n        }\n    }\n\n    /**\n     * 不自动绑定对象中的roleList属性，另行处理。\n     */\n    @InitBinder\n    protected void initBinder(WebDataBinder binder) {\n        binder.setDisallowedFields(\"roleList\");\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/web/UserControllerTest2.java",
		"test_prompt": "// UserControllerTest2.java\npackage org.springside.examples.showcase.web;\n\nimport java.util.List;\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.authz.annotation.Logical;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.apache.shiro.authz.annotation.RequiresRoles;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.WebDataBinder;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.service.AccountService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserController}.\n* It contains ten unit test cases for the {@link UserController#update(User, List, RedirectAttributes)} method.\n*/\nclass UserControllerTest2 {"
	},
	{
		"original_code": "// UserController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.web;\n\nimport java.util.List;\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.authz.annotation.Logical;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.apache.shiro.authz.annotation.RequiresRoles;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.WebDataBinder;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.service.AccountService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\n\n@Controller\n@RequestMapping(value = \"/account/user\")\npublic class UserController {\n\n    private static Map<String, String> allStatus = Maps.newHashMap();\n\n    static {\n        allStatus.put(\"enabled\", \"有效\");\n        allStatus.put(\"disabled\", \"无效\");\n    }\n\n    @Autowired\n    private AccountService accountService;\n\n    // 特别设定多个ReuireRoles之间为Or关系，而不是默认的And.\n    @RequiresRoles(value = { \"Admin\", \"User\" }, logical = Logical.OR)\n    @RequestMapping(value = \"\")\n    public String list(Model model, ServletRequest request) {\n        Map<String, Object> searchParams = Servlets.getParametersStartingWith(request, \"search_\");\n        List<User> users = accountService.searchUser(searchParams);\n        model.addAttribute(\"users\", users);\n        model.addAttribute(\"allStatus\", allStatus);\n        return \"account/userList\";\n    }\n\n    @RequiresRoles(\"Admin\")\n    @RequestMapping(value = \"update/{id}\", method = RequestMethod.GET)\n    public String updateForm(@PathVariable(\"id\") Long id, Model model) {\n        model.addAttribute(\"user\", accountService.getUser(id));\n        model.addAttribute(\"allStatus\", allStatus);\n        model.addAttribute(\"allRoles\", accountService.getAllRole());\n        return \"account/userForm\";\n    }\n\n    /**\n     * 演示自行绑定表单中的checkBox roleList到对象中.\n     */\n    @RequiresPermissions(\"user:edit\")\n    @RequestMapping(value = \"update\", method = RequestMethod.POST)\n    public String update(@Valid @ModelAttribute(\"user\") User user, @RequestParam(value = \"roleList\") List<Long> checkedRoleList, RedirectAttributes redirectAttributes) {\n        // bind roleList\n        user.getRoleList().clear();\n        for (Long roleId : checkedRoleList) {\n            Role role = new Role(roleId);\n            user.getRoleList().add(role);\n        }\n        accountService.saveUser(user);\n        redirectAttributes.addFlashAttribute(\"message\", \"保存用户成功\");\n        return \"redirect:/account/user\";\n    }\n\n    @RequestMapping(value = \"checkLoginName\")\n    @ResponseBody\n    public String checkLoginName(@RequestParam(\"oldLoginName\") String oldLoginName, @RequestParam(\"loginName\") String loginName) {\n        if (loginName.equals(oldLoginName)) {\n            return \"true\";\n        } else if (accountService.findUserByLoginName(loginName) == null) {\n            return \"true\";\n        }\n        return \"false\";\n    }\n\n    /**\n     * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出User对象,再把Form提交的内容绑定到该对象上。\n     * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.\n     */\n    @ModelAttribute\n    public void getUser(@RequestParam(value = \"id\", defaultValue = \"-1\") Long id, Model model) {\n        if (id != -1) {\n            model.addAttribute(\"user\", accountService.getUser(id));\n        }\n    }\n\n    /**\n     * 不自动绑定对象中的roleList属性，另行处理。\n     */\n    @InitBinder\n    protected void initBinder(WebDataBinder binder) {\n        binder.setDisallowedFields(\"roleList\");\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/web/UserControllerTest3.java",
		"test_prompt": "// UserControllerTest3.java\npackage org.springside.examples.showcase.web;\n\nimport java.util.List;\nimport java.util.Map;\nimport javax.servlet.ServletRequest;\nimport javax.validation.Valid;\nimport org.apache.shiro.authz.annotation.Logical;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.apache.shiro.authz.annotation.RequiresRoles;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.WebDataBinder;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.service.AccountService;\nimport org.springside.modules.web.Servlets;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserController}.\n* It contains ten unit test cases for the {@link UserController#checkLoginName(String, String)} method.\n*/\nclass UserControllerTest3 {"
	},
	{
		"original_code": "// AccountSoapServiceImpl.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.webservice.soap;\n\nimport java.util.List;\nimport javax.jws.WebService;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.apache.cxf.feature.Features;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.DuplicateKeyException;\nimport org.springside.examples.showcase.entity.Team;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.service.AccountEffectiveService;\nimport org.springside.examples.showcase.webservice.soap.response.GetTeamDetailResult;\nimport org.springside.examples.showcase.webservice.soap.response.GetUserResult;\nimport org.springside.examples.showcase.webservice.soap.response.SearchUserResult;\nimport org.springside.examples.showcase.webservice.soap.response.base.IdResult;\nimport org.springside.examples.showcase.webservice.soap.response.base.WSResult;\nimport org.springside.examples.showcase.webservice.soap.response.dto.TeamDTO;\nimport org.springside.examples.showcase.webservice.soap.response.dto.UserDTO;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.mapper.BeanMapper;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * WebService服务端实现类.\n *\n * 为演示方便，直接调用了Dao层.客户端实现见功能测试用例.\n *\n * @author calvin\n */\n// serviceName指明WSDL中<wsdl:service>与<wsdl:binding>元素的名称, endpointInterface属性指向Interface类全称.\n@WebService(serviceName = \"AccountService\", endpointInterface = \"org.springside.examples.showcase.webservice.soap.AccountSoapService\", targetNamespace = WsConstants.NS)\n@Features(features = \"org.apache.cxf.feature.LoggingFeature\")\npublic class AccountSoapServiceImpl implements AccountSoapService {\n\n    private static Logger logger = LoggerFactory.getLogger(AccountSoapServiceImpl.class);\n\n    @Autowired\n    private AccountEffectiveService accountService;\n\n    @Autowired\n    private Validator validator;\n\n    /**\n     * @see AccountSoapService#getTeamDetail(Long)\n     */\n    @Override\n    public GetTeamDetailResult getTeamDetail(Long id) {\n        GetTeamDetailResult result = new GetTeamDetailResult();\n        try {\n            Validate.notNull(id, \"id参数为空\");\n            Team team = accountService.getTeamWithDetail(id);\n            Validate.notNull(team, \"项目不存在(id:\" + id + \")\");\n            TeamDTO dto = BeanMapper.map(team, TeamDTO.class);\n            result.setTeam(dto);\n            return result;\n        } catch (IllegalArgumentException e) {\n            return handleParameterError(result, e);\n        } catch (RuntimeException e) {\n            return handleGeneralError(result, e);\n        }\n    }\n\n    /**\n     * @see AccountSoapService#getUser(Long)\n     */\n    @Override\n    public GetUserResult getUser(Long id) {\n        GetUserResult result = new GetUserResult();\n        try {\n            Validate.notNull(id, \"id参数为空\");\n            User user = accountService.getUser(id);\n            Validate.notNull(user, \"用户不存在(id:\" + id + \")\");\n            UserDTO dto = BeanMapper.map(user, UserDTO.class);\n            result.setUser(dto);\n            return result;\n        } catch (IllegalArgumentException e) {\n            return handleParameterError(result, e);\n        } catch (RuntimeException e) {\n            return handleGeneralError(result, e);\n        }\n    }\n\n    /**\n     * @see AccountSoapService#searchUser(String, String)\n     */\n    @Override\n    public SearchUserResult searchUser(String loginName, String name) {\n        SearchUserResult result = new SearchUserResult();\n        try {\n            List<User> userList = accountService.searchUser(loginName, name);\n            List<UserDTO> dtoList = BeanMapper.mapList(userList, UserDTO.class);\n            result.setUserList(dtoList);\n            return result;\n        } catch (RuntimeException e) {\n            return handleGeneralError(result, e);\n        }\n    }\n\n    /**\n     * @see AccountSoapService#createUser(UserDTO)\n     */\n    @Override\n    public IdResult createUser(UserDTO user) {\n        IdResult result = new IdResult();\n        try {\n            Validate.notNull(user, \"用户参数为空\");\n            User userEntity = BeanMapper.map(user, User.class);\n            BeanValidators.validateWithException(validator, userEntity);\n            accountService.saveUser(userEntity);\n            return new IdResult(userEntity.getId());\n        } catch (ConstraintViolationException e) {\n            String message = StringUtils.join(BeanValidators.extractPropertyAndMessageAsList(e, \" \"), \"\\n\");\n            return handleParameterError(result, e, message);\n        } catch (RuntimeException e) {\n            if (Exceptions.isCausedBy(e, DuplicateKeyException.class)) {\n                String message = \"新建用户参数存在唯一性冲突(用户:\" + user + \")\";\n                return handleParameterError(result, e, message);\n            } else {\n                return handleGeneralError(result, e);\n            }\n        }\n    }\n\n    private <T extends WSResult> T handleParameterError(T result, Exception e, String message) {\n        logger.error(message, e.getMessage());\n        result.setError(WSResult.PARAMETER_ERROR, message);\n        return result;\n    }\n\n    private <T extends WSResult> T handleParameterError(T result, Exception e) {\n        logger.error(e.getMessage());\n        result.setError(WSResult.PARAMETER_ERROR, e.getMessage());\n        return result;\n    }\n\n    private <T extends WSResult> T handleGeneralError(T result, Exception e) {\n        logger.error(e.getMessage());\n        result.setDefaultError();\n        return result;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/webservice/soap/AccountSoapServiceImplTest0.java",
		"test_prompt": "// AccountSoapServiceImplTest0.java\npackage org.springside.examples.showcase.webservice.soap;\n\nimport java.util.List;\nimport javax.jws.WebService;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.apache.cxf.feature.Features;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.DuplicateKeyException;\nimport org.springside.examples.showcase.entity.Team;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.service.AccountEffectiveService;\nimport org.springside.examples.showcase.webservice.soap.response.GetTeamDetailResult;\nimport org.springside.examples.showcase.webservice.soap.response.GetUserResult;\nimport org.springside.examples.showcase.webservice.soap.response.SearchUserResult;\nimport org.springside.examples.showcase.webservice.soap.response.base.IdResult;\nimport org.springside.examples.showcase.webservice.soap.response.base.WSResult;\nimport org.springside.examples.showcase.webservice.soap.response.dto.TeamDTO;\nimport org.springside.examples.showcase.webservice.soap.response.dto.UserDTO;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.mapper.BeanMapper;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AccountSoapServiceImpl}.\n* It contains ten unit test cases for the {@link AccountSoapServiceImpl#searchUser(String, String)} method.\n*/\nclass AccountSoapServiceImplTest0 {"
	},
	{
		"original_code": "// AccountSoapServiceImpl.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.webservice.soap;\n\nimport java.util.List;\nimport javax.jws.WebService;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.apache.cxf.feature.Features;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.DuplicateKeyException;\nimport org.springside.examples.showcase.entity.Team;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.service.AccountEffectiveService;\nimport org.springside.examples.showcase.webservice.soap.response.GetTeamDetailResult;\nimport org.springside.examples.showcase.webservice.soap.response.GetUserResult;\nimport org.springside.examples.showcase.webservice.soap.response.SearchUserResult;\nimport org.springside.examples.showcase.webservice.soap.response.base.IdResult;\nimport org.springside.examples.showcase.webservice.soap.response.base.WSResult;\nimport org.springside.examples.showcase.webservice.soap.response.dto.TeamDTO;\nimport org.springside.examples.showcase.webservice.soap.response.dto.UserDTO;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.mapper.BeanMapper;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * WebService服务端实现类.\n *\n * 为演示方便，直接调用了Dao层.客户端实现见功能测试用例.\n *\n * @author calvin\n */\n// serviceName指明WSDL中<wsdl:service>与<wsdl:binding>元素的名称, endpointInterface属性指向Interface类全称.\n@WebService(serviceName = \"AccountService\", endpointInterface = \"org.springside.examples.showcase.webservice.soap.AccountSoapService\", targetNamespace = WsConstants.NS)\n@Features(features = \"org.apache.cxf.feature.LoggingFeature\")\npublic class AccountSoapServiceImpl implements AccountSoapService {\n\n    private static Logger logger = LoggerFactory.getLogger(AccountSoapServiceImpl.class);\n\n    @Autowired\n    private AccountEffectiveService accountService;\n\n    @Autowired\n    private Validator validator;\n\n    /**\n     * @see AccountSoapService#getTeamDetail(Long)\n     */\n    @Override\n    public GetTeamDetailResult getTeamDetail(Long id) {\n        GetTeamDetailResult result = new GetTeamDetailResult();\n        try {\n            Validate.notNull(id, \"id参数为空\");\n            Team team = accountService.getTeamWithDetail(id);\n            Validate.notNull(team, \"项目不存在(id:\" + id + \")\");\n            TeamDTO dto = BeanMapper.map(team, TeamDTO.class);\n            result.setTeam(dto);\n            return result;\n        } catch (IllegalArgumentException e) {\n            return handleParameterError(result, e);\n        } catch (RuntimeException e) {\n            return handleGeneralError(result, e);\n        }\n    }\n\n    /**\n     * @see AccountSoapService#getUser(Long)\n     */\n    @Override\n    public GetUserResult getUser(Long id) {\n        GetUserResult result = new GetUserResult();\n        try {\n            Validate.notNull(id, \"id参数为空\");\n            User user = accountService.getUser(id);\n            Validate.notNull(user, \"用户不存在(id:\" + id + \")\");\n            UserDTO dto = BeanMapper.map(user, UserDTO.class);\n            result.setUser(dto);\n            return result;\n        } catch (IllegalArgumentException e) {\n            return handleParameterError(result, e);\n        } catch (RuntimeException e) {\n            return handleGeneralError(result, e);\n        }\n    }\n\n    /**\n     * @see AccountSoapService#searchUser(String, String)\n     */\n    @Override\n    public SearchUserResult searchUser(String loginName, String name) {\n        SearchUserResult result = new SearchUserResult();\n        try {\n            List<User> userList = accountService.searchUser(loginName, name);\n            List<UserDTO> dtoList = BeanMapper.mapList(userList, UserDTO.class);\n            result.setUserList(dtoList);\n            return result;\n        } catch (RuntimeException e) {\n            return handleGeneralError(result, e);\n        }\n    }\n\n    /**\n     * @see AccountSoapService#createUser(UserDTO)\n     */\n    @Override\n    public IdResult createUser(UserDTO user) {\n        IdResult result = new IdResult();\n        try {\n            Validate.notNull(user, \"用户参数为空\");\n            User userEntity = BeanMapper.map(user, User.class);\n            BeanValidators.validateWithException(validator, userEntity);\n            accountService.saveUser(userEntity);\n            return new IdResult(userEntity.getId());\n        } catch (ConstraintViolationException e) {\n            String message = StringUtils.join(BeanValidators.extractPropertyAndMessageAsList(e, \" \"), \"\\n\");\n            return handleParameterError(result, e, message);\n        } catch (RuntimeException e) {\n            if (Exceptions.isCausedBy(e, DuplicateKeyException.class)) {\n                String message = \"新建用户参数存在唯一性冲突(用户:\" + user + \")\";\n                return handleParameterError(result, e, message);\n            } else {\n                return handleGeneralError(result, e);\n            }\n        }\n    }\n\n    private <T extends WSResult> T handleParameterError(T result, Exception e, String message) {\n        logger.error(message, e.getMessage());\n        result.setError(WSResult.PARAMETER_ERROR, message);\n        return result;\n    }\n\n    private <T extends WSResult> T handleParameterError(T result, Exception e) {\n        logger.error(e.getMessage());\n        result.setError(WSResult.PARAMETER_ERROR, e.getMessage());\n        return result;\n    }\n\n    private <T extends WSResult> T handleGeneralError(T result, Exception e) {\n        logger.error(e.getMessage());\n        result.setDefaultError();\n        return result;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/webservice/soap/AccountSoapServiceImplTest1.java",
		"test_prompt": "// AccountSoapServiceImplTest1.java\npackage org.springside.examples.showcase.webservice.soap;\n\nimport java.util.List;\nimport javax.jws.WebService;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.apache.cxf.feature.Features;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.dao.DuplicateKeyException;\nimport org.springside.examples.showcase.entity.Team;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.service.AccountEffectiveService;\nimport org.springside.examples.showcase.webservice.soap.response.GetTeamDetailResult;\nimport org.springside.examples.showcase.webservice.soap.response.GetUserResult;\nimport org.springside.examples.showcase.webservice.soap.response.SearchUserResult;\nimport org.springside.examples.showcase.webservice.soap.response.base.IdResult;\nimport org.springside.examples.showcase.webservice.soap.response.base.WSResult;\nimport org.springside.examples.showcase.webservice.soap.response.dto.TeamDTO;\nimport org.springside.examples.showcase.webservice.soap.response.dto.UserDTO;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.mapper.BeanMapper;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AccountSoapServiceImpl}.\n* It contains ten unit test cases for the {@link AccountSoapServiceImpl#createUser(UserDTO)} method.\n*/\nclass AccountSoapServiceImplTest1 {"
	},
	{
		"original_code": "// RestExceptionHandler.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.webservice.rest;\n\nimport java.util.Map;\nimport javax.validation.ConstraintViolationException;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.mapper.JsonMapper;\nimport org.springside.modules.web.MediaTypes;\n\n/**\n * 自定义ExceptionHandler，专门处理Restful异常.\n *\n * @author calvin\n */\n@ControllerAdvice\npublic class RestExceptionHandler extends ResponseEntityExceptionHandler {\n\n    private JsonMapper jsonMapper = new JsonMapper();\n\n    /**\n     * 处理RestException.\n     */\n    @ExceptionHandler(value = { RestException.class })\n    public final ResponseEntity<?> handleException(RestException ex, WebRequest request) {\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.parseMediaType(MediaTypes.TEXT_PLAIN_UTF_8));\n        return handleExceptionInternal(ex, ex.getMessage(), headers, ex.status, request);\n    }\n\n    /**\n     * 处理JSR311 Validation异常.\n     */\n    @ExceptionHandler(value = { ConstraintViolationException.class })\n    public final ResponseEntity<?> handleException(ConstraintViolationException ex, WebRequest request) {\n        Map<String, String> errors = BeanValidators.extractPropertyAndMessage(ex.getConstraintViolations());\n        String body = jsonMapper.toJson(errors);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.parseMediaType(MediaTypes.TEXT_PLAIN_UTF_8));\n        return handleExceptionInternal(ex, body, headers, HttpStatus.BAD_REQUEST, request);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/webservice/rest/RestExceptionHandlerTest0.java",
		"test_prompt": "// RestExceptionHandlerTest0.java\npackage org.springside.examples.showcase.webservice.rest;\n\nimport java.util.Map;\nimport javax.validation.ConstraintViolationException;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.mapper.JsonMapper;\nimport org.springside.modules.web.MediaTypes;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RestExceptionHandler}.\n* It contains ten unit test cases for the {@link RestExceptionHandler#handleException(RestException, WebRequest)} method.\n*/\nclass RestExceptionHandlerTest0 {"
	},
	{
		"original_code": "// RestExceptionHandler.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.webservice.rest;\n\nimport java.util.Map;\nimport javax.validation.ConstraintViolationException;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.mapper.JsonMapper;\nimport org.springside.modules.web.MediaTypes;\n\n/**\n * 自定义ExceptionHandler，专门处理Restful异常.\n *\n * @author calvin\n */\n@ControllerAdvice\npublic class RestExceptionHandler extends ResponseEntityExceptionHandler {\n\n    private JsonMapper jsonMapper = new JsonMapper();\n\n    /**\n     * 处理RestException.\n     */\n    @ExceptionHandler(value = { RestException.class })\n    public final ResponseEntity<?> handleException(RestException ex, WebRequest request) {\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.parseMediaType(MediaTypes.TEXT_PLAIN_UTF_8));\n        return handleExceptionInternal(ex, ex.getMessage(), headers, ex.status, request);\n    }\n\n    /**\n     * 处理JSR311 Validation异常.\n     */\n    @ExceptionHandler(value = { ConstraintViolationException.class })\n    public final ResponseEntity<?> handleException(ConstraintViolationException ex, WebRequest request) {\n        Map<String, String> errors = BeanValidators.extractPropertyAndMessage(ex.getConstraintViolations());\n        String body = jsonMapper.toJson(errors);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.parseMediaType(MediaTypes.TEXT_PLAIN_UTF_8));\n        return handleExceptionInternal(ex, body, headers, HttpStatus.BAD_REQUEST, request);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/webservice/rest/RestExceptionHandlerTest1.java",
		"test_prompt": "// RestExceptionHandlerTest1.java\npackage org.springside.examples.showcase.webservice.rest;\n\nimport java.util.Map;\nimport javax.validation.ConstraintViolationException;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\nimport org.springside.modules.beanvalidator.BeanValidators;\nimport org.springside.modules.mapper.JsonMapper;\nimport org.springside.modules.web.MediaTypes;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RestExceptionHandler}.\n* It contains ten unit test cases for the {@link RestExceptionHandler#handleException(ConstraintViolationException, WebRequest)} method.\n*/\nclass RestExceptionHandlerTest1 {"
	},
	{
		"original_code": "// AccountService.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.service;\n\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.SecurityUtils;\nimport org.javasimon.aop.Monitored;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springside.examples.showcase.demos.jms.simple.NotifyMessageProducer;\nimport org.springside.examples.showcase.demos.jmx.ApplicationStatistics;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.repository.jpa.RoleDao;\nimport org.springside.examples.showcase.repository.jpa.UserDao;\nimport org.springside.examples.showcase.service.ShiroDbRealm.ShiroUser;\nimport org.springside.modules.persistence.DynamicSpecifications;\nimport org.springside.modules.persistence.Hibernates;\nimport org.springside.modules.persistence.SearchFilter;\nimport org.springside.modules.security.utils.Digests;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.collect.Maps;\n\n/**\n * 用户管理业务类.\n *\n * @author calvin\n */\n// Spring Service Bean的标识.\n@Component\n@Transactional\n@Monitored\npublic class AccountService {\n\n    public static final String HASH_ALGORITHM = \"SHA-1\";\n\n    public static final int HASH_INTERATIONS = 1024;\n\n    private static final int SALT_SIZE = 8;\n\n    private static Logger logger = LoggerFactory.getLogger(AccountService.class);\n\n    private UserDao userDao;\n\n    private RoleDao roleDao;\n\n    private NotifyMessageProducer notifyProducer;\n\n    private ApplicationStatistics applicationStatistics;\n\n    private BusinessLogger businessLogger;\n\n    /**\n     * 在保存用户时,发送用户修改通知消息, 由消息接收者异步进行较为耗时的通知邮件发送.\n     *\n     * 如果企图修改超级用户,取出当前操作员用户,打印其信息然后抛出异常.\n     */\n    public void saveUser(User user) {\n        if (isSupervisor(user)) {\n            logger.warn(\"操作员{}尝试修改超级管理员用户\", getCurrentUserName());\n            throw new ServiceException(\"不能修改超级管理员用户\");\n        }\n        // 设定安全的密码，生成随机的salt并经过1024次 sha-1 hash\n        if (StringUtils.isNotBlank(user.getPlainPassword())) {\n            entryptPassword(user);\n        }\n        userDao.save(user);\n        // 发送JMS消息\n        if (notifyProducer != null) {\n            sendNotifyMessage(user);\n        }\n        // 运行统计演示\n        if (applicationStatistics != null) {\n            applicationStatistics.incrUpdateUserTimes();\n        }\n        // 业务日志演示\n        Map logData = Maps.newHashMap();\n        logData.put(\"userId\", user.getId());\n        businessLogger.log(\"USER\", \"UPDATE\", getCurrentUserName(), logData);\n    }\n\n    /**\n     * 按Id获得用户.\n     */\n    public User getUser(Long id) {\n        return userDao.findOne(id);\n    }\n\n    /**\n     * 获取全部用户，并在返回前对用户的延迟加载关联角色进行初始化.\n     */\n    public List<User> getAllUserInitialized() {\n        List<User> result = (List<User>) userDao.findAll();\n        for (User user : result) {\n            Hibernates.initLazyProperty(user.getRoleList());\n        }\n        return result;\n    }\n\n    /**\n     * 按登录名查询用户.\n     */\n    public User findUserByLoginName(String loginName) {\n        return userDao.findByLoginName(loginName);\n    }\n\n    /**\n     * 按名称查询用户, 并在返回前对用户的延迟加载关联角色进行初始化.\n     */\n    public User findUserByNameInitialized(String name) {\n        User user = userDao.findByName(name);\n        if (user != null) {\n            Hibernates.initLazyProperty(user.getRoleList());\n        }\n        return user;\n    }\n\n    /**\n     * 按页面传来的查询条件查询用户.\n     */\n    public List<User> searchUser(Map<String, Object> searchParams) {\n        Map<String, SearchFilter> filters = SearchFilter.parse(searchParams);\n        Specification<User> spec = DynamicSpecifications.bySearchFilter(filters.values(), User.class);\n        List<User> userList = userDao.findAll(spec);\n        // 运行统计演示\n        if (applicationStatistics != null) {\n            applicationStatistics.incrListUserTimes();\n        }\n        // 业务日志演示\n        if (businessLogger != null) {\n            businessLogger.log(\"USER\", \"LIST\", getCurrentUserName(), null);\n        }\n        return userList;\n    }\n\n    /**\n     * 获取当前用户数量.\n     */\n    public Long getUserCount() {\n        return userDao.count();\n    }\n\n    /**\n     * 判断是否超级管理员.\n     */\n    private boolean isSupervisor(User user) {\n        return ((user.getId() != null) && (user.getId() == 1L));\n    }\n\n    /**\n     * 设定安全的密码，生成随机的salt并经过1024次 sha-1 hash\n     */\n    private void entryptPassword(User user) {\n        byte[] salt = Digests.generateSalt(SALT_SIZE);\n        user.setSalt(Encodes.encodeHex(salt));\n        byte[] hashPassword = Digests.sha1(user.getPlainPassword().getBytes(), salt, HASH_INTERATIONS);\n        user.setPassword(Encodes.encodeHex(hashPassword));\n    }\n\n    /**\n     * 发送用户变更消息.\n     *\n     * 同时发送只有一个消费者的Queue消息与发布订阅模式有多个消费者的Topic消息.\n     */\n    private void sendNotifyMessage(User user) {\n        try {\n            notifyProducer.sendQueue(user);\n            notifyProducer.sendTopic(user);\n        } catch (Exception e) {\n            logger.error(\"消息发送失败\", e);\n        }\n    }\n\n    /**\n     * 取出Shiro中的当前用户LoginName.\n     */\n    private String getCurrentUserName() {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        return user.loginName;\n    }\n\n    // --------------------//\n    // Role Management //\n    // --------------------//\n    public List<Role> getAllRole() {\n        return (List<Role>) roleDao.findAll();\n    }\n\n    // -----------------//\n    // Setter methods //\n    // -----------------//\n    @Autowired\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    @Autowired\n    public void setRoleDao(RoleDao roleDao) {\n        this.roleDao = roleDao;\n    }\n\n    @Autowired\n    public void setBusinessLogger(BusinessLogger businessLogger) {\n        this.businessLogger = businessLogger;\n    }\n\n    @Autowired(required = false)\n    public void setNotifyProducer(NotifyMessageProducer notifyProducer) {\n        this.notifyProducer = notifyProducer;\n    }\n\n    @Autowired(required = false)\n    public void setApplicationStatistics(ApplicationStatistics applicationStatistics) {\n        this.applicationStatistics = applicationStatistics;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/service/AccountServiceTest0.java",
		"test_prompt": "// AccountServiceTest0.java\npackage org.springside.examples.showcase.service;\n\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.SecurityUtils;\nimport org.javasimon.aop.Monitored;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springside.examples.showcase.demos.jms.simple.NotifyMessageProducer;\nimport org.springside.examples.showcase.demos.jmx.ApplicationStatistics;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.repository.jpa.RoleDao;\nimport org.springside.examples.showcase.repository.jpa.UserDao;\nimport org.springside.examples.showcase.service.ShiroDbRealm.ShiroUser;\nimport org.springside.modules.persistence.DynamicSpecifications;\nimport org.springside.modules.persistence.Hibernates;\nimport org.springside.modules.persistence.SearchFilter;\nimport org.springside.modules.security.utils.Digests;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AccountService}.\n* It contains ten unit test cases for the {@link AccountService#findUserByLoginName(String)} method.\n*/\nclass AccountServiceTest0 {"
	},
	{
		"original_code": "// AccountService.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.service;\n\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.SecurityUtils;\nimport org.javasimon.aop.Monitored;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springside.examples.showcase.demos.jms.simple.NotifyMessageProducer;\nimport org.springside.examples.showcase.demos.jmx.ApplicationStatistics;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.repository.jpa.RoleDao;\nimport org.springside.examples.showcase.repository.jpa.UserDao;\nimport org.springside.examples.showcase.service.ShiroDbRealm.ShiroUser;\nimport org.springside.modules.persistence.DynamicSpecifications;\nimport org.springside.modules.persistence.Hibernates;\nimport org.springside.modules.persistence.SearchFilter;\nimport org.springside.modules.security.utils.Digests;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.collect.Maps;\n\n/**\n * 用户管理业务类.\n *\n * @author calvin\n */\n// Spring Service Bean的标识.\n@Component\n@Transactional\n@Monitored\npublic class AccountService {\n\n    public static final String HASH_ALGORITHM = \"SHA-1\";\n\n    public static final int HASH_INTERATIONS = 1024;\n\n    private static final int SALT_SIZE = 8;\n\n    private static Logger logger = LoggerFactory.getLogger(AccountService.class);\n\n    private UserDao userDao;\n\n    private RoleDao roleDao;\n\n    private NotifyMessageProducer notifyProducer;\n\n    private ApplicationStatistics applicationStatistics;\n\n    private BusinessLogger businessLogger;\n\n    /**\n     * 在保存用户时,发送用户修改通知消息, 由消息接收者异步进行较为耗时的通知邮件发送.\n     *\n     * 如果企图修改超级用户,取出当前操作员用户,打印其信息然后抛出异常.\n     */\n    public void saveUser(User user) {\n        if (isSupervisor(user)) {\n            logger.warn(\"操作员{}尝试修改超级管理员用户\", getCurrentUserName());\n            throw new ServiceException(\"不能修改超级管理员用户\");\n        }\n        // 设定安全的密码，生成随机的salt并经过1024次 sha-1 hash\n        if (StringUtils.isNotBlank(user.getPlainPassword())) {\n            entryptPassword(user);\n        }\n        userDao.save(user);\n        // 发送JMS消息\n        if (notifyProducer != null) {\n            sendNotifyMessage(user);\n        }\n        // 运行统计演示\n        if (applicationStatistics != null) {\n            applicationStatistics.incrUpdateUserTimes();\n        }\n        // 业务日志演示\n        Map logData = Maps.newHashMap();\n        logData.put(\"userId\", user.getId());\n        businessLogger.log(\"USER\", \"UPDATE\", getCurrentUserName(), logData);\n    }\n\n    /**\n     * 按Id获得用户.\n     */\n    public User getUser(Long id) {\n        return userDao.findOne(id);\n    }\n\n    /**\n     * 获取全部用户，并在返回前对用户的延迟加载关联角色进行初始化.\n     */\n    public List<User> getAllUserInitialized() {\n        List<User> result = (List<User>) userDao.findAll();\n        for (User user : result) {\n            Hibernates.initLazyProperty(user.getRoleList());\n        }\n        return result;\n    }\n\n    /**\n     * 按登录名查询用户.\n     */\n    public User findUserByLoginName(String loginName) {\n        return userDao.findByLoginName(loginName);\n    }\n\n    /**\n     * 按名称查询用户, 并在返回前对用户的延迟加载关联角色进行初始化.\n     */\n    public User findUserByNameInitialized(String name) {\n        User user = userDao.findByName(name);\n        if (user != null) {\n            Hibernates.initLazyProperty(user.getRoleList());\n        }\n        return user;\n    }\n\n    /**\n     * 按页面传来的查询条件查询用户.\n     */\n    public List<User> searchUser(Map<String, Object> searchParams) {\n        Map<String, SearchFilter> filters = SearchFilter.parse(searchParams);\n        Specification<User> spec = DynamicSpecifications.bySearchFilter(filters.values(), User.class);\n        List<User> userList = userDao.findAll(spec);\n        // 运行统计演示\n        if (applicationStatistics != null) {\n            applicationStatistics.incrListUserTimes();\n        }\n        // 业务日志演示\n        if (businessLogger != null) {\n            businessLogger.log(\"USER\", \"LIST\", getCurrentUserName(), null);\n        }\n        return userList;\n    }\n\n    /**\n     * 获取当前用户数量.\n     */\n    public Long getUserCount() {\n        return userDao.count();\n    }\n\n    /**\n     * 判断是否超级管理员.\n     */\n    private boolean isSupervisor(User user) {\n        return ((user.getId() != null) && (user.getId() == 1L));\n    }\n\n    /**\n     * 设定安全的密码，生成随机的salt并经过1024次 sha-1 hash\n     */\n    private void entryptPassword(User user) {\n        byte[] salt = Digests.generateSalt(SALT_SIZE);\n        user.setSalt(Encodes.encodeHex(salt));\n        byte[] hashPassword = Digests.sha1(user.getPlainPassword().getBytes(), salt, HASH_INTERATIONS);\n        user.setPassword(Encodes.encodeHex(hashPassword));\n    }\n\n    /**\n     * 发送用户变更消息.\n     *\n     * 同时发送只有一个消费者的Queue消息与发布订阅模式有多个消费者的Topic消息.\n     */\n    private void sendNotifyMessage(User user) {\n        try {\n            notifyProducer.sendQueue(user);\n            notifyProducer.sendTopic(user);\n        } catch (Exception e) {\n            logger.error(\"消息发送失败\", e);\n        }\n    }\n\n    /**\n     * 取出Shiro中的当前用户LoginName.\n     */\n    private String getCurrentUserName() {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        return user.loginName;\n    }\n\n    // --------------------//\n    // Role Management //\n    // --------------------//\n    public List<Role> getAllRole() {\n        return (List<Role>) roleDao.findAll();\n    }\n\n    // -----------------//\n    // Setter methods //\n    // -----------------//\n    @Autowired\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    @Autowired\n    public void setRoleDao(RoleDao roleDao) {\n        this.roleDao = roleDao;\n    }\n\n    @Autowired\n    public void setBusinessLogger(BusinessLogger businessLogger) {\n        this.businessLogger = businessLogger;\n    }\n\n    @Autowired(required = false)\n    public void setNotifyProducer(NotifyMessageProducer notifyProducer) {\n        this.notifyProducer = notifyProducer;\n    }\n\n    @Autowired(required = false)\n    public void setApplicationStatistics(ApplicationStatistics applicationStatistics) {\n        this.applicationStatistics = applicationStatistics;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/service/AccountServiceTest1.java",
		"test_prompt": "// AccountServiceTest1.java\npackage org.springside.examples.showcase.service;\n\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.SecurityUtils;\nimport org.javasimon.aop.Monitored;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springside.examples.showcase.demos.jms.simple.NotifyMessageProducer;\nimport org.springside.examples.showcase.demos.jmx.ApplicationStatistics;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.repository.jpa.RoleDao;\nimport org.springside.examples.showcase.repository.jpa.UserDao;\nimport org.springside.examples.showcase.service.ShiroDbRealm.ShiroUser;\nimport org.springside.modules.persistence.DynamicSpecifications;\nimport org.springside.modules.persistence.Hibernates;\nimport org.springside.modules.persistence.SearchFilter;\nimport org.springside.modules.security.utils.Digests;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AccountService}.\n* It contains ten unit test cases for the {@link AccountService#findUserByNameInitialized(String)} method.\n*/\nclass AccountServiceTest1 {"
	},
	{
		"original_code": "// AccountService.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.service;\n\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.SecurityUtils;\nimport org.javasimon.aop.Monitored;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springside.examples.showcase.demos.jms.simple.NotifyMessageProducer;\nimport org.springside.examples.showcase.demos.jmx.ApplicationStatistics;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.repository.jpa.RoleDao;\nimport org.springside.examples.showcase.repository.jpa.UserDao;\nimport org.springside.examples.showcase.service.ShiroDbRealm.ShiroUser;\nimport org.springside.modules.persistence.DynamicSpecifications;\nimport org.springside.modules.persistence.Hibernates;\nimport org.springside.modules.persistence.SearchFilter;\nimport org.springside.modules.security.utils.Digests;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.collect.Maps;\n\n/**\n * 用户管理业务类.\n *\n * @author calvin\n */\n// Spring Service Bean的标识.\n@Component\n@Transactional\n@Monitored\npublic class AccountService {\n\n    public static final String HASH_ALGORITHM = \"SHA-1\";\n\n    public static final int HASH_INTERATIONS = 1024;\n\n    private static final int SALT_SIZE = 8;\n\n    private static Logger logger = LoggerFactory.getLogger(AccountService.class);\n\n    private UserDao userDao;\n\n    private RoleDao roleDao;\n\n    private NotifyMessageProducer notifyProducer;\n\n    private ApplicationStatistics applicationStatistics;\n\n    private BusinessLogger businessLogger;\n\n    /**\n     * 在保存用户时,发送用户修改通知消息, 由消息接收者异步进行较为耗时的通知邮件发送.\n     *\n     * 如果企图修改超级用户,取出当前操作员用户,打印其信息然后抛出异常.\n     */\n    public void saveUser(User user) {\n        if (isSupervisor(user)) {\n            logger.warn(\"操作员{}尝试修改超级管理员用户\", getCurrentUserName());\n            throw new ServiceException(\"不能修改超级管理员用户\");\n        }\n        // 设定安全的密码，生成随机的salt并经过1024次 sha-1 hash\n        if (StringUtils.isNotBlank(user.getPlainPassword())) {\n            entryptPassword(user);\n        }\n        userDao.save(user);\n        // 发送JMS消息\n        if (notifyProducer != null) {\n            sendNotifyMessage(user);\n        }\n        // 运行统计演示\n        if (applicationStatistics != null) {\n            applicationStatistics.incrUpdateUserTimes();\n        }\n        // 业务日志演示\n        Map logData = Maps.newHashMap();\n        logData.put(\"userId\", user.getId());\n        businessLogger.log(\"USER\", \"UPDATE\", getCurrentUserName(), logData);\n    }\n\n    /**\n     * 按Id获得用户.\n     */\n    public User getUser(Long id) {\n        return userDao.findOne(id);\n    }\n\n    /**\n     * 获取全部用户，并在返回前对用户的延迟加载关联角色进行初始化.\n     */\n    public List<User> getAllUserInitialized() {\n        List<User> result = (List<User>) userDao.findAll();\n        for (User user : result) {\n            Hibernates.initLazyProperty(user.getRoleList());\n        }\n        return result;\n    }\n\n    /**\n     * 按登录名查询用户.\n     */\n    public User findUserByLoginName(String loginName) {\n        return userDao.findByLoginName(loginName);\n    }\n\n    /**\n     * 按名称查询用户, 并在返回前对用户的延迟加载关联角色进行初始化.\n     */\n    public User findUserByNameInitialized(String name) {\n        User user = userDao.findByName(name);\n        if (user != null) {\n            Hibernates.initLazyProperty(user.getRoleList());\n        }\n        return user;\n    }\n\n    /**\n     * 按页面传来的查询条件查询用户.\n     */\n    public List<User> searchUser(Map<String, Object> searchParams) {\n        Map<String, SearchFilter> filters = SearchFilter.parse(searchParams);\n        Specification<User> spec = DynamicSpecifications.bySearchFilter(filters.values(), User.class);\n        List<User> userList = userDao.findAll(spec);\n        // 运行统计演示\n        if (applicationStatistics != null) {\n            applicationStatistics.incrListUserTimes();\n        }\n        // 业务日志演示\n        if (businessLogger != null) {\n            businessLogger.log(\"USER\", \"LIST\", getCurrentUserName(), null);\n        }\n        return userList;\n    }\n\n    /**\n     * 获取当前用户数量.\n     */\n    public Long getUserCount() {\n        return userDao.count();\n    }\n\n    /**\n     * 判断是否超级管理员.\n     */\n    private boolean isSupervisor(User user) {\n        return ((user.getId() != null) && (user.getId() == 1L));\n    }\n\n    /**\n     * 设定安全的密码，生成随机的salt并经过1024次 sha-1 hash\n     */\n    private void entryptPassword(User user) {\n        byte[] salt = Digests.generateSalt(SALT_SIZE);\n        user.setSalt(Encodes.encodeHex(salt));\n        byte[] hashPassword = Digests.sha1(user.getPlainPassword().getBytes(), salt, HASH_INTERATIONS);\n        user.setPassword(Encodes.encodeHex(hashPassword));\n    }\n\n    /**\n     * 发送用户变更消息.\n     *\n     * 同时发送只有一个消费者的Queue消息与发布订阅模式有多个消费者的Topic消息.\n     */\n    private void sendNotifyMessage(User user) {\n        try {\n            notifyProducer.sendQueue(user);\n            notifyProducer.sendTopic(user);\n        } catch (Exception e) {\n            logger.error(\"消息发送失败\", e);\n        }\n    }\n\n    /**\n     * 取出Shiro中的当前用户LoginName.\n     */\n    private String getCurrentUserName() {\n        ShiroUser user = (ShiroUser) SecurityUtils.getSubject().getPrincipal();\n        return user.loginName;\n    }\n\n    // --------------------//\n    // Role Management //\n    // --------------------//\n    public List<Role> getAllRole() {\n        return (List<Role>) roleDao.findAll();\n    }\n\n    // -----------------//\n    // Setter methods //\n    // -----------------//\n    @Autowired\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    @Autowired\n    public void setRoleDao(RoleDao roleDao) {\n        this.roleDao = roleDao;\n    }\n\n    @Autowired\n    public void setBusinessLogger(BusinessLogger businessLogger) {\n        this.businessLogger = businessLogger;\n    }\n\n    @Autowired(required = false)\n    public void setNotifyProducer(NotifyMessageProducer notifyProducer) {\n        this.notifyProducer = notifyProducer;\n    }\n\n    @Autowired(required = false)\n    public void setApplicationStatistics(ApplicationStatistics applicationStatistics) {\n        this.applicationStatistics = applicationStatistics;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/service/AccountServiceTest2.java",
		"test_prompt": "// AccountServiceTest2.java\npackage org.springside.examples.showcase.service;\n\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.shiro.SecurityUtils;\nimport org.javasimon.aop.Monitored;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springside.examples.showcase.demos.jms.simple.NotifyMessageProducer;\nimport org.springside.examples.showcase.demos.jmx.ApplicationStatistics;\nimport org.springside.examples.showcase.entity.Role;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.repository.jpa.RoleDao;\nimport org.springside.examples.showcase.repository.jpa.UserDao;\nimport org.springside.examples.showcase.service.ShiroDbRealm.ShiroUser;\nimport org.springside.modules.persistence.DynamicSpecifications;\nimport org.springside.modules.persistence.Hibernates;\nimport org.springside.modules.persistence.SearchFilter;\nimport org.springside.modules.security.utils.Digests;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AccountService}.\n* It contains ten unit test cases for the {@link AccountService#searchUser(Map)} method.\n*/\nclass AccountServiceTest2 {"
	},
	{
		"original_code": "// AccountEffectiveService.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.service;\n\nimport java.util.List;\nimport java.util.Map;\nimport org.javasimon.aop.Monitored;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springside.examples.showcase.demos.cache.memcached.MemcachedObjectType;\nimport org.springside.examples.showcase.entity.Team;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.repository.mybatis.TeamMybatisDao;\nimport org.springside.examples.showcase.repository.mybatis.UserMybatisDao;\nimport org.springside.modules.cache.memcached.SpyMemcachedClient;\nimport org.springside.modules.mapper.JsonMapper;\nimport com.google.common.collect.Maps;\n\n/**\n * 更高效的AccountService实现，基于MyBatis + Memcached的方案，以JSON格式存储Memcached中的内容。\n *\n * @author calvin\n */\n@Component\n@Transactional\n@Monitored\npublic class AccountEffectiveService {\n\n    @Autowired\n    private UserMybatisDao userDao;\n\n    @Autowired\n    private TeamMybatisDao teamDao;\n\n    @Autowired(required = false)\n    private SpyMemcachedClient memcachedClient;\n\n    private final JsonMapper jsonMapper = JsonMapper.nonDefaultMapper();\n\n    public Team getTeamWithDetail(Long id) {\n        return teamDao.getWithDetail(id);\n    }\n\n    public User getUser(Long id) {\n        if (memcachedClient != null) {\n            return getUserWithMemcached(id);\n        } else {\n            return userDao.get(id);\n        }\n    }\n\n    /**\n     * 先访问Memcached, 使用JSON字符串存放对象以节约空间.\n     */\n    private User getUserWithMemcached(Long id) {\n        String key = MemcachedObjectType.USER.getPrefix() + id;\n        String jsonString = memcachedClient.get(key);\n        if (jsonString != null) {\n            return jsonMapper.fromJson(jsonString, User.class);\n        } else {\n            User user = userDao.get(id);\n            if (user != null) {\n                jsonString = jsonMapper.toJson(user);\n                memcachedClient.set(key, MemcachedObjectType.USER.getExpiredTime(), jsonString);\n            }\n            return user;\n        }\n    }\n\n    public List<User> searchUser(String loginName, String name) {\n        Map<String, Object> parameters = Maps.newHashMap();\n        parameters.put(\"loginName\", loginName);\n        parameters.put(\"name\", name);\n        return userDao.search(parameters);\n    }\n\n    public void saveUser(User user) {\n        userDao.save(user);\n    }\n\n    public void deleteUser(Long id) {\n        userDao.delete(id);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/service/AccountEffectiveServiceTest.java",
		"test_prompt": "// AccountEffectiveServiceTest.java\npackage org.springside.examples.showcase.service;\n\nimport java.util.List;\nimport java.util.Map;\nimport org.javasimon.aop.Monitored;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springside.examples.showcase.demos.cache.memcached.MemcachedObjectType;\nimport org.springside.examples.showcase.entity.Team;\nimport org.springside.examples.showcase.entity.User;\nimport org.springside.examples.showcase.repository.mybatis.TeamMybatisDao;\nimport org.springside.examples.showcase.repository.mybatis.UserMybatisDao;\nimport org.springside.modules.cache.memcached.SpyMemcachedClient;\nimport org.springside.modules.mapper.JsonMapper;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AccountEffectiveService}.\n* It contains ten unit test cases for the {@link AccountEffectiveService#searchUser(String, String)} method.\n*/\nclass AccountEffectiveServiceTest {"
	},
	{
		"original_code": "// JedisPoolFactory.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.demos.redis;\n\nimport org.springside.modules.nosql.redis.JedisUtils;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class JedisPoolFactory {\n\n    public static JedisPool createJedisPool(String defaultHost, int defaultPort, int defaultTimeout, int threadCount) {\n        // 合并命令行传入的系统变量与默认值\n        String host = System.getProperty(\"benchmark.host\", defaultHost);\n        String port = System.getProperty(\"benchmark.port\", String.valueOf(defaultPort));\n        String timeout = System.getProperty(\"benchmark.timeout\", String.valueOf(defaultTimeout));\n        // 设置Pool大小，设为与线程数等大，并屏蔽掉idle checking\n        JedisPoolConfig poolConfig = JedisUtils.createPoolConfig(threadCount, threadCount);\n        // create jedis pool\n        return new JedisPool(poolConfig, host, Integer.valueOf(port), Integer.valueOf(timeout));\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/demos/redis/JedisPoolFactoryTest.java",
		"test_prompt": "// JedisPoolFactoryTest.java\npackage org.springside.examples.showcase.demos.redis;\n\nimport org.springside.modules.nosql.redis.JedisUtils;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisPoolFactory}.\n* It contains ten unit test cases for the {@link JedisPoolFactory#createJedisPool(String, int, int, int)} method.\n*/\nclass JedisPoolFactoryTest {"
	},
	{
		"original_code": "// Session.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.demos.redis;\n\nimport java.util.Map;\nimport com.google.common.collect.Maps;\n\npublic class Session {\n\n    private String id;\n\n    private Map<String, Object> attributes = Maps.newHashMap();\n\n    public Session() {\n    }\n\n    public Session(String id) {\n        this.id = id;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public Map<String, Object> getAttributes() {\n        return attributes;\n    }\n\n    public void setAttributes(Map<String, Object> attributes) {\n        this.attributes = attributes;\n    }\n\n    public Session setAttrbute(String key, Object value) {\n        attributes.put(key, value);\n        return this;\n    }\n\n    public Session removeAttrbute(String key) {\n        attributes.remove(key);\n        return this;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/demos/redis/SessionTest.java",
		"test_prompt": "// SessionTest.java\npackage org.springside.examples.showcase.demos.redis;\n\nimport java.util.Map;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Session}.\n* It contains ten unit test cases for the {@link Session#removeAttrbute(String)} method.\n*/\nclass SessionTest {"
	},
	{
		"original_code": "// MashupServerController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.demos.web;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springside.modules.mapper.JsonMapper;\nimport org.springside.modules.web.MediaTypes;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\n\n/**\n * 输出JsonP格式的Mashup 服务端, 支持被跨域调用.\n * 有两种方式，一是自行用mapper的toJsonP()函数，一种是返回JSONPObject对象.\n *\n * @author calvin\n */\n@Controller\npublic class MashupServerController {\n\n    private static final String DEFAULT_JQUERY_JSONP_CALLBACK_PARM_NAME = \"callback\";\n\n    private JsonMapper mapper = new JsonMapper();\n\n    @RequestMapping(value = \"/web/mashup\", produces = MediaTypes.JAVASCRIPT_UTF_8)\n    @ResponseBody\n    public String mashup1(@RequestParam(DEFAULT_JQUERY_JSONP_CALLBACK_PARM_NAME) String callbackName) {\n        // 设置需要被格式化为JSON字符串的内容.\n        Map<String, String> map = Collections.singletonMap(\"content\", \"<p>你好，世界！</p>\");\n        // 渲染返回结果.\n        return mapper.toJsonP(callbackName, map);\n    }\n\n    @RequestMapping(value = \"/web/mashup2\", produces = MediaTypes.JAVASCRIPT_UTF_8)\n    @ResponseBody\n    public JSONPObject mashup2(@RequestParam(DEFAULT_JQUERY_JSONP_CALLBACK_PARM_NAME) String callbackName) {\n        // 设置需要被格式化为JSON字符串的内容.\n        Map<String, String> map = Collections.singletonMap(\"content\", \"<p>你好，世界！</p>\");\n        // 渲染返回结果.\n        return new JSONPObject(callbackName, map);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/demos/web/MashupServerControllerTest0.java",
		"test_prompt": "// MashupServerControllerTest0.java\npackage org.springside.examples.showcase.demos.web;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springside.modules.mapper.JsonMapper;\nimport org.springside.modules.web.MediaTypes;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MashupServerController}.\n* It contains ten unit test cases for the {@link MashupServerController#mashup1(String)} method.\n*/\nclass MashupServerControllerTest0 {"
	},
	{
		"original_code": "// MashupServerController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.demos.web;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springside.modules.mapper.JsonMapper;\nimport org.springside.modules.web.MediaTypes;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\n\n/**\n * 输出JsonP格式的Mashup 服务端, 支持被跨域调用.\n * 有两种方式，一是自行用mapper的toJsonP()函数，一种是返回JSONPObject对象.\n *\n * @author calvin\n */\n@Controller\npublic class MashupServerController {\n\n    private static final String DEFAULT_JQUERY_JSONP_CALLBACK_PARM_NAME = \"callback\";\n\n    private JsonMapper mapper = new JsonMapper();\n\n    @RequestMapping(value = \"/web/mashup\", produces = MediaTypes.JAVASCRIPT_UTF_8)\n    @ResponseBody\n    public String mashup1(@RequestParam(DEFAULT_JQUERY_JSONP_CALLBACK_PARM_NAME) String callbackName) {\n        // 设置需要被格式化为JSON字符串的内容.\n        Map<String, String> map = Collections.singletonMap(\"content\", \"<p>你好，世界！</p>\");\n        // 渲染返回结果.\n        return mapper.toJsonP(callbackName, map);\n    }\n\n    @RequestMapping(value = \"/web/mashup2\", produces = MediaTypes.JAVASCRIPT_UTF_8)\n    @ResponseBody\n    public JSONPObject mashup2(@RequestParam(DEFAULT_JQUERY_JSONP_CALLBACK_PARM_NAME) String callbackName) {\n        // 设置需要被格式化为JSON字符串的内容.\n        Map<String, String> map = Collections.singletonMap(\"content\", \"<p>你好，世界！</p>\");\n        // 渲染返回结果.\n        return new JSONPObject(callbackName, map);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/demos/web/MashupServerControllerTest1.java",
		"test_prompt": "// MashupServerControllerTest1.java\npackage org.springside.examples.showcase.demos.web;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springside.modules.mapper.JsonMapper;\nimport org.springside.modules.web.MediaTypes;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MashupServerController}.\n* It contains ten unit test cases for the {@link MashupServerController#mashup2(String)} method.\n*/\nclass MashupServerControllerTest1 {"
	},
	{
		"original_code": "// HouseMapAdapter.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.demos.utilities.xml;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlType;\nimport javax.xml.bind.annotation.XmlValue;\nimport javax.xml.bind.annotation.adapters.XmlAdapter;\nimport org.springside.examples.showcase.demos.utilities.xml.HouseMapAdapter.HouseMap.HouseEntry;\nimport com.google.common.collect.Maps;\n\n/**\n * 为使Map<String,String> houses转化为有业务意义的xml的巨大努力,\n * 分别定义了一个Adapter--HouseMapAdapter, 一个List<HouseEntry> Wrapper类--HouseMap, 一个MapEntry表达类--HouseEntry.\n * 最后的劳动成果是：\n *\n * <pre>\n * <houses>\n * \t\t<house key=\"bj\">house1</item>\n * \t\t<hosue key=\"gz\">house2</item>\n * </houses>\n * </pre>\n *\n * @author calvin\n */\npublic class HouseMapAdapter extends XmlAdapter<HouseMapAdapter.HouseMap, Map<String, String>> {\n\n    @Override\n    public HouseMap marshal(Map<String, String> map) throws Exception {\n        HouseMap houseMap = new HouseMap();\n        for (Map.Entry<String, String> e : map.entrySet()) {\n            houseMap.entries.add(new HouseEntry(e));\n        }\n        return houseMap;\n    }\n\n    @Override\n    public Map<String, String> unmarshal(HouseMap houseMap) throws Exception {\n        Map<String, String> map = Maps.newLinkedHashMap();\n        for (HouseEntry e : houseMap.entries) {\n            map.put(e.key, e.value);\n        }\n        return map;\n    }\n\n    /**\n     * List<HouseEntry>的Adapter类.\n     *\n     * @author calvin\n     */\n    @XmlType(name = \"houses\")\n    public static class HouseMap {\n\n        @XmlElement(name = \"house\")\n        List<HouseEntry> entries = new ArrayList<HouseEntry>();\n\n        /**\n         * HouseMap中的Entry类.\n         */\n        static class HouseEntry {\n\n            @XmlAttribute\n            String key;\n\n            @XmlValue\n            String value;\n\n            public HouseEntry() {\n            }\n\n            public HouseEntry(Map.Entry<String, String> e) {\n                key = e.getKey();\n                value = e.getValue();\n            }\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/demos/utilities/xml/HouseMapAdapterTest0.java",
		"test_prompt": "// HouseMapAdapterTest0.java\npackage org.springside.examples.showcase.demos.utilities.xml;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlType;\nimport javax.xml.bind.annotation.XmlValue;\nimport javax.xml.bind.annotation.adapters.XmlAdapter;\nimport org.springside.examples.showcase.demos.utilities.xml.HouseMapAdapter.HouseMap.HouseEntry;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HouseMapAdapter}.\n* It contains ten unit test cases for the {@link HouseMapAdapter#marshal(Map)} method.\n*/\nclass HouseMapAdapterTest0 {"
	},
	{
		"original_code": "// HouseMapAdapter.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.demos.utilities.xml;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlType;\nimport javax.xml.bind.annotation.XmlValue;\nimport javax.xml.bind.annotation.adapters.XmlAdapter;\nimport org.springside.examples.showcase.demos.utilities.xml.HouseMapAdapter.HouseMap.HouseEntry;\nimport com.google.common.collect.Maps;\n\n/**\n * 为使Map<String,String> houses转化为有业务意义的xml的巨大努力,\n * 分别定义了一个Adapter--HouseMapAdapter, 一个List<HouseEntry> Wrapper类--HouseMap, 一个MapEntry表达类--HouseEntry.\n * 最后的劳动成果是：\n *\n * <pre>\n * <houses>\n * \t\t<house key=\"bj\">house1</item>\n * \t\t<hosue key=\"gz\">house2</item>\n * </houses>\n * </pre>\n *\n * @author calvin\n */\npublic class HouseMapAdapter extends XmlAdapter<HouseMapAdapter.HouseMap, Map<String, String>> {\n\n    @Override\n    public HouseMap marshal(Map<String, String> map) throws Exception {\n        HouseMap houseMap = new HouseMap();\n        for (Map.Entry<String, String> e : map.entrySet()) {\n            houseMap.entries.add(new HouseEntry(e));\n        }\n        return houseMap;\n    }\n\n    @Override\n    public Map<String, String> unmarshal(HouseMap houseMap) throws Exception {\n        Map<String, String> map = Maps.newLinkedHashMap();\n        for (HouseEntry e : houseMap.entries) {\n            map.put(e.key, e.value);\n        }\n        return map;\n    }\n\n    /**\n     * List<HouseEntry>的Adapter类.\n     *\n     * @author calvin\n     */\n    @XmlType(name = \"houses\")\n    public static class HouseMap {\n\n        @XmlElement(name = \"house\")\n        List<HouseEntry> entries = new ArrayList<HouseEntry>();\n\n        /**\n         * HouseMap中的Entry类.\n         */\n        static class HouseEntry {\n\n            @XmlAttribute\n            String key;\n\n            @XmlValue\n            String value;\n\n            public HouseEntry() {\n            }\n\n            public HouseEntry(Map.Entry<String, String> e) {\n                key = e.getKey();\n                value = e.getValue();\n            }\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/demos/utilities/xml/HouseMapAdapterTest1.java",
		"test_prompt": "// HouseMapAdapterTest1.java\npackage org.springside.examples.showcase.demos.utilities.xml;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport javax.xml.bind.annotation.XmlAttribute;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlType;\nimport javax.xml.bind.annotation.XmlValue;\nimport javax.xml.bind.annotation.adapters.XmlAdapter;\nimport org.springside.examples.showcase.demos.utilities.xml.HouseMapAdapter.HouseMap.HouseEntry;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HouseMapAdapter}.\n* It contains ten unit test cases for the {@link HouseMapAdapter#unmarshal(HouseMap)} method.\n*/\nclass HouseMapAdapterTest1 {"
	},
	{
		"original_code": "// JodaDemo.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.demos.utilities.time;\n\nimport static org.assertj.core.api.Assertions.*;\nimport java.util.Locale;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.joda.time.Years;\nimport org.joda.time.format.DateTimeFormat;\nimport org.joda.time.format.DateTimeFormatter;\nimport org.junit.Test;\n\npublic class JodaDemo {\n\n    @Test\n    public void convertToString() {\n        String format = \"yyyy-MM-dd HH:mm:ss\";\n        DateTime fooDate = new DateTime(1978, 6, 1, 12, 10, 8, 0);\n        // 第一种方法 直接使用DateTime的toString方法\n        System.out.println(fooDate.toString(format));\n        // 第二种方法,使用Formatter\n        DateTimeFormatter fmt = DateTimeFormat.forPattern(format);\n        System.out.println(fmt.print(fooDate));\n    }\n\n    @Test\n    public void convertFromString() {\n        String dateString = \"1978-06-01 12:10:08\";\n        DateTimeFormatter fmt = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss\");\n        // 第一种方法，直接构造函数,注意日期和时间之间用T分割\n        DateTime dt1 = new DateTime(\"1978-06-01\");\n        assertThat(dt1.getYear()).isEqualTo(1978);\n        DateTime dt2 = new DateTime(\"1978-06-01T12:10:08\");\n        assertThat(dt2.getYear()).isEqualTo(1978);\n        // 第二种方法，使用Formatter\n        DateTime dt3 = fmt.parseDateTime(dateString);\n        assertThat(dt3.getYear()).isEqualTo(1978);\n    }\n\n    @Test\n    public void timeZone() {\n        System.out.println(\"演示时区\");\n        String format = \"yyyy-MM-dd HH:mm:ss zZZ\";\n        // DateTime的毫秒即System的毫秒,即1970到现在的UTC的毫秒数.\n        System.out.println(new DateTime().getMillis() + \" \" + System.currentTimeMillis());\n        // 将日期按默认时区打印\n        DateTime fooDate = new DateTime(1978, 6, 1, 12, 10, 8, 0);\n        // \"1978-06-01 12:10:08\"\n        System.out.println(fooDate.toString(format) + \" \" + fooDate.getMillis());\n        // 将日期按UTC时区打印\n        DateTime zoneWithUTC = fooDate.withZone(DateTimeZone.UTC);\n        // \"1978-06-01 04:10:08\",\n        System.out.println(zoneWithUTC.toString(format) + \" \" + zoneWithUTC.getMillis());\n        // sameMillis\n        // 按不同的时区分析字符串,得到不同的时间\n        String dateString = \"1978-06-01 12:10:08\";\n        DateTimeFormatter fmt = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss\");\n        DateTime parserResult1 = fmt.withZone(DateTimeZone.forID(\"US/Pacific\")).parseDateTime(dateString);\n        DateTime parserResult2 = fmt.withZoneUTC().parseDateTime(dateString);\n        System.out.println(parserResult1.toString(format) + \" \" + parserResult1.getMillis());\n        System.out.println(parserResult2.toString(format) + \" \" + parserResult2.getMillis());\n    }\n\n    /**\n     * 打印当地语言年，月，日到写法\n     */\n    @Test\n    public void locale() {\n        System.out.println(\"演示Locale\");\n        DateTime dateTime = new DateTime().withZone(DateTimeZone.UTC);\n        // 打印中文与英文下不同长度的日期格式串\n        System.out.println(\"S:  \" + formatDateTime(dateTime, \"SS\", \"zh\"));\n        System.out.println(\"M:  \" + formatDateTime(dateTime, \"MM\", \"zh\"));\n        System.out.println(\"L:  \" + formatDateTime(dateTime, \"LL\", \"zh\"));\n        System.out.println(\"XL: \" + formatDateTime(dateTime, \"FF\", \"zh\"));\n        System.out.println(\"\");\n        System.out.println(\"S:  \" + formatDateTime(dateTime, \"SS\", \"en\"));\n        System.out.println(\"M:  \" + formatDateTime(dateTime, \"MM\", \"en\"));\n        System.out.println(\"L:  \" + formatDateTime(dateTime, \"LL\", \"en\"));\n        System.out.println(\"XL: \" + formatDateTime(dateTime, \"FF\", \"en\"));\n        System.out.println(\"\");\n        System.out.println(\"\");\n        // 直接打印TimeStamp, 日期是M,时间是L\n        DateTimeFormatter formatter = DateTimeFormat.forStyle(\"ML\").withLocale(new Locale(\"zh\")).withZone(DateTimeZone.UTC);\n        System.out.println(\"ML Mix: \" + formatter.print(dateTime.getMillis()));\n        // 只打印日期不打印时间\n        System.out.println(\"Date only :\" + formatDateTime(dateTime, \"M-\", \"zh\"));\n    }\n\n    public static String formatDateTime(DateTime dateTime, String style, String lang) {\n        DateTimeFormatter formatter = DateTimeFormat.forStyle(style).withLocale(new Locale(lang));\n        return dateTime.toString(formatter);\n    }\n\n    /**\n     * 演示日期的加减以及计算日期间的间隔，可使用任意时间单位进行加减和计算间隔.\n     */\n    @Test\n    public void daysPlusAndMinusBetweenAndBetweenx() {\n        DateTime now = new DateTime();\n        DateTime birthDate = now.minusYears(10);\n        assertThat(Years.yearsBetween(birthDate, new DateTime()).getYears()).isEqualTo(10);\n        birthDate = now.minusYears(10).plusDays(2);\n        assertThat(Years.yearsBetween(birthDate, new DateTime()).getYears()).isEqualTo(9);\n    }\n\n    /**\n     * 取得月份的头一天和最后一天. 取得一天的0:00和23:59:59 其他如年，星期的头一天，最后一天同理可证\n     */\n    @Test\n    public void beginAndEndOfDates() {\n        String dateString = \"1978-06-10T12:10:08\";\n        DateTime dt = new DateTime(dateString);\n        DateTime startOfMonth = dt.dayOfMonth().withMinimumValue().withTimeAtStartOfDay();\n        System.out.println(startOfMonth.toString());\n        DateTime endOfMonth = dt.dayOfMonth().withMaximumValue().millisOfDay().withMaximumValue();\n        System.out.println(endOfMonth);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/demos/utilities/time/JodaDemoTest.java",
		"test_prompt": "// JodaDemoTest.java\npackage org.springside.examples.showcase.demos.utilities.time;\n\nimport static org.assertj.core.api.Assertions.*;\nimport java.util.Locale;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.joda.time.Years;\nimport org.joda.time.format.DateTimeFormat;\nimport org.joda.time.format.DateTimeFormatter;\nimport org.junit.Test;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JodaDemo}.\n* It contains ten unit test cases for the {@link JodaDemo#formatDateTime(DateTime, String, String)} method.\n*/\nclass JodaDemoTest {"
	},
	{
		"original_code": "// HystrixDemoController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.demos.hystrix.web;\n\nimport java.util.Map;\nimport javax.annotation.PostConstruct;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springside.examples.showcase.demos.hystrix.dependency.DependencyResourceController;\nimport org.springside.examples.showcase.demos.hystrix.service.UserService;\nimport org.springside.examples.showcase.webservice.rest.UserDTO;\nimport org.springside.modules.web.MediaTypes;\nimport com.google.common.collect.Maps;\n\n@Controller\npublic class HystrixDemoController {\n\n    private Map<String, String> allStatus = Maps.newLinkedHashMap();\n\n    @Autowired\n    private UserService userService;\n\n    @RequestMapping(value = \"/hystrix\", method = RequestMethod.GET)\n    public String index(Model model) {\n        model.addAttribute(\"allStatus\", allStatus);\n        model.addAttribute(\"statusHolder\", new StatusHolder(DependencyResourceController.status));\n        model.addAttribute(\"metrics\", userService.getHystrixMetrics());\n        return \"hystrix/hystrix\";\n    }\n\n    /**\n     * 调用Hystrix保护的UserService从远端资源获取用户信息， 异常由HystrixExceptionHandler统一处理.\n     */\n    @RequestMapping(value = \"/hystrix/user/{id}\", method = RequestMethod.GET, produces = MediaTypes.JSON_UTF_8)\n    @ResponseBody\n    public UserDTO getUser(@PathVariable(\"id\") Long id) throws Exception {\n        return userService.getUser(id);\n    }\n\n    /**\n     * 设定资源的状态.\n     */\n    @RequestMapping(value = \"/hystrix/status\")\n    public String updateStatus(@RequestParam(\"value\") String newStatus) {\n        DependencyResourceController.status = newStatus;\n        return \"redirect:/hystrix\";\n    }\n\n    /**\n     * 从默认的Hystrix线程池模式切换为使用原调用者线程的模式.\n     */\n    @RequestMapping(value = \"/hystrix/disableIsolateThreadPool\")\n    public String disableIsolateThreadPool() {\n        userService.setIsolateThreadPool(false);\n        userService.init();\n        return \"redirect:/hystrix\";\n    }\n\n    @PostConstruct\n    public void init() {\n        allStatus.put(\"normal\", \"正常\");\n        allStatus.put(\"timeout\", \"超时\");\n        allStatus.put(\"server-error\", \"服务器错误\");\n        allStatus.put(\"bad-request\", \"请求错误\");\n    }\n\n    /**\n     * 给Spring Form Tag使用的类.\n     */\n    public static class StatusHolder {\n\n        private String value;\n\n        public StatusHolder(String value) {\n            this.value = value;\n        }\n\n        public String getValue() {\n            return value;\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/demos/hystrix/web/HystrixDemoControllerTest0.java",
		"test_prompt": "// HystrixDemoControllerTest0.java\npackage org.springside.examples.showcase.demos.hystrix.web;\n\nimport java.util.Map;\nimport javax.annotation.PostConstruct;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springside.examples.showcase.demos.hystrix.dependency.DependencyResourceController;\nimport org.springside.examples.showcase.demos.hystrix.service.UserService;\nimport org.springside.examples.showcase.webservice.rest.UserDTO;\nimport org.springside.modules.web.MediaTypes;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HystrixDemoController}.\n* It contains ten unit test cases for the {@link HystrixDemoController#index(Model)} method.\n*/\nclass HystrixDemoControllerTest0 {"
	},
	{
		"original_code": "// HystrixDemoController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.demos.hystrix.web;\n\nimport java.util.Map;\nimport javax.annotation.PostConstruct;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springside.examples.showcase.demos.hystrix.dependency.DependencyResourceController;\nimport org.springside.examples.showcase.demos.hystrix.service.UserService;\nimport org.springside.examples.showcase.webservice.rest.UserDTO;\nimport org.springside.modules.web.MediaTypes;\nimport com.google.common.collect.Maps;\n\n@Controller\npublic class HystrixDemoController {\n\n    private Map<String, String> allStatus = Maps.newLinkedHashMap();\n\n    @Autowired\n    private UserService userService;\n\n    @RequestMapping(value = \"/hystrix\", method = RequestMethod.GET)\n    public String index(Model model) {\n        model.addAttribute(\"allStatus\", allStatus);\n        model.addAttribute(\"statusHolder\", new StatusHolder(DependencyResourceController.status));\n        model.addAttribute(\"metrics\", userService.getHystrixMetrics());\n        return \"hystrix/hystrix\";\n    }\n\n    /**\n     * 调用Hystrix保护的UserService从远端资源获取用户信息， 异常由HystrixExceptionHandler统一处理.\n     */\n    @RequestMapping(value = \"/hystrix/user/{id}\", method = RequestMethod.GET, produces = MediaTypes.JSON_UTF_8)\n    @ResponseBody\n    public UserDTO getUser(@PathVariable(\"id\") Long id) throws Exception {\n        return userService.getUser(id);\n    }\n\n    /**\n     * 设定资源的状态.\n     */\n    @RequestMapping(value = \"/hystrix/status\")\n    public String updateStatus(@RequestParam(\"value\") String newStatus) {\n        DependencyResourceController.status = newStatus;\n        return \"redirect:/hystrix\";\n    }\n\n    /**\n     * 从默认的Hystrix线程池模式切换为使用原调用者线程的模式.\n     */\n    @RequestMapping(value = \"/hystrix/disableIsolateThreadPool\")\n    public String disableIsolateThreadPool() {\n        userService.setIsolateThreadPool(false);\n        userService.init();\n        return \"redirect:/hystrix\";\n    }\n\n    @PostConstruct\n    public void init() {\n        allStatus.put(\"normal\", \"正常\");\n        allStatus.put(\"timeout\", \"超时\");\n        allStatus.put(\"server-error\", \"服务器错误\");\n        allStatus.put(\"bad-request\", \"请求错误\");\n    }\n\n    /**\n     * 给Spring Form Tag使用的类.\n     */\n    public static class StatusHolder {\n\n        private String value;\n\n        public StatusHolder(String value) {\n            this.value = value;\n        }\n\n        public String getValue() {\n            return value;\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/demos/hystrix/web/HystrixDemoControllerTest1.java",
		"test_prompt": "// HystrixDemoControllerTest1.java\npackage org.springside.examples.showcase.demos.hystrix.web;\n\nimport java.util.Map;\nimport javax.annotation.PostConstruct;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springside.examples.showcase.demos.hystrix.dependency.DependencyResourceController;\nimport org.springside.examples.showcase.demos.hystrix.service.UserService;\nimport org.springside.examples.showcase.webservice.rest.UserDTO;\nimport org.springside.modules.web.MediaTypes;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HystrixDemoController}.\n* It contains ten unit test cases for the {@link HystrixDemoController#updateStatus(String)} method.\n*/\nclass HystrixDemoControllerTest1 {"
	},
	{
		"original_code": "// HystrixDemoController.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.demos.hystrix.web;\n\nimport java.util.Map;\nimport javax.annotation.PostConstruct;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springside.examples.showcase.demos.hystrix.dependency.DependencyResourceController;\nimport org.springside.examples.showcase.demos.hystrix.service.UserService;\nimport org.springside.examples.showcase.webservice.rest.UserDTO;\nimport org.springside.modules.web.MediaTypes;\nimport com.google.common.collect.Maps;\n\n@Controller\npublic class HystrixDemoController {\n\n    private Map<String, String> allStatus = Maps.newLinkedHashMap();\n\n    @Autowired\n    private UserService userService;\n\n    @RequestMapping(value = \"/hystrix\", method = RequestMethod.GET)\n    public String index(Model model) {\n        model.addAttribute(\"allStatus\", allStatus);\n        model.addAttribute(\"statusHolder\", new StatusHolder(DependencyResourceController.status));\n        model.addAttribute(\"metrics\", userService.getHystrixMetrics());\n        return \"hystrix/hystrix\";\n    }\n\n    /**\n     * 调用Hystrix保护的UserService从远端资源获取用户信息， 异常由HystrixExceptionHandler统一处理.\n     */\n    @RequestMapping(value = \"/hystrix/user/{id}\", method = RequestMethod.GET, produces = MediaTypes.JSON_UTF_8)\n    @ResponseBody\n    public UserDTO getUser(@PathVariable(\"id\") Long id) throws Exception {\n        return userService.getUser(id);\n    }\n\n    /**\n     * 设定资源的状态.\n     */\n    @RequestMapping(value = \"/hystrix/status\")\n    public String updateStatus(@RequestParam(\"value\") String newStatus) {\n        DependencyResourceController.status = newStatus;\n        return \"redirect:/hystrix\";\n    }\n\n    /**\n     * 从默认的Hystrix线程池模式切换为使用原调用者线程的模式.\n     */\n    @RequestMapping(value = \"/hystrix/disableIsolateThreadPool\")\n    public String disableIsolateThreadPool() {\n        userService.setIsolateThreadPool(false);\n        userService.init();\n        return \"redirect:/hystrix\";\n    }\n\n    @PostConstruct\n    public void init() {\n        allStatus.put(\"normal\", \"正常\");\n        allStatus.put(\"timeout\", \"超时\");\n        allStatus.put(\"server-error\", \"服务器错误\");\n        allStatus.put(\"bad-request\", \"请求错误\");\n    }\n\n    /**\n     * 给Spring Form Tag使用的类.\n     */\n    public static class StatusHolder {\n\n        private String value;\n\n        public StatusHolder(String value) {\n            this.value = value;\n        }\n\n        public String getValue() {\n            return value;\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/demos/hystrix/web/HystrixDemoControllerTest2.java",
		"test_prompt": "// HystrixDemoControllerTest2.java\npackage org.springside.examples.showcase.demos.hystrix.web;\n\nimport java.util.Map;\nimport javax.annotation.PostConstruct;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springside.examples.showcase.demos.hystrix.dependency.DependencyResourceController;\nimport org.springside.examples.showcase.demos.hystrix.service.UserService;\nimport org.springside.examples.showcase.webservice.rest.UserDTO;\nimport org.springside.modules.web.MediaTypes;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HystrixDemoController}.\n* It contains ten unit test cases for the {@link HystrixDemoController#disableIsolateThreadPool()} method.\n*/\nclass HystrixDemoControllerTest2 {"
	},
	{
		"original_code": "// HystrixExceptionHandler.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.demos.hystrix.web;\n\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.web.MediaTypes;\nimport com.netflix.hystrix.exception.HystrixBadRequestException;\nimport com.netflix.hystrix.exception.HystrixRuntimeException;\nimport com.netflix.hystrix.exception.HystrixRuntimeException.FailureType;\n\n/**\n * 自定义ExceptionHandler，专门处理Hystrix异常.\n *\n * @author calvin\n */\n@ControllerAdvice\npublic class HystrixExceptionHandler extends ResponseEntityExceptionHandler {\n\n    /**\n     * 处理Hystrix Runtime异常, 分为两类:\n     * 一类是Command内部抛出异常(返回500).\n     * 一类是Hystrix已进入保护状态(返回503).\n     */\n    @ExceptionHandler(value = { HystrixRuntimeException.class })\n    public final ResponseEntity<?> handleException(HystrixRuntimeException e, WebRequest request) {\n        HttpStatus status = HttpStatus.SERVICE_UNAVAILABLE;\n        String message = e.getMessage();\n        FailureType type = e.getFailureType();\n        // 对命令抛出的异常进行特殊处理\n        if (type.equals(FailureType.COMMAND_EXCEPTION)) {\n            status = HttpStatus.INTERNAL_SERVER_ERROR;\n            message = Exceptions.getErrorMessageWithNestedException(e);\n        }\n        logger.error(message, e);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.parseMediaType(MediaTypes.TEXT_PLAIN_UTF_8));\n        return handleExceptionInternal(e, message, headers, status, request);\n    }\n\n    /**\n     * 处理Hystrix ClientException异常(返回404).\n     * ClientException表明是客户端请求参数本身的问题, 不计入异常次数统计。\n     */\n    @ExceptionHandler(value = { HystrixBadRequestException.class })\n    public final ResponseEntity<?> handleException(HystrixBadRequestException e, WebRequest request) {\n        String message = Exceptions.getErrorMessageWithNestedException(e);\n        logger.error(message, e);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.parseMediaType(MediaTypes.TEXT_PLAIN_UTF_8));\n        return handleExceptionInternal(e, message, headers, HttpStatus.BAD_REQUEST, request);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/demos/hystrix/web/HystrixExceptionHandlerTest0.java",
		"test_prompt": "// HystrixExceptionHandlerTest0.java\npackage org.springside.examples.showcase.demos.hystrix.web;\n\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.web.MediaTypes;\nimport com.netflix.hystrix.exception.HystrixBadRequestException;\nimport com.netflix.hystrix.exception.HystrixRuntimeException;\nimport com.netflix.hystrix.exception.HystrixRuntimeException.FailureType;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HystrixExceptionHandler}.\n* It contains ten unit test cases for the {@link HystrixExceptionHandler#handleException(HystrixRuntimeException, WebRequest)} method.\n*/\nclass HystrixExceptionHandlerTest0 {"
	},
	{
		"original_code": "// HystrixExceptionHandler.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.examples.showcase.demos.hystrix.web;\n\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.web.MediaTypes;\nimport com.netflix.hystrix.exception.HystrixBadRequestException;\nimport com.netflix.hystrix.exception.HystrixRuntimeException;\nimport com.netflix.hystrix.exception.HystrixRuntimeException.FailureType;\n\n/**\n * 自定义ExceptionHandler，专门处理Hystrix异常.\n *\n * @author calvin\n */\n@ControllerAdvice\npublic class HystrixExceptionHandler extends ResponseEntityExceptionHandler {\n\n    /**\n     * 处理Hystrix Runtime异常, 分为两类:\n     * 一类是Command内部抛出异常(返回500).\n     * 一类是Hystrix已进入保护状态(返回503).\n     */\n    @ExceptionHandler(value = { HystrixRuntimeException.class })\n    public final ResponseEntity<?> handleException(HystrixRuntimeException e, WebRequest request) {\n        HttpStatus status = HttpStatus.SERVICE_UNAVAILABLE;\n        String message = e.getMessage();\n        FailureType type = e.getFailureType();\n        // 对命令抛出的异常进行特殊处理\n        if (type.equals(FailureType.COMMAND_EXCEPTION)) {\n            status = HttpStatus.INTERNAL_SERVER_ERROR;\n            message = Exceptions.getErrorMessageWithNestedException(e);\n        }\n        logger.error(message, e);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.parseMediaType(MediaTypes.TEXT_PLAIN_UTF_8));\n        return handleExceptionInternal(e, message, headers, status, request);\n    }\n\n    /**\n     * 处理Hystrix ClientException异常(返回404).\n     * ClientException表明是客户端请求参数本身的问题, 不计入异常次数统计。\n     */\n    @ExceptionHandler(value = { HystrixBadRequestException.class })\n    public final ResponseEntity<?> handleException(HystrixBadRequestException e, WebRequest request) {\n        String message = Exceptions.getErrorMessageWithNestedException(e);\n        logger.error(message, e);\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.parseMediaType(MediaTypes.TEXT_PLAIN_UTF_8));\n        return handleExceptionInternal(e, message, headers, HttpStatus.BAD_REQUEST, request);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/examples/showcase/src/main/java/org/springside/examples/showcase/demos/hystrix/web/HystrixExceptionHandlerTest1.java",
		"test_prompt": "// HystrixExceptionHandlerTest1.java\npackage org.springside.examples.showcase.demos.hystrix.web;\n\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.web.MediaTypes;\nimport com.netflix.hystrix.exception.HystrixBadRequestException;\nimport com.netflix.hystrix.exception.HystrixRuntimeException;\nimport com.netflix.hystrix.exception.HystrixRuntimeException.FailureType;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HystrixExceptionHandler}.\n* It contains ten unit test cases for the {@link HystrixExceptionHandler#handleException(HystrixBadRequestException, WebRequest)} method.\n*/\nclass HystrixExceptionHandlerTest1 {"
	},
	{
		"original_code": "// Execution.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.metrics;\n\nimport org.springside.modules.metrics.utils.Clock;\n\npublic class Execution {\n\n    public static Clock clock = Clock.DEFAULT;\n\n    private Counter counter;\n\n    private Histogram histogram;\n\n    public Execution(Double... pcts) {\n        counter = new Counter();\n        histogram = new Histogram(pcts);\n    }\n\n    public ExecutionTimer start() {\n        return new ExecutionTimer(this, clock.getCurrentTime());\n    }\n\n    private void update(long startTime) {\n        final long elapsed = clock.getCurrentTime() - startTime;\n        histogram.update(elapsed);\n        counter.inc();\n    }\n\n    public ExecutionMetric calculateMetric() {\n        ExecutionMetric metric = new ExecutionMetric();\n        metric.counterMetric = counter.calculateMetric();\n        metric.histogramMetric = histogram.calculateMetric();\n        return metric;\n    }\n\n    @Override\n    public String toString() {\n        return \"Execution [counter=\" + counter + \", histogram=\" + histogram + \"]\";\n    }\n\n    public static class ExecutionTimer {\n\n        private final Execution execution;\n\n        private final long startTime;\n\n        private ExecutionTimer(Execution execution, long startTime) {\n            this.execution = execution;\n            this.startTime = startTime;\n        }\n\n        public void stop() {\n            execution.update(startTime);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/metrics/src/main/java/org/springside/modules/metrics/ExecutionTest0.java",
		"test_prompt": "// ExecutionTest0.java\npackage org.springside.modules.metrics;\n\nimport org.springside.modules.metrics.utils.Clock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Execution}.\n* It contains ten unit test cases for the {@link Execution#start()} method.\n*/\nclass ExecutionTest0 {"
	},
	{
		"original_code": "// Execution.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.metrics;\n\nimport org.springside.modules.metrics.utils.Clock;\n\npublic class Execution {\n\n    public static Clock clock = Clock.DEFAULT;\n\n    private Counter counter;\n\n    private Histogram histogram;\n\n    public Execution(Double... pcts) {\n        counter = new Counter();\n        histogram = new Histogram(pcts);\n    }\n\n    public ExecutionTimer start() {\n        return new ExecutionTimer(this, clock.getCurrentTime());\n    }\n\n    private void update(long startTime) {\n        final long elapsed = clock.getCurrentTime() - startTime;\n        histogram.update(elapsed);\n        counter.inc();\n    }\n\n    public ExecutionMetric calculateMetric() {\n        ExecutionMetric metric = new ExecutionMetric();\n        metric.counterMetric = counter.calculateMetric();\n        metric.histogramMetric = histogram.calculateMetric();\n        return metric;\n    }\n\n    @Override\n    public String toString() {\n        return \"Execution [counter=\" + counter + \", histogram=\" + histogram + \"]\";\n    }\n\n    public static class ExecutionTimer {\n\n        private final Execution execution;\n\n        private final long startTime;\n\n        private ExecutionTimer(Execution execution, long startTime) {\n            this.execution = execution;\n            this.startTime = startTime;\n        }\n\n        public void stop() {\n            execution.update(startTime);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/metrics/src/main/java/org/springside/modules/metrics/ExecutionTest1.java",
		"test_prompt": "// ExecutionTest1.java\npackage org.springside.modules.metrics;\n\nimport org.springside.modules.metrics.utils.Clock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Execution}.\n* It contains ten unit test cases for the {@link Execution#calculateMetric()} method.\n*/\nclass ExecutionTest1 {"
	},
	{
		"original_code": "// MetricRegistry.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class MetricRegistry {\n\n    public static final MetricRegistry INSTANCE = new MetricRegistry();\n\n    private Double[] defaultPcts = new Double[] { 90d };\n\n    private ConcurrentMap<String, Object> metrics = new ConcurrentHashMap<String, Object>();\n\n    public static String name(String name, String... subNames) {\n        final StringBuilder builder = new StringBuilder(name);\n        if (subNames != null) {\n            for (String s : subNames) {\n                if ((s != null) && !s.isEmpty()) {\n                    builder.append('.').append(s);\n                }\n            }\n        }\n        return builder.toString();\n    }\n\n    public Counter counter(String name) {\n        if (metrics.containsKey(name)) {\n            return (Counter) metrics.get(name);\n        } else {\n            Counter counter = new Counter();\n            return (Counter) register(name, counter);\n        }\n    }\n\n    public Histogram histogram(String name) {\n        return histogram(name, defaultPcts);\n    }\n\n    public Histogram histogram(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Histogram) metrics.get(name);\n        } else {\n            Histogram histogram = new Histogram(pcts);\n            return (Histogram) register(name, histogram);\n        }\n    }\n\n    public Execution execution(String name) {\n        return execution(name, defaultPcts);\n    }\n\n    public Execution execution(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Execution) metrics.get(name);\n        } else {\n            Execution execution = new Execution(pcts);\n            return (Execution) register(name, execution);\n        }\n    }\n\n    public Object register(String name, Object newMetric) {\n        Object existingMetric = metrics.putIfAbsent(name, newMetric);\n        if (existingMetric != null) {\n            return existingMetric;\n        } else {\n            return newMetric;\n        }\n    }\n\n    public SortedMap<String, Counter> getCounters() {\n        return getMetrics(Counter.class);\n    }\n\n    public SortedMap<String, Histogram> getHistograms() {\n        return getMetrics(Histogram.class);\n    }\n\n    public SortedMap<String, Execution> getExecutions() {\n        return getMetrics(Execution.class);\n    }\n\n    private <T> SortedMap<String, T> getMetrics(Class<T> klass) {\n        final SortedMap<String, T> result = new TreeMap<String, T>();\n        for (Map.Entry<String, Object> entry : metrics.entrySet()) {\n            if (klass.isInstance(entry.getValue())) {\n                result.put(entry.getKey(), (T) entry.getValue());\n            }\n        }\n        return Collections.unmodifiableSortedMap(result);\n    }\n\n    public void setDefaultPcts(Double[] defaultPcts) {\n        this.defaultPcts = defaultPcts;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/metrics/src/main/java/org/springside/modules/metrics/MetricRegistryTest0.java",
		"test_prompt": "// MetricRegistryTest0.java\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetricRegistry}.\n* It contains ten unit test cases for the {@link MetricRegistry#name(String, String[])} method.\n*/\nclass MetricRegistryTest0 {"
	},
	{
		"original_code": "// MetricRegistry.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class MetricRegistry {\n\n    public static final MetricRegistry INSTANCE = new MetricRegistry();\n\n    private Double[] defaultPcts = new Double[] { 90d };\n\n    private ConcurrentMap<String, Object> metrics = new ConcurrentHashMap<String, Object>();\n\n    public static String name(String name, String... subNames) {\n        final StringBuilder builder = new StringBuilder(name);\n        if (subNames != null) {\n            for (String s : subNames) {\n                if ((s != null) && !s.isEmpty()) {\n                    builder.append('.').append(s);\n                }\n            }\n        }\n        return builder.toString();\n    }\n\n    public Counter counter(String name) {\n        if (metrics.containsKey(name)) {\n            return (Counter) metrics.get(name);\n        } else {\n            Counter counter = new Counter();\n            return (Counter) register(name, counter);\n        }\n    }\n\n    public Histogram histogram(String name) {\n        return histogram(name, defaultPcts);\n    }\n\n    public Histogram histogram(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Histogram) metrics.get(name);\n        } else {\n            Histogram histogram = new Histogram(pcts);\n            return (Histogram) register(name, histogram);\n        }\n    }\n\n    public Execution execution(String name) {\n        return execution(name, defaultPcts);\n    }\n\n    public Execution execution(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Execution) metrics.get(name);\n        } else {\n            Execution execution = new Execution(pcts);\n            return (Execution) register(name, execution);\n        }\n    }\n\n    public Object register(String name, Object newMetric) {\n        Object existingMetric = metrics.putIfAbsent(name, newMetric);\n        if (existingMetric != null) {\n            return existingMetric;\n        } else {\n            return newMetric;\n        }\n    }\n\n    public SortedMap<String, Counter> getCounters() {\n        return getMetrics(Counter.class);\n    }\n\n    public SortedMap<String, Histogram> getHistograms() {\n        return getMetrics(Histogram.class);\n    }\n\n    public SortedMap<String, Execution> getExecutions() {\n        return getMetrics(Execution.class);\n    }\n\n    private <T> SortedMap<String, T> getMetrics(Class<T> klass) {\n        final SortedMap<String, T> result = new TreeMap<String, T>();\n        for (Map.Entry<String, Object> entry : metrics.entrySet()) {\n            if (klass.isInstance(entry.getValue())) {\n                result.put(entry.getKey(), (T) entry.getValue());\n            }\n        }\n        return Collections.unmodifiableSortedMap(result);\n    }\n\n    public void setDefaultPcts(Double[] defaultPcts) {\n        this.defaultPcts = defaultPcts;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/metrics/src/main/java/org/springside/modules/metrics/MetricRegistryTest1.java",
		"test_prompt": "// MetricRegistryTest1.java\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetricRegistry}.\n* It contains ten unit test cases for the {@link MetricRegistry#counter(String)} method.\n*/\nclass MetricRegistryTest1 {"
	},
	{
		"original_code": "// MetricRegistry.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class MetricRegistry {\n\n    public static final MetricRegistry INSTANCE = new MetricRegistry();\n\n    private Double[] defaultPcts = new Double[] { 90d };\n\n    private ConcurrentMap<String, Object> metrics = new ConcurrentHashMap<String, Object>();\n\n    public static String name(String name, String... subNames) {\n        final StringBuilder builder = new StringBuilder(name);\n        if (subNames != null) {\n            for (String s : subNames) {\n                if ((s != null) && !s.isEmpty()) {\n                    builder.append('.').append(s);\n                }\n            }\n        }\n        return builder.toString();\n    }\n\n    public Counter counter(String name) {\n        if (metrics.containsKey(name)) {\n            return (Counter) metrics.get(name);\n        } else {\n            Counter counter = new Counter();\n            return (Counter) register(name, counter);\n        }\n    }\n\n    public Histogram histogram(String name) {\n        return histogram(name, defaultPcts);\n    }\n\n    public Histogram histogram(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Histogram) metrics.get(name);\n        } else {\n            Histogram histogram = new Histogram(pcts);\n            return (Histogram) register(name, histogram);\n        }\n    }\n\n    public Execution execution(String name) {\n        return execution(name, defaultPcts);\n    }\n\n    public Execution execution(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Execution) metrics.get(name);\n        } else {\n            Execution execution = new Execution(pcts);\n            return (Execution) register(name, execution);\n        }\n    }\n\n    public Object register(String name, Object newMetric) {\n        Object existingMetric = metrics.putIfAbsent(name, newMetric);\n        if (existingMetric != null) {\n            return existingMetric;\n        } else {\n            return newMetric;\n        }\n    }\n\n    public SortedMap<String, Counter> getCounters() {\n        return getMetrics(Counter.class);\n    }\n\n    public SortedMap<String, Histogram> getHistograms() {\n        return getMetrics(Histogram.class);\n    }\n\n    public SortedMap<String, Execution> getExecutions() {\n        return getMetrics(Execution.class);\n    }\n\n    private <T> SortedMap<String, T> getMetrics(Class<T> klass) {\n        final SortedMap<String, T> result = new TreeMap<String, T>();\n        for (Map.Entry<String, Object> entry : metrics.entrySet()) {\n            if (klass.isInstance(entry.getValue())) {\n                result.put(entry.getKey(), (T) entry.getValue());\n            }\n        }\n        return Collections.unmodifiableSortedMap(result);\n    }\n\n    public void setDefaultPcts(Double[] defaultPcts) {\n        this.defaultPcts = defaultPcts;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/metrics/src/main/java/org/springside/modules/metrics/MetricRegistryTest2.java",
		"test_prompt": "// MetricRegistryTest2.java\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetricRegistry}.\n* It contains ten unit test cases for the {@link MetricRegistry#histogram(String)} method.\n*/\nclass MetricRegistryTest2 {"
	},
	{
		"original_code": "// MetricRegistry.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class MetricRegistry {\n\n    public static final MetricRegistry INSTANCE = new MetricRegistry();\n\n    private Double[] defaultPcts = new Double[] { 90d };\n\n    private ConcurrentMap<String, Object> metrics = new ConcurrentHashMap<String, Object>();\n\n    public static String name(String name, String... subNames) {\n        final StringBuilder builder = new StringBuilder(name);\n        if (subNames != null) {\n            for (String s : subNames) {\n                if ((s != null) && !s.isEmpty()) {\n                    builder.append('.').append(s);\n                }\n            }\n        }\n        return builder.toString();\n    }\n\n    public Counter counter(String name) {\n        if (metrics.containsKey(name)) {\n            return (Counter) metrics.get(name);\n        } else {\n            Counter counter = new Counter();\n            return (Counter) register(name, counter);\n        }\n    }\n\n    public Histogram histogram(String name) {\n        return histogram(name, defaultPcts);\n    }\n\n    public Histogram histogram(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Histogram) metrics.get(name);\n        } else {\n            Histogram histogram = new Histogram(pcts);\n            return (Histogram) register(name, histogram);\n        }\n    }\n\n    public Execution execution(String name) {\n        return execution(name, defaultPcts);\n    }\n\n    public Execution execution(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Execution) metrics.get(name);\n        } else {\n            Execution execution = new Execution(pcts);\n            return (Execution) register(name, execution);\n        }\n    }\n\n    public Object register(String name, Object newMetric) {\n        Object existingMetric = metrics.putIfAbsent(name, newMetric);\n        if (existingMetric != null) {\n            return existingMetric;\n        } else {\n            return newMetric;\n        }\n    }\n\n    public SortedMap<String, Counter> getCounters() {\n        return getMetrics(Counter.class);\n    }\n\n    public SortedMap<String, Histogram> getHistograms() {\n        return getMetrics(Histogram.class);\n    }\n\n    public SortedMap<String, Execution> getExecutions() {\n        return getMetrics(Execution.class);\n    }\n\n    private <T> SortedMap<String, T> getMetrics(Class<T> klass) {\n        final SortedMap<String, T> result = new TreeMap<String, T>();\n        for (Map.Entry<String, Object> entry : metrics.entrySet()) {\n            if (klass.isInstance(entry.getValue())) {\n                result.put(entry.getKey(), (T) entry.getValue());\n            }\n        }\n        return Collections.unmodifiableSortedMap(result);\n    }\n\n    public void setDefaultPcts(Double[] defaultPcts) {\n        this.defaultPcts = defaultPcts;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/metrics/src/main/java/org/springside/modules/metrics/MetricRegistryTest3.java",
		"test_prompt": "// MetricRegistryTest3.java\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetricRegistry}.\n* It contains ten unit test cases for the {@link MetricRegistry#histogram(String, Double[])} method.\n*/\nclass MetricRegistryTest3 {"
	},
	{
		"original_code": "// MetricRegistry.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class MetricRegistry {\n\n    public static final MetricRegistry INSTANCE = new MetricRegistry();\n\n    private Double[] defaultPcts = new Double[] { 90d };\n\n    private ConcurrentMap<String, Object> metrics = new ConcurrentHashMap<String, Object>();\n\n    public static String name(String name, String... subNames) {\n        final StringBuilder builder = new StringBuilder(name);\n        if (subNames != null) {\n            for (String s : subNames) {\n                if ((s != null) && !s.isEmpty()) {\n                    builder.append('.').append(s);\n                }\n            }\n        }\n        return builder.toString();\n    }\n\n    public Counter counter(String name) {\n        if (metrics.containsKey(name)) {\n            return (Counter) metrics.get(name);\n        } else {\n            Counter counter = new Counter();\n            return (Counter) register(name, counter);\n        }\n    }\n\n    public Histogram histogram(String name) {\n        return histogram(name, defaultPcts);\n    }\n\n    public Histogram histogram(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Histogram) metrics.get(name);\n        } else {\n            Histogram histogram = new Histogram(pcts);\n            return (Histogram) register(name, histogram);\n        }\n    }\n\n    public Execution execution(String name) {\n        return execution(name, defaultPcts);\n    }\n\n    public Execution execution(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Execution) metrics.get(name);\n        } else {\n            Execution execution = new Execution(pcts);\n            return (Execution) register(name, execution);\n        }\n    }\n\n    public Object register(String name, Object newMetric) {\n        Object existingMetric = metrics.putIfAbsent(name, newMetric);\n        if (existingMetric != null) {\n            return existingMetric;\n        } else {\n            return newMetric;\n        }\n    }\n\n    public SortedMap<String, Counter> getCounters() {\n        return getMetrics(Counter.class);\n    }\n\n    public SortedMap<String, Histogram> getHistograms() {\n        return getMetrics(Histogram.class);\n    }\n\n    public SortedMap<String, Execution> getExecutions() {\n        return getMetrics(Execution.class);\n    }\n\n    private <T> SortedMap<String, T> getMetrics(Class<T> klass) {\n        final SortedMap<String, T> result = new TreeMap<String, T>();\n        for (Map.Entry<String, Object> entry : metrics.entrySet()) {\n            if (klass.isInstance(entry.getValue())) {\n                result.put(entry.getKey(), (T) entry.getValue());\n            }\n        }\n        return Collections.unmodifiableSortedMap(result);\n    }\n\n    public void setDefaultPcts(Double[] defaultPcts) {\n        this.defaultPcts = defaultPcts;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/metrics/src/main/java/org/springside/modules/metrics/MetricRegistryTest4.java",
		"test_prompt": "// MetricRegistryTest4.java\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetricRegistry}.\n* It contains ten unit test cases for the {@link MetricRegistry#execution(String)} method.\n*/\nclass MetricRegistryTest4 {"
	},
	{
		"original_code": "// MetricRegistry.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class MetricRegistry {\n\n    public static final MetricRegistry INSTANCE = new MetricRegistry();\n\n    private Double[] defaultPcts = new Double[] { 90d };\n\n    private ConcurrentMap<String, Object> metrics = new ConcurrentHashMap<String, Object>();\n\n    public static String name(String name, String... subNames) {\n        final StringBuilder builder = new StringBuilder(name);\n        if (subNames != null) {\n            for (String s : subNames) {\n                if ((s != null) && !s.isEmpty()) {\n                    builder.append('.').append(s);\n                }\n            }\n        }\n        return builder.toString();\n    }\n\n    public Counter counter(String name) {\n        if (metrics.containsKey(name)) {\n            return (Counter) metrics.get(name);\n        } else {\n            Counter counter = new Counter();\n            return (Counter) register(name, counter);\n        }\n    }\n\n    public Histogram histogram(String name) {\n        return histogram(name, defaultPcts);\n    }\n\n    public Histogram histogram(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Histogram) metrics.get(name);\n        } else {\n            Histogram histogram = new Histogram(pcts);\n            return (Histogram) register(name, histogram);\n        }\n    }\n\n    public Execution execution(String name) {\n        return execution(name, defaultPcts);\n    }\n\n    public Execution execution(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Execution) metrics.get(name);\n        } else {\n            Execution execution = new Execution(pcts);\n            return (Execution) register(name, execution);\n        }\n    }\n\n    public Object register(String name, Object newMetric) {\n        Object existingMetric = metrics.putIfAbsent(name, newMetric);\n        if (existingMetric != null) {\n            return existingMetric;\n        } else {\n            return newMetric;\n        }\n    }\n\n    public SortedMap<String, Counter> getCounters() {\n        return getMetrics(Counter.class);\n    }\n\n    public SortedMap<String, Histogram> getHistograms() {\n        return getMetrics(Histogram.class);\n    }\n\n    public SortedMap<String, Execution> getExecutions() {\n        return getMetrics(Execution.class);\n    }\n\n    private <T> SortedMap<String, T> getMetrics(Class<T> klass) {\n        final SortedMap<String, T> result = new TreeMap<String, T>();\n        for (Map.Entry<String, Object> entry : metrics.entrySet()) {\n            if (klass.isInstance(entry.getValue())) {\n                result.put(entry.getKey(), (T) entry.getValue());\n            }\n        }\n        return Collections.unmodifiableSortedMap(result);\n    }\n\n    public void setDefaultPcts(Double[] defaultPcts) {\n        this.defaultPcts = defaultPcts;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/metrics/src/main/java/org/springside/modules/metrics/MetricRegistryTest5.java",
		"test_prompt": "// MetricRegistryTest5.java\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetricRegistry}.\n* It contains ten unit test cases for the {@link MetricRegistry#execution(String, Double[])} method.\n*/\nclass MetricRegistryTest5 {"
	},
	{
		"original_code": "// MetricRegistry.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class MetricRegistry {\n\n    public static final MetricRegistry INSTANCE = new MetricRegistry();\n\n    private Double[] defaultPcts = new Double[] { 90d };\n\n    private ConcurrentMap<String, Object> metrics = new ConcurrentHashMap<String, Object>();\n\n    public static String name(String name, String... subNames) {\n        final StringBuilder builder = new StringBuilder(name);\n        if (subNames != null) {\n            for (String s : subNames) {\n                if ((s != null) && !s.isEmpty()) {\n                    builder.append('.').append(s);\n                }\n            }\n        }\n        return builder.toString();\n    }\n\n    public Counter counter(String name) {\n        if (metrics.containsKey(name)) {\n            return (Counter) metrics.get(name);\n        } else {\n            Counter counter = new Counter();\n            return (Counter) register(name, counter);\n        }\n    }\n\n    public Histogram histogram(String name) {\n        return histogram(name, defaultPcts);\n    }\n\n    public Histogram histogram(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Histogram) metrics.get(name);\n        } else {\n            Histogram histogram = new Histogram(pcts);\n            return (Histogram) register(name, histogram);\n        }\n    }\n\n    public Execution execution(String name) {\n        return execution(name, defaultPcts);\n    }\n\n    public Execution execution(String name, Double... pcts) {\n        if (metrics.containsKey(name)) {\n            return (Execution) metrics.get(name);\n        } else {\n            Execution execution = new Execution(pcts);\n            return (Execution) register(name, execution);\n        }\n    }\n\n    public Object register(String name, Object newMetric) {\n        Object existingMetric = metrics.putIfAbsent(name, newMetric);\n        if (existingMetric != null) {\n            return existingMetric;\n        } else {\n            return newMetric;\n        }\n    }\n\n    public SortedMap<String, Counter> getCounters() {\n        return getMetrics(Counter.class);\n    }\n\n    public SortedMap<String, Histogram> getHistograms() {\n        return getMetrics(Histogram.class);\n    }\n\n    public SortedMap<String, Execution> getExecutions() {\n        return getMetrics(Execution.class);\n    }\n\n    private <T> SortedMap<String, T> getMetrics(Class<T> klass) {\n        final SortedMap<String, T> result = new TreeMap<String, T>();\n        for (Map.Entry<String, Object> entry : metrics.entrySet()) {\n            if (klass.isInstance(entry.getValue())) {\n                result.put(entry.getKey(), (T) entry.getValue());\n            }\n        }\n        return Collections.unmodifiableSortedMap(result);\n    }\n\n    public void setDefaultPcts(Double[] defaultPcts) {\n        this.defaultPcts = defaultPcts;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/metrics/src/main/java/org/springside/modules/metrics/MetricRegistryTest6.java",
		"test_prompt": "// MetricRegistryTest6.java\npackage org.springside.modules.metrics;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetricRegistry}.\n* It contains ten unit test cases for the {@link MetricRegistry#register(String, Object)} method.\n*/\nclass MetricRegistryTest6 {"
	},
	{
		"original_code": "// Counter.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.metrics;\n\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.springside.modules.metrics.utils.Clock;\n\npublic class Counter {\n\n    public static Clock clock = Clock.DEFAULT;\n\n    private AtomicLong counter = new AtomicLong(0);\n\n    private long totalCount = 0L;\n\n    private long lastReportTime;\n\n    public Counter() {\n        lastReportTime = clock.getCurrentTime();\n    }\n\n    public void inc() {\n        counter.incrementAndGet();\n    }\n\n    public void inc(long n) {\n        counter.addAndGet(n);\n    }\n\n    public void dec() {\n        counter.decrementAndGet();\n    }\n\n    public void dec(long n) {\n        counter.addAndGet(-n);\n    }\n\n    public CounterMetric calculateMetric() {\n        long lastCount = counter.getAndSet(0);\n        long currentTime = clock.getCurrentTime();\n        CounterMetric metric = new CounterMetric();\n        totalCount += lastCount;\n        metric.lastCount = lastCount;\n        metric.totalCount = totalCount;\n        long elapsed = currentTime - lastReportTime;\n        if (elapsed > 0) {\n            metric.lastRate = (lastCount * 1000) / elapsed;\n        }\n        lastReportTime = currentTime;\n        return metric;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/metrics/src/main/java/org/springside/modules/metrics/CounterTest.java",
		"test_prompt": "// CounterTest.java\npackage org.springside.modules.metrics;\n\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.springside.modules.metrics.utils.Clock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Counter}.\n* It contains ten unit test cases for the {@link Counter#calculateMetric()} method.\n*/\nclass CounterTest {"
	},
	{
		"original_code": "// Histogram.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.metrics;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class Histogram {\n\n    private List<Long> measurements = new LinkedList<Long>();\n\n    private Double[] pcts;\n\n    private Object lock = new Object();\n\n    public Histogram(Double... pcts) {\n        this.pcts = pcts;\n    }\n\n    public void update(long value) {\n        synchronized (lock) {\n            measurements.add(value);\n        }\n    }\n\n    public HistogramMetric calculateMetric() {\n        List<Long> snapshotList = null;\n        synchronized (lock) {\n            snapshotList = measurements;\n            measurements = new LinkedList();\n        }\n        if (snapshotList.isEmpty()) {\n            return createEmptyMetric();\n        }\n        Collections.sort(snapshotList);\n        int count = snapshotList.size();\n        HistogramMetric metric = new HistogramMetric();\n        metric.min = snapshotList.get(0);\n        metric.max = snapshotList.get(count - 1);\n        double sum = 0;\n        for (long value : snapshotList) {\n            sum += value;\n        }\n        metric.mean = sum / count;\n        for (Double pct : pcts) {\n            metric.pcts.put(pct, getPercent(snapshotList, count, pct));\n        }\n        return metric;\n    }\n\n    private Long getPercent(List<Long> snapshotList, int count, double pct) {\n        final double pos = (pct * (count + 1)) / 100;\n        if (pos < 1) {\n            return snapshotList.get(0);\n        }\n        if (pos >= count) {\n            return snapshotList.get(count - 1);\n        }\n        return snapshotList.get((int) pos - 1);\n    }\n\n    private HistogramMetric createEmptyMetric() {\n        HistogramMetric metric = new HistogramMetric();\n        metric.min = 0;\n        metric.max = 0;\n        metric.mean = 0;\n        for (Double pct : pcts) {\n            metric.pcts.put(pct, 0L);\n        }\n        return metric;\n    }\n\n    @Override\n    public String toString() {\n        return \"Histogram [measurements=\" + measurements + \", pcts=\" + Arrays.toString(pcts) + \"]\";\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/metrics/src/main/java/org/springside/modules/metrics/HistogramTest.java",
		"test_prompt": "// HistogramTest.java\npackage org.springside.modules.metrics;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Histogram}.\n* It contains ten unit test cases for the {@link Histogram#calculateMetric()} method.\n*/\nclass HistogramTest {"
	},
	{
		"original_code": "// Cryptos.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持HMAC-SHA1消息签名 及 DES/AES对称加密的工具类.\n *\n * 支持Hex与Base64两种编码方式.\n *\n * @author calvin\n */\npublic class Cryptos {\n\n    private static final String AES = \"AES\";\n\n    private static final String AES_CBC = \"AES/CBC/PKCS5Padding\";\n\n    private static final String HMACSHA1 = \"HmacSHA1\";\n\n    // RFC2401\n    private static final int DEFAULT_HMACSHA1_KEYSIZE = 160;\n\n    private static final int DEFAULT_AES_KEYSIZE = 128;\n\n    private static final int DEFAULT_IVSIZE = 16;\n\n    private static SecureRandom random = new SecureRandom();\n\n    // -- HMAC-SHA1 funciton --//\n    /**\n     * 使用HMAC-SHA1进行消息签名, 返回字节数组,长度为20字节.\n     *\n     * @param input 原始输入字符数组\n     * @param key HMAC-SHA1密钥\n     */\n    public static byte[] hmacSha1(byte[] input, byte[] key) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, HMACSHA1);\n            Mac mac = Mac.getInstance(HMACSHA1);\n            mac.init(secretKey);\n            return mac.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 校验HMAC-SHA1签名是否正确.\n     *\n     * @param expected 已存在的签名\n     * @param input 原始输入字符串\n     * @param key 密钥\n     */\n    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {\n        byte[] actual = hmacSha1(input, key);\n        return Arrays.equals(expected, actual);\n    }\n\n    /**\n     * 生成HMAC-SHA1密钥,返回字节数组,长度为160位(20字节).\n     * HMAC-SHA1算法对密钥无特殊要求, RFC2401建议最少长度为160位(20字节).\n     */\n    public static byte[] generateHmacSha1Key() {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(HMACSHA1);\n            keyGenerator.init(DEFAULT_HMACSHA1_KEYSIZE);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    // -- AES funciton --//\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key) {\n        return aes(input, key, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key, byte[] iv) {\n        return aes(input, key, iv, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     */\n    public static String aesDecrypt(byte[] input, byte[] key) {\n        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static String aesDecrypt(byte[] input, byte[] key, byte[] iv) {\n        byte[] decryptResult = aes(input, key, iv, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            Cipher cipher = Cipher.getInstance(AES);\n            cipher.init(mode, secretKey);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, byte[] iv, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            IvParameterSpec ivSpec = new IvParameterSpec(iv);\n            Cipher cipher = Cipher.getInstance(AES_CBC);\n            cipher.init(mode, secretKey, ivSpec);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成AES密钥,返回字节数组, 默认长度为128位(16字节).\n     */\n    public static byte[] generateAesKey() {\n        return generateAesKey(DEFAULT_AES_KEYSIZE);\n    }\n\n    /**\n     * 生成AES密钥,可选长度为128,192,256位.\n     */\n    public static byte[] generateAesKey(int keysize) {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(AES);\n            keyGenerator.init(keysize);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机向量,默认大小为cipher.getBlockSize(), 16字节.\n     */\n    public static byte[] generateIV() {\n        byte[] bytes = new byte[DEFAULT_IVSIZE];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/CryptosTest0.java",
		"test_prompt": "// CryptosTest0.java\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Cryptos}.\n* It contains ten unit test cases for the {@link Cryptos#hmacSha1(byte[], byte[])} method.\n*/\nclass CryptosTest0 {"
	},
	{
		"original_code": "// Cryptos.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持HMAC-SHA1消息签名 及 DES/AES对称加密的工具类.\n *\n * 支持Hex与Base64两种编码方式.\n *\n * @author calvin\n */\npublic class Cryptos {\n\n    private static final String AES = \"AES\";\n\n    private static final String AES_CBC = \"AES/CBC/PKCS5Padding\";\n\n    private static final String HMACSHA1 = \"HmacSHA1\";\n\n    // RFC2401\n    private static final int DEFAULT_HMACSHA1_KEYSIZE = 160;\n\n    private static final int DEFAULT_AES_KEYSIZE = 128;\n\n    private static final int DEFAULT_IVSIZE = 16;\n\n    private static SecureRandom random = new SecureRandom();\n\n    // -- HMAC-SHA1 funciton --//\n    /**\n     * 使用HMAC-SHA1进行消息签名, 返回字节数组,长度为20字节.\n     *\n     * @param input 原始输入字符数组\n     * @param key HMAC-SHA1密钥\n     */\n    public static byte[] hmacSha1(byte[] input, byte[] key) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, HMACSHA1);\n            Mac mac = Mac.getInstance(HMACSHA1);\n            mac.init(secretKey);\n            return mac.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 校验HMAC-SHA1签名是否正确.\n     *\n     * @param expected 已存在的签名\n     * @param input 原始输入字符串\n     * @param key 密钥\n     */\n    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {\n        byte[] actual = hmacSha1(input, key);\n        return Arrays.equals(expected, actual);\n    }\n\n    /**\n     * 生成HMAC-SHA1密钥,返回字节数组,长度为160位(20字节).\n     * HMAC-SHA1算法对密钥无特殊要求, RFC2401建议最少长度为160位(20字节).\n     */\n    public static byte[] generateHmacSha1Key() {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(HMACSHA1);\n            keyGenerator.init(DEFAULT_HMACSHA1_KEYSIZE);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    // -- AES funciton --//\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key) {\n        return aes(input, key, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key, byte[] iv) {\n        return aes(input, key, iv, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     */\n    public static String aesDecrypt(byte[] input, byte[] key) {\n        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static String aesDecrypt(byte[] input, byte[] key, byte[] iv) {\n        byte[] decryptResult = aes(input, key, iv, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            Cipher cipher = Cipher.getInstance(AES);\n            cipher.init(mode, secretKey);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, byte[] iv, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            IvParameterSpec ivSpec = new IvParameterSpec(iv);\n            Cipher cipher = Cipher.getInstance(AES_CBC);\n            cipher.init(mode, secretKey, ivSpec);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成AES密钥,返回字节数组, 默认长度为128位(16字节).\n     */\n    public static byte[] generateAesKey() {\n        return generateAesKey(DEFAULT_AES_KEYSIZE);\n    }\n\n    /**\n     * 生成AES密钥,可选长度为128,192,256位.\n     */\n    public static byte[] generateAesKey(int keysize) {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(AES);\n            keyGenerator.init(keysize);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机向量,默认大小为cipher.getBlockSize(), 16字节.\n     */\n    public static byte[] generateIV() {\n        byte[] bytes = new byte[DEFAULT_IVSIZE];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/CryptosTest1.java",
		"test_prompt": "// CryptosTest1.java\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Cryptos}.\n* It contains ten unit test cases for the {@link Cryptos#isMacValid(byte[], byte[], byte[])} method.\n*/\nclass CryptosTest1 {"
	},
	{
		"original_code": "// Cryptos.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持HMAC-SHA1消息签名 及 DES/AES对称加密的工具类.\n *\n * 支持Hex与Base64两种编码方式.\n *\n * @author calvin\n */\npublic class Cryptos {\n\n    private static final String AES = \"AES\";\n\n    private static final String AES_CBC = \"AES/CBC/PKCS5Padding\";\n\n    private static final String HMACSHA1 = \"HmacSHA1\";\n\n    // RFC2401\n    private static final int DEFAULT_HMACSHA1_KEYSIZE = 160;\n\n    private static final int DEFAULT_AES_KEYSIZE = 128;\n\n    private static final int DEFAULT_IVSIZE = 16;\n\n    private static SecureRandom random = new SecureRandom();\n\n    // -- HMAC-SHA1 funciton --//\n    /**\n     * 使用HMAC-SHA1进行消息签名, 返回字节数组,长度为20字节.\n     *\n     * @param input 原始输入字符数组\n     * @param key HMAC-SHA1密钥\n     */\n    public static byte[] hmacSha1(byte[] input, byte[] key) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, HMACSHA1);\n            Mac mac = Mac.getInstance(HMACSHA1);\n            mac.init(secretKey);\n            return mac.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 校验HMAC-SHA1签名是否正确.\n     *\n     * @param expected 已存在的签名\n     * @param input 原始输入字符串\n     * @param key 密钥\n     */\n    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {\n        byte[] actual = hmacSha1(input, key);\n        return Arrays.equals(expected, actual);\n    }\n\n    /**\n     * 生成HMAC-SHA1密钥,返回字节数组,长度为160位(20字节).\n     * HMAC-SHA1算法对密钥无特殊要求, RFC2401建议最少长度为160位(20字节).\n     */\n    public static byte[] generateHmacSha1Key() {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(HMACSHA1);\n            keyGenerator.init(DEFAULT_HMACSHA1_KEYSIZE);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    // -- AES funciton --//\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key) {\n        return aes(input, key, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key, byte[] iv) {\n        return aes(input, key, iv, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     */\n    public static String aesDecrypt(byte[] input, byte[] key) {\n        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static String aesDecrypt(byte[] input, byte[] key, byte[] iv) {\n        byte[] decryptResult = aes(input, key, iv, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            Cipher cipher = Cipher.getInstance(AES);\n            cipher.init(mode, secretKey);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, byte[] iv, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            IvParameterSpec ivSpec = new IvParameterSpec(iv);\n            Cipher cipher = Cipher.getInstance(AES_CBC);\n            cipher.init(mode, secretKey, ivSpec);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成AES密钥,返回字节数组, 默认长度为128位(16字节).\n     */\n    public static byte[] generateAesKey() {\n        return generateAesKey(DEFAULT_AES_KEYSIZE);\n    }\n\n    /**\n     * 生成AES密钥,可选长度为128,192,256位.\n     */\n    public static byte[] generateAesKey(int keysize) {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(AES);\n            keyGenerator.init(keysize);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机向量,默认大小为cipher.getBlockSize(), 16字节.\n     */\n    public static byte[] generateIV() {\n        byte[] bytes = new byte[DEFAULT_IVSIZE];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/CryptosTest2.java",
		"test_prompt": "// CryptosTest2.java\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Cryptos}.\n* It contains ten unit test cases for the {@link Cryptos#generateHmacSha1Key()} method.\n*/\nclass CryptosTest2 {"
	},
	{
		"original_code": "// Cryptos.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持HMAC-SHA1消息签名 及 DES/AES对称加密的工具类.\n *\n * 支持Hex与Base64两种编码方式.\n *\n * @author calvin\n */\npublic class Cryptos {\n\n    private static final String AES = \"AES\";\n\n    private static final String AES_CBC = \"AES/CBC/PKCS5Padding\";\n\n    private static final String HMACSHA1 = \"HmacSHA1\";\n\n    // RFC2401\n    private static final int DEFAULT_HMACSHA1_KEYSIZE = 160;\n\n    private static final int DEFAULT_AES_KEYSIZE = 128;\n\n    private static final int DEFAULT_IVSIZE = 16;\n\n    private static SecureRandom random = new SecureRandom();\n\n    // -- HMAC-SHA1 funciton --//\n    /**\n     * 使用HMAC-SHA1进行消息签名, 返回字节数组,长度为20字节.\n     *\n     * @param input 原始输入字符数组\n     * @param key HMAC-SHA1密钥\n     */\n    public static byte[] hmacSha1(byte[] input, byte[] key) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, HMACSHA1);\n            Mac mac = Mac.getInstance(HMACSHA1);\n            mac.init(secretKey);\n            return mac.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 校验HMAC-SHA1签名是否正确.\n     *\n     * @param expected 已存在的签名\n     * @param input 原始输入字符串\n     * @param key 密钥\n     */\n    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {\n        byte[] actual = hmacSha1(input, key);\n        return Arrays.equals(expected, actual);\n    }\n\n    /**\n     * 生成HMAC-SHA1密钥,返回字节数组,长度为160位(20字节).\n     * HMAC-SHA1算法对密钥无特殊要求, RFC2401建议最少长度为160位(20字节).\n     */\n    public static byte[] generateHmacSha1Key() {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(HMACSHA1);\n            keyGenerator.init(DEFAULT_HMACSHA1_KEYSIZE);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    // -- AES funciton --//\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key) {\n        return aes(input, key, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key, byte[] iv) {\n        return aes(input, key, iv, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     */\n    public static String aesDecrypt(byte[] input, byte[] key) {\n        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static String aesDecrypt(byte[] input, byte[] key, byte[] iv) {\n        byte[] decryptResult = aes(input, key, iv, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            Cipher cipher = Cipher.getInstance(AES);\n            cipher.init(mode, secretKey);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, byte[] iv, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            IvParameterSpec ivSpec = new IvParameterSpec(iv);\n            Cipher cipher = Cipher.getInstance(AES_CBC);\n            cipher.init(mode, secretKey, ivSpec);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成AES密钥,返回字节数组, 默认长度为128位(16字节).\n     */\n    public static byte[] generateAesKey() {\n        return generateAesKey(DEFAULT_AES_KEYSIZE);\n    }\n\n    /**\n     * 生成AES密钥,可选长度为128,192,256位.\n     */\n    public static byte[] generateAesKey(int keysize) {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(AES);\n            keyGenerator.init(keysize);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机向量,默认大小为cipher.getBlockSize(), 16字节.\n     */\n    public static byte[] generateIV() {\n        byte[] bytes = new byte[DEFAULT_IVSIZE];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/CryptosTest3.java",
		"test_prompt": "// CryptosTest3.java\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Cryptos}.\n* It contains ten unit test cases for the {@link Cryptos#aesEncrypt(byte[], byte[])} method.\n*/\nclass CryptosTest3 {"
	},
	{
		"original_code": "// Cryptos.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持HMAC-SHA1消息签名 及 DES/AES对称加密的工具类.\n *\n * 支持Hex与Base64两种编码方式.\n *\n * @author calvin\n */\npublic class Cryptos {\n\n    private static final String AES = \"AES\";\n\n    private static final String AES_CBC = \"AES/CBC/PKCS5Padding\";\n\n    private static final String HMACSHA1 = \"HmacSHA1\";\n\n    // RFC2401\n    private static final int DEFAULT_HMACSHA1_KEYSIZE = 160;\n\n    private static final int DEFAULT_AES_KEYSIZE = 128;\n\n    private static final int DEFAULT_IVSIZE = 16;\n\n    private static SecureRandom random = new SecureRandom();\n\n    // -- HMAC-SHA1 funciton --//\n    /**\n     * 使用HMAC-SHA1进行消息签名, 返回字节数组,长度为20字节.\n     *\n     * @param input 原始输入字符数组\n     * @param key HMAC-SHA1密钥\n     */\n    public static byte[] hmacSha1(byte[] input, byte[] key) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, HMACSHA1);\n            Mac mac = Mac.getInstance(HMACSHA1);\n            mac.init(secretKey);\n            return mac.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 校验HMAC-SHA1签名是否正确.\n     *\n     * @param expected 已存在的签名\n     * @param input 原始输入字符串\n     * @param key 密钥\n     */\n    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {\n        byte[] actual = hmacSha1(input, key);\n        return Arrays.equals(expected, actual);\n    }\n\n    /**\n     * 生成HMAC-SHA1密钥,返回字节数组,长度为160位(20字节).\n     * HMAC-SHA1算法对密钥无特殊要求, RFC2401建议最少长度为160位(20字节).\n     */\n    public static byte[] generateHmacSha1Key() {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(HMACSHA1);\n            keyGenerator.init(DEFAULT_HMACSHA1_KEYSIZE);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    // -- AES funciton --//\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key) {\n        return aes(input, key, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key, byte[] iv) {\n        return aes(input, key, iv, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     */\n    public static String aesDecrypt(byte[] input, byte[] key) {\n        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static String aesDecrypt(byte[] input, byte[] key, byte[] iv) {\n        byte[] decryptResult = aes(input, key, iv, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            Cipher cipher = Cipher.getInstance(AES);\n            cipher.init(mode, secretKey);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, byte[] iv, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            IvParameterSpec ivSpec = new IvParameterSpec(iv);\n            Cipher cipher = Cipher.getInstance(AES_CBC);\n            cipher.init(mode, secretKey, ivSpec);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成AES密钥,返回字节数组, 默认长度为128位(16字节).\n     */\n    public static byte[] generateAesKey() {\n        return generateAesKey(DEFAULT_AES_KEYSIZE);\n    }\n\n    /**\n     * 生成AES密钥,可选长度为128,192,256位.\n     */\n    public static byte[] generateAesKey(int keysize) {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(AES);\n            keyGenerator.init(keysize);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机向量,默认大小为cipher.getBlockSize(), 16字节.\n     */\n    public static byte[] generateIV() {\n        byte[] bytes = new byte[DEFAULT_IVSIZE];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/CryptosTest4.java",
		"test_prompt": "// CryptosTest4.java\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Cryptos}.\n* It contains ten unit test cases for the {@link Cryptos#aesEncrypt(byte[], byte[], byte[])} method.\n*/\nclass CryptosTest4 {"
	},
	{
		"original_code": "// Cryptos.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持HMAC-SHA1消息签名 及 DES/AES对称加密的工具类.\n *\n * 支持Hex与Base64两种编码方式.\n *\n * @author calvin\n */\npublic class Cryptos {\n\n    private static final String AES = \"AES\";\n\n    private static final String AES_CBC = \"AES/CBC/PKCS5Padding\";\n\n    private static final String HMACSHA1 = \"HmacSHA1\";\n\n    // RFC2401\n    private static final int DEFAULT_HMACSHA1_KEYSIZE = 160;\n\n    private static final int DEFAULT_AES_KEYSIZE = 128;\n\n    private static final int DEFAULT_IVSIZE = 16;\n\n    private static SecureRandom random = new SecureRandom();\n\n    // -- HMAC-SHA1 funciton --//\n    /**\n     * 使用HMAC-SHA1进行消息签名, 返回字节数组,长度为20字节.\n     *\n     * @param input 原始输入字符数组\n     * @param key HMAC-SHA1密钥\n     */\n    public static byte[] hmacSha1(byte[] input, byte[] key) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, HMACSHA1);\n            Mac mac = Mac.getInstance(HMACSHA1);\n            mac.init(secretKey);\n            return mac.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 校验HMAC-SHA1签名是否正确.\n     *\n     * @param expected 已存在的签名\n     * @param input 原始输入字符串\n     * @param key 密钥\n     */\n    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {\n        byte[] actual = hmacSha1(input, key);\n        return Arrays.equals(expected, actual);\n    }\n\n    /**\n     * 生成HMAC-SHA1密钥,返回字节数组,长度为160位(20字节).\n     * HMAC-SHA1算法对密钥无特殊要求, RFC2401建议最少长度为160位(20字节).\n     */\n    public static byte[] generateHmacSha1Key() {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(HMACSHA1);\n            keyGenerator.init(DEFAULT_HMACSHA1_KEYSIZE);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    // -- AES funciton --//\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key) {\n        return aes(input, key, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key, byte[] iv) {\n        return aes(input, key, iv, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     */\n    public static String aesDecrypt(byte[] input, byte[] key) {\n        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static String aesDecrypt(byte[] input, byte[] key, byte[] iv) {\n        byte[] decryptResult = aes(input, key, iv, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            Cipher cipher = Cipher.getInstance(AES);\n            cipher.init(mode, secretKey);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, byte[] iv, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            IvParameterSpec ivSpec = new IvParameterSpec(iv);\n            Cipher cipher = Cipher.getInstance(AES_CBC);\n            cipher.init(mode, secretKey, ivSpec);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成AES密钥,返回字节数组, 默认长度为128位(16字节).\n     */\n    public static byte[] generateAesKey() {\n        return generateAesKey(DEFAULT_AES_KEYSIZE);\n    }\n\n    /**\n     * 生成AES密钥,可选长度为128,192,256位.\n     */\n    public static byte[] generateAesKey(int keysize) {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(AES);\n            keyGenerator.init(keysize);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机向量,默认大小为cipher.getBlockSize(), 16字节.\n     */\n    public static byte[] generateIV() {\n        byte[] bytes = new byte[DEFAULT_IVSIZE];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/CryptosTest5.java",
		"test_prompt": "// CryptosTest5.java\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Cryptos}.\n* It contains ten unit test cases for the {@link Cryptos#aesDecrypt(byte[], byte[])} method.\n*/\nclass CryptosTest5 {"
	},
	{
		"original_code": "// Cryptos.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持HMAC-SHA1消息签名 及 DES/AES对称加密的工具类.\n *\n * 支持Hex与Base64两种编码方式.\n *\n * @author calvin\n */\npublic class Cryptos {\n\n    private static final String AES = \"AES\";\n\n    private static final String AES_CBC = \"AES/CBC/PKCS5Padding\";\n\n    private static final String HMACSHA1 = \"HmacSHA1\";\n\n    // RFC2401\n    private static final int DEFAULT_HMACSHA1_KEYSIZE = 160;\n\n    private static final int DEFAULT_AES_KEYSIZE = 128;\n\n    private static final int DEFAULT_IVSIZE = 16;\n\n    private static SecureRandom random = new SecureRandom();\n\n    // -- HMAC-SHA1 funciton --//\n    /**\n     * 使用HMAC-SHA1进行消息签名, 返回字节数组,长度为20字节.\n     *\n     * @param input 原始输入字符数组\n     * @param key HMAC-SHA1密钥\n     */\n    public static byte[] hmacSha1(byte[] input, byte[] key) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, HMACSHA1);\n            Mac mac = Mac.getInstance(HMACSHA1);\n            mac.init(secretKey);\n            return mac.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 校验HMAC-SHA1签名是否正确.\n     *\n     * @param expected 已存在的签名\n     * @param input 原始输入字符串\n     * @param key 密钥\n     */\n    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {\n        byte[] actual = hmacSha1(input, key);\n        return Arrays.equals(expected, actual);\n    }\n\n    /**\n     * 生成HMAC-SHA1密钥,返回字节数组,长度为160位(20字节).\n     * HMAC-SHA1算法对密钥无特殊要求, RFC2401建议最少长度为160位(20字节).\n     */\n    public static byte[] generateHmacSha1Key() {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(HMACSHA1);\n            keyGenerator.init(DEFAULT_HMACSHA1_KEYSIZE);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    // -- AES funciton --//\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key) {\n        return aes(input, key, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key, byte[] iv) {\n        return aes(input, key, iv, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     */\n    public static String aesDecrypt(byte[] input, byte[] key) {\n        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static String aesDecrypt(byte[] input, byte[] key, byte[] iv) {\n        byte[] decryptResult = aes(input, key, iv, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            Cipher cipher = Cipher.getInstance(AES);\n            cipher.init(mode, secretKey);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, byte[] iv, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            IvParameterSpec ivSpec = new IvParameterSpec(iv);\n            Cipher cipher = Cipher.getInstance(AES_CBC);\n            cipher.init(mode, secretKey, ivSpec);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成AES密钥,返回字节数组, 默认长度为128位(16字节).\n     */\n    public static byte[] generateAesKey() {\n        return generateAesKey(DEFAULT_AES_KEYSIZE);\n    }\n\n    /**\n     * 生成AES密钥,可选长度为128,192,256位.\n     */\n    public static byte[] generateAesKey(int keysize) {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(AES);\n            keyGenerator.init(keysize);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机向量,默认大小为cipher.getBlockSize(), 16字节.\n     */\n    public static byte[] generateIV() {\n        byte[] bytes = new byte[DEFAULT_IVSIZE];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/CryptosTest6.java",
		"test_prompt": "// CryptosTest6.java\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Cryptos}.\n* It contains ten unit test cases for the {@link Cryptos#aesDecrypt(byte[], byte[], byte[])} method.\n*/\nclass CryptosTest6 {"
	},
	{
		"original_code": "// Cryptos.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持HMAC-SHA1消息签名 及 DES/AES对称加密的工具类.\n *\n * 支持Hex与Base64两种编码方式.\n *\n * @author calvin\n */\npublic class Cryptos {\n\n    private static final String AES = \"AES\";\n\n    private static final String AES_CBC = \"AES/CBC/PKCS5Padding\";\n\n    private static final String HMACSHA1 = \"HmacSHA1\";\n\n    // RFC2401\n    private static final int DEFAULT_HMACSHA1_KEYSIZE = 160;\n\n    private static final int DEFAULT_AES_KEYSIZE = 128;\n\n    private static final int DEFAULT_IVSIZE = 16;\n\n    private static SecureRandom random = new SecureRandom();\n\n    // -- HMAC-SHA1 funciton --//\n    /**\n     * 使用HMAC-SHA1进行消息签名, 返回字节数组,长度为20字节.\n     *\n     * @param input 原始输入字符数组\n     * @param key HMAC-SHA1密钥\n     */\n    public static byte[] hmacSha1(byte[] input, byte[] key) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, HMACSHA1);\n            Mac mac = Mac.getInstance(HMACSHA1);\n            mac.init(secretKey);\n            return mac.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 校验HMAC-SHA1签名是否正确.\n     *\n     * @param expected 已存在的签名\n     * @param input 原始输入字符串\n     * @param key 密钥\n     */\n    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {\n        byte[] actual = hmacSha1(input, key);\n        return Arrays.equals(expected, actual);\n    }\n\n    /**\n     * 生成HMAC-SHA1密钥,返回字节数组,长度为160位(20字节).\n     * HMAC-SHA1算法对密钥无特殊要求, RFC2401建议最少长度为160位(20字节).\n     */\n    public static byte[] generateHmacSha1Key() {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(HMACSHA1);\n            keyGenerator.init(DEFAULT_HMACSHA1_KEYSIZE);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    // -- AES funciton --//\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key) {\n        return aes(input, key, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key, byte[] iv) {\n        return aes(input, key, iv, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     */\n    public static String aesDecrypt(byte[] input, byte[] key) {\n        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static String aesDecrypt(byte[] input, byte[] key, byte[] iv) {\n        byte[] decryptResult = aes(input, key, iv, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            Cipher cipher = Cipher.getInstance(AES);\n            cipher.init(mode, secretKey);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, byte[] iv, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            IvParameterSpec ivSpec = new IvParameterSpec(iv);\n            Cipher cipher = Cipher.getInstance(AES_CBC);\n            cipher.init(mode, secretKey, ivSpec);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成AES密钥,返回字节数组, 默认长度为128位(16字节).\n     */\n    public static byte[] generateAesKey() {\n        return generateAesKey(DEFAULT_AES_KEYSIZE);\n    }\n\n    /**\n     * 生成AES密钥,可选长度为128,192,256位.\n     */\n    public static byte[] generateAesKey(int keysize) {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(AES);\n            keyGenerator.init(keysize);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机向量,默认大小为cipher.getBlockSize(), 16字节.\n     */\n    public static byte[] generateIV() {\n        byte[] bytes = new byte[DEFAULT_IVSIZE];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/CryptosTest7.java",
		"test_prompt": "// CryptosTest7.java\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Cryptos}.\n* It contains ten unit test cases for the {@link Cryptos#generateAesKey()} method.\n*/\nclass CryptosTest7 {"
	},
	{
		"original_code": "// Cryptos.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持HMAC-SHA1消息签名 及 DES/AES对称加密的工具类.\n *\n * 支持Hex与Base64两种编码方式.\n *\n * @author calvin\n */\npublic class Cryptos {\n\n    private static final String AES = \"AES\";\n\n    private static final String AES_CBC = \"AES/CBC/PKCS5Padding\";\n\n    private static final String HMACSHA1 = \"HmacSHA1\";\n\n    // RFC2401\n    private static final int DEFAULT_HMACSHA1_KEYSIZE = 160;\n\n    private static final int DEFAULT_AES_KEYSIZE = 128;\n\n    private static final int DEFAULT_IVSIZE = 16;\n\n    private static SecureRandom random = new SecureRandom();\n\n    // -- HMAC-SHA1 funciton --//\n    /**\n     * 使用HMAC-SHA1进行消息签名, 返回字节数组,长度为20字节.\n     *\n     * @param input 原始输入字符数组\n     * @param key HMAC-SHA1密钥\n     */\n    public static byte[] hmacSha1(byte[] input, byte[] key) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, HMACSHA1);\n            Mac mac = Mac.getInstance(HMACSHA1);\n            mac.init(secretKey);\n            return mac.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 校验HMAC-SHA1签名是否正确.\n     *\n     * @param expected 已存在的签名\n     * @param input 原始输入字符串\n     * @param key 密钥\n     */\n    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {\n        byte[] actual = hmacSha1(input, key);\n        return Arrays.equals(expected, actual);\n    }\n\n    /**\n     * 生成HMAC-SHA1密钥,返回字节数组,长度为160位(20字节).\n     * HMAC-SHA1算法对密钥无特殊要求, RFC2401建议最少长度为160位(20字节).\n     */\n    public static byte[] generateHmacSha1Key() {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(HMACSHA1);\n            keyGenerator.init(DEFAULT_HMACSHA1_KEYSIZE);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    // -- AES funciton --//\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key) {\n        return aes(input, key, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key, byte[] iv) {\n        return aes(input, key, iv, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     */\n    public static String aesDecrypt(byte[] input, byte[] key) {\n        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static String aesDecrypt(byte[] input, byte[] key, byte[] iv) {\n        byte[] decryptResult = aes(input, key, iv, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            Cipher cipher = Cipher.getInstance(AES);\n            cipher.init(mode, secretKey);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, byte[] iv, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            IvParameterSpec ivSpec = new IvParameterSpec(iv);\n            Cipher cipher = Cipher.getInstance(AES_CBC);\n            cipher.init(mode, secretKey, ivSpec);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成AES密钥,返回字节数组, 默认长度为128位(16字节).\n     */\n    public static byte[] generateAesKey() {\n        return generateAesKey(DEFAULT_AES_KEYSIZE);\n    }\n\n    /**\n     * 生成AES密钥,可选长度为128,192,256位.\n     */\n    public static byte[] generateAesKey(int keysize) {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(AES);\n            keyGenerator.init(keysize);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机向量,默认大小为cipher.getBlockSize(), 16字节.\n     */\n    public static byte[] generateIV() {\n        byte[] bytes = new byte[DEFAULT_IVSIZE];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/CryptosTest8.java",
		"test_prompt": "// CryptosTest8.java\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Cryptos}.\n* It contains ten unit test cases for the {@link Cryptos#generateAesKey(int)} method.\n*/\nclass CryptosTest8 {"
	},
	{
		"original_code": "// Cryptos.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持HMAC-SHA1消息签名 及 DES/AES对称加密的工具类.\n *\n * 支持Hex与Base64两种编码方式.\n *\n * @author calvin\n */\npublic class Cryptos {\n\n    private static final String AES = \"AES\";\n\n    private static final String AES_CBC = \"AES/CBC/PKCS5Padding\";\n\n    private static final String HMACSHA1 = \"HmacSHA1\";\n\n    // RFC2401\n    private static final int DEFAULT_HMACSHA1_KEYSIZE = 160;\n\n    private static final int DEFAULT_AES_KEYSIZE = 128;\n\n    private static final int DEFAULT_IVSIZE = 16;\n\n    private static SecureRandom random = new SecureRandom();\n\n    // -- HMAC-SHA1 funciton --//\n    /**\n     * 使用HMAC-SHA1进行消息签名, 返回字节数组,长度为20字节.\n     *\n     * @param input 原始输入字符数组\n     * @param key HMAC-SHA1密钥\n     */\n    public static byte[] hmacSha1(byte[] input, byte[] key) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, HMACSHA1);\n            Mac mac = Mac.getInstance(HMACSHA1);\n            mac.init(secretKey);\n            return mac.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 校验HMAC-SHA1签名是否正确.\n     *\n     * @param expected 已存在的签名\n     * @param input 原始输入字符串\n     * @param key 密钥\n     */\n    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {\n        byte[] actual = hmacSha1(input, key);\n        return Arrays.equals(expected, actual);\n    }\n\n    /**\n     * 生成HMAC-SHA1密钥,返回字节数组,长度为160位(20字节).\n     * HMAC-SHA1算法对密钥无特殊要求, RFC2401建议最少长度为160位(20字节).\n     */\n    public static byte[] generateHmacSha1Key() {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(HMACSHA1);\n            keyGenerator.init(DEFAULT_HMACSHA1_KEYSIZE);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    // -- AES funciton --//\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key) {\n        return aes(input, key, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES加密原始字符串.\n     *\n     * @param input 原始输入字符数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static byte[] aesEncrypt(byte[] input, byte[] key, byte[] iv) {\n        return aes(input, key, iv, Cipher.ENCRYPT_MODE);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     */\n    public static String aesDecrypt(byte[] input, byte[] key) {\n        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES解密字符串, 返回原始字符串.\n     *\n     * @param input Hex编码的加密字符串\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     */\n    public static String aesDecrypt(byte[] input, byte[] key, byte[] iv) {\n        byte[] decryptResult = aes(input, key, iv, Cipher.DECRYPT_MODE);\n        return new String(decryptResult);\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            Cipher cipher = Cipher.getInstance(AES);\n            cipher.init(mode, secretKey);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 使用AES加密或解密无编码的原始字节数组, 返回无编码的字节数组结果.\n     *\n     * @param input 原始字节数组\n     * @param key 符合AES要求的密钥\n     * @param iv 初始向量\n     * @param mode Cipher.ENCRYPT_MODE 或 Cipher.DECRYPT_MODE\n     */\n    private static byte[] aes(byte[] input, byte[] key, byte[] iv, int mode) {\n        try {\n            SecretKey secretKey = new SecretKeySpec(key, AES);\n            IvParameterSpec ivSpec = new IvParameterSpec(iv);\n            Cipher cipher = Cipher.getInstance(AES_CBC);\n            cipher.init(mode, secretKey, ivSpec);\n            return cipher.doFinal(input);\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成AES密钥,返回字节数组, 默认长度为128位(16字节).\n     */\n    public static byte[] generateAesKey() {\n        return generateAesKey(DEFAULT_AES_KEYSIZE);\n    }\n\n    /**\n     * 生成AES密钥,可选长度为128,192,256位.\n     */\n    public static byte[] generateAesKey(int keysize) {\n        try {\n            KeyGenerator keyGenerator = KeyGenerator.getInstance(AES);\n            keyGenerator.init(keysize);\n            SecretKey secretKey = keyGenerator.generateKey();\n            return secretKey.getEncoded();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机向量,默认大小为cipher.getBlockSize(), 16字节.\n     */\n    public static byte[] generateIV() {\n        byte[] bytes = new byte[DEFAULT_IVSIZE];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/CryptosTest9.java",
		"test_prompt": "// CryptosTest9.java\npackage org.springside.modules.security.utils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.SecureRandom;\nimport java.util.Arrays;\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.Mac;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Cryptos}.\n* It contains ten unit test cases for the {@link Cryptos#generateIV()} method.\n*/\nclass CryptosTest9 {"
	},
	{
		"original_code": "// Digests.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持SHA-1/MD5消息摘要的工具类.\n *\n * 返回ByteSource，可进一步被编码为Hex, Base64或UrlSafeBase64\n *\n * @author calvin\n */\npublic class Digests {\n\n    private static final String SHA1 = \"SHA-1\";\n\n    private static final String MD5 = \"MD5\";\n\n    private static SecureRandom random = new SecureRandom();\n\n    /**\n     * 对输入字符串进行sha1散列.\n     */\n    public static byte[] sha1(byte[] input) {\n        return digest(input, SHA1, null, 1);\n    }\n\n    public static byte[] sha1(byte[] input, byte[] salt) {\n        return digest(input, SHA1, salt, 1);\n    }\n\n    public static byte[] sha1(byte[] input, byte[] salt, int iterations) {\n        return digest(input, SHA1, salt, iterations);\n    }\n\n    /**\n     * 对字符串进行散列, 支持md5与sha1算法.\n     */\n    private static byte[] digest(byte[] input, String algorithm, byte[] salt, int iterations) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(algorithm);\n            if (salt != null) {\n                digest.update(salt);\n            }\n            byte[] result = digest.digest(input);\n            for (int i = 1; i < iterations; i++) {\n                digest.reset();\n                result = digest.digest(result);\n            }\n            return result;\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机的Byte[]作为salt.\n     *\n     * @param numBytes byte数组的大小\n     */\n    public static byte[] generateSalt(int numBytes) {\n        Validate.isTrue(numBytes > 0, \"numBytes argument must be a positive integer (1 or larger)\", numBytes);\n        byte[] bytes = new byte[numBytes];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n\n    /**\n     * 对文件进行md5散列.\n     */\n    public static byte[] md5(InputStream input) throws IOException {\n        return digest(input, MD5);\n    }\n\n    /**\n     * 对文件进行sha1散列.\n     */\n    public static byte[] sha1(InputStream input) throws IOException {\n        return digest(input, SHA1);\n    }\n\n    private static byte[] digest(InputStream input, String algorithm) throws IOException {\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);\n            int bufferLength = 8 * 1024;\n            byte[] buffer = new byte[bufferLength];\n            int read = input.read(buffer, 0, bufferLength);\n            while (read > -1) {\n                messageDigest.update(buffer, 0, read);\n                read = input.read(buffer, 0, bufferLength);\n            }\n            return messageDigest.digest();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/DigestsTest0.java",
		"test_prompt": "// DigestsTest0.java\npackage org.springside.modules.security.utils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Digests}.\n* It contains ten unit test cases for the {@link Digests#sha1(byte[])} method.\n*/\nclass DigestsTest0 {"
	},
	{
		"original_code": "// Digests.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持SHA-1/MD5消息摘要的工具类.\n *\n * 返回ByteSource，可进一步被编码为Hex, Base64或UrlSafeBase64\n *\n * @author calvin\n */\npublic class Digests {\n\n    private static final String SHA1 = \"SHA-1\";\n\n    private static final String MD5 = \"MD5\";\n\n    private static SecureRandom random = new SecureRandom();\n\n    /**\n     * 对输入字符串进行sha1散列.\n     */\n    public static byte[] sha1(byte[] input) {\n        return digest(input, SHA1, null, 1);\n    }\n\n    public static byte[] sha1(byte[] input, byte[] salt) {\n        return digest(input, SHA1, salt, 1);\n    }\n\n    public static byte[] sha1(byte[] input, byte[] salt, int iterations) {\n        return digest(input, SHA1, salt, iterations);\n    }\n\n    /**\n     * 对字符串进行散列, 支持md5与sha1算法.\n     */\n    private static byte[] digest(byte[] input, String algorithm, byte[] salt, int iterations) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(algorithm);\n            if (salt != null) {\n                digest.update(salt);\n            }\n            byte[] result = digest.digest(input);\n            for (int i = 1; i < iterations; i++) {\n                digest.reset();\n                result = digest.digest(result);\n            }\n            return result;\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机的Byte[]作为salt.\n     *\n     * @param numBytes byte数组的大小\n     */\n    public static byte[] generateSalt(int numBytes) {\n        Validate.isTrue(numBytes > 0, \"numBytes argument must be a positive integer (1 or larger)\", numBytes);\n        byte[] bytes = new byte[numBytes];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n\n    /**\n     * 对文件进行md5散列.\n     */\n    public static byte[] md5(InputStream input) throws IOException {\n        return digest(input, MD5);\n    }\n\n    /**\n     * 对文件进行sha1散列.\n     */\n    public static byte[] sha1(InputStream input) throws IOException {\n        return digest(input, SHA1);\n    }\n\n    private static byte[] digest(InputStream input, String algorithm) throws IOException {\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);\n            int bufferLength = 8 * 1024;\n            byte[] buffer = new byte[bufferLength];\n            int read = input.read(buffer, 0, bufferLength);\n            while (read > -1) {\n                messageDigest.update(buffer, 0, read);\n                read = input.read(buffer, 0, bufferLength);\n            }\n            return messageDigest.digest();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/DigestsTest1.java",
		"test_prompt": "// DigestsTest1.java\npackage org.springside.modules.security.utils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Digests}.\n* It contains ten unit test cases for the {@link Digests#sha1(byte[], byte[])} method.\n*/\nclass DigestsTest1 {"
	},
	{
		"original_code": "// Digests.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持SHA-1/MD5消息摘要的工具类.\n *\n * 返回ByteSource，可进一步被编码为Hex, Base64或UrlSafeBase64\n *\n * @author calvin\n */\npublic class Digests {\n\n    private static final String SHA1 = \"SHA-1\";\n\n    private static final String MD5 = \"MD5\";\n\n    private static SecureRandom random = new SecureRandom();\n\n    /**\n     * 对输入字符串进行sha1散列.\n     */\n    public static byte[] sha1(byte[] input) {\n        return digest(input, SHA1, null, 1);\n    }\n\n    public static byte[] sha1(byte[] input, byte[] salt) {\n        return digest(input, SHA1, salt, 1);\n    }\n\n    public static byte[] sha1(byte[] input, byte[] salt, int iterations) {\n        return digest(input, SHA1, salt, iterations);\n    }\n\n    /**\n     * 对字符串进行散列, 支持md5与sha1算法.\n     */\n    private static byte[] digest(byte[] input, String algorithm, byte[] salt, int iterations) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(algorithm);\n            if (salt != null) {\n                digest.update(salt);\n            }\n            byte[] result = digest.digest(input);\n            for (int i = 1; i < iterations; i++) {\n                digest.reset();\n                result = digest.digest(result);\n            }\n            return result;\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机的Byte[]作为salt.\n     *\n     * @param numBytes byte数组的大小\n     */\n    public static byte[] generateSalt(int numBytes) {\n        Validate.isTrue(numBytes > 0, \"numBytes argument must be a positive integer (1 or larger)\", numBytes);\n        byte[] bytes = new byte[numBytes];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n\n    /**\n     * 对文件进行md5散列.\n     */\n    public static byte[] md5(InputStream input) throws IOException {\n        return digest(input, MD5);\n    }\n\n    /**\n     * 对文件进行sha1散列.\n     */\n    public static byte[] sha1(InputStream input) throws IOException {\n        return digest(input, SHA1);\n    }\n\n    private static byte[] digest(InputStream input, String algorithm) throws IOException {\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);\n            int bufferLength = 8 * 1024;\n            byte[] buffer = new byte[bufferLength];\n            int read = input.read(buffer, 0, bufferLength);\n            while (read > -1) {\n                messageDigest.update(buffer, 0, read);\n                read = input.read(buffer, 0, bufferLength);\n            }\n            return messageDigest.digest();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/DigestsTest2.java",
		"test_prompt": "// DigestsTest2.java\npackage org.springside.modules.security.utils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Digests}.\n* It contains ten unit test cases for the {@link Digests#sha1(byte[], byte[], int)} method.\n*/\nclass DigestsTest2 {"
	},
	{
		"original_code": "// Digests.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持SHA-1/MD5消息摘要的工具类.\n *\n * 返回ByteSource，可进一步被编码为Hex, Base64或UrlSafeBase64\n *\n * @author calvin\n */\npublic class Digests {\n\n    private static final String SHA1 = \"SHA-1\";\n\n    private static final String MD5 = \"MD5\";\n\n    private static SecureRandom random = new SecureRandom();\n\n    /**\n     * 对输入字符串进行sha1散列.\n     */\n    public static byte[] sha1(byte[] input) {\n        return digest(input, SHA1, null, 1);\n    }\n\n    public static byte[] sha1(byte[] input, byte[] salt) {\n        return digest(input, SHA1, salt, 1);\n    }\n\n    public static byte[] sha1(byte[] input, byte[] salt, int iterations) {\n        return digest(input, SHA1, salt, iterations);\n    }\n\n    /**\n     * 对字符串进行散列, 支持md5与sha1算法.\n     */\n    private static byte[] digest(byte[] input, String algorithm, byte[] salt, int iterations) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(algorithm);\n            if (salt != null) {\n                digest.update(salt);\n            }\n            byte[] result = digest.digest(input);\n            for (int i = 1; i < iterations; i++) {\n                digest.reset();\n                result = digest.digest(result);\n            }\n            return result;\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机的Byte[]作为salt.\n     *\n     * @param numBytes byte数组的大小\n     */\n    public static byte[] generateSalt(int numBytes) {\n        Validate.isTrue(numBytes > 0, \"numBytes argument must be a positive integer (1 or larger)\", numBytes);\n        byte[] bytes = new byte[numBytes];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n\n    /**\n     * 对文件进行md5散列.\n     */\n    public static byte[] md5(InputStream input) throws IOException {\n        return digest(input, MD5);\n    }\n\n    /**\n     * 对文件进行sha1散列.\n     */\n    public static byte[] sha1(InputStream input) throws IOException {\n        return digest(input, SHA1);\n    }\n\n    private static byte[] digest(InputStream input, String algorithm) throws IOException {\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);\n            int bufferLength = 8 * 1024;\n            byte[] buffer = new byte[bufferLength];\n            int read = input.read(buffer, 0, bufferLength);\n            while (read > -1) {\n                messageDigest.update(buffer, 0, read);\n                read = input.read(buffer, 0, bufferLength);\n            }\n            return messageDigest.digest();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/DigestsTest3.java",
		"test_prompt": "// DigestsTest3.java\npackage org.springside.modules.security.utils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Digests}.\n* It contains ten unit test cases for the {@link Digests#generateSalt(int)} method.\n*/\nclass DigestsTest3 {"
	},
	{
		"original_code": "// Digests.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持SHA-1/MD5消息摘要的工具类.\n *\n * 返回ByteSource，可进一步被编码为Hex, Base64或UrlSafeBase64\n *\n * @author calvin\n */\npublic class Digests {\n\n    private static final String SHA1 = \"SHA-1\";\n\n    private static final String MD5 = \"MD5\";\n\n    private static SecureRandom random = new SecureRandom();\n\n    /**\n     * 对输入字符串进行sha1散列.\n     */\n    public static byte[] sha1(byte[] input) {\n        return digest(input, SHA1, null, 1);\n    }\n\n    public static byte[] sha1(byte[] input, byte[] salt) {\n        return digest(input, SHA1, salt, 1);\n    }\n\n    public static byte[] sha1(byte[] input, byte[] salt, int iterations) {\n        return digest(input, SHA1, salt, iterations);\n    }\n\n    /**\n     * 对字符串进行散列, 支持md5与sha1算法.\n     */\n    private static byte[] digest(byte[] input, String algorithm, byte[] salt, int iterations) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(algorithm);\n            if (salt != null) {\n                digest.update(salt);\n            }\n            byte[] result = digest.digest(input);\n            for (int i = 1; i < iterations; i++) {\n                digest.reset();\n                result = digest.digest(result);\n            }\n            return result;\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机的Byte[]作为salt.\n     *\n     * @param numBytes byte数组的大小\n     */\n    public static byte[] generateSalt(int numBytes) {\n        Validate.isTrue(numBytes > 0, \"numBytes argument must be a positive integer (1 or larger)\", numBytes);\n        byte[] bytes = new byte[numBytes];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n\n    /**\n     * 对文件进行md5散列.\n     */\n    public static byte[] md5(InputStream input) throws IOException {\n        return digest(input, MD5);\n    }\n\n    /**\n     * 对文件进行sha1散列.\n     */\n    public static byte[] sha1(InputStream input) throws IOException {\n        return digest(input, SHA1);\n    }\n\n    private static byte[] digest(InputStream input, String algorithm) throws IOException {\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);\n            int bufferLength = 8 * 1024;\n            byte[] buffer = new byte[bufferLength];\n            int read = input.read(buffer, 0, bufferLength);\n            while (read > -1) {\n                messageDigest.update(buffer, 0, read);\n                read = input.read(buffer, 0, bufferLength);\n            }\n            return messageDigest.digest();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/DigestsTest4.java",
		"test_prompt": "// DigestsTest4.java\npackage org.springside.modules.security.utils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Digests}.\n* It contains ten unit test cases for the {@link Digests#md5(InputStream)} method.\n*/\nclass DigestsTest4 {"
	},
	{
		"original_code": "// Digests.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.security.utils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\n\n/**\n * 支持SHA-1/MD5消息摘要的工具类.\n *\n * 返回ByteSource，可进一步被编码为Hex, Base64或UrlSafeBase64\n *\n * @author calvin\n */\npublic class Digests {\n\n    private static final String SHA1 = \"SHA-1\";\n\n    private static final String MD5 = \"MD5\";\n\n    private static SecureRandom random = new SecureRandom();\n\n    /**\n     * 对输入字符串进行sha1散列.\n     */\n    public static byte[] sha1(byte[] input) {\n        return digest(input, SHA1, null, 1);\n    }\n\n    public static byte[] sha1(byte[] input, byte[] salt) {\n        return digest(input, SHA1, salt, 1);\n    }\n\n    public static byte[] sha1(byte[] input, byte[] salt, int iterations) {\n        return digest(input, SHA1, salt, iterations);\n    }\n\n    /**\n     * 对字符串进行散列, 支持md5与sha1算法.\n     */\n    private static byte[] digest(byte[] input, String algorithm, byte[] salt, int iterations) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(algorithm);\n            if (salt != null) {\n                digest.update(salt);\n            }\n            byte[] result = digest.digest(input);\n            for (int i = 1; i < iterations; i++) {\n                digest.reset();\n                result = digest.digest(result);\n            }\n            return result;\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 生成随机的Byte[]作为salt.\n     *\n     * @param numBytes byte数组的大小\n     */\n    public static byte[] generateSalt(int numBytes) {\n        Validate.isTrue(numBytes > 0, \"numBytes argument must be a positive integer (1 or larger)\", numBytes);\n        byte[] bytes = new byte[numBytes];\n        random.nextBytes(bytes);\n        return bytes;\n    }\n\n    /**\n     * 对文件进行md5散列.\n     */\n    public static byte[] md5(InputStream input) throws IOException {\n        return digest(input, MD5);\n    }\n\n    /**\n     * 对文件进行sha1散列.\n     */\n    public static byte[] sha1(InputStream input) throws IOException {\n        return digest(input, SHA1);\n    }\n\n    private static byte[] digest(InputStream input, String algorithm) throws IOException {\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);\n            int bufferLength = 8 * 1024;\n            byte[] buffer = new byte[bufferLength];\n            int read = input.read(buffer, 0, bufferLength);\n            while (read > -1) {\n                messageDigest.update(buffer, 0, read);\n                read = input.read(buffer, 0, bufferLength);\n            }\n            return messageDigest.digest();\n        } catch (GeneralSecurityException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/security/utils/DigestsTest5.java",
		"test_prompt": "// DigestsTest5.java\npackage org.springside.modules.security.utils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.security.GeneralSecurityException;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Digests}.\n* It contains ten unit test cases for the {@link Digests#sha1(InputStream)} method.\n*/\nclass DigestsTest5 {"
	},
	{
		"original_code": "// Servlets.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.web;\n\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Collections3;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.base.Charsets;\nimport com.google.common.net.HttpHeaders;\n\n/**\n * Http与Servlet工具类.\n *\n * @author calvin\n */\npublic class Servlets {\n\n    // -- 常用数值定义 --//\n    public static final long ONE_YEAR_SECONDS = 60 * 60 * 24 * 365;\n\n    /**\n     * 设置客户端缓存过期时间 的Header.\n     */\n    public static void setExpiresHeader(HttpServletResponse response, long expiresSeconds) {\n        // Http 1.0 header, set a fix expires date.\n        response.setDateHeader(HttpHeaders.EXPIRES, System.currentTimeMillis() + (expiresSeconds * 1000));\n        // Http 1.1 header, set a time after now.\n        response.setHeader(HttpHeaders.CACHE_CONTROL, \"private, max-age=\" + expiresSeconds);\n    }\n\n    /**\n     * 设置禁止客户端缓存的Header.\n     */\n    public static void setNoCacheHeader(HttpServletResponse response) {\n        // Http 1.0 header\n        response.setDateHeader(HttpHeaders.EXPIRES, 1L);\n        response.addHeader(HttpHeaders.PRAGMA, \"no-cache\");\n        // Http 1.1 header\n        response.setHeader(HttpHeaders.CACHE_CONTROL, \"no-cache, no-store, max-age=0\");\n    }\n\n    /**\n     * 设置LastModified Header.\n     */\n    public static void setLastModifiedHeader(HttpServletResponse response, long lastModifiedDate) {\n        response.setDateHeader(HttpHeaders.LAST_MODIFIED, lastModifiedDate);\n    }\n\n    /**\n     * 设置Etag Header.\n     */\n    public static void setEtag(HttpServletResponse response, String etag) {\n        response.setHeader(HttpHeaders.ETAG, etag);\n    }\n\n    /**\n     * 根据浏览器If-Modified-Since Header, 计算文件是否已被修改.\n     *\n     * 如果无修改, checkIfModify返回false ,设置304 not modify status.\n     *\n     * @param lastModified 内容的最后修改时间.\n     */\n    public static boolean checkIfModifiedSince(HttpServletRequest request, HttpServletResponse response, long lastModified) {\n        long ifModifiedSince = request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE);\n        if ((ifModifiedSince != -1) && (lastModified < (ifModifiedSince + 1000))) {\n            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 根据浏览器 If-None-Match Header, 计算Etag是否已无效.\n     *\n     * 如果Etag有效, checkIfNoneMatch返回false, 设置304 not modify status.\n     *\n     * @param etag 内容的ETag.\n     */\n    public static boolean checkIfNoneMatchEtag(HttpServletRequest request, HttpServletResponse response, String etag) {\n        String headerValue = request.getHeader(HttpHeaders.IF_NONE_MATCH);\n        if (headerValue != null) {\n            boolean conditionSatisfied = false;\n            if (!\"*\".equals(headerValue)) {\n                StringTokenizer commaTokenizer = new StringTokenizer(headerValue, \",\");\n                while (!conditionSatisfied && commaTokenizer.hasMoreTokens()) {\n                    String currentToken = commaTokenizer.nextToken();\n                    if (currentToken.trim().equals(etag)) {\n                        conditionSatisfied = true;\n                    }\n                }\n            } else {\n                conditionSatisfied = true;\n            }\n            if (conditionSatisfied) {\n                response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                response.setHeader(HttpHeaders.ETAG, etag);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 设置让浏览器弹出下载对话框的Header.\n     *\n     * @param fileName 下载后的文件名.\n     */\n    public static void setFileDownloadHeader(HttpServletResponse response, String fileName) {\n        // 中文文件名支持\n        String encodedfileName = new String(fileName.getBytes(), Charsets.ISO_8859_1);\n        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\\\"\" + encodedfileName + \"\\\"\");\n    }\n\n    /**\n     * 取得带相同前缀的Request Parameters, copy from spring WebUtils.\n     *\n     * 返回的结果的Parameter名已去除前缀.\n     */\n    public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {\n        Validate.notNull(request, \"Request must not be null\");\n        Enumeration paramNames = request.getParameterNames();\n        Map<String, Object> params = new TreeMap<String, Object>();\n        if (prefix == null) {\n            prefix = \"\";\n        }\n        while ((paramNames != null) && paramNames.hasMoreElements()) {\n            String paramName = (String) paramNames.nextElement();\n            if (\"\".equals(prefix) || paramName.startsWith(prefix)) {\n                String unprefixed = paramName.substring(prefix.length());\n                String[] values = request.getParameterValues(paramName);\n                if ((values == null) || (values.length == 0)) {\n                    // Do nothing, no values found at all.\n                } else if (values.length > 1) {\n                    params.put(unprefixed, values);\n                } else {\n                    params.put(unprefixed, values[0]);\n                }\n            }\n        }\n        return params;\n    }\n\n    /**\n     * 组合Parameters生成Query String的Parameter部分, 并在paramter name上加上prefix.\n     *\n     * @see #getParametersStartingWith\n     */\n    public static String encodeParameterStringWithPrefix(Map<String, Object> params, String prefix) {\n        if (Collections3.isEmpty(params)) {\n            return \"\";\n        }\n        if (prefix == null) {\n            prefix = \"\";\n        }\n        StringBuilder queryStringBuilder = new StringBuilder();\n        Iterator<Entry<String, Object>> it = params.entrySet().iterator();\n        while (it.hasNext()) {\n            Entry<String, Object> entry = it.next();\n            queryStringBuilder.append(prefix).append(entry.getKey()).append('=').append(entry.getValue());\n            if (it.hasNext()) {\n                queryStringBuilder.append('&');\n            }\n        }\n        return queryStringBuilder.toString();\n    }\n\n    /**\n     * 客户端对Http Basic验证的 Header进行编码.\n     */\n    public static String encodeHttpBasic(String userName, String password) {\n        String encode = userName + \":\" + password;\n        return \"Basic \" + Encodes.encodeBase64(encode.getBytes());\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/web/ServletsTest0.java",
		"test_prompt": "// ServletsTest0.java\npackage org.springside.modules.web;\n\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Collections3;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.base.Charsets;\nimport com.google.common.net.HttpHeaders;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Servlets}.\n* It contains ten unit test cases for the {@link Servlets#checkIfModifiedSince(HttpServletRequest, HttpServletResponse, long)} method.\n*/\nclass ServletsTest0 {"
	},
	{
		"original_code": "// Servlets.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.web;\n\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Collections3;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.base.Charsets;\nimport com.google.common.net.HttpHeaders;\n\n/**\n * Http与Servlet工具类.\n *\n * @author calvin\n */\npublic class Servlets {\n\n    // -- 常用数值定义 --//\n    public static final long ONE_YEAR_SECONDS = 60 * 60 * 24 * 365;\n\n    /**\n     * 设置客户端缓存过期时间 的Header.\n     */\n    public static void setExpiresHeader(HttpServletResponse response, long expiresSeconds) {\n        // Http 1.0 header, set a fix expires date.\n        response.setDateHeader(HttpHeaders.EXPIRES, System.currentTimeMillis() + (expiresSeconds * 1000));\n        // Http 1.1 header, set a time after now.\n        response.setHeader(HttpHeaders.CACHE_CONTROL, \"private, max-age=\" + expiresSeconds);\n    }\n\n    /**\n     * 设置禁止客户端缓存的Header.\n     */\n    public static void setNoCacheHeader(HttpServletResponse response) {\n        // Http 1.0 header\n        response.setDateHeader(HttpHeaders.EXPIRES, 1L);\n        response.addHeader(HttpHeaders.PRAGMA, \"no-cache\");\n        // Http 1.1 header\n        response.setHeader(HttpHeaders.CACHE_CONTROL, \"no-cache, no-store, max-age=0\");\n    }\n\n    /**\n     * 设置LastModified Header.\n     */\n    public static void setLastModifiedHeader(HttpServletResponse response, long lastModifiedDate) {\n        response.setDateHeader(HttpHeaders.LAST_MODIFIED, lastModifiedDate);\n    }\n\n    /**\n     * 设置Etag Header.\n     */\n    public static void setEtag(HttpServletResponse response, String etag) {\n        response.setHeader(HttpHeaders.ETAG, etag);\n    }\n\n    /**\n     * 根据浏览器If-Modified-Since Header, 计算文件是否已被修改.\n     *\n     * 如果无修改, checkIfModify返回false ,设置304 not modify status.\n     *\n     * @param lastModified 内容的最后修改时间.\n     */\n    public static boolean checkIfModifiedSince(HttpServletRequest request, HttpServletResponse response, long lastModified) {\n        long ifModifiedSince = request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE);\n        if ((ifModifiedSince != -1) && (lastModified < (ifModifiedSince + 1000))) {\n            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 根据浏览器 If-None-Match Header, 计算Etag是否已无效.\n     *\n     * 如果Etag有效, checkIfNoneMatch返回false, 设置304 not modify status.\n     *\n     * @param etag 内容的ETag.\n     */\n    public static boolean checkIfNoneMatchEtag(HttpServletRequest request, HttpServletResponse response, String etag) {\n        String headerValue = request.getHeader(HttpHeaders.IF_NONE_MATCH);\n        if (headerValue != null) {\n            boolean conditionSatisfied = false;\n            if (!\"*\".equals(headerValue)) {\n                StringTokenizer commaTokenizer = new StringTokenizer(headerValue, \",\");\n                while (!conditionSatisfied && commaTokenizer.hasMoreTokens()) {\n                    String currentToken = commaTokenizer.nextToken();\n                    if (currentToken.trim().equals(etag)) {\n                        conditionSatisfied = true;\n                    }\n                }\n            } else {\n                conditionSatisfied = true;\n            }\n            if (conditionSatisfied) {\n                response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                response.setHeader(HttpHeaders.ETAG, etag);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 设置让浏览器弹出下载对话框的Header.\n     *\n     * @param fileName 下载后的文件名.\n     */\n    public static void setFileDownloadHeader(HttpServletResponse response, String fileName) {\n        // 中文文件名支持\n        String encodedfileName = new String(fileName.getBytes(), Charsets.ISO_8859_1);\n        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\\\"\" + encodedfileName + \"\\\"\");\n    }\n\n    /**\n     * 取得带相同前缀的Request Parameters, copy from spring WebUtils.\n     *\n     * 返回的结果的Parameter名已去除前缀.\n     */\n    public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {\n        Validate.notNull(request, \"Request must not be null\");\n        Enumeration paramNames = request.getParameterNames();\n        Map<String, Object> params = new TreeMap<String, Object>();\n        if (prefix == null) {\n            prefix = \"\";\n        }\n        while ((paramNames != null) && paramNames.hasMoreElements()) {\n            String paramName = (String) paramNames.nextElement();\n            if (\"\".equals(prefix) || paramName.startsWith(prefix)) {\n                String unprefixed = paramName.substring(prefix.length());\n                String[] values = request.getParameterValues(paramName);\n                if ((values == null) || (values.length == 0)) {\n                    // Do nothing, no values found at all.\n                } else if (values.length > 1) {\n                    params.put(unprefixed, values);\n                } else {\n                    params.put(unprefixed, values[0]);\n                }\n            }\n        }\n        return params;\n    }\n\n    /**\n     * 组合Parameters生成Query String的Parameter部分, 并在paramter name上加上prefix.\n     *\n     * @see #getParametersStartingWith\n     */\n    public static String encodeParameterStringWithPrefix(Map<String, Object> params, String prefix) {\n        if (Collections3.isEmpty(params)) {\n            return \"\";\n        }\n        if (prefix == null) {\n            prefix = \"\";\n        }\n        StringBuilder queryStringBuilder = new StringBuilder();\n        Iterator<Entry<String, Object>> it = params.entrySet().iterator();\n        while (it.hasNext()) {\n            Entry<String, Object> entry = it.next();\n            queryStringBuilder.append(prefix).append(entry.getKey()).append('=').append(entry.getValue());\n            if (it.hasNext()) {\n                queryStringBuilder.append('&');\n            }\n        }\n        return queryStringBuilder.toString();\n    }\n\n    /**\n     * 客户端对Http Basic验证的 Header进行编码.\n     */\n    public static String encodeHttpBasic(String userName, String password) {\n        String encode = userName + \":\" + password;\n        return \"Basic \" + Encodes.encodeBase64(encode.getBytes());\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/web/ServletsTest1.java",
		"test_prompt": "// ServletsTest1.java\npackage org.springside.modules.web;\n\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Collections3;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.base.Charsets;\nimport com.google.common.net.HttpHeaders;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Servlets}.\n* It contains ten unit test cases for the {@link Servlets#checkIfNoneMatchEtag(HttpServletRequest, HttpServletResponse, String)} method.\n*/\nclass ServletsTest1 {"
	},
	{
		"original_code": "// Servlets.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.web;\n\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Collections3;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.base.Charsets;\nimport com.google.common.net.HttpHeaders;\n\n/**\n * Http与Servlet工具类.\n *\n * @author calvin\n */\npublic class Servlets {\n\n    // -- 常用数值定义 --//\n    public static final long ONE_YEAR_SECONDS = 60 * 60 * 24 * 365;\n\n    /**\n     * 设置客户端缓存过期时间 的Header.\n     */\n    public static void setExpiresHeader(HttpServletResponse response, long expiresSeconds) {\n        // Http 1.0 header, set a fix expires date.\n        response.setDateHeader(HttpHeaders.EXPIRES, System.currentTimeMillis() + (expiresSeconds * 1000));\n        // Http 1.1 header, set a time after now.\n        response.setHeader(HttpHeaders.CACHE_CONTROL, \"private, max-age=\" + expiresSeconds);\n    }\n\n    /**\n     * 设置禁止客户端缓存的Header.\n     */\n    public static void setNoCacheHeader(HttpServletResponse response) {\n        // Http 1.0 header\n        response.setDateHeader(HttpHeaders.EXPIRES, 1L);\n        response.addHeader(HttpHeaders.PRAGMA, \"no-cache\");\n        // Http 1.1 header\n        response.setHeader(HttpHeaders.CACHE_CONTROL, \"no-cache, no-store, max-age=0\");\n    }\n\n    /**\n     * 设置LastModified Header.\n     */\n    public static void setLastModifiedHeader(HttpServletResponse response, long lastModifiedDate) {\n        response.setDateHeader(HttpHeaders.LAST_MODIFIED, lastModifiedDate);\n    }\n\n    /**\n     * 设置Etag Header.\n     */\n    public static void setEtag(HttpServletResponse response, String etag) {\n        response.setHeader(HttpHeaders.ETAG, etag);\n    }\n\n    /**\n     * 根据浏览器If-Modified-Since Header, 计算文件是否已被修改.\n     *\n     * 如果无修改, checkIfModify返回false ,设置304 not modify status.\n     *\n     * @param lastModified 内容的最后修改时间.\n     */\n    public static boolean checkIfModifiedSince(HttpServletRequest request, HttpServletResponse response, long lastModified) {\n        long ifModifiedSince = request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE);\n        if ((ifModifiedSince != -1) && (lastModified < (ifModifiedSince + 1000))) {\n            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 根据浏览器 If-None-Match Header, 计算Etag是否已无效.\n     *\n     * 如果Etag有效, checkIfNoneMatch返回false, 设置304 not modify status.\n     *\n     * @param etag 内容的ETag.\n     */\n    public static boolean checkIfNoneMatchEtag(HttpServletRequest request, HttpServletResponse response, String etag) {\n        String headerValue = request.getHeader(HttpHeaders.IF_NONE_MATCH);\n        if (headerValue != null) {\n            boolean conditionSatisfied = false;\n            if (!\"*\".equals(headerValue)) {\n                StringTokenizer commaTokenizer = new StringTokenizer(headerValue, \",\");\n                while (!conditionSatisfied && commaTokenizer.hasMoreTokens()) {\n                    String currentToken = commaTokenizer.nextToken();\n                    if (currentToken.trim().equals(etag)) {\n                        conditionSatisfied = true;\n                    }\n                }\n            } else {\n                conditionSatisfied = true;\n            }\n            if (conditionSatisfied) {\n                response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                response.setHeader(HttpHeaders.ETAG, etag);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 设置让浏览器弹出下载对话框的Header.\n     *\n     * @param fileName 下载后的文件名.\n     */\n    public static void setFileDownloadHeader(HttpServletResponse response, String fileName) {\n        // 中文文件名支持\n        String encodedfileName = new String(fileName.getBytes(), Charsets.ISO_8859_1);\n        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\\\"\" + encodedfileName + \"\\\"\");\n    }\n\n    /**\n     * 取得带相同前缀的Request Parameters, copy from spring WebUtils.\n     *\n     * 返回的结果的Parameter名已去除前缀.\n     */\n    public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {\n        Validate.notNull(request, \"Request must not be null\");\n        Enumeration paramNames = request.getParameterNames();\n        Map<String, Object> params = new TreeMap<String, Object>();\n        if (prefix == null) {\n            prefix = \"\";\n        }\n        while ((paramNames != null) && paramNames.hasMoreElements()) {\n            String paramName = (String) paramNames.nextElement();\n            if (\"\".equals(prefix) || paramName.startsWith(prefix)) {\n                String unprefixed = paramName.substring(prefix.length());\n                String[] values = request.getParameterValues(paramName);\n                if ((values == null) || (values.length == 0)) {\n                    // Do nothing, no values found at all.\n                } else if (values.length > 1) {\n                    params.put(unprefixed, values);\n                } else {\n                    params.put(unprefixed, values[0]);\n                }\n            }\n        }\n        return params;\n    }\n\n    /**\n     * 组合Parameters生成Query String的Parameter部分, 并在paramter name上加上prefix.\n     *\n     * @see #getParametersStartingWith\n     */\n    public static String encodeParameterStringWithPrefix(Map<String, Object> params, String prefix) {\n        if (Collections3.isEmpty(params)) {\n            return \"\";\n        }\n        if (prefix == null) {\n            prefix = \"\";\n        }\n        StringBuilder queryStringBuilder = new StringBuilder();\n        Iterator<Entry<String, Object>> it = params.entrySet().iterator();\n        while (it.hasNext()) {\n            Entry<String, Object> entry = it.next();\n            queryStringBuilder.append(prefix).append(entry.getKey()).append('=').append(entry.getValue());\n            if (it.hasNext()) {\n                queryStringBuilder.append('&');\n            }\n        }\n        return queryStringBuilder.toString();\n    }\n\n    /**\n     * 客户端对Http Basic验证的 Header进行编码.\n     */\n    public static String encodeHttpBasic(String userName, String password) {\n        String encode = userName + \":\" + password;\n        return \"Basic \" + Encodes.encodeBase64(encode.getBytes());\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/web/ServletsTest2.java",
		"test_prompt": "// ServletsTest2.java\npackage org.springside.modules.web;\n\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Collections3;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.base.Charsets;\nimport com.google.common.net.HttpHeaders;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Servlets}.\n* It contains ten unit test cases for the {@link Servlets#getParametersStartingWith(ServletRequest, String)} method.\n*/\nclass ServletsTest2 {"
	},
	{
		"original_code": "// Servlets.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.web;\n\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Collections3;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.base.Charsets;\nimport com.google.common.net.HttpHeaders;\n\n/**\n * Http与Servlet工具类.\n *\n * @author calvin\n */\npublic class Servlets {\n\n    // -- 常用数值定义 --//\n    public static final long ONE_YEAR_SECONDS = 60 * 60 * 24 * 365;\n\n    /**\n     * 设置客户端缓存过期时间 的Header.\n     */\n    public static void setExpiresHeader(HttpServletResponse response, long expiresSeconds) {\n        // Http 1.0 header, set a fix expires date.\n        response.setDateHeader(HttpHeaders.EXPIRES, System.currentTimeMillis() + (expiresSeconds * 1000));\n        // Http 1.1 header, set a time after now.\n        response.setHeader(HttpHeaders.CACHE_CONTROL, \"private, max-age=\" + expiresSeconds);\n    }\n\n    /**\n     * 设置禁止客户端缓存的Header.\n     */\n    public static void setNoCacheHeader(HttpServletResponse response) {\n        // Http 1.0 header\n        response.setDateHeader(HttpHeaders.EXPIRES, 1L);\n        response.addHeader(HttpHeaders.PRAGMA, \"no-cache\");\n        // Http 1.1 header\n        response.setHeader(HttpHeaders.CACHE_CONTROL, \"no-cache, no-store, max-age=0\");\n    }\n\n    /**\n     * 设置LastModified Header.\n     */\n    public static void setLastModifiedHeader(HttpServletResponse response, long lastModifiedDate) {\n        response.setDateHeader(HttpHeaders.LAST_MODIFIED, lastModifiedDate);\n    }\n\n    /**\n     * 设置Etag Header.\n     */\n    public static void setEtag(HttpServletResponse response, String etag) {\n        response.setHeader(HttpHeaders.ETAG, etag);\n    }\n\n    /**\n     * 根据浏览器If-Modified-Since Header, 计算文件是否已被修改.\n     *\n     * 如果无修改, checkIfModify返回false ,设置304 not modify status.\n     *\n     * @param lastModified 内容的最后修改时间.\n     */\n    public static boolean checkIfModifiedSince(HttpServletRequest request, HttpServletResponse response, long lastModified) {\n        long ifModifiedSince = request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE);\n        if ((ifModifiedSince != -1) && (lastModified < (ifModifiedSince + 1000))) {\n            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 根据浏览器 If-None-Match Header, 计算Etag是否已无效.\n     *\n     * 如果Etag有效, checkIfNoneMatch返回false, 设置304 not modify status.\n     *\n     * @param etag 内容的ETag.\n     */\n    public static boolean checkIfNoneMatchEtag(HttpServletRequest request, HttpServletResponse response, String etag) {\n        String headerValue = request.getHeader(HttpHeaders.IF_NONE_MATCH);\n        if (headerValue != null) {\n            boolean conditionSatisfied = false;\n            if (!\"*\".equals(headerValue)) {\n                StringTokenizer commaTokenizer = new StringTokenizer(headerValue, \",\");\n                while (!conditionSatisfied && commaTokenizer.hasMoreTokens()) {\n                    String currentToken = commaTokenizer.nextToken();\n                    if (currentToken.trim().equals(etag)) {\n                        conditionSatisfied = true;\n                    }\n                }\n            } else {\n                conditionSatisfied = true;\n            }\n            if (conditionSatisfied) {\n                response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                response.setHeader(HttpHeaders.ETAG, etag);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 设置让浏览器弹出下载对话框的Header.\n     *\n     * @param fileName 下载后的文件名.\n     */\n    public static void setFileDownloadHeader(HttpServletResponse response, String fileName) {\n        // 中文文件名支持\n        String encodedfileName = new String(fileName.getBytes(), Charsets.ISO_8859_1);\n        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\\\"\" + encodedfileName + \"\\\"\");\n    }\n\n    /**\n     * 取得带相同前缀的Request Parameters, copy from spring WebUtils.\n     *\n     * 返回的结果的Parameter名已去除前缀.\n     */\n    public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {\n        Validate.notNull(request, \"Request must not be null\");\n        Enumeration paramNames = request.getParameterNames();\n        Map<String, Object> params = new TreeMap<String, Object>();\n        if (prefix == null) {\n            prefix = \"\";\n        }\n        while ((paramNames != null) && paramNames.hasMoreElements()) {\n            String paramName = (String) paramNames.nextElement();\n            if (\"\".equals(prefix) || paramName.startsWith(prefix)) {\n                String unprefixed = paramName.substring(prefix.length());\n                String[] values = request.getParameterValues(paramName);\n                if ((values == null) || (values.length == 0)) {\n                    // Do nothing, no values found at all.\n                } else if (values.length > 1) {\n                    params.put(unprefixed, values);\n                } else {\n                    params.put(unprefixed, values[0]);\n                }\n            }\n        }\n        return params;\n    }\n\n    /**\n     * 组合Parameters生成Query String的Parameter部分, 并在paramter name上加上prefix.\n     *\n     * @see #getParametersStartingWith\n     */\n    public static String encodeParameterStringWithPrefix(Map<String, Object> params, String prefix) {\n        if (Collections3.isEmpty(params)) {\n            return \"\";\n        }\n        if (prefix == null) {\n            prefix = \"\";\n        }\n        StringBuilder queryStringBuilder = new StringBuilder();\n        Iterator<Entry<String, Object>> it = params.entrySet().iterator();\n        while (it.hasNext()) {\n            Entry<String, Object> entry = it.next();\n            queryStringBuilder.append(prefix).append(entry.getKey()).append('=').append(entry.getValue());\n            if (it.hasNext()) {\n                queryStringBuilder.append('&');\n            }\n        }\n        return queryStringBuilder.toString();\n    }\n\n    /**\n     * 客户端对Http Basic验证的 Header进行编码.\n     */\n    public static String encodeHttpBasic(String userName, String password) {\n        String encode = userName + \":\" + password;\n        return \"Basic \" + Encodes.encodeBase64(encode.getBytes());\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/web/ServletsTest3.java",
		"test_prompt": "// ServletsTest3.java\npackage org.springside.modules.web;\n\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Collections3;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.base.Charsets;\nimport com.google.common.net.HttpHeaders;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Servlets}.\n* It contains ten unit test cases for the {@link Servlets#encodeParameterStringWithPrefix(Map, String)} method.\n*/\nclass ServletsTest3 {"
	},
	{
		"original_code": "// Servlets.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.web;\n\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Collections3;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.base.Charsets;\nimport com.google.common.net.HttpHeaders;\n\n/**\n * Http与Servlet工具类.\n *\n * @author calvin\n */\npublic class Servlets {\n\n    // -- 常用数值定义 --//\n    public static final long ONE_YEAR_SECONDS = 60 * 60 * 24 * 365;\n\n    /**\n     * 设置客户端缓存过期时间 的Header.\n     */\n    public static void setExpiresHeader(HttpServletResponse response, long expiresSeconds) {\n        // Http 1.0 header, set a fix expires date.\n        response.setDateHeader(HttpHeaders.EXPIRES, System.currentTimeMillis() + (expiresSeconds * 1000));\n        // Http 1.1 header, set a time after now.\n        response.setHeader(HttpHeaders.CACHE_CONTROL, \"private, max-age=\" + expiresSeconds);\n    }\n\n    /**\n     * 设置禁止客户端缓存的Header.\n     */\n    public static void setNoCacheHeader(HttpServletResponse response) {\n        // Http 1.0 header\n        response.setDateHeader(HttpHeaders.EXPIRES, 1L);\n        response.addHeader(HttpHeaders.PRAGMA, \"no-cache\");\n        // Http 1.1 header\n        response.setHeader(HttpHeaders.CACHE_CONTROL, \"no-cache, no-store, max-age=0\");\n    }\n\n    /**\n     * 设置LastModified Header.\n     */\n    public static void setLastModifiedHeader(HttpServletResponse response, long lastModifiedDate) {\n        response.setDateHeader(HttpHeaders.LAST_MODIFIED, lastModifiedDate);\n    }\n\n    /**\n     * 设置Etag Header.\n     */\n    public static void setEtag(HttpServletResponse response, String etag) {\n        response.setHeader(HttpHeaders.ETAG, etag);\n    }\n\n    /**\n     * 根据浏览器If-Modified-Since Header, 计算文件是否已被修改.\n     *\n     * 如果无修改, checkIfModify返回false ,设置304 not modify status.\n     *\n     * @param lastModified 内容的最后修改时间.\n     */\n    public static boolean checkIfModifiedSince(HttpServletRequest request, HttpServletResponse response, long lastModified) {\n        long ifModifiedSince = request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE);\n        if ((ifModifiedSince != -1) && (lastModified < (ifModifiedSince + 1000))) {\n            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 根据浏览器 If-None-Match Header, 计算Etag是否已无效.\n     *\n     * 如果Etag有效, checkIfNoneMatch返回false, 设置304 not modify status.\n     *\n     * @param etag 内容的ETag.\n     */\n    public static boolean checkIfNoneMatchEtag(HttpServletRequest request, HttpServletResponse response, String etag) {\n        String headerValue = request.getHeader(HttpHeaders.IF_NONE_MATCH);\n        if (headerValue != null) {\n            boolean conditionSatisfied = false;\n            if (!\"*\".equals(headerValue)) {\n                StringTokenizer commaTokenizer = new StringTokenizer(headerValue, \",\");\n                while (!conditionSatisfied && commaTokenizer.hasMoreTokens()) {\n                    String currentToken = commaTokenizer.nextToken();\n                    if (currentToken.trim().equals(etag)) {\n                        conditionSatisfied = true;\n                    }\n                }\n            } else {\n                conditionSatisfied = true;\n            }\n            if (conditionSatisfied) {\n                response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                response.setHeader(HttpHeaders.ETAG, etag);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 设置让浏览器弹出下载对话框的Header.\n     *\n     * @param fileName 下载后的文件名.\n     */\n    public static void setFileDownloadHeader(HttpServletResponse response, String fileName) {\n        // 中文文件名支持\n        String encodedfileName = new String(fileName.getBytes(), Charsets.ISO_8859_1);\n        response.setHeader(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\\\"\" + encodedfileName + \"\\\"\");\n    }\n\n    /**\n     * 取得带相同前缀的Request Parameters, copy from spring WebUtils.\n     *\n     * 返回的结果的Parameter名已去除前缀.\n     */\n    public static Map<String, Object> getParametersStartingWith(ServletRequest request, String prefix) {\n        Validate.notNull(request, \"Request must not be null\");\n        Enumeration paramNames = request.getParameterNames();\n        Map<String, Object> params = new TreeMap<String, Object>();\n        if (prefix == null) {\n            prefix = \"\";\n        }\n        while ((paramNames != null) && paramNames.hasMoreElements()) {\n            String paramName = (String) paramNames.nextElement();\n            if (\"\".equals(prefix) || paramName.startsWith(prefix)) {\n                String unprefixed = paramName.substring(prefix.length());\n                String[] values = request.getParameterValues(paramName);\n                if ((values == null) || (values.length == 0)) {\n                    // Do nothing, no values found at all.\n                } else if (values.length > 1) {\n                    params.put(unprefixed, values);\n                } else {\n                    params.put(unprefixed, values[0]);\n                }\n            }\n        }\n        return params;\n    }\n\n    /**\n     * 组合Parameters生成Query String的Parameter部分, 并在paramter name上加上prefix.\n     *\n     * @see #getParametersStartingWith\n     */\n    public static String encodeParameterStringWithPrefix(Map<String, Object> params, String prefix) {\n        if (Collections3.isEmpty(params)) {\n            return \"\";\n        }\n        if (prefix == null) {\n            prefix = \"\";\n        }\n        StringBuilder queryStringBuilder = new StringBuilder();\n        Iterator<Entry<String, Object>> it = params.entrySet().iterator();\n        while (it.hasNext()) {\n            Entry<String, Object> entry = it.next();\n            queryStringBuilder.append(prefix).append(entry.getKey()).append('=').append(entry.getValue());\n            if (it.hasNext()) {\n                queryStringBuilder.append('&');\n            }\n        }\n        return queryStringBuilder.toString();\n    }\n\n    /**\n     * 客户端对Http Basic验证的 Header进行编码.\n     */\n    public static String encodeHttpBasic(String userName, String password) {\n        String encode = userName + \":\" + password;\n        return \"Basic \" + Encodes.encodeBase64(encode.getBytes());\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/web/ServletsTest4.java",
		"test_prompt": "// ServletsTest4.java\npackage org.springside.modules.web;\n\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.StringTokenizer;\nimport java.util.TreeMap;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Collections3;\nimport org.springside.modules.utils.Encodes;\nimport com.google.common.base.Charsets;\nimport com.google.common.net.HttpHeaders;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Servlets}.\n* It contains ten unit test cases for the {@link Servlets#encodeHttpBasic(String, String)} method.\n*/\nclass ServletsTest4 {"
	},
	{
		"original_code": "// BeanValidators.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\n/**\n * JSR303 Validator(Hibernate Validator)工具类.\n *\n * ConstraintViolation中包含propertyPath, message 和invalidValue等信息.\n * 提供了各种convert方法，适合不同的i18n需求:\n * 1. List<String>, String内容为message\n * 2. List<String>, String内容为propertyPath + separator + message\n * 3. Map<propertyPath, message>\n *\n * 详情见wiki: https://github.com/springside/springside4/wiki/HibernateValidator\n *\n * @author calvin\n */\npublic class BeanValidators {\n\n    /**\n     * 调用JSR303的validate方法, 验证失败时抛出ConstraintViolationException, 而不是返回constraintViolations.\n     */\n    public static void validateWithException(Validator validator, Object object, Class<?>... groups) throws ConstraintViolationException {\n        Set constraintViolations = validator.validate(object, groups);\n        if (!constraintViolations.isEmpty()) {\n            throw new ConstraintViolationException(constraintViolations);\n        }\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>中为List<message>.\n     */\n    public static List<String> extractMessage(ConstraintViolationException e) {\n        return extractMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<message>\n     */\n    public static List<String> extractMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(ConstraintViolationException e) {\n        return extractPropertyAndMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        Map<String, String> errorMessages = Maps.newHashMap();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.put(violation.getPropertyPath().toString(), violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), \" \");\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations) {\n        return extractPropertyAndMessageAsList(constraintViolations, \" \");\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e, String separator) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), separator);\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations, String separator) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getPropertyPath() + separator + violation.getMessage());\n        }\n        return errorMessages;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/beanvalidator/BeanValidatorsTest0.java",
		"test_prompt": "// BeanValidatorsTest0.java\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanValidators}.\n* It contains ten unit test cases for the {@link BeanValidators#extractMessage(ConstraintViolationException)} method.\n*/\nclass BeanValidatorsTest0 {"
	},
	{
		"original_code": "// BeanValidators.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\n/**\n * JSR303 Validator(Hibernate Validator)工具类.\n *\n * ConstraintViolation中包含propertyPath, message 和invalidValue等信息.\n * 提供了各种convert方法，适合不同的i18n需求:\n * 1. List<String>, String内容为message\n * 2. List<String>, String内容为propertyPath + separator + message\n * 3. Map<propertyPath, message>\n *\n * 详情见wiki: https://github.com/springside/springside4/wiki/HibernateValidator\n *\n * @author calvin\n */\npublic class BeanValidators {\n\n    /**\n     * 调用JSR303的validate方法, 验证失败时抛出ConstraintViolationException, 而不是返回constraintViolations.\n     */\n    public static void validateWithException(Validator validator, Object object, Class<?>... groups) throws ConstraintViolationException {\n        Set constraintViolations = validator.validate(object, groups);\n        if (!constraintViolations.isEmpty()) {\n            throw new ConstraintViolationException(constraintViolations);\n        }\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>中为List<message>.\n     */\n    public static List<String> extractMessage(ConstraintViolationException e) {\n        return extractMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<message>\n     */\n    public static List<String> extractMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(ConstraintViolationException e) {\n        return extractPropertyAndMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        Map<String, String> errorMessages = Maps.newHashMap();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.put(violation.getPropertyPath().toString(), violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), \" \");\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations) {\n        return extractPropertyAndMessageAsList(constraintViolations, \" \");\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e, String separator) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), separator);\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations, String separator) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getPropertyPath() + separator + violation.getMessage());\n        }\n        return errorMessages;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/beanvalidator/BeanValidatorsTest1.java",
		"test_prompt": "// BeanValidatorsTest1.java\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanValidators}.\n* It contains ten unit test cases for the {@link BeanValidators#extractMessage(Set)} method.\n*/\nclass BeanValidatorsTest1 {"
	},
	{
		"original_code": "// BeanValidators.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\n/**\n * JSR303 Validator(Hibernate Validator)工具类.\n *\n * ConstraintViolation中包含propertyPath, message 和invalidValue等信息.\n * 提供了各种convert方法，适合不同的i18n需求:\n * 1. List<String>, String内容为message\n * 2. List<String>, String内容为propertyPath + separator + message\n * 3. Map<propertyPath, message>\n *\n * 详情见wiki: https://github.com/springside/springside4/wiki/HibernateValidator\n *\n * @author calvin\n */\npublic class BeanValidators {\n\n    /**\n     * 调用JSR303的validate方法, 验证失败时抛出ConstraintViolationException, 而不是返回constraintViolations.\n     */\n    public static void validateWithException(Validator validator, Object object, Class<?>... groups) throws ConstraintViolationException {\n        Set constraintViolations = validator.validate(object, groups);\n        if (!constraintViolations.isEmpty()) {\n            throw new ConstraintViolationException(constraintViolations);\n        }\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>中为List<message>.\n     */\n    public static List<String> extractMessage(ConstraintViolationException e) {\n        return extractMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<message>\n     */\n    public static List<String> extractMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(ConstraintViolationException e) {\n        return extractPropertyAndMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        Map<String, String> errorMessages = Maps.newHashMap();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.put(violation.getPropertyPath().toString(), violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), \" \");\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations) {\n        return extractPropertyAndMessageAsList(constraintViolations, \" \");\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e, String separator) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), separator);\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations, String separator) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getPropertyPath() + separator + violation.getMessage());\n        }\n        return errorMessages;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/beanvalidator/BeanValidatorsTest2.java",
		"test_prompt": "// BeanValidatorsTest2.java\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanValidators}.\n* It contains ten unit test cases for the {@link BeanValidators#extractPropertyAndMessage(ConstraintViolationException)} method.\n*/\nclass BeanValidatorsTest2 {"
	},
	{
		"original_code": "// BeanValidators.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\n/**\n * JSR303 Validator(Hibernate Validator)工具类.\n *\n * ConstraintViolation中包含propertyPath, message 和invalidValue等信息.\n * 提供了各种convert方法，适合不同的i18n需求:\n * 1. List<String>, String内容为message\n * 2. List<String>, String内容为propertyPath + separator + message\n * 3. Map<propertyPath, message>\n *\n * 详情见wiki: https://github.com/springside/springside4/wiki/HibernateValidator\n *\n * @author calvin\n */\npublic class BeanValidators {\n\n    /**\n     * 调用JSR303的validate方法, 验证失败时抛出ConstraintViolationException, 而不是返回constraintViolations.\n     */\n    public static void validateWithException(Validator validator, Object object, Class<?>... groups) throws ConstraintViolationException {\n        Set constraintViolations = validator.validate(object, groups);\n        if (!constraintViolations.isEmpty()) {\n            throw new ConstraintViolationException(constraintViolations);\n        }\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>中为List<message>.\n     */\n    public static List<String> extractMessage(ConstraintViolationException e) {\n        return extractMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<message>\n     */\n    public static List<String> extractMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(ConstraintViolationException e) {\n        return extractPropertyAndMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        Map<String, String> errorMessages = Maps.newHashMap();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.put(violation.getPropertyPath().toString(), violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), \" \");\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations) {\n        return extractPropertyAndMessageAsList(constraintViolations, \" \");\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e, String separator) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), separator);\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations, String separator) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getPropertyPath() + separator + violation.getMessage());\n        }\n        return errorMessages;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/beanvalidator/BeanValidatorsTest3.java",
		"test_prompt": "// BeanValidatorsTest3.java\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanValidators}.\n* It contains ten unit test cases for the {@link BeanValidators#extractPropertyAndMessage(Set)} method.\n*/\nclass BeanValidatorsTest3 {"
	},
	{
		"original_code": "// BeanValidators.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\n/**\n * JSR303 Validator(Hibernate Validator)工具类.\n *\n * ConstraintViolation中包含propertyPath, message 和invalidValue等信息.\n * 提供了各种convert方法，适合不同的i18n需求:\n * 1. List<String>, String内容为message\n * 2. List<String>, String内容为propertyPath + separator + message\n * 3. Map<propertyPath, message>\n *\n * 详情见wiki: https://github.com/springside/springside4/wiki/HibernateValidator\n *\n * @author calvin\n */\npublic class BeanValidators {\n\n    /**\n     * 调用JSR303的validate方法, 验证失败时抛出ConstraintViolationException, 而不是返回constraintViolations.\n     */\n    public static void validateWithException(Validator validator, Object object, Class<?>... groups) throws ConstraintViolationException {\n        Set constraintViolations = validator.validate(object, groups);\n        if (!constraintViolations.isEmpty()) {\n            throw new ConstraintViolationException(constraintViolations);\n        }\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>中为List<message>.\n     */\n    public static List<String> extractMessage(ConstraintViolationException e) {\n        return extractMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<message>\n     */\n    public static List<String> extractMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(ConstraintViolationException e) {\n        return extractPropertyAndMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        Map<String, String> errorMessages = Maps.newHashMap();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.put(violation.getPropertyPath().toString(), violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), \" \");\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations) {\n        return extractPropertyAndMessageAsList(constraintViolations, \" \");\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e, String separator) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), separator);\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations, String separator) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getPropertyPath() + separator + violation.getMessage());\n        }\n        return errorMessages;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/beanvalidator/BeanValidatorsTest4.java",
		"test_prompt": "// BeanValidatorsTest4.java\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanValidators}.\n* It contains ten unit test cases for the {@link BeanValidators#extractPropertyAndMessageAsList(ConstraintViolationException)} method.\n*/\nclass BeanValidatorsTest4 {"
	},
	{
		"original_code": "// BeanValidators.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\n/**\n * JSR303 Validator(Hibernate Validator)工具类.\n *\n * ConstraintViolation中包含propertyPath, message 和invalidValue等信息.\n * 提供了各种convert方法，适合不同的i18n需求:\n * 1. List<String>, String内容为message\n * 2. List<String>, String内容为propertyPath + separator + message\n * 3. Map<propertyPath, message>\n *\n * 详情见wiki: https://github.com/springside/springside4/wiki/HibernateValidator\n *\n * @author calvin\n */\npublic class BeanValidators {\n\n    /**\n     * 调用JSR303的validate方法, 验证失败时抛出ConstraintViolationException, 而不是返回constraintViolations.\n     */\n    public static void validateWithException(Validator validator, Object object, Class<?>... groups) throws ConstraintViolationException {\n        Set constraintViolations = validator.validate(object, groups);\n        if (!constraintViolations.isEmpty()) {\n            throw new ConstraintViolationException(constraintViolations);\n        }\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>中为List<message>.\n     */\n    public static List<String> extractMessage(ConstraintViolationException e) {\n        return extractMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<message>\n     */\n    public static List<String> extractMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(ConstraintViolationException e) {\n        return extractPropertyAndMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        Map<String, String> errorMessages = Maps.newHashMap();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.put(violation.getPropertyPath().toString(), violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), \" \");\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations) {\n        return extractPropertyAndMessageAsList(constraintViolations, \" \");\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e, String separator) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), separator);\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations, String separator) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getPropertyPath() + separator + violation.getMessage());\n        }\n        return errorMessages;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/beanvalidator/BeanValidatorsTest5.java",
		"test_prompt": "// BeanValidatorsTest5.java\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanValidators}.\n* It contains ten unit test cases for the {@link BeanValidators#extractPropertyAndMessageAsList(Set)} method.\n*/\nclass BeanValidatorsTest5 {"
	},
	{
		"original_code": "// BeanValidators.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\n/**\n * JSR303 Validator(Hibernate Validator)工具类.\n *\n * ConstraintViolation中包含propertyPath, message 和invalidValue等信息.\n * 提供了各种convert方法，适合不同的i18n需求:\n * 1. List<String>, String内容为message\n * 2. List<String>, String内容为propertyPath + separator + message\n * 3. Map<propertyPath, message>\n *\n * 详情见wiki: https://github.com/springside/springside4/wiki/HibernateValidator\n *\n * @author calvin\n */\npublic class BeanValidators {\n\n    /**\n     * 调用JSR303的validate方法, 验证失败时抛出ConstraintViolationException, 而不是返回constraintViolations.\n     */\n    public static void validateWithException(Validator validator, Object object, Class<?>... groups) throws ConstraintViolationException {\n        Set constraintViolations = validator.validate(object, groups);\n        if (!constraintViolations.isEmpty()) {\n            throw new ConstraintViolationException(constraintViolations);\n        }\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>中为List<message>.\n     */\n    public static List<String> extractMessage(ConstraintViolationException e) {\n        return extractMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<message>\n     */\n    public static List<String> extractMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(ConstraintViolationException e) {\n        return extractPropertyAndMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        Map<String, String> errorMessages = Maps.newHashMap();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.put(violation.getPropertyPath().toString(), violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), \" \");\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations) {\n        return extractPropertyAndMessageAsList(constraintViolations, \" \");\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e, String separator) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), separator);\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations, String separator) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getPropertyPath() + separator + violation.getMessage());\n        }\n        return errorMessages;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/beanvalidator/BeanValidatorsTest6.java",
		"test_prompt": "// BeanValidatorsTest6.java\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanValidators}.\n* It contains ten unit test cases for the {@link BeanValidators#extractPropertyAndMessageAsList(ConstraintViolationException, String)} method.\n*/\nclass BeanValidatorsTest6 {"
	},
	{
		"original_code": "// BeanValidators.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\n/**\n * JSR303 Validator(Hibernate Validator)工具类.\n *\n * ConstraintViolation中包含propertyPath, message 和invalidValue等信息.\n * 提供了各种convert方法，适合不同的i18n需求:\n * 1. List<String>, String内容为message\n * 2. List<String>, String内容为propertyPath + separator + message\n * 3. Map<propertyPath, message>\n *\n * 详情见wiki: https://github.com/springside/springside4/wiki/HibernateValidator\n *\n * @author calvin\n */\npublic class BeanValidators {\n\n    /**\n     * 调用JSR303的validate方法, 验证失败时抛出ConstraintViolationException, 而不是返回constraintViolations.\n     */\n    public static void validateWithException(Validator validator, Object object, Class<?>... groups) throws ConstraintViolationException {\n        Set constraintViolations = validator.validate(object, groups);\n        if (!constraintViolations.isEmpty()) {\n            throw new ConstraintViolationException(constraintViolations);\n        }\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>中为List<message>.\n     */\n    public static List<String> extractMessage(ConstraintViolationException e) {\n        return extractMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<message>\n     */\n    public static List<String> extractMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(ConstraintViolationException e) {\n        return extractPropertyAndMessage(e.getConstraintViolations());\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为Map<property, message>.\n     */\n    public static Map<String, String> extractPropertyAndMessage(Set<? extends ConstraintViolation> constraintViolations) {\n        Map<String, String> errorMessages = Maps.newHashMap();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.put(violation.getPropertyPath().toString(), violation.getMessage());\n        }\n        return errorMessages;\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), \" \");\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolations>为List<propertyPath message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations) {\n        return extractPropertyAndMessageAsList(constraintViolations, \" \");\n    }\n\n    /**\n     * 辅助方法, 转换ConstraintViolationException中的Set<ConstraintViolations>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(ConstraintViolationException e, String separator) {\n        return extractPropertyAndMessageAsList(e.getConstraintViolations(), separator);\n    }\n\n    /**\n     * 辅助方法, 转换Set<ConstraintViolation>为List<propertyPath + separator + message>.\n     */\n    public static List<String> extractPropertyAndMessageAsList(Set<? extends ConstraintViolation> constraintViolations, String separator) {\n        List<String> errorMessages = Lists.newArrayList();\n        for (ConstraintViolation violation : constraintViolations) {\n            errorMessages.add(violation.getPropertyPath() + separator + violation.getMessage());\n        }\n        return errorMessages;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/beanvalidator/BeanValidatorsTest7.java",
		"test_prompt": "// BeanValidatorsTest7.java\npackage org.springside.modules.beanvalidator;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validator;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanValidators}.\n* It contains ten unit test cases for the {@link BeanValidators#extractPropertyAndMessageAsList(Set, String)} method.\n*/\nclass BeanValidatorsTest7 {"
	},
	{
		"original_code": "// BeanMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.util.Collection;\nimport java.util.List;\nimport org.dozer.DozerBeanMapper;\nimport com.google.common.collect.Lists;\n\n/**\n * 简单封装Dozer, 实现深度转换Bean<->Bean的Mapper.实现:\n *\n * 1. 持有Mapper的单例.\n * 2. 返回值类型转换.\n * 3. 批量转换Collection中的所有对象.\n * 4. 区分创建新的B对象与将对象A值复制到已存在的B对象两种函数.\n *\n * @author calvin\n */\npublic class BeanMapper {\n\n    /**\n     * 持有Dozer单例, 避免重复创建DozerMapper消耗资源.\n     */\n    private static DozerBeanMapper dozer = new DozerBeanMapper();\n\n    /**\n     * 基于Dozer转换对象的类型.\n     */\n    public static <T> T map(Object source, Class<T> destinationClass) {\n        return dozer.map(source, destinationClass);\n    }\n\n    /**\n     * 基于Dozer转换Collection中对象的类型.\n     */\n    public static <T> List<T> mapList(Collection sourceList, Class<T> destinationClass) {\n        List<T> destinationList = Lists.newArrayList();\n        for (Object sourceObject : sourceList) {\n            T destinationObject = dozer.map(sourceObject, destinationClass);\n            destinationList.add(destinationObject);\n        }\n        return destinationList;\n    }\n\n    /**\n     * 基于Dozer将对象A的值拷贝到对象B中.\n     */\n    public static void copy(Object source, Object destinationObject) {\n        dozer.map(source, destinationObject);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/BeanMapperTest0.java",
		"test_prompt": "// BeanMapperTest0.java\npackage org.springside.modules.mapper;\n\nimport java.util.Collection;\nimport java.util.List;\nimport org.dozer.DozerBeanMapper;\nimport com.google.common.collect.Lists;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanMapper}.\n* It contains ten unit test cases for the {@link BeanMapper#map(Object, Class)} method.\n*/\nclass BeanMapperTest0 {"
	},
	{
		"original_code": "// BeanMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.util.Collection;\nimport java.util.List;\nimport org.dozer.DozerBeanMapper;\nimport com.google.common.collect.Lists;\n\n/**\n * 简单封装Dozer, 实现深度转换Bean<->Bean的Mapper.实现:\n *\n * 1. 持有Mapper的单例.\n * 2. 返回值类型转换.\n * 3. 批量转换Collection中的所有对象.\n * 4. 区分创建新的B对象与将对象A值复制到已存在的B对象两种函数.\n *\n * @author calvin\n */\npublic class BeanMapper {\n\n    /**\n     * 持有Dozer单例, 避免重复创建DozerMapper消耗资源.\n     */\n    private static DozerBeanMapper dozer = new DozerBeanMapper();\n\n    /**\n     * 基于Dozer转换对象的类型.\n     */\n    public static <T> T map(Object source, Class<T> destinationClass) {\n        return dozer.map(source, destinationClass);\n    }\n\n    /**\n     * 基于Dozer转换Collection中对象的类型.\n     */\n    public static <T> List<T> mapList(Collection sourceList, Class<T> destinationClass) {\n        List<T> destinationList = Lists.newArrayList();\n        for (Object sourceObject : sourceList) {\n            T destinationObject = dozer.map(sourceObject, destinationClass);\n            destinationList.add(destinationObject);\n        }\n        return destinationList;\n    }\n\n    /**\n     * 基于Dozer将对象A的值拷贝到对象B中.\n     */\n    public static void copy(Object source, Object destinationObject) {\n        dozer.map(source, destinationObject);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/BeanMapperTest1.java",
		"test_prompt": "// BeanMapperTest1.java\npackage org.springside.modules.mapper;\n\nimport java.util.Collection;\nimport java.util.List;\nimport org.dozer.DozerBeanMapper;\nimport com.google.common.collect.Lists;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanMapper}.\n* It contains ten unit test cases for the {@link BeanMapper#mapList(Collection, Class)} method.\n*/\nclass BeanMapperTest1 {"
	},
	{
		"original_code": "// JaxbMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\n\n/**\n * 使用Jaxb2.0实现XML<->Java Object的Mapper.\n *\n * 在创建时需要设定所有需要序列化的Root对象的Class.\n * 特别支持Root对象是Collection的情形.\n *\n * @author calvin\n */\npublic class JaxbMapper {\n\n    private static ConcurrentMap<Class, JAXBContext> jaxbContexts = new ConcurrentHashMap<Class, JAXBContext>();\n\n    /**\n     * Java Object->Xml without encoding.\n     */\n    public static String toXml(Object root) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, null);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, String encoding) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, encoding);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, Class clazz, String encoding) {\n        try {\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(root, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Java Collection->Xml without encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz) {\n        return toXml(root, rootName, clazz, null);\n    }\n\n    /**\n     * Java Collection->Xml with encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz, String encoding) {\n        try {\n            CollectionWrapper wrapper = new CollectionWrapper();\n            wrapper.collection = root;\n            JAXBElement<CollectionWrapper> wrapperElement = new JAXBElement<CollectionWrapper>(new QName(rootName), CollectionWrapper.class, wrapper);\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(wrapperElement, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Xml->Java Object.\n     */\n    public static <T> T fromXml(String xml, Class<T> clazz) {\n        try {\n            StringReader reader = new StringReader(xml);\n            return (T) createUnmarshaller(clazz).unmarshal(reader);\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建Marshaller并设定encoding(可为null).\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Marshaller createMarshaller(Class clazz, String encoding) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            Marshaller marshaller = jaxbContext.createMarshaller();\n            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n            if (StringUtils.isNotBlank(encoding)) {\n                marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);\n            }\n            return marshaller;\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建UnMarshaller.\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Unmarshaller createUnmarshaller(Class clazz) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            return jaxbContext.createUnmarshaller();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    protected static JAXBContext getJaxbContext(Class clazz) {\n        Validate.notNull(clazz, \"'clazz' must not be null\");\n        JAXBContext jaxbContext = jaxbContexts.get(clazz);\n        if (jaxbContext == null) {\n            try {\n                jaxbContext = JAXBContext.newInstance(clazz, CollectionWrapper.class);\n                jaxbContexts.putIfAbsent(clazz, jaxbContext);\n            } catch (JAXBException ex) {\n                throw new RuntimeException(\"Could not instantiate JAXBContext for class [\" + clazz + \"]: \" + ex.getMessage(), ex);\n            }\n        }\n        return jaxbContext;\n    }\n\n    /**\n     * 封装Root Element 是 Collection的情况.\n     */\n    public static class CollectionWrapper {\n\n        @XmlAnyElement\n        protected Collection<?> collection;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JaxbMapperTest0.java",
		"test_prompt": "// JaxbMapperTest0.java\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JaxbMapper}.\n* It contains ten unit test cases for the {@link JaxbMapper#toXml(Object)} method.\n*/\nclass JaxbMapperTest0 {"
	},
	{
		"original_code": "// JaxbMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\n\n/**\n * 使用Jaxb2.0实现XML<->Java Object的Mapper.\n *\n * 在创建时需要设定所有需要序列化的Root对象的Class.\n * 特别支持Root对象是Collection的情形.\n *\n * @author calvin\n */\npublic class JaxbMapper {\n\n    private static ConcurrentMap<Class, JAXBContext> jaxbContexts = new ConcurrentHashMap<Class, JAXBContext>();\n\n    /**\n     * Java Object->Xml without encoding.\n     */\n    public static String toXml(Object root) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, null);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, String encoding) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, encoding);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, Class clazz, String encoding) {\n        try {\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(root, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Java Collection->Xml without encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz) {\n        return toXml(root, rootName, clazz, null);\n    }\n\n    /**\n     * Java Collection->Xml with encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz, String encoding) {\n        try {\n            CollectionWrapper wrapper = new CollectionWrapper();\n            wrapper.collection = root;\n            JAXBElement<CollectionWrapper> wrapperElement = new JAXBElement<CollectionWrapper>(new QName(rootName), CollectionWrapper.class, wrapper);\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(wrapperElement, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Xml->Java Object.\n     */\n    public static <T> T fromXml(String xml, Class<T> clazz) {\n        try {\n            StringReader reader = new StringReader(xml);\n            return (T) createUnmarshaller(clazz).unmarshal(reader);\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建Marshaller并设定encoding(可为null).\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Marshaller createMarshaller(Class clazz, String encoding) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            Marshaller marshaller = jaxbContext.createMarshaller();\n            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n            if (StringUtils.isNotBlank(encoding)) {\n                marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);\n            }\n            return marshaller;\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建UnMarshaller.\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Unmarshaller createUnmarshaller(Class clazz) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            return jaxbContext.createUnmarshaller();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    protected static JAXBContext getJaxbContext(Class clazz) {\n        Validate.notNull(clazz, \"'clazz' must not be null\");\n        JAXBContext jaxbContext = jaxbContexts.get(clazz);\n        if (jaxbContext == null) {\n            try {\n                jaxbContext = JAXBContext.newInstance(clazz, CollectionWrapper.class);\n                jaxbContexts.putIfAbsent(clazz, jaxbContext);\n            } catch (JAXBException ex) {\n                throw new RuntimeException(\"Could not instantiate JAXBContext for class [\" + clazz + \"]: \" + ex.getMessage(), ex);\n            }\n        }\n        return jaxbContext;\n    }\n\n    /**\n     * 封装Root Element 是 Collection的情况.\n     */\n    public static class CollectionWrapper {\n\n        @XmlAnyElement\n        protected Collection<?> collection;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JaxbMapperTest1.java",
		"test_prompt": "// JaxbMapperTest1.java\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JaxbMapper}.\n* It contains ten unit test cases for the {@link JaxbMapper#toXml(Object, String)} method.\n*/\nclass JaxbMapperTest1 {"
	},
	{
		"original_code": "// JaxbMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\n\n/**\n * 使用Jaxb2.0实现XML<->Java Object的Mapper.\n *\n * 在创建时需要设定所有需要序列化的Root对象的Class.\n * 特别支持Root对象是Collection的情形.\n *\n * @author calvin\n */\npublic class JaxbMapper {\n\n    private static ConcurrentMap<Class, JAXBContext> jaxbContexts = new ConcurrentHashMap<Class, JAXBContext>();\n\n    /**\n     * Java Object->Xml without encoding.\n     */\n    public static String toXml(Object root) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, null);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, String encoding) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, encoding);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, Class clazz, String encoding) {\n        try {\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(root, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Java Collection->Xml without encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz) {\n        return toXml(root, rootName, clazz, null);\n    }\n\n    /**\n     * Java Collection->Xml with encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz, String encoding) {\n        try {\n            CollectionWrapper wrapper = new CollectionWrapper();\n            wrapper.collection = root;\n            JAXBElement<CollectionWrapper> wrapperElement = new JAXBElement<CollectionWrapper>(new QName(rootName), CollectionWrapper.class, wrapper);\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(wrapperElement, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Xml->Java Object.\n     */\n    public static <T> T fromXml(String xml, Class<T> clazz) {\n        try {\n            StringReader reader = new StringReader(xml);\n            return (T) createUnmarshaller(clazz).unmarshal(reader);\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建Marshaller并设定encoding(可为null).\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Marshaller createMarshaller(Class clazz, String encoding) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            Marshaller marshaller = jaxbContext.createMarshaller();\n            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n            if (StringUtils.isNotBlank(encoding)) {\n                marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);\n            }\n            return marshaller;\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建UnMarshaller.\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Unmarshaller createUnmarshaller(Class clazz) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            return jaxbContext.createUnmarshaller();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    protected static JAXBContext getJaxbContext(Class clazz) {\n        Validate.notNull(clazz, \"'clazz' must not be null\");\n        JAXBContext jaxbContext = jaxbContexts.get(clazz);\n        if (jaxbContext == null) {\n            try {\n                jaxbContext = JAXBContext.newInstance(clazz, CollectionWrapper.class);\n                jaxbContexts.putIfAbsent(clazz, jaxbContext);\n            } catch (JAXBException ex) {\n                throw new RuntimeException(\"Could not instantiate JAXBContext for class [\" + clazz + \"]: \" + ex.getMessage(), ex);\n            }\n        }\n        return jaxbContext;\n    }\n\n    /**\n     * 封装Root Element 是 Collection的情况.\n     */\n    public static class CollectionWrapper {\n\n        @XmlAnyElement\n        protected Collection<?> collection;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JaxbMapperTest2.java",
		"test_prompt": "// JaxbMapperTest2.java\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JaxbMapper}.\n* It contains ten unit test cases for the {@link JaxbMapper#toXml(Object, Class, String)} method.\n*/\nclass JaxbMapperTest2 {"
	},
	{
		"original_code": "// JaxbMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\n\n/**\n * 使用Jaxb2.0实现XML<->Java Object的Mapper.\n *\n * 在创建时需要设定所有需要序列化的Root对象的Class.\n * 特别支持Root对象是Collection的情形.\n *\n * @author calvin\n */\npublic class JaxbMapper {\n\n    private static ConcurrentMap<Class, JAXBContext> jaxbContexts = new ConcurrentHashMap<Class, JAXBContext>();\n\n    /**\n     * Java Object->Xml without encoding.\n     */\n    public static String toXml(Object root) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, null);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, String encoding) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, encoding);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, Class clazz, String encoding) {\n        try {\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(root, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Java Collection->Xml without encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz) {\n        return toXml(root, rootName, clazz, null);\n    }\n\n    /**\n     * Java Collection->Xml with encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz, String encoding) {\n        try {\n            CollectionWrapper wrapper = new CollectionWrapper();\n            wrapper.collection = root;\n            JAXBElement<CollectionWrapper> wrapperElement = new JAXBElement<CollectionWrapper>(new QName(rootName), CollectionWrapper.class, wrapper);\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(wrapperElement, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Xml->Java Object.\n     */\n    public static <T> T fromXml(String xml, Class<T> clazz) {\n        try {\n            StringReader reader = new StringReader(xml);\n            return (T) createUnmarshaller(clazz).unmarshal(reader);\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建Marshaller并设定encoding(可为null).\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Marshaller createMarshaller(Class clazz, String encoding) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            Marshaller marshaller = jaxbContext.createMarshaller();\n            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n            if (StringUtils.isNotBlank(encoding)) {\n                marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);\n            }\n            return marshaller;\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建UnMarshaller.\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Unmarshaller createUnmarshaller(Class clazz) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            return jaxbContext.createUnmarshaller();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    protected static JAXBContext getJaxbContext(Class clazz) {\n        Validate.notNull(clazz, \"'clazz' must not be null\");\n        JAXBContext jaxbContext = jaxbContexts.get(clazz);\n        if (jaxbContext == null) {\n            try {\n                jaxbContext = JAXBContext.newInstance(clazz, CollectionWrapper.class);\n                jaxbContexts.putIfAbsent(clazz, jaxbContext);\n            } catch (JAXBException ex) {\n                throw new RuntimeException(\"Could not instantiate JAXBContext for class [\" + clazz + \"]: \" + ex.getMessage(), ex);\n            }\n        }\n        return jaxbContext;\n    }\n\n    /**\n     * 封装Root Element 是 Collection的情况.\n     */\n    public static class CollectionWrapper {\n\n        @XmlAnyElement\n        protected Collection<?> collection;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JaxbMapperTest3.java",
		"test_prompt": "// JaxbMapperTest3.java\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JaxbMapper}.\n* It contains ten unit test cases for the {@link JaxbMapper#toXml(Collection, String, Class)} method.\n*/\nclass JaxbMapperTest3 {"
	},
	{
		"original_code": "// JaxbMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\n\n/**\n * 使用Jaxb2.0实现XML<->Java Object的Mapper.\n *\n * 在创建时需要设定所有需要序列化的Root对象的Class.\n * 特别支持Root对象是Collection的情形.\n *\n * @author calvin\n */\npublic class JaxbMapper {\n\n    private static ConcurrentMap<Class, JAXBContext> jaxbContexts = new ConcurrentHashMap<Class, JAXBContext>();\n\n    /**\n     * Java Object->Xml without encoding.\n     */\n    public static String toXml(Object root) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, null);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, String encoding) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, encoding);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, Class clazz, String encoding) {\n        try {\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(root, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Java Collection->Xml without encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz) {\n        return toXml(root, rootName, clazz, null);\n    }\n\n    /**\n     * Java Collection->Xml with encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz, String encoding) {\n        try {\n            CollectionWrapper wrapper = new CollectionWrapper();\n            wrapper.collection = root;\n            JAXBElement<CollectionWrapper> wrapperElement = new JAXBElement<CollectionWrapper>(new QName(rootName), CollectionWrapper.class, wrapper);\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(wrapperElement, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Xml->Java Object.\n     */\n    public static <T> T fromXml(String xml, Class<T> clazz) {\n        try {\n            StringReader reader = new StringReader(xml);\n            return (T) createUnmarshaller(clazz).unmarshal(reader);\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建Marshaller并设定encoding(可为null).\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Marshaller createMarshaller(Class clazz, String encoding) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            Marshaller marshaller = jaxbContext.createMarshaller();\n            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n            if (StringUtils.isNotBlank(encoding)) {\n                marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);\n            }\n            return marshaller;\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建UnMarshaller.\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Unmarshaller createUnmarshaller(Class clazz) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            return jaxbContext.createUnmarshaller();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    protected static JAXBContext getJaxbContext(Class clazz) {\n        Validate.notNull(clazz, \"'clazz' must not be null\");\n        JAXBContext jaxbContext = jaxbContexts.get(clazz);\n        if (jaxbContext == null) {\n            try {\n                jaxbContext = JAXBContext.newInstance(clazz, CollectionWrapper.class);\n                jaxbContexts.putIfAbsent(clazz, jaxbContext);\n            } catch (JAXBException ex) {\n                throw new RuntimeException(\"Could not instantiate JAXBContext for class [\" + clazz + \"]: \" + ex.getMessage(), ex);\n            }\n        }\n        return jaxbContext;\n    }\n\n    /**\n     * 封装Root Element 是 Collection的情况.\n     */\n    public static class CollectionWrapper {\n\n        @XmlAnyElement\n        protected Collection<?> collection;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JaxbMapperTest4.java",
		"test_prompt": "// JaxbMapperTest4.java\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JaxbMapper}.\n* It contains ten unit test cases for the {@link JaxbMapper#toXml(Collection, String, Class, String)} method.\n*/\nclass JaxbMapperTest4 {"
	},
	{
		"original_code": "// JaxbMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\n\n/**\n * 使用Jaxb2.0实现XML<->Java Object的Mapper.\n *\n * 在创建时需要设定所有需要序列化的Root对象的Class.\n * 特别支持Root对象是Collection的情形.\n *\n * @author calvin\n */\npublic class JaxbMapper {\n\n    private static ConcurrentMap<Class, JAXBContext> jaxbContexts = new ConcurrentHashMap<Class, JAXBContext>();\n\n    /**\n     * Java Object->Xml without encoding.\n     */\n    public static String toXml(Object root) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, null);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, String encoding) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, encoding);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, Class clazz, String encoding) {\n        try {\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(root, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Java Collection->Xml without encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz) {\n        return toXml(root, rootName, clazz, null);\n    }\n\n    /**\n     * Java Collection->Xml with encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz, String encoding) {\n        try {\n            CollectionWrapper wrapper = new CollectionWrapper();\n            wrapper.collection = root;\n            JAXBElement<CollectionWrapper> wrapperElement = new JAXBElement<CollectionWrapper>(new QName(rootName), CollectionWrapper.class, wrapper);\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(wrapperElement, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Xml->Java Object.\n     */\n    public static <T> T fromXml(String xml, Class<T> clazz) {\n        try {\n            StringReader reader = new StringReader(xml);\n            return (T) createUnmarshaller(clazz).unmarshal(reader);\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建Marshaller并设定encoding(可为null).\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Marshaller createMarshaller(Class clazz, String encoding) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            Marshaller marshaller = jaxbContext.createMarshaller();\n            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n            if (StringUtils.isNotBlank(encoding)) {\n                marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);\n            }\n            return marshaller;\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建UnMarshaller.\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Unmarshaller createUnmarshaller(Class clazz) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            return jaxbContext.createUnmarshaller();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    protected static JAXBContext getJaxbContext(Class clazz) {\n        Validate.notNull(clazz, \"'clazz' must not be null\");\n        JAXBContext jaxbContext = jaxbContexts.get(clazz);\n        if (jaxbContext == null) {\n            try {\n                jaxbContext = JAXBContext.newInstance(clazz, CollectionWrapper.class);\n                jaxbContexts.putIfAbsent(clazz, jaxbContext);\n            } catch (JAXBException ex) {\n                throw new RuntimeException(\"Could not instantiate JAXBContext for class [\" + clazz + \"]: \" + ex.getMessage(), ex);\n            }\n        }\n        return jaxbContext;\n    }\n\n    /**\n     * 封装Root Element 是 Collection的情况.\n     */\n    public static class CollectionWrapper {\n\n        @XmlAnyElement\n        protected Collection<?> collection;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JaxbMapperTest5.java",
		"test_prompt": "// JaxbMapperTest5.java\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JaxbMapper}.\n* It contains ten unit test cases for the {@link JaxbMapper#fromXml(String, Class)} method.\n*/\nclass JaxbMapperTest5 {"
	},
	{
		"original_code": "// JaxbMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\n\n/**\n * 使用Jaxb2.0实现XML<->Java Object的Mapper.\n *\n * 在创建时需要设定所有需要序列化的Root对象的Class.\n * 特别支持Root对象是Collection的情形.\n *\n * @author calvin\n */\npublic class JaxbMapper {\n\n    private static ConcurrentMap<Class, JAXBContext> jaxbContexts = new ConcurrentHashMap<Class, JAXBContext>();\n\n    /**\n     * Java Object->Xml without encoding.\n     */\n    public static String toXml(Object root) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, null);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, String encoding) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, encoding);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, Class clazz, String encoding) {\n        try {\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(root, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Java Collection->Xml without encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz) {\n        return toXml(root, rootName, clazz, null);\n    }\n\n    /**\n     * Java Collection->Xml with encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz, String encoding) {\n        try {\n            CollectionWrapper wrapper = new CollectionWrapper();\n            wrapper.collection = root;\n            JAXBElement<CollectionWrapper> wrapperElement = new JAXBElement<CollectionWrapper>(new QName(rootName), CollectionWrapper.class, wrapper);\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(wrapperElement, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Xml->Java Object.\n     */\n    public static <T> T fromXml(String xml, Class<T> clazz) {\n        try {\n            StringReader reader = new StringReader(xml);\n            return (T) createUnmarshaller(clazz).unmarshal(reader);\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建Marshaller并设定encoding(可为null).\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Marshaller createMarshaller(Class clazz, String encoding) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            Marshaller marshaller = jaxbContext.createMarshaller();\n            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n            if (StringUtils.isNotBlank(encoding)) {\n                marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);\n            }\n            return marshaller;\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建UnMarshaller.\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Unmarshaller createUnmarshaller(Class clazz) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            return jaxbContext.createUnmarshaller();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    protected static JAXBContext getJaxbContext(Class clazz) {\n        Validate.notNull(clazz, \"'clazz' must not be null\");\n        JAXBContext jaxbContext = jaxbContexts.get(clazz);\n        if (jaxbContext == null) {\n            try {\n                jaxbContext = JAXBContext.newInstance(clazz, CollectionWrapper.class);\n                jaxbContexts.putIfAbsent(clazz, jaxbContext);\n            } catch (JAXBException ex) {\n                throw new RuntimeException(\"Could not instantiate JAXBContext for class [\" + clazz + \"]: \" + ex.getMessage(), ex);\n            }\n        }\n        return jaxbContext;\n    }\n\n    /**\n     * 封装Root Element 是 Collection的情况.\n     */\n    public static class CollectionWrapper {\n\n        @XmlAnyElement\n        protected Collection<?> collection;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JaxbMapperTest6.java",
		"test_prompt": "// JaxbMapperTest6.java\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JaxbMapper}.\n* It contains ten unit test cases for the {@link JaxbMapper#createMarshaller(Class, String)} method.\n*/\nclass JaxbMapperTest6 {"
	},
	{
		"original_code": "// JaxbMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\n\n/**\n * 使用Jaxb2.0实现XML<->Java Object的Mapper.\n *\n * 在创建时需要设定所有需要序列化的Root对象的Class.\n * 特别支持Root对象是Collection的情形.\n *\n * @author calvin\n */\npublic class JaxbMapper {\n\n    private static ConcurrentMap<Class, JAXBContext> jaxbContexts = new ConcurrentHashMap<Class, JAXBContext>();\n\n    /**\n     * Java Object->Xml without encoding.\n     */\n    public static String toXml(Object root) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, null);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, String encoding) {\n        Class clazz = Reflections.getUserClass(root);\n        return toXml(root, clazz, encoding);\n    }\n\n    /**\n     * Java Object->Xml with encoding.\n     */\n    public static String toXml(Object root, Class clazz, String encoding) {\n        try {\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(root, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Java Collection->Xml without encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz) {\n        return toXml(root, rootName, clazz, null);\n    }\n\n    /**\n     * Java Collection->Xml with encoding, 特别支持Root Element是Collection的情形.\n     */\n    public static String toXml(Collection<?> root, String rootName, Class clazz, String encoding) {\n        try {\n            CollectionWrapper wrapper = new CollectionWrapper();\n            wrapper.collection = root;\n            JAXBElement<CollectionWrapper> wrapperElement = new JAXBElement<CollectionWrapper>(new QName(rootName), CollectionWrapper.class, wrapper);\n            StringWriter writer = new StringWriter();\n            createMarshaller(clazz, encoding).marshal(wrapperElement, writer);\n            return writer.toString();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Xml->Java Object.\n     */\n    public static <T> T fromXml(String xml, Class<T> clazz) {\n        try {\n            StringReader reader = new StringReader(xml);\n            return (T) createUnmarshaller(clazz).unmarshal(reader);\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建Marshaller并设定encoding(可为null).\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Marshaller createMarshaller(Class clazz, String encoding) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            Marshaller marshaller = jaxbContext.createMarshaller();\n            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n            if (StringUtils.isNotBlank(encoding)) {\n                marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);\n            }\n            return marshaller;\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建UnMarshaller.\n     * 线程不安全，需要每次创建或pooling。\n     */\n    public static Unmarshaller createUnmarshaller(Class clazz) {\n        try {\n            JAXBContext jaxbContext = getJaxbContext(clazz);\n            return jaxbContext.createUnmarshaller();\n        } catch (JAXBException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    protected static JAXBContext getJaxbContext(Class clazz) {\n        Validate.notNull(clazz, \"'clazz' must not be null\");\n        JAXBContext jaxbContext = jaxbContexts.get(clazz);\n        if (jaxbContext == null) {\n            try {\n                jaxbContext = JAXBContext.newInstance(clazz, CollectionWrapper.class);\n                jaxbContexts.putIfAbsent(clazz, jaxbContext);\n            } catch (JAXBException ex) {\n                throw new RuntimeException(\"Could not instantiate JAXBContext for class [\" + clazz + \"]: \" + ex.getMessage(), ex);\n            }\n        }\n        return jaxbContext;\n    }\n\n    /**\n     * 封装Root Element 是 Collection的情况.\n     */\n    public static class CollectionWrapper {\n\n        @XmlAnyElement\n        protected Collection<?> collection;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JaxbMapperTest7.java",
		"test_prompt": "// JaxbMapperTest7.java\npackage org.springside.modules.mapper;\n\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBElement;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\nimport javax.xml.bind.annotation.XmlAnyElement;\nimport javax.xml.namespace.QName;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springside.modules.utils.Exceptions;\nimport org.springside.modules.utils.Reflections;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JaxbMapper}.\n* It contains ten unit test cases for the {@link JaxbMapper#createUnmarshaller(Class)} method.\n*/\nclass JaxbMapperTest7 {"
	},
	{
		"original_code": "// JsonMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\n\n/**\n * 简单封装Jackson，实现JSON String<->Java Object的Mapper.\n *\n * 封装不同的输出风格, 使用不同的builder函数创建实例.\n *\n * @author calvin\n */\npublic class JsonMapper {\n\n    private static Logger logger = LoggerFactory.getLogger(JsonMapper.class);\n\n    private ObjectMapper mapper;\n\n    public JsonMapper() {\n        this(null);\n    }\n\n    public JsonMapper(Include include) {\n        mapper = new ObjectMapper();\n        // 设置输出时包含属性的风格\n        if (include != null) {\n            mapper.setSerializationInclusion(include);\n        }\n        // 设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性\n        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n    }\n\n    /**\n     * 创建只输出非Null且非Empty(如List.isEmpty)的属性到Json字符串的Mapper,建议在外部接口中使用.\n     */\n    public static JsonMapper nonEmptyMapper() {\n        return new JsonMapper(Include.NON_EMPTY);\n    }\n\n    /**\n     * 创建只输出初始值被改变的属性到Json字符串的Mapper, 最节约的存储方式，建议在内部接口中使用。\n     */\n    public static JsonMapper nonDefaultMapper() {\n        return new JsonMapper(Include.NON_DEFAULT);\n    }\n\n    /**\n     * Object可以是POJO，也可以是Collection或数组。\n     * 如果对象为Null, 返回\"null\".\n     * 如果集合为空集合, 返回\"[]\".\n     */\n    public String toJson(Object object) {\n        try {\n            return mapper.writeValueAsString(object);\n        } catch (IOException e) {\n            logger.warn(\"write to json string error:\" + object, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化POJO或简单Collection如List<String>.\n     *\n     * 如果JSON字符串为Null或\"null\"字符串, 返回Null.\n     * 如果JSON字符串为\"[]\", 返回空集合.\n     *\n     * 如需反序列化复杂Collection如List<MyBean>, 请使用fromJson(String, JavaType)\n     *\n     * @see #fromJson(String, JavaType)\n     */\n    public <T> T fromJson(String jsonString, Class<T> clazz) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return mapper.readValue(jsonString, clazz);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化复杂Collection如List<Bean>, 先使用createCollectionType()或contructMapType()构造类型, 然后调用本函数.\n     *\n     * @see #createCollectionType(Class, Class...)\n     */\n    public <T> T fromJson(String jsonString, JavaType javaType) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return (T) mapper.readValue(jsonString, javaType);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 构造Collection类型.\n     */\n    public JavaType contructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass) {\n        return mapper.getTypeFactory().constructCollectionType(collectionClass, elementClass);\n    }\n\n    /**\n     * 构造Map类型.\n     */\n    public JavaType contructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass) {\n        return mapper.getTypeFactory().constructMapType(mapClass, keyClass, valueClass);\n    }\n\n    /**\n     * 当JSON里只含有Bean的部分屬性時，更新一個已存在Bean，只覆蓋該部分的屬性.\n     */\n    public void update(String jsonString, Object object) {\n        try {\n            mapper.readerForUpdating(object).readValue(jsonString);\n        } catch (JsonProcessingException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        } catch (IOException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        }\n    }\n\n    /**\n     * 輸出JSONP格式數據.\n     */\n    public String toJsonP(String functionName, Object object) {\n        return toJson(new JSONPObject(functionName, object));\n    }\n\n    /**\n     * 設定是否使用Enum的toString函數來讀寫Enum,\n     * 為False時時使用Enum的name()函數來讀寫Enum, 默認為False.\n     * 注意本函數一定要在Mapper創建後, 所有的讀寫動作之前調用.\n     */\n    public void enableEnumUseToString() {\n        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);\n        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);\n    }\n\n    /**\n     * 支持使用Jaxb的Annotation，使得POJO上的annotation不用与Jackson耦合。\n     * 默认会先查找jaxb的annotation，如果找不到再找jackson的。\n     */\n    public void enableJaxbAnnotation() {\n        JaxbAnnotationModule module = new JaxbAnnotationModule();\n        mapper.registerModule(module);\n    }\n\n    /**\n     * 取出Mapper做进一步的设置或使用其他序列化API.\n     */\n    public ObjectMapper getMapper() {\n        return mapper;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JsonMapperTest0.java",
		"test_prompt": "// JsonMapperTest0.java\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JsonMapper}.\n* It contains ten unit test cases for the {@link JsonMapper#nonEmptyMapper()} method.\n*/\nclass JsonMapperTest0 {"
	},
	{
		"original_code": "// JsonMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\n\n/**\n * 简单封装Jackson，实现JSON String<->Java Object的Mapper.\n *\n * 封装不同的输出风格, 使用不同的builder函数创建实例.\n *\n * @author calvin\n */\npublic class JsonMapper {\n\n    private static Logger logger = LoggerFactory.getLogger(JsonMapper.class);\n\n    private ObjectMapper mapper;\n\n    public JsonMapper() {\n        this(null);\n    }\n\n    public JsonMapper(Include include) {\n        mapper = new ObjectMapper();\n        // 设置输出时包含属性的风格\n        if (include != null) {\n            mapper.setSerializationInclusion(include);\n        }\n        // 设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性\n        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n    }\n\n    /**\n     * 创建只输出非Null且非Empty(如List.isEmpty)的属性到Json字符串的Mapper,建议在外部接口中使用.\n     */\n    public static JsonMapper nonEmptyMapper() {\n        return new JsonMapper(Include.NON_EMPTY);\n    }\n\n    /**\n     * 创建只输出初始值被改变的属性到Json字符串的Mapper, 最节约的存储方式，建议在内部接口中使用。\n     */\n    public static JsonMapper nonDefaultMapper() {\n        return new JsonMapper(Include.NON_DEFAULT);\n    }\n\n    /**\n     * Object可以是POJO，也可以是Collection或数组。\n     * 如果对象为Null, 返回\"null\".\n     * 如果集合为空集合, 返回\"[]\".\n     */\n    public String toJson(Object object) {\n        try {\n            return mapper.writeValueAsString(object);\n        } catch (IOException e) {\n            logger.warn(\"write to json string error:\" + object, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化POJO或简单Collection如List<String>.\n     *\n     * 如果JSON字符串为Null或\"null\"字符串, 返回Null.\n     * 如果JSON字符串为\"[]\", 返回空集合.\n     *\n     * 如需反序列化复杂Collection如List<MyBean>, 请使用fromJson(String, JavaType)\n     *\n     * @see #fromJson(String, JavaType)\n     */\n    public <T> T fromJson(String jsonString, Class<T> clazz) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return mapper.readValue(jsonString, clazz);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化复杂Collection如List<Bean>, 先使用createCollectionType()或contructMapType()构造类型, 然后调用本函数.\n     *\n     * @see #createCollectionType(Class, Class...)\n     */\n    public <T> T fromJson(String jsonString, JavaType javaType) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return (T) mapper.readValue(jsonString, javaType);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 构造Collection类型.\n     */\n    public JavaType contructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass) {\n        return mapper.getTypeFactory().constructCollectionType(collectionClass, elementClass);\n    }\n\n    /**\n     * 构造Map类型.\n     */\n    public JavaType contructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass) {\n        return mapper.getTypeFactory().constructMapType(mapClass, keyClass, valueClass);\n    }\n\n    /**\n     * 当JSON里只含有Bean的部分屬性時，更新一個已存在Bean，只覆蓋該部分的屬性.\n     */\n    public void update(String jsonString, Object object) {\n        try {\n            mapper.readerForUpdating(object).readValue(jsonString);\n        } catch (JsonProcessingException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        } catch (IOException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        }\n    }\n\n    /**\n     * 輸出JSONP格式數據.\n     */\n    public String toJsonP(String functionName, Object object) {\n        return toJson(new JSONPObject(functionName, object));\n    }\n\n    /**\n     * 設定是否使用Enum的toString函數來讀寫Enum,\n     * 為False時時使用Enum的name()函數來讀寫Enum, 默認為False.\n     * 注意本函數一定要在Mapper創建後, 所有的讀寫動作之前調用.\n     */\n    public void enableEnumUseToString() {\n        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);\n        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);\n    }\n\n    /**\n     * 支持使用Jaxb的Annotation，使得POJO上的annotation不用与Jackson耦合。\n     * 默认会先查找jaxb的annotation，如果找不到再找jackson的。\n     */\n    public void enableJaxbAnnotation() {\n        JaxbAnnotationModule module = new JaxbAnnotationModule();\n        mapper.registerModule(module);\n    }\n\n    /**\n     * 取出Mapper做进一步的设置或使用其他序列化API.\n     */\n    public ObjectMapper getMapper() {\n        return mapper;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JsonMapperTest1.java",
		"test_prompt": "// JsonMapperTest1.java\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JsonMapper}.\n* It contains ten unit test cases for the {@link JsonMapper#nonDefaultMapper()} method.\n*/\nclass JsonMapperTest1 {"
	},
	{
		"original_code": "// JsonMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\n\n/**\n * 简单封装Jackson，实现JSON String<->Java Object的Mapper.\n *\n * 封装不同的输出风格, 使用不同的builder函数创建实例.\n *\n * @author calvin\n */\npublic class JsonMapper {\n\n    private static Logger logger = LoggerFactory.getLogger(JsonMapper.class);\n\n    private ObjectMapper mapper;\n\n    public JsonMapper() {\n        this(null);\n    }\n\n    public JsonMapper(Include include) {\n        mapper = new ObjectMapper();\n        // 设置输出时包含属性的风格\n        if (include != null) {\n            mapper.setSerializationInclusion(include);\n        }\n        // 设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性\n        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n    }\n\n    /**\n     * 创建只输出非Null且非Empty(如List.isEmpty)的属性到Json字符串的Mapper,建议在外部接口中使用.\n     */\n    public static JsonMapper nonEmptyMapper() {\n        return new JsonMapper(Include.NON_EMPTY);\n    }\n\n    /**\n     * 创建只输出初始值被改变的属性到Json字符串的Mapper, 最节约的存储方式，建议在内部接口中使用。\n     */\n    public static JsonMapper nonDefaultMapper() {\n        return new JsonMapper(Include.NON_DEFAULT);\n    }\n\n    /**\n     * Object可以是POJO，也可以是Collection或数组。\n     * 如果对象为Null, 返回\"null\".\n     * 如果集合为空集合, 返回\"[]\".\n     */\n    public String toJson(Object object) {\n        try {\n            return mapper.writeValueAsString(object);\n        } catch (IOException e) {\n            logger.warn(\"write to json string error:\" + object, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化POJO或简单Collection如List<String>.\n     *\n     * 如果JSON字符串为Null或\"null\"字符串, 返回Null.\n     * 如果JSON字符串为\"[]\", 返回空集合.\n     *\n     * 如需反序列化复杂Collection如List<MyBean>, 请使用fromJson(String, JavaType)\n     *\n     * @see #fromJson(String, JavaType)\n     */\n    public <T> T fromJson(String jsonString, Class<T> clazz) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return mapper.readValue(jsonString, clazz);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化复杂Collection如List<Bean>, 先使用createCollectionType()或contructMapType()构造类型, 然后调用本函数.\n     *\n     * @see #createCollectionType(Class, Class...)\n     */\n    public <T> T fromJson(String jsonString, JavaType javaType) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return (T) mapper.readValue(jsonString, javaType);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 构造Collection类型.\n     */\n    public JavaType contructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass) {\n        return mapper.getTypeFactory().constructCollectionType(collectionClass, elementClass);\n    }\n\n    /**\n     * 构造Map类型.\n     */\n    public JavaType contructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass) {\n        return mapper.getTypeFactory().constructMapType(mapClass, keyClass, valueClass);\n    }\n\n    /**\n     * 当JSON里只含有Bean的部分屬性時，更新一個已存在Bean，只覆蓋該部分的屬性.\n     */\n    public void update(String jsonString, Object object) {\n        try {\n            mapper.readerForUpdating(object).readValue(jsonString);\n        } catch (JsonProcessingException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        } catch (IOException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        }\n    }\n\n    /**\n     * 輸出JSONP格式數據.\n     */\n    public String toJsonP(String functionName, Object object) {\n        return toJson(new JSONPObject(functionName, object));\n    }\n\n    /**\n     * 設定是否使用Enum的toString函數來讀寫Enum,\n     * 為False時時使用Enum的name()函數來讀寫Enum, 默認為False.\n     * 注意本函數一定要在Mapper創建後, 所有的讀寫動作之前調用.\n     */\n    public void enableEnumUseToString() {\n        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);\n        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);\n    }\n\n    /**\n     * 支持使用Jaxb的Annotation，使得POJO上的annotation不用与Jackson耦合。\n     * 默认会先查找jaxb的annotation，如果找不到再找jackson的。\n     */\n    public void enableJaxbAnnotation() {\n        JaxbAnnotationModule module = new JaxbAnnotationModule();\n        mapper.registerModule(module);\n    }\n\n    /**\n     * 取出Mapper做进一步的设置或使用其他序列化API.\n     */\n    public ObjectMapper getMapper() {\n        return mapper;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JsonMapperTest2.java",
		"test_prompt": "// JsonMapperTest2.java\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JsonMapper}.\n* It contains ten unit test cases for the {@link JsonMapper#toJson(Object)} method.\n*/\nclass JsonMapperTest2 {"
	},
	{
		"original_code": "// JsonMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\n\n/**\n * 简单封装Jackson，实现JSON String<->Java Object的Mapper.\n *\n * 封装不同的输出风格, 使用不同的builder函数创建实例.\n *\n * @author calvin\n */\npublic class JsonMapper {\n\n    private static Logger logger = LoggerFactory.getLogger(JsonMapper.class);\n\n    private ObjectMapper mapper;\n\n    public JsonMapper() {\n        this(null);\n    }\n\n    public JsonMapper(Include include) {\n        mapper = new ObjectMapper();\n        // 设置输出时包含属性的风格\n        if (include != null) {\n            mapper.setSerializationInclusion(include);\n        }\n        // 设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性\n        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n    }\n\n    /**\n     * 创建只输出非Null且非Empty(如List.isEmpty)的属性到Json字符串的Mapper,建议在外部接口中使用.\n     */\n    public static JsonMapper nonEmptyMapper() {\n        return new JsonMapper(Include.NON_EMPTY);\n    }\n\n    /**\n     * 创建只输出初始值被改变的属性到Json字符串的Mapper, 最节约的存储方式，建议在内部接口中使用。\n     */\n    public static JsonMapper nonDefaultMapper() {\n        return new JsonMapper(Include.NON_DEFAULT);\n    }\n\n    /**\n     * Object可以是POJO，也可以是Collection或数组。\n     * 如果对象为Null, 返回\"null\".\n     * 如果集合为空集合, 返回\"[]\".\n     */\n    public String toJson(Object object) {\n        try {\n            return mapper.writeValueAsString(object);\n        } catch (IOException e) {\n            logger.warn(\"write to json string error:\" + object, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化POJO或简单Collection如List<String>.\n     *\n     * 如果JSON字符串为Null或\"null\"字符串, 返回Null.\n     * 如果JSON字符串为\"[]\", 返回空集合.\n     *\n     * 如需反序列化复杂Collection如List<MyBean>, 请使用fromJson(String, JavaType)\n     *\n     * @see #fromJson(String, JavaType)\n     */\n    public <T> T fromJson(String jsonString, Class<T> clazz) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return mapper.readValue(jsonString, clazz);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化复杂Collection如List<Bean>, 先使用createCollectionType()或contructMapType()构造类型, 然后调用本函数.\n     *\n     * @see #createCollectionType(Class, Class...)\n     */\n    public <T> T fromJson(String jsonString, JavaType javaType) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return (T) mapper.readValue(jsonString, javaType);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 构造Collection类型.\n     */\n    public JavaType contructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass) {\n        return mapper.getTypeFactory().constructCollectionType(collectionClass, elementClass);\n    }\n\n    /**\n     * 构造Map类型.\n     */\n    public JavaType contructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass) {\n        return mapper.getTypeFactory().constructMapType(mapClass, keyClass, valueClass);\n    }\n\n    /**\n     * 当JSON里只含有Bean的部分屬性時，更新一個已存在Bean，只覆蓋該部分的屬性.\n     */\n    public void update(String jsonString, Object object) {\n        try {\n            mapper.readerForUpdating(object).readValue(jsonString);\n        } catch (JsonProcessingException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        } catch (IOException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        }\n    }\n\n    /**\n     * 輸出JSONP格式數據.\n     */\n    public String toJsonP(String functionName, Object object) {\n        return toJson(new JSONPObject(functionName, object));\n    }\n\n    /**\n     * 設定是否使用Enum的toString函數來讀寫Enum,\n     * 為False時時使用Enum的name()函數來讀寫Enum, 默認為False.\n     * 注意本函數一定要在Mapper創建後, 所有的讀寫動作之前調用.\n     */\n    public void enableEnumUseToString() {\n        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);\n        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);\n    }\n\n    /**\n     * 支持使用Jaxb的Annotation，使得POJO上的annotation不用与Jackson耦合。\n     * 默认会先查找jaxb的annotation，如果找不到再找jackson的。\n     */\n    public void enableJaxbAnnotation() {\n        JaxbAnnotationModule module = new JaxbAnnotationModule();\n        mapper.registerModule(module);\n    }\n\n    /**\n     * 取出Mapper做进一步的设置或使用其他序列化API.\n     */\n    public ObjectMapper getMapper() {\n        return mapper;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JsonMapperTest3.java",
		"test_prompt": "// JsonMapperTest3.java\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JsonMapper}.\n* It contains ten unit test cases for the {@link JsonMapper#fromJson(String, Class)} method.\n*/\nclass JsonMapperTest3 {"
	},
	{
		"original_code": "// JsonMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\n\n/**\n * 简单封装Jackson，实现JSON String<->Java Object的Mapper.\n *\n * 封装不同的输出风格, 使用不同的builder函数创建实例.\n *\n * @author calvin\n */\npublic class JsonMapper {\n\n    private static Logger logger = LoggerFactory.getLogger(JsonMapper.class);\n\n    private ObjectMapper mapper;\n\n    public JsonMapper() {\n        this(null);\n    }\n\n    public JsonMapper(Include include) {\n        mapper = new ObjectMapper();\n        // 设置输出时包含属性的风格\n        if (include != null) {\n            mapper.setSerializationInclusion(include);\n        }\n        // 设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性\n        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n    }\n\n    /**\n     * 创建只输出非Null且非Empty(如List.isEmpty)的属性到Json字符串的Mapper,建议在外部接口中使用.\n     */\n    public static JsonMapper nonEmptyMapper() {\n        return new JsonMapper(Include.NON_EMPTY);\n    }\n\n    /**\n     * 创建只输出初始值被改变的属性到Json字符串的Mapper, 最节约的存储方式，建议在内部接口中使用。\n     */\n    public static JsonMapper nonDefaultMapper() {\n        return new JsonMapper(Include.NON_DEFAULT);\n    }\n\n    /**\n     * Object可以是POJO，也可以是Collection或数组。\n     * 如果对象为Null, 返回\"null\".\n     * 如果集合为空集合, 返回\"[]\".\n     */\n    public String toJson(Object object) {\n        try {\n            return mapper.writeValueAsString(object);\n        } catch (IOException e) {\n            logger.warn(\"write to json string error:\" + object, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化POJO或简单Collection如List<String>.\n     *\n     * 如果JSON字符串为Null或\"null\"字符串, 返回Null.\n     * 如果JSON字符串为\"[]\", 返回空集合.\n     *\n     * 如需反序列化复杂Collection如List<MyBean>, 请使用fromJson(String, JavaType)\n     *\n     * @see #fromJson(String, JavaType)\n     */\n    public <T> T fromJson(String jsonString, Class<T> clazz) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return mapper.readValue(jsonString, clazz);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化复杂Collection如List<Bean>, 先使用createCollectionType()或contructMapType()构造类型, 然后调用本函数.\n     *\n     * @see #createCollectionType(Class, Class...)\n     */\n    public <T> T fromJson(String jsonString, JavaType javaType) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return (T) mapper.readValue(jsonString, javaType);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 构造Collection类型.\n     */\n    public JavaType contructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass) {\n        return mapper.getTypeFactory().constructCollectionType(collectionClass, elementClass);\n    }\n\n    /**\n     * 构造Map类型.\n     */\n    public JavaType contructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass) {\n        return mapper.getTypeFactory().constructMapType(mapClass, keyClass, valueClass);\n    }\n\n    /**\n     * 当JSON里只含有Bean的部分屬性時，更新一個已存在Bean，只覆蓋該部分的屬性.\n     */\n    public void update(String jsonString, Object object) {\n        try {\n            mapper.readerForUpdating(object).readValue(jsonString);\n        } catch (JsonProcessingException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        } catch (IOException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        }\n    }\n\n    /**\n     * 輸出JSONP格式數據.\n     */\n    public String toJsonP(String functionName, Object object) {\n        return toJson(new JSONPObject(functionName, object));\n    }\n\n    /**\n     * 設定是否使用Enum的toString函數來讀寫Enum,\n     * 為False時時使用Enum的name()函數來讀寫Enum, 默認為False.\n     * 注意本函數一定要在Mapper創建後, 所有的讀寫動作之前調用.\n     */\n    public void enableEnumUseToString() {\n        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);\n        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);\n    }\n\n    /**\n     * 支持使用Jaxb的Annotation，使得POJO上的annotation不用与Jackson耦合。\n     * 默认会先查找jaxb的annotation，如果找不到再找jackson的。\n     */\n    public void enableJaxbAnnotation() {\n        JaxbAnnotationModule module = new JaxbAnnotationModule();\n        mapper.registerModule(module);\n    }\n\n    /**\n     * 取出Mapper做进一步的设置或使用其他序列化API.\n     */\n    public ObjectMapper getMapper() {\n        return mapper;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JsonMapperTest4.java",
		"test_prompt": "// JsonMapperTest4.java\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JsonMapper}.\n* It contains ten unit test cases for the {@link JsonMapper#fromJson(String, JavaType)} method.\n*/\nclass JsonMapperTest4 {"
	},
	{
		"original_code": "// JsonMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\n\n/**\n * 简单封装Jackson，实现JSON String<->Java Object的Mapper.\n *\n * 封装不同的输出风格, 使用不同的builder函数创建实例.\n *\n * @author calvin\n */\npublic class JsonMapper {\n\n    private static Logger logger = LoggerFactory.getLogger(JsonMapper.class);\n\n    private ObjectMapper mapper;\n\n    public JsonMapper() {\n        this(null);\n    }\n\n    public JsonMapper(Include include) {\n        mapper = new ObjectMapper();\n        // 设置输出时包含属性的风格\n        if (include != null) {\n            mapper.setSerializationInclusion(include);\n        }\n        // 设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性\n        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n    }\n\n    /**\n     * 创建只输出非Null且非Empty(如List.isEmpty)的属性到Json字符串的Mapper,建议在外部接口中使用.\n     */\n    public static JsonMapper nonEmptyMapper() {\n        return new JsonMapper(Include.NON_EMPTY);\n    }\n\n    /**\n     * 创建只输出初始值被改变的属性到Json字符串的Mapper, 最节约的存储方式，建议在内部接口中使用。\n     */\n    public static JsonMapper nonDefaultMapper() {\n        return new JsonMapper(Include.NON_DEFAULT);\n    }\n\n    /**\n     * Object可以是POJO，也可以是Collection或数组。\n     * 如果对象为Null, 返回\"null\".\n     * 如果集合为空集合, 返回\"[]\".\n     */\n    public String toJson(Object object) {\n        try {\n            return mapper.writeValueAsString(object);\n        } catch (IOException e) {\n            logger.warn(\"write to json string error:\" + object, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化POJO或简单Collection如List<String>.\n     *\n     * 如果JSON字符串为Null或\"null\"字符串, 返回Null.\n     * 如果JSON字符串为\"[]\", 返回空集合.\n     *\n     * 如需反序列化复杂Collection如List<MyBean>, 请使用fromJson(String, JavaType)\n     *\n     * @see #fromJson(String, JavaType)\n     */\n    public <T> T fromJson(String jsonString, Class<T> clazz) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return mapper.readValue(jsonString, clazz);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化复杂Collection如List<Bean>, 先使用createCollectionType()或contructMapType()构造类型, 然后调用本函数.\n     *\n     * @see #createCollectionType(Class, Class...)\n     */\n    public <T> T fromJson(String jsonString, JavaType javaType) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return (T) mapper.readValue(jsonString, javaType);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 构造Collection类型.\n     */\n    public JavaType contructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass) {\n        return mapper.getTypeFactory().constructCollectionType(collectionClass, elementClass);\n    }\n\n    /**\n     * 构造Map类型.\n     */\n    public JavaType contructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass) {\n        return mapper.getTypeFactory().constructMapType(mapClass, keyClass, valueClass);\n    }\n\n    /**\n     * 当JSON里只含有Bean的部分屬性時，更新一個已存在Bean，只覆蓋該部分的屬性.\n     */\n    public void update(String jsonString, Object object) {\n        try {\n            mapper.readerForUpdating(object).readValue(jsonString);\n        } catch (JsonProcessingException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        } catch (IOException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        }\n    }\n\n    /**\n     * 輸出JSONP格式數據.\n     */\n    public String toJsonP(String functionName, Object object) {\n        return toJson(new JSONPObject(functionName, object));\n    }\n\n    /**\n     * 設定是否使用Enum的toString函數來讀寫Enum,\n     * 為False時時使用Enum的name()函數來讀寫Enum, 默認為False.\n     * 注意本函數一定要在Mapper創建後, 所有的讀寫動作之前調用.\n     */\n    public void enableEnumUseToString() {\n        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);\n        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);\n    }\n\n    /**\n     * 支持使用Jaxb的Annotation，使得POJO上的annotation不用与Jackson耦合。\n     * 默认会先查找jaxb的annotation，如果找不到再找jackson的。\n     */\n    public void enableJaxbAnnotation() {\n        JaxbAnnotationModule module = new JaxbAnnotationModule();\n        mapper.registerModule(module);\n    }\n\n    /**\n     * 取出Mapper做进一步的设置或使用其他序列化API.\n     */\n    public ObjectMapper getMapper() {\n        return mapper;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JsonMapperTest5.java",
		"test_prompt": "// JsonMapperTest5.java\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JsonMapper}.\n* It contains ten unit test cases for the {@link JsonMapper#contructCollectionType(Class, Class)} method.\n*/\nclass JsonMapperTest5 {"
	},
	{
		"original_code": "// JsonMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\n\n/**\n * 简单封装Jackson，实现JSON String<->Java Object的Mapper.\n *\n * 封装不同的输出风格, 使用不同的builder函数创建实例.\n *\n * @author calvin\n */\npublic class JsonMapper {\n\n    private static Logger logger = LoggerFactory.getLogger(JsonMapper.class);\n\n    private ObjectMapper mapper;\n\n    public JsonMapper() {\n        this(null);\n    }\n\n    public JsonMapper(Include include) {\n        mapper = new ObjectMapper();\n        // 设置输出时包含属性的风格\n        if (include != null) {\n            mapper.setSerializationInclusion(include);\n        }\n        // 设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性\n        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n    }\n\n    /**\n     * 创建只输出非Null且非Empty(如List.isEmpty)的属性到Json字符串的Mapper,建议在外部接口中使用.\n     */\n    public static JsonMapper nonEmptyMapper() {\n        return new JsonMapper(Include.NON_EMPTY);\n    }\n\n    /**\n     * 创建只输出初始值被改变的属性到Json字符串的Mapper, 最节约的存储方式，建议在内部接口中使用。\n     */\n    public static JsonMapper nonDefaultMapper() {\n        return new JsonMapper(Include.NON_DEFAULT);\n    }\n\n    /**\n     * Object可以是POJO，也可以是Collection或数组。\n     * 如果对象为Null, 返回\"null\".\n     * 如果集合为空集合, 返回\"[]\".\n     */\n    public String toJson(Object object) {\n        try {\n            return mapper.writeValueAsString(object);\n        } catch (IOException e) {\n            logger.warn(\"write to json string error:\" + object, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化POJO或简单Collection如List<String>.\n     *\n     * 如果JSON字符串为Null或\"null\"字符串, 返回Null.\n     * 如果JSON字符串为\"[]\", 返回空集合.\n     *\n     * 如需反序列化复杂Collection如List<MyBean>, 请使用fromJson(String, JavaType)\n     *\n     * @see #fromJson(String, JavaType)\n     */\n    public <T> T fromJson(String jsonString, Class<T> clazz) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return mapper.readValue(jsonString, clazz);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化复杂Collection如List<Bean>, 先使用createCollectionType()或contructMapType()构造类型, 然后调用本函数.\n     *\n     * @see #createCollectionType(Class, Class...)\n     */\n    public <T> T fromJson(String jsonString, JavaType javaType) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return (T) mapper.readValue(jsonString, javaType);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 构造Collection类型.\n     */\n    public JavaType contructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass) {\n        return mapper.getTypeFactory().constructCollectionType(collectionClass, elementClass);\n    }\n\n    /**\n     * 构造Map类型.\n     */\n    public JavaType contructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass) {\n        return mapper.getTypeFactory().constructMapType(mapClass, keyClass, valueClass);\n    }\n\n    /**\n     * 当JSON里只含有Bean的部分屬性時，更新一個已存在Bean，只覆蓋該部分的屬性.\n     */\n    public void update(String jsonString, Object object) {\n        try {\n            mapper.readerForUpdating(object).readValue(jsonString);\n        } catch (JsonProcessingException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        } catch (IOException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        }\n    }\n\n    /**\n     * 輸出JSONP格式數據.\n     */\n    public String toJsonP(String functionName, Object object) {\n        return toJson(new JSONPObject(functionName, object));\n    }\n\n    /**\n     * 設定是否使用Enum的toString函數來讀寫Enum,\n     * 為False時時使用Enum的name()函數來讀寫Enum, 默認為False.\n     * 注意本函數一定要在Mapper創建後, 所有的讀寫動作之前調用.\n     */\n    public void enableEnumUseToString() {\n        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);\n        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);\n    }\n\n    /**\n     * 支持使用Jaxb的Annotation，使得POJO上的annotation不用与Jackson耦合。\n     * 默认会先查找jaxb的annotation，如果找不到再找jackson的。\n     */\n    public void enableJaxbAnnotation() {\n        JaxbAnnotationModule module = new JaxbAnnotationModule();\n        mapper.registerModule(module);\n    }\n\n    /**\n     * 取出Mapper做进一步的设置或使用其他序列化API.\n     */\n    public ObjectMapper getMapper() {\n        return mapper;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JsonMapperTest6.java",
		"test_prompt": "// JsonMapperTest6.java\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JsonMapper}.\n* It contains ten unit test cases for the {@link JsonMapper#contructMapType(Class, Class, Class)} method.\n*/\nclass JsonMapperTest6 {"
	},
	{
		"original_code": "// JsonMapper.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\n\n/**\n * 简单封装Jackson，实现JSON String<->Java Object的Mapper.\n *\n * 封装不同的输出风格, 使用不同的builder函数创建实例.\n *\n * @author calvin\n */\npublic class JsonMapper {\n\n    private static Logger logger = LoggerFactory.getLogger(JsonMapper.class);\n\n    private ObjectMapper mapper;\n\n    public JsonMapper() {\n        this(null);\n    }\n\n    public JsonMapper(Include include) {\n        mapper = new ObjectMapper();\n        // 设置输出时包含属性的风格\n        if (include != null) {\n            mapper.setSerializationInclusion(include);\n        }\n        // 设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性\n        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n    }\n\n    /**\n     * 创建只输出非Null且非Empty(如List.isEmpty)的属性到Json字符串的Mapper,建议在外部接口中使用.\n     */\n    public static JsonMapper nonEmptyMapper() {\n        return new JsonMapper(Include.NON_EMPTY);\n    }\n\n    /**\n     * 创建只输出初始值被改变的属性到Json字符串的Mapper, 最节约的存储方式，建议在内部接口中使用。\n     */\n    public static JsonMapper nonDefaultMapper() {\n        return new JsonMapper(Include.NON_DEFAULT);\n    }\n\n    /**\n     * Object可以是POJO，也可以是Collection或数组。\n     * 如果对象为Null, 返回\"null\".\n     * 如果集合为空集合, 返回\"[]\".\n     */\n    public String toJson(Object object) {\n        try {\n            return mapper.writeValueAsString(object);\n        } catch (IOException e) {\n            logger.warn(\"write to json string error:\" + object, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化POJO或简单Collection如List<String>.\n     *\n     * 如果JSON字符串为Null或\"null\"字符串, 返回Null.\n     * 如果JSON字符串为\"[]\", 返回空集合.\n     *\n     * 如需反序列化复杂Collection如List<MyBean>, 请使用fromJson(String, JavaType)\n     *\n     * @see #fromJson(String, JavaType)\n     */\n    public <T> T fromJson(String jsonString, Class<T> clazz) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return mapper.readValue(jsonString, clazz);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 反序列化复杂Collection如List<Bean>, 先使用createCollectionType()或contructMapType()构造类型, 然后调用本函数.\n     *\n     * @see #createCollectionType(Class, Class...)\n     */\n    public <T> T fromJson(String jsonString, JavaType javaType) {\n        if (StringUtils.isEmpty(jsonString)) {\n            return null;\n        }\n        try {\n            return (T) mapper.readValue(jsonString, javaType);\n        } catch (IOException e) {\n            logger.warn(\"parse json string error:\" + jsonString, e);\n            return null;\n        }\n    }\n\n    /**\n     * 构造Collection类型.\n     */\n    public JavaType contructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass) {\n        return mapper.getTypeFactory().constructCollectionType(collectionClass, elementClass);\n    }\n\n    /**\n     * 构造Map类型.\n     */\n    public JavaType contructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass) {\n        return mapper.getTypeFactory().constructMapType(mapClass, keyClass, valueClass);\n    }\n\n    /**\n     * 当JSON里只含有Bean的部分屬性時，更新一個已存在Bean，只覆蓋該部分的屬性.\n     */\n    public void update(String jsonString, Object object) {\n        try {\n            mapper.readerForUpdating(object).readValue(jsonString);\n        } catch (JsonProcessingException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        } catch (IOException e) {\n            logger.warn(\"update json string:\" + jsonString + \" to object:\" + object + \" error.\", e);\n        }\n    }\n\n    /**\n     * 輸出JSONP格式數據.\n     */\n    public String toJsonP(String functionName, Object object) {\n        return toJson(new JSONPObject(functionName, object));\n    }\n\n    /**\n     * 設定是否使用Enum的toString函數來讀寫Enum,\n     * 為False時時使用Enum的name()函數來讀寫Enum, 默認為False.\n     * 注意本函數一定要在Mapper創建後, 所有的讀寫動作之前調用.\n     */\n    public void enableEnumUseToString() {\n        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);\n        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);\n    }\n\n    /**\n     * 支持使用Jaxb的Annotation，使得POJO上的annotation不用与Jackson耦合。\n     * 默认会先查找jaxb的annotation，如果找不到再找jackson的。\n     */\n    public void enableJaxbAnnotation() {\n        JaxbAnnotationModule module = new JaxbAnnotationModule();\n        mapper.registerModule(module);\n    }\n\n    /**\n     * 取出Mapper做进一步的设置或使用其他序列化API.\n     */\n    public ObjectMapper getMapper() {\n        return mapper;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/mapper/JsonMapperTest7.java",
		"test_prompt": "// JsonMapperTest7.java\npackage org.springside.modules.mapper;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Map;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.fasterxml.jackson.databind.util.JSONPObject;\nimport com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JsonMapper}.\n* It contains ten unit test cases for the {@link JsonMapper#toJsonP(String, Object)} method.\n*/\nclass JsonMapperTest7 {"
	},
	{
		"original_code": "// Reflections.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 反射工具类.\n *\n * 提供调用getter/setter方法, 访问私有变量, 调用私有方法, 获取泛型类型Class, 被AOP过的真实类等工具函数.\n *\n * @author calvin\n */\npublic class Reflections {\n\n    private static final String SETTER_PREFIX = \"set\";\n\n    private static final String GETTER_PREFIX = \"get\";\n\n    private static final String CGLIB_CLASS_SEPARATOR = \"$$\";\n\n    private static Logger logger = LoggerFactory.getLogger(Reflections.class);\n\n    /**\n     * 调用Getter方法.\n     */\n    public static Object invokeGetter(Object obj, String propertyName) {\n        String getterMethodName = GETTER_PREFIX + StringUtils.capitalize(propertyName);\n        return invokeMethod(obj, getterMethodName, new Class[] {}, new Object[] {});\n    }\n\n    /**\n     * 调用Setter方法, 仅匹配方法名。\n     */\n    public static void invokeSetter(Object obj, String propertyName, Object value) {\n        String setterMethodName = SETTER_PREFIX + StringUtils.capitalize(propertyName);\n        invokeMethodByName(obj, setterMethodName, new Object[] { value });\n    }\n\n    /**\n     * 直接读取对象属性值, 无视private/protected修饰符, 不经过getter函数.\n     */\n    public static Object getFieldValue(final Object obj, final String fieldName) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        Object result = null;\n        try {\n            result = field.get(obj);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常{}\", e.getMessage());\n        }\n        return result;\n    }\n\n    /**\n     * 直接设置对象属性值, 无视private/protected修饰符, 不经过setter函数.\n     */\n    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            field.set(obj, value);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常:{}\", e.getMessage());\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符.\n     * 用于一次性调用的情况，否则应使用getAccessibleMethod()函数获得Method后反复调用.\n     * 同时匹配方法名+参数类型，\n     */\n    public static Object invokeMethod(final Object obj, final String methodName, final Class<?>[] parameterTypes, final Object[] args) {\n        Method method = getAccessibleMethod(obj, methodName, parameterTypes);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符，\n     * 用于一次性调用的情况，否则应使用getAccessibleMethodByName()函数获得Method后反复调用.\n     * 只匹配函数名，如果有多个同名函数调用第一个。\n     */\n    public static Object invokeMethodByName(final Object obj, final String methodName, final Object[] args) {\n        Method method = getAccessibleMethodByName(obj, methodName);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredField, 并强制设置为可访问.\n     *\n     * 如向上转型到Object仍无法找到, 返回null.\n     */\n    public static Field getAccessibleField(final Object obj, final String fieldName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(fieldName, \"fieldName can't be blank\");\n        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass.getSuperclass()) {\n            try {\n                Field field = superClass.getDeclaredField(fieldName);\n                makeAccessible(field);\n                return field;\n            } catch (NoSuchFieldException e) {\n                // NOSONAR\n                // Field不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 匹配函数名+参数类型。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethod(final Object obj, final String methodName, final Class<?>... parameterTypes) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            try {\n                Method method = searchType.getDeclaredMethod(methodName, parameterTypes);\n                makeAccessible(method);\n                return method;\n            } catch (NoSuchMethodException e) {\n                // Method不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 只匹配函数名。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethodByName(final Object obj, final String methodName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            Method[] methods = searchType.getDeclaredMethods();\n            for (Method method : methods) {\n                if (method.getName().equals(methodName)) {\n                    makeAccessible(method);\n                    return method;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 改变private/protected的方法为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Method method) {\n        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {\n            method.setAccessible(true);\n        }\n    }\n\n    /**\n     * 改变private/protected的成员变量为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Field field) {\n        if ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) || Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的泛型参数的类型, 注意泛型必须定义在父类处\n     * 如无法找到, 返回Object.class.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    public static <T> Class<T> getClassGenricType(final Class clazz) {\n        return getClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的父类的泛型参数的类型.\n     * 如无法找到, 返回Object.class.\n     *\n     * 如public UserDao extends HibernateDao<User,Long>\n     *\n     * @param clazz clazz The class to introspect\n     * @param index the Index of the generic ddeclaration,start from 0.\n     * @return the index generic declaration, or Object.class if cannot be determined\n     */\n    public static Class getClassGenricType(final Class clazz, final int index) {\n        Type genType = clazz.getGenericSuperclass();\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n        if ((index >= params.length) || (index < 0)) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \" + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n        return (Class) params[index];\n    }\n\n    public static Class<?> getUserClass(Object instance) {\n        Validate.notNull(instance, \"Instance must not be null\");\n        Class clazz = instance.getClass();\n        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\n            Class<?> superClass = clazz.getSuperclass();\n            if ((superClass != null) && !Object.class.equals(superClass)) {\n                return superClass;\n            }\n        }\n        return clazz;\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {\n        if ((e instanceof IllegalAccessException) || (e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException)) {\n            return new IllegalArgumentException(e);\n        } else if (e instanceof InvocationTargetException) {\n            return new RuntimeException(((InvocationTargetException) e).getTargetException());\n        } else if (e instanceof RuntimeException) {\n            return (RuntimeException) e;\n        }\n        return new RuntimeException(\"Unexpected Checked Exception.\", e);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ReflectionsTest0.java",
		"test_prompt": "// ReflectionsTest0.java\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reflections}.\n* It contains ten unit test cases for the {@link Reflections#invokeGetter(Object, String)} method.\n*/\nclass ReflectionsTest0 {"
	},
	{
		"original_code": "// Reflections.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 反射工具类.\n *\n * 提供调用getter/setter方法, 访问私有变量, 调用私有方法, 获取泛型类型Class, 被AOP过的真实类等工具函数.\n *\n * @author calvin\n */\npublic class Reflections {\n\n    private static final String SETTER_PREFIX = \"set\";\n\n    private static final String GETTER_PREFIX = \"get\";\n\n    private static final String CGLIB_CLASS_SEPARATOR = \"$$\";\n\n    private static Logger logger = LoggerFactory.getLogger(Reflections.class);\n\n    /**\n     * 调用Getter方法.\n     */\n    public static Object invokeGetter(Object obj, String propertyName) {\n        String getterMethodName = GETTER_PREFIX + StringUtils.capitalize(propertyName);\n        return invokeMethod(obj, getterMethodName, new Class[] {}, new Object[] {});\n    }\n\n    /**\n     * 调用Setter方法, 仅匹配方法名。\n     */\n    public static void invokeSetter(Object obj, String propertyName, Object value) {\n        String setterMethodName = SETTER_PREFIX + StringUtils.capitalize(propertyName);\n        invokeMethodByName(obj, setterMethodName, new Object[] { value });\n    }\n\n    /**\n     * 直接读取对象属性值, 无视private/protected修饰符, 不经过getter函数.\n     */\n    public static Object getFieldValue(final Object obj, final String fieldName) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        Object result = null;\n        try {\n            result = field.get(obj);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常{}\", e.getMessage());\n        }\n        return result;\n    }\n\n    /**\n     * 直接设置对象属性值, 无视private/protected修饰符, 不经过setter函数.\n     */\n    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            field.set(obj, value);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常:{}\", e.getMessage());\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符.\n     * 用于一次性调用的情况，否则应使用getAccessibleMethod()函数获得Method后反复调用.\n     * 同时匹配方法名+参数类型，\n     */\n    public static Object invokeMethod(final Object obj, final String methodName, final Class<?>[] parameterTypes, final Object[] args) {\n        Method method = getAccessibleMethod(obj, methodName, parameterTypes);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符，\n     * 用于一次性调用的情况，否则应使用getAccessibleMethodByName()函数获得Method后反复调用.\n     * 只匹配函数名，如果有多个同名函数调用第一个。\n     */\n    public static Object invokeMethodByName(final Object obj, final String methodName, final Object[] args) {\n        Method method = getAccessibleMethodByName(obj, methodName);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredField, 并强制设置为可访问.\n     *\n     * 如向上转型到Object仍无法找到, 返回null.\n     */\n    public static Field getAccessibleField(final Object obj, final String fieldName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(fieldName, \"fieldName can't be blank\");\n        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass.getSuperclass()) {\n            try {\n                Field field = superClass.getDeclaredField(fieldName);\n                makeAccessible(field);\n                return field;\n            } catch (NoSuchFieldException e) {\n                // NOSONAR\n                // Field不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 匹配函数名+参数类型。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethod(final Object obj, final String methodName, final Class<?>... parameterTypes) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            try {\n                Method method = searchType.getDeclaredMethod(methodName, parameterTypes);\n                makeAccessible(method);\n                return method;\n            } catch (NoSuchMethodException e) {\n                // Method不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 只匹配函数名。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethodByName(final Object obj, final String methodName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            Method[] methods = searchType.getDeclaredMethods();\n            for (Method method : methods) {\n                if (method.getName().equals(methodName)) {\n                    makeAccessible(method);\n                    return method;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 改变private/protected的方法为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Method method) {\n        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {\n            method.setAccessible(true);\n        }\n    }\n\n    /**\n     * 改变private/protected的成员变量为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Field field) {\n        if ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) || Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的泛型参数的类型, 注意泛型必须定义在父类处\n     * 如无法找到, 返回Object.class.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    public static <T> Class<T> getClassGenricType(final Class clazz) {\n        return getClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的父类的泛型参数的类型.\n     * 如无法找到, 返回Object.class.\n     *\n     * 如public UserDao extends HibernateDao<User,Long>\n     *\n     * @param clazz clazz The class to introspect\n     * @param index the Index of the generic ddeclaration,start from 0.\n     * @return the index generic declaration, or Object.class if cannot be determined\n     */\n    public static Class getClassGenricType(final Class clazz, final int index) {\n        Type genType = clazz.getGenericSuperclass();\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n        if ((index >= params.length) || (index < 0)) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \" + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n        return (Class) params[index];\n    }\n\n    public static Class<?> getUserClass(Object instance) {\n        Validate.notNull(instance, \"Instance must not be null\");\n        Class clazz = instance.getClass();\n        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\n            Class<?> superClass = clazz.getSuperclass();\n            if ((superClass != null) && !Object.class.equals(superClass)) {\n                return superClass;\n            }\n        }\n        return clazz;\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {\n        if ((e instanceof IllegalAccessException) || (e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException)) {\n            return new IllegalArgumentException(e);\n        } else if (e instanceof InvocationTargetException) {\n            return new RuntimeException(((InvocationTargetException) e).getTargetException());\n        } else if (e instanceof RuntimeException) {\n            return (RuntimeException) e;\n        }\n        return new RuntimeException(\"Unexpected Checked Exception.\", e);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ReflectionsTest1.java",
		"test_prompt": "// ReflectionsTest1.java\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reflections}.\n* It contains ten unit test cases for the {@link Reflections#getFieldValue(Object, String)} method.\n*/\nclass ReflectionsTest1 {"
	},
	{
		"original_code": "// Reflections.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 反射工具类.\n *\n * 提供调用getter/setter方法, 访问私有变量, 调用私有方法, 获取泛型类型Class, 被AOP过的真实类等工具函数.\n *\n * @author calvin\n */\npublic class Reflections {\n\n    private static final String SETTER_PREFIX = \"set\";\n\n    private static final String GETTER_PREFIX = \"get\";\n\n    private static final String CGLIB_CLASS_SEPARATOR = \"$$\";\n\n    private static Logger logger = LoggerFactory.getLogger(Reflections.class);\n\n    /**\n     * 调用Getter方法.\n     */\n    public static Object invokeGetter(Object obj, String propertyName) {\n        String getterMethodName = GETTER_PREFIX + StringUtils.capitalize(propertyName);\n        return invokeMethod(obj, getterMethodName, new Class[] {}, new Object[] {});\n    }\n\n    /**\n     * 调用Setter方法, 仅匹配方法名。\n     */\n    public static void invokeSetter(Object obj, String propertyName, Object value) {\n        String setterMethodName = SETTER_PREFIX + StringUtils.capitalize(propertyName);\n        invokeMethodByName(obj, setterMethodName, new Object[] { value });\n    }\n\n    /**\n     * 直接读取对象属性值, 无视private/protected修饰符, 不经过getter函数.\n     */\n    public static Object getFieldValue(final Object obj, final String fieldName) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        Object result = null;\n        try {\n            result = field.get(obj);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常{}\", e.getMessage());\n        }\n        return result;\n    }\n\n    /**\n     * 直接设置对象属性值, 无视private/protected修饰符, 不经过setter函数.\n     */\n    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            field.set(obj, value);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常:{}\", e.getMessage());\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符.\n     * 用于一次性调用的情况，否则应使用getAccessibleMethod()函数获得Method后反复调用.\n     * 同时匹配方法名+参数类型，\n     */\n    public static Object invokeMethod(final Object obj, final String methodName, final Class<?>[] parameterTypes, final Object[] args) {\n        Method method = getAccessibleMethod(obj, methodName, parameterTypes);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符，\n     * 用于一次性调用的情况，否则应使用getAccessibleMethodByName()函数获得Method后反复调用.\n     * 只匹配函数名，如果有多个同名函数调用第一个。\n     */\n    public static Object invokeMethodByName(final Object obj, final String methodName, final Object[] args) {\n        Method method = getAccessibleMethodByName(obj, methodName);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredField, 并强制设置为可访问.\n     *\n     * 如向上转型到Object仍无法找到, 返回null.\n     */\n    public static Field getAccessibleField(final Object obj, final String fieldName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(fieldName, \"fieldName can't be blank\");\n        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass.getSuperclass()) {\n            try {\n                Field field = superClass.getDeclaredField(fieldName);\n                makeAccessible(field);\n                return field;\n            } catch (NoSuchFieldException e) {\n                // NOSONAR\n                // Field不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 匹配函数名+参数类型。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethod(final Object obj, final String methodName, final Class<?>... parameterTypes) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            try {\n                Method method = searchType.getDeclaredMethod(methodName, parameterTypes);\n                makeAccessible(method);\n                return method;\n            } catch (NoSuchMethodException e) {\n                // Method不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 只匹配函数名。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethodByName(final Object obj, final String methodName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            Method[] methods = searchType.getDeclaredMethods();\n            for (Method method : methods) {\n                if (method.getName().equals(methodName)) {\n                    makeAccessible(method);\n                    return method;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 改变private/protected的方法为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Method method) {\n        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {\n            method.setAccessible(true);\n        }\n    }\n\n    /**\n     * 改变private/protected的成员变量为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Field field) {\n        if ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) || Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的泛型参数的类型, 注意泛型必须定义在父类处\n     * 如无法找到, 返回Object.class.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    public static <T> Class<T> getClassGenricType(final Class clazz) {\n        return getClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的父类的泛型参数的类型.\n     * 如无法找到, 返回Object.class.\n     *\n     * 如public UserDao extends HibernateDao<User,Long>\n     *\n     * @param clazz clazz The class to introspect\n     * @param index the Index of the generic ddeclaration,start from 0.\n     * @return the index generic declaration, or Object.class if cannot be determined\n     */\n    public static Class getClassGenricType(final Class clazz, final int index) {\n        Type genType = clazz.getGenericSuperclass();\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n        if ((index >= params.length) || (index < 0)) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \" + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n        return (Class) params[index];\n    }\n\n    public static Class<?> getUserClass(Object instance) {\n        Validate.notNull(instance, \"Instance must not be null\");\n        Class clazz = instance.getClass();\n        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\n            Class<?> superClass = clazz.getSuperclass();\n            if ((superClass != null) && !Object.class.equals(superClass)) {\n                return superClass;\n            }\n        }\n        return clazz;\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {\n        if ((e instanceof IllegalAccessException) || (e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException)) {\n            return new IllegalArgumentException(e);\n        } else if (e instanceof InvocationTargetException) {\n            return new RuntimeException(((InvocationTargetException) e).getTargetException());\n        } else if (e instanceof RuntimeException) {\n            return (RuntimeException) e;\n        }\n        return new RuntimeException(\"Unexpected Checked Exception.\", e);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ReflectionsTest2.java",
		"test_prompt": "// ReflectionsTest2.java\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reflections}.\n* It contains ten unit test cases for the {@link Reflections#invokeMethod(Object, String, Class<?>[], Object[])} method.\n*/\nclass ReflectionsTest2 {"
	},
	{
		"original_code": "// Reflections.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 反射工具类.\n *\n * 提供调用getter/setter方法, 访问私有变量, 调用私有方法, 获取泛型类型Class, 被AOP过的真实类等工具函数.\n *\n * @author calvin\n */\npublic class Reflections {\n\n    private static final String SETTER_PREFIX = \"set\";\n\n    private static final String GETTER_PREFIX = \"get\";\n\n    private static final String CGLIB_CLASS_SEPARATOR = \"$$\";\n\n    private static Logger logger = LoggerFactory.getLogger(Reflections.class);\n\n    /**\n     * 调用Getter方法.\n     */\n    public static Object invokeGetter(Object obj, String propertyName) {\n        String getterMethodName = GETTER_PREFIX + StringUtils.capitalize(propertyName);\n        return invokeMethod(obj, getterMethodName, new Class[] {}, new Object[] {});\n    }\n\n    /**\n     * 调用Setter方法, 仅匹配方法名。\n     */\n    public static void invokeSetter(Object obj, String propertyName, Object value) {\n        String setterMethodName = SETTER_PREFIX + StringUtils.capitalize(propertyName);\n        invokeMethodByName(obj, setterMethodName, new Object[] { value });\n    }\n\n    /**\n     * 直接读取对象属性值, 无视private/protected修饰符, 不经过getter函数.\n     */\n    public static Object getFieldValue(final Object obj, final String fieldName) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        Object result = null;\n        try {\n            result = field.get(obj);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常{}\", e.getMessage());\n        }\n        return result;\n    }\n\n    /**\n     * 直接设置对象属性值, 无视private/protected修饰符, 不经过setter函数.\n     */\n    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            field.set(obj, value);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常:{}\", e.getMessage());\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符.\n     * 用于一次性调用的情况，否则应使用getAccessibleMethod()函数获得Method后反复调用.\n     * 同时匹配方法名+参数类型，\n     */\n    public static Object invokeMethod(final Object obj, final String methodName, final Class<?>[] parameterTypes, final Object[] args) {\n        Method method = getAccessibleMethod(obj, methodName, parameterTypes);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符，\n     * 用于一次性调用的情况，否则应使用getAccessibleMethodByName()函数获得Method后反复调用.\n     * 只匹配函数名，如果有多个同名函数调用第一个。\n     */\n    public static Object invokeMethodByName(final Object obj, final String methodName, final Object[] args) {\n        Method method = getAccessibleMethodByName(obj, methodName);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredField, 并强制设置为可访问.\n     *\n     * 如向上转型到Object仍无法找到, 返回null.\n     */\n    public static Field getAccessibleField(final Object obj, final String fieldName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(fieldName, \"fieldName can't be blank\");\n        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass.getSuperclass()) {\n            try {\n                Field field = superClass.getDeclaredField(fieldName);\n                makeAccessible(field);\n                return field;\n            } catch (NoSuchFieldException e) {\n                // NOSONAR\n                // Field不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 匹配函数名+参数类型。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethod(final Object obj, final String methodName, final Class<?>... parameterTypes) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            try {\n                Method method = searchType.getDeclaredMethod(methodName, parameterTypes);\n                makeAccessible(method);\n                return method;\n            } catch (NoSuchMethodException e) {\n                // Method不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 只匹配函数名。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethodByName(final Object obj, final String methodName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            Method[] methods = searchType.getDeclaredMethods();\n            for (Method method : methods) {\n                if (method.getName().equals(methodName)) {\n                    makeAccessible(method);\n                    return method;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 改变private/protected的方法为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Method method) {\n        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {\n            method.setAccessible(true);\n        }\n    }\n\n    /**\n     * 改变private/protected的成员变量为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Field field) {\n        if ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) || Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的泛型参数的类型, 注意泛型必须定义在父类处\n     * 如无法找到, 返回Object.class.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    public static <T> Class<T> getClassGenricType(final Class clazz) {\n        return getClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的父类的泛型参数的类型.\n     * 如无法找到, 返回Object.class.\n     *\n     * 如public UserDao extends HibernateDao<User,Long>\n     *\n     * @param clazz clazz The class to introspect\n     * @param index the Index of the generic ddeclaration,start from 0.\n     * @return the index generic declaration, or Object.class if cannot be determined\n     */\n    public static Class getClassGenricType(final Class clazz, final int index) {\n        Type genType = clazz.getGenericSuperclass();\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n        if ((index >= params.length) || (index < 0)) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \" + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n        return (Class) params[index];\n    }\n\n    public static Class<?> getUserClass(Object instance) {\n        Validate.notNull(instance, \"Instance must not be null\");\n        Class clazz = instance.getClass();\n        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\n            Class<?> superClass = clazz.getSuperclass();\n            if ((superClass != null) && !Object.class.equals(superClass)) {\n                return superClass;\n            }\n        }\n        return clazz;\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {\n        if ((e instanceof IllegalAccessException) || (e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException)) {\n            return new IllegalArgumentException(e);\n        } else if (e instanceof InvocationTargetException) {\n            return new RuntimeException(((InvocationTargetException) e).getTargetException());\n        } else if (e instanceof RuntimeException) {\n            return (RuntimeException) e;\n        }\n        return new RuntimeException(\"Unexpected Checked Exception.\", e);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ReflectionsTest3.java",
		"test_prompt": "// ReflectionsTest3.java\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reflections}.\n* It contains ten unit test cases for the {@link Reflections#invokeMethodByName(Object, String, Object[])} method.\n*/\nclass ReflectionsTest3 {"
	},
	{
		"original_code": "// Reflections.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 反射工具类.\n *\n * 提供调用getter/setter方法, 访问私有变量, 调用私有方法, 获取泛型类型Class, 被AOP过的真实类等工具函数.\n *\n * @author calvin\n */\npublic class Reflections {\n\n    private static final String SETTER_PREFIX = \"set\";\n\n    private static final String GETTER_PREFIX = \"get\";\n\n    private static final String CGLIB_CLASS_SEPARATOR = \"$$\";\n\n    private static Logger logger = LoggerFactory.getLogger(Reflections.class);\n\n    /**\n     * 调用Getter方法.\n     */\n    public static Object invokeGetter(Object obj, String propertyName) {\n        String getterMethodName = GETTER_PREFIX + StringUtils.capitalize(propertyName);\n        return invokeMethod(obj, getterMethodName, new Class[] {}, new Object[] {});\n    }\n\n    /**\n     * 调用Setter方法, 仅匹配方法名。\n     */\n    public static void invokeSetter(Object obj, String propertyName, Object value) {\n        String setterMethodName = SETTER_PREFIX + StringUtils.capitalize(propertyName);\n        invokeMethodByName(obj, setterMethodName, new Object[] { value });\n    }\n\n    /**\n     * 直接读取对象属性值, 无视private/protected修饰符, 不经过getter函数.\n     */\n    public static Object getFieldValue(final Object obj, final String fieldName) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        Object result = null;\n        try {\n            result = field.get(obj);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常{}\", e.getMessage());\n        }\n        return result;\n    }\n\n    /**\n     * 直接设置对象属性值, 无视private/protected修饰符, 不经过setter函数.\n     */\n    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            field.set(obj, value);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常:{}\", e.getMessage());\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符.\n     * 用于一次性调用的情况，否则应使用getAccessibleMethod()函数获得Method后反复调用.\n     * 同时匹配方法名+参数类型，\n     */\n    public static Object invokeMethod(final Object obj, final String methodName, final Class<?>[] parameterTypes, final Object[] args) {\n        Method method = getAccessibleMethod(obj, methodName, parameterTypes);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符，\n     * 用于一次性调用的情况，否则应使用getAccessibleMethodByName()函数获得Method后反复调用.\n     * 只匹配函数名，如果有多个同名函数调用第一个。\n     */\n    public static Object invokeMethodByName(final Object obj, final String methodName, final Object[] args) {\n        Method method = getAccessibleMethodByName(obj, methodName);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredField, 并强制设置为可访问.\n     *\n     * 如向上转型到Object仍无法找到, 返回null.\n     */\n    public static Field getAccessibleField(final Object obj, final String fieldName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(fieldName, \"fieldName can't be blank\");\n        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass.getSuperclass()) {\n            try {\n                Field field = superClass.getDeclaredField(fieldName);\n                makeAccessible(field);\n                return field;\n            } catch (NoSuchFieldException e) {\n                // NOSONAR\n                // Field不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 匹配函数名+参数类型。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethod(final Object obj, final String methodName, final Class<?>... parameterTypes) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            try {\n                Method method = searchType.getDeclaredMethod(methodName, parameterTypes);\n                makeAccessible(method);\n                return method;\n            } catch (NoSuchMethodException e) {\n                // Method不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 只匹配函数名。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethodByName(final Object obj, final String methodName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            Method[] methods = searchType.getDeclaredMethods();\n            for (Method method : methods) {\n                if (method.getName().equals(methodName)) {\n                    makeAccessible(method);\n                    return method;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 改变private/protected的方法为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Method method) {\n        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {\n            method.setAccessible(true);\n        }\n    }\n\n    /**\n     * 改变private/protected的成员变量为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Field field) {\n        if ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) || Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的泛型参数的类型, 注意泛型必须定义在父类处\n     * 如无法找到, 返回Object.class.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    public static <T> Class<T> getClassGenricType(final Class clazz) {\n        return getClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的父类的泛型参数的类型.\n     * 如无法找到, 返回Object.class.\n     *\n     * 如public UserDao extends HibernateDao<User,Long>\n     *\n     * @param clazz clazz The class to introspect\n     * @param index the Index of the generic ddeclaration,start from 0.\n     * @return the index generic declaration, or Object.class if cannot be determined\n     */\n    public static Class getClassGenricType(final Class clazz, final int index) {\n        Type genType = clazz.getGenericSuperclass();\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n        if ((index >= params.length) || (index < 0)) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \" + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n        return (Class) params[index];\n    }\n\n    public static Class<?> getUserClass(Object instance) {\n        Validate.notNull(instance, \"Instance must not be null\");\n        Class clazz = instance.getClass();\n        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\n            Class<?> superClass = clazz.getSuperclass();\n            if ((superClass != null) && !Object.class.equals(superClass)) {\n                return superClass;\n            }\n        }\n        return clazz;\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {\n        if ((e instanceof IllegalAccessException) || (e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException)) {\n            return new IllegalArgumentException(e);\n        } else if (e instanceof InvocationTargetException) {\n            return new RuntimeException(((InvocationTargetException) e).getTargetException());\n        } else if (e instanceof RuntimeException) {\n            return (RuntimeException) e;\n        }\n        return new RuntimeException(\"Unexpected Checked Exception.\", e);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ReflectionsTest4.java",
		"test_prompt": "// ReflectionsTest4.java\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reflections}.\n* It contains ten unit test cases for the {@link Reflections#getAccessibleField(Object, String)} method.\n*/\nclass ReflectionsTest4 {"
	},
	{
		"original_code": "// Reflections.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 反射工具类.\n *\n * 提供调用getter/setter方法, 访问私有变量, 调用私有方法, 获取泛型类型Class, 被AOP过的真实类等工具函数.\n *\n * @author calvin\n */\npublic class Reflections {\n\n    private static final String SETTER_PREFIX = \"set\";\n\n    private static final String GETTER_PREFIX = \"get\";\n\n    private static final String CGLIB_CLASS_SEPARATOR = \"$$\";\n\n    private static Logger logger = LoggerFactory.getLogger(Reflections.class);\n\n    /**\n     * 调用Getter方法.\n     */\n    public static Object invokeGetter(Object obj, String propertyName) {\n        String getterMethodName = GETTER_PREFIX + StringUtils.capitalize(propertyName);\n        return invokeMethod(obj, getterMethodName, new Class[] {}, new Object[] {});\n    }\n\n    /**\n     * 调用Setter方法, 仅匹配方法名。\n     */\n    public static void invokeSetter(Object obj, String propertyName, Object value) {\n        String setterMethodName = SETTER_PREFIX + StringUtils.capitalize(propertyName);\n        invokeMethodByName(obj, setterMethodName, new Object[] { value });\n    }\n\n    /**\n     * 直接读取对象属性值, 无视private/protected修饰符, 不经过getter函数.\n     */\n    public static Object getFieldValue(final Object obj, final String fieldName) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        Object result = null;\n        try {\n            result = field.get(obj);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常{}\", e.getMessage());\n        }\n        return result;\n    }\n\n    /**\n     * 直接设置对象属性值, 无视private/protected修饰符, 不经过setter函数.\n     */\n    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            field.set(obj, value);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常:{}\", e.getMessage());\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符.\n     * 用于一次性调用的情况，否则应使用getAccessibleMethod()函数获得Method后反复调用.\n     * 同时匹配方法名+参数类型，\n     */\n    public static Object invokeMethod(final Object obj, final String methodName, final Class<?>[] parameterTypes, final Object[] args) {\n        Method method = getAccessibleMethod(obj, methodName, parameterTypes);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符，\n     * 用于一次性调用的情况，否则应使用getAccessibleMethodByName()函数获得Method后反复调用.\n     * 只匹配函数名，如果有多个同名函数调用第一个。\n     */\n    public static Object invokeMethodByName(final Object obj, final String methodName, final Object[] args) {\n        Method method = getAccessibleMethodByName(obj, methodName);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredField, 并强制设置为可访问.\n     *\n     * 如向上转型到Object仍无法找到, 返回null.\n     */\n    public static Field getAccessibleField(final Object obj, final String fieldName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(fieldName, \"fieldName can't be blank\");\n        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass.getSuperclass()) {\n            try {\n                Field field = superClass.getDeclaredField(fieldName);\n                makeAccessible(field);\n                return field;\n            } catch (NoSuchFieldException e) {\n                // NOSONAR\n                // Field不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 匹配函数名+参数类型。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethod(final Object obj, final String methodName, final Class<?>... parameterTypes) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            try {\n                Method method = searchType.getDeclaredMethod(methodName, parameterTypes);\n                makeAccessible(method);\n                return method;\n            } catch (NoSuchMethodException e) {\n                // Method不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 只匹配函数名。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethodByName(final Object obj, final String methodName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            Method[] methods = searchType.getDeclaredMethods();\n            for (Method method : methods) {\n                if (method.getName().equals(methodName)) {\n                    makeAccessible(method);\n                    return method;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 改变private/protected的方法为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Method method) {\n        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {\n            method.setAccessible(true);\n        }\n    }\n\n    /**\n     * 改变private/protected的成员变量为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Field field) {\n        if ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) || Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的泛型参数的类型, 注意泛型必须定义在父类处\n     * 如无法找到, 返回Object.class.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    public static <T> Class<T> getClassGenricType(final Class clazz) {\n        return getClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的父类的泛型参数的类型.\n     * 如无法找到, 返回Object.class.\n     *\n     * 如public UserDao extends HibernateDao<User,Long>\n     *\n     * @param clazz clazz The class to introspect\n     * @param index the Index of the generic ddeclaration,start from 0.\n     * @return the index generic declaration, or Object.class if cannot be determined\n     */\n    public static Class getClassGenricType(final Class clazz, final int index) {\n        Type genType = clazz.getGenericSuperclass();\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n        if ((index >= params.length) || (index < 0)) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \" + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n        return (Class) params[index];\n    }\n\n    public static Class<?> getUserClass(Object instance) {\n        Validate.notNull(instance, \"Instance must not be null\");\n        Class clazz = instance.getClass();\n        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\n            Class<?> superClass = clazz.getSuperclass();\n            if ((superClass != null) && !Object.class.equals(superClass)) {\n                return superClass;\n            }\n        }\n        return clazz;\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {\n        if ((e instanceof IllegalAccessException) || (e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException)) {\n            return new IllegalArgumentException(e);\n        } else if (e instanceof InvocationTargetException) {\n            return new RuntimeException(((InvocationTargetException) e).getTargetException());\n        } else if (e instanceof RuntimeException) {\n            return (RuntimeException) e;\n        }\n        return new RuntimeException(\"Unexpected Checked Exception.\", e);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ReflectionsTest5.java",
		"test_prompt": "// ReflectionsTest5.java\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reflections}.\n* It contains ten unit test cases for the {@link Reflections#getAccessibleMethod(Object, String, Class<?>[])} method.\n*/\nclass ReflectionsTest5 {"
	},
	{
		"original_code": "// Reflections.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 反射工具类.\n *\n * 提供调用getter/setter方法, 访问私有变量, 调用私有方法, 获取泛型类型Class, 被AOP过的真实类等工具函数.\n *\n * @author calvin\n */\npublic class Reflections {\n\n    private static final String SETTER_PREFIX = \"set\";\n\n    private static final String GETTER_PREFIX = \"get\";\n\n    private static final String CGLIB_CLASS_SEPARATOR = \"$$\";\n\n    private static Logger logger = LoggerFactory.getLogger(Reflections.class);\n\n    /**\n     * 调用Getter方法.\n     */\n    public static Object invokeGetter(Object obj, String propertyName) {\n        String getterMethodName = GETTER_PREFIX + StringUtils.capitalize(propertyName);\n        return invokeMethod(obj, getterMethodName, new Class[] {}, new Object[] {});\n    }\n\n    /**\n     * 调用Setter方法, 仅匹配方法名。\n     */\n    public static void invokeSetter(Object obj, String propertyName, Object value) {\n        String setterMethodName = SETTER_PREFIX + StringUtils.capitalize(propertyName);\n        invokeMethodByName(obj, setterMethodName, new Object[] { value });\n    }\n\n    /**\n     * 直接读取对象属性值, 无视private/protected修饰符, 不经过getter函数.\n     */\n    public static Object getFieldValue(final Object obj, final String fieldName) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        Object result = null;\n        try {\n            result = field.get(obj);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常{}\", e.getMessage());\n        }\n        return result;\n    }\n\n    /**\n     * 直接设置对象属性值, 无视private/protected修饰符, 不经过setter函数.\n     */\n    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            field.set(obj, value);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常:{}\", e.getMessage());\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符.\n     * 用于一次性调用的情况，否则应使用getAccessibleMethod()函数获得Method后反复调用.\n     * 同时匹配方法名+参数类型，\n     */\n    public static Object invokeMethod(final Object obj, final String methodName, final Class<?>[] parameterTypes, final Object[] args) {\n        Method method = getAccessibleMethod(obj, methodName, parameterTypes);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符，\n     * 用于一次性调用的情况，否则应使用getAccessibleMethodByName()函数获得Method后反复调用.\n     * 只匹配函数名，如果有多个同名函数调用第一个。\n     */\n    public static Object invokeMethodByName(final Object obj, final String methodName, final Object[] args) {\n        Method method = getAccessibleMethodByName(obj, methodName);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredField, 并强制设置为可访问.\n     *\n     * 如向上转型到Object仍无法找到, 返回null.\n     */\n    public static Field getAccessibleField(final Object obj, final String fieldName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(fieldName, \"fieldName can't be blank\");\n        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass.getSuperclass()) {\n            try {\n                Field field = superClass.getDeclaredField(fieldName);\n                makeAccessible(field);\n                return field;\n            } catch (NoSuchFieldException e) {\n                // NOSONAR\n                // Field不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 匹配函数名+参数类型。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethod(final Object obj, final String methodName, final Class<?>... parameterTypes) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            try {\n                Method method = searchType.getDeclaredMethod(methodName, parameterTypes);\n                makeAccessible(method);\n                return method;\n            } catch (NoSuchMethodException e) {\n                // Method不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 只匹配函数名。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethodByName(final Object obj, final String methodName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            Method[] methods = searchType.getDeclaredMethods();\n            for (Method method : methods) {\n                if (method.getName().equals(methodName)) {\n                    makeAccessible(method);\n                    return method;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 改变private/protected的方法为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Method method) {\n        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {\n            method.setAccessible(true);\n        }\n    }\n\n    /**\n     * 改变private/protected的成员变量为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Field field) {\n        if ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) || Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的泛型参数的类型, 注意泛型必须定义在父类处\n     * 如无法找到, 返回Object.class.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    public static <T> Class<T> getClassGenricType(final Class clazz) {\n        return getClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的父类的泛型参数的类型.\n     * 如无法找到, 返回Object.class.\n     *\n     * 如public UserDao extends HibernateDao<User,Long>\n     *\n     * @param clazz clazz The class to introspect\n     * @param index the Index of the generic ddeclaration,start from 0.\n     * @return the index generic declaration, or Object.class if cannot be determined\n     */\n    public static Class getClassGenricType(final Class clazz, final int index) {\n        Type genType = clazz.getGenericSuperclass();\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n        if ((index >= params.length) || (index < 0)) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \" + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n        return (Class) params[index];\n    }\n\n    public static Class<?> getUserClass(Object instance) {\n        Validate.notNull(instance, \"Instance must not be null\");\n        Class clazz = instance.getClass();\n        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\n            Class<?> superClass = clazz.getSuperclass();\n            if ((superClass != null) && !Object.class.equals(superClass)) {\n                return superClass;\n            }\n        }\n        return clazz;\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {\n        if ((e instanceof IllegalAccessException) || (e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException)) {\n            return new IllegalArgumentException(e);\n        } else if (e instanceof InvocationTargetException) {\n            return new RuntimeException(((InvocationTargetException) e).getTargetException());\n        } else if (e instanceof RuntimeException) {\n            return (RuntimeException) e;\n        }\n        return new RuntimeException(\"Unexpected Checked Exception.\", e);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ReflectionsTest6.java",
		"test_prompt": "// ReflectionsTest6.java\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reflections}.\n* It contains ten unit test cases for the {@link Reflections#getAccessibleMethodByName(Object, String)} method.\n*/\nclass ReflectionsTest6 {"
	},
	{
		"original_code": "// Reflections.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 反射工具类.\n *\n * 提供调用getter/setter方法, 访问私有变量, 调用私有方法, 获取泛型类型Class, 被AOP过的真实类等工具函数.\n *\n * @author calvin\n */\npublic class Reflections {\n\n    private static final String SETTER_PREFIX = \"set\";\n\n    private static final String GETTER_PREFIX = \"get\";\n\n    private static final String CGLIB_CLASS_SEPARATOR = \"$$\";\n\n    private static Logger logger = LoggerFactory.getLogger(Reflections.class);\n\n    /**\n     * 调用Getter方法.\n     */\n    public static Object invokeGetter(Object obj, String propertyName) {\n        String getterMethodName = GETTER_PREFIX + StringUtils.capitalize(propertyName);\n        return invokeMethod(obj, getterMethodName, new Class[] {}, new Object[] {});\n    }\n\n    /**\n     * 调用Setter方法, 仅匹配方法名。\n     */\n    public static void invokeSetter(Object obj, String propertyName, Object value) {\n        String setterMethodName = SETTER_PREFIX + StringUtils.capitalize(propertyName);\n        invokeMethodByName(obj, setterMethodName, new Object[] { value });\n    }\n\n    /**\n     * 直接读取对象属性值, 无视private/protected修饰符, 不经过getter函数.\n     */\n    public static Object getFieldValue(final Object obj, final String fieldName) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        Object result = null;\n        try {\n            result = field.get(obj);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常{}\", e.getMessage());\n        }\n        return result;\n    }\n\n    /**\n     * 直接设置对象属性值, 无视private/protected修饰符, 不经过setter函数.\n     */\n    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            field.set(obj, value);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常:{}\", e.getMessage());\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符.\n     * 用于一次性调用的情况，否则应使用getAccessibleMethod()函数获得Method后反复调用.\n     * 同时匹配方法名+参数类型，\n     */\n    public static Object invokeMethod(final Object obj, final String methodName, final Class<?>[] parameterTypes, final Object[] args) {\n        Method method = getAccessibleMethod(obj, methodName, parameterTypes);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符，\n     * 用于一次性调用的情况，否则应使用getAccessibleMethodByName()函数获得Method后反复调用.\n     * 只匹配函数名，如果有多个同名函数调用第一个。\n     */\n    public static Object invokeMethodByName(final Object obj, final String methodName, final Object[] args) {\n        Method method = getAccessibleMethodByName(obj, methodName);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredField, 并强制设置为可访问.\n     *\n     * 如向上转型到Object仍无法找到, 返回null.\n     */\n    public static Field getAccessibleField(final Object obj, final String fieldName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(fieldName, \"fieldName can't be blank\");\n        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass.getSuperclass()) {\n            try {\n                Field field = superClass.getDeclaredField(fieldName);\n                makeAccessible(field);\n                return field;\n            } catch (NoSuchFieldException e) {\n                // NOSONAR\n                // Field不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 匹配函数名+参数类型。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethod(final Object obj, final String methodName, final Class<?>... parameterTypes) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            try {\n                Method method = searchType.getDeclaredMethod(methodName, parameterTypes);\n                makeAccessible(method);\n                return method;\n            } catch (NoSuchMethodException e) {\n                // Method不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 只匹配函数名。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethodByName(final Object obj, final String methodName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            Method[] methods = searchType.getDeclaredMethods();\n            for (Method method : methods) {\n                if (method.getName().equals(methodName)) {\n                    makeAccessible(method);\n                    return method;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 改变private/protected的方法为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Method method) {\n        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {\n            method.setAccessible(true);\n        }\n    }\n\n    /**\n     * 改变private/protected的成员变量为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Field field) {\n        if ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) || Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的泛型参数的类型, 注意泛型必须定义在父类处\n     * 如无法找到, 返回Object.class.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    public static <T> Class<T> getClassGenricType(final Class clazz) {\n        return getClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的父类的泛型参数的类型.\n     * 如无法找到, 返回Object.class.\n     *\n     * 如public UserDao extends HibernateDao<User,Long>\n     *\n     * @param clazz clazz The class to introspect\n     * @param index the Index of the generic ddeclaration,start from 0.\n     * @return the index generic declaration, or Object.class if cannot be determined\n     */\n    public static Class getClassGenricType(final Class clazz, final int index) {\n        Type genType = clazz.getGenericSuperclass();\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n        if ((index >= params.length) || (index < 0)) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \" + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n        return (Class) params[index];\n    }\n\n    public static Class<?> getUserClass(Object instance) {\n        Validate.notNull(instance, \"Instance must not be null\");\n        Class clazz = instance.getClass();\n        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\n            Class<?> superClass = clazz.getSuperclass();\n            if ((superClass != null) && !Object.class.equals(superClass)) {\n                return superClass;\n            }\n        }\n        return clazz;\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {\n        if ((e instanceof IllegalAccessException) || (e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException)) {\n            return new IllegalArgumentException(e);\n        } else if (e instanceof InvocationTargetException) {\n            return new RuntimeException(((InvocationTargetException) e).getTargetException());\n        } else if (e instanceof RuntimeException) {\n            return (RuntimeException) e;\n        }\n        return new RuntimeException(\"Unexpected Checked Exception.\", e);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ReflectionsTest7.java",
		"test_prompt": "// ReflectionsTest7.java\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reflections}.\n* It contains ten unit test cases for the {@link Reflections#getClassGenricType(Class)} method.\n*/\nclass ReflectionsTest7 {"
	},
	{
		"original_code": "// Reflections.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 反射工具类.\n *\n * 提供调用getter/setter方法, 访问私有变量, 调用私有方法, 获取泛型类型Class, 被AOP过的真实类等工具函数.\n *\n * @author calvin\n */\npublic class Reflections {\n\n    private static final String SETTER_PREFIX = \"set\";\n\n    private static final String GETTER_PREFIX = \"get\";\n\n    private static final String CGLIB_CLASS_SEPARATOR = \"$$\";\n\n    private static Logger logger = LoggerFactory.getLogger(Reflections.class);\n\n    /**\n     * 调用Getter方法.\n     */\n    public static Object invokeGetter(Object obj, String propertyName) {\n        String getterMethodName = GETTER_PREFIX + StringUtils.capitalize(propertyName);\n        return invokeMethod(obj, getterMethodName, new Class[] {}, new Object[] {});\n    }\n\n    /**\n     * 调用Setter方法, 仅匹配方法名。\n     */\n    public static void invokeSetter(Object obj, String propertyName, Object value) {\n        String setterMethodName = SETTER_PREFIX + StringUtils.capitalize(propertyName);\n        invokeMethodByName(obj, setterMethodName, new Object[] { value });\n    }\n\n    /**\n     * 直接读取对象属性值, 无视private/protected修饰符, 不经过getter函数.\n     */\n    public static Object getFieldValue(final Object obj, final String fieldName) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        Object result = null;\n        try {\n            result = field.get(obj);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常{}\", e.getMessage());\n        }\n        return result;\n    }\n\n    /**\n     * 直接设置对象属性值, 无视private/protected修饰符, 不经过setter函数.\n     */\n    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            field.set(obj, value);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常:{}\", e.getMessage());\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符.\n     * 用于一次性调用的情况，否则应使用getAccessibleMethod()函数获得Method后反复调用.\n     * 同时匹配方法名+参数类型，\n     */\n    public static Object invokeMethod(final Object obj, final String methodName, final Class<?>[] parameterTypes, final Object[] args) {\n        Method method = getAccessibleMethod(obj, methodName, parameterTypes);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符，\n     * 用于一次性调用的情况，否则应使用getAccessibleMethodByName()函数获得Method后反复调用.\n     * 只匹配函数名，如果有多个同名函数调用第一个。\n     */\n    public static Object invokeMethodByName(final Object obj, final String methodName, final Object[] args) {\n        Method method = getAccessibleMethodByName(obj, methodName);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredField, 并强制设置为可访问.\n     *\n     * 如向上转型到Object仍无法找到, 返回null.\n     */\n    public static Field getAccessibleField(final Object obj, final String fieldName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(fieldName, \"fieldName can't be blank\");\n        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass.getSuperclass()) {\n            try {\n                Field field = superClass.getDeclaredField(fieldName);\n                makeAccessible(field);\n                return field;\n            } catch (NoSuchFieldException e) {\n                // NOSONAR\n                // Field不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 匹配函数名+参数类型。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethod(final Object obj, final String methodName, final Class<?>... parameterTypes) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            try {\n                Method method = searchType.getDeclaredMethod(methodName, parameterTypes);\n                makeAccessible(method);\n                return method;\n            } catch (NoSuchMethodException e) {\n                // Method不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 只匹配函数名。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethodByName(final Object obj, final String methodName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            Method[] methods = searchType.getDeclaredMethods();\n            for (Method method : methods) {\n                if (method.getName().equals(methodName)) {\n                    makeAccessible(method);\n                    return method;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 改变private/protected的方法为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Method method) {\n        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {\n            method.setAccessible(true);\n        }\n    }\n\n    /**\n     * 改变private/protected的成员变量为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Field field) {\n        if ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) || Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的泛型参数的类型, 注意泛型必须定义在父类处\n     * 如无法找到, 返回Object.class.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    public static <T> Class<T> getClassGenricType(final Class clazz) {\n        return getClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的父类的泛型参数的类型.\n     * 如无法找到, 返回Object.class.\n     *\n     * 如public UserDao extends HibernateDao<User,Long>\n     *\n     * @param clazz clazz The class to introspect\n     * @param index the Index of the generic ddeclaration,start from 0.\n     * @return the index generic declaration, or Object.class if cannot be determined\n     */\n    public static Class getClassGenricType(final Class clazz, final int index) {\n        Type genType = clazz.getGenericSuperclass();\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n        if ((index >= params.length) || (index < 0)) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \" + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n        return (Class) params[index];\n    }\n\n    public static Class<?> getUserClass(Object instance) {\n        Validate.notNull(instance, \"Instance must not be null\");\n        Class clazz = instance.getClass();\n        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\n            Class<?> superClass = clazz.getSuperclass();\n            if ((superClass != null) && !Object.class.equals(superClass)) {\n                return superClass;\n            }\n        }\n        return clazz;\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {\n        if ((e instanceof IllegalAccessException) || (e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException)) {\n            return new IllegalArgumentException(e);\n        } else if (e instanceof InvocationTargetException) {\n            return new RuntimeException(((InvocationTargetException) e).getTargetException());\n        } else if (e instanceof RuntimeException) {\n            return (RuntimeException) e;\n        }\n        return new RuntimeException(\"Unexpected Checked Exception.\", e);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ReflectionsTest8.java",
		"test_prompt": "// ReflectionsTest8.java\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reflections}.\n* It contains ten unit test cases for the {@link Reflections#getClassGenricType(Class, int)} method.\n*/\nclass ReflectionsTest8 {"
	},
	{
		"original_code": "// Reflections.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 反射工具类.\n *\n * 提供调用getter/setter方法, 访问私有变量, 调用私有方法, 获取泛型类型Class, 被AOP过的真实类等工具函数.\n *\n * @author calvin\n */\npublic class Reflections {\n\n    private static final String SETTER_PREFIX = \"set\";\n\n    private static final String GETTER_PREFIX = \"get\";\n\n    private static final String CGLIB_CLASS_SEPARATOR = \"$$\";\n\n    private static Logger logger = LoggerFactory.getLogger(Reflections.class);\n\n    /**\n     * 调用Getter方法.\n     */\n    public static Object invokeGetter(Object obj, String propertyName) {\n        String getterMethodName = GETTER_PREFIX + StringUtils.capitalize(propertyName);\n        return invokeMethod(obj, getterMethodName, new Class[] {}, new Object[] {});\n    }\n\n    /**\n     * 调用Setter方法, 仅匹配方法名。\n     */\n    public static void invokeSetter(Object obj, String propertyName, Object value) {\n        String setterMethodName = SETTER_PREFIX + StringUtils.capitalize(propertyName);\n        invokeMethodByName(obj, setterMethodName, new Object[] { value });\n    }\n\n    /**\n     * 直接读取对象属性值, 无视private/protected修饰符, 不经过getter函数.\n     */\n    public static Object getFieldValue(final Object obj, final String fieldName) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        Object result = null;\n        try {\n            result = field.get(obj);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常{}\", e.getMessage());\n        }\n        return result;\n    }\n\n    /**\n     * 直接设置对象属性值, 无视private/protected修饰符, 不经过setter函数.\n     */\n    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            field.set(obj, value);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常:{}\", e.getMessage());\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符.\n     * 用于一次性调用的情况，否则应使用getAccessibleMethod()函数获得Method后反复调用.\n     * 同时匹配方法名+参数类型，\n     */\n    public static Object invokeMethod(final Object obj, final String methodName, final Class<?>[] parameterTypes, final Object[] args) {\n        Method method = getAccessibleMethod(obj, methodName, parameterTypes);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符，\n     * 用于一次性调用的情况，否则应使用getAccessibleMethodByName()函数获得Method后反复调用.\n     * 只匹配函数名，如果有多个同名函数调用第一个。\n     */\n    public static Object invokeMethodByName(final Object obj, final String methodName, final Object[] args) {\n        Method method = getAccessibleMethodByName(obj, methodName);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredField, 并强制设置为可访问.\n     *\n     * 如向上转型到Object仍无法找到, 返回null.\n     */\n    public static Field getAccessibleField(final Object obj, final String fieldName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(fieldName, \"fieldName can't be blank\");\n        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass.getSuperclass()) {\n            try {\n                Field field = superClass.getDeclaredField(fieldName);\n                makeAccessible(field);\n                return field;\n            } catch (NoSuchFieldException e) {\n                // NOSONAR\n                // Field不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 匹配函数名+参数类型。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethod(final Object obj, final String methodName, final Class<?>... parameterTypes) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            try {\n                Method method = searchType.getDeclaredMethod(methodName, parameterTypes);\n                makeAccessible(method);\n                return method;\n            } catch (NoSuchMethodException e) {\n                // Method不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 只匹配函数名。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethodByName(final Object obj, final String methodName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            Method[] methods = searchType.getDeclaredMethods();\n            for (Method method : methods) {\n                if (method.getName().equals(methodName)) {\n                    makeAccessible(method);\n                    return method;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 改变private/protected的方法为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Method method) {\n        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {\n            method.setAccessible(true);\n        }\n    }\n\n    /**\n     * 改变private/protected的成员变量为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Field field) {\n        if ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) || Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的泛型参数的类型, 注意泛型必须定义在父类处\n     * 如无法找到, 返回Object.class.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    public static <T> Class<T> getClassGenricType(final Class clazz) {\n        return getClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的父类的泛型参数的类型.\n     * 如无法找到, 返回Object.class.\n     *\n     * 如public UserDao extends HibernateDao<User,Long>\n     *\n     * @param clazz clazz The class to introspect\n     * @param index the Index of the generic ddeclaration,start from 0.\n     * @return the index generic declaration, or Object.class if cannot be determined\n     */\n    public static Class getClassGenricType(final Class clazz, final int index) {\n        Type genType = clazz.getGenericSuperclass();\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n        if ((index >= params.length) || (index < 0)) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \" + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n        return (Class) params[index];\n    }\n\n    public static Class<?> getUserClass(Object instance) {\n        Validate.notNull(instance, \"Instance must not be null\");\n        Class clazz = instance.getClass();\n        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\n            Class<?> superClass = clazz.getSuperclass();\n            if ((superClass != null) && !Object.class.equals(superClass)) {\n                return superClass;\n            }\n        }\n        return clazz;\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {\n        if ((e instanceof IllegalAccessException) || (e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException)) {\n            return new IllegalArgumentException(e);\n        } else if (e instanceof InvocationTargetException) {\n            return new RuntimeException(((InvocationTargetException) e).getTargetException());\n        } else if (e instanceof RuntimeException) {\n            return (RuntimeException) e;\n        }\n        return new RuntimeException(\"Unexpected Checked Exception.\", e);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ReflectionsTest9.java",
		"test_prompt": "// ReflectionsTest9.java\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reflections}.\n* It contains ten unit test cases for the {@link Reflections#getUserClass(Object)} method.\n*/\nclass ReflectionsTest9 {"
	},
	{
		"original_code": "// Reflections.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 反射工具类.\n *\n * 提供调用getter/setter方法, 访问私有变量, 调用私有方法, 获取泛型类型Class, 被AOP过的真实类等工具函数.\n *\n * @author calvin\n */\npublic class Reflections {\n\n    private static final String SETTER_PREFIX = \"set\";\n\n    private static final String GETTER_PREFIX = \"get\";\n\n    private static final String CGLIB_CLASS_SEPARATOR = \"$$\";\n\n    private static Logger logger = LoggerFactory.getLogger(Reflections.class);\n\n    /**\n     * 调用Getter方法.\n     */\n    public static Object invokeGetter(Object obj, String propertyName) {\n        String getterMethodName = GETTER_PREFIX + StringUtils.capitalize(propertyName);\n        return invokeMethod(obj, getterMethodName, new Class[] {}, new Object[] {});\n    }\n\n    /**\n     * 调用Setter方法, 仅匹配方法名。\n     */\n    public static void invokeSetter(Object obj, String propertyName, Object value) {\n        String setterMethodName = SETTER_PREFIX + StringUtils.capitalize(propertyName);\n        invokeMethodByName(obj, setterMethodName, new Object[] { value });\n    }\n\n    /**\n     * 直接读取对象属性值, 无视private/protected修饰符, 不经过getter函数.\n     */\n    public static Object getFieldValue(final Object obj, final String fieldName) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        Object result = null;\n        try {\n            result = field.get(obj);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常{}\", e.getMessage());\n        }\n        return result;\n    }\n\n    /**\n     * 直接设置对象属性值, 无视private/protected修饰符, 不经过setter函数.\n     */\n    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {\n        Field field = getAccessibleField(obj, fieldName);\n        if (field == null) {\n            throw new IllegalArgumentException(\"Could not find field [\" + fieldName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            field.set(obj, value);\n        } catch (IllegalAccessException e) {\n            logger.error(\"不可能抛出的异常:{}\", e.getMessage());\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符.\n     * 用于一次性调用的情况，否则应使用getAccessibleMethod()函数获得Method后反复调用.\n     * 同时匹配方法名+参数类型，\n     */\n    public static Object invokeMethod(final Object obj, final String methodName, final Class<?>[] parameterTypes, final Object[] args) {\n        Method method = getAccessibleMethod(obj, methodName, parameterTypes);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 直接调用对象方法, 无视private/protected修饰符，\n     * 用于一次性调用的情况，否则应使用getAccessibleMethodByName()函数获得Method后反复调用.\n     * 只匹配函数名，如果有多个同名函数调用第一个。\n     */\n    public static Object invokeMethodByName(final Object obj, final String methodName, final Object[] args) {\n        Method method = getAccessibleMethodByName(obj, methodName);\n        if (method == null) {\n            throw new IllegalArgumentException(\"Could not find method [\" + methodName + \"] on target [\" + obj + \"]\");\n        }\n        try {\n            return method.invoke(obj, args);\n        } catch (Exception e) {\n            throw convertReflectionExceptionToUnchecked(e);\n        }\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredField, 并强制设置为可访问.\n     *\n     * 如向上转型到Object仍无法找到, 返回null.\n     */\n    public static Field getAccessibleField(final Object obj, final String fieldName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(fieldName, \"fieldName can't be blank\");\n        for (Class<?> superClass = obj.getClass(); superClass != Object.class; superClass = superClass.getSuperclass()) {\n            try {\n                Field field = superClass.getDeclaredField(fieldName);\n                makeAccessible(field);\n                return field;\n            } catch (NoSuchFieldException e) {\n                // NOSONAR\n                // Field不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 匹配函数名+参数类型。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethod(final Object obj, final String methodName, final Class<?>... parameterTypes) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            try {\n                Method method = searchType.getDeclaredMethod(methodName, parameterTypes);\n                makeAccessible(method);\n                return method;\n            } catch (NoSuchMethodException e) {\n                // Method不在当前类定义,继续向上转型\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 循环向上转型, 获取对象的DeclaredMethod,并强制设置为可访问.\n     * 如向上转型到Object仍无法找到, 返回null.\n     * 只匹配函数名。\n     *\n     * 用于方法需要被多次调用的情况. 先使用本函数先取得Method,然后调用Method.invoke(Object obj, Object... args)\n     */\n    public static Method getAccessibleMethodByName(final Object obj, final String methodName) {\n        Validate.notNull(obj, \"object can't be null\");\n        Validate.notBlank(methodName, \"methodName can't be blank\");\n        for (Class<?> searchType = obj.getClass(); searchType != Object.class; searchType = searchType.getSuperclass()) {\n            Method[] methods = searchType.getDeclaredMethods();\n            for (Method method : methods) {\n                if (method.getName().equals(methodName)) {\n                    makeAccessible(method);\n                    return method;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 改变private/protected的方法为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Method method) {\n        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers())) && !method.isAccessible()) {\n            method.setAccessible(true);\n        }\n    }\n\n    /**\n     * 改变private/protected的成员变量为public，尽量不调用实际改动的语句，避免JDK的SecurityManager抱怨。\n     */\n    public static void makeAccessible(Field field) {\n        if ((!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers()) || Modifier.isFinal(field.getModifiers())) && !field.isAccessible()) {\n            field.setAccessible(true);\n        }\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的泛型参数的类型, 注意泛型必须定义在父类处\n     * 如无法找到, 返回Object.class.\n     * eg.\n     * public UserDao extends HibernateDao<User>\n     *\n     * @param clazz The class to introspect\n     * @return the first generic declaration, or Object.class if cannot be determined\n     */\n    public static <T> Class<T> getClassGenricType(final Class clazz) {\n        return getClassGenricType(clazz, 0);\n    }\n\n    /**\n     * 通过反射, 获得Class定义中声明的父类的泛型参数的类型.\n     * 如无法找到, 返回Object.class.\n     *\n     * 如public UserDao extends HibernateDao<User,Long>\n     *\n     * @param clazz clazz The class to introspect\n     * @param index the Index of the generic ddeclaration,start from 0.\n     * @return the index generic declaration, or Object.class if cannot be determined\n     */\n    public static Class getClassGenricType(final Class clazz, final int index) {\n        Type genType = clazz.getGenericSuperclass();\n        if (!(genType instanceof ParameterizedType)) {\n            logger.warn(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n            return Object.class;\n        }\n        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n        if ((index >= params.length) || (index < 0)) {\n            logger.warn(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \" + params.length);\n            return Object.class;\n        }\n        if (!(params[index] instanceof Class)) {\n            logger.warn(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n            return Object.class;\n        }\n        return (Class) params[index];\n    }\n\n    public static Class<?> getUserClass(Object instance) {\n        Validate.notNull(instance, \"Instance must not be null\");\n        Class clazz = instance.getClass();\n        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {\n            Class<?> superClass = clazz.getSuperclass();\n            if ((superClass != null) && !Object.class.equals(superClass)) {\n                return superClass;\n            }\n        }\n        return clazz;\n    }\n\n    /**\n     * 将反射时的checked exception转换为unchecked exception.\n     */\n    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {\n        if ((e instanceof IllegalAccessException) || (e instanceof IllegalArgumentException) || (e instanceof NoSuchMethodException)) {\n            return new IllegalArgumentException(e);\n        } else if (e instanceof InvocationTargetException) {\n            return new RuntimeException(((InvocationTargetException) e).getTargetException());\n        } else if (e instanceof RuntimeException) {\n            return (RuntimeException) e;\n        }\n        return new RuntimeException(\"Unexpected Checked Exception.\", e);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ReflectionsTest10.java",
		"test_prompt": "// ReflectionsTest10.java\npackage org.springside.modules.utils;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Reflections}.\n* It contains ten unit test cases for the {@link Reflections#convertReflectionExceptionToUnchecked(Exception)} method.\n*/\nclass ReflectionsTest10 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test0.java",
		"test_prompt": "// Collections3Test0.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#extractToMap(Collection, String, String)} method.\n*/\nclass Collections3Test0 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test1.java",
		"test_prompt": "// Collections3Test1.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#extractToList(Collection, String)} method.\n*/\nclass Collections3Test1 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test2.java",
		"test_prompt": "// Collections3Test2.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#extractToString(Collection, String, String)} method.\n*/\nclass Collections3Test2 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test3.java",
		"test_prompt": "// Collections3Test3.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#convertToString(Collection, String)} method.\n*/\nclass Collections3Test3 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test4.java",
		"test_prompt": "// Collections3Test4.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#convertToString(Collection, String, String)} method.\n*/\nclass Collections3Test4 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test5.java",
		"test_prompt": "// Collections3Test5.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#isEmpty(Collection)} method.\n*/\nclass Collections3Test5 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test6.java",
		"test_prompt": "// Collections3Test6.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#isEmpty(Map)} method.\n*/\nclass Collections3Test6 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test7.java",
		"test_prompt": "// Collections3Test7.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#isNotEmpty(Collection)} method.\n*/\nclass Collections3Test7 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test8.java",
		"test_prompt": "// Collections3Test8.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#getFirst(Collection)} method.\n*/\nclass Collections3Test8 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test9.java",
		"test_prompt": "// Collections3Test9.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#getLast(Collection)} method.\n*/\nclass Collections3Test9 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test10.java",
		"test_prompt": "// Collections3Test10.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#union(Collection, Collection)} method.\n*/\nclass Collections3Test10 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test11.java",
		"test_prompt": "// Collections3Test11.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#subtract(Collection, Collection)} method.\n*/\nclass Collections3Test11 {"
	},
	{
		"original_code": "// Collections3.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * Collections工具集.\n *\n * 在JDK的Collections和Guava的Collections2后, 命名为Collections3.\n *\n * 函数主要由两部分组成，一是自反射提取元素的功能，二是源自Apache Commons Collection, 争取不用在项目里引入它。\n *\n * @author calvin\n */\npublic class Collections3 {\n\n    /**\n     * 提取集合中的对象的两个属性(通过Getter函数), 组合成Map.\n     *\n     * @param collection 来源集合.\n     * @param keyPropertyName 要提取为Map中的Key值的属性名.\n     * @param valuePropertyName 要提取为Map中的Value值的属性名.\n     */\n    public static Map extractToMap(final Collection collection, final String keyPropertyName, final String valuePropertyName) {\n        Map map = new HashMap(collection.size());\n        try {\n            for (Object obj : collection) {\n                map.put(PropertyUtils.getProperty(obj, keyPropertyName), PropertyUtils.getProperty(obj, valuePropertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return map;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成List.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     */\n    public static List extractToList(final Collection collection, final String propertyName) {\n        List list = new ArrayList(collection.size());\n        try {\n            for (Object obj : collection) {\n                list.add(PropertyUtils.getProperty(obj, propertyName));\n            }\n        } catch (Exception e) {\n            throw Reflections.convertReflectionExceptionToUnchecked(e);\n        }\n        return list;\n    }\n\n    /**\n     * 提取集合中的对象的一个属性(通过Getter函数), 组合成由分割符分隔的字符串.\n     *\n     * @param collection 来源集合.\n     * @param propertyName 要提取的属性名.\n     * @param separator 分隔符.\n     */\n    public static String extractToString(final Collection collection, final String propertyName, final String separator) {\n        List list = extractToList(collection, propertyName);\n        return StringUtils.join(list, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 中间以 separator分隔。\n     */\n    public static String convertToString(final Collection collection, final String separator) {\n        return StringUtils.join(collection, separator);\n    }\n\n    /**\n     * 转换Collection所有元素(通过toString())为String, 每个元素的前面加入prefix，后面加入postfix，如<div>mymessage</div>。\n     */\n    public static String convertToString(final Collection collection, final String prefix, final String postfix) {\n        StringBuilder builder = new StringBuilder();\n        for (Object o : collection) {\n            builder.append(prefix).append(o).append(postfix);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Collection collection) {\n        return (collection == null) || collection.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isEmpty(Map map) {\n        return (map == null) || map.isEmpty();\n    }\n\n    /**\n     * 判断是否为空.\n     */\n    public static boolean isNotEmpty(Collection collection) {\n        return (collection != null) && !(collection.isEmpty());\n    }\n\n    /**\n     * 取得Collection的第一个元素，如果collection为空返回null.\n     */\n    public static <T> T getFirst(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        return collection.iterator().next();\n    }\n\n    /**\n     * 获取Collection的最后一个元素 ，如果collection为空返回null.\n     */\n    public static <T> T getLast(Collection<T> collection) {\n        if (isEmpty(collection)) {\n            return null;\n        }\n        // 当类型为List时，直接取得最后一个元素 。\n        if (collection instanceof List) {\n            List<T> list = (List<T>) collection;\n            return list.get(list.size() - 1);\n        }\n        // 其他类型通过iterator滚动到最后一个元素.\n        Iterator<T> iterator = collection.iterator();\n        while (true) {\n            T current = iterator.next();\n            if (!iterator.hasNext()) {\n                return current;\n            }\n        }\n    }\n\n    /**\n     * 返回a+b的新List.\n     */\n    public static <T> List<T> union(final Collection<T> a, final Collection<T> b) {\n        List<T> result = new ArrayList<T>(a);\n        result.addAll(b);\n        return result;\n    }\n\n    /**\n     * 返回a-b的新List.\n     */\n    public static <T> List<T> subtract(final Collection<T> a, final Collection<T> b) {\n        List<T> list = new ArrayList<T>(a);\n        for (T element : b) {\n            list.remove(element);\n        }\n        return list;\n    }\n\n    /**\n     * 返回a与b的交集的新List.\n     */\n    public static <T> List<T> intersection(Collection<T> a, Collection<T> b) {\n        List<T> list = new ArrayList<T>();\n        for (T element : a) {\n            if (b.contains(element)) {\n                list.add(element);\n            }\n        }\n        return list;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/Collections3Test12.java",
		"test_prompt": "// Collections3Test12.java\npackage org.springside.modules.utils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Collections3}.\n* It contains ten unit test cases for the {@link Collections3#intersection(Collection, Collection)} method.\n*/\nclass Collections3Test12 {"
	},
	{
		"original_code": "// Threads.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.TimeUnit;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.google.common.util.concurrent.ThreadFactoryBuilder;\n\n/**\n * 线程相关工具类.\n *\n * @author calvin\n */\npublic class Threads {\n\n    /**\n     * sleep等待, 单位为毫秒.\n     */\n    public static void sleep(long durationMillis) {\n        try {\n            Thread.sleep(durationMillis);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    /**\n     * sleep等待.\n     */\n    public static void sleep(long duration, TimeUnit unit) {\n        try {\n            Thread.sleep(unit.toMillis(duration));\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    /**\n     * 创建ThreadFactory，使得创建的线程有自己的名字而不是默认的\"pool-x-thread-y\"，\n     * 在用threaddump查看线程时特别有用。 格式如\"mythread-%d\"\n     */\n    public static ThreadFactory buildJobFactory(String nameFormat) {\n        return new ThreadFactoryBuilder().setNameFormat(nameFormat).build();\n    }\n\n    /**\n     * 按照ExecutorService JavaDoc示例代码编写的Graceful Shutdown方法.\n     * 先使用shutdown, 停止接收新任务并尝试完成所有已存在任务.\n     * 如果超时, 则调用shutdownNow, 取消在workQueue中Pending的任务,并中断所有阻塞函数.\n     * 如果仍然超時，則強制退出.\n     * 另对在shutdown时线程本身被调用中断做了处理.\n     */\n    public static void gracefulShutdown(ExecutorService pool, int shutdownTimeout, int shutdownNowTimeout, TimeUnit timeUnit) {\n        // Disable new tasks from being submitted\n        pool.shutdown();\n        try {\n            // Wait a while for existing tasks to terminate\n            if (!pool.awaitTermination(shutdownTimeout, timeUnit)) {\n                // Cancel currently executing tasks\n                pool.shutdownNow();\n                // Wait a while for tasks to respond to being cancelled\n                if (!pool.awaitTermination(shutdownNowTimeout, timeUnit)) {\n                    System.err.println(\"Pool did not terminated\");\n                }\n            }\n        } catch (InterruptedException ie) {\n            // (Re-)Cancel if current thread also interrupted\n            pool.shutdownNow();\n            // Preserve interrupt status\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    /**\n     * 直接调用shutdownNow的方法, 有timeout控制.取消在workQueue中Pending的任务,并中断所有阻塞函数.\n     */\n    public static void normalShutdown(ExecutorService pool, int timeout, TimeUnit timeUnit) {\n        try {\n            pool.shutdownNow();\n            if (!pool.awaitTermination(timeout, timeUnit)) {\n                System.err.println(\"Pool did not terminated\");\n            }\n        } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    /**\n     * 保证不会有Exception抛出到线程池的Runnable，防止用户没有捕捉异常导致中断了线程池中的线程。\n     */\n    public static class WrapExceptionRunnable implements Runnable {\n\n        private static Logger logger = LoggerFactory.getLogger(WrapExceptionRunnable.class);\n\n        private Runnable runnable;\n\n        public WrapExceptionRunnable(Runnable runnable) {\n            this.runnable = runnable;\n        }\n\n        @Override\n        public void run() {\n            try {\n                runnable.run();\n            } catch (Exception e) {\n                // catch any exception, because the scheduled thread will break if the exception thrown outside.\n                logger.error(\"Unexpected error occurred in task\", e);\n            }\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ThreadsTest.java",
		"test_prompt": "// ThreadsTest.java\npackage org.springside.modules.utils;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.TimeUnit;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.google.common.util.concurrent.ThreadFactoryBuilder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Threads}.\n* It contains ten unit test cases for the {@link Threads#buildJobFactory(String)} method.\n*/\nclass ThreadsTest {"
	},
	{
		"original_code": "// Exceptions.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\n\n/**\n * 关于异常的工具类.\n *\n * 参考了guava的Throwables。\n *\n * @author calvin\n */\npublic class Exceptions {\n\n    /**\n     * 将CheckedException转换为UncheckedException.\n     */\n    public static RuntimeException unchecked(Throwable ex) {\n        if (ex instanceof RuntimeException) {\n            return (RuntimeException) ex;\n        } else {\n            return new RuntimeException(ex);\n        }\n    }\n\n    /**\n     * 将ErrorStack转化为String.\n     */\n    public static String getStackTraceAsString(Throwable ex) {\n        StringWriter stringWriter = new StringWriter();\n        ex.printStackTrace(new PrintWriter(stringWriter));\n        return stringWriter.toString();\n    }\n\n    /**\n     * 获取组合本异常信息与底层异常信息的异常描述, 适用于本异常为统一包装异常类，底层异常才是根本原因的情况。\n     */\n    public static String getErrorMessageWithNestedException(Throwable ex) {\n        Throwable nestedException = ex.getCause();\n        return new StringBuilder().append(ex.getMessage()).append(\" nested exception is \").append(nestedException.getClass().getName()).append(\":\").append(nestedException.getMessage()).toString();\n    }\n\n    /**\n     * 获取异常的Root Cause.\n     */\n    public static Throwable getRootCause(Throwable ex) {\n        Throwable cause;\n        while ((cause = ex.getCause()) != null) {\n            ex = cause;\n        }\n        return ex;\n    }\n\n    /**\n     * 判断异常是否由某些底层的异常引起.\n     */\n    public static boolean isCausedBy(Exception ex, Class<? extends Exception>... causeExceptionClasses) {\n        Throwable cause = ex;\n        while (cause != null) {\n            for (Class<? extends Exception> causeClass : causeExceptionClasses) {\n                if (causeClass.isInstance(cause)) {\n                    return true;\n                }\n            }\n            cause = cause.getCause();\n        }\n        return false;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ExceptionsTest0.java",
		"test_prompt": "// ExceptionsTest0.java\npackage org.springside.modules.utils;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exceptions}.\n* It contains ten unit test cases for the {@link Exceptions#unchecked(Throwable)} method.\n*/\nclass ExceptionsTest0 {"
	},
	{
		"original_code": "// Exceptions.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\n\n/**\n * 关于异常的工具类.\n *\n * 参考了guava的Throwables。\n *\n * @author calvin\n */\npublic class Exceptions {\n\n    /**\n     * 将CheckedException转换为UncheckedException.\n     */\n    public static RuntimeException unchecked(Throwable ex) {\n        if (ex instanceof RuntimeException) {\n            return (RuntimeException) ex;\n        } else {\n            return new RuntimeException(ex);\n        }\n    }\n\n    /**\n     * 将ErrorStack转化为String.\n     */\n    public static String getStackTraceAsString(Throwable ex) {\n        StringWriter stringWriter = new StringWriter();\n        ex.printStackTrace(new PrintWriter(stringWriter));\n        return stringWriter.toString();\n    }\n\n    /**\n     * 获取组合本异常信息与底层异常信息的异常描述, 适用于本异常为统一包装异常类，底层异常才是根本原因的情况。\n     */\n    public static String getErrorMessageWithNestedException(Throwable ex) {\n        Throwable nestedException = ex.getCause();\n        return new StringBuilder().append(ex.getMessage()).append(\" nested exception is \").append(nestedException.getClass().getName()).append(\":\").append(nestedException.getMessage()).toString();\n    }\n\n    /**\n     * 获取异常的Root Cause.\n     */\n    public static Throwable getRootCause(Throwable ex) {\n        Throwable cause;\n        while ((cause = ex.getCause()) != null) {\n            ex = cause;\n        }\n        return ex;\n    }\n\n    /**\n     * 判断异常是否由某些底层的异常引起.\n     */\n    public static boolean isCausedBy(Exception ex, Class<? extends Exception>... causeExceptionClasses) {\n        Throwable cause = ex;\n        while (cause != null) {\n            for (Class<? extends Exception> causeClass : causeExceptionClasses) {\n                if (causeClass.isInstance(cause)) {\n                    return true;\n                }\n            }\n            cause = cause.getCause();\n        }\n        return false;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ExceptionsTest1.java",
		"test_prompt": "// ExceptionsTest1.java\npackage org.springside.modules.utils;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exceptions}.\n* It contains ten unit test cases for the {@link Exceptions#getStackTraceAsString(Throwable)} method.\n*/\nclass ExceptionsTest1 {"
	},
	{
		"original_code": "// Exceptions.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\n\n/**\n * 关于异常的工具类.\n *\n * 参考了guava的Throwables。\n *\n * @author calvin\n */\npublic class Exceptions {\n\n    /**\n     * 将CheckedException转换为UncheckedException.\n     */\n    public static RuntimeException unchecked(Throwable ex) {\n        if (ex instanceof RuntimeException) {\n            return (RuntimeException) ex;\n        } else {\n            return new RuntimeException(ex);\n        }\n    }\n\n    /**\n     * 将ErrorStack转化为String.\n     */\n    public static String getStackTraceAsString(Throwable ex) {\n        StringWriter stringWriter = new StringWriter();\n        ex.printStackTrace(new PrintWriter(stringWriter));\n        return stringWriter.toString();\n    }\n\n    /**\n     * 获取组合本异常信息与底层异常信息的异常描述, 适用于本异常为统一包装异常类，底层异常才是根本原因的情况。\n     */\n    public static String getErrorMessageWithNestedException(Throwable ex) {\n        Throwable nestedException = ex.getCause();\n        return new StringBuilder().append(ex.getMessage()).append(\" nested exception is \").append(nestedException.getClass().getName()).append(\":\").append(nestedException.getMessage()).toString();\n    }\n\n    /**\n     * 获取异常的Root Cause.\n     */\n    public static Throwable getRootCause(Throwable ex) {\n        Throwable cause;\n        while ((cause = ex.getCause()) != null) {\n            ex = cause;\n        }\n        return ex;\n    }\n\n    /**\n     * 判断异常是否由某些底层的异常引起.\n     */\n    public static boolean isCausedBy(Exception ex, Class<? extends Exception>... causeExceptionClasses) {\n        Throwable cause = ex;\n        while (cause != null) {\n            for (Class<? extends Exception> causeClass : causeExceptionClasses) {\n                if (causeClass.isInstance(cause)) {\n                    return true;\n                }\n            }\n            cause = cause.getCause();\n        }\n        return false;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ExceptionsTest2.java",
		"test_prompt": "// ExceptionsTest2.java\npackage org.springside.modules.utils;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exceptions}.\n* It contains ten unit test cases for the {@link Exceptions#getErrorMessageWithNestedException(Throwable)} method.\n*/\nclass ExceptionsTest2 {"
	},
	{
		"original_code": "// Exceptions.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\n\n/**\n * 关于异常的工具类.\n *\n * 参考了guava的Throwables。\n *\n * @author calvin\n */\npublic class Exceptions {\n\n    /**\n     * 将CheckedException转换为UncheckedException.\n     */\n    public static RuntimeException unchecked(Throwable ex) {\n        if (ex instanceof RuntimeException) {\n            return (RuntimeException) ex;\n        } else {\n            return new RuntimeException(ex);\n        }\n    }\n\n    /**\n     * 将ErrorStack转化为String.\n     */\n    public static String getStackTraceAsString(Throwable ex) {\n        StringWriter stringWriter = new StringWriter();\n        ex.printStackTrace(new PrintWriter(stringWriter));\n        return stringWriter.toString();\n    }\n\n    /**\n     * 获取组合本异常信息与底层异常信息的异常描述, 适用于本异常为统一包装异常类，底层异常才是根本原因的情况。\n     */\n    public static String getErrorMessageWithNestedException(Throwable ex) {\n        Throwable nestedException = ex.getCause();\n        return new StringBuilder().append(ex.getMessage()).append(\" nested exception is \").append(nestedException.getClass().getName()).append(\":\").append(nestedException.getMessage()).toString();\n    }\n\n    /**\n     * 获取异常的Root Cause.\n     */\n    public static Throwable getRootCause(Throwable ex) {\n        Throwable cause;\n        while ((cause = ex.getCause()) != null) {\n            ex = cause;\n        }\n        return ex;\n    }\n\n    /**\n     * 判断异常是否由某些底层的异常引起.\n     */\n    public static boolean isCausedBy(Exception ex, Class<? extends Exception>... causeExceptionClasses) {\n        Throwable cause = ex;\n        while (cause != null) {\n            for (Class<? extends Exception> causeClass : causeExceptionClasses) {\n                if (causeClass.isInstance(cause)) {\n                    return true;\n                }\n            }\n            cause = cause.getCause();\n        }\n        return false;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ExceptionsTest3.java",
		"test_prompt": "// ExceptionsTest3.java\npackage org.springside.modules.utils;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exceptions}.\n* It contains ten unit test cases for the {@link Exceptions#getRootCause(Throwable)} method.\n*/\nclass ExceptionsTest3 {"
	},
	{
		"original_code": "// Exceptions.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\n\n/**\n * 关于异常的工具类.\n *\n * 参考了guava的Throwables。\n *\n * @author calvin\n */\npublic class Exceptions {\n\n    /**\n     * 将CheckedException转换为UncheckedException.\n     */\n    public static RuntimeException unchecked(Throwable ex) {\n        if (ex instanceof RuntimeException) {\n            return (RuntimeException) ex;\n        } else {\n            return new RuntimeException(ex);\n        }\n    }\n\n    /**\n     * 将ErrorStack转化为String.\n     */\n    public static String getStackTraceAsString(Throwable ex) {\n        StringWriter stringWriter = new StringWriter();\n        ex.printStackTrace(new PrintWriter(stringWriter));\n        return stringWriter.toString();\n    }\n\n    /**\n     * 获取组合本异常信息与底层异常信息的异常描述, 适用于本异常为统一包装异常类，底层异常才是根本原因的情况。\n     */\n    public static String getErrorMessageWithNestedException(Throwable ex) {\n        Throwable nestedException = ex.getCause();\n        return new StringBuilder().append(ex.getMessage()).append(\" nested exception is \").append(nestedException.getClass().getName()).append(\":\").append(nestedException.getMessage()).toString();\n    }\n\n    /**\n     * 获取异常的Root Cause.\n     */\n    public static Throwable getRootCause(Throwable ex) {\n        Throwable cause;\n        while ((cause = ex.getCause()) != null) {\n            ex = cause;\n        }\n        return ex;\n    }\n\n    /**\n     * 判断异常是否由某些底层的异常引起.\n     */\n    public static boolean isCausedBy(Exception ex, Class<? extends Exception>... causeExceptionClasses) {\n        Throwable cause = ex;\n        while (cause != null) {\n            for (Class<? extends Exception> causeClass : causeExceptionClasses) {\n                if (causeClass.isInstance(cause)) {\n                    return true;\n                }\n            }\n            cause = cause.getCause();\n        }\n        return false;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/ExceptionsTest4.java",
		"test_prompt": "// ExceptionsTest4.java\npackage org.springside.modules.utils;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exceptions}.\n* It contains ten unit test cases for the {@link Exceptions#isCausedBy(Exception, Class<? extends Exception>[])} method.\n*/\nclass ExceptionsTest4 {"
	},
	{
		"original_code": "// Identities.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.security.SecureRandom;\nimport java.util.UUID;\n\n/**\n * 封装各种生成唯一性ID算法的工具类.\n *\n * @author calvin\n */\npublic class Identities {\n\n    private static SecureRandom random = new SecureRandom();\n\n    /**\n     * 封装JDK自带的UUID, 通过Random数字生成, 中间有-分割.\n     */\n    public static String uuid() {\n        return UUID.randomUUID().toString();\n    }\n\n    /**\n     * 封装JDK自带的UUID, 通过Random数字生成, 中间无-分割.\n     */\n    public static String uuid2() {\n        return UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    }\n\n    /**\n     * 使用SecureRandom随机生成Long.\n     */\n    public static long randomLong() {\n        return Math.abs(random.nextLong());\n    }\n\n    /**\n     * 基于Base62编码的SecureRandom随机生成bytes.\n     */\n    public static String randomBase62(int length) {\n        byte[] randomBytes = new byte[length];\n        random.nextBytes(randomBytes);\n        return Encodes.encodeBase62(randomBytes);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/IdentitiesTest0.java",
		"test_prompt": "// IdentitiesTest0.java\npackage org.springside.modules.utils;\n\nimport java.security.SecureRandom;\nimport java.util.UUID;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Identities}.\n* It contains ten unit test cases for the {@link Identities#uuid()} method.\n*/\nclass IdentitiesTest0 {"
	},
	{
		"original_code": "// Identities.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.security.SecureRandom;\nimport java.util.UUID;\n\n/**\n * 封装各种生成唯一性ID算法的工具类.\n *\n * @author calvin\n */\npublic class Identities {\n\n    private static SecureRandom random = new SecureRandom();\n\n    /**\n     * 封装JDK自带的UUID, 通过Random数字生成, 中间有-分割.\n     */\n    public static String uuid() {\n        return UUID.randomUUID().toString();\n    }\n\n    /**\n     * 封装JDK自带的UUID, 通过Random数字生成, 中间无-分割.\n     */\n    public static String uuid2() {\n        return UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    }\n\n    /**\n     * 使用SecureRandom随机生成Long.\n     */\n    public static long randomLong() {\n        return Math.abs(random.nextLong());\n    }\n\n    /**\n     * 基于Base62编码的SecureRandom随机生成bytes.\n     */\n    public static String randomBase62(int length) {\n        byte[] randomBytes = new byte[length];\n        random.nextBytes(randomBytes);\n        return Encodes.encodeBase62(randomBytes);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/IdentitiesTest1.java",
		"test_prompt": "// IdentitiesTest1.java\npackage org.springside.modules.utils;\n\nimport java.security.SecureRandom;\nimport java.util.UUID;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Identities}.\n* It contains ten unit test cases for the {@link Identities#uuid2()} method.\n*/\nclass IdentitiesTest1 {"
	},
	{
		"original_code": "// Identities.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.security.SecureRandom;\nimport java.util.UUID;\n\n/**\n * 封装各种生成唯一性ID算法的工具类.\n *\n * @author calvin\n */\npublic class Identities {\n\n    private static SecureRandom random = new SecureRandom();\n\n    /**\n     * 封装JDK自带的UUID, 通过Random数字生成, 中间有-分割.\n     */\n    public static String uuid() {\n        return UUID.randomUUID().toString();\n    }\n\n    /**\n     * 封装JDK自带的UUID, 通过Random数字生成, 中间无-分割.\n     */\n    public static String uuid2() {\n        return UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    }\n\n    /**\n     * 使用SecureRandom随机生成Long.\n     */\n    public static long randomLong() {\n        return Math.abs(random.nextLong());\n    }\n\n    /**\n     * 基于Base62编码的SecureRandom随机生成bytes.\n     */\n    public static String randomBase62(int length) {\n        byte[] randomBytes = new byte[length];\n        random.nextBytes(randomBytes);\n        return Encodes.encodeBase62(randomBytes);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/IdentitiesTest2.java",
		"test_prompt": "// IdentitiesTest2.java\npackage org.springside.modules.utils;\n\nimport java.security.SecureRandom;\nimport java.util.UUID;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Identities}.\n* It contains ten unit test cases for the {@link Identities#randomLong()} method.\n*/\nclass IdentitiesTest2 {"
	},
	{
		"original_code": "// Identities.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.security.SecureRandom;\nimport java.util.UUID;\n\n/**\n * 封装各种生成唯一性ID算法的工具类.\n *\n * @author calvin\n */\npublic class Identities {\n\n    private static SecureRandom random = new SecureRandom();\n\n    /**\n     * 封装JDK自带的UUID, 通过Random数字生成, 中间有-分割.\n     */\n    public static String uuid() {\n        return UUID.randomUUID().toString();\n    }\n\n    /**\n     * 封装JDK自带的UUID, 通过Random数字生成, 中间无-分割.\n     */\n    public static String uuid2() {\n        return UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    }\n\n    /**\n     * 使用SecureRandom随机生成Long.\n     */\n    public static long randomLong() {\n        return Math.abs(random.nextLong());\n    }\n\n    /**\n     * 基于Base62编码的SecureRandom随机生成bytes.\n     */\n    public static String randomBase62(int length) {\n        byte[] randomBytes = new byte[length];\n        random.nextBytes(randomBytes);\n        return Encodes.encodeBase62(randomBytes);\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/IdentitiesTest3.java",
		"test_prompt": "// IdentitiesTest3.java\npackage org.springside.modules.utils;\n\nimport java.security.SecureRandom;\nimport java.util.UUID;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Identities}.\n* It contains ten unit test cases for the {@link Identities#randomBase62(int)} method.\n*/\nclass IdentitiesTest3 {"
	},
	{
		"original_code": "// Encodes.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\n\n/**\n * 封装各种格式的编码解码工具类.\n *\n * 1.Commons-Codec的 hex/base64 编码\n * 2.自制的base62 编码\n * 3.Commons-Lang的xml/html escape\n * 4.JDK提供的URLEncoder\n *\n * @author calvin\n */\npublic class Encodes {\n\n    private static final String DEFAULT_URL_ENCODING = \"UTF-8\";\n\n    private static final char[] BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();\n\n    /**\n     * Hex编码.\n     */\n    public static String encodeHex(byte[] input) {\n        return Hex.encodeHexString(input);\n    }\n\n    /**\n     * Hex解码.\n     */\n    public static byte[] decodeHex(String input) {\n        try {\n            return Hex.decodeHex(input.toCharArray());\n        } catch (DecoderException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Base64编码.\n     */\n    public static String encodeBase64(byte[] input) {\n        return Base64.encodeBase64String(input);\n    }\n\n    /**\n     * Base64编码, URL安全(将Base64中的URL非法字符'+'和'/'转为'-'和'_', 见RFC3548).\n     */\n    public static String encodeUrlSafeBase64(byte[] input) {\n        return Base64.encodeBase64URLSafeString(input);\n    }\n\n    /**\n     * Base64解码.\n     */\n    public static byte[] decodeBase64(String input) {\n        return Base64.decodeBase64(input);\n    }\n\n    /**\n     * Base62编码。\n     */\n    public static String encodeBase62(byte[] input) {\n        char[] chars = new char[input.length];\n        for (int i = 0; i < input.length; i++) {\n            chars[i] = BASE62[(input[i] & 0xFF) % BASE62.length];\n        }\n        return new String(chars);\n    }\n\n    /**\n     * Html 转码.\n     */\n    public static String escapeHtml(String html) {\n        return StringEscapeUtils.escapeHtml4(html);\n    }\n\n    /**\n     * Html 解码.\n     */\n    public static String unescapeHtml(String htmlEscaped) {\n        return StringEscapeUtils.unescapeHtml4(htmlEscaped);\n    }\n\n    /**\n     * Xml 转码.\n     */\n    public static String escapeXml(String xml) {\n        return StringEscapeUtils.escapeXml(xml);\n    }\n\n    /**\n     * Xml 解码.\n     */\n    public static String unescapeXml(String xmlEscaped) {\n        return StringEscapeUtils.unescapeXml(xmlEscaped);\n    }\n\n    /**\n     * URL 编码, Encode默认为UTF-8.\n     */\n    public static String urlEncode(String part) {\n        try {\n            return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * URL 解码, Encode默认为UTF-8.\n     */\n    public static String urlDecode(String part) {\n        try {\n            return URLDecoder.decode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/EncodesTest0.java",
		"test_prompt": "// EncodesTest0.java\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encodes}.\n* It contains ten unit test cases for the {@link Encodes#encodeHex(byte[])} method.\n*/\nclass EncodesTest0 {"
	},
	{
		"original_code": "// Encodes.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\n\n/**\n * 封装各种格式的编码解码工具类.\n *\n * 1.Commons-Codec的 hex/base64 编码\n * 2.自制的base62 编码\n * 3.Commons-Lang的xml/html escape\n * 4.JDK提供的URLEncoder\n *\n * @author calvin\n */\npublic class Encodes {\n\n    private static final String DEFAULT_URL_ENCODING = \"UTF-8\";\n\n    private static final char[] BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();\n\n    /**\n     * Hex编码.\n     */\n    public static String encodeHex(byte[] input) {\n        return Hex.encodeHexString(input);\n    }\n\n    /**\n     * Hex解码.\n     */\n    public static byte[] decodeHex(String input) {\n        try {\n            return Hex.decodeHex(input.toCharArray());\n        } catch (DecoderException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Base64编码.\n     */\n    public static String encodeBase64(byte[] input) {\n        return Base64.encodeBase64String(input);\n    }\n\n    /**\n     * Base64编码, URL安全(将Base64中的URL非法字符'+'和'/'转为'-'和'_', 见RFC3548).\n     */\n    public static String encodeUrlSafeBase64(byte[] input) {\n        return Base64.encodeBase64URLSafeString(input);\n    }\n\n    /**\n     * Base64解码.\n     */\n    public static byte[] decodeBase64(String input) {\n        return Base64.decodeBase64(input);\n    }\n\n    /**\n     * Base62编码。\n     */\n    public static String encodeBase62(byte[] input) {\n        char[] chars = new char[input.length];\n        for (int i = 0; i < input.length; i++) {\n            chars[i] = BASE62[(input[i] & 0xFF) % BASE62.length];\n        }\n        return new String(chars);\n    }\n\n    /**\n     * Html 转码.\n     */\n    public static String escapeHtml(String html) {\n        return StringEscapeUtils.escapeHtml4(html);\n    }\n\n    /**\n     * Html 解码.\n     */\n    public static String unescapeHtml(String htmlEscaped) {\n        return StringEscapeUtils.unescapeHtml4(htmlEscaped);\n    }\n\n    /**\n     * Xml 转码.\n     */\n    public static String escapeXml(String xml) {\n        return StringEscapeUtils.escapeXml(xml);\n    }\n\n    /**\n     * Xml 解码.\n     */\n    public static String unescapeXml(String xmlEscaped) {\n        return StringEscapeUtils.unescapeXml(xmlEscaped);\n    }\n\n    /**\n     * URL 编码, Encode默认为UTF-8.\n     */\n    public static String urlEncode(String part) {\n        try {\n            return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * URL 解码, Encode默认为UTF-8.\n     */\n    public static String urlDecode(String part) {\n        try {\n            return URLDecoder.decode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/EncodesTest1.java",
		"test_prompt": "// EncodesTest1.java\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encodes}.\n* It contains ten unit test cases for the {@link Encodes#decodeHex(String)} method.\n*/\nclass EncodesTest1 {"
	},
	{
		"original_code": "// Encodes.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\n\n/**\n * 封装各种格式的编码解码工具类.\n *\n * 1.Commons-Codec的 hex/base64 编码\n * 2.自制的base62 编码\n * 3.Commons-Lang的xml/html escape\n * 4.JDK提供的URLEncoder\n *\n * @author calvin\n */\npublic class Encodes {\n\n    private static final String DEFAULT_URL_ENCODING = \"UTF-8\";\n\n    private static final char[] BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();\n\n    /**\n     * Hex编码.\n     */\n    public static String encodeHex(byte[] input) {\n        return Hex.encodeHexString(input);\n    }\n\n    /**\n     * Hex解码.\n     */\n    public static byte[] decodeHex(String input) {\n        try {\n            return Hex.decodeHex(input.toCharArray());\n        } catch (DecoderException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Base64编码.\n     */\n    public static String encodeBase64(byte[] input) {\n        return Base64.encodeBase64String(input);\n    }\n\n    /**\n     * Base64编码, URL安全(将Base64中的URL非法字符'+'和'/'转为'-'和'_', 见RFC3548).\n     */\n    public static String encodeUrlSafeBase64(byte[] input) {\n        return Base64.encodeBase64URLSafeString(input);\n    }\n\n    /**\n     * Base64解码.\n     */\n    public static byte[] decodeBase64(String input) {\n        return Base64.decodeBase64(input);\n    }\n\n    /**\n     * Base62编码。\n     */\n    public static String encodeBase62(byte[] input) {\n        char[] chars = new char[input.length];\n        for (int i = 0; i < input.length; i++) {\n            chars[i] = BASE62[(input[i] & 0xFF) % BASE62.length];\n        }\n        return new String(chars);\n    }\n\n    /**\n     * Html 转码.\n     */\n    public static String escapeHtml(String html) {\n        return StringEscapeUtils.escapeHtml4(html);\n    }\n\n    /**\n     * Html 解码.\n     */\n    public static String unescapeHtml(String htmlEscaped) {\n        return StringEscapeUtils.unescapeHtml4(htmlEscaped);\n    }\n\n    /**\n     * Xml 转码.\n     */\n    public static String escapeXml(String xml) {\n        return StringEscapeUtils.escapeXml(xml);\n    }\n\n    /**\n     * Xml 解码.\n     */\n    public static String unescapeXml(String xmlEscaped) {\n        return StringEscapeUtils.unescapeXml(xmlEscaped);\n    }\n\n    /**\n     * URL 编码, Encode默认为UTF-8.\n     */\n    public static String urlEncode(String part) {\n        try {\n            return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * URL 解码, Encode默认为UTF-8.\n     */\n    public static String urlDecode(String part) {\n        try {\n            return URLDecoder.decode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/EncodesTest2.java",
		"test_prompt": "// EncodesTest2.java\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encodes}.\n* It contains ten unit test cases for the {@link Encodes#encodeBase64(byte[])} method.\n*/\nclass EncodesTest2 {"
	},
	{
		"original_code": "// Encodes.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\n\n/**\n * 封装各种格式的编码解码工具类.\n *\n * 1.Commons-Codec的 hex/base64 编码\n * 2.自制的base62 编码\n * 3.Commons-Lang的xml/html escape\n * 4.JDK提供的URLEncoder\n *\n * @author calvin\n */\npublic class Encodes {\n\n    private static final String DEFAULT_URL_ENCODING = \"UTF-8\";\n\n    private static final char[] BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();\n\n    /**\n     * Hex编码.\n     */\n    public static String encodeHex(byte[] input) {\n        return Hex.encodeHexString(input);\n    }\n\n    /**\n     * Hex解码.\n     */\n    public static byte[] decodeHex(String input) {\n        try {\n            return Hex.decodeHex(input.toCharArray());\n        } catch (DecoderException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Base64编码.\n     */\n    public static String encodeBase64(byte[] input) {\n        return Base64.encodeBase64String(input);\n    }\n\n    /**\n     * Base64编码, URL安全(将Base64中的URL非法字符'+'和'/'转为'-'和'_', 见RFC3548).\n     */\n    public static String encodeUrlSafeBase64(byte[] input) {\n        return Base64.encodeBase64URLSafeString(input);\n    }\n\n    /**\n     * Base64解码.\n     */\n    public static byte[] decodeBase64(String input) {\n        return Base64.decodeBase64(input);\n    }\n\n    /**\n     * Base62编码。\n     */\n    public static String encodeBase62(byte[] input) {\n        char[] chars = new char[input.length];\n        for (int i = 0; i < input.length; i++) {\n            chars[i] = BASE62[(input[i] & 0xFF) % BASE62.length];\n        }\n        return new String(chars);\n    }\n\n    /**\n     * Html 转码.\n     */\n    public static String escapeHtml(String html) {\n        return StringEscapeUtils.escapeHtml4(html);\n    }\n\n    /**\n     * Html 解码.\n     */\n    public static String unescapeHtml(String htmlEscaped) {\n        return StringEscapeUtils.unescapeHtml4(htmlEscaped);\n    }\n\n    /**\n     * Xml 转码.\n     */\n    public static String escapeXml(String xml) {\n        return StringEscapeUtils.escapeXml(xml);\n    }\n\n    /**\n     * Xml 解码.\n     */\n    public static String unescapeXml(String xmlEscaped) {\n        return StringEscapeUtils.unescapeXml(xmlEscaped);\n    }\n\n    /**\n     * URL 编码, Encode默认为UTF-8.\n     */\n    public static String urlEncode(String part) {\n        try {\n            return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * URL 解码, Encode默认为UTF-8.\n     */\n    public static String urlDecode(String part) {\n        try {\n            return URLDecoder.decode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/EncodesTest3.java",
		"test_prompt": "// EncodesTest3.java\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encodes}.\n* It contains ten unit test cases for the {@link Encodes#encodeUrlSafeBase64(byte[])} method.\n*/\nclass EncodesTest3 {"
	},
	{
		"original_code": "// Encodes.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\n\n/**\n * 封装各种格式的编码解码工具类.\n *\n * 1.Commons-Codec的 hex/base64 编码\n * 2.自制的base62 编码\n * 3.Commons-Lang的xml/html escape\n * 4.JDK提供的URLEncoder\n *\n * @author calvin\n */\npublic class Encodes {\n\n    private static final String DEFAULT_URL_ENCODING = \"UTF-8\";\n\n    private static final char[] BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();\n\n    /**\n     * Hex编码.\n     */\n    public static String encodeHex(byte[] input) {\n        return Hex.encodeHexString(input);\n    }\n\n    /**\n     * Hex解码.\n     */\n    public static byte[] decodeHex(String input) {\n        try {\n            return Hex.decodeHex(input.toCharArray());\n        } catch (DecoderException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Base64编码.\n     */\n    public static String encodeBase64(byte[] input) {\n        return Base64.encodeBase64String(input);\n    }\n\n    /**\n     * Base64编码, URL安全(将Base64中的URL非法字符'+'和'/'转为'-'和'_', 见RFC3548).\n     */\n    public static String encodeUrlSafeBase64(byte[] input) {\n        return Base64.encodeBase64URLSafeString(input);\n    }\n\n    /**\n     * Base64解码.\n     */\n    public static byte[] decodeBase64(String input) {\n        return Base64.decodeBase64(input);\n    }\n\n    /**\n     * Base62编码。\n     */\n    public static String encodeBase62(byte[] input) {\n        char[] chars = new char[input.length];\n        for (int i = 0; i < input.length; i++) {\n            chars[i] = BASE62[(input[i] & 0xFF) % BASE62.length];\n        }\n        return new String(chars);\n    }\n\n    /**\n     * Html 转码.\n     */\n    public static String escapeHtml(String html) {\n        return StringEscapeUtils.escapeHtml4(html);\n    }\n\n    /**\n     * Html 解码.\n     */\n    public static String unescapeHtml(String htmlEscaped) {\n        return StringEscapeUtils.unescapeHtml4(htmlEscaped);\n    }\n\n    /**\n     * Xml 转码.\n     */\n    public static String escapeXml(String xml) {\n        return StringEscapeUtils.escapeXml(xml);\n    }\n\n    /**\n     * Xml 解码.\n     */\n    public static String unescapeXml(String xmlEscaped) {\n        return StringEscapeUtils.unescapeXml(xmlEscaped);\n    }\n\n    /**\n     * URL 编码, Encode默认为UTF-8.\n     */\n    public static String urlEncode(String part) {\n        try {\n            return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * URL 解码, Encode默认为UTF-8.\n     */\n    public static String urlDecode(String part) {\n        try {\n            return URLDecoder.decode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/EncodesTest4.java",
		"test_prompt": "// EncodesTest4.java\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encodes}.\n* It contains ten unit test cases for the {@link Encodes#decodeBase64(String)} method.\n*/\nclass EncodesTest4 {"
	},
	{
		"original_code": "// Encodes.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\n\n/**\n * 封装各种格式的编码解码工具类.\n *\n * 1.Commons-Codec的 hex/base64 编码\n * 2.自制的base62 编码\n * 3.Commons-Lang的xml/html escape\n * 4.JDK提供的URLEncoder\n *\n * @author calvin\n */\npublic class Encodes {\n\n    private static final String DEFAULT_URL_ENCODING = \"UTF-8\";\n\n    private static final char[] BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();\n\n    /**\n     * Hex编码.\n     */\n    public static String encodeHex(byte[] input) {\n        return Hex.encodeHexString(input);\n    }\n\n    /**\n     * Hex解码.\n     */\n    public static byte[] decodeHex(String input) {\n        try {\n            return Hex.decodeHex(input.toCharArray());\n        } catch (DecoderException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Base64编码.\n     */\n    public static String encodeBase64(byte[] input) {\n        return Base64.encodeBase64String(input);\n    }\n\n    /**\n     * Base64编码, URL安全(将Base64中的URL非法字符'+'和'/'转为'-'和'_', 见RFC3548).\n     */\n    public static String encodeUrlSafeBase64(byte[] input) {\n        return Base64.encodeBase64URLSafeString(input);\n    }\n\n    /**\n     * Base64解码.\n     */\n    public static byte[] decodeBase64(String input) {\n        return Base64.decodeBase64(input);\n    }\n\n    /**\n     * Base62编码。\n     */\n    public static String encodeBase62(byte[] input) {\n        char[] chars = new char[input.length];\n        for (int i = 0; i < input.length; i++) {\n            chars[i] = BASE62[(input[i] & 0xFF) % BASE62.length];\n        }\n        return new String(chars);\n    }\n\n    /**\n     * Html 转码.\n     */\n    public static String escapeHtml(String html) {\n        return StringEscapeUtils.escapeHtml4(html);\n    }\n\n    /**\n     * Html 解码.\n     */\n    public static String unescapeHtml(String htmlEscaped) {\n        return StringEscapeUtils.unescapeHtml4(htmlEscaped);\n    }\n\n    /**\n     * Xml 转码.\n     */\n    public static String escapeXml(String xml) {\n        return StringEscapeUtils.escapeXml(xml);\n    }\n\n    /**\n     * Xml 解码.\n     */\n    public static String unescapeXml(String xmlEscaped) {\n        return StringEscapeUtils.unescapeXml(xmlEscaped);\n    }\n\n    /**\n     * URL 编码, Encode默认为UTF-8.\n     */\n    public static String urlEncode(String part) {\n        try {\n            return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * URL 解码, Encode默认为UTF-8.\n     */\n    public static String urlDecode(String part) {\n        try {\n            return URLDecoder.decode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/EncodesTest5.java",
		"test_prompt": "// EncodesTest5.java\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encodes}.\n* It contains ten unit test cases for the {@link Encodes#encodeBase62(byte[])} method.\n*/\nclass EncodesTest5 {"
	},
	{
		"original_code": "// Encodes.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\n\n/**\n * 封装各种格式的编码解码工具类.\n *\n * 1.Commons-Codec的 hex/base64 编码\n * 2.自制的base62 编码\n * 3.Commons-Lang的xml/html escape\n * 4.JDK提供的URLEncoder\n *\n * @author calvin\n */\npublic class Encodes {\n\n    private static final String DEFAULT_URL_ENCODING = \"UTF-8\";\n\n    private static final char[] BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();\n\n    /**\n     * Hex编码.\n     */\n    public static String encodeHex(byte[] input) {\n        return Hex.encodeHexString(input);\n    }\n\n    /**\n     * Hex解码.\n     */\n    public static byte[] decodeHex(String input) {\n        try {\n            return Hex.decodeHex(input.toCharArray());\n        } catch (DecoderException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Base64编码.\n     */\n    public static String encodeBase64(byte[] input) {\n        return Base64.encodeBase64String(input);\n    }\n\n    /**\n     * Base64编码, URL安全(将Base64中的URL非法字符'+'和'/'转为'-'和'_', 见RFC3548).\n     */\n    public static String encodeUrlSafeBase64(byte[] input) {\n        return Base64.encodeBase64URLSafeString(input);\n    }\n\n    /**\n     * Base64解码.\n     */\n    public static byte[] decodeBase64(String input) {\n        return Base64.decodeBase64(input);\n    }\n\n    /**\n     * Base62编码。\n     */\n    public static String encodeBase62(byte[] input) {\n        char[] chars = new char[input.length];\n        for (int i = 0; i < input.length; i++) {\n            chars[i] = BASE62[(input[i] & 0xFF) % BASE62.length];\n        }\n        return new String(chars);\n    }\n\n    /**\n     * Html 转码.\n     */\n    public static String escapeHtml(String html) {\n        return StringEscapeUtils.escapeHtml4(html);\n    }\n\n    /**\n     * Html 解码.\n     */\n    public static String unescapeHtml(String htmlEscaped) {\n        return StringEscapeUtils.unescapeHtml4(htmlEscaped);\n    }\n\n    /**\n     * Xml 转码.\n     */\n    public static String escapeXml(String xml) {\n        return StringEscapeUtils.escapeXml(xml);\n    }\n\n    /**\n     * Xml 解码.\n     */\n    public static String unescapeXml(String xmlEscaped) {\n        return StringEscapeUtils.unescapeXml(xmlEscaped);\n    }\n\n    /**\n     * URL 编码, Encode默认为UTF-8.\n     */\n    public static String urlEncode(String part) {\n        try {\n            return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * URL 解码, Encode默认为UTF-8.\n     */\n    public static String urlDecode(String part) {\n        try {\n            return URLDecoder.decode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/EncodesTest6.java",
		"test_prompt": "// EncodesTest6.java\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encodes}.\n* It contains ten unit test cases for the {@link Encodes#escapeHtml(String)} method.\n*/\nclass EncodesTest6 {"
	},
	{
		"original_code": "// Encodes.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\n\n/**\n * 封装各种格式的编码解码工具类.\n *\n * 1.Commons-Codec的 hex/base64 编码\n * 2.自制的base62 编码\n * 3.Commons-Lang的xml/html escape\n * 4.JDK提供的URLEncoder\n *\n * @author calvin\n */\npublic class Encodes {\n\n    private static final String DEFAULT_URL_ENCODING = \"UTF-8\";\n\n    private static final char[] BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();\n\n    /**\n     * Hex编码.\n     */\n    public static String encodeHex(byte[] input) {\n        return Hex.encodeHexString(input);\n    }\n\n    /**\n     * Hex解码.\n     */\n    public static byte[] decodeHex(String input) {\n        try {\n            return Hex.decodeHex(input.toCharArray());\n        } catch (DecoderException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Base64编码.\n     */\n    public static String encodeBase64(byte[] input) {\n        return Base64.encodeBase64String(input);\n    }\n\n    /**\n     * Base64编码, URL安全(将Base64中的URL非法字符'+'和'/'转为'-'和'_', 见RFC3548).\n     */\n    public static String encodeUrlSafeBase64(byte[] input) {\n        return Base64.encodeBase64URLSafeString(input);\n    }\n\n    /**\n     * Base64解码.\n     */\n    public static byte[] decodeBase64(String input) {\n        return Base64.decodeBase64(input);\n    }\n\n    /**\n     * Base62编码。\n     */\n    public static String encodeBase62(byte[] input) {\n        char[] chars = new char[input.length];\n        for (int i = 0; i < input.length; i++) {\n            chars[i] = BASE62[(input[i] & 0xFF) % BASE62.length];\n        }\n        return new String(chars);\n    }\n\n    /**\n     * Html 转码.\n     */\n    public static String escapeHtml(String html) {\n        return StringEscapeUtils.escapeHtml4(html);\n    }\n\n    /**\n     * Html 解码.\n     */\n    public static String unescapeHtml(String htmlEscaped) {\n        return StringEscapeUtils.unescapeHtml4(htmlEscaped);\n    }\n\n    /**\n     * Xml 转码.\n     */\n    public static String escapeXml(String xml) {\n        return StringEscapeUtils.escapeXml(xml);\n    }\n\n    /**\n     * Xml 解码.\n     */\n    public static String unescapeXml(String xmlEscaped) {\n        return StringEscapeUtils.unescapeXml(xmlEscaped);\n    }\n\n    /**\n     * URL 编码, Encode默认为UTF-8.\n     */\n    public static String urlEncode(String part) {\n        try {\n            return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * URL 解码, Encode默认为UTF-8.\n     */\n    public static String urlDecode(String part) {\n        try {\n            return URLDecoder.decode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/EncodesTest7.java",
		"test_prompt": "// EncodesTest7.java\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encodes}.\n* It contains ten unit test cases for the {@link Encodes#unescapeHtml(String)} method.\n*/\nclass EncodesTest7 {"
	},
	{
		"original_code": "// Encodes.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\n\n/**\n * 封装各种格式的编码解码工具类.\n *\n * 1.Commons-Codec的 hex/base64 编码\n * 2.自制的base62 编码\n * 3.Commons-Lang的xml/html escape\n * 4.JDK提供的URLEncoder\n *\n * @author calvin\n */\npublic class Encodes {\n\n    private static final String DEFAULT_URL_ENCODING = \"UTF-8\";\n\n    private static final char[] BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();\n\n    /**\n     * Hex编码.\n     */\n    public static String encodeHex(byte[] input) {\n        return Hex.encodeHexString(input);\n    }\n\n    /**\n     * Hex解码.\n     */\n    public static byte[] decodeHex(String input) {\n        try {\n            return Hex.decodeHex(input.toCharArray());\n        } catch (DecoderException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Base64编码.\n     */\n    public static String encodeBase64(byte[] input) {\n        return Base64.encodeBase64String(input);\n    }\n\n    /**\n     * Base64编码, URL安全(将Base64中的URL非法字符'+'和'/'转为'-'和'_', 见RFC3548).\n     */\n    public static String encodeUrlSafeBase64(byte[] input) {\n        return Base64.encodeBase64URLSafeString(input);\n    }\n\n    /**\n     * Base64解码.\n     */\n    public static byte[] decodeBase64(String input) {\n        return Base64.decodeBase64(input);\n    }\n\n    /**\n     * Base62编码。\n     */\n    public static String encodeBase62(byte[] input) {\n        char[] chars = new char[input.length];\n        for (int i = 0; i < input.length; i++) {\n            chars[i] = BASE62[(input[i] & 0xFF) % BASE62.length];\n        }\n        return new String(chars);\n    }\n\n    /**\n     * Html 转码.\n     */\n    public static String escapeHtml(String html) {\n        return StringEscapeUtils.escapeHtml4(html);\n    }\n\n    /**\n     * Html 解码.\n     */\n    public static String unescapeHtml(String htmlEscaped) {\n        return StringEscapeUtils.unescapeHtml4(htmlEscaped);\n    }\n\n    /**\n     * Xml 转码.\n     */\n    public static String escapeXml(String xml) {\n        return StringEscapeUtils.escapeXml(xml);\n    }\n\n    /**\n     * Xml 解码.\n     */\n    public static String unescapeXml(String xmlEscaped) {\n        return StringEscapeUtils.unescapeXml(xmlEscaped);\n    }\n\n    /**\n     * URL 编码, Encode默认为UTF-8.\n     */\n    public static String urlEncode(String part) {\n        try {\n            return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * URL 解码, Encode默认为UTF-8.\n     */\n    public static String urlDecode(String part) {\n        try {\n            return URLDecoder.decode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/EncodesTest8.java",
		"test_prompt": "// EncodesTest8.java\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encodes}.\n* It contains ten unit test cases for the {@link Encodes#escapeXml(String)} method.\n*/\nclass EncodesTest8 {"
	},
	{
		"original_code": "// Encodes.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\n\n/**\n * 封装各种格式的编码解码工具类.\n *\n * 1.Commons-Codec的 hex/base64 编码\n * 2.自制的base62 编码\n * 3.Commons-Lang的xml/html escape\n * 4.JDK提供的URLEncoder\n *\n * @author calvin\n */\npublic class Encodes {\n\n    private static final String DEFAULT_URL_ENCODING = \"UTF-8\";\n\n    private static final char[] BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();\n\n    /**\n     * Hex编码.\n     */\n    public static String encodeHex(byte[] input) {\n        return Hex.encodeHexString(input);\n    }\n\n    /**\n     * Hex解码.\n     */\n    public static byte[] decodeHex(String input) {\n        try {\n            return Hex.decodeHex(input.toCharArray());\n        } catch (DecoderException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Base64编码.\n     */\n    public static String encodeBase64(byte[] input) {\n        return Base64.encodeBase64String(input);\n    }\n\n    /**\n     * Base64编码, URL安全(将Base64中的URL非法字符'+'和'/'转为'-'和'_', 见RFC3548).\n     */\n    public static String encodeUrlSafeBase64(byte[] input) {\n        return Base64.encodeBase64URLSafeString(input);\n    }\n\n    /**\n     * Base64解码.\n     */\n    public static byte[] decodeBase64(String input) {\n        return Base64.decodeBase64(input);\n    }\n\n    /**\n     * Base62编码。\n     */\n    public static String encodeBase62(byte[] input) {\n        char[] chars = new char[input.length];\n        for (int i = 0; i < input.length; i++) {\n            chars[i] = BASE62[(input[i] & 0xFF) % BASE62.length];\n        }\n        return new String(chars);\n    }\n\n    /**\n     * Html 转码.\n     */\n    public static String escapeHtml(String html) {\n        return StringEscapeUtils.escapeHtml4(html);\n    }\n\n    /**\n     * Html 解码.\n     */\n    public static String unescapeHtml(String htmlEscaped) {\n        return StringEscapeUtils.unescapeHtml4(htmlEscaped);\n    }\n\n    /**\n     * Xml 转码.\n     */\n    public static String escapeXml(String xml) {\n        return StringEscapeUtils.escapeXml(xml);\n    }\n\n    /**\n     * Xml 解码.\n     */\n    public static String unescapeXml(String xmlEscaped) {\n        return StringEscapeUtils.unescapeXml(xmlEscaped);\n    }\n\n    /**\n     * URL 编码, Encode默认为UTF-8.\n     */\n    public static String urlEncode(String part) {\n        try {\n            return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * URL 解码, Encode默认为UTF-8.\n     */\n    public static String urlDecode(String part) {\n        try {\n            return URLDecoder.decode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/EncodesTest9.java",
		"test_prompt": "// EncodesTest9.java\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encodes}.\n* It contains ten unit test cases for the {@link Encodes#unescapeXml(String)} method.\n*/\nclass EncodesTest9 {"
	},
	{
		"original_code": "// Encodes.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\n\n/**\n * 封装各种格式的编码解码工具类.\n *\n * 1.Commons-Codec的 hex/base64 编码\n * 2.自制的base62 编码\n * 3.Commons-Lang的xml/html escape\n * 4.JDK提供的URLEncoder\n *\n * @author calvin\n */\npublic class Encodes {\n\n    private static final String DEFAULT_URL_ENCODING = \"UTF-8\";\n\n    private static final char[] BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();\n\n    /**\n     * Hex编码.\n     */\n    public static String encodeHex(byte[] input) {\n        return Hex.encodeHexString(input);\n    }\n\n    /**\n     * Hex解码.\n     */\n    public static byte[] decodeHex(String input) {\n        try {\n            return Hex.decodeHex(input.toCharArray());\n        } catch (DecoderException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Base64编码.\n     */\n    public static String encodeBase64(byte[] input) {\n        return Base64.encodeBase64String(input);\n    }\n\n    /**\n     * Base64编码, URL安全(将Base64中的URL非法字符'+'和'/'转为'-'和'_', 见RFC3548).\n     */\n    public static String encodeUrlSafeBase64(byte[] input) {\n        return Base64.encodeBase64URLSafeString(input);\n    }\n\n    /**\n     * Base64解码.\n     */\n    public static byte[] decodeBase64(String input) {\n        return Base64.decodeBase64(input);\n    }\n\n    /**\n     * Base62编码。\n     */\n    public static String encodeBase62(byte[] input) {\n        char[] chars = new char[input.length];\n        for (int i = 0; i < input.length; i++) {\n            chars[i] = BASE62[(input[i] & 0xFF) % BASE62.length];\n        }\n        return new String(chars);\n    }\n\n    /**\n     * Html 转码.\n     */\n    public static String escapeHtml(String html) {\n        return StringEscapeUtils.escapeHtml4(html);\n    }\n\n    /**\n     * Html 解码.\n     */\n    public static String unescapeHtml(String htmlEscaped) {\n        return StringEscapeUtils.unescapeHtml4(htmlEscaped);\n    }\n\n    /**\n     * Xml 转码.\n     */\n    public static String escapeXml(String xml) {\n        return StringEscapeUtils.escapeXml(xml);\n    }\n\n    /**\n     * Xml 解码.\n     */\n    public static String unescapeXml(String xmlEscaped) {\n        return StringEscapeUtils.unescapeXml(xmlEscaped);\n    }\n\n    /**\n     * URL 编码, Encode默认为UTF-8.\n     */\n    public static String urlEncode(String part) {\n        try {\n            return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * URL 解码, Encode默认为UTF-8.\n     */\n    public static String urlDecode(String part) {\n        try {\n            return URLDecoder.decode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/EncodesTest10.java",
		"test_prompt": "// EncodesTest10.java\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encodes}.\n* It contains ten unit test cases for the {@link Encodes#urlEncode(String)} method.\n*/\nclass EncodesTest10 {"
	},
	{
		"original_code": "// Encodes.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\n\n/**\n * 封装各种格式的编码解码工具类.\n *\n * 1.Commons-Codec的 hex/base64 编码\n * 2.自制的base62 编码\n * 3.Commons-Lang的xml/html escape\n * 4.JDK提供的URLEncoder\n *\n * @author calvin\n */\npublic class Encodes {\n\n    private static final String DEFAULT_URL_ENCODING = \"UTF-8\";\n\n    private static final char[] BASE62 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();\n\n    /**\n     * Hex编码.\n     */\n    public static String encodeHex(byte[] input) {\n        return Hex.encodeHexString(input);\n    }\n\n    /**\n     * Hex解码.\n     */\n    public static byte[] decodeHex(String input) {\n        try {\n            return Hex.decodeHex(input.toCharArray());\n        } catch (DecoderException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * Base64编码.\n     */\n    public static String encodeBase64(byte[] input) {\n        return Base64.encodeBase64String(input);\n    }\n\n    /**\n     * Base64编码, URL安全(将Base64中的URL非法字符'+'和'/'转为'-'和'_', 见RFC3548).\n     */\n    public static String encodeUrlSafeBase64(byte[] input) {\n        return Base64.encodeBase64URLSafeString(input);\n    }\n\n    /**\n     * Base64解码.\n     */\n    public static byte[] decodeBase64(String input) {\n        return Base64.decodeBase64(input);\n    }\n\n    /**\n     * Base62编码。\n     */\n    public static String encodeBase62(byte[] input) {\n        char[] chars = new char[input.length];\n        for (int i = 0; i < input.length; i++) {\n            chars[i] = BASE62[(input[i] & 0xFF) % BASE62.length];\n        }\n        return new String(chars);\n    }\n\n    /**\n     * Html 转码.\n     */\n    public static String escapeHtml(String html) {\n        return StringEscapeUtils.escapeHtml4(html);\n    }\n\n    /**\n     * Html 解码.\n     */\n    public static String unescapeHtml(String htmlEscaped) {\n        return StringEscapeUtils.unescapeHtml4(htmlEscaped);\n    }\n\n    /**\n     * Xml 转码.\n     */\n    public static String escapeXml(String xml) {\n        return StringEscapeUtils.escapeXml(xml);\n    }\n\n    /**\n     * Xml 解码.\n     */\n    public static String unescapeXml(String xmlEscaped) {\n        return StringEscapeUtils.unescapeXml(xmlEscaped);\n    }\n\n    /**\n     * URL 编码, Encode默认为UTF-8.\n     */\n    public static String urlEncode(String part) {\n        try {\n            return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * URL 解码, Encode默认为UTF-8.\n     */\n    public static String urlDecode(String part) {\n        try {\n            return URLDecoder.decode(part, DEFAULT_URL_ENCODING);\n        } catch (UnsupportedEncodingException e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/utils/EncodesTest11.java",
		"test_prompt": "// EncodesTest11.java\npackage org.springside.modules.utils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport org.apache.commons.codec.DecoderException;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.codec.binary.Hex;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encodes}.\n* It contains ten unit test cases for the {@link Encodes#urlDecode(String)} method.\n*/\nclass EncodesTest11 {"
	},
	{
		"original_code": "// SearchFilter.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.persistence;\n\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport org.apache.commons.lang3.StringUtils;\nimport com.google.common.collect.Maps;\n\npublic class SearchFilter {\n\n    public enum Operator {\n\n        EQ,\n        LIKE,\n        GT,\n        LT,\n        GTE,\n        LTE\n    }\n\n    public String fieldName;\n\n    public Object value;\n\n    public Operator operator;\n\n    public SearchFilter(String fieldName, Operator operator, Object value) {\n        this.fieldName = fieldName;\n        this.value = value;\n        this.operator = operator;\n    }\n\n    /**\n     * searchParams中key的格式为OPERATOR_FIELDNAME\n     */\n    public static Map<String, SearchFilter> parse(Map<String, Object> searchParams) {\n        Map<String, SearchFilter> filters = Maps.newHashMap();\n        for (Entry<String, Object> entry : searchParams.entrySet()) {\n            // 过滤掉空值\n            String key = entry.getKey();\n            Object value = entry.getValue();\n            if (StringUtils.isBlank((String) value)) {\n                continue;\n            }\n            // 拆分operator与filedAttribute\n            String[] names = StringUtils.split(key, \"_\");\n            if (names.length != 2) {\n                throw new IllegalArgumentException(key + \" is not a valid search filter name\");\n            }\n            String filedName = names[1];\n            Operator operator = Operator.valueOf(names[0]);\n            // 创建searchFilter\n            SearchFilter filter = new SearchFilter(filedName, operator, value);\n            filters.put(key, filter);\n        }\n        return filters;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/persistence/SearchFilterTest.java",
		"test_prompt": "// SearchFilterTest.java\npackage org.springside.modules.persistence;\n\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport org.apache.commons.lang3.StringUtils;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SearchFilter}.\n* It contains ten unit test cases for the {@link SearchFilter#parse(Map)} method.\n*/\nclass SearchFilterTest {"
	},
	{
		"original_code": "// DynamicSpecifications.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.persistence;\n\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Path;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springside.modules.utils.Collections3;\nimport com.google.common.collect.Lists;\n\npublic class DynamicSpecifications {\n\n    public static <T> Specification<T> bySearchFilter(final Collection<SearchFilter> filters, final Class<T> entityClazz) {\n        return new Specification<T>() {\n\n            @Override\n            public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder builder) {\n                if (Collections3.isNotEmpty(filters)) {\n                    List<Predicate> predicates = Lists.newArrayList();\n                    for (SearchFilter filter : filters) {\n                        // nested path translate, 如Task的名为\"user.name\"的filedName, 转换为Task.user.name属性\n                        String[] names = StringUtils.split(filter.fieldName, \".\");\n                        Path expression = root.get(names[0]);\n                        for (int i = 1; i < names.length; i++) {\n                            expression = expression.get(names[i]);\n                        }\n                        // logic operator\n                        switch(filter.operator) {\n                            case EQ:\n                                predicates.add(builder.equal(expression, filter.value));\n                                break;\n                            case LIKE:\n                                predicates.add(builder.like(expression, \"%\" + filter.value + \"%\"));\n                                break;\n                            case GT:\n                                predicates.add(builder.greaterThan(expression, (Comparable) filter.value));\n                                break;\n                            case LT:\n                                predicates.add(builder.lessThan(expression, (Comparable) filter.value));\n                                break;\n                            case GTE:\n                                predicates.add(builder.greaterThanOrEqualTo(expression, (Comparable) filter.value));\n                                break;\n                            case LTE:\n                                predicates.add(builder.lessThanOrEqualTo(expression, (Comparable) filter.value));\n                                break;\n                        }\n                    }\n                    // 将所有条件用 and 联合起来\n                    if (!predicates.isEmpty()) {\n                        return builder.and(predicates.toArray(new Predicate[predicates.size()]));\n                    }\n                }\n                return builder.conjunction();\n            }\n        };\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/persistence/DynamicSpecificationsTest.java",
		"test_prompt": "// DynamicSpecificationsTest.java\npackage org.springside.modules.persistence;\n\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Path;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Root;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springside.modules.utils.Collections3;\nimport com.google.common.collect.Lists;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DynamicSpecifications}.\n* It contains ten unit test cases for the {@link DynamicSpecifications#bySearchFilter(Collection, Class)} method.\n*/\nclass DynamicSpecificationsTest {"
	},
	{
		"original_code": "// Hibernates.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.persistence;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.apache.commons.lang3.StringUtils;\nimport org.hibernate.Hibernate;\nimport org.hibernate.dialect.H2Dialect;\nimport org.hibernate.dialect.MySQL5InnoDBDialect;\nimport org.hibernate.dialect.Oracle10gDialect;\nimport org.hibernate.dialect.PostgreSQL82Dialect;\nimport org.hibernate.dialect.SQLServer2008Dialect;\n\npublic class Hibernates {\n\n    /**\n     * Initialize the lazy property value.\n     *\n     * e.g. Hibernates.initLazyProperty(user.getGroups());\n     */\n    public static void initLazyProperty(Object proxyedPropertyValue) {\n        Hibernate.initialize(proxyedPropertyValue);\n    }\n\n    /**\n     * 从DataSoure中取出connection, 根据connection的metadata中的jdbcUrl判断Dialect类型.\n     * 仅支持Oracle, H2, MySql, PostgreSql, SQLServer，如需更多数据库类型，请仿照此类自行编写。\n     */\n    public static String getDialect(DataSource dataSource) {\n        String jdbcUrl = getJdbcUrlFromDataSource(dataSource);\n        // 根据jdbc url判断dialect\n        if (StringUtils.contains(jdbcUrl, \":h2:\")) {\n            return H2Dialect.class.getName();\n        } else if (StringUtils.contains(jdbcUrl, \":mysql:\")) {\n            return MySQL5InnoDBDialect.class.getName();\n        } else if (StringUtils.contains(jdbcUrl, \":oracle:\")) {\n            return Oracle10gDialect.class.getName();\n        } else if (StringUtils.contains(jdbcUrl, \":postgresql:\")) {\n            return PostgreSQL82Dialect.class.getName();\n        } else if (StringUtils.contains(jdbcUrl, \":sqlserver:\")) {\n            return SQLServer2008Dialect.class.getName();\n        } else {\n            throw new IllegalArgumentException(\"Unknown Database of \" + jdbcUrl);\n        }\n    }\n\n    private static String getJdbcUrlFromDataSource(DataSource dataSource) {\n        Connection connection = null;\n        try {\n            connection = dataSource.getConnection();\n            if (connection == null) {\n                throw new IllegalStateException(\"Connection returned by DataSource [\" + dataSource + \"] was null\");\n            }\n            return connection.getMetaData().getURL();\n        } catch (SQLException e) {\n            throw new RuntimeException(\"Could not get database url\", e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                }\n            }\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/core/src/main/java/org/springside/modules/persistence/HibernatesTest.java",
		"test_prompt": "// HibernatesTest.java\npackage org.springside.modules.persistence;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport javax.sql.DataSource;\nimport org.apache.commons.lang3.StringUtils;\nimport org.hibernate.Hibernate;\nimport org.hibernate.dialect.H2Dialect;\nimport org.hibernate.dialect.MySQL5InnoDBDialect;\nimport org.hibernate.dialect.Oracle10gDialect;\nimport org.hibernate.dialect.PostgreSQL82Dialect;\nimport org.hibernate.dialect.SQLServer2008Dialect;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Hibernates}.\n* It contains ten unit test cases for the {@link Hibernates#getDialect(DataSource)} method.\n*/\nclass HibernatesTest {"
	},
	{
		"original_code": "// FreeMarkers.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.tools;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Map;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springside.modules.utils.Exceptions;\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\npublic class FreeMarkers {\n\n    /**\n     * 渲染模板字符串。\n     */\n    public static String renderString(String templateString, Map<String, ?> model) {\n        try {\n            StringWriter result = new StringWriter();\n            Template t = new Template(\"default\", new StringReader(templateString), new Configuration());\n            t.process(model, result);\n            return result.toString();\n        } catch (Exception e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 渲染Template文件.\n     */\n    public static String renderTemplate(Template template, Object model) {\n        try {\n            StringWriter result = new StringWriter();\n            template.process(model, result);\n            return result.toString();\n        } catch (Exception e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建默认配置，设定模板目录.\n     */\n    public static Configuration buildConfiguration(String directory) throws IOException {\n        Configuration cfg = new Configuration();\n        Resource path = new DefaultResourceLoader().getResource(directory);\n        cfg.setDirectoryForTemplateLoading(path.getFile());\n        return cfg;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/tools/FreeMarkersTest0.java",
		"test_prompt": "// FreeMarkersTest0.java\npackage org.springside.modules.tools;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Map;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springside.modules.utils.Exceptions;\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FreeMarkers}.\n* It contains ten unit test cases for the {@link FreeMarkers#renderString(String, Map)} method.\n*/\nclass FreeMarkersTest0 {"
	},
	{
		"original_code": "// FreeMarkers.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.tools;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Map;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springside.modules.utils.Exceptions;\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\npublic class FreeMarkers {\n\n    /**\n     * 渲染模板字符串。\n     */\n    public static String renderString(String templateString, Map<String, ?> model) {\n        try {\n            StringWriter result = new StringWriter();\n            Template t = new Template(\"default\", new StringReader(templateString), new Configuration());\n            t.process(model, result);\n            return result.toString();\n        } catch (Exception e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 渲染Template文件.\n     */\n    public static String renderTemplate(Template template, Object model) {\n        try {\n            StringWriter result = new StringWriter();\n            template.process(model, result);\n            return result.toString();\n        } catch (Exception e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建默认配置，设定模板目录.\n     */\n    public static Configuration buildConfiguration(String directory) throws IOException {\n        Configuration cfg = new Configuration();\n        Resource path = new DefaultResourceLoader().getResource(directory);\n        cfg.setDirectoryForTemplateLoading(path.getFile());\n        return cfg;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/tools/FreeMarkersTest1.java",
		"test_prompt": "// FreeMarkersTest1.java\npackage org.springside.modules.tools;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Map;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springside.modules.utils.Exceptions;\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FreeMarkers}.\n* It contains ten unit test cases for the {@link FreeMarkers#renderTemplate(Template, Object)} method.\n*/\nclass FreeMarkersTest1 {"
	},
	{
		"original_code": "// FreeMarkers.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.tools;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Map;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springside.modules.utils.Exceptions;\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\npublic class FreeMarkers {\n\n    /**\n     * 渲染模板字符串。\n     */\n    public static String renderString(String templateString, Map<String, ?> model) {\n        try {\n            StringWriter result = new StringWriter();\n            Template t = new Template(\"default\", new StringReader(templateString), new Configuration());\n            t.process(model, result);\n            return result.toString();\n        } catch (Exception e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 渲染Template文件.\n     */\n    public static String renderTemplate(Template template, Object model) {\n        try {\n            StringWriter result = new StringWriter();\n            template.process(model, result);\n            return result.toString();\n        } catch (Exception e) {\n            throw Exceptions.unchecked(e);\n        }\n    }\n\n    /**\n     * 创建默认配置，设定模板目录.\n     */\n    public static Configuration buildConfiguration(String directory) throws IOException {\n        Configuration cfg = new Configuration();\n        Resource path = new DefaultResourceLoader().getResource(directory);\n        cfg.setDirectoryForTemplateLoading(path.getFile());\n        return cfg;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/tools/FreeMarkersTest2.java",
		"test_prompt": "// FreeMarkersTest2.java\npackage org.springside.modules.tools;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.Map;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springside.modules.utils.Exceptions;\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FreeMarkers}.\n* It contains ten unit test cases for the {@link FreeMarkers#buildConfiguration(String)} method.\n*/\nclass FreeMarkersTest2 {"
	},
	{
		"original_code": "// SpyMemcachedClient.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.cache.memcached;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.spy.memcached.MemcachedClient;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\n\n/**\n * 对SpyMemcached Client的二次封装,提供常用的Get/GetBulk/Set/Delete/Incr/Decr函数的同步与异步操作封装.\n *\n * 未提供封装的函数可直接调用getClient()取出Spy的原版MemcachedClient来使用.\n *\n * @author calvin\n */\npublic class SpyMemcachedClient implements DisposableBean {\n\n    private static Logger logger = LoggerFactory.getLogger(SpyMemcachedClient.class);\n\n    private MemcachedClient memcachedClient;\n\n    private long shutdownTimeout = 2500;\n\n    private long updateTimeout = 2500;\n\n    /**\n     * Get方法, 转换结果类型并屏蔽异常, 仅返回Null.\n     */\n    public <T> T get(String key) {\n        try {\n            return (T) memcachedClient.get(key);\n        } catch (RuntimeException e) {\n            handleException(e, key);\n            return null;\n        }\n    }\n\n    /**\n     * GetBulk方法, 转换结果类型并屏蔽异常.\n     */\n    public <T> Map<String, T> getBulk(Collection<String> keys) {\n        try {\n            return (Map<String, T>) memcachedClient.getBulk(keys);\n        } catch (RuntimeException e) {\n            handleException(e, StringUtils.join(keys, \",\"));\n            return null;\n        }\n    }\n\n    /**\n     * 异步Set方法, 不考虑执行结果.\n     */\n    public void set(String key, int expiredTime, Object value) {\n        memcachedClient.set(key, expiredTime, value);\n    }\n\n    /**\n     * 安全的Set方法, 保证在updateTimeout秒内返回执行结果, 否则返回false并取消操作.\n     */\n    public boolean safeSet(String key, int expiration, Object value) {\n        Future<Boolean> future = memcachedClient.set(key, expiration, value);\n        try {\n            return future.get(updateTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.cancel(false);\n        }\n        return false;\n    }\n\n    /**\n     * 异步 Delete方法, 不考虑执行结果.\n     */\n    public void delete(String key) {\n        memcachedClient.delete(key);\n    }\n\n    /**\n     * 安全的Delete方法, 保证在updateTimeout秒内返回执行结果, 否则返回false并取消操作.\n     */\n    public boolean safeDelete(String key) {\n        Future<Boolean> future = memcachedClient.delete(key);\n        try {\n            return future.get(updateTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.cancel(false);\n        }\n        return false;\n    }\n\n    /**\n     * Incr方法.\n     */\n    public long incr(String key, int by, long defaultValue) {\n        return memcachedClient.incr(key, by, defaultValue);\n    }\n\n    /**\n     * Decr方法.\n     */\n    public long decr(String key, int by, long defaultValue) {\n        return memcachedClient.decr(key, by, defaultValue);\n    }\n\n    /**\n     * 异步Incr方法, 不支持默认值, 若key不存在返回-1.\n     */\n    public Future<Long> asyncIncr(String key, int by) {\n        return memcachedClient.asyncIncr(key, by);\n    }\n\n    /**\n     * 异步Decr方法, 不支持默认值, 若key不存在返回-1.\n     */\n    public Future<Long> asyncDecr(String key, int by) {\n        return memcachedClient.asyncDecr(key, by);\n    }\n\n    private void handleException(Exception e, String key) {\n        logger.warn(\"spymemcached client receive an exception with key:\" + key, e);\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        if (memcachedClient != null) {\n            memcachedClient.shutdown(shutdownTimeout, TimeUnit.MILLISECONDS);\n        }\n    }\n\n    public MemcachedClient getMemcachedClient() {\n        return memcachedClient;\n    }\n\n    public void setMemcachedClient(MemcachedClient memcachedClient) {\n        this.memcachedClient = memcachedClient;\n    }\n\n    public void setUpdateTimeout(long updateTimeout) {\n        this.updateTimeout = updateTimeout;\n    }\n\n    public void setShutdownTimeout(long shutdownTimeout) {\n        this.shutdownTimeout = shutdownTimeout;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/cache/memcached/SpyMemcachedClientTest0.java",
		"test_prompt": "// SpyMemcachedClientTest0.java\npackage org.springside.modules.cache.memcached;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.spy.memcached.MemcachedClient;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SpyMemcachedClient}.\n* It contains ten unit test cases for the {@link SpyMemcachedClient#safeSet(String, int, Object)} method.\n*/\nclass SpyMemcachedClientTest0 {"
	},
	{
		"original_code": "// SpyMemcachedClient.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.cache.memcached;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.spy.memcached.MemcachedClient;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\n\n/**\n * 对SpyMemcached Client的二次封装,提供常用的Get/GetBulk/Set/Delete/Incr/Decr函数的同步与异步操作封装.\n *\n * 未提供封装的函数可直接调用getClient()取出Spy的原版MemcachedClient来使用.\n *\n * @author calvin\n */\npublic class SpyMemcachedClient implements DisposableBean {\n\n    private static Logger logger = LoggerFactory.getLogger(SpyMemcachedClient.class);\n\n    private MemcachedClient memcachedClient;\n\n    private long shutdownTimeout = 2500;\n\n    private long updateTimeout = 2500;\n\n    /**\n     * Get方法, 转换结果类型并屏蔽异常, 仅返回Null.\n     */\n    public <T> T get(String key) {\n        try {\n            return (T) memcachedClient.get(key);\n        } catch (RuntimeException e) {\n            handleException(e, key);\n            return null;\n        }\n    }\n\n    /**\n     * GetBulk方法, 转换结果类型并屏蔽异常.\n     */\n    public <T> Map<String, T> getBulk(Collection<String> keys) {\n        try {\n            return (Map<String, T>) memcachedClient.getBulk(keys);\n        } catch (RuntimeException e) {\n            handleException(e, StringUtils.join(keys, \",\"));\n            return null;\n        }\n    }\n\n    /**\n     * 异步Set方法, 不考虑执行结果.\n     */\n    public void set(String key, int expiredTime, Object value) {\n        memcachedClient.set(key, expiredTime, value);\n    }\n\n    /**\n     * 安全的Set方法, 保证在updateTimeout秒内返回执行结果, 否则返回false并取消操作.\n     */\n    public boolean safeSet(String key, int expiration, Object value) {\n        Future<Boolean> future = memcachedClient.set(key, expiration, value);\n        try {\n            return future.get(updateTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.cancel(false);\n        }\n        return false;\n    }\n\n    /**\n     * 异步 Delete方法, 不考虑执行结果.\n     */\n    public void delete(String key) {\n        memcachedClient.delete(key);\n    }\n\n    /**\n     * 安全的Delete方法, 保证在updateTimeout秒内返回执行结果, 否则返回false并取消操作.\n     */\n    public boolean safeDelete(String key) {\n        Future<Boolean> future = memcachedClient.delete(key);\n        try {\n            return future.get(updateTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.cancel(false);\n        }\n        return false;\n    }\n\n    /**\n     * Incr方法.\n     */\n    public long incr(String key, int by, long defaultValue) {\n        return memcachedClient.incr(key, by, defaultValue);\n    }\n\n    /**\n     * Decr方法.\n     */\n    public long decr(String key, int by, long defaultValue) {\n        return memcachedClient.decr(key, by, defaultValue);\n    }\n\n    /**\n     * 异步Incr方法, 不支持默认值, 若key不存在返回-1.\n     */\n    public Future<Long> asyncIncr(String key, int by) {\n        return memcachedClient.asyncIncr(key, by);\n    }\n\n    /**\n     * 异步Decr方法, 不支持默认值, 若key不存在返回-1.\n     */\n    public Future<Long> asyncDecr(String key, int by) {\n        return memcachedClient.asyncDecr(key, by);\n    }\n\n    private void handleException(Exception e, String key) {\n        logger.warn(\"spymemcached client receive an exception with key:\" + key, e);\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        if (memcachedClient != null) {\n            memcachedClient.shutdown(shutdownTimeout, TimeUnit.MILLISECONDS);\n        }\n    }\n\n    public MemcachedClient getMemcachedClient() {\n        return memcachedClient;\n    }\n\n    public void setMemcachedClient(MemcachedClient memcachedClient) {\n        this.memcachedClient = memcachedClient;\n    }\n\n    public void setUpdateTimeout(long updateTimeout) {\n        this.updateTimeout = updateTimeout;\n    }\n\n    public void setShutdownTimeout(long shutdownTimeout) {\n        this.shutdownTimeout = shutdownTimeout;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/cache/memcached/SpyMemcachedClientTest1.java",
		"test_prompt": "// SpyMemcachedClientTest1.java\npackage org.springside.modules.cache.memcached;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.spy.memcached.MemcachedClient;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SpyMemcachedClient}.\n* It contains ten unit test cases for the {@link SpyMemcachedClient#safeDelete(String)} method.\n*/\nclass SpyMemcachedClientTest1 {"
	},
	{
		"original_code": "// SpyMemcachedClient.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.cache.memcached;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.spy.memcached.MemcachedClient;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\n\n/**\n * 对SpyMemcached Client的二次封装,提供常用的Get/GetBulk/Set/Delete/Incr/Decr函数的同步与异步操作封装.\n *\n * 未提供封装的函数可直接调用getClient()取出Spy的原版MemcachedClient来使用.\n *\n * @author calvin\n */\npublic class SpyMemcachedClient implements DisposableBean {\n\n    private static Logger logger = LoggerFactory.getLogger(SpyMemcachedClient.class);\n\n    private MemcachedClient memcachedClient;\n\n    private long shutdownTimeout = 2500;\n\n    private long updateTimeout = 2500;\n\n    /**\n     * Get方法, 转换结果类型并屏蔽异常, 仅返回Null.\n     */\n    public <T> T get(String key) {\n        try {\n            return (T) memcachedClient.get(key);\n        } catch (RuntimeException e) {\n            handleException(e, key);\n            return null;\n        }\n    }\n\n    /**\n     * GetBulk方法, 转换结果类型并屏蔽异常.\n     */\n    public <T> Map<String, T> getBulk(Collection<String> keys) {\n        try {\n            return (Map<String, T>) memcachedClient.getBulk(keys);\n        } catch (RuntimeException e) {\n            handleException(e, StringUtils.join(keys, \",\"));\n            return null;\n        }\n    }\n\n    /**\n     * 异步Set方法, 不考虑执行结果.\n     */\n    public void set(String key, int expiredTime, Object value) {\n        memcachedClient.set(key, expiredTime, value);\n    }\n\n    /**\n     * 安全的Set方法, 保证在updateTimeout秒内返回执行结果, 否则返回false并取消操作.\n     */\n    public boolean safeSet(String key, int expiration, Object value) {\n        Future<Boolean> future = memcachedClient.set(key, expiration, value);\n        try {\n            return future.get(updateTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.cancel(false);\n        }\n        return false;\n    }\n\n    /**\n     * 异步 Delete方法, 不考虑执行结果.\n     */\n    public void delete(String key) {\n        memcachedClient.delete(key);\n    }\n\n    /**\n     * 安全的Delete方法, 保证在updateTimeout秒内返回执行结果, 否则返回false并取消操作.\n     */\n    public boolean safeDelete(String key) {\n        Future<Boolean> future = memcachedClient.delete(key);\n        try {\n            return future.get(updateTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.cancel(false);\n        }\n        return false;\n    }\n\n    /**\n     * Incr方法.\n     */\n    public long incr(String key, int by, long defaultValue) {\n        return memcachedClient.incr(key, by, defaultValue);\n    }\n\n    /**\n     * Decr方法.\n     */\n    public long decr(String key, int by, long defaultValue) {\n        return memcachedClient.decr(key, by, defaultValue);\n    }\n\n    /**\n     * 异步Incr方法, 不支持默认值, 若key不存在返回-1.\n     */\n    public Future<Long> asyncIncr(String key, int by) {\n        return memcachedClient.asyncIncr(key, by);\n    }\n\n    /**\n     * 异步Decr方法, 不支持默认值, 若key不存在返回-1.\n     */\n    public Future<Long> asyncDecr(String key, int by) {\n        return memcachedClient.asyncDecr(key, by);\n    }\n\n    private void handleException(Exception e, String key) {\n        logger.warn(\"spymemcached client receive an exception with key:\" + key, e);\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        if (memcachedClient != null) {\n            memcachedClient.shutdown(shutdownTimeout, TimeUnit.MILLISECONDS);\n        }\n    }\n\n    public MemcachedClient getMemcachedClient() {\n        return memcachedClient;\n    }\n\n    public void setMemcachedClient(MemcachedClient memcachedClient) {\n        this.memcachedClient = memcachedClient;\n    }\n\n    public void setUpdateTimeout(long updateTimeout) {\n        this.updateTimeout = updateTimeout;\n    }\n\n    public void setShutdownTimeout(long shutdownTimeout) {\n        this.shutdownTimeout = shutdownTimeout;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/cache/memcached/SpyMemcachedClientTest2.java",
		"test_prompt": "// SpyMemcachedClientTest2.java\npackage org.springside.modules.cache.memcached;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.spy.memcached.MemcachedClient;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SpyMemcachedClient}.\n* It contains ten unit test cases for the {@link SpyMemcachedClient#incr(String, int, long)} method.\n*/\nclass SpyMemcachedClientTest2 {"
	},
	{
		"original_code": "// SpyMemcachedClient.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.cache.memcached;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.spy.memcached.MemcachedClient;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\n\n/**\n * 对SpyMemcached Client的二次封装,提供常用的Get/GetBulk/Set/Delete/Incr/Decr函数的同步与异步操作封装.\n *\n * 未提供封装的函数可直接调用getClient()取出Spy的原版MemcachedClient来使用.\n *\n * @author calvin\n */\npublic class SpyMemcachedClient implements DisposableBean {\n\n    private static Logger logger = LoggerFactory.getLogger(SpyMemcachedClient.class);\n\n    private MemcachedClient memcachedClient;\n\n    private long shutdownTimeout = 2500;\n\n    private long updateTimeout = 2500;\n\n    /**\n     * Get方法, 转换结果类型并屏蔽异常, 仅返回Null.\n     */\n    public <T> T get(String key) {\n        try {\n            return (T) memcachedClient.get(key);\n        } catch (RuntimeException e) {\n            handleException(e, key);\n            return null;\n        }\n    }\n\n    /**\n     * GetBulk方法, 转换结果类型并屏蔽异常.\n     */\n    public <T> Map<String, T> getBulk(Collection<String> keys) {\n        try {\n            return (Map<String, T>) memcachedClient.getBulk(keys);\n        } catch (RuntimeException e) {\n            handleException(e, StringUtils.join(keys, \",\"));\n            return null;\n        }\n    }\n\n    /**\n     * 异步Set方法, 不考虑执行结果.\n     */\n    public void set(String key, int expiredTime, Object value) {\n        memcachedClient.set(key, expiredTime, value);\n    }\n\n    /**\n     * 安全的Set方法, 保证在updateTimeout秒内返回执行结果, 否则返回false并取消操作.\n     */\n    public boolean safeSet(String key, int expiration, Object value) {\n        Future<Boolean> future = memcachedClient.set(key, expiration, value);\n        try {\n            return future.get(updateTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.cancel(false);\n        }\n        return false;\n    }\n\n    /**\n     * 异步 Delete方法, 不考虑执行结果.\n     */\n    public void delete(String key) {\n        memcachedClient.delete(key);\n    }\n\n    /**\n     * 安全的Delete方法, 保证在updateTimeout秒内返回执行结果, 否则返回false并取消操作.\n     */\n    public boolean safeDelete(String key) {\n        Future<Boolean> future = memcachedClient.delete(key);\n        try {\n            return future.get(updateTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.cancel(false);\n        }\n        return false;\n    }\n\n    /**\n     * Incr方法.\n     */\n    public long incr(String key, int by, long defaultValue) {\n        return memcachedClient.incr(key, by, defaultValue);\n    }\n\n    /**\n     * Decr方法.\n     */\n    public long decr(String key, int by, long defaultValue) {\n        return memcachedClient.decr(key, by, defaultValue);\n    }\n\n    /**\n     * 异步Incr方法, 不支持默认值, 若key不存在返回-1.\n     */\n    public Future<Long> asyncIncr(String key, int by) {\n        return memcachedClient.asyncIncr(key, by);\n    }\n\n    /**\n     * 异步Decr方法, 不支持默认值, 若key不存在返回-1.\n     */\n    public Future<Long> asyncDecr(String key, int by) {\n        return memcachedClient.asyncDecr(key, by);\n    }\n\n    private void handleException(Exception e, String key) {\n        logger.warn(\"spymemcached client receive an exception with key:\" + key, e);\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        if (memcachedClient != null) {\n            memcachedClient.shutdown(shutdownTimeout, TimeUnit.MILLISECONDS);\n        }\n    }\n\n    public MemcachedClient getMemcachedClient() {\n        return memcachedClient;\n    }\n\n    public void setMemcachedClient(MemcachedClient memcachedClient) {\n        this.memcachedClient = memcachedClient;\n    }\n\n    public void setUpdateTimeout(long updateTimeout) {\n        this.updateTimeout = updateTimeout;\n    }\n\n    public void setShutdownTimeout(long shutdownTimeout) {\n        this.shutdownTimeout = shutdownTimeout;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/cache/memcached/SpyMemcachedClientTest3.java",
		"test_prompt": "// SpyMemcachedClientTest3.java\npackage org.springside.modules.cache.memcached;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.spy.memcached.MemcachedClient;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SpyMemcachedClient}.\n* It contains ten unit test cases for the {@link SpyMemcachedClient#decr(String, int, long)} method.\n*/\nclass SpyMemcachedClientTest3 {"
	},
	{
		"original_code": "// SpyMemcachedClient.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.cache.memcached;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.spy.memcached.MemcachedClient;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\n\n/**\n * 对SpyMemcached Client的二次封装,提供常用的Get/GetBulk/Set/Delete/Incr/Decr函数的同步与异步操作封装.\n *\n * 未提供封装的函数可直接调用getClient()取出Spy的原版MemcachedClient来使用.\n *\n * @author calvin\n */\npublic class SpyMemcachedClient implements DisposableBean {\n\n    private static Logger logger = LoggerFactory.getLogger(SpyMemcachedClient.class);\n\n    private MemcachedClient memcachedClient;\n\n    private long shutdownTimeout = 2500;\n\n    private long updateTimeout = 2500;\n\n    /**\n     * Get方法, 转换结果类型并屏蔽异常, 仅返回Null.\n     */\n    public <T> T get(String key) {\n        try {\n            return (T) memcachedClient.get(key);\n        } catch (RuntimeException e) {\n            handleException(e, key);\n            return null;\n        }\n    }\n\n    /**\n     * GetBulk方法, 转换结果类型并屏蔽异常.\n     */\n    public <T> Map<String, T> getBulk(Collection<String> keys) {\n        try {\n            return (Map<String, T>) memcachedClient.getBulk(keys);\n        } catch (RuntimeException e) {\n            handleException(e, StringUtils.join(keys, \",\"));\n            return null;\n        }\n    }\n\n    /**\n     * 异步Set方法, 不考虑执行结果.\n     */\n    public void set(String key, int expiredTime, Object value) {\n        memcachedClient.set(key, expiredTime, value);\n    }\n\n    /**\n     * 安全的Set方法, 保证在updateTimeout秒内返回执行结果, 否则返回false并取消操作.\n     */\n    public boolean safeSet(String key, int expiration, Object value) {\n        Future<Boolean> future = memcachedClient.set(key, expiration, value);\n        try {\n            return future.get(updateTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.cancel(false);\n        }\n        return false;\n    }\n\n    /**\n     * 异步 Delete方法, 不考虑执行结果.\n     */\n    public void delete(String key) {\n        memcachedClient.delete(key);\n    }\n\n    /**\n     * 安全的Delete方法, 保证在updateTimeout秒内返回执行结果, 否则返回false并取消操作.\n     */\n    public boolean safeDelete(String key) {\n        Future<Boolean> future = memcachedClient.delete(key);\n        try {\n            return future.get(updateTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.cancel(false);\n        }\n        return false;\n    }\n\n    /**\n     * Incr方法.\n     */\n    public long incr(String key, int by, long defaultValue) {\n        return memcachedClient.incr(key, by, defaultValue);\n    }\n\n    /**\n     * Decr方法.\n     */\n    public long decr(String key, int by, long defaultValue) {\n        return memcachedClient.decr(key, by, defaultValue);\n    }\n\n    /**\n     * 异步Incr方法, 不支持默认值, 若key不存在返回-1.\n     */\n    public Future<Long> asyncIncr(String key, int by) {\n        return memcachedClient.asyncIncr(key, by);\n    }\n\n    /**\n     * 异步Decr方法, 不支持默认值, 若key不存在返回-1.\n     */\n    public Future<Long> asyncDecr(String key, int by) {\n        return memcachedClient.asyncDecr(key, by);\n    }\n\n    private void handleException(Exception e, String key) {\n        logger.warn(\"spymemcached client receive an exception with key:\" + key, e);\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        if (memcachedClient != null) {\n            memcachedClient.shutdown(shutdownTimeout, TimeUnit.MILLISECONDS);\n        }\n    }\n\n    public MemcachedClient getMemcachedClient() {\n        return memcachedClient;\n    }\n\n    public void setMemcachedClient(MemcachedClient memcachedClient) {\n        this.memcachedClient = memcachedClient;\n    }\n\n    public void setUpdateTimeout(long updateTimeout) {\n        this.updateTimeout = updateTimeout;\n    }\n\n    public void setShutdownTimeout(long shutdownTimeout) {\n        this.shutdownTimeout = shutdownTimeout;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/cache/memcached/SpyMemcachedClientTest4.java",
		"test_prompt": "// SpyMemcachedClientTest4.java\npackage org.springside.modules.cache.memcached;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.spy.memcached.MemcachedClient;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SpyMemcachedClient}.\n* It contains ten unit test cases for the {@link SpyMemcachedClient#asyncIncr(String, int)} method.\n*/\nclass SpyMemcachedClientTest4 {"
	},
	{
		"original_code": "// SpyMemcachedClient.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.cache.memcached;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.spy.memcached.MemcachedClient;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\n\n/**\n * 对SpyMemcached Client的二次封装,提供常用的Get/GetBulk/Set/Delete/Incr/Decr函数的同步与异步操作封装.\n *\n * 未提供封装的函数可直接调用getClient()取出Spy的原版MemcachedClient来使用.\n *\n * @author calvin\n */\npublic class SpyMemcachedClient implements DisposableBean {\n\n    private static Logger logger = LoggerFactory.getLogger(SpyMemcachedClient.class);\n\n    private MemcachedClient memcachedClient;\n\n    private long shutdownTimeout = 2500;\n\n    private long updateTimeout = 2500;\n\n    /**\n     * Get方法, 转换结果类型并屏蔽异常, 仅返回Null.\n     */\n    public <T> T get(String key) {\n        try {\n            return (T) memcachedClient.get(key);\n        } catch (RuntimeException e) {\n            handleException(e, key);\n            return null;\n        }\n    }\n\n    /**\n     * GetBulk方法, 转换结果类型并屏蔽异常.\n     */\n    public <T> Map<String, T> getBulk(Collection<String> keys) {\n        try {\n            return (Map<String, T>) memcachedClient.getBulk(keys);\n        } catch (RuntimeException e) {\n            handleException(e, StringUtils.join(keys, \",\"));\n            return null;\n        }\n    }\n\n    /**\n     * 异步Set方法, 不考虑执行结果.\n     */\n    public void set(String key, int expiredTime, Object value) {\n        memcachedClient.set(key, expiredTime, value);\n    }\n\n    /**\n     * 安全的Set方法, 保证在updateTimeout秒内返回执行结果, 否则返回false并取消操作.\n     */\n    public boolean safeSet(String key, int expiration, Object value) {\n        Future<Boolean> future = memcachedClient.set(key, expiration, value);\n        try {\n            return future.get(updateTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.cancel(false);\n        }\n        return false;\n    }\n\n    /**\n     * 异步 Delete方法, 不考虑执行结果.\n     */\n    public void delete(String key) {\n        memcachedClient.delete(key);\n    }\n\n    /**\n     * 安全的Delete方法, 保证在updateTimeout秒内返回执行结果, 否则返回false并取消操作.\n     */\n    public boolean safeDelete(String key) {\n        Future<Boolean> future = memcachedClient.delete(key);\n        try {\n            return future.get(updateTimeout, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.cancel(false);\n        }\n        return false;\n    }\n\n    /**\n     * Incr方法.\n     */\n    public long incr(String key, int by, long defaultValue) {\n        return memcachedClient.incr(key, by, defaultValue);\n    }\n\n    /**\n     * Decr方法.\n     */\n    public long decr(String key, int by, long defaultValue) {\n        return memcachedClient.decr(key, by, defaultValue);\n    }\n\n    /**\n     * 异步Incr方法, 不支持默认值, 若key不存在返回-1.\n     */\n    public Future<Long> asyncIncr(String key, int by) {\n        return memcachedClient.asyncIncr(key, by);\n    }\n\n    /**\n     * 异步Decr方法, 不支持默认值, 若key不存在返回-1.\n     */\n    public Future<Long> asyncDecr(String key, int by) {\n        return memcachedClient.asyncDecr(key, by);\n    }\n\n    private void handleException(Exception e, String key) {\n        logger.warn(\"spymemcached client receive an exception with key:\" + key, e);\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        if (memcachedClient != null) {\n            memcachedClient.shutdown(shutdownTimeout, TimeUnit.MILLISECONDS);\n        }\n    }\n\n    public MemcachedClient getMemcachedClient() {\n        return memcachedClient;\n    }\n\n    public void setMemcachedClient(MemcachedClient memcachedClient) {\n        this.memcachedClient = memcachedClient;\n    }\n\n    public void setUpdateTimeout(long updateTimeout) {\n        this.updateTimeout = updateTimeout;\n    }\n\n    public void setShutdownTimeout(long shutdownTimeout) {\n        this.shutdownTimeout = shutdownTimeout;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/cache/memcached/SpyMemcachedClientTest5.java",
		"test_prompt": "// SpyMemcachedClientTest5.java\npackage org.springside.modules.cache.memcached;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.spy.memcached.MemcachedClient;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SpyMemcachedClient}.\n* It contains ten unit test cases for the {@link SpyMemcachedClient#asyncDecr(String, int)} method.\n*/\nclass SpyMemcachedClientTest5 {"
	},
	{
		"original_code": "// JedisUtils.java\n/**\r\n * ****************************************************************************\r\n *  Copyright (c) 2005, 2014 springside.github.io\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * *****************************************************************************\r\n */\r\npackage org.springside.modules.nosql.redis;\r\n\r\nimport redis.clients.jedis.Jedis;\r\nimport redis.clients.jedis.JedisPoolConfig;\r\nimport redis.clients.jedis.Protocol;\r\n\r\npublic class JedisUtils {\r\n\r\n    public static final String DEFAULT_HOST = \"localhost\";\r\n\r\n    public static final int DEFAULT_PORT = Protocol.DEFAULT_PORT;\r\n\r\n    public static final int DEFAULT_TIMEOUT = Protocol.DEFAULT_TIMEOUT;\r\n\r\n    private static final String OK_CODE = \"OK\";\r\n\r\n    private static final String OK_MULTI_CODE = \"+OK\";\r\n\r\n    /**\r\n     * 快速设置JedisPoolConfig, 不执行idle checking。\r\n     */\r\n    public static JedisPoolConfig createPoolConfig(int maxIdle, int maxTotal) {\r\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\r\n        poolConfig.setMaxIdle(maxIdle);\r\n        poolConfig.setMaxTotal(maxTotal);\r\n        poolConfig.setTimeBetweenEvictionRunsMillis(-1);\r\n        return poolConfig;\r\n    }\r\n\r\n    /**\r\n     * 快速设置JedisPoolConfig, 设置执行idle checking的间隔和可被清除的idle时间.\r\n     * 默认的checkingIntervalSecs是30秒，可被清除时间是60秒。\r\n     */\r\n    public static JedisPoolConfig createPoolConfig(int maxIdle, int maxTotal, int checkingIntervalSecs, int evictableIdleTimeSecs) {\r\n        JedisPoolConfig poolConfig = createPoolConfig(maxIdle, maxTotal);\r\n        poolConfig.setTimeBetweenEvictionRunsMillis(checkingIntervalSecs * 1000);\r\n        poolConfig.setMinEvictableIdleTimeMillis(evictableIdleTimeSecs * 1000);\r\n        return poolConfig;\r\n    }\r\n\r\n    /**\r\n     * 判断 是 OK 或 +OK.\r\n     */\r\n    public static boolean isStatusOk(String status) {\r\n        return (status != null) && (OK_CODE.equals(status) || OK_MULTI_CODE.equals(status));\r\n    }\r\n\r\n    /**\r\n     * 退出然后关闭Jedis连接。如果Jedis为null则无动作。\r\n     */\r\n    public static void closeJedis(Jedis jedis) {\r\n        if ((jedis != null) && jedis.isConnected()) {\r\n            try {\r\n                try {\r\n                    jedis.quit();\r\n                } catch (Exception e) {\r\n                }\r\n                jedis.disconnect();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n    }\r\n}\r\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisUtilsTest0.java",
		"test_prompt": "// JedisUtilsTest0.java\npackage org.springside.modules.nosql.redis;\n\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.Protocol;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisUtils}.\n* It contains ten unit test cases for the {@link JedisUtils#createPoolConfig(int, int)} method.\n*/\nclass JedisUtilsTest0 {"
	},
	{
		"original_code": "// JedisUtils.java\n/**\r\n * ****************************************************************************\r\n *  Copyright (c) 2005, 2014 springside.github.io\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * *****************************************************************************\r\n */\r\npackage org.springside.modules.nosql.redis;\r\n\r\nimport redis.clients.jedis.Jedis;\r\nimport redis.clients.jedis.JedisPoolConfig;\r\nimport redis.clients.jedis.Protocol;\r\n\r\npublic class JedisUtils {\r\n\r\n    public static final String DEFAULT_HOST = \"localhost\";\r\n\r\n    public static final int DEFAULT_PORT = Protocol.DEFAULT_PORT;\r\n\r\n    public static final int DEFAULT_TIMEOUT = Protocol.DEFAULT_TIMEOUT;\r\n\r\n    private static final String OK_CODE = \"OK\";\r\n\r\n    private static final String OK_MULTI_CODE = \"+OK\";\r\n\r\n    /**\r\n     * 快速设置JedisPoolConfig, 不执行idle checking。\r\n     */\r\n    public static JedisPoolConfig createPoolConfig(int maxIdle, int maxTotal) {\r\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\r\n        poolConfig.setMaxIdle(maxIdle);\r\n        poolConfig.setMaxTotal(maxTotal);\r\n        poolConfig.setTimeBetweenEvictionRunsMillis(-1);\r\n        return poolConfig;\r\n    }\r\n\r\n    /**\r\n     * 快速设置JedisPoolConfig, 设置执行idle checking的间隔和可被清除的idle时间.\r\n     * 默认的checkingIntervalSecs是30秒，可被清除时间是60秒。\r\n     */\r\n    public static JedisPoolConfig createPoolConfig(int maxIdle, int maxTotal, int checkingIntervalSecs, int evictableIdleTimeSecs) {\r\n        JedisPoolConfig poolConfig = createPoolConfig(maxIdle, maxTotal);\r\n        poolConfig.setTimeBetweenEvictionRunsMillis(checkingIntervalSecs * 1000);\r\n        poolConfig.setMinEvictableIdleTimeMillis(evictableIdleTimeSecs * 1000);\r\n        return poolConfig;\r\n    }\r\n\r\n    /**\r\n     * 判断 是 OK 或 +OK.\r\n     */\r\n    public static boolean isStatusOk(String status) {\r\n        return (status != null) && (OK_CODE.equals(status) || OK_MULTI_CODE.equals(status));\r\n    }\r\n\r\n    /**\r\n     * 退出然后关闭Jedis连接。如果Jedis为null则无动作。\r\n     */\r\n    public static void closeJedis(Jedis jedis) {\r\n        if ((jedis != null) && jedis.isConnected()) {\r\n            try {\r\n                try {\r\n                    jedis.quit();\r\n                } catch (Exception e) {\r\n                }\r\n                jedis.disconnect();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n    }\r\n}\r\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisUtilsTest1.java",
		"test_prompt": "// JedisUtilsTest1.java\npackage org.springside.modules.nosql.redis;\n\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.Protocol;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisUtils}.\n* It contains ten unit test cases for the {@link JedisUtils#createPoolConfig(int, int, int, int)} method.\n*/\nclass JedisUtilsTest1 {"
	},
	{
		"original_code": "// JedisUtils.java\n/**\r\n * ****************************************************************************\r\n *  Copyright (c) 2005, 2014 springside.github.io\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * *****************************************************************************\r\n */\r\npackage org.springside.modules.nosql.redis;\r\n\r\nimport redis.clients.jedis.Jedis;\r\nimport redis.clients.jedis.JedisPoolConfig;\r\nimport redis.clients.jedis.Protocol;\r\n\r\npublic class JedisUtils {\r\n\r\n    public static final String DEFAULT_HOST = \"localhost\";\r\n\r\n    public static final int DEFAULT_PORT = Protocol.DEFAULT_PORT;\r\n\r\n    public static final int DEFAULT_TIMEOUT = Protocol.DEFAULT_TIMEOUT;\r\n\r\n    private static final String OK_CODE = \"OK\";\r\n\r\n    private static final String OK_MULTI_CODE = \"+OK\";\r\n\r\n    /**\r\n     * 快速设置JedisPoolConfig, 不执行idle checking。\r\n     */\r\n    public static JedisPoolConfig createPoolConfig(int maxIdle, int maxTotal) {\r\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\r\n        poolConfig.setMaxIdle(maxIdle);\r\n        poolConfig.setMaxTotal(maxTotal);\r\n        poolConfig.setTimeBetweenEvictionRunsMillis(-1);\r\n        return poolConfig;\r\n    }\r\n\r\n    /**\r\n     * 快速设置JedisPoolConfig, 设置执行idle checking的间隔和可被清除的idle时间.\r\n     * 默认的checkingIntervalSecs是30秒，可被清除时间是60秒。\r\n     */\r\n    public static JedisPoolConfig createPoolConfig(int maxIdle, int maxTotal, int checkingIntervalSecs, int evictableIdleTimeSecs) {\r\n        JedisPoolConfig poolConfig = createPoolConfig(maxIdle, maxTotal);\r\n        poolConfig.setTimeBetweenEvictionRunsMillis(checkingIntervalSecs * 1000);\r\n        poolConfig.setMinEvictableIdleTimeMillis(evictableIdleTimeSecs * 1000);\r\n        return poolConfig;\r\n    }\r\n\r\n    /**\r\n     * 判断 是 OK 或 +OK.\r\n     */\r\n    public static boolean isStatusOk(String status) {\r\n        return (status != null) && (OK_CODE.equals(status) || OK_MULTI_CODE.equals(status));\r\n    }\r\n\r\n    /**\r\n     * 退出然后关闭Jedis连接。如果Jedis为null则无动作。\r\n     */\r\n    public static void closeJedis(Jedis jedis) {\r\n        if ((jedis != null) && jedis.isConnected()) {\r\n            try {\r\n                try {\r\n                    jedis.quit();\r\n                } catch (Exception e) {\r\n                }\r\n                jedis.disconnect();\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n    }\r\n}\r\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisUtilsTest2.java",
		"test_prompt": "// JedisUtilsTest2.java\npackage org.springside.modules.nosql.redis;\n\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.Protocol;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisUtils}.\n* It contains ten unit test cases for the {@link JedisUtils#isStatusOk(String)} method.\n*/\nclass JedisUtilsTest2 {"
	},
	{
		"original_code": "// AdvancedJobConsumer.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis.scheduler;\n\nimport java.util.List;\nimport org.springside.modules.nosql.redis.JedisScriptExecutor;\nimport org.springside.modules.nosql.redis.JedisTemplate;\nimport org.springside.modules.utils.Threads;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport com.google.common.collect.Lists;\n\n/**\n * 高级的使用Lua脚本取回任务，支持高可靠性和批量取回任务，但不会阻塞，如果没有任务即时返回。\n *\n * 在高可靠模式下，任务在返回给客户端的同时，会放入lock table中，客户完成任务后必须调用ack()删除任务，否则Dispatcher会将超时未完成的任务放入队列重新执行.\n *\n * @author calvin\n */\npublic class AdvancedJobConsumer {\n\n    public static final String DEFAULT_BATCH_POP_LUA_FILE_PATH = \"classpath:/redis/batchpop.lua\";\n\n    public static final String DEFAULT_SINGLE_POP_LUA_FILE_PATH = \"classpath:/redis/singlepop.lua\";\n\n    public static final int DEFAULT_CONNECTION_RETRY_MILLS = 5000;\n\n    public static final boolean DEFAULT_RELIABLE = false;\n\n    public static final int DEFAULT_BATCH_SIZE = 10;\n\n    private boolean reliable = DEFAULT_RELIABLE;\n\n    private int batchSize = DEFAULT_BATCH_SIZE;\n\n    private JedisTemplate jedisTemplate;\n\n    private JedisScriptExecutor singlePopScriptExecutor;\n\n    private JedisScriptExecutor batchPopScriptExecutor;\n\n    private String batchPopScriptPath = DEFAULT_BATCH_POP_LUA_FILE_PATH;\n\n    private String singlePopScriptPath = DEFAULT_SINGLE_POP_LUA_FILE_PATH;\n\n    private String readyJobKey;\n\n    private String lockJobKey;\n\n    private List<String> keys;\n\n    public AdvancedJobConsumer(String jobName, JedisPool jedisPool) {\n        readyJobKey = Keys.getReadyJobKey(jobName);\n        lockJobKey = Keys.getLockJobKey(jobName);\n        keys = Lists.newArrayList(readyJobKey, lockJobKey);\n        jedisTemplate = new JedisTemplate(jedisPool);\n        singlePopScriptExecutor = new JedisScriptExecutor(jedisPool);\n        batchPopScriptExecutor = new JedisScriptExecutor(jedisPool);\n    }\n\n    /**\n     * 初始化脚本，在popup前必须被调用.\n     */\n    public void init() {\n        singlePopScriptExecutor.loadFromFile(singlePopScriptPath);\n        batchPopScriptExecutor.loadFromFile(batchPopScriptPath);\n    }\n\n    /**\n     * 即时返回任务, 如有任务返回的同时将其放入lock job set，如无任务返回null.\n     * 如发生redis连接异常, 线程会sleep 5秒后返回null，\n     * 如果发生redis数据错误如lua脚本错误，抛出异常.\n     */\n    public String popupJob() {\n        String job = null;\n        try {\n            long currTime = System.currentTimeMillis();\n            List<String> args = Lists.newArrayList(String.valueOf(currTime), String.valueOf(reliable));\n            job = (String) singlePopScriptExecutor.execute(keys, args);\n        } catch (JedisConnectionException e) {\n            Threads.sleep(DEFAULT_CONNECTION_RETRY_MILLS);\n        }\n        return job;\n    }\n\n    /**\n     * 即时批量跑回任务, 如有任务返回的同时将其放入lock job set，如无任务返回空的List.\n     * 如发生redis连接异常, 线程会sleep 5秒后返回null，\n     * 如果发生redis数据错误如lua脚本错误，抛出异常.\n     */\n    public List<String> popupJobs() {\n        List<String> jobs = null;\n        try {\n            long currTime = System.currentTimeMillis();\n            List<String> args = Lists.newArrayList(String.valueOf(currTime), String.valueOf(batchSize), String.valueOf(reliable));\n            jobs = (List<String>) batchPopScriptExecutor.execute(keys, args);\n        } catch (JedisConnectionException e) {\n            Threads.sleep(DEFAULT_CONNECTION_RETRY_MILLS);\n        }\n        return jobs;\n    }\n\n    /**\n     * 在高可靠模式下，报告任务完成, 从lock table set中删除任务.\n     */\n    public void ackJob(String job) {\n        jedisTemplate.zrem(lockJobKey, job);\n    }\n\n    /**\n     * 设置不在默认路径的lua script path，按Spring Resource的URL格式.\n     */\n    public void setBatchPopScriptPath(String batchPopScriptPath) {\n        this.batchPopScriptPath = batchPopScriptPath;\n    }\n\n    /**\n     * 设置不在默认路径的lua script path，按Spring Resource的URL格式.\n     */\n    public void setSinglePopScriptPath(String singlePopScriptPath) {\n        this.singlePopScriptPath = singlePopScriptPath;\n    }\n\n    /**\n     * 设置是否高可靠模式。\n     */\n    public void setReliable(boolean reliable) {\n        this.reliable = reliable;\n    }\n\n    /**\n     * 设置批量取回任务数量.\n     */\n    public void setBatchSize(int batchSize) {\n        this.batchSize = batchSize;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/scheduler/AdvancedJobConsumerTest0.java",
		"test_prompt": "// AdvancedJobConsumerTest0.java\npackage org.springside.modules.nosql.redis.scheduler;\n\nimport java.util.List;\nimport org.springside.modules.nosql.redis.JedisScriptExecutor;\nimport org.springside.modules.nosql.redis.JedisTemplate;\nimport org.springside.modules.utils.Threads;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport com.google.common.collect.Lists;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AdvancedJobConsumer}.\n* It contains ten unit test cases for the {@link AdvancedJobConsumer#popupJob()} method.\n*/\nclass AdvancedJobConsumerTest0 {"
	},
	{
		"original_code": "// AdvancedJobConsumer.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis.scheduler;\n\nimport java.util.List;\nimport org.springside.modules.nosql.redis.JedisScriptExecutor;\nimport org.springside.modules.nosql.redis.JedisTemplate;\nimport org.springside.modules.utils.Threads;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport com.google.common.collect.Lists;\n\n/**\n * 高级的使用Lua脚本取回任务，支持高可靠性和批量取回任务，但不会阻塞，如果没有任务即时返回。\n *\n * 在高可靠模式下，任务在返回给客户端的同时，会放入lock table中，客户完成任务后必须调用ack()删除任务，否则Dispatcher会将超时未完成的任务放入队列重新执行.\n *\n * @author calvin\n */\npublic class AdvancedJobConsumer {\n\n    public static final String DEFAULT_BATCH_POP_LUA_FILE_PATH = \"classpath:/redis/batchpop.lua\";\n\n    public static final String DEFAULT_SINGLE_POP_LUA_FILE_PATH = \"classpath:/redis/singlepop.lua\";\n\n    public static final int DEFAULT_CONNECTION_RETRY_MILLS = 5000;\n\n    public static final boolean DEFAULT_RELIABLE = false;\n\n    public static final int DEFAULT_BATCH_SIZE = 10;\n\n    private boolean reliable = DEFAULT_RELIABLE;\n\n    private int batchSize = DEFAULT_BATCH_SIZE;\n\n    private JedisTemplate jedisTemplate;\n\n    private JedisScriptExecutor singlePopScriptExecutor;\n\n    private JedisScriptExecutor batchPopScriptExecutor;\n\n    private String batchPopScriptPath = DEFAULT_BATCH_POP_LUA_FILE_PATH;\n\n    private String singlePopScriptPath = DEFAULT_SINGLE_POP_LUA_FILE_PATH;\n\n    private String readyJobKey;\n\n    private String lockJobKey;\n\n    private List<String> keys;\n\n    public AdvancedJobConsumer(String jobName, JedisPool jedisPool) {\n        readyJobKey = Keys.getReadyJobKey(jobName);\n        lockJobKey = Keys.getLockJobKey(jobName);\n        keys = Lists.newArrayList(readyJobKey, lockJobKey);\n        jedisTemplate = new JedisTemplate(jedisPool);\n        singlePopScriptExecutor = new JedisScriptExecutor(jedisPool);\n        batchPopScriptExecutor = new JedisScriptExecutor(jedisPool);\n    }\n\n    /**\n     * 初始化脚本，在popup前必须被调用.\n     */\n    public void init() {\n        singlePopScriptExecutor.loadFromFile(singlePopScriptPath);\n        batchPopScriptExecutor.loadFromFile(batchPopScriptPath);\n    }\n\n    /**\n     * 即时返回任务, 如有任务返回的同时将其放入lock job set，如无任务返回null.\n     * 如发生redis连接异常, 线程会sleep 5秒后返回null，\n     * 如果发生redis数据错误如lua脚本错误，抛出异常.\n     */\n    public String popupJob() {\n        String job = null;\n        try {\n            long currTime = System.currentTimeMillis();\n            List<String> args = Lists.newArrayList(String.valueOf(currTime), String.valueOf(reliable));\n            job = (String) singlePopScriptExecutor.execute(keys, args);\n        } catch (JedisConnectionException e) {\n            Threads.sleep(DEFAULT_CONNECTION_RETRY_MILLS);\n        }\n        return job;\n    }\n\n    /**\n     * 即时批量跑回任务, 如有任务返回的同时将其放入lock job set，如无任务返回空的List.\n     * 如发生redis连接异常, 线程会sleep 5秒后返回null，\n     * 如果发生redis数据错误如lua脚本错误，抛出异常.\n     */\n    public List<String> popupJobs() {\n        List<String> jobs = null;\n        try {\n            long currTime = System.currentTimeMillis();\n            List<String> args = Lists.newArrayList(String.valueOf(currTime), String.valueOf(batchSize), String.valueOf(reliable));\n            jobs = (List<String>) batchPopScriptExecutor.execute(keys, args);\n        } catch (JedisConnectionException e) {\n            Threads.sleep(DEFAULT_CONNECTION_RETRY_MILLS);\n        }\n        return jobs;\n    }\n\n    /**\n     * 在高可靠模式下，报告任务完成, 从lock table set中删除任务.\n     */\n    public void ackJob(String job) {\n        jedisTemplate.zrem(lockJobKey, job);\n    }\n\n    /**\n     * 设置不在默认路径的lua script path，按Spring Resource的URL格式.\n     */\n    public void setBatchPopScriptPath(String batchPopScriptPath) {\n        this.batchPopScriptPath = batchPopScriptPath;\n    }\n\n    /**\n     * 设置不在默认路径的lua script path，按Spring Resource的URL格式.\n     */\n    public void setSinglePopScriptPath(String singlePopScriptPath) {\n        this.singlePopScriptPath = singlePopScriptPath;\n    }\n\n    /**\n     * 设置是否高可靠模式。\n     */\n    public void setReliable(boolean reliable) {\n        this.reliable = reliable;\n    }\n\n    /**\n     * 设置批量取回任务数量.\n     */\n    public void setBatchSize(int batchSize) {\n        this.batchSize = batchSize;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/scheduler/AdvancedJobConsumerTest1.java",
		"test_prompt": "// AdvancedJobConsumerTest1.java\npackage org.springside.modules.nosql.redis.scheduler;\n\nimport java.util.List;\nimport org.springside.modules.nosql.redis.JedisScriptExecutor;\nimport org.springside.modules.nosql.redis.JedisTemplate;\nimport org.springside.modules.utils.Threads;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport com.google.common.collect.Lists;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AdvancedJobConsumer}.\n* It contains ten unit test cases for the {@link AdvancedJobConsumer#popupJobs()} method.\n*/\nclass AdvancedJobConsumerTest1 {"
	},
	{
		"original_code": "// Keys.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis.scheduler;\n\npublic class Keys {\n\n    public static String getScheduledJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":scheduled\").toString();\n    }\n\n    public static String getReadyJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":ready\").toString();\n    }\n\n    public static String getLockJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":lock\").toString();\n    }\n\n    public static String getDispatchCounterKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":dispatch.counter\").toString();\n    }\n\n    public static String getRetryCounterKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":retry.counter\").toString();\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/scheduler/KeysTest0.java",
		"test_prompt": "// KeysTest0.java\npackage org.springside.modules.nosql.redis.scheduler;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Keys}.\n* It contains ten unit test cases for the {@link Keys#getScheduledJobKey(String)} method.\n*/\nclass KeysTest0 {"
	},
	{
		"original_code": "// Keys.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis.scheduler;\n\npublic class Keys {\n\n    public static String getScheduledJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":scheduled\").toString();\n    }\n\n    public static String getReadyJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":ready\").toString();\n    }\n\n    public static String getLockJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":lock\").toString();\n    }\n\n    public static String getDispatchCounterKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":dispatch.counter\").toString();\n    }\n\n    public static String getRetryCounterKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":retry.counter\").toString();\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/scheduler/KeysTest1.java",
		"test_prompt": "// KeysTest1.java\npackage org.springside.modules.nosql.redis.scheduler;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Keys}.\n* It contains ten unit test cases for the {@link Keys#getReadyJobKey(String)} method.\n*/\nclass KeysTest1 {"
	},
	{
		"original_code": "// Keys.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis.scheduler;\n\npublic class Keys {\n\n    public static String getScheduledJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":scheduled\").toString();\n    }\n\n    public static String getReadyJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":ready\").toString();\n    }\n\n    public static String getLockJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":lock\").toString();\n    }\n\n    public static String getDispatchCounterKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":dispatch.counter\").toString();\n    }\n\n    public static String getRetryCounterKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":retry.counter\").toString();\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/scheduler/KeysTest2.java",
		"test_prompt": "// KeysTest2.java\npackage org.springside.modules.nosql.redis.scheduler;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Keys}.\n* It contains ten unit test cases for the {@link Keys#getLockJobKey(String)} method.\n*/\nclass KeysTest2 {"
	},
	{
		"original_code": "// Keys.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis.scheduler;\n\npublic class Keys {\n\n    public static String getScheduledJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":scheduled\").toString();\n    }\n\n    public static String getReadyJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":ready\").toString();\n    }\n\n    public static String getLockJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":lock\").toString();\n    }\n\n    public static String getDispatchCounterKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":dispatch.counter\").toString();\n    }\n\n    public static String getRetryCounterKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":retry.counter\").toString();\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/scheduler/KeysTest3.java",
		"test_prompt": "// KeysTest3.java\npackage org.springside.modules.nosql.redis.scheduler;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Keys}.\n* It contains ten unit test cases for the {@link Keys#getDispatchCounterKey(String)} method.\n*/\nclass KeysTest3 {"
	},
	{
		"original_code": "// Keys.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis.scheduler;\n\npublic class Keys {\n\n    public static String getScheduledJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":scheduled\").toString();\n    }\n\n    public static String getReadyJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":ready\").toString();\n    }\n\n    public static String getLockJobKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":lock\").toString();\n    }\n\n    public static String getDispatchCounterKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":dispatch.counter\").toString();\n    }\n\n    public static String getRetryCounterKey(String jobName) {\n        return new StringBuilder().append(\"job:\").append(jobName).append(\":retry.counter\").toString();\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/scheduler/KeysTest4.java",
		"test_prompt": "// KeysTest4.java\npackage org.springside.modules.nosql.redis.scheduler;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Keys}.\n* It contains ten unit test cases for the {@link Keys#getRetryCounterKey(String)} method.\n*/\nclass KeysTest4 {"
	},
	{
		"original_code": "// SimpleJobConsumer.java\n/**\r\n * ****************************************************************************\r\n *  Copyright (c) 2005, 2014 springside.github.io\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * *****************************************************************************\r\n */\r\npackage org.springside.modules.nosql.redis.scheduler;\r\n\r\nimport java.util.List;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springside.modules.nosql.redis.JedisTemplate;\r\nimport org.springside.modules.nosql.redis.JedisTemplate.JedisAction;\r\nimport org.springside.modules.utils.Threads;\r\nimport redis.clients.jedis.Jedis;\r\nimport redis.clients.jedis.exceptions.JedisConnectionException;\r\nimport redis.clients.util.Pool;\r\n\r\n/*\r\n * 简单的基于brpop()API, 阻塞的取出任务。\r\n * brpop的阻塞，在线程中断时不会自动退出，所以还是设置有限timeout时间，另外在线程池退出时已比timeout时间长的时间调用awaitTermination()等待线程结束.\r\n */\r\npublic class SimpleJobConsumer {\r\n\r\n    public static final int DEFAULT_POPUP_TIMEOUT_SECONDS = 5;\r\n\r\n    public static final int DEFAULT_CONNECTION_RETRY_MILLS = 5000;\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(SimpleJobConsumer.class);\r\n\r\n    private JedisTemplate jedisTemplate;\r\n\r\n    private String readyJobKey;\r\n\r\n    private int popupTimeoutSecs = DEFAULT_POPUP_TIMEOUT_SECONDS;\r\n\r\n    public SimpleJobConsumer(String jobName, Pool<Jedis> jedisPool) {\r\n        jedisTemplate = new JedisTemplate(jedisPool);\r\n        readyJobKey = Keys.getReadyJobKey(jobName);\r\n    }\r\n\r\n    /**\r\n     * 阻塞直到返回任务，如果popupTimeoutSecs内(默认5秒)无任务到达，返回null.\r\n     * 如发生redis连接异常, 线程会sleep 5秒后返回null，\r\n     */\r\n    public String popupJob() {\r\n        List<String> nameValuePair = null;\r\n        try {\r\n            nameValuePair = jedisTemplate.execute(new JedisAction<List<String>>() {\r\n\r\n                @Override\r\n                public List<String> action(Jedis jedis) {\r\n                    return jedis.brpop(popupTimeoutSecs, readyJobKey);\r\n                }\r\n            });\r\n        } catch (JedisConnectionException e) {\r\n            Threads.sleep(DEFAULT_CONNECTION_RETRY_MILLS);\r\n        }\r\n        if ((nameValuePair != null) && !nameValuePair.isEmpty()) {\r\n            return nameValuePair.get(1);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public void setPopupTimeoutSecs(int popupTimeoutSecs) {\r\n        this.popupTimeoutSecs = popupTimeoutSecs;\r\n    }\r\n}\r\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/scheduler/SimpleJobConsumerTest.java",
		"test_prompt": "// SimpleJobConsumerTest.java\npackage org.springside.modules.nosql.redis.scheduler;\n\nimport java.util.List;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springside.modules.nosql.redis.JedisTemplate;\nimport org.springside.modules.nosql.redis.JedisTemplate.JedisAction;\nimport org.springside.modules.utils.Threads;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleJobConsumer}.\n* It contains ten unit test cases for the {@link SimpleJobConsumer#popupJob()} method.\n*/\nclass SimpleJobConsumerTest {"
	},
	{
		"original_code": "// JobProducer.java\n/**\r\n * ****************************************************************************\r\n *  Copyright (c) 2005, 2014 springside.github.io\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * *****************************************************************************\r\n */\r\npackage org.springside.modules.nosql.redis.scheduler;\r\n\r\nimport java.util.concurrent.TimeUnit;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springside.modules.nosql.redis.JedisTemplate;\r\nimport redis.clients.jedis.Jedis;\r\nimport redis.clients.util.Pool;\r\n\r\n/**\r\n * 任务管理，支持任务的安排与取消。\r\n * 任务分延时任务与立即执行任务两种, 未来或将支持固定间隔循环执行任务.\r\n */\r\npublic class JobProducer {\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(JobProducer.class);\r\n\r\n    private JedisTemplate jedisTemplate;\r\n\r\n    private String scheduledJobKey;\r\n\r\n    private String readyJobKey;\r\n\r\n    public JobProducer(String jobName, Pool<Jedis> jedisPool) {\r\n        jedisTemplate = new JedisTemplate(jedisPool);\r\n        scheduledJobKey = Keys.getScheduledJobKey(jobName);\r\n        readyJobKey = Keys.getReadyJobKey(jobName);\r\n    }\r\n\r\n    /**\r\n     * 提交立即执行的任务。\r\n     */\r\n    public void queue(final String job) {\r\n        jedisTemplate.lpush(readyJobKey, job);\r\n    }\r\n\r\n    /**\r\n     * 安排延时执行任务.\r\n     */\r\n    public void schedule(final String job, final long delay, final TimeUnit timeUnit) {\r\n        final long delayTimeMillis = System.currentTimeMillis() + timeUnit.toMillis(delay);\r\n        jedisTemplate.zadd(scheduledJobKey, job, delayTimeMillis);\r\n    }\r\n\r\n    /**\r\n     * 尝试取消延时任务, 如果任务不存在或已被触发返回false, 否则返回true.\r\n     */\r\n    public boolean cancel(final String job) {\r\n        boolean removed = jedisTemplate.zrem(scheduledJobKey, job);\r\n        if (!removed) {\r\n            logger.warn(\"Can't cancel scheduld job by value {}\", job);\r\n        }\r\n        return removed;\r\n    }\r\n}\r\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/scheduler/JobProducerTest.java",
		"test_prompt": "// JobProducerTest.java\npackage org.springside.modules.nosql.redis.scheduler;\n\nimport java.util.concurrent.TimeUnit;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springside.modules.nosql.redis.JedisTemplate;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JobProducer}.\n* It contains ten unit test cases for the {@link JobProducer#cancel(String)} method.\n*/\nclass JobProducerTest {"
	},
	{
		"original_code": "// MasterElector.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis.elector;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.security.SecureRandom;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ScheduledFuture;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springside.modules.nosql.redis.JedisTemplate;\nimport org.springside.modules.nosql.redis.JedisTemplate.JedisActionNoResult;\nimport org.springside.modules.nosql.redis.JedisUtils;\nimport org.springside.modules.utils.Threads;\nimport org.springside.modules.utils.Threads.WrapExceptionRunnable;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.util.Pool;\n\n/**\n * Master选举实现, 基于setNx()与expire()两大API.\n * 与每次使用setNx争夺的分布式锁不同，Master用setNX争夺Master Key成功后，会不断的更新key的expireTime，保持自己的master地位，直到自己倒掉了不能再更新为止。\n * 其他Slave会定时检查Master Key是否已过期，如果已过期则重新发起争夺。\n *\n * 其他服务可以随时调用isMaster()，查询自己是否master, 与MasterElector的内部定时操作是解耦的。\n *\n * 在最差情况下，可能有两倍的intervalSecs内集群内没有Master。\n *\n * @author calvin\n */\npublic class MasterElector implements Runnable {\n\n    public static final String DEFAULT_MASTER_KEY = \"master\";\n\n    private static Logger logger = LoggerFactory.getLogger(MasterElector.class);\n\n    private ScheduledExecutorService internalScheduledThreadPool;\n\n    private ScheduledFuture electorJob;\n\n    private int intervalSecs;\n\n    private int expireSecs;\n\n    private JedisTemplate jedisTemplate;\n\n    private String hostId;\n\n    private String masterKey = DEFAULT_MASTER_KEY;\n\n    private AtomicBoolean master = new AtomicBoolean(false);\n\n    public MasterElector(Pool<Jedis> jedisPool, int intervalSecs) {\n        this.jedisTemplate = new JedisTemplate(jedisPool);\n        this.intervalSecs = intervalSecs;\n        this.expireSecs = intervalSecs + (intervalSecs / 2);\n    }\n\n    /**\n     * 返回当前实例是否master。\n     */\n    public boolean isMaster() {\n        return master.get();\n    }\n\n    /**\n     * 启动抢注线程, 自行创建scheduler线程池.\n     */\n    public void start() {\n        internalScheduledThreadPool = Executors.newScheduledThreadPool(1, Threads.buildJobFactory(\"Master-Elector-\" + masterKey + \"-%d\"));\n        start(internalScheduledThreadPool);\n    }\n\n    /**\n     * 启动抢注线程, 使用传入的scheduler线程池.\n     */\n    public void start(ScheduledExecutorService scheduledThreadPool) {\n        hostId = generateHostId();\n        electorJob = scheduledThreadPool.scheduleAtFixedRate(new WrapExceptionRunnable(this), 0, intervalSecs, TimeUnit.SECONDS);\n        logger.info(\"masterElector for {} start, hostName:{}.\", masterKey, hostId);\n    }\n\n    /**\n     * 停止抢注线程，\n     * 如果是master, 则主动注销key.\n     * 如果是自行创建的threadPool则自行销毁,最多5秒超时.\n     */\n    public void stop() {\n        if (master.get()) {\n            jedisTemplate.del(masterKey);\n        }\n        electorJob.cancel(false);\n        if (internalScheduledThreadPool != null) {\n            Threads.normalShutdown(internalScheduledThreadPool, 5, TimeUnit.SECONDS);\n        }\n    }\n\n    /**\n     * 生成host id的方法，可在子类重载.\n     */\n    protected String generateHostId() {\n        String host = \"localhost\";\n        try {\n            host = InetAddress.getLocalHost().getHostName();\n        } catch (UnknownHostException e) {\n            logger.warn(\"can not get hostName, use localhost as default.\", e);\n        }\n        host = host + \"-\" + new SecureRandom().nextInt(10000);\n        return host;\n    }\n\n    @Override\n    public void run() {\n        jedisTemplate.execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                String masterFromRedis = jedis.get(masterKey);\n                logger.debug(\"master {} is {}\", masterKey, masterFromRedis);\n                // 如果masterKey返回值为空，证明集群刚重启 或master已crash，尝试注册为Master.\n                if (masterFromRedis == null) {\n                    // 使用setnx，保证只有一个Client能注册为Master.\n                    if (JedisUtils.isStatusOk(jedis.set(masterKey, hostId, \"NX\", \"EX\", expireSecs))) {\n                        master.set(true);\n                        logger.info(\"master {} is changed to {}.\", masterKey, hostId);\n                        return;\n                    } else {\n                        master.set(false);\n                        return;\n                    }\n                }\n                // 如果我已是master，更新key的超时时间\n                if (hostId.equals(masterFromRedis)) {\n                    jedis.expire(masterKey, expireSecs);\n                    master.set(true);\n                } else {\n                    master.set(false);\n                }\n            }\n        });\n    }\n\n    /**\n     * 如果应用中有多种master，设置唯一的master name。\n     */\n    public void setMasterKey(String masterKey) {\n        this.masterKey = masterKey;\n    }\n\n    // for test\n    void setHostId(String hostId) {\n        this.hostId = hostId;\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/elector/MasterElectorTest.java",
		"test_prompt": "// MasterElectorTest.java\npackage org.springside.modules.nosql.redis.elector;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.security.SecureRandom;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ScheduledFuture;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springside.modules.nosql.redis.JedisTemplate;\nimport org.springside.modules.nosql.redis.JedisTemplate.JedisActionNoResult;\nimport org.springside.modules.nosql.redis.JedisUtils;\nimport org.springside.modules.utils.Threads;\nimport org.springside.modules.utils.Threads.WrapExceptionRunnable;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MasterElector}.\n* It contains ten unit test cases for the {@link MasterElector#isMaster()} method.\n*/\nclass MasterElectorTest {"
	},
	{
		"original_code": "// JedisScriptExecutor.java\n/**\r\n * ****************************************************************************\r\n *  Copyright (c) 2005, 2014 springside.github.io\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * *****************************************************************************\r\n */\r\npackage org.springside.modules.nosql.redis;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.apache.commons.lang3.Validate;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.core.io.DefaultResourceLoader;\r\nimport org.springframework.core.io.Resource;\r\nimport org.springside.modules.nosql.redis.JedisTemplate.JedisAction;\r\nimport redis.clients.jedis.Jedis;\r\nimport redis.clients.jedis.exceptions.JedisDataException;\r\nimport redis.clients.util.Pool;\r\n\r\n/**\r\n * 装载并执行Lua Script，如果服务器上因为集群多台服务器或重启等原因没有装载script，会自动重新装载后重试。\r\n */\r\npublic class JedisScriptExecutor {\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(JedisScriptExecutor.class);\r\n\r\n    private JedisTemplate jedisTemplate;\r\n\r\n    private String script;\r\n\r\n    private String sha1;\r\n\r\n    public JedisScriptExecutor(Pool<Jedis> jedisPool) {\r\n        this.jedisTemplate = new JedisTemplate(jedisPool);\r\n    }\r\n\r\n    public JedisScriptExecutor(JedisTemplate jedisTemplate) {\r\n        this.jedisTemplate = jedisTemplate;\r\n    }\r\n\r\n    /**\r\n     * 装载Lua Script。\r\n     * 如果Script出错，抛出JedisDataException。\r\n     */\r\n    public void load(final String scriptContent) throws JedisDataException {\r\n        sha1 = jedisTemplate.execute(new JedisTemplate.JedisAction<String>() {\r\n\r\n            @Override\r\n            public String action(Jedis jedis) {\r\n                return jedis.scriptLoad(scriptContent);\r\n            }\r\n        });\r\n        script = scriptContent;\r\n        logger.debug(\"Script \\\"{}\\\" had been loaded as {}\", scriptContent, sha1);\r\n    }\r\n\r\n    /**\r\n     * 从文件加载Lua Script, 文件路径格式为Spring Resource的格式.\r\n     */\r\n    public void loadFromFile(final String scriptPath) throws JedisDataException {\r\n        String scriptContent;\r\n        try {\r\n            Resource resource = new DefaultResourceLoader().getResource(scriptPath);\r\n            scriptContent = FileUtils.readFileToString(resource.getFile());\r\n        } catch (IOException e) {\r\n            throw new IllegalArgumentException(scriptPath + \" is not exist.\", e);\r\n        }\r\n        load(scriptContent);\r\n    }\r\n\r\n    /**\r\n     * 执行Lua Script, 如果Redis服务器上还没装载Script则自动装载并重试。\r\n     * keys与args不允许为null.\r\n     */\r\n    public Object execute(final String[] keys, final String[] args) throws IllegalArgumentException {\r\n        Validate.notNull(keys, \"keys can't be null.\");\r\n        Validate.notNull(args, \"args can't be null.\");\r\n        return execute(Arrays.asList(keys), Arrays.asList(args));\r\n    }\r\n\r\n    /**\r\n     * 执行Lua Script, 如果Redis服务器上还没装载Script则自动装载并重试。\r\n     * keys与args不允许为null.\r\n     */\r\n    public Object execute(final List<String> keys, final List<String> args) throws IllegalArgumentException {\r\n        Validate.notNull(keys, \"keys can't be null.\");\r\n        Validate.notNull(args, \"args can't be null.\");\r\n        return jedisTemplate.execute(new JedisAction<Object>() {\r\n\r\n            @Override\r\n            public Object action(Jedis jedis) {\r\n                try {\r\n                    return jedis.evalsha(sha1, keys, args);\r\n                } catch (JedisDataException e) {\r\n                    logger.warn(\"Script {} is not loaded in server yet or the script is wrong, try to reload and run it again.\", script, e);\r\n                    return jedis.eval(script, keys, args);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisScriptExecutorTest0.java",
		"test_prompt": "// JedisScriptExecutorTest0.java\npackage org.springside.modules.nosql.redis;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springside.modules.nosql.redis.JedisTemplate.JedisAction;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisDataException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisScriptExecutor}.\n* It contains ten unit test cases for the {@link JedisScriptExecutor#execute(String[], String[])} method.\n*/\nclass JedisScriptExecutorTest0 {"
	},
	{
		"original_code": "// JedisScriptExecutor.java\n/**\r\n * ****************************************************************************\r\n *  Copyright (c) 2005, 2014 springside.github.io\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * *****************************************************************************\r\n */\r\npackage org.springside.modules.nosql.redis;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.apache.commons.lang3.Validate;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.core.io.DefaultResourceLoader;\r\nimport org.springframework.core.io.Resource;\r\nimport org.springside.modules.nosql.redis.JedisTemplate.JedisAction;\r\nimport redis.clients.jedis.Jedis;\r\nimport redis.clients.jedis.exceptions.JedisDataException;\r\nimport redis.clients.util.Pool;\r\n\r\n/**\r\n * 装载并执行Lua Script，如果服务器上因为集群多台服务器或重启等原因没有装载script，会自动重新装载后重试。\r\n */\r\npublic class JedisScriptExecutor {\r\n\r\n    private static Logger logger = LoggerFactory.getLogger(JedisScriptExecutor.class);\r\n\r\n    private JedisTemplate jedisTemplate;\r\n\r\n    private String script;\r\n\r\n    private String sha1;\r\n\r\n    public JedisScriptExecutor(Pool<Jedis> jedisPool) {\r\n        this.jedisTemplate = new JedisTemplate(jedisPool);\r\n    }\r\n\r\n    public JedisScriptExecutor(JedisTemplate jedisTemplate) {\r\n        this.jedisTemplate = jedisTemplate;\r\n    }\r\n\r\n    /**\r\n     * 装载Lua Script。\r\n     * 如果Script出错，抛出JedisDataException。\r\n     */\r\n    public void load(final String scriptContent) throws JedisDataException {\r\n        sha1 = jedisTemplate.execute(new JedisTemplate.JedisAction<String>() {\r\n\r\n            @Override\r\n            public String action(Jedis jedis) {\r\n                return jedis.scriptLoad(scriptContent);\r\n            }\r\n        });\r\n        script = scriptContent;\r\n        logger.debug(\"Script \\\"{}\\\" had been loaded as {}\", scriptContent, sha1);\r\n    }\r\n\r\n    /**\r\n     * 从文件加载Lua Script, 文件路径格式为Spring Resource的格式.\r\n     */\r\n    public void loadFromFile(final String scriptPath) throws JedisDataException {\r\n        String scriptContent;\r\n        try {\r\n            Resource resource = new DefaultResourceLoader().getResource(scriptPath);\r\n            scriptContent = FileUtils.readFileToString(resource.getFile());\r\n        } catch (IOException e) {\r\n            throw new IllegalArgumentException(scriptPath + \" is not exist.\", e);\r\n        }\r\n        load(scriptContent);\r\n    }\r\n\r\n    /**\r\n     * 执行Lua Script, 如果Redis服务器上还没装载Script则自动装载并重试。\r\n     * keys与args不允许为null.\r\n     */\r\n    public Object execute(final String[] keys, final String[] args) throws IllegalArgumentException {\r\n        Validate.notNull(keys, \"keys can't be null.\");\r\n        Validate.notNull(args, \"args can't be null.\");\r\n        return execute(Arrays.asList(keys), Arrays.asList(args));\r\n    }\r\n\r\n    /**\r\n     * 执行Lua Script, 如果Redis服务器上还没装载Script则自动装载并重试。\r\n     * keys与args不允许为null.\r\n     */\r\n    public Object execute(final List<String> keys, final List<String> args) throws IllegalArgumentException {\r\n        Validate.notNull(keys, \"keys can't be null.\");\r\n        Validate.notNull(args, \"args can't be null.\");\r\n        return jedisTemplate.execute(new JedisAction<Object>() {\r\n\r\n            @Override\r\n            public Object action(Jedis jedis) {\r\n                try {\r\n                    return jedis.evalsha(sha1, keys, args);\r\n                } catch (JedisDataException e) {\r\n                    logger.warn(\"Script {} is not loaded in server yet or the script is wrong, try to reload and run it again.\", script, e);\r\n                    return jedis.eval(script, keys, args);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisScriptExecutorTest1.java",
		"test_prompt": "// JedisScriptExecutorTest1.java\npackage org.springside.modules.nosql.redis;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.core.io.Resource;\nimport org.springside.modules.nosql.redis.JedisTemplate.JedisAction;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisDataException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisScriptExecutor}.\n* It contains ten unit test cases for the {@link JedisScriptExecutor#execute(List, List)} method.\n*/\nclass JedisScriptExecutorTest1 {"
	},
	{
		"original_code": "// JedisTemplate.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\n\n/**\n * JedisTemplate 提供了一个template方法，负责对Jedis连接的获取与归还。\n * JedisAction<T> 和 JedisActionNoResult两种回调接口，适用于有无返回值两种情况。\n * 同时提供一些最常用函数的封装, 如get/set/zadd等。\n */\npublic class JedisTemplate {\n\n    private static Logger logger = LoggerFactory.getLogger(JedisTemplate.class);\n\n    private Pool<Jedis> jedisPool;\n\n    public JedisTemplate(Pool<Jedis> jedisPool) {\n        this.jedisPool = jedisPool;\n    }\n\n    /**\n     * 执行有返回结果的action。\n     */\n    public <T> T execute(JedisAction<T> jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            return jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 执行无返回结果的action。\n     */\n    public void execute(JedisActionNoResult jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 根据连接是否已中断的标志，分别调用returnBrokenResource或returnResource。\n     */\n    protected void closeResource(Jedis jedis, boolean connectionBroken) {\n        if (jedis != null) {\n            try {\n                if (connectionBroken) {\n                    jedisPool.returnBrokenResource(jedis);\n                } else {\n                    jedisPool.returnResource(jedis);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error happen when return jedis to pool, try to close it directly.\", e);\n                JedisUtils.closeJedis(jedis);\n            }\n        }\n    }\n\n    /**\n     * 获取内部的pool做进一步的动作。\n     */\n    public Pool<Jedis> getJedisPool() {\n        return jedisPool;\n    }\n\n    /**\n     * 有返回结果的回调接口定义。\n     */\n    public interface JedisAction<T> {\n\n        T action(Jedis jedis);\n    }\n\n    /**\n     * 无返回结果的回调接口定义。\n     */\n    public interface JedisActionNoResult {\n\n        void action(Jedis jedis);\n    }\n\n    // ////////////// 常用方法的封装 ///////////////////////// //\n    // ////////////// 公共 ///////////////////////////\n    /**\n     * 删除key, 如果key存在返回true, 否则返回false。\n     */\n    public Boolean del(final String... keys) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.del(keys) == 1 ? true : false;\n            }\n        });\n    }\n\n    public void flushDB() {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.flushDB();\n            }\n        });\n    }\n\n    // ////////////// 关于String ///////////////////////////\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public String get(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.get(key);\n            }\n        });\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Long getAsLong(final String key) {\n        String result = get(key);\n        return result != null ? Long.valueOf(result) : null;\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Integer getAsInt(final String key) {\n        String result = get(key);\n        return result != null ? Integer.valueOf(result) : null;\n    }\n\n    public void set(final String key, final String value) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.set(key, value);\n            }\n        });\n    }\n\n    public void setex(final String key, final String value, final int seconds) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.setex(key, seconds, value);\n            }\n        });\n    }\n\n    /**\n     * 如果key还不存在则进行设置，返回true，否则返回false.\n     */\n    public Boolean setnx(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.setnx(key, value) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 综合setNX与setEx的效果。\n     */\n    public Boolean setnxex(final String key, final String value, final int seconds) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                String result = jedis.set(key, value, \"NX\", \"EX\", seconds);\n                return JedisUtils.isStatusOk(result);\n            }\n        });\n    }\n\n    public Long incr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.incr(key);\n            }\n        });\n    }\n\n    public Long decr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.decr(key);\n            }\n        });\n    }\n\n    // ////////////// 关于List ///////////////////////////\n    public void lpush(final String key, final String... values) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.lpush(key, values);\n            }\n        });\n    }\n\n    public String rpop(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.rpop(key);\n            }\n        });\n    }\n\n    /**\n     * 返回List长度, key不存在时返回0，key类型不是list时抛出异常.\n     */\n    public Long llen(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.llen(key);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的第一个等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremOne(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 1, value);\n                return (count == 1);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的所有等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremAll(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 0, value);\n                return (count > 0);\n            }\n        });\n    }\n\n    // ////////////// 关于Sorted Set ///////////////////////////\n    /**\n     * 加入Sorted set, 如果member在Set里已存在, 只更新score并返回false, 否则返回true.\n     */\n    public Boolean zadd(final String key, final String member, final double score) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zadd(key, score, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 删除sorted set中的元素，成功删除返回true，key或member不存在返回false。\n     */\n    public Boolean zrem(final String key, final String member) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zrem(key, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 当key不存在时返回null.\n     */\n    public Double zscore(final String key, final String member) {\n        return execute(new JedisAction<Double>() {\n\n            @Override\n            public Double action(Jedis jedis) {\n                return jedis.zscore(key, member);\n            }\n        });\n    }\n\n    /**\n     * 返回sorted set长度, key不存在时返回0.\n     */\n    public Long zcard(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.zcard(key);\n            }\n        });\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisTemplateTest0.java",
		"test_prompt": "// JedisTemplateTest0.java\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisTemplate}.\n* It contains ten unit test cases for the {@link JedisTemplate#execute(JedisAction)} method.\n*/\nclass JedisTemplateTest0 {"
	},
	{
		"original_code": "// JedisTemplate.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\n\n/**\n * JedisTemplate 提供了一个template方法，负责对Jedis连接的获取与归还。\n * JedisAction<T> 和 JedisActionNoResult两种回调接口，适用于有无返回值两种情况。\n * 同时提供一些最常用函数的封装, 如get/set/zadd等。\n */\npublic class JedisTemplate {\n\n    private static Logger logger = LoggerFactory.getLogger(JedisTemplate.class);\n\n    private Pool<Jedis> jedisPool;\n\n    public JedisTemplate(Pool<Jedis> jedisPool) {\n        this.jedisPool = jedisPool;\n    }\n\n    /**\n     * 执行有返回结果的action。\n     */\n    public <T> T execute(JedisAction<T> jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            return jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 执行无返回结果的action。\n     */\n    public void execute(JedisActionNoResult jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 根据连接是否已中断的标志，分别调用returnBrokenResource或returnResource。\n     */\n    protected void closeResource(Jedis jedis, boolean connectionBroken) {\n        if (jedis != null) {\n            try {\n                if (connectionBroken) {\n                    jedisPool.returnBrokenResource(jedis);\n                } else {\n                    jedisPool.returnResource(jedis);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error happen when return jedis to pool, try to close it directly.\", e);\n                JedisUtils.closeJedis(jedis);\n            }\n        }\n    }\n\n    /**\n     * 获取内部的pool做进一步的动作。\n     */\n    public Pool<Jedis> getJedisPool() {\n        return jedisPool;\n    }\n\n    /**\n     * 有返回结果的回调接口定义。\n     */\n    public interface JedisAction<T> {\n\n        T action(Jedis jedis);\n    }\n\n    /**\n     * 无返回结果的回调接口定义。\n     */\n    public interface JedisActionNoResult {\n\n        void action(Jedis jedis);\n    }\n\n    // ////////////// 常用方法的封装 ///////////////////////// //\n    // ////////////// 公共 ///////////////////////////\n    /**\n     * 删除key, 如果key存在返回true, 否则返回false。\n     */\n    public Boolean del(final String... keys) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.del(keys) == 1 ? true : false;\n            }\n        });\n    }\n\n    public void flushDB() {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.flushDB();\n            }\n        });\n    }\n\n    // ////////////// 关于String ///////////////////////////\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public String get(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.get(key);\n            }\n        });\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Long getAsLong(final String key) {\n        String result = get(key);\n        return result != null ? Long.valueOf(result) : null;\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Integer getAsInt(final String key) {\n        String result = get(key);\n        return result != null ? Integer.valueOf(result) : null;\n    }\n\n    public void set(final String key, final String value) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.set(key, value);\n            }\n        });\n    }\n\n    public void setex(final String key, final String value, final int seconds) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.setex(key, seconds, value);\n            }\n        });\n    }\n\n    /**\n     * 如果key还不存在则进行设置，返回true，否则返回false.\n     */\n    public Boolean setnx(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.setnx(key, value) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 综合setNX与setEx的效果。\n     */\n    public Boolean setnxex(final String key, final String value, final int seconds) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                String result = jedis.set(key, value, \"NX\", \"EX\", seconds);\n                return JedisUtils.isStatusOk(result);\n            }\n        });\n    }\n\n    public Long incr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.incr(key);\n            }\n        });\n    }\n\n    public Long decr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.decr(key);\n            }\n        });\n    }\n\n    // ////////////// 关于List ///////////////////////////\n    public void lpush(final String key, final String... values) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.lpush(key, values);\n            }\n        });\n    }\n\n    public String rpop(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.rpop(key);\n            }\n        });\n    }\n\n    /**\n     * 返回List长度, key不存在时返回0，key类型不是list时抛出异常.\n     */\n    public Long llen(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.llen(key);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的第一个等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremOne(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 1, value);\n                return (count == 1);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的所有等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremAll(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 0, value);\n                return (count > 0);\n            }\n        });\n    }\n\n    // ////////////// 关于Sorted Set ///////////////////////////\n    /**\n     * 加入Sorted set, 如果member在Set里已存在, 只更新score并返回false, 否则返回true.\n     */\n    public Boolean zadd(final String key, final String member, final double score) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zadd(key, score, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 删除sorted set中的元素，成功删除返回true，key或member不存在返回false。\n     */\n    public Boolean zrem(final String key, final String member) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zrem(key, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 当key不存在时返回null.\n     */\n    public Double zscore(final String key, final String member) {\n        return execute(new JedisAction<Double>() {\n\n            @Override\n            public Double action(Jedis jedis) {\n                return jedis.zscore(key, member);\n            }\n        });\n    }\n\n    /**\n     * 返回sorted set长度, key不存在时返回0.\n     */\n    public Long zcard(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.zcard(key);\n            }\n        });\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisTemplateTest1.java",
		"test_prompt": "// JedisTemplateTest1.java\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisTemplate}.\n* It contains ten unit test cases for the {@link JedisTemplate#del(String[])} method.\n*/\nclass JedisTemplateTest1 {"
	},
	{
		"original_code": "// JedisTemplate.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\n\n/**\n * JedisTemplate 提供了一个template方法，负责对Jedis连接的获取与归还。\n * JedisAction<T> 和 JedisActionNoResult两种回调接口，适用于有无返回值两种情况。\n * 同时提供一些最常用函数的封装, 如get/set/zadd等。\n */\npublic class JedisTemplate {\n\n    private static Logger logger = LoggerFactory.getLogger(JedisTemplate.class);\n\n    private Pool<Jedis> jedisPool;\n\n    public JedisTemplate(Pool<Jedis> jedisPool) {\n        this.jedisPool = jedisPool;\n    }\n\n    /**\n     * 执行有返回结果的action。\n     */\n    public <T> T execute(JedisAction<T> jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            return jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 执行无返回结果的action。\n     */\n    public void execute(JedisActionNoResult jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 根据连接是否已中断的标志，分别调用returnBrokenResource或returnResource。\n     */\n    protected void closeResource(Jedis jedis, boolean connectionBroken) {\n        if (jedis != null) {\n            try {\n                if (connectionBroken) {\n                    jedisPool.returnBrokenResource(jedis);\n                } else {\n                    jedisPool.returnResource(jedis);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error happen when return jedis to pool, try to close it directly.\", e);\n                JedisUtils.closeJedis(jedis);\n            }\n        }\n    }\n\n    /**\n     * 获取内部的pool做进一步的动作。\n     */\n    public Pool<Jedis> getJedisPool() {\n        return jedisPool;\n    }\n\n    /**\n     * 有返回结果的回调接口定义。\n     */\n    public interface JedisAction<T> {\n\n        T action(Jedis jedis);\n    }\n\n    /**\n     * 无返回结果的回调接口定义。\n     */\n    public interface JedisActionNoResult {\n\n        void action(Jedis jedis);\n    }\n\n    // ////////////// 常用方法的封装 ///////////////////////// //\n    // ////////////// 公共 ///////////////////////////\n    /**\n     * 删除key, 如果key存在返回true, 否则返回false。\n     */\n    public Boolean del(final String... keys) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.del(keys) == 1 ? true : false;\n            }\n        });\n    }\n\n    public void flushDB() {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.flushDB();\n            }\n        });\n    }\n\n    // ////////////// 关于String ///////////////////////////\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public String get(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.get(key);\n            }\n        });\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Long getAsLong(final String key) {\n        String result = get(key);\n        return result != null ? Long.valueOf(result) : null;\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Integer getAsInt(final String key) {\n        String result = get(key);\n        return result != null ? Integer.valueOf(result) : null;\n    }\n\n    public void set(final String key, final String value) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.set(key, value);\n            }\n        });\n    }\n\n    public void setex(final String key, final String value, final int seconds) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.setex(key, seconds, value);\n            }\n        });\n    }\n\n    /**\n     * 如果key还不存在则进行设置，返回true，否则返回false.\n     */\n    public Boolean setnx(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.setnx(key, value) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 综合setNX与setEx的效果。\n     */\n    public Boolean setnxex(final String key, final String value, final int seconds) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                String result = jedis.set(key, value, \"NX\", \"EX\", seconds);\n                return JedisUtils.isStatusOk(result);\n            }\n        });\n    }\n\n    public Long incr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.incr(key);\n            }\n        });\n    }\n\n    public Long decr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.decr(key);\n            }\n        });\n    }\n\n    // ////////////// 关于List ///////////////////////////\n    public void lpush(final String key, final String... values) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.lpush(key, values);\n            }\n        });\n    }\n\n    public String rpop(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.rpop(key);\n            }\n        });\n    }\n\n    /**\n     * 返回List长度, key不存在时返回0，key类型不是list时抛出异常.\n     */\n    public Long llen(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.llen(key);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的第一个等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremOne(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 1, value);\n                return (count == 1);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的所有等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremAll(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 0, value);\n                return (count > 0);\n            }\n        });\n    }\n\n    // ////////////// 关于Sorted Set ///////////////////////////\n    /**\n     * 加入Sorted set, 如果member在Set里已存在, 只更新score并返回false, 否则返回true.\n     */\n    public Boolean zadd(final String key, final String member, final double score) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zadd(key, score, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 删除sorted set中的元素，成功删除返回true，key或member不存在返回false。\n     */\n    public Boolean zrem(final String key, final String member) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zrem(key, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 当key不存在时返回null.\n     */\n    public Double zscore(final String key, final String member) {\n        return execute(new JedisAction<Double>() {\n\n            @Override\n            public Double action(Jedis jedis) {\n                return jedis.zscore(key, member);\n            }\n        });\n    }\n\n    /**\n     * 返回sorted set长度, key不存在时返回0.\n     */\n    public Long zcard(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.zcard(key);\n            }\n        });\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisTemplateTest2.java",
		"test_prompt": "// JedisTemplateTest2.java\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisTemplate}.\n* It contains ten unit test cases for the {@link JedisTemplate#incr(String)} method.\n*/\nclass JedisTemplateTest2 {"
	},
	{
		"original_code": "// JedisTemplate.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\n\n/**\n * JedisTemplate 提供了一个template方法，负责对Jedis连接的获取与归还。\n * JedisAction<T> 和 JedisActionNoResult两种回调接口，适用于有无返回值两种情况。\n * 同时提供一些最常用函数的封装, 如get/set/zadd等。\n */\npublic class JedisTemplate {\n\n    private static Logger logger = LoggerFactory.getLogger(JedisTemplate.class);\n\n    private Pool<Jedis> jedisPool;\n\n    public JedisTemplate(Pool<Jedis> jedisPool) {\n        this.jedisPool = jedisPool;\n    }\n\n    /**\n     * 执行有返回结果的action。\n     */\n    public <T> T execute(JedisAction<T> jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            return jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 执行无返回结果的action。\n     */\n    public void execute(JedisActionNoResult jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 根据连接是否已中断的标志，分别调用returnBrokenResource或returnResource。\n     */\n    protected void closeResource(Jedis jedis, boolean connectionBroken) {\n        if (jedis != null) {\n            try {\n                if (connectionBroken) {\n                    jedisPool.returnBrokenResource(jedis);\n                } else {\n                    jedisPool.returnResource(jedis);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error happen when return jedis to pool, try to close it directly.\", e);\n                JedisUtils.closeJedis(jedis);\n            }\n        }\n    }\n\n    /**\n     * 获取内部的pool做进一步的动作。\n     */\n    public Pool<Jedis> getJedisPool() {\n        return jedisPool;\n    }\n\n    /**\n     * 有返回结果的回调接口定义。\n     */\n    public interface JedisAction<T> {\n\n        T action(Jedis jedis);\n    }\n\n    /**\n     * 无返回结果的回调接口定义。\n     */\n    public interface JedisActionNoResult {\n\n        void action(Jedis jedis);\n    }\n\n    // ////////////// 常用方法的封装 ///////////////////////// //\n    // ////////////// 公共 ///////////////////////////\n    /**\n     * 删除key, 如果key存在返回true, 否则返回false。\n     */\n    public Boolean del(final String... keys) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.del(keys) == 1 ? true : false;\n            }\n        });\n    }\n\n    public void flushDB() {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.flushDB();\n            }\n        });\n    }\n\n    // ////////////// 关于String ///////////////////////////\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public String get(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.get(key);\n            }\n        });\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Long getAsLong(final String key) {\n        String result = get(key);\n        return result != null ? Long.valueOf(result) : null;\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Integer getAsInt(final String key) {\n        String result = get(key);\n        return result != null ? Integer.valueOf(result) : null;\n    }\n\n    public void set(final String key, final String value) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.set(key, value);\n            }\n        });\n    }\n\n    public void setex(final String key, final String value, final int seconds) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.setex(key, seconds, value);\n            }\n        });\n    }\n\n    /**\n     * 如果key还不存在则进行设置，返回true，否则返回false.\n     */\n    public Boolean setnx(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.setnx(key, value) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 综合setNX与setEx的效果。\n     */\n    public Boolean setnxex(final String key, final String value, final int seconds) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                String result = jedis.set(key, value, \"NX\", \"EX\", seconds);\n                return JedisUtils.isStatusOk(result);\n            }\n        });\n    }\n\n    public Long incr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.incr(key);\n            }\n        });\n    }\n\n    public Long decr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.decr(key);\n            }\n        });\n    }\n\n    // ////////////// 关于List ///////////////////////////\n    public void lpush(final String key, final String... values) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.lpush(key, values);\n            }\n        });\n    }\n\n    public String rpop(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.rpop(key);\n            }\n        });\n    }\n\n    /**\n     * 返回List长度, key不存在时返回0，key类型不是list时抛出异常.\n     */\n    public Long llen(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.llen(key);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的第一个等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremOne(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 1, value);\n                return (count == 1);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的所有等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremAll(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 0, value);\n                return (count > 0);\n            }\n        });\n    }\n\n    // ////////////// 关于Sorted Set ///////////////////////////\n    /**\n     * 加入Sorted set, 如果member在Set里已存在, 只更新score并返回false, 否则返回true.\n     */\n    public Boolean zadd(final String key, final String member, final double score) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zadd(key, score, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 删除sorted set中的元素，成功删除返回true，key或member不存在返回false。\n     */\n    public Boolean zrem(final String key, final String member) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zrem(key, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 当key不存在时返回null.\n     */\n    public Double zscore(final String key, final String member) {\n        return execute(new JedisAction<Double>() {\n\n            @Override\n            public Double action(Jedis jedis) {\n                return jedis.zscore(key, member);\n            }\n        });\n    }\n\n    /**\n     * 返回sorted set长度, key不存在时返回0.\n     */\n    public Long zcard(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.zcard(key);\n            }\n        });\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisTemplateTest3.java",
		"test_prompt": "// JedisTemplateTest3.java\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisTemplate}.\n* It contains ten unit test cases for the {@link JedisTemplate#decr(String)} method.\n*/\nclass JedisTemplateTest3 {"
	},
	{
		"original_code": "// JedisTemplate.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\n\n/**\n * JedisTemplate 提供了一个template方法，负责对Jedis连接的获取与归还。\n * JedisAction<T> 和 JedisActionNoResult两种回调接口，适用于有无返回值两种情况。\n * 同时提供一些最常用函数的封装, 如get/set/zadd等。\n */\npublic class JedisTemplate {\n\n    private static Logger logger = LoggerFactory.getLogger(JedisTemplate.class);\n\n    private Pool<Jedis> jedisPool;\n\n    public JedisTemplate(Pool<Jedis> jedisPool) {\n        this.jedisPool = jedisPool;\n    }\n\n    /**\n     * 执行有返回结果的action。\n     */\n    public <T> T execute(JedisAction<T> jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            return jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 执行无返回结果的action。\n     */\n    public void execute(JedisActionNoResult jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 根据连接是否已中断的标志，分别调用returnBrokenResource或returnResource。\n     */\n    protected void closeResource(Jedis jedis, boolean connectionBroken) {\n        if (jedis != null) {\n            try {\n                if (connectionBroken) {\n                    jedisPool.returnBrokenResource(jedis);\n                } else {\n                    jedisPool.returnResource(jedis);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error happen when return jedis to pool, try to close it directly.\", e);\n                JedisUtils.closeJedis(jedis);\n            }\n        }\n    }\n\n    /**\n     * 获取内部的pool做进一步的动作。\n     */\n    public Pool<Jedis> getJedisPool() {\n        return jedisPool;\n    }\n\n    /**\n     * 有返回结果的回调接口定义。\n     */\n    public interface JedisAction<T> {\n\n        T action(Jedis jedis);\n    }\n\n    /**\n     * 无返回结果的回调接口定义。\n     */\n    public interface JedisActionNoResult {\n\n        void action(Jedis jedis);\n    }\n\n    // ////////////// 常用方法的封装 ///////////////////////// //\n    // ////////////// 公共 ///////////////////////////\n    /**\n     * 删除key, 如果key存在返回true, 否则返回false。\n     */\n    public Boolean del(final String... keys) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.del(keys) == 1 ? true : false;\n            }\n        });\n    }\n\n    public void flushDB() {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.flushDB();\n            }\n        });\n    }\n\n    // ////////////// 关于String ///////////////////////////\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public String get(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.get(key);\n            }\n        });\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Long getAsLong(final String key) {\n        String result = get(key);\n        return result != null ? Long.valueOf(result) : null;\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Integer getAsInt(final String key) {\n        String result = get(key);\n        return result != null ? Integer.valueOf(result) : null;\n    }\n\n    public void set(final String key, final String value) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.set(key, value);\n            }\n        });\n    }\n\n    public void setex(final String key, final String value, final int seconds) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.setex(key, seconds, value);\n            }\n        });\n    }\n\n    /**\n     * 如果key还不存在则进行设置，返回true，否则返回false.\n     */\n    public Boolean setnx(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.setnx(key, value) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 综合setNX与setEx的效果。\n     */\n    public Boolean setnxex(final String key, final String value, final int seconds) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                String result = jedis.set(key, value, \"NX\", \"EX\", seconds);\n                return JedisUtils.isStatusOk(result);\n            }\n        });\n    }\n\n    public Long incr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.incr(key);\n            }\n        });\n    }\n\n    public Long decr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.decr(key);\n            }\n        });\n    }\n\n    // ////////////// 关于List ///////////////////////////\n    public void lpush(final String key, final String... values) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.lpush(key, values);\n            }\n        });\n    }\n\n    public String rpop(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.rpop(key);\n            }\n        });\n    }\n\n    /**\n     * 返回List长度, key不存在时返回0，key类型不是list时抛出异常.\n     */\n    public Long llen(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.llen(key);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的第一个等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremOne(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 1, value);\n                return (count == 1);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的所有等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremAll(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 0, value);\n                return (count > 0);\n            }\n        });\n    }\n\n    // ////////////// 关于Sorted Set ///////////////////////////\n    /**\n     * 加入Sorted set, 如果member在Set里已存在, 只更新score并返回false, 否则返回true.\n     */\n    public Boolean zadd(final String key, final String member, final double score) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zadd(key, score, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 删除sorted set中的元素，成功删除返回true，key或member不存在返回false。\n     */\n    public Boolean zrem(final String key, final String member) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zrem(key, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 当key不存在时返回null.\n     */\n    public Double zscore(final String key, final String member) {\n        return execute(new JedisAction<Double>() {\n\n            @Override\n            public Double action(Jedis jedis) {\n                return jedis.zscore(key, member);\n            }\n        });\n    }\n\n    /**\n     * 返回sorted set长度, key不存在时返回0.\n     */\n    public Long zcard(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.zcard(key);\n            }\n        });\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisTemplateTest4.java",
		"test_prompt": "// JedisTemplateTest4.java\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisTemplate}.\n* It contains ten unit test cases for the {@link JedisTemplate#rpop(String)} method.\n*/\nclass JedisTemplateTest4 {"
	},
	{
		"original_code": "// JedisTemplate.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\n\n/**\n * JedisTemplate 提供了一个template方法，负责对Jedis连接的获取与归还。\n * JedisAction<T> 和 JedisActionNoResult两种回调接口，适用于有无返回值两种情况。\n * 同时提供一些最常用函数的封装, 如get/set/zadd等。\n */\npublic class JedisTemplate {\n\n    private static Logger logger = LoggerFactory.getLogger(JedisTemplate.class);\n\n    private Pool<Jedis> jedisPool;\n\n    public JedisTemplate(Pool<Jedis> jedisPool) {\n        this.jedisPool = jedisPool;\n    }\n\n    /**\n     * 执行有返回结果的action。\n     */\n    public <T> T execute(JedisAction<T> jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            return jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 执行无返回结果的action。\n     */\n    public void execute(JedisActionNoResult jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 根据连接是否已中断的标志，分别调用returnBrokenResource或returnResource。\n     */\n    protected void closeResource(Jedis jedis, boolean connectionBroken) {\n        if (jedis != null) {\n            try {\n                if (connectionBroken) {\n                    jedisPool.returnBrokenResource(jedis);\n                } else {\n                    jedisPool.returnResource(jedis);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error happen when return jedis to pool, try to close it directly.\", e);\n                JedisUtils.closeJedis(jedis);\n            }\n        }\n    }\n\n    /**\n     * 获取内部的pool做进一步的动作。\n     */\n    public Pool<Jedis> getJedisPool() {\n        return jedisPool;\n    }\n\n    /**\n     * 有返回结果的回调接口定义。\n     */\n    public interface JedisAction<T> {\n\n        T action(Jedis jedis);\n    }\n\n    /**\n     * 无返回结果的回调接口定义。\n     */\n    public interface JedisActionNoResult {\n\n        void action(Jedis jedis);\n    }\n\n    // ////////////// 常用方法的封装 ///////////////////////// //\n    // ////////////// 公共 ///////////////////////////\n    /**\n     * 删除key, 如果key存在返回true, 否则返回false。\n     */\n    public Boolean del(final String... keys) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.del(keys) == 1 ? true : false;\n            }\n        });\n    }\n\n    public void flushDB() {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.flushDB();\n            }\n        });\n    }\n\n    // ////////////// 关于String ///////////////////////////\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public String get(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.get(key);\n            }\n        });\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Long getAsLong(final String key) {\n        String result = get(key);\n        return result != null ? Long.valueOf(result) : null;\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Integer getAsInt(final String key) {\n        String result = get(key);\n        return result != null ? Integer.valueOf(result) : null;\n    }\n\n    public void set(final String key, final String value) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.set(key, value);\n            }\n        });\n    }\n\n    public void setex(final String key, final String value, final int seconds) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.setex(key, seconds, value);\n            }\n        });\n    }\n\n    /**\n     * 如果key还不存在则进行设置，返回true，否则返回false.\n     */\n    public Boolean setnx(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.setnx(key, value) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 综合setNX与setEx的效果。\n     */\n    public Boolean setnxex(final String key, final String value, final int seconds) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                String result = jedis.set(key, value, \"NX\", \"EX\", seconds);\n                return JedisUtils.isStatusOk(result);\n            }\n        });\n    }\n\n    public Long incr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.incr(key);\n            }\n        });\n    }\n\n    public Long decr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.decr(key);\n            }\n        });\n    }\n\n    // ////////////// 关于List ///////////////////////////\n    public void lpush(final String key, final String... values) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.lpush(key, values);\n            }\n        });\n    }\n\n    public String rpop(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.rpop(key);\n            }\n        });\n    }\n\n    /**\n     * 返回List长度, key不存在时返回0，key类型不是list时抛出异常.\n     */\n    public Long llen(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.llen(key);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的第一个等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremOne(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 1, value);\n                return (count == 1);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的所有等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremAll(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 0, value);\n                return (count > 0);\n            }\n        });\n    }\n\n    // ////////////// 关于Sorted Set ///////////////////////////\n    /**\n     * 加入Sorted set, 如果member在Set里已存在, 只更新score并返回false, 否则返回true.\n     */\n    public Boolean zadd(final String key, final String member, final double score) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zadd(key, score, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 删除sorted set中的元素，成功删除返回true，key或member不存在返回false。\n     */\n    public Boolean zrem(final String key, final String member) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zrem(key, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 当key不存在时返回null.\n     */\n    public Double zscore(final String key, final String member) {\n        return execute(new JedisAction<Double>() {\n\n            @Override\n            public Double action(Jedis jedis) {\n                return jedis.zscore(key, member);\n            }\n        });\n    }\n\n    /**\n     * 返回sorted set长度, key不存在时返回0.\n     */\n    public Long zcard(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.zcard(key);\n            }\n        });\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisTemplateTest5.java",
		"test_prompt": "// JedisTemplateTest5.java\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisTemplate}.\n* It contains ten unit test cases for the {@link JedisTemplate#llen(String)} method.\n*/\nclass JedisTemplateTest5 {"
	},
	{
		"original_code": "// JedisTemplate.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\n\n/**\n * JedisTemplate 提供了一个template方法，负责对Jedis连接的获取与归还。\n * JedisAction<T> 和 JedisActionNoResult两种回调接口，适用于有无返回值两种情况。\n * 同时提供一些最常用函数的封装, 如get/set/zadd等。\n */\npublic class JedisTemplate {\n\n    private static Logger logger = LoggerFactory.getLogger(JedisTemplate.class);\n\n    private Pool<Jedis> jedisPool;\n\n    public JedisTemplate(Pool<Jedis> jedisPool) {\n        this.jedisPool = jedisPool;\n    }\n\n    /**\n     * 执行有返回结果的action。\n     */\n    public <T> T execute(JedisAction<T> jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            return jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 执行无返回结果的action。\n     */\n    public void execute(JedisActionNoResult jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 根据连接是否已中断的标志，分别调用returnBrokenResource或returnResource。\n     */\n    protected void closeResource(Jedis jedis, boolean connectionBroken) {\n        if (jedis != null) {\n            try {\n                if (connectionBroken) {\n                    jedisPool.returnBrokenResource(jedis);\n                } else {\n                    jedisPool.returnResource(jedis);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error happen when return jedis to pool, try to close it directly.\", e);\n                JedisUtils.closeJedis(jedis);\n            }\n        }\n    }\n\n    /**\n     * 获取内部的pool做进一步的动作。\n     */\n    public Pool<Jedis> getJedisPool() {\n        return jedisPool;\n    }\n\n    /**\n     * 有返回结果的回调接口定义。\n     */\n    public interface JedisAction<T> {\n\n        T action(Jedis jedis);\n    }\n\n    /**\n     * 无返回结果的回调接口定义。\n     */\n    public interface JedisActionNoResult {\n\n        void action(Jedis jedis);\n    }\n\n    // ////////////// 常用方法的封装 ///////////////////////// //\n    // ////////////// 公共 ///////////////////////////\n    /**\n     * 删除key, 如果key存在返回true, 否则返回false。\n     */\n    public Boolean del(final String... keys) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.del(keys) == 1 ? true : false;\n            }\n        });\n    }\n\n    public void flushDB() {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.flushDB();\n            }\n        });\n    }\n\n    // ////////////// 关于String ///////////////////////////\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public String get(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.get(key);\n            }\n        });\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Long getAsLong(final String key) {\n        String result = get(key);\n        return result != null ? Long.valueOf(result) : null;\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Integer getAsInt(final String key) {\n        String result = get(key);\n        return result != null ? Integer.valueOf(result) : null;\n    }\n\n    public void set(final String key, final String value) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.set(key, value);\n            }\n        });\n    }\n\n    public void setex(final String key, final String value, final int seconds) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.setex(key, seconds, value);\n            }\n        });\n    }\n\n    /**\n     * 如果key还不存在则进行设置，返回true，否则返回false.\n     */\n    public Boolean setnx(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.setnx(key, value) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 综合setNX与setEx的效果。\n     */\n    public Boolean setnxex(final String key, final String value, final int seconds) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                String result = jedis.set(key, value, \"NX\", \"EX\", seconds);\n                return JedisUtils.isStatusOk(result);\n            }\n        });\n    }\n\n    public Long incr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.incr(key);\n            }\n        });\n    }\n\n    public Long decr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.decr(key);\n            }\n        });\n    }\n\n    // ////////////// 关于List ///////////////////////////\n    public void lpush(final String key, final String... values) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.lpush(key, values);\n            }\n        });\n    }\n\n    public String rpop(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.rpop(key);\n            }\n        });\n    }\n\n    /**\n     * 返回List长度, key不存在时返回0，key类型不是list时抛出异常.\n     */\n    public Long llen(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.llen(key);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的第一个等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremOne(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 1, value);\n                return (count == 1);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的所有等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremAll(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 0, value);\n                return (count > 0);\n            }\n        });\n    }\n\n    // ////////////// 关于Sorted Set ///////////////////////////\n    /**\n     * 加入Sorted set, 如果member在Set里已存在, 只更新score并返回false, 否则返回true.\n     */\n    public Boolean zadd(final String key, final String member, final double score) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zadd(key, score, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 删除sorted set中的元素，成功删除返回true，key或member不存在返回false。\n     */\n    public Boolean zrem(final String key, final String member) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zrem(key, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 当key不存在时返回null.\n     */\n    public Double zscore(final String key, final String member) {\n        return execute(new JedisAction<Double>() {\n\n            @Override\n            public Double action(Jedis jedis) {\n                return jedis.zscore(key, member);\n            }\n        });\n    }\n\n    /**\n     * 返回sorted set长度, key不存在时返回0.\n     */\n    public Long zcard(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.zcard(key);\n            }\n        });\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisTemplateTest6.java",
		"test_prompt": "// JedisTemplateTest6.java\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisTemplate}.\n* It contains ten unit test cases for the {@link JedisTemplate#lremOne(String, String)} method.\n*/\nclass JedisTemplateTest6 {"
	},
	{
		"original_code": "// JedisTemplate.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\n\n/**\n * JedisTemplate 提供了一个template方法，负责对Jedis连接的获取与归还。\n * JedisAction<T> 和 JedisActionNoResult两种回调接口，适用于有无返回值两种情况。\n * 同时提供一些最常用函数的封装, 如get/set/zadd等。\n */\npublic class JedisTemplate {\n\n    private static Logger logger = LoggerFactory.getLogger(JedisTemplate.class);\n\n    private Pool<Jedis> jedisPool;\n\n    public JedisTemplate(Pool<Jedis> jedisPool) {\n        this.jedisPool = jedisPool;\n    }\n\n    /**\n     * 执行有返回结果的action。\n     */\n    public <T> T execute(JedisAction<T> jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            return jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 执行无返回结果的action。\n     */\n    public void execute(JedisActionNoResult jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 根据连接是否已中断的标志，分别调用returnBrokenResource或returnResource。\n     */\n    protected void closeResource(Jedis jedis, boolean connectionBroken) {\n        if (jedis != null) {\n            try {\n                if (connectionBroken) {\n                    jedisPool.returnBrokenResource(jedis);\n                } else {\n                    jedisPool.returnResource(jedis);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error happen when return jedis to pool, try to close it directly.\", e);\n                JedisUtils.closeJedis(jedis);\n            }\n        }\n    }\n\n    /**\n     * 获取内部的pool做进一步的动作。\n     */\n    public Pool<Jedis> getJedisPool() {\n        return jedisPool;\n    }\n\n    /**\n     * 有返回结果的回调接口定义。\n     */\n    public interface JedisAction<T> {\n\n        T action(Jedis jedis);\n    }\n\n    /**\n     * 无返回结果的回调接口定义。\n     */\n    public interface JedisActionNoResult {\n\n        void action(Jedis jedis);\n    }\n\n    // ////////////// 常用方法的封装 ///////////////////////// //\n    // ////////////// 公共 ///////////////////////////\n    /**\n     * 删除key, 如果key存在返回true, 否则返回false。\n     */\n    public Boolean del(final String... keys) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.del(keys) == 1 ? true : false;\n            }\n        });\n    }\n\n    public void flushDB() {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.flushDB();\n            }\n        });\n    }\n\n    // ////////////// 关于String ///////////////////////////\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public String get(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.get(key);\n            }\n        });\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Long getAsLong(final String key) {\n        String result = get(key);\n        return result != null ? Long.valueOf(result) : null;\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Integer getAsInt(final String key) {\n        String result = get(key);\n        return result != null ? Integer.valueOf(result) : null;\n    }\n\n    public void set(final String key, final String value) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.set(key, value);\n            }\n        });\n    }\n\n    public void setex(final String key, final String value, final int seconds) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.setex(key, seconds, value);\n            }\n        });\n    }\n\n    /**\n     * 如果key还不存在则进行设置，返回true，否则返回false.\n     */\n    public Boolean setnx(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.setnx(key, value) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 综合setNX与setEx的效果。\n     */\n    public Boolean setnxex(final String key, final String value, final int seconds) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                String result = jedis.set(key, value, \"NX\", \"EX\", seconds);\n                return JedisUtils.isStatusOk(result);\n            }\n        });\n    }\n\n    public Long incr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.incr(key);\n            }\n        });\n    }\n\n    public Long decr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.decr(key);\n            }\n        });\n    }\n\n    // ////////////// 关于List ///////////////////////////\n    public void lpush(final String key, final String... values) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.lpush(key, values);\n            }\n        });\n    }\n\n    public String rpop(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.rpop(key);\n            }\n        });\n    }\n\n    /**\n     * 返回List长度, key不存在时返回0，key类型不是list时抛出异常.\n     */\n    public Long llen(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.llen(key);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的第一个等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremOne(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 1, value);\n                return (count == 1);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的所有等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremAll(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 0, value);\n                return (count > 0);\n            }\n        });\n    }\n\n    // ////////////// 关于Sorted Set ///////////////////////////\n    /**\n     * 加入Sorted set, 如果member在Set里已存在, 只更新score并返回false, 否则返回true.\n     */\n    public Boolean zadd(final String key, final String member, final double score) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zadd(key, score, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 删除sorted set中的元素，成功删除返回true，key或member不存在返回false。\n     */\n    public Boolean zrem(final String key, final String member) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zrem(key, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 当key不存在时返回null.\n     */\n    public Double zscore(final String key, final String member) {\n        return execute(new JedisAction<Double>() {\n\n            @Override\n            public Double action(Jedis jedis) {\n                return jedis.zscore(key, member);\n            }\n        });\n    }\n\n    /**\n     * 返回sorted set长度, key不存在时返回0.\n     */\n    public Long zcard(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.zcard(key);\n            }\n        });\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisTemplateTest7.java",
		"test_prompt": "// JedisTemplateTest7.java\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisTemplate}.\n* It contains ten unit test cases for the {@link JedisTemplate#lremAll(String, String)} method.\n*/\nclass JedisTemplateTest7 {"
	},
	{
		"original_code": "// JedisTemplate.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\n\n/**\n * JedisTemplate 提供了一个template方法，负责对Jedis连接的获取与归还。\n * JedisAction<T> 和 JedisActionNoResult两种回调接口，适用于有无返回值两种情况。\n * 同时提供一些最常用函数的封装, 如get/set/zadd等。\n */\npublic class JedisTemplate {\n\n    private static Logger logger = LoggerFactory.getLogger(JedisTemplate.class);\n\n    private Pool<Jedis> jedisPool;\n\n    public JedisTemplate(Pool<Jedis> jedisPool) {\n        this.jedisPool = jedisPool;\n    }\n\n    /**\n     * 执行有返回结果的action。\n     */\n    public <T> T execute(JedisAction<T> jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            return jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 执行无返回结果的action。\n     */\n    public void execute(JedisActionNoResult jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 根据连接是否已中断的标志，分别调用returnBrokenResource或returnResource。\n     */\n    protected void closeResource(Jedis jedis, boolean connectionBroken) {\n        if (jedis != null) {\n            try {\n                if (connectionBroken) {\n                    jedisPool.returnBrokenResource(jedis);\n                } else {\n                    jedisPool.returnResource(jedis);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error happen when return jedis to pool, try to close it directly.\", e);\n                JedisUtils.closeJedis(jedis);\n            }\n        }\n    }\n\n    /**\n     * 获取内部的pool做进一步的动作。\n     */\n    public Pool<Jedis> getJedisPool() {\n        return jedisPool;\n    }\n\n    /**\n     * 有返回结果的回调接口定义。\n     */\n    public interface JedisAction<T> {\n\n        T action(Jedis jedis);\n    }\n\n    /**\n     * 无返回结果的回调接口定义。\n     */\n    public interface JedisActionNoResult {\n\n        void action(Jedis jedis);\n    }\n\n    // ////////////// 常用方法的封装 ///////////////////////// //\n    // ////////////// 公共 ///////////////////////////\n    /**\n     * 删除key, 如果key存在返回true, 否则返回false。\n     */\n    public Boolean del(final String... keys) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.del(keys) == 1 ? true : false;\n            }\n        });\n    }\n\n    public void flushDB() {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.flushDB();\n            }\n        });\n    }\n\n    // ////////////// 关于String ///////////////////////////\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public String get(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.get(key);\n            }\n        });\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Long getAsLong(final String key) {\n        String result = get(key);\n        return result != null ? Long.valueOf(result) : null;\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Integer getAsInt(final String key) {\n        String result = get(key);\n        return result != null ? Integer.valueOf(result) : null;\n    }\n\n    public void set(final String key, final String value) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.set(key, value);\n            }\n        });\n    }\n\n    public void setex(final String key, final String value, final int seconds) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.setex(key, seconds, value);\n            }\n        });\n    }\n\n    /**\n     * 如果key还不存在则进行设置，返回true，否则返回false.\n     */\n    public Boolean setnx(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.setnx(key, value) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 综合setNX与setEx的效果。\n     */\n    public Boolean setnxex(final String key, final String value, final int seconds) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                String result = jedis.set(key, value, \"NX\", \"EX\", seconds);\n                return JedisUtils.isStatusOk(result);\n            }\n        });\n    }\n\n    public Long incr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.incr(key);\n            }\n        });\n    }\n\n    public Long decr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.decr(key);\n            }\n        });\n    }\n\n    // ////////////// 关于List ///////////////////////////\n    public void lpush(final String key, final String... values) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.lpush(key, values);\n            }\n        });\n    }\n\n    public String rpop(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.rpop(key);\n            }\n        });\n    }\n\n    /**\n     * 返回List长度, key不存在时返回0，key类型不是list时抛出异常.\n     */\n    public Long llen(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.llen(key);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的第一个等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremOne(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 1, value);\n                return (count == 1);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的所有等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremAll(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 0, value);\n                return (count > 0);\n            }\n        });\n    }\n\n    // ////////////// 关于Sorted Set ///////////////////////////\n    /**\n     * 加入Sorted set, 如果member在Set里已存在, 只更新score并返回false, 否则返回true.\n     */\n    public Boolean zadd(final String key, final String member, final double score) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zadd(key, score, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 删除sorted set中的元素，成功删除返回true，key或member不存在返回false。\n     */\n    public Boolean zrem(final String key, final String member) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zrem(key, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 当key不存在时返回null.\n     */\n    public Double zscore(final String key, final String member) {\n        return execute(new JedisAction<Double>() {\n\n            @Override\n            public Double action(Jedis jedis) {\n                return jedis.zscore(key, member);\n            }\n        });\n    }\n\n    /**\n     * 返回sorted set长度, key不存在时返回0.\n     */\n    public Long zcard(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.zcard(key);\n            }\n        });\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisTemplateTest8.java",
		"test_prompt": "// JedisTemplateTest8.java\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisTemplate}.\n* It contains ten unit test cases for the {@link JedisTemplate#zadd(String, String, double)} method.\n*/\nclass JedisTemplateTest8 {"
	},
	{
		"original_code": "// JedisTemplate.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\n\n/**\n * JedisTemplate 提供了一个template方法，负责对Jedis连接的获取与归还。\n * JedisAction<T> 和 JedisActionNoResult两种回调接口，适用于有无返回值两种情况。\n * 同时提供一些最常用函数的封装, 如get/set/zadd等。\n */\npublic class JedisTemplate {\n\n    private static Logger logger = LoggerFactory.getLogger(JedisTemplate.class);\n\n    private Pool<Jedis> jedisPool;\n\n    public JedisTemplate(Pool<Jedis> jedisPool) {\n        this.jedisPool = jedisPool;\n    }\n\n    /**\n     * 执行有返回结果的action。\n     */\n    public <T> T execute(JedisAction<T> jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            return jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 执行无返回结果的action。\n     */\n    public void execute(JedisActionNoResult jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 根据连接是否已中断的标志，分别调用returnBrokenResource或returnResource。\n     */\n    protected void closeResource(Jedis jedis, boolean connectionBroken) {\n        if (jedis != null) {\n            try {\n                if (connectionBroken) {\n                    jedisPool.returnBrokenResource(jedis);\n                } else {\n                    jedisPool.returnResource(jedis);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error happen when return jedis to pool, try to close it directly.\", e);\n                JedisUtils.closeJedis(jedis);\n            }\n        }\n    }\n\n    /**\n     * 获取内部的pool做进一步的动作。\n     */\n    public Pool<Jedis> getJedisPool() {\n        return jedisPool;\n    }\n\n    /**\n     * 有返回结果的回调接口定义。\n     */\n    public interface JedisAction<T> {\n\n        T action(Jedis jedis);\n    }\n\n    /**\n     * 无返回结果的回调接口定义。\n     */\n    public interface JedisActionNoResult {\n\n        void action(Jedis jedis);\n    }\n\n    // ////////////// 常用方法的封装 ///////////////////////// //\n    // ////////////// 公共 ///////////////////////////\n    /**\n     * 删除key, 如果key存在返回true, 否则返回false。\n     */\n    public Boolean del(final String... keys) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.del(keys) == 1 ? true : false;\n            }\n        });\n    }\n\n    public void flushDB() {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.flushDB();\n            }\n        });\n    }\n\n    // ////////////// 关于String ///////////////////////////\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public String get(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.get(key);\n            }\n        });\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Long getAsLong(final String key) {\n        String result = get(key);\n        return result != null ? Long.valueOf(result) : null;\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Integer getAsInt(final String key) {\n        String result = get(key);\n        return result != null ? Integer.valueOf(result) : null;\n    }\n\n    public void set(final String key, final String value) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.set(key, value);\n            }\n        });\n    }\n\n    public void setex(final String key, final String value, final int seconds) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.setex(key, seconds, value);\n            }\n        });\n    }\n\n    /**\n     * 如果key还不存在则进行设置，返回true，否则返回false.\n     */\n    public Boolean setnx(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.setnx(key, value) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 综合setNX与setEx的效果。\n     */\n    public Boolean setnxex(final String key, final String value, final int seconds) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                String result = jedis.set(key, value, \"NX\", \"EX\", seconds);\n                return JedisUtils.isStatusOk(result);\n            }\n        });\n    }\n\n    public Long incr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.incr(key);\n            }\n        });\n    }\n\n    public Long decr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.decr(key);\n            }\n        });\n    }\n\n    // ////////////// 关于List ///////////////////////////\n    public void lpush(final String key, final String... values) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.lpush(key, values);\n            }\n        });\n    }\n\n    public String rpop(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.rpop(key);\n            }\n        });\n    }\n\n    /**\n     * 返回List长度, key不存在时返回0，key类型不是list时抛出异常.\n     */\n    public Long llen(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.llen(key);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的第一个等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremOne(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 1, value);\n                return (count == 1);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的所有等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremAll(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 0, value);\n                return (count > 0);\n            }\n        });\n    }\n\n    // ////////////// 关于Sorted Set ///////////////////////////\n    /**\n     * 加入Sorted set, 如果member在Set里已存在, 只更新score并返回false, 否则返回true.\n     */\n    public Boolean zadd(final String key, final String member, final double score) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zadd(key, score, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 删除sorted set中的元素，成功删除返回true，key或member不存在返回false。\n     */\n    public Boolean zrem(final String key, final String member) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zrem(key, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 当key不存在时返回null.\n     */\n    public Double zscore(final String key, final String member) {\n        return execute(new JedisAction<Double>() {\n\n            @Override\n            public Double action(Jedis jedis) {\n                return jedis.zscore(key, member);\n            }\n        });\n    }\n\n    /**\n     * 返回sorted set长度, key不存在时返回0.\n     */\n    public Long zcard(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.zcard(key);\n            }\n        });\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisTemplateTest9.java",
		"test_prompt": "// JedisTemplateTest9.java\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisTemplate}.\n* It contains ten unit test cases for the {@link JedisTemplate#zrem(String, String)} method.\n*/\nclass JedisTemplateTest9 {"
	},
	{
		"original_code": "// JedisTemplate.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\n\n/**\n * JedisTemplate 提供了一个template方法，负责对Jedis连接的获取与归还。\n * JedisAction<T> 和 JedisActionNoResult两种回调接口，适用于有无返回值两种情况。\n * 同时提供一些最常用函数的封装, 如get/set/zadd等。\n */\npublic class JedisTemplate {\n\n    private static Logger logger = LoggerFactory.getLogger(JedisTemplate.class);\n\n    private Pool<Jedis> jedisPool;\n\n    public JedisTemplate(Pool<Jedis> jedisPool) {\n        this.jedisPool = jedisPool;\n    }\n\n    /**\n     * 执行有返回结果的action。\n     */\n    public <T> T execute(JedisAction<T> jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            return jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 执行无返回结果的action。\n     */\n    public void execute(JedisActionNoResult jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 根据连接是否已中断的标志，分别调用returnBrokenResource或returnResource。\n     */\n    protected void closeResource(Jedis jedis, boolean connectionBroken) {\n        if (jedis != null) {\n            try {\n                if (connectionBroken) {\n                    jedisPool.returnBrokenResource(jedis);\n                } else {\n                    jedisPool.returnResource(jedis);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error happen when return jedis to pool, try to close it directly.\", e);\n                JedisUtils.closeJedis(jedis);\n            }\n        }\n    }\n\n    /**\n     * 获取内部的pool做进一步的动作。\n     */\n    public Pool<Jedis> getJedisPool() {\n        return jedisPool;\n    }\n\n    /**\n     * 有返回结果的回调接口定义。\n     */\n    public interface JedisAction<T> {\n\n        T action(Jedis jedis);\n    }\n\n    /**\n     * 无返回结果的回调接口定义。\n     */\n    public interface JedisActionNoResult {\n\n        void action(Jedis jedis);\n    }\n\n    // ////////////// 常用方法的封装 ///////////////////////// //\n    // ////////////// 公共 ///////////////////////////\n    /**\n     * 删除key, 如果key存在返回true, 否则返回false。\n     */\n    public Boolean del(final String... keys) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.del(keys) == 1 ? true : false;\n            }\n        });\n    }\n\n    public void flushDB() {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.flushDB();\n            }\n        });\n    }\n\n    // ////////////// 关于String ///////////////////////////\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public String get(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.get(key);\n            }\n        });\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Long getAsLong(final String key) {\n        String result = get(key);\n        return result != null ? Long.valueOf(result) : null;\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Integer getAsInt(final String key) {\n        String result = get(key);\n        return result != null ? Integer.valueOf(result) : null;\n    }\n\n    public void set(final String key, final String value) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.set(key, value);\n            }\n        });\n    }\n\n    public void setex(final String key, final String value, final int seconds) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.setex(key, seconds, value);\n            }\n        });\n    }\n\n    /**\n     * 如果key还不存在则进行设置，返回true，否则返回false.\n     */\n    public Boolean setnx(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.setnx(key, value) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 综合setNX与setEx的效果。\n     */\n    public Boolean setnxex(final String key, final String value, final int seconds) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                String result = jedis.set(key, value, \"NX\", \"EX\", seconds);\n                return JedisUtils.isStatusOk(result);\n            }\n        });\n    }\n\n    public Long incr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.incr(key);\n            }\n        });\n    }\n\n    public Long decr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.decr(key);\n            }\n        });\n    }\n\n    // ////////////// 关于List ///////////////////////////\n    public void lpush(final String key, final String... values) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.lpush(key, values);\n            }\n        });\n    }\n\n    public String rpop(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.rpop(key);\n            }\n        });\n    }\n\n    /**\n     * 返回List长度, key不存在时返回0，key类型不是list时抛出异常.\n     */\n    public Long llen(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.llen(key);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的第一个等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremOne(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 1, value);\n                return (count == 1);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的所有等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremAll(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 0, value);\n                return (count > 0);\n            }\n        });\n    }\n\n    // ////////////// 关于Sorted Set ///////////////////////////\n    /**\n     * 加入Sorted set, 如果member在Set里已存在, 只更新score并返回false, 否则返回true.\n     */\n    public Boolean zadd(final String key, final String member, final double score) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zadd(key, score, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 删除sorted set中的元素，成功删除返回true，key或member不存在返回false。\n     */\n    public Boolean zrem(final String key, final String member) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zrem(key, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 当key不存在时返回null.\n     */\n    public Double zscore(final String key, final String member) {\n        return execute(new JedisAction<Double>() {\n\n            @Override\n            public Double action(Jedis jedis) {\n                return jedis.zscore(key, member);\n            }\n        });\n    }\n\n    /**\n     * 返回sorted set长度, key不存在时返回0.\n     */\n    public Long zcard(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.zcard(key);\n            }\n        });\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisTemplateTest10.java",
		"test_prompt": "// JedisTemplateTest10.java\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisTemplate}.\n* It contains ten unit test cases for the {@link JedisTemplate#zscore(String, String)} method.\n*/\nclass JedisTemplateTest10 {"
	},
	{
		"original_code": "// JedisTemplate.java\n/**\n * ****************************************************************************\n *  Copyright (c) 2005, 2014 springside.github.io\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n * *****************************************************************************\n */\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\n\n/**\n * JedisTemplate 提供了一个template方法，负责对Jedis连接的获取与归还。\n * JedisAction<T> 和 JedisActionNoResult两种回调接口，适用于有无返回值两种情况。\n * 同时提供一些最常用函数的封装, 如get/set/zadd等。\n */\npublic class JedisTemplate {\n\n    private static Logger logger = LoggerFactory.getLogger(JedisTemplate.class);\n\n    private Pool<Jedis> jedisPool;\n\n    public JedisTemplate(Pool<Jedis> jedisPool) {\n        this.jedisPool = jedisPool;\n    }\n\n    /**\n     * 执行有返回结果的action。\n     */\n    public <T> T execute(JedisAction<T> jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            return jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 执行无返回结果的action。\n     */\n    public void execute(JedisActionNoResult jedisAction) throws JedisException {\n        Jedis jedis = null;\n        boolean broken = false;\n        try {\n            jedis = jedisPool.getResource();\n            jedisAction.action(jedis);\n        } catch (JedisConnectionException e) {\n            logger.error(\"Redis connection lost.\", e);\n            broken = true;\n            throw e;\n        } finally {\n            closeResource(jedis, broken);\n        }\n    }\n\n    /**\n     * 根据连接是否已中断的标志，分别调用returnBrokenResource或returnResource。\n     */\n    protected void closeResource(Jedis jedis, boolean connectionBroken) {\n        if (jedis != null) {\n            try {\n                if (connectionBroken) {\n                    jedisPool.returnBrokenResource(jedis);\n                } else {\n                    jedisPool.returnResource(jedis);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error happen when return jedis to pool, try to close it directly.\", e);\n                JedisUtils.closeJedis(jedis);\n            }\n        }\n    }\n\n    /**\n     * 获取内部的pool做进一步的动作。\n     */\n    public Pool<Jedis> getJedisPool() {\n        return jedisPool;\n    }\n\n    /**\n     * 有返回结果的回调接口定义。\n     */\n    public interface JedisAction<T> {\n\n        T action(Jedis jedis);\n    }\n\n    /**\n     * 无返回结果的回调接口定义。\n     */\n    public interface JedisActionNoResult {\n\n        void action(Jedis jedis);\n    }\n\n    // ////////////// 常用方法的封装 ///////////////////////// //\n    // ////////////// 公共 ///////////////////////////\n    /**\n     * 删除key, 如果key存在返回true, 否则返回false。\n     */\n    public Boolean del(final String... keys) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.del(keys) == 1 ? true : false;\n            }\n        });\n    }\n\n    public void flushDB() {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.flushDB();\n            }\n        });\n    }\n\n    // ////////////// 关于String ///////////////////////////\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public String get(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.get(key);\n            }\n        });\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Long getAsLong(final String key) {\n        String result = get(key);\n        return result != null ? Long.valueOf(result) : null;\n    }\n\n    /**\n     * 如果key不存在, 返回null.\n     */\n    public Integer getAsInt(final String key) {\n        String result = get(key);\n        return result != null ? Integer.valueOf(result) : null;\n    }\n\n    public void set(final String key, final String value) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.set(key, value);\n            }\n        });\n    }\n\n    public void setex(final String key, final String value, final int seconds) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.setex(key, seconds, value);\n            }\n        });\n    }\n\n    /**\n     * 如果key还不存在则进行设置，返回true，否则返回false.\n     */\n    public Boolean setnx(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.setnx(key, value) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 综合setNX与setEx的效果。\n     */\n    public Boolean setnxex(final String key, final String value, final int seconds) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                String result = jedis.set(key, value, \"NX\", \"EX\", seconds);\n                return JedisUtils.isStatusOk(result);\n            }\n        });\n    }\n\n    public Long incr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.incr(key);\n            }\n        });\n    }\n\n    public Long decr(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.decr(key);\n            }\n        });\n    }\n\n    // ////////////// 关于List ///////////////////////////\n    public void lpush(final String key, final String... values) {\n        execute(new JedisActionNoResult() {\n\n            @Override\n            public void action(Jedis jedis) {\n                jedis.lpush(key, values);\n            }\n        });\n    }\n\n    public String rpop(final String key) {\n        return execute(new JedisAction<String>() {\n\n            @Override\n            public String action(Jedis jedis) {\n                return jedis.rpop(key);\n            }\n        });\n    }\n\n    /**\n     * 返回List长度, key不存在时返回0，key类型不是list时抛出异常.\n     */\n    public Long llen(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.llen(key);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的第一个等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremOne(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 1, value);\n                return (count == 1);\n            }\n        });\n    }\n\n    /**\n     * 删除List中的所有等于value的元素，value不存在或key不存在时返回false.\n     */\n    public Boolean lremAll(final String key, final String value) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                Long count = jedis.lrem(key, 0, value);\n                return (count > 0);\n            }\n        });\n    }\n\n    // ////////////// 关于Sorted Set ///////////////////////////\n    /**\n     * 加入Sorted set, 如果member在Set里已存在, 只更新score并返回false, 否则返回true.\n     */\n    public Boolean zadd(final String key, final String member, final double score) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zadd(key, score, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 删除sorted set中的元素，成功删除返回true，key或member不存在返回false。\n     */\n    public Boolean zrem(final String key, final String member) {\n        return execute(new JedisAction<Boolean>() {\n\n            @Override\n            public Boolean action(Jedis jedis) {\n                return jedis.zrem(key, member) == 1 ? true : false;\n            }\n        });\n    }\n\n    /**\n     * 当key不存在时返回null.\n     */\n    public Double zscore(final String key, final String member) {\n        return execute(new JedisAction<Double>() {\n\n            @Override\n            public Double action(Jedis jedis) {\n                return jedis.zscore(key, member);\n            }\n        });\n    }\n\n    /**\n     * 返回sorted set长度, key不存在时返回0.\n     */\n    public Long zcard(final String key) {\n        return execute(new JedisAction<Long>() {\n\n            @Override\n            public Long action(Jedis jedis) {\n                return jedis.zcard(key);\n            }\n        });\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/JedisTemplateTest11.java",
		"test_prompt": "// JedisTemplateTest11.java\npackage org.springside.modules.nosql.redis;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.util.Pool;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisTemplate}.\n* It contains ten unit test cases for the {@link JedisTemplate#zcard(String)} method.\n*/\nclass JedisTemplateTest11 {"
	},
	{
		"original_code": "// JedisFactory.java\npackage org.springside.modules.nosql.redis.pool;\n\nimport org.apache.commons.pool2.PooledObject;\nimport org.apache.commons.pool2.PooledObjectFactory;\nimport org.apache.commons.pool2.impl.DefaultPooledObject;\nimport redis.clients.jedis.BinaryJedis;\nimport redis.clients.jedis.Jedis;\n\n/**\n * Copy from redis.clients.jedis.JedisFactory, because it is not a public class.\n */\npublic class JedisFactory implements PooledObjectFactory<Jedis> {\n\n    private final String host;\n\n    private final int port;\n\n    private final int timeout;\n\n    private final String password;\n\n    private final int database;\n\n    private final String clientName;\n\n    public JedisFactory(final String host, final int port, final int timeout, final String password, final int database) {\n        this(host, port, timeout, password, database, null);\n    }\n\n    public JedisFactory(final String host, final int port, final int timeout, final String password, final int database, final String clientName) {\n        super();\n        this.host = host;\n        this.port = port;\n        this.timeout = timeout;\n        this.password = password;\n        this.database = database;\n        this.clientName = clientName;\n    }\n\n    @Override\n    public void activateObject(PooledObject<Jedis> pooledJedis) throws Exception {\n        final BinaryJedis jedis = pooledJedis.getObject();\n        if (jedis.getDB() != database) {\n            jedis.select(database);\n        }\n    }\n\n    @Override\n    public void destroyObject(PooledObject<Jedis> pooledJedis) throws Exception {\n        final BinaryJedis jedis = pooledJedis.getObject();\n        if (jedis.isConnected()) {\n            try {\n                try {\n                    jedis.quit();\n                } catch (Exception e) {\n                }\n                jedis.disconnect();\n            } catch (Exception e) {\n            }\n        }\n    }\n\n    @Override\n    public PooledObject<Jedis> makeObject() throws Exception {\n        final Jedis jedis = new Jedis(this.host, this.port, this.timeout);\n        jedis.connect();\n        if (null != this.password) {\n            jedis.auth(this.password);\n        }\n        if (database != 0) {\n            jedis.select(database);\n        }\n        if (clientName != null) {\n            jedis.clientSetname(clientName);\n        }\n        return new DefaultPooledObject<Jedis>(jedis);\n    }\n\n    @Override\n    public void passivateObject(PooledObject<Jedis> pooledJedis) throws Exception {\n        // TODO maybe should select db 0? Not sure right now.\n    }\n\n    @Override\n    public boolean validateObject(PooledObject<Jedis> pooledJedis) {\n        final BinaryJedis jedis = pooledJedis.getObject();\n        try {\n            return jedis.isConnected() && jedis.ping().equals(\"PONG\");\n        } catch (final Exception e) {\n            return false;\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/pool/JedisFactoryTest0.java",
		"test_prompt": "// JedisFactoryTest0.java\npackage org.springside.modules.nosql.redis.pool;\n\nimport org.apache.commons.pool2.PooledObject;\nimport org.apache.commons.pool2.PooledObjectFactory;\nimport org.apache.commons.pool2.impl.DefaultPooledObject;\nimport redis.clients.jedis.BinaryJedis;\nimport redis.clients.jedis.Jedis;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisFactory}.\n* It contains ten unit test cases for the {@link JedisFactory#makeObject()} method.\n*/\nclass JedisFactoryTest0 {"
	},
	{
		"original_code": "// JedisFactory.java\npackage org.springside.modules.nosql.redis.pool;\n\nimport org.apache.commons.pool2.PooledObject;\nimport org.apache.commons.pool2.PooledObjectFactory;\nimport org.apache.commons.pool2.impl.DefaultPooledObject;\nimport redis.clients.jedis.BinaryJedis;\nimport redis.clients.jedis.Jedis;\n\n/**\n * Copy from redis.clients.jedis.JedisFactory, because it is not a public class.\n */\npublic class JedisFactory implements PooledObjectFactory<Jedis> {\n\n    private final String host;\n\n    private final int port;\n\n    private final int timeout;\n\n    private final String password;\n\n    private final int database;\n\n    private final String clientName;\n\n    public JedisFactory(final String host, final int port, final int timeout, final String password, final int database) {\n        this(host, port, timeout, password, database, null);\n    }\n\n    public JedisFactory(final String host, final int port, final int timeout, final String password, final int database, final String clientName) {\n        super();\n        this.host = host;\n        this.port = port;\n        this.timeout = timeout;\n        this.password = password;\n        this.database = database;\n        this.clientName = clientName;\n    }\n\n    @Override\n    public void activateObject(PooledObject<Jedis> pooledJedis) throws Exception {\n        final BinaryJedis jedis = pooledJedis.getObject();\n        if (jedis.getDB() != database) {\n            jedis.select(database);\n        }\n    }\n\n    @Override\n    public void destroyObject(PooledObject<Jedis> pooledJedis) throws Exception {\n        final BinaryJedis jedis = pooledJedis.getObject();\n        if (jedis.isConnected()) {\n            try {\n                try {\n                    jedis.quit();\n                } catch (Exception e) {\n                }\n                jedis.disconnect();\n            } catch (Exception e) {\n            }\n        }\n    }\n\n    @Override\n    public PooledObject<Jedis> makeObject() throws Exception {\n        final Jedis jedis = new Jedis(this.host, this.port, this.timeout);\n        jedis.connect();\n        if (null != this.password) {\n            jedis.auth(this.password);\n        }\n        if (database != 0) {\n            jedis.select(database);\n        }\n        if (clientName != null) {\n            jedis.clientSetname(clientName);\n        }\n        return new DefaultPooledObject<Jedis>(jedis);\n    }\n\n    @Override\n    public void passivateObject(PooledObject<Jedis> pooledJedis) throws Exception {\n        // TODO maybe should select db 0? Not sure right now.\n    }\n\n    @Override\n    public boolean validateObject(PooledObject<Jedis> pooledJedis) {\n        final BinaryJedis jedis = pooledJedis.getObject();\n        try {\n            return jedis.isConnected() && jedis.ping().equals(\"PONG\");\n        } catch (final Exception e) {\n            return false;\n        }\n    }\n}\n",
		"id": "GitHubDataBenchmark/Github_Data/springside4/modules/extension/src/main/java/org/springside/modules/nosql/redis/pool/JedisFactoryTest1.java",
		"test_prompt": "// JedisFactoryTest1.java\npackage org.springside.modules.nosql.redis.pool;\n\nimport org.apache.commons.pool2.PooledObject;\nimport org.apache.commons.pool2.PooledObjectFactory;\nimport org.apache.commons.pool2.impl.DefaultPooledObject;\nimport redis.clients.jedis.BinaryJedis;\nimport redis.clients.jedis.Jedis;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JedisFactory}.\n* It contains ten unit test cases for the {@link JedisFactory#validateObject(PooledObject)} method.\n*/\nclass JedisFactoryTest1 {"
	}
]