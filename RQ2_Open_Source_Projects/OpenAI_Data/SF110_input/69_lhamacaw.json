[
	{
		"original_code": "// DisplayableList.java\npackage macaw.util;\r\n\r\nimport macaw.system.UserInterfaceFactory;\r\nimport javax.swing.*;\r\nimport java.util.*;\r\n\r\n/**\r\n * A general purpose list that displays a collection of objects that implement the\r\n * {@link macaw.util.Displayable} interface.  The list displays items in alphabetical\r\n * ordering.  It knows nothing else about the nature of list items, which may be implemented\r\n * using any number of different classes.  DisplayableList manages its own instance\r\n * of {@link javax.swing.JScrollPane}.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class DisplayableList {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    //Default list model.  I would have used a Vector or an\r\n    //ArrayList but found fewer problems with updating the DefaultListModel\r\n    //than trying to update a Collection. Note that as of JDK1.5, DefaultListModel\r\n    //is not actually part of Collections but its API is loosely based on it.\r\n    private DefaultListModel listData;\r\n\r\n    private HashMap<String, Displayable> itemFromDisplayName;\r\n\r\n    private JList list;\r\n\r\n    private JScrollPane scrollPane;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public DisplayableList(UserInterfaceFactory userInterfaceFactory) {\r\n        init(userInterfaceFactory);\r\n    }\r\n\r\n    public DisplayableList(UserInterfaceFactory userInterfaceFactory, ArrayList<Displayable> displayableItems) {\r\n        init(userInterfaceFactory);\r\n        for (Displayable displayableItem : displayableItems) {\r\n            addDisplayableItem(displayableItem);\r\n        }\r\n    }\r\n\r\n    private void init(UserInterfaceFactory userInterfaceFactory) {\r\n        list = userInterfaceFactory.createList();\r\n        listData = new DefaultListModel();\r\n        list.setModel(listData);\r\n        scrollPane = userInterfaceFactory.createScrollPane(list);\r\n        itemFromDisplayName = new HashMap<String, Displayable>();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void addDisplayableItem(Displayable displayableItem) {\r\n        String displayName = displayableItem.getDisplayName();\r\n        if (listData.contains(displayName) == false) {\r\n            //ensure that display names are unique\r\n            listData.addElement(displayName);\r\n            itemFromDisplayName.put(displayName, displayableItem);\r\n        }\r\n        //list.updateUI();\r\n        //selectItem(displayableItem);\r\n    }\r\n\r\n    public void addDisplayableItems(ArrayList<Displayable> displayableItems) {\r\n        int numberOfAddedItems = displayableItems.size();\r\n        if (numberOfAddedItems == 0) {\r\n            return;\r\n        }\r\n        for (Displayable displayableItem : displayableItems) {\r\n            String displayName = displayableItem.getDisplayName();\r\n            if (listData.contains(displayName) == false) {\r\n                //ensure that display names are unique\r\n                listData.addElement(displayName);\r\n                itemFromDisplayName.put(displayName, displayableItem);\r\n            }\r\n        }\r\n        list.updateUI();\r\n        //pick the last item in the list of displayable items and\r\n        //make that item the selected item in the list\r\n        Displayable lastAddedItem = displayableItems.get(numberOfAddedItems - 1);\r\n        selectItem(lastAddedItem);\r\n    }\r\n\r\n    public void clear() {\r\n        listData.clear();\r\n        itemFromDisplayName.clear();\r\n    }\r\n\r\n    public boolean containsDisplayName(String displayName) {\r\n        return listData.contains(displayName);\r\n    }\r\n\r\n    public void deleteSelectedItems() {\r\n        if (isEmpty() == true) {\r\n            return;\r\n        }\r\n        Object[] selectedValues = list.getSelectedValues();\r\n        for (int i = 0; i < selectedValues.length; i++) {\r\n            String displayName = (String) selectedValues[i];\r\n            listData.removeElement(displayName);\r\n            itemFromDisplayName.remove(displayName);\r\n        }\r\n        updateUI();\r\n        list.clearSelection();\r\n    }\r\n\r\n    public ArrayList<Displayable> getAllItems() {\r\n        ArrayList<Displayable> allItems = new ArrayList<Displayable>();\r\n        Enumeration elements = listData.elements();\r\n        while (elements.hasMoreElements()) {\r\n            String currentDisplayName = (String) elements.nextElement();\r\n            Displayable selectedItem = (Displayable) itemFromDisplayName.get(currentDisplayName);\r\n            allItems.add(selectedItem);\r\n        }\r\n        return allItems;\r\n    }\r\n\r\n    public JScrollPane getListScrollPane() {\r\n        return scrollPane;\r\n    }\r\n\r\n    public Displayable getSelectedItem() {\r\n        String selectedDisplayName = (String) list.getSelectedValue();\r\n        if (selectedDisplayName == null) {\r\n            return null;\r\n        }\r\n        Displayable selectedItem = (Displayable) itemFromDisplayName.get(selectedDisplayName);\r\n        return selectedItem;\r\n    }\r\n\r\n    public ArrayList<Displayable> getSelectedItems() {\r\n        ArrayList<Displayable> results = new ArrayList<Displayable>();\r\n        if (isEmpty() == true) {\r\n            return results;\r\n        }\r\n        Object[] selectedDisplayNames = (Object[]) list.getSelectedValues();\r\n        for (int i = 0; i < selectedDisplayNames.length; i++) {\r\n            Displayable selectedItem = (Displayable) itemFromDisplayName.get(selectedDisplayNames[i]);\r\n            results.add(selectedItem);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        if (listData.size() == 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean itemsAreSelected() {\r\n        if (isEmpty() == true) {\r\n            return false;\r\n        }\r\n        Object[] selectedDisplayNames = (Object[]) list.getSelectedValues();\r\n        if (selectedDisplayNames.length == 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public void refreshList() {\r\n        listData.clear();\r\n        ArrayList<Displayable> listItems = new ArrayList<Displayable>();\r\n        listItems.addAll(itemFromDisplayName.values());\r\n        for (Displayable currentListItem : listItems) {\r\n            listData.addElement(currentListItem.getDisplayName());\r\n        }\r\n        sort();\r\n        updateUI();\r\n    }\r\n\r\n    public void selectItem(Displayable displayableItem) {\r\n        if (isEmpty() == true) {\r\n            return;\r\n        }\r\n        list.setSelectedValue(displayableItem.getDisplayName(), true);\r\n    }\r\n\r\n    public void setDisplayItems(ArrayList<Displayable> displayableItems) {\r\n        clear();\r\n        int numberOfAddedItems = displayableItems.size();\r\n        if (numberOfAddedItems == 0) {\r\n            return;\r\n        }\r\n        for (Displayable displayableItem : displayableItems) {\r\n            String displayName = displayableItem.getDisplayName();\r\n            if (listData.contains(displayName) == false) {\r\n                //ensure that display names are unique\r\n                listData.addElement(displayName);\r\n                itemFromDisplayName.put(displayName, displayableItem);\r\n            }\r\n        }\r\n        list.updateUI();\r\n        if (displayableItems.size() > 0) {\r\n            list.setSelectedIndex(0);\r\n        }\r\n    }\r\n\r\n    public void sort() {\r\n        ListModel model = list.getModel();\r\n        int numItems = model.getSize();\r\n        String[] displayNames = new String[numItems];\r\n        for (int i = 0; i < numItems; i++) {\r\n            displayNames[i] = (String) model.getElementAt(i);\r\n        }\r\n        Arrays.sort(displayNames);\r\n        list.setListData(displayNames);\r\n        list.revalidate();\r\n    }\r\n\r\n    public void updateDisplayName(String oldDisplayName, Displayable revisedListItem) {\r\n        itemFromDisplayName.remove(oldDisplayName);\r\n        listData.removeElement(oldDisplayName);\r\n        String newDisplayName = revisedListItem.getDisplayName();\r\n        listData.addElement(newDisplayName);\r\n        itemFromDisplayName.put(newDisplayName, revisedListItem);\r\n        sort();\r\n        updateUI();\r\n        selectItem(revisedListItem);\r\n    }\r\n\r\n    public void updateUI() {\r\n        list.updateUI();\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/DisplayableListTest0.java",
		"test_prompt": "// DisplayableListTest0.java\npackage macaw.util;\n\nimport macaw.system.UserInterfaceFactory;\nimport javax.swing.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DisplayableList}.\n* It contains ten unit test cases for the {@link DisplayableList#containsDisplayName(String)} method.\n*/\nclass DisplayableListTest0 {"
	},
	{
		"original_code": "// DisplayableList.java\npackage macaw.util;\r\n\r\nimport macaw.system.UserInterfaceFactory;\r\nimport javax.swing.*;\r\nimport java.util.*;\r\n\r\n/**\r\n * A general purpose list that displays a collection of objects that implement the\r\n * {@link macaw.util.Displayable} interface.  The list displays items in alphabetical\r\n * ordering.  It knows nothing else about the nature of list items, which may be implemented\r\n * using any number of different classes.  DisplayableList manages its own instance\r\n * of {@link javax.swing.JScrollPane}.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class DisplayableList {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    //Default list model.  I would have used a Vector or an\r\n    //ArrayList but found fewer problems with updating the DefaultListModel\r\n    //than trying to update a Collection. Note that as of JDK1.5, DefaultListModel\r\n    //is not actually part of Collections but its API is loosely based on it.\r\n    private DefaultListModel listData;\r\n\r\n    private HashMap<String, Displayable> itemFromDisplayName;\r\n\r\n    private JList list;\r\n\r\n    private JScrollPane scrollPane;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public DisplayableList(UserInterfaceFactory userInterfaceFactory) {\r\n        init(userInterfaceFactory);\r\n    }\r\n\r\n    public DisplayableList(UserInterfaceFactory userInterfaceFactory, ArrayList<Displayable> displayableItems) {\r\n        init(userInterfaceFactory);\r\n        for (Displayable displayableItem : displayableItems) {\r\n            addDisplayableItem(displayableItem);\r\n        }\r\n    }\r\n\r\n    private void init(UserInterfaceFactory userInterfaceFactory) {\r\n        list = userInterfaceFactory.createList();\r\n        listData = new DefaultListModel();\r\n        list.setModel(listData);\r\n        scrollPane = userInterfaceFactory.createScrollPane(list);\r\n        itemFromDisplayName = new HashMap<String, Displayable>();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void addDisplayableItem(Displayable displayableItem) {\r\n        String displayName = displayableItem.getDisplayName();\r\n        if (listData.contains(displayName) == false) {\r\n            //ensure that display names are unique\r\n            listData.addElement(displayName);\r\n            itemFromDisplayName.put(displayName, displayableItem);\r\n        }\r\n        //list.updateUI();\r\n        //selectItem(displayableItem);\r\n    }\r\n\r\n    public void addDisplayableItems(ArrayList<Displayable> displayableItems) {\r\n        int numberOfAddedItems = displayableItems.size();\r\n        if (numberOfAddedItems == 0) {\r\n            return;\r\n        }\r\n        for (Displayable displayableItem : displayableItems) {\r\n            String displayName = displayableItem.getDisplayName();\r\n            if (listData.contains(displayName) == false) {\r\n                //ensure that display names are unique\r\n                listData.addElement(displayName);\r\n                itemFromDisplayName.put(displayName, displayableItem);\r\n            }\r\n        }\r\n        list.updateUI();\r\n        //pick the last item in the list of displayable items and\r\n        //make that item the selected item in the list\r\n        Displayable lastAddedItem = displayableItems.get(numberOfAddedItems - 1);\r\n        selectItem(lastAddedItem);\r\n    }\r\n\r\n    public void clear() {\r\n        listData.clear();\r\n        itemFromDisplayName.clear();\r\n    }\r\n\r\n    public boolean containsDisplayName(String displayName) {\r\n        return listData.contains(displayName);\r\n    }\r\n\r\n    public void deleteSelectedItems() {\r\n        if (isEmpty() == true) {\r\n            return;\r\n        }\r\n        Object[] selectedValues = list.getSelectedValues();\r\n        for (int i = 0; i < selectedValues.length; i++) {\r\n            String displayName = (String) selectedValues[i];\r\n            listData.removeElement(displayName);\r\n            itemFromDisplayName.remove(displayName);\r\n        }\r\n        updateUI();\r\n        list.clearSelection();\r\n    }\r\n\r\n    public ArrayList<Displayable> getAllItems() {\r\n        ArrayList<Displayable> allItems = new ArrayList<Displayable>();\r\n        Enumeration elements = listData.elements();\r\n        while (elements.hasMoreElements()) {\r\n            String currentDisplayName = (String) elements.nextElement();\r\n            Displayable selectedItem = (Displayable) itemFromDisplayName.get(currentDisplayName);\r\n            allItems.add(selectedItem);\r\n        }\r\n        return allItems;\r\n    }\r\n\r\n    public JScrollPane getListScrollPane() {\r\n        return scrollPane;\r\n    }\r\n\r\n    public Displayable getSelectedItem() {\r\n        String selectedDisplayName = (String) list.getSelectedValue();\r\n        if (selectedDisplayName == null) {\r\n            return null;\r\n        }\r\n        Displayable selectedItem = (Displayable) itemFromDisplayName.get(selectedDisplayName);\r\n        return selectedItem;\r\n    }\r\n\r\n    public ArrayList<Displayable> getSelectedItems() {\r\n        ArrayList<Displayable> results = new ArrayList<Displayable>();\r\n        if (isEmpty() == true) {\r\n            return results;\r\n        }\r\n        Object[] selectedDisplayNames = (Object[]) list.getSelectedValues();\r\n        for (int i = 0; i < selectedDisplayNames.length; i++) {\r\n            Displayable selectedItem = (Displayable) itemFromDisplayName.get(selectedDisplayNames[i]);\r\n            results.add(selectedItem);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        if (listData.size() == 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean itemsAreSelected() {\r\n        if (isEmpty() == true) {\r\n            return false;\r\n        }\r\n        Object[] selectedDisplayNames = (Object[]) list.getSelectedValues();\r\n        if (selectedDisplayNames.length == 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public void refreshList() {\r\n        listData.clear();\r\n        ArrayList<Displayable> listItems = new ArrayList<Displayable>();\r\n        listItems.addAll(itemFromDisplayName.values());\r\n        for (Displayable currentListItem : listItems) {\r\n            listData.addElement(currentListItem.getDisplayName());\r\n        }\r\n        sort();\r\n        updateUI();\r\n    }\r\n\r\n    public void selectItem(Displayable displayableItem) {\r\n        if (isEmpty() == true) {\r\n            return;\r\n        }\r\n        list.setSelectedValue(displayableItem.getDisplayName(), true);\r\n    }\r\n\r\n    public void setDisplayItems(ArrayList<Displayable> displayableItems) {\r\n        clear();\r\n        int numberOfAddedItems = displayableItems.size();\r\n        if (numberOfAddedItems == 0) {\r\n            return;\r\n        }\r\n        for (Displayable displayableItem : displayableItems) {\r\n            String displayName = displayableItem.getDisplayName();\r\n            if (listData.contains(displayName) == false) {\r\n                //ensure that display names are unique\r\n                listData.addElement(displayName);\r\n                itemFromDisplayName.put(displayName, displayableItem);\r\n            }\r\n        }\r\n        list.updateUI();\r\n        if (displayableItems.size() > 0) {\r\n            list.setSelectedIndex(0);\r\n        }\r\n    }\r\n\r\n    public void sort() {\r\n        ListModel model = list.getModel();\r\n        int numItems = model.getSize();\r\n        String[] displayNames = new String[numItems];\r\n        for (int i = 0; i < numItems; i++) {\r\n            displayNames[i] = (String) model.getElementAt(i);\r\n        }\r\n        Arrays.sort(displayNames);\r\n        list.setListData(displayNames);\r\n        list.revalidate();\r\n    }\r\n\r\n    public void updateDisplayName(String oldDisplayName, Displayable revisedListItem) {\r\n        itemFromDisplayName.remove(oldDisplayName);\r\n        listData.removeElement(oldDisplayName);\r\n        String newDisplayName = revisedListItem.getDisplayName();\r\n        listData.addElement(newDisplayName);\r\n        itemFromDisplayName.put(newDisplayName, revisedListItem);\r\n        sort();\r\n        updateUI();\r\n        selectItem(revisedListItem);\r\n    }\r\n\r\n    public void updateUI() {\r\n        list.updateUI();\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/DisplayableListTest1.java",
		"test_prompt": "// DisplayableListTest1.java\npackage macaw.util;\n\nimport macaw.system.UserInterfaceFactory;\nimport javax.swing.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DisplayableList}.\n* It contains ten unit test cases for the {@link DisplayableList#isEmpty()} method.\n*/\nclass DisplayableListTest1 {"
	},
	{
		"original_code": "// DisplayableList.java\npackage macaw.util;\r\n\r\nimport macaw.system.UserInterfaceFactory;\r\nimport javax.swing.*;\r\nimport java.util.*;\r\n\r\n/**\r\n * A general purpose list that displays a collection of objects that implement the\r\n * {@link macaw.util.Displayable} interface.  The list displays items in alphabetical\r\n * ordering.  It knows nothing else about the nature of list items, which may be implemented\r\n * using any number of different classes.  DisplayableList manages its own instance\r\n * of {@link javax.swing.JScrollPane}.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class DisplayableList {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    //Default list model.  I would have used a Vector or an\r\n    //ArrayList but found fewer problems with updating the DefaultListModel\r\n    //than trying to update a Collection. Note that as of JDK1.5, DefaultListModel\r\n    //is not actually part of Collections but its API is loosely based on it.\r\n    private DefaultListModel listData;\r\n\r\n    private HashMap<String, Displayable> itemFromDisplayName;\r\n\r\n    private JList list;\r\n\r\n    private JScrollPane scrollPane;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public DisplayableList(UserInterfaceFactory userInterfaceFactory) {\r\n        init(userInterfaceFactory);\r\n    }\r\n\r\n    public DisplayableList(UserInterfaceFactory userInterfaceFactory, ArrayList<Displayable> displayableItems) {\r\n        init(userInterfaceFactory);\r\n        for (Displayable displayableItem : displayableItems) {\r\n            addDisplayableItem(displayableItem);\r\n        }\r\n    }\r\n\r\n    private void init(UserInterfaceFactory userInterfaceFactory) {\r\n        list = userInterfaceFactory.createList();\r\n        listData = new DefaultListModel();\r\n        list.setModel(listData);\r\n        scrollPane = userInterfaceFactory.createScrollPane(list);\r\n        itemFromDisplayName = new HashMap<String, Displayable>();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void addDisplayableItem(Displayable displayableItem) {\r\n        String displayName = displayableItem.getDisplayName();\r\n        if (listData.contains(displayName) == false) {\r\n            //ensure that display names are unique\r\n            listData.addElement(displayName);\r\n            itemFromDisplayName.put(displayName, displayableItem);\r\n        }\r\n        //list.updateUI();\r\n        //selectItem(displayableItem);\r\n    }\r\n\r\n    public void addDisplayableItems(ArrayList<Displayable> displayableItems) {\r\n        int numberOfAddedItems = displayableItems.size();\r\n        if (numberOfAddedItems == 0) {\r\n            return;\r\n        }\r\n        for (Displayable displayableItem : displayableItems) {\r\n            String displayName = displayableItem.getDisplayName();\r\n            if (listData.contains(displayName) == false) {\r\n                //ensure that display names are unique\r\n                listData.addElement(displayName);\r\n                itemFromDisplayName.put(displayName, displayableItem);\r\n            }\r\n        }\r\n        list.updateUI();\r\n        //pick the last item in the list of displayable items and\r\n        //make that item the selected item in the list\r\n        Displayable lastAddedItem = displayableItems.get(numberOfAddedItems - 1);\r\n        selectItem(lastAddedItem);\r\n    }\r\n\r\n    public void clear() {\r\n        listData.clear();\r\n        itemFromDisplayName.clear();\r\n    }\r\n\r\n    public boolean containsDisplayName(String displayName) {\r\n        return listData.contains(displayName);\r\n    }\r\n\r\n    public void deleteSelectedItems() {\r\n        if (isEmpty() == true) {\r\n            return;\r\n        }\r\n        Object[] selectedValues = list.getSelectedValues();\r\n        for (int i = 0; i < selectedValues.length; i++) {\r\n            String displayName = (String) selectedValues[i];\r\n            listData.removeElement(displayName);\r\n            itemFromDisplayName.remove(displayName);\r\n        }\r\n        updateUI();\r\n        list.clearSelection();\r\n    }\r\n\r\n    public ArrayList<Displayable> getAllItems() {\r\n        ArrayList<Displayable> allItems = new ArrayList<Displayable>();\r\n        Enumeration elements = listData.elements();\r\n        while (elements.hasMoreElements()) {\r\n            String currentDisplayName = (String) elements.nextElement();\r\n            Displayable selectedItem = (Displayable) itemFromDisplayName.get(currentDisplayName);\r\n            allItems.add(selectedItem);\r\n        }\r\n        return allItems;\r\n    }\r\n\r\n    public JScrollPane getListScrollPane() {\r\n        return scrollPane;\r\n    }\r\n\r\n    public Displayable getSelectedItem() {\r\n        String selectedDisplayName = (String) list.getSelectedValue();\r\n        if (selectedDisplayName == null) {\r\n            return null;\r\n        }\r\n        Displayable selectedItem = (Displayable) itemFromDisplayName.get(selectedDisplayName);\r\n        return selectedItem;\r\n    }\r\n\r\n    public ArrayList<Displayable> getSelectedItems() {\r\n        ArrayList<Displayable> results = new ArrayList<Displayable>();\r\n        if (isEmpty() == true) {\r\n            return results;\r\n        }\r\n        Object[] selectedDisplayNames = (Object[]) list.getSelectedValues();\r\n        for (int i = 0; i < selectedDisplayNames.length; i++) {\r\n            Displayable selectedItem = (Displayable) itemFromDisplayName.get(selectedDisplayNames[i]);\r\n            results.add(selectedItem);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public boolean isEmpty() {\r\n        if (listData.size() == 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean itemsAreSelected() {\r\n        if (isEmpty() == true) {\r\n            return false;\r\n        }\r\n        Object[] selectedDisplayNames = (Object[]) list.getSelectedValues();\r\n        if (selectedDisplayNames.length == 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public void refreshList() {\r\n        listData.clear();\r\n        ArrayList<Displayable> listItems = new ArrayList<Displayable>();\r\n        listItems.addAll(itemFromDisplayName.values());\r\n        for (Displayable currentListItem : listItems) {\r\n            listData.addElement(currentListItem.getDisplayName());\r\n        }\r\n        sort();\r\n        updateUI();\r\n    }\r\n\r\n    public void selectItem(Displayable displayableItem) {\r\n        if (isEmpty() == true) {\r\n            return;\r\n        }\r\n        list.setSelectedValue(displayableItem.getDisplayName(), true);\r\n    }\r\n\r\n    public void setDisplayItems(ArrayList<Displayable> displayableItems) {\r\n        clear();\r\n        int numberOfAddedItems = displayableItems.size();\r\n        if (numberOfAddedItems == 0) {\r\n            return;\r\n        }\r\n        for (Displayable displayableItem : displayableItems) {\r\n            String displayName = displayableItem.getDisplayName();\r\n            if (listData.contains(displayName) == false) {\r\n                //ensure that display names are unique\r\n                listData.addElement(displayName);\r\n                itemFromDisplayName.put(displayName, displayableItem);\r\n            }\r\n        }\r\n        list.updateUI();\r\n        if (displayableItems.size() > 0) {\r\n            list.setSelectedIndex(0);\r\n        }\r\n    }\r\n\r\n    public void sort() {\r\n        ListModel model = list.getModel();\r\n        int numItems = model.getSize();\r\n        String[] displayNames = new String[numItems];\r\n        for (int i = 0; i < numItems; i++) {\r\n            displayNames[i] = (String) model.getElementAt(i);\r\n        }\r\n        Arrays.sort(displayNames);\r\n        list.setListData(displayNames);\r\n        list.revalidate();\r\n    }\r\n\r\n    public void updateDisplayName(String oldDisplayName, Displayable revisedListItem) {\r\n        itemFromDisplayName.remove(oldDisplayName);\r\n        listData.removeElement(oldDisplayName);\r\n        String newDisplayName = revisedListItem.getDisplayName();\r\n        listData.addElement(newDisplayName);\r\n        itemFromDisplayName.put(newDisplayName, revisedListItem);\r\n        sort();\r\n        updateUI();\r\n        selectItem(revisedListItem);\r\n    }\r\n\r\n    public void updateUI() {\r\n        list.updateUI();\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/DisplayableListTest2.java",
		"test_prompt": "// DisplayableListTest2.java\npackage macaw.util;\n\nimport macaw.system.UserInterfaceFactory;\nimport javax.swing.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DisplayableList}.\n* It contains ten unit test cases for the {@link DisplayableList#itemsAreSelected()} method.\n*/\nclass DisplayableListTest2 {"
	},
	{
		"original_code": "// ValidationUtility.java\npackage macaw.util;\r\n\r\nimport macaw.system.MacawMessages;\r\nimport java.util.regex.*;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValidationUtility {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ValidationUtility() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public String convertEmptyValueToBlank(String value) {\r\n        if (value.equals(\"\") == true) {\r\n            return MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean isBlank(String value) {\r\n        return (value.equals(\"\"));\r\n    }\r\n\r\n    static public boolean isUnknown(String value) {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        return unknownMessage.equals(value);\r\n    }\r\n\r\n    static public boolean duplicateNameExists(String candidateName, String[] duplicateNames) {\r\n        for (int i = 0; i < duplicateNames.length; i++) {\r\n            if (candidateName.equals(duplicateNames[i]) == true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public String removeNullStrings(String value) {\r\n        if (value == null) {\r\n            return \"\";\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean promotesSecurityRisk(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        Pattern pattern = Pattern.compile(\"[\\\\s\\\\w-,.]*\");\r\n        Matcher matcher = pattern.matcher(value);\r\n        return !matcher.matches();\r\n    }\r\n\r\n    static public boolean isValidEmail(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        String emailExpression = \"^[\\\\w\\\\-\\\\+\\\\&\\\\*]+(?:\\\\.[\\\\w\\\\-\\\\_\\\\+\\\\&\\\\*]+)*@(?:[\\\\w-]+\\\\.)+[a-zA-Z]{2,7}$\";\r\n        Pattern pattern = Pattern.compile(emailExpression);\r\n        Matcher matcher = pattern.matcher(value);\r\n        return matcher.matches();\r\n    }\r\n\r\n    static public boolean isEmptyValue(String value) {\r\n        if (value == null) {\r\n            return true;\r\n        }\r\n        if (value.equals(\"\") == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/ValidationUtilityTest0.java",
		"test_prompt": "// ValidationUtilityTest0.java\npackage macaw.util;\n\nimport macaw.system.MacawMessages;\nimport java.util.regex.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidationUtility}.\n* It contains ten unit test cases for the {@link ValidationUtility#convertEmptyValueToBlank(String)} method.\n*/\nclass ValidationUtilityTest0 {"
	},
	{
		"original_code": "// ValidationUtility.java\npackage macaw.util;\r\n\r\nimport macaw.system.MacawMessages;\r\nimport java.util.regex.*;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValidationUtility {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ValidationUtility() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public String convertEmptyValueToBlank(String value) {\r\n        if (value.equals(\"\") == true) {\r\n            return MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean isBlank(String value) {\r\n        return (value.equals(\"\"));\r\n    }\r\n\r\n    static public boolean isUnknown(String value) {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        return unknownMessage.equals(value);\r\n    }\r\n\r\n    static public boolean duplicateNameExists(String candidateName, String[] duplicateNames) {\r\n        for (int i = 0; i < duplicateNames.length; i++) {\r\n            if (candidateName.equals(duplicateNames[i]) == true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public String removeNullStrings(String value) {\r\n        if (value == null) {\r\n            return \"\";\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean promotesSecurityRisk(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        Pattern pattern = Pattern.compile(\"[\\\\s\\\\w-,.]*\");\r\n        Matcher matcher = pattern.matcher(value);\r\n        return !matcher.matches();\r\n    }\r\n\r\n    static public boolean isValidEmail(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        String emailExpression = \"^[\\\\w\\\\-\\\\+\\\\&\\\\*]+(?:\\\\.[\\\\w\\\\-\\\\_\\\\+\\\\&\\\\*]+)*@(?:[\\\\w-]+\\\\.)+[a-zA-Z]{2,7}$\";\r\n        Pattern pattern = Pattern.compile(emailExpression);\r\n        Matcher matcher = pattern.matcher(value);\r\n        return matcher.matches();\r\n    }\r\n\r\n    static public boolean isEmptyValue(String value) {\r\n        if (value == null) {\r\n            return true;\r\n        }\r\n        if (value.equals(\"\") == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/ValidationUtilityTest1.java",
		"test_prompt": "// ValidationUtilityTest1.java\npackage macaw.util;\n\nimport macaw.system.MacawMessages;\nimport java.util.regex.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidationUtility}.\n* It contains ten unit test cases for the {@link ValidationUtility#isBlank(String)} method.\n*/\nclass ValidationUtilityTest1 {"
	},
	{
		"original_code": "// ValidationUtility.java\npackage macaw.util;\r\n\r\nimport macaw.system.MacawMessages;\r\nimport java.util.regex.*;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValidationUtility {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ValidationUtility() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public String convertEmptyValueToBlank(String value) {\r\n        if (value.equals(\"\") == true) {\r\n            return MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean isBlank(String value) {\r\n        return (value.equals(\"\"));\r\n    }\r\n\r\n    static public boolean isUnknown(String value) {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        return unknownMessage.equals(value);\r\n    }\r\n\r\n    static public boolean duplicateNameExists(String candidateName, String[] duplicateNames) {\r\n        for (int i = 0; i < duplicateNames.length; i++) {\r\n            if (candidateName.equals(duplicateNames[i]) == true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public String removeNullStrings(String value) {\r\n        if (value == null) {\r\n            return \"\";\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean promotesSecurityRisk(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        Pattern pattern = Pattern.compile(\"[\\\\s\\\\w-,.]*\");\r\n        Matcher matcher = pattern.matcher(value);\r\n        return !matcher.matches();\r\n    }\r\n\r\n    static public boolean isValidEmail(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        String emailExpression = \"^[\\\\w\\\\-\\\\+\\\\&\\\\*]+(?:\\\\.[\\\\w\\\\-\\\\_\\\\+\\\\&\\\\*]+)*@(?:[\\\\w-]+\\\\.)+[a-zA-Z]{2,7}$\";\r\n        Pattern pattern = Pattern.compile(emailExpression);\r\n        Matcher matcher = pattern.matcher(value);\r\n        return matcher.matches();\r\n    }\r\n\r\n    static public boolean isEmptyValue(String value) {\r\n        if (value == null) {\r\n            return true;\r\n        }\r\n        if (value.equals(\"\") == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/ValidationUtilityTest2.java",
		"test_prompt": "// ValidationUtilityTest2.java\npackage macaw.util;\n\nimport macaw.system.MacawMessages;\nimport java.util.regex.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidationUtility}.\n* It contains ten unit test cases for the {@link ValidationUtility#isUnknown(String)} method.\n*/\nclass ValidationUtilityTest2 {"
	},
	{
		"original_code": "// ValidationUtility.java\npackage macaw.util;\r\n\r\nimport macaw.system.MacawMessages;\r\nimport java.util.regex.*;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValidationUtility {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ValidationUtility() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public String convertEmptyValueToBlank(String value) {\r\n        if (value.equals(\"\") == true) {\r\n            return MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean isBlank(String value) {\r\n        return (value.equals(\"\"));\r\n    }\r\n\r\n    static public boolean isUnknown(String value) {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        return unknownMessage.equals(value);\r\n    }\r\n\r\n    static public boolean duplicateNameExists(String candidateName, String[] duplicateNames) {\r\n        for (int i = 0; i < duplicateNames.length; i++) {\r\n            if (candidateName.equals(duplicateNames[i]) == true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public String removeNullStrings(String value) {\r\n        if (value == null) {\r\n            return \"\";\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean promotesSecurityRisk(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        Pattern pattern = Pattern.compile(\"[\\\\s\\\\w-,.]*\");\r\n        Matcher matcher = pattern.matcher(value);\r\n        return !matcher.matches();\r\n    }\r\n\r\n    static public boolean isValidEmail(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        String emailExpression = \"^[\\\\w\\\\-\\\\+\\\\&\\\\*]+(?:\\\\.[\\\\w\\\\-\\\\_\\\\+\\\\&\\\\*]+)*@(?:[\\\\w-]+\\\\.)+[a-zA-Z]{2,7}$\";\r\n        Pattern pattern = Pattern.compile(emailExpression);\r\n        Matcher matcher = pattern.matcher(value);\r\n        return matcher.matches();\r\n    }\r\n\r\n    static public boolean isEmptyValue(String value) {\r\n        if (value == null) {\r\n            return true;\r\n        }\r\n        if (value.equals(\"\") == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/ValidationUtilityTest3.java",
		"test_prompt": "// ValidationUtilityTest3.java\npackage macaw.util;\n\nimport macaw.system.MacawMessages;\nimport java.util.regex.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidationUtility}.\n* It contains ten unit test cases for the {@link ValidationUtility#duplicateNameExists(String, String[])} method.\n*/\nclass ValidationUtilityTest3 {"
	},
	{
		"original_code": "// ValidationUtility.java\npackage macaw.util;\r\n\r\nimport macaw.system.MacawMessages;\r\nimport java.util.regex.*;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValidationUtility {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ValidationUtility() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public String convertEmptyValueToBlank(String value) {\r\n        if (value.equals(\"\") == true) {\r\n            return MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean isBlank(String value) {\r\n        return (value.equals(\"\"));\r\n    }\r\n\r\n    static public boolean isUnknown(String value) {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        return unknownMessage.equals(value);\r\n    }\r\n\r\n    static public boolean duplicateNameExists(String candidateName, String[] duplicateNames) {\r\n        for (int i = 0; i < duplicateNames.length; i++) {\r\n            if (candidateName.equals(duplicateNames[i]) == true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public String removeNullStrings(String value) {\r\n        if (value == null) {\r\n            return \"\";\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean promotesSecurityRisk(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        Pattern pattern = Pattern.compile(\"[\\\\s\\\\w-,.]*\");\r\n        Matcher matcher = pattern.matcher(value);\r\n        return !matcher.matches();\r\n    }\r\n\r\n    static public boolean isValidEmail(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        String emailExpression = \"^[\\\\w\\\\-\\\\+\\\\&\\\\*]+(?:\\\\.[\\\\w\\\\-\\\\_\\\\+\\\\&\\\\*]+)*@(?:[\\\\w-]+\\\\.)+[a-zA-Z]{2,7}$\";\r\n        Pattern pattern = Pattern.compile(emailExpression);\r\n        Matcher matcher = pattern.matcher(value);\r\n        return matcher.matches();\r\n    }\r\n\r\n    static public boolean isEmptyValue(String value) {\r\n        if (value == null) {\r\n            return true;\r\n        }\r\n        if (value.equals(\"\") == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/ValidationUtilityTest4.java",
		"test_prompt": "// ValidationUtilityTest4.java\npackage macaw.util;\n\nimport macaw.system.MacawMessages;\nimport java.util.regex.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidationUtility}.\n* It contains ten unit test cases for the {@link ValidationUtility#removeNullStrings(String)} method.\n*/\nclass ValidationUtilityTest4 {"
	},
	{
		"original_code": "// ValidationUtility.java\npackage macaw.util;\r\n\r\nimport macaw.system.MacawMessages;\r\nimport java.util.regex.*;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValidationUtility {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ValidationUtility() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public String convertEmptyValueToBlank(String value) {\r\n        if (value.equals(\"\") == true) {\r\n            return MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean isBlank(String value) {\r\n        return (value.equals(\"\"));\r\n    }\r\n\r\n    static public boolean isUnknown(String value) {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        return unknownMessage.equals(value);\r\n    }\r\n\r\n    static public boolean duplicateNameExists(String candidateName, String[] duplicateNames) {\r\n        for (int i = 0; i < duplicateNames.length; i++) {\r\n            if (candidateName.equals(duplicateNames[i]) == true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public String removeNullStrings(String value) {\r\n        if (value == null) {\r\n            return \"\";\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean promotesSecurityRisk(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        Pattern pattern = Pattern.compile(\"[\\\\s\\\\w-,.]*\");\r\n        Matcher matcher = pattern.matcher(value);\r\n        return !matcher.matches();\r\n    }\r\n\r\n    static public boolean isValidEmail(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        String emailExpression = \"^[\\\\w\\\\-\\\\+\\\\&\\\\*]+(?:\\\\.[\\\\w\\\\-\\\\_\\\\+\\\\&\\\\*]+)*@(?:[\\\\w-]+\\\\.)+[a-zA-Z]{2,7}$\";\r\n        Pattern pattern = Pattern.compile(emailExpression);\r\n        Matcher matcher = pattern.matcher(value);\r\n        return matcher.matches();\r\n    }\r\n\r\n    static public boolean isEmptyValue(String value) {\r\n        if (value == null) {\r\n            return true;\r\n        }\r\n        if (value.equals(\"\") == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/ValidationUtilityTest5.java",
		"test_prompt": "// ValidationUtilityTest5.java\npackage macaw.util;\n\nimport macaw.system.MacawMessages;\nimport java.util.regex.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidationUtility}.\n* It contains ten unit test cases for the {@link ValidationUtility#promotesSecurityRisk(String)} method.\n*/\nclass ValidationUtilityTest5 {"
	},
	{
		"original_code": "// ValidationUtility.java\npackage macaw.util;\r\n\r\nimport macaw.system.MacawMessages;\r\nimport java.util.regex.*;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValidationUtility {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ValidationUtility() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public String convertEmptyValueToBlank(String value) {\r\n        if (value.equals(\"\") == true) {\r\n            return MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean isBlank(String value) {\r\n        return (value.equals(\"\"));\r\n    }\r\n\r\n    static public boolean isUnknown(String value) {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        return unknownMessage.equals(value);\r\n    }\r\n\r\n    static public boolean duplicateNameExists(String candidateName, String[] duplicateNames) {\r\n        for (int i = 0; i < duplicateNames.length; i++) {\r\n            if (candidateName.equals(duplicateNames[i]) == true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public String removeNullStrings(String value) {\r\n        if (value == null) {\r\n            return \"\";\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean promotesSecurityRisk(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        Pattern pattern = Pattern.compile(\"[\\\\s\\\\w-,.]*\");\r\n        Matcher matcher = pattern.matcher(value);\r\n        return !matcher.matches();\r\n    }\r\n\r\n    static public boolean isValidEmail(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        String emailExpression = \"^[\\\\w\\\\-\\\\+\\\\&\\\\*]+(?:\\\\.[\\\\w\\\\-\\\\_\\\\+\\\\&\\\\*]+)*@(?:[\\\\w-]+\\\\.)+[a-zA-Z]{2,7}$\";\r\n        Pattern pattern = Pattern.compile(emailExpression);\r\n        Matcher matcher = pattern.matcher(value);\r\n        return matcher.matches();\r\n    }\r\n\r\n    static public boolean isEmptyValue(String value) {\r\n        if (value == null) {\r\n            return true;\r\n        }\r\n        if (value.equals(\"\") == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/ValidationUtilityTest6.java",
		"test_prompt": "// ValidationUtilityTest6.java\npackage macaw.util;\n\nimport macaw.system.MacawMessages;\nimport java.util.regex.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidationUtility}.\n* It contains ten unit test cases for the {@link ValidationUtility#isValidEmail(String)} method.\n*/\nclass ValidationUtilityTest6 {"
	},
	{
		"original_code": "// ValidationUtility.java\npackage macaw.util;\r\n\r\nimport macaw.system.MacawMessages;\r\nimport java.util.regex.*;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValidationUtility {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ValidationUtility() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public String convertEmptyValueToBlank(String value) {\r\n        if (value.equals(\"\") == true) {\r\n            return MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean isBlank(String value) {\r\n        return (value.equals(\"\"));\r\n    }\r\n\r\n    static public boolean isUnknown(String value) {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        return unknownMessage.equals(value);\r\n    }\r\n\r\n    static public boolean duplicateNameExists(String candidateName, String[] duplicateNames) {\r\n        for (int i = 0; i < duplicateNames.length; i++) {\r\n            if (candidateName.equals(duplicateNames[i]) == true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public String removeNullStrings(String value) {\r\n        if (value == null) {\r\n            return \"\";\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static public boolean promotesSecurityRisk(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        Pattern pattern = Pattern.compile(\"[\\\\s\\\\w-,.]*\");\r\n        Matcher matcher = pattern.matcher(value);\r\n        return !matcher.matches();\r\n    }\r\n\r\n    static public boolean isValidEmail(String value) {\r\n        //allows whitespace, a-zA-Z_0-9, and the characters - and ,\r\n        String emailExpression = \"^[\\\\w\\\\-\\\\+\\\\&\\\\*]+(?:\\\\.[\\\\w\\\\-\\\\_\\\\+\\\\&\\\\*]+)*@(?:[\\\\w-]+\\\\.)+[a-zA-Z]{2,7}$\";\r\n        Pattern pattern = Pattern.compile(emailExpression);\r\n        Matcher matcher = pattern.matcher(value);\r\n        return matcher.matches();\r\n    }\r\n\r\n    static public boolean isEmptyValue(String value) {\r\n        if (value == null) {\r\n            return true;\r\n        }\r\n        if (value.equals(\"\") == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/ValidationUtilityTest7.java",
		"test_prompt": "// ValidationUtilityTest7.java\npackage macaw.util;\n\nimport macaw.system.MacawMessages;\nimport java.util.regex.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidationUtility}.\n* It contains ten unit test cases for the {@link ValidationUtility#isEmptyValue(String)} method.\n*/\nclass ValidationUtilityTest7 {"
	},
	{
		"original_code": "// SearchUtility.java\npackage macaw.util;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class SearchUtility {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Pattern pattern;\r\n\r\n    private String filterValue;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public SearchUtility(String filterValue) {\r\n        setDefaultSearchPattern(filterValue);\r\n    }\r\n\r\n    public SearchUtility() {\r\n        setDefaultSearchPattern(\"\");\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void setDefaultSearchPattern(String filter) {\r\n        setDefaultSearchPattern(filter, false);\r\n    }\r\n\r\n    public void setDefaultSearchPattern(String filterValue, boolean isCaseSensitive) {\r\n        StringBuilder regularExpression = new StringBuilder();\r\n        regularExpression.append(\".*\");\r\n        regularExpression.append(filterValue.toUpperCase());\r\n        regularExpression.append(\".*\");\r\n        pattern = Pattern.compile(regularExpression.toString().toUpperCase());\r\n        this.filterValue = filterValue.toUpperCase();\r\n    }\r\n\r\n    public boolean valueExactlyMatches(String value) {\r\n        if (value == null)\r\n            return false;\r\n        return filterValue.equals(value.toUpperCase());\r\n    }\r\n\r\n    public boolean valueContainsPattern(String value) {\r\n        if (value == null)\r\n            return false;\r\n        Matcher matcher = pattern.matcher(value.toUpperCase());\r\n        return matcher.matches();\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/SearchUtilityTest0.java",
		"test_prompt": "// SearchUtilityTest0.java\npackage macaw.util;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SearchUtility}.\n* It contains ten unit test cases for the {@link SearchUtility#valueExactlyMatches(String)} method.\n*/\nclass SearchUtilityTest0 {"
	},
	{
		"original_code": "// SearchUtility.java\npackage macaw.util;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class SearchUtility {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Pattern pattern;\r\n\r\n    private String filterValue;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public SearchUtility(String filterValue) {\r\n        setDefaultSearchPattern(filterValue);\r\n    }\r\n\r\n    public SearchUtility() {\r\n        setDefaultSearchPattern(\"\");\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void setDefaultSearchPattern(String filter) {\r\n        setDefaultSearchPattern(filter, false);\r\n    }\r\n\r\n    public void setDefaultSearchPattern(String filterValue, boolean isCaseSensitive) {\r\n        StringBuilder regularExpression = new StringBuilder();\r\n        regularExpression.append(\".*\");\r\n        regularExpression.append(filterValue.toUpperCase());\r\n        regularExpression.append(\".*\");\r\n        pattern = Pattern.compile(regularExpression.toString().toUpperCase());\r\n        this.filterValue = filterValue.toUpperCase();\r\n    }\r\n\r\n    public boolean valueExactlyMatches(String value) {\r\n        if (value == null)\r\n            return false;\r\n        return filterValue.equals(value.toUpperCase());\r\n    }\r\n\r\n    public boolean valueContainsPattern(String value) {\r\n        if (value == null)\r\n            return false;\r\n        Matcher matcher = pattern.matcher(value.toUpperCase());\r\n        return matcher.matches();\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/util/SearchUtilityTest1.java",
		"test_prompt": "// SearchUtilityTest1.java\npackage macaw.util;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SearchUtility}.\n* It contains ten unit test cases for the {@link SearchUtility#valueContainsPattern(String)} method.\n*/\nclass SearchUtilityTest1 {"
	},
	{
		"original_code": "// CleaningState.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\n\r\n/**\r\n * describes a general method used to clean a variable\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class CleaningState extends MacawListChoice {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public CleaningState(int identifier, String status) {\r\n        super(identifier, status);\r\n    }\r\n\r\n    public CleaningState(String status) {\r\n        super(status);\r\n    }\r\n\r\n    public CleaningState() {\r\n        super();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, CleaningState originalCleaningState, CleaningState revisedCleaningState) {\r\n        return MacawListChoice.detectFieldChanges(user, \"cleaningState.saveChanges.changedValue\", originalCleaningState, revisedCleaningState);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static public void validateFields(CleaningState cleaningState) throws MacawException {\r\n        ArrayList<String> errorMessages = MacawListChoice.validateFields(cleaningState);\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_CLEANING_STATE, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public Object clone() {\r\n        CleaningState cloneCleaningStatus = new CleaningState();\r\n        super.cloneAttributes(cloneCleaningStatus);\r\n        return cloneCleaningStatus;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/CleaningStateTest0.java",
		"test_prompt": "// CleaningStateTest0.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CleaningState}.\n* It contains ten unit test cases for the {@link CleaningState#detectFieldChanges(User, CleaningState, CleaningState)} method.\n*/\nclass CleaningStateTest0 {"
	},
	{
		"original_code": "// CleaningState.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\n\r\n/**\r\n * describes a general method used to clean a variable\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class CleaningState extends MacawListChoice {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public CleaningState(int identifier, String status) {\r\n        super(identifier, status);\r\n    }\r\n\r\n    public CleaningState(String status) {\r\n        super(status);\r\n    }\r\n\r\n    public CleaningState() {\r\n        super();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, CleaningState originalCleaningState, CleaningState revisedCleaningState) {\r\n        return MacawListChoice.detectFieldChanges(user, \"cleaningState.saveChanges.changedValue\", originalCleaningState, revisedCleaningState);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static public void validateFields(CleaningState cleaningState) throws MacawException {\r\n        ArrayList<String> errorMessages = MacawListChoice.validateFields(cleaningState);\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_CLEANING_STATE, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public Object clone() {\r\n        CleaningState cloneCleaningStatus = new CleaningState();\r\n        super.cloneAttributes(cloneCleaningStatus);\r\n        return cloneCleaningStatus;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/CleaningStateTest1.java",
		"test_prompt": "// CleaningStateTest1.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CleaningState}.\n* It contains ten unit test cases for the {@link CleaningState#clone()} method.\n*/\nclass CleaningStateTest1 {"
	},
	{
		"original_code": "// RawVariable.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * a Variable that relates to a particular question on a particular\r\n * form of a particular survey that forms part of the NSHD�s ongoing study.\r\n * The majority of RawVariables are found on paper-based index cards,\r\n * some of which are decades old.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class RawVariable extends Variable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public RawVariable() {\r\n        super();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, RawVariable originalRawVariable, RawVariable revisedRawVariable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = Variable.detectFieldChanges(user, originalRawVariable, revisedRawVariable);\r\n        return changeEvents;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(Variable variable) {\r\n        if ((getName().equals(variable.getName()) == true) && (variable instanceof RawVariable == true)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(RawVariable rawVariable) throws MacawException {\r\n        ArrayList<String> errorMessages = Variable.validateFields(rawVariable);\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(rawVariable.getForm()) == true) {\r\n         * \t\t\tString formText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"rawVariable.form.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   formText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         * \t\tif (ValidationUtility.isBlank(rawVariable.getQuestionNumber()) == true) {\r\n         * \t\t\tString questionNumberText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"rawVariable.questionNumber.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   questionNumberText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_RAW_VARIABLE, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Clonable\r\n    public Object clone() {\r\n        RawVariable cloneVariable = new RawVariable();\r\n        super.cloneAttributes(cloneVariable);\r\n        return cloneVariable;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/RawVariableTest0.java",
		"test_prompt": "// RawVariableTest0.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RawVariable}.\n* It contains ten unit test cases for the {@link RawVariable#detectFieldChanges(User, RawVariable, RawVariable)} method.\n*/\nclass RawVariableTest0 {"
	},
	{
		"original_code": "// RawVariable.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * a Variable that relates to a particular question on a particular\r\n * form of a particular survey that forms part of the NSHD�s ongoing study.\r\n * The majority of RawVariables are found on paper-based index cards,\r\n * some of which are decades old.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class RawVariable extends Variable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public RawVariable() {\r\n        super();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, RawVariable originalRawVariable, RawVariable revisedRawVariable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = Variable.detectFieldChanges(user, originalRawVariable, revisedRawVariable);\r\n        return changeEvents;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(Variable variable) {\r\n        if ((getName().equals(variable.getName()) == true) && (variable instanceof RawVariable == true)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(RawVariable rawVariable) throws MacawException {\r\n        ArrayList<String> errorMessages = Variable.validateFields(rawVariable);\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(rawVariable.getForm()) == true) {\r\n         * \t\t\tString formText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"rawVariable.form.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   formText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         * \t\tif (ValidationUtility.isBlank(rawVariable.getQuestionNumber()) == true) {\r\n         * \t\t\tString questionNumberText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"rawVariable.questionNumber.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   questionNumberText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_RAW_VARIABLE, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Clonable\r\n    public Object clone() {\r\n        RawVariable cloneVariable = new RawVariable();\r\n        super.cloneAttributes(cloneVariable);\r\n        return cloneVariable;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/RawVariableTest1.java",
		"test_prompt": "// RawVariableTest1.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RawVariable}.\n* It contains ten unit test cases for the {@link RawVariable#hasSameDisplayName(Variable)} method.\n*/\nclass RawVariableTest1 {"
	},
	{
		"original_code": "// RawVariable.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * a Variable that relates to a particular question on a particular\r\n * form of a particular survey that forms part of the NSHD�s ongoing study.\r\n * The majority of RawVariables are found on paper-based index cards,\r\n * some of which are decades old.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class RawVariable extends Variable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public RawVariable() {\r\n        super();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, RawVariable originalRawVariable, RawVariable revisedRawVariable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = Variable.detectFieldChanges(user, originalRawVariable, revisedRawVariable);\r\n        return changeEvents;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(Variable variable) {\r\n        if ((getName().equals(variable.getName()) == true) && (variable instanceof RawVariable == true)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(RawVariable rawVariable) throws MacawException {\r\n        ArrayList<String> errorMessages = Variable.validateFields(rawVariable);\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(rawVariable.getForm()) == true) {\r\n         * \t\t\tString formText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"rawVariable.form.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   formText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         * \t\tif (ValidationUtility.isBlank(rawVariable.getQuestionNumber()) == true) {\r\n         * \t\t\tString questionNumberText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"rawVariable.questionNumber.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   questionNumberText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_RAW_VARIABLE, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Clonable\r\n    public Object clone() {\r\n        RawVariable cloneVariable = new RawVariable();\r\n        super.cloneAttributes(cloneVariable);\r\n        return cloneVariable;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/RawVariableTest2.java",
		"test_prompt": "// RawVariableTest2.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RawVariable}.\n* It contains ten unit test cases for the {@link RawVariable#clone()} method.\n*/\nclass RawVariableTest2 {"
	},
	{
		"original_code": "// AliasFilePath.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\n\r\n/**\r\n * is an association between a logical location for data associated\r\n * with a variable and a physical location\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class AliasFilePath implements Displayable, Cloneable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String alias;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public AliasFilePath(String alias, String filePath) {\r\n        identifier = 0;\r\n        this.alias = alias;\r\n        this.filePath = filePath;\r\n        isNewRecord = false;\r\n    }\r\n\r\n    public AliasFilePath() {\r\n        identifier = 0;\r\n        alias = \"\";\r\n        filePath = \"\";\r\n        isNewRecord = false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @param isNewRecord the isNewRecord to set\r\n     */\r\n    public void setNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the alias\r\n     */\r\n    public String getAlias() {\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * @param alias the alias to set\r\n     */\r\n    public void setAlias(String alias) {\r\n        this.alias = alias;\r\n    }\r\n\r\n    /**\r\n     * @return the filePath\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the filePath to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, AliasFilePath originalAliasFilePath, AliasFilePath revisedAliasFilePath) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String oldAlias = originalAliasFilePath.getAlias();\r\n        String revisedAlias = revisedAliasFilePath.getAlias();\r\n        if (oldAlias.equals(revisedAlias) == false) {\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.term.saveChanges\", oldAlias, revisedAlias);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ALIAS_FILE_PATH, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(revisedAliasFilePath.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldFilePath = originalAliasFilePath.getFilePath();\r\n        String revisedFilePath = revisedAliasFilePath.getFilePath();\r\n        if (oldFilePath.equals(revisedFilePath) == false) {\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.term.saveChanges\", oldAlias, revisedAlias);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ALIAS_FILE_PATH, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(revisedAliasFilePath.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(AliasFilePath aliasFilePath) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //check that the term has been filled in\r\n        if (ValidationUtility.isBlank(aliasFilePath.getAlias()) == true) {\r\n            String termText = MacawMessages.getMessage(\"aliasFilePath.alias.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", termText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (ValidationUtility.isBlank(aliasFilePath.getFilePath()) == true) {\r\n            String termText = MacawMessages.getMessage(\"aliasFilePath.filePath.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", termText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return alias;\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        AliasFilePath cloneAliasPath = new AliasFilePath();\r\n        cloneAliasPath.setAlias(alias);\r\n        cloneAliasPath.setFilePath(filePath);\r\n        return cloneAliasPath;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/AliasFilePathTest0.java",
		"test_prompt": "// AliasFilePathTest0.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AliasFilePath}.\n* It contains ten unit test cases for the {@link AliasFilePath#detectFieldChanges(User, AliasFilePath, AliasFilePath)} method.\n*/\nclass AliasFilePathTest0 {"
	},
	{
		"original_code": "// AliasFilePath.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\n\r\n/**\r\n * is an association between a logical location for data associated\r\n * with a variable and a physical location\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class AliasFilePath implements Displayable, Cloneable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String alias;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public AliasFilePath(String alias, String filePath) {\r\n        identifier = 0;\r\n        this.alias = alias;\r\n        this.filePath = filePath;\r\n        isNewRecord = false;\r\n    }\r\n\r\n    public AliasFilePath() {\r\n        identifier = 0;\r\n        alias = \"\";\r\n        filePath = \"\";\r\n        isNewRecord = false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @param isNewRecord the isNewRecord to set\r\n     */\r\n    public void setNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the alias\r\n     */\r\n    public String getAlias() {\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * @param alias the alias to set\r\n     */\r\n    public void setAlias(String alias) {\r\n        this.alias = alias;\r\n    }\r\n\r\n    /**\r\n     * @return the filePath\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the filePath to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, AliasFilePath originalAliasFilePath, AliasFilePath revisedAliasFilePath) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String oldAlias = originalAliasFilePath.getAlias();\r\n        String revisedAlias = revisedAliasFilePath.getAlias();\r\n        if (oldAlias.equals(revisedAlias) == false) {\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.term.saveChanges\", oldAlias, revisedAlias);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ALIAS_FILE_PATH, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(revisedAliasFilePath.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldFilePath = originalAliasFilePath.getFilePath();\r\n        String revisedFilePath = revisedAliasFilePath.getFilePath();\r\n        if (oldFilePath.equals(revisedFilePath) == false) {\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.term.saveChanges\", oldAlias, revisedAlias);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ALIAS_FILE_PATH, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(revisedAliasFilePath.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(AliasFilePath aliasFilePath) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //check that the term has been filled in\r\n        if (ValidationUtility.isBlank(aliasFilePath.getAlias()) == true) {\r\n            String termText = MacawMessages.getMessage(\"aliasFilePath.alias.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", termText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (ValidationUtility.isBlank(aliasFilePath.getFilePath()) == true) {\r\n            String termText = MacawMessages.getMessage(\"aliasFilePath.filePath.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", termText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return alias;\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        AliasFilePath cloneAliasPath = new AliasFilePath();\r\n        cloneAliasPath.setAlias(alias);\r\n        cloneAliasPath.setFilePath(filePath);\r\n        return cloneAliasPath;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/AliasFilePathTest1.java",
		"test_prompt": "// AliasFilePathTest1.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AliasFilePath}.\n* It contains ten unit test cases for the {@link AliasFilePath#clone()} method.\n*/\nclass AliasFilePathTest1 {"
	},
	{
		"original_code": "// Category.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * provides a general grouping for NSHD variables\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class Category extends MacawListChoice {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public Category(int identifier, String name) {\r\n        super(identifier, name);\r\n    }\r\n\r\n    public Category(String name) {\r\n        super(name);\r\n    }\r\n\r\n    public Category() {\r\n        super();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Category originalCategory, Category revisedCategory) {\r\n        return MacawListChoice.detectFieldChanges(user, \"category.saveChanges.changedValue\", originalCategory, revisedCategory);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static public void validateFields(Category category) throws MacawException {\r\n        ArrayList<String> errorMessages = MacawListChoice.validateFields(category);\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_CATEGORY, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public Object clone() {\r\n        Category cloneCategory = new Category();\r\n        super.cloneAttributes(cloneCategory);\r\n        return cloneCategory;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/CategoryTest0.java",
		"test_prompt": "// CategoryTest0.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Category}.\n* It contains ten unit test cases for the {@link Category#detectFieldChanges(User, Category, Category)} method.\n*/\nclass CategoryTest0 {"
	},
	{
		"original_code": "// Category.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * provides a general grouping for NSHD variables\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class Category extends MacawListChoice {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public Category(int identifier, String name) {\r\n        super(identifier, name);\r\n    }\r\n\r\n    public Category(String name) {\r\n        super(name);\r\n    }\r\n\r\n    public Category() {\r\n        super();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Category originalCategory, Category revisedCategory) {\r\n        return MacawListChoice.detectFieldChanges(user, \"category.saveChanges.changedValue\", originalCategory, revisedCategory);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static public void validateFields(Category category) throws MacawException {\r\n        ArrayList<String> errorMessages = MacawListChoice.validateFields(category);\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_CATEGORY, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public Object clone() {\r\n        Category cloneCategory = new Category();\r\n        super.cloneAttributes(cloneCategory);\r\n        return cloneCategory;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/CategoryTest1.java",
		"test_prompt": "// CategoryTest1.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Category}.\n* It contains ten unit test cases for the {@link Category#clone()} method.\n*/\nclass CategoryTest1 {"
	},
	{
		"original_code": "// VariableSummary.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.util.Displayable;\r\n\r\n/**\r\n * Describes the minimum amount of information in a search result for a Variable.  It is\r\n * used to provide a summary of a variable record that would appear in a list of results.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class VariableSummary implements Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String name;\r\n\r\n    private String label;\r\n\r\n    private String year;\r\n\r\n    private boolean isDerived;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public VariableSummary() {\r\n        identifier = 0;\r\n        name = \"\";\r\n        label = \"\";\r\n        year = \"\";\r\n        isDerived = false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * @return the year\r\n     */\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    /**\r\n     * @param year the year to set\r\n     */\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    public boolean isDerived() {\r\n        return isDerived;\r\n    }\r\n\r\n    public void setDerived(boolean isDerived) {\r\n        this.isDerived = isDerived;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(VariableSummary variableSummary) {\r\n        if (getDisplayName().equals(variableSummary.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return name;\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    public Object clone() {\r\n        VariableSummary cloneSummary = new VariableSummary();\r\n        cloneSummary.setIdentifier(identifier);\r\n        cloneSummary.setLabel(label);\r\n        cloneSummary.setName(name);\r\n        cloneSummary.setYear(year);\r\n        return cloneSummary;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/VariableSummaryTest0.java",
		"test_prompt": "// VariableSummaryTest0.java\npackage macaw.businessLayer;\n\nimport macaw.util.Displayable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VariableSummary}.\n* It contains ten unit test cases for the {@link VariableSummary#isDerived()} method.\n*/\nclass VariableSummaryTest0 {"
	},
	{
		"original_code": "// VariableSummary.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.util.Displayable;\r\n\r\n/**\r\n * Describes the minimum amount of information in a search result for a Variable.  It is\r\n * used to provide a summary of a variable record that would appear in a list of results.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class VariableSummary implements Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String name;\r\n\r\n    private String label;\r\n\r\n    private String year;\r\n\r\n    private boolean isDerived;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public VariableSummary() {\r\n        identifier = 0;\r\n        name = \"\";\r\n        label = \"\";\r\n        year = \"\";\r\n        isDerived = false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * @return the year\r\n     */\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    /**\r\n     * @param year the year to set\r\n     */\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    public boolean isDerived() {\r\n        return isDerived;\r\n    }\r\n\r\n    public void setDerived(boolean isDerived) {\r\n        this.isDerived = isDerived;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(VariableSummary variableSummary) {\r\n        if (getDisplayName().equals(variableSummary.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return name;\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    public Object clone() {\r\n        VariableSummary cloneSummary = new VariableSummary();\r\n        cloneSummary.setIdentifier(identifier);\r\n        cloneSummary.setLabel(label);\r\n        cloneSummary.setName(name);\r\n        cloneSummary.setYear(year);\r\n        return cloneSummary;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/VariableSummaryTest1.java",
		"test_prompt": "// VariableSummaryTest1.java\npackage macaw.businessLayer;\n\nimport macaw.util.Displayable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VariableSummary}.\n* It contains ten unit test cases for the {@link VariableSummary#hasSameDisplayName(VariableSummary)} method.\n*/\nclass VariableSummaryTest1 {"
	},
	{
		"original_code": "// VariableSummary.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.util.Displayable;\r\n\r\n/**\r\n * Describes the minimum amount of information in a search result for a Variable.  It is\r\n * used to provide a summary of a variable record that would appear in a list of results.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class VariableSummary implements Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String name;\r\n\r\n    private String label;\r\n\r\n    private String year;\r\n\r\n    private boolean isDerived;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public VariableSummary() {\r\n        identifier = 0;\r\n        name = \"\";\r\n        label = \"\";\r\n        year = \"\";\r\n        isDerived = false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * @return the year\r\n     */\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    /**\r\n     * @param year the year to set\r\n     */\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    public boolean isDerived() {\r\n        return isDerived;\r\n    }\r\n\r\n    public void setDerived(boolean isDerived) {\r\n        this.isDerived = isDerived;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(VariableSummary variableSummary) {\r\n        if (getDisplayName().equals(variableSummary.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return name;\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    public Object clone() {\r\n        VariableSummary cloneSummary = new VariableSummary();\r\n        cloneSummary.setIdentifier(identifier);\r\n        cloneSummary.setLabel(label);\r\n        cloneSummary.setName(name);\r\n        cloneSummary.setYear(year);\r\n        return cloneSummary;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/VariableSummaryTest2.java",
		"test_prompt": "// VariableSummaryTest2.java\npackage macaw.businessLayer;\n\nimport macaw.util.Displayable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VariableSummary}.\n* It contains ten unit test cases for the {@link VariableSummary#clone()} method.\n*/\nclass VariableSummaryTest2 {"
	},
	{
		"original_code": "// User.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.ValidationUtility;\r\nimport macaw.util.Displayable;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class User implements Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String userID;\r\n\r\n    private String firstName;\r\n\r\n    private String lastName;\r\n\r\n    private String affiliation;\r\n\r\n    private String addressLine1;\r\n\r\n    private String addressLine2;\r\n\r\n    private String city;\r\n\r\n    private String postCode;\r\n\r\n    private String county;\r\n\r\n    private String phone;\r\n\r\n    private String email;\r\n\r\n    private String status;\r\n\r\n    private String password;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public User() {\r\n        init();\r\n    }\r\n\r\n    public User(String userID, String password) {\r\n        init();\r\n        identifier = 0;\r\n        this.userID = userID;\r\n        this.password = password;\r\n    }\r\n\r\n    private void init() {\r\n        userID = \"\";\r\n        identifier = 0;\r\n        firstName = \"\";\r\n        lastName = \"\";\r\n        affiliation = \"\";\r\n        addressLine1 = \"\";\r\n        addressLine2 = \"\";\r\n        city = \"\";\r\n        postCode = \"\";\r\n        county = \"\";\r\n        phone = \"\";\r\n        email = \"\";\r\n        status = MacawMessages.getMessage(\"user.status.unverified\");\r\n        password = \"\";\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the userID\r\n     */\r\n    public String getUserID() {\r\n        return userID;\r\n    }\r\n\r\n    /**\r\n     * @param userID the userID to set\r\n     */\r\n    public void setUserID(String userID) {\r\n        this.userID = userID;\r\n    }\r\n\r\n    /**\r\n     * @return the firstName\r\n     */\r\n    public String getFirstName() {\r\n        return firstName;\r\n    }\r\n\r\n    /**\r\n     * @param firstName the firstName to set\r\n     */\r\n    public void setFirstName(String firstName) {\r\n        this.firstName = firstName;\r\n    }\r\n\r\n    /**\r\n     * @return the lastName\r\n     */\r\n    public String getLastName() {\r\n        return lastName;\r\n    }\r\n\r\n    /**\r\n     * @param lastName the lastName to set\r\n     */\r\n    public void setLastName(String lastName) {\r\n        this.lastName = lastName;\r\n    }\r\n\r\n    /**\r\n     * @return the affiliation\r\n     */\r\n    public String getAffiliation() {\r\n        return affiliation;\r\n    }\r\n\r\n    /**\r\n     * @param affiliation the affiliation to set\r\n     */\r\n    public void setAffiliation(String affiliation) {\r\n        this.affiliation = affiliation;\r\n    }\r\n\r\n    /**\r\n     * @return the addressLine1\r\n     */\r\n    public String getAddressLine1() {\r\n        return addressLine1;\r\n    }\r\n\r\n    /**\r\n     * @param addressLine1 the addressLine1 to set\r\n     */\r\n    public void setAddressLine1(String addressLine1) {\r\n        this.addressLine1 = addressLine1;\r\n    }\r\n\r\n    /**\r\n     * @return the addressLine2\r\n     */\r\n    public String getAddressLine2() {\r\n        return addressLine2;\r\n    }\r\n\r\n    /**\r\n     * @param addressLine2 the addressLine2 to set\r\n     */\r\n    public void setAddressLine2(String addressLine2) {\r\n        this.addressLine2 = addressLine2;\r\n    }\r\n\r\n    /**\r\n     * @return the city\r\n     */\r\n    public String getCity() {\r\n        return city;\r\n    }\r\n\r\n    /**\r\n     * @param city the city to set\r\n     */\r\n    public void setCity(String city) {\r\n        this.city = city;\r\n    }\r\n\r\n    /**\r\n     * @return the postCode\r\n     */\r\n    public String getPostCode() {\r\n        return postCode;\r\n    }\r\n\r\n    /**\r\n     * @param postCode the postCode to set\r\n     */\r\n    public void setPostCode(String postCode) {\r\n        this.postCode = postCode;\r\n    }\r\n\r\n    /**\r\n     * @return the county\r\n     */\r\n    public String getCounty() {\r\n        return county;\r\n    }\r\n\r\n    /**\r\n     * @param county the county to set\r\n     */\r\n    public void setCounty(String county) {\r\n        this.county = county;\r\n    }\r\n\r\n    /**\r\n     * @return the phone\r\n     */\r\n    public String getPhone() {\r\n        return phone;\r\n    }\r\n\r\n    /**\r\n     * @param phone the phone to set\r\n     */\r\n    public void setPhone(String phone) {\r\n        this.phone = phone;\r\n    }\r\n\r\n    /**\r\n     * @return the email\r\n     */\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    /**\r\n     * @param email the email to set\r\n     */\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    /**\r\n     * @return the status\r\n     */\r\n    public String getStatus() {\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * @param status the status to set\r\n     */\r\n    public void setStatus(String status) {\r\n        this.status = status;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User admin, User originalUser, User revisedUser) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String oldUserID = originalUser.getUserID();\r\n        String newUserID = revisedUser.getUserID();\r\n        if (oldUserID.equals(newUserID) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.userID.saveChanges\", originalUser.getDisplayName(), oldUserID, newUserID);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldPassword = originalUser.getPassword();\r\n        String newPassword = revisedUser.getPassword();\r\n        if (oldPassword.equals(newPassword) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.password.saveChanges\", originalUser.getDisplayName(), oldPassword, newPassword);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldFirstName = originalUser.getFirstName();\r\n        String newFirstName = revisedUser.getFirstName();\r\n        if (oldFirstName.equals(newFirstName) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.firstName.saveChanges\", originalUser.getDisplayName(), oldFirstName, newFirstName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldLastName = originalUser.getLastName();\r\n        String newLastName = revisedUser.getLastName();\r\n        if (oldLastName.equals(newLastName) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.lastName.saveChanges\", originalUser.getDisplayName(), oldLastName, newLastName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Affiliation\"\r\n        String oldAffiliation = originalUser.getAffiliation();\r\n        String newAffiliation = revisedUser.getAffiliation();\r\n        if (oldAffiliation.equals(newAffiliation) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.affiliation.saveChanges\", originalUser.getDisplayName(), oldAffiliation, newAffiliation);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Address Line 1\"\r\n        String oldAddressLine1 = originalUser.getAddressLine1();\r\n        String newAddressLine1 = revisedUser.getAddressLine1();\r\n        if (oldAddressLine1.equals(newAddressLine1) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.addressLine1.saveChanges\", originalUser.getDisplayName(), oldAddressLine1, newAddressLine1);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Address Line 2\"\r\n        String oldAddressLine2 = originalUser.getAddressLine2();\r\n        String newAddressLine2 = revisedUser.getAddressLine2();\r\n        if (oldAddressLine2.equals(newAddressLine2) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.addressLine2.saveChanges\", originalUser.getDisplayName(), oldAddressLine2, newAddressLine2);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"City\"\r\n        String oldCity = originalUser.getCity();\r\n        String newCity = revisedUser.getCity();\r\n        if (oldCity.equals(newCity) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.city.saveChanges\", originalUser.getDisplayName(), oldCity, newCity);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"County\"\r\n        String oldCounty = originalUser.getCounty();\r\n        String newCounty = revisedUser.getCounty();\r\n        if (oldCounty.equals(newCounty) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.county.saveChanges\", originalUser.getDisplayName(), oldCounty, newCounty);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Post Code\"\r\n        String oldPostCode = originalUser.getPostCode();\r\n        String newPostCode = revisedUser.getPostCode();\r\n        if (oldPostCode.equals(newPostCode) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.postCode.saveChanges\", originalUser.getDisplayName(), oldPostCode, newPostCode);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Phone\"\r\n        String oldPhone = originalUser.getPhone();\r\n        String newPhone = revisedUser.getPhone();\r\n        if (oldPhone.equals(newPhone) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.phone.saveChanges\", originalUser.getDisplayName(), oldPhone, newPhone);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Email\"\r\n        String oldEmail = originalUser.getEmail();\r\n        String newEmail = revisedUser.getEmail();\r\n        if (oldEmail.equals(newEmail) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.email.saveChanges\", originalUser.getDisplayName(), oldEmail, newEmail);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Status\"\r\n        String oldStatus = originalUser.getStatus();\r\n        String newStatus = revisedUser.getStatus();\r\n        if (oldStatus.equals(newStatus) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.status.saveChanges\", originalUser.getDisplayName(), oldStatus, newStatus);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(User user) {\r\n        if (getDisplayName().equals(user.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static public void checkValidEmail(String candidateEmail) throws MacawException {\r\n        if (ValidationUtility.isValidEmail(candidateEmail) == false) {\r\n            //ERROR\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.invalidEmail\", candidateEmail);\r\n            MacawException exception = new MacawException(MacawErrorType.INVALID_USER, errorMessage);\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public void checkValidUserIDField(String candidateUserID) throws MacawException {\r\n        if (ValidationUtility.promotesSecurityRisk(candidateUserID) == true) {\r\n            String userIDText = MacawMessages.getMessage(\"user.userID.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", userIDText, candidateUserID);\r\n            MacawException exception = new MacawException(MacawErrorType.INVALID_USER, errorMessage);\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public void validateFields(User user) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        String userID = user.getUserID();\r\n        if (ValidationUtility.isBlank(userID) == true) {\r\n            String userIDText = MacawMessages.getMessage(\"user.userID.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", userIDText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(userID) == true) {\r\n            String userIDText = MacawMessages.getMessage(\"user.userID.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", userIDText, userID);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        String firstName = user.getFirstName();\r\n        if (ValidationUtility.isBlank(firstName) == true) {\r\n            String firstNameText = MacawMessages.getMessage(\"user.firstName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", firstNameText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(firstName) == true) {\r\n            String firstNameText = MacawMessages.getMessage(\"user.firstName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", firstNameText, firstName);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        String lastName = user.getLastName();\r\n        if (ValidationUtility.isBlank(user.getLastName()) == true) {\r\n            String lastNameText = MacawMessages.getMessage(\"user.lastName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", lastNameText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(lastName) == true) {\r\n            String lastNameText = MacawMessages.getMessage(\"user.lastName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", lastNameText, lastName);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validating Affiliation\r\n        String affiliation = user.getAffiliation();\r\n        if (ValidationUtility.isBlank(affiliation) == true) {\r\n            String affiliationText = MacawMessages.getMessage(\"user.affiliation.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", affiliationText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(affiliation) == true) {\r\n            String affiliationText = MacawMessages.getMessage(\"user.affiliation.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", affiliationText, affiliation);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field Address Line 1\r\n        String addressLine1 = user.getAddressLine1();\r\n        if (ValidationUtility.isBlank(addressLine1) == true) {\r\n            String addressLine1Text = MacawMessages.getMessage(\"user.addressLine1.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", addressLine1Text);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(addressLine1) == true) {\r\n            String addressLine1Text = MacawMessages.getMessage(\"user.addressLine1.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", addressLine1Text, addressLine1);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        String addressLine2 = user.getAddressLine2();\r\n        //Validate field Address Line 2\r\n        /*\r\n\t\tString addressLine2 = user.getAddressLine2();\r\n\t\tif (ValidationUtility.isBlank(addressLine2) == true) {\r\n\t\t\tString addressLine2Text \r\n\t\t\t\t= MacawMessages.getMessage(\"user.addressLine2.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t   addressLine2Text);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        if (addressLine2.equals(\"\") == false) {\r\n            if (ValidationUtility.promotesSecurityRisk(addressLine2) == true) {\r\n                String addressLine2Text = MacawMessages.getMessage(\"user.addressLine2.label\");\r\n                String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", addressLine2Text, addressLine2);\r\n                errorMessages.add(errorMessage);\r\n            }\r\n        }\r\n        //Validate field City\r\n        String city = user.getCity();\r\n        if (ValidationUtility.isBlank(city) == true) {\r\n            String cityText = MacawMessages.getMessage(\"user.city.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", cityText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(city) == true) {\r\n            String cityText = MacawMessages.getMessage(\"user.city.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", cityText, city);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field County\r\n        String county = user.getCounty();\r\n        if (ValidationUtility.isBlank(county) == true) {\r\n            String countyText = MacawMessages.getMessage(\"user.county.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", countyText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(county) == true) {\r\n            String userIDText = MacawMessages.getMessage(\"user.county.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", userIDText, userID);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field PostCode\r\n        String postCode = user.getPostCode();\r\n        if (ValidationUtility.isBlank(postCode) == true) {\r\n            String postCodeText = MacawMessages.getMessage(\"user.postCode.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", postCodeText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(postCode) == true) {\r\n            String postCodeText = MacawMessages.getMessage(\"user.postCode.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", postCodeText, postCode);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field Phone\r\n        String phone = user.getPhone();\r\n        if (ValidationUtility.isBlank(phone) == true) {\r\n            String phoneText = MacawMessages.getMessage(\"user.phone.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", phoneText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(phone) == true) {\r\n            String phoneText = MacawMessages.getMessage(\"user.phone.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", phoneText, phone);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field Email\r\n        String email = user.getEmail();\r\n        if (ValidationUtility.isBlank(email) == true) {\r\n            String emailText = MacawMessages.getMessage(\"user.email.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", emailText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.isValidEmail(email) == false) {\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.invalidEmail\", email);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field Status\r\n        String status = user.getStatus();\r\n        if (ValidationUtility.isBlank(status) == true) {\r\n            String statusText = MacawMessages.getMessage(\"user.status.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", statusText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(status) == true) {\r\n            String statusText = MacawMessages.getMessage(\"user.status.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", statusText, status);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (ValidationUtility.isBlank(user.getPassword()) == true) {\r\n            String passwordText = MacawMessages.getMessage(\"user.password.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", passwordText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_USER, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        /**\r\n         * \t\tStringBuilder buffer = new StringBuilder();\r\n         * \t\tbuffer.append(firstName);\r\n         * \t\tbuffer.append(\" \");\r\n         * \t\tbuffer.append(lastName);\r\n         * \t\treturn buffer.toString();\r\n         */\r\n        return userID;\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    public Object clone() {\r\n        User cloneUser = new User();\r\n        cloneUser.setIdentifier(identifier);\r\n        cloneUser.setUserID(userID);\r\n        cloneUser.setFirstName(firstName);\r\n        cloneUser.setLastName(lastName);\r\n        cloneUser.setAffiliation(affiliation);\r\n        cloneUser.setAddressLine1(addressLine1);\r\n        cloneUser.setAddressLine2(addressLine2);\r\n        cloneUser.setCity(city);\r\n        cloneUser.setPostCode(postCode);\r\n        cloneUser.setCounty(county);\r\n        cloneUser.setPhone(phone);\r\n        cloneUser.setEmail(email);\r\n        cloneUser.setStatus(status);\r\n        cloneUser.setPassword(password);\r\n        return cloneUser;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/UserTest0.java",
		"test_prompt": "// UserTest0.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.ValidationUtility;\nimport macaw.util.Displayable;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link User}.\n* It contains ten unit test cases for the {@link User#detectFieldChanges(User, User, User)} method.\n*/\nclass UserTest0 {"
	},
	{
		"original_code": "// User.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.ValidationUtility;\r\nimport macaw.util.Displayable;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class User implements Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String userID;\r\n\r\n    private String firstName;\r\n\r\n    private String lastName;\r\n\r\n    private String affiliation;\r\n\r\n    private String addressLine1;\r\n\r\n    private String addressLine2;\r\n\r\n    private String city;\r\n\r\n    private String postCode;\r\n\r\n    private String county;\r\n\r\n    private String phone;\r\n\r\n    private String email;\r\n\r\n    private String status;\r\n\r\n    private String password;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public User() {\r\n        init();\r\n    }\r\n\r\n    public User(String userID, String password) {\r\n        init();\r\n        identifier = 0;\r\n        this.userID = userID;\r\n        this.password = password;\r\n    }\r\n\r\n    private void init() {\r\n        userID = \"\";\r\n        identifier = 0;\r\n        firstName = \"\";\r\n        lastName = \"\";\r\n        affiliation = \"\";\r\n        addressLine1 = \"\";\r\n        addressLine2 = \"\";\r\n        city = \"\";\r\n        postCode = \"\";\r\n        county = \"\";\r\n        phone = \"\";\r\n        email = \"\";\r\n        status = MacawMessages.getMessage(\"user.status.unverified\");\r\n        password = \"\";\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the userID\r\n     */\r\n    public String getUserID() {\r\n        return userID;\r\n    }\r\n\r\n    /**\r\n     * @param userID the userID to set\r\n     */\r\n    public void setUserID(String userID) {\r\n        this.userID = userID;\r\n    }\r\n\r\n    /**\r\n     * @return the firstName\r\n     */\r\n    public String getFirstName() {\r\n        return firstName;\r\n    }\r\n\r\n    /**\r\n     * @param firstName the firstName to set\r\n     */\r\n    public void setFirstName(String firstName) {\r\n        this.firstName = firstName;\r\n    }\r\n\r\n    /**\r\n     * @return the lastName\r\n     */\r\n    public String getLastName() {\r\n        return lastName;\r\n    }\r\n\r\n    /**\r\n     * @param lastName the lastName to set\r\n     */\r\n    public void setLastName(String lastName) {\r\n        this.lastName = lastName;\r\n    }\r\n\r\n    /**\r\n     * @return the affiliation\r\n     */\r\n    public String getAffiliation() {\r\n        return affiliation;\r\n    }\r\n\r\n    /**\r\n     * @param affiliation the affiliation to set\r\n     */\r\n    public void setAffiliation(String affiliation) {\r\n        this.affiliation = affiliation;\r\n    }\r\n\r\n    /**\r\n     * @return the addressLine1\r\n     */\r\n    public String getAddressLine1() {\r\n        return addressLine1;\r\n    }\r\n\r\n    /**\r\n     * @param addressLine1 the addressLine1 to set\r\n     */\r\n    public void setAddressLine1(String addressLine1) {\r\n        this.addressLine1 = addressLine1;\r\n    }\r\n\r\n    /**\r\n     * @return the addressLine2\r\n     */\r\n    public String getAddressLine2() {\r\n        return addressLine2;\r\n    }\r\n\r\n    /**\r\n     * @param addressLine2 the addressLine2 to set\r\n     */\r\n    public void setAddressLine2(String addressLine2) {\r\n        this.addressLine2 = addressLine2;\r\n    }\r\n\r\n    /**\r\n     * @return the city\r\n     */\r\n    public String getCity() {\r\n        return city;\r\n    }\r\n\r\n    /**\r\n     * @param city the city to set\r\n     */\r\n    public void setCity(String city) {\r\n        this.city = city;\r\n    }\r\n\r\n    /**\r\n     * @return the postCode\r\n     */\r\n    public String getPostCode() {\r\n        return postCode;\r\n    }\r\n\r\n    /**\r\n     * @param postCode the postCode to set\r\n     */\r\n    public void setPostCode(String postCode) {\r\n        this.postCode = postCode;\r\n    }\r\n\r\n    /**\r\n     * @return the county\r\n     */\r\n    public String getCounty() {\r\n        return county;\r\n    }\r\n\r\n    /**\r\n     * @param county the county to set\r\n     */\r\n    public void setCounty(String county) {\r\n        this.county = county;\r\n    }\r\n\r\n    /**\r\n     * @return the phone\r\n     */\r\n    public String getPhone() {\r\n        return phone;\r\n    }\r\n\r\n    /**\r\n     * @param phone the phone to set\r\n     */\r\n    public void setPhone(String phone) {\r\n        this.phone = phone;\r\n    }\r\n\r\n    /**\r\n     * @return the email\r\n     */\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    /**\r\n     * @param email the email to set\r\n     */\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    /**\r\n     * @return the status\r\n     */\r\n    public String getStatus() {\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * @param status the status to set\r\n     */\r\n    public void setStatus(String status) {\r\n        this.status = status;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User admin, User originalUser, User revisedUser) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String oldUserID = originalUser.getUserID();\r\n        String newUserID = revisedUser.getUserID();\r\n        if (oldUserID.equals(newUserID) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.userID.saveChanges\", originalUser.getDisplayName(), oldUserID, newUserID);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldPassword = originalUser.getPassword();\r\n        String newPassword = revisedUser.getPassword();\r\n        if (oldPassword.equals(newPassword) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.password.saveChanges\", originalUser.getDisplayName(), oldPassword, newPassword);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldFirstName = originalUser.getFirstName();\r\n        String newFirstName = revisedUser.getFirstName();\r\n        if (oldFirstName.equals(newFirstName) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.firstName.saveChanges\", originalUser.getDisplayName(), oldFirstName, newFirstName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldLastName = originalUser.getLastName();\r\n        String newLastName = revisedUser.getLastName();\r\n        if (oldLastName.equals(newLastName) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.lastName.saveChanges\", originalUser.getDisplayName(), oldLastName, newLastName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Affiliation\"\r\n        String oldAffiliation = originalUser.getAffiliation();\r\n        String newAffiliation = revisedUser.getAffiliation();\r\n        if (oldAffiliation.equals(newAffiliation) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.affiliation.saveChanges\", originalUser.getDisplayName(), oldAffiliation, newAffiliation);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Address Line 1\"\r\n        String oldAddressLine1 = originalUser.getAddressLine1();\r\n        String newAddressLine1 = revisedUser.getAddressLine1();\r\n        if (oldAddressLine1.equals(newAddressLine1) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.addressLine1.saveChanges\", originalUser.getDisplayName(), oldAddressLine1, newAddressLine1);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Address Line 2\"\r\n        String oldAddressLine2 = originalUser.getAddressLine2();\r\n        String newAddressLine2 = revisedUser.getAddressLine2();\r\n        if (oldAddressLine2.equals(newAddressLine2) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.addressLine2.saveChanges\", originalUser.getDisplayName(), oldAddressLine2, newAddressLine2);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"City\"\r\n        String oldCity = originalUser.getCity();\r\n        String newCity = revisedUser.getCity();\r\n        if (oldCity.equals(newCity) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.city.saveChanges\", originalUser.getDisplayName(), oldCity, newCity);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"County\"\r\n        String oldCounty = originalUser.getCounty();\r\n        String newCounty = revisedUser.getCounty();\r\n        if (oldCounty.equals(newCounty) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.county.saveChanges\", originalUser.getDisplayName(), oldCounty, newCounty);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Post Code\"\r\n        String oldPostCode = originalUser.getPostCode();\r\n        String newPostCode = revisedUser.getPostCode();\r\n        if (oldPostCode.equals(newPostCode) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.postCode.saveChanges\", originalUser.getDisplayName(), oldPostCode, newPostCode);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Phone\"\r\n        String oldPhone = originalUser.getPhone();\r\n        String newPhone = revisedUser.getPhone();\r\n        if (oldPhone.equals(newPhone) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.phone.saveChanges\", originalUser.getDisplayName(), oldPhone, newPhone);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Email\"\r\n        String oldEmail = originalUser.getEmail();\r\n        String newEmail = revisedUser.getEmail();\r\n        if (oldEmail.equals(newEmail) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.email.saveChanges\", originalUser.getDisplayName(), oldEmail, newEmail);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Status\"\r\n        String oldStatus = originalUser.getStatus();\r\n        String newStatus = revisedUser.getStatus();\r\n        if (oldStatus.equals(newStatus) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.status.saveChanges\", originalUser.getDisplayName(), oldStatus, newStatus);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(User user) {\r\n        if (getDisplayName().equals(user.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static public void checkValidEmail(String candidateEmail) throws MacawException {\r\n        if (ValidationUtility.isValidEmail(candidateEmail) == false) {\r\n            //ERROR\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.invalidEmail\", candidateEmail);\r\n            MacawException exception = new MacawException(MacawErrorType.INVALID_USER, errorMessage);\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public void checkValidUserIDField(String candidateUserID) throws MacawException {\r\n        if (ValidationUtility.promotesSecurityRisk(candidateUserID) == true) {\r\n            String userIDText = MacawMessages.getMessage(\"user.userID.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", userIDText, candidateUserID);\r\n            MacawException exception = new MacawException(MacawErrorType.INVALID_USER, errorMessage);\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public void validateFields(User user) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        String userID = user.getUserID();\r\n        if (ValidationUtility.isBlank(userID) == true) {\r\n            String userIDText = MacawMessages.getMessage(\"user.userID.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", userIDText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(userID) == true) {\r\n            String userIDText = MacawMessages.getMessage(\"user.userID.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", userIDText, userID);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        String firstName = user.getFirstName();\r\n        if (ValidationUtility.isBlank(firstName) == true) {\r\n            String firstNameText = MacawMessages.getMessage(\"user.firstName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", firstNameText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(firstName) == true) {\r\n            String firstNameText = MacawMessages.getMessage(\"user.firstName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", firstNameText, firstName);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        String lastName = user.getLastName();\r\n        if (ValidationUtility.isBlank(user.getLastName()) == true) {\r\n            String lastNameText = MacawMessages.getMessage(\"user.lastName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", lastNameText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(lastName) == true) {\r\n            String lastNameText = MacawMessages.getMessage(\"user.lastName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", lastNameText, lastName);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validating Affiliation\r\n        String affiliation = user.getAffiliation();\r\n        if (ValidationUtility.isBlank(affiliation) == true) {\r\n            String affiliationText = MacawMessages.getMessage(\"user.affiliation.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", affiliationText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(affiliation) == true) {\r\n            String affiliationText = MacawMessages.getMessage(\"user.affiliation.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", affiliationText, affiliation);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field Address Line 1\r\n        String addressLine1 = user.getAddressLine1();\r\n        if (ValidationUtility.isBlank(addressLine1) == true) {\r\n            String addressLine1Text = MacawMessages.getMessage(\"user.addressLine1.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", addressLine1Text);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(addressLine1) == true) {\r\n            String addressLine1Text = MacawMessages.getMessage(\"user.addressLine1.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", addressLine1Text, addressLine1);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        String addressLine2 = user.getAddressLine2();\r\n        //Validate field Address Line 2\r\n        /*\r\n\t\tString addressLine2 = user.getAddressLine2();\r\n\t\tif (ValidationUtility.isBlank(addressLine2) == true) {\r\n\t\t\tString addressLine2Text \r\n\t\t\t\t= MacawMessages.getMessage(\"user.addressLine2.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t   addressLine2Text);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        if (addressLine2.equals(\"\") == false) {\r\n            if (ValidationUtility.promotesSecurityRisk(addressLine2) == true) {\r\n                String addressLine2Text = MacawMessages.getMessage(\"user.addressLine2.label\");\r\n                String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", addressLine2Text, addressLine2);\r\n                errorMessages.add(errorMessage);\r\n            }\r\n        }\r\n        //Validate field City\r\n        String city = user.getCity();\r\n        if (ValidationUtility.isBlank(city) == true) {\r\n            String cityText = MacawMessages.getMessage(\"user.city.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", cityText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(city) == true) {\r\n            String cityText = MacawMessages.getMessage(\"user.city.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", cityText, city);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field County\r\n        String county = user.getCounty();\r\n        if (ValidationUtility.isBlank(county) == true) {\r\n            String countyText = MacawMessages.getMessage(\"user.county.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", countyText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(county) == true) {\r\n            String userIDText = MacawMessages.getMessage(\"user.county.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", userIDText, userID);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field PostCode\r\n        String postCode = user.getPostCode();\r\n        if (ValidationUtility.isBlank(postCode) == true) {\r\n            String postCodeText = MacawMessages.getMessage(\"user.postCode.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", postCodeText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(postCode) == true) {\r\n            String postCodeText = MacawMessages.getMessage(\"user.postCode.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", postCodeText, postCode);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field Phone\r\n        String phone = user.getPhone();\r\n        if (ValidationUtility.isBlank(phone) == true) {\r\n            String phoneText = MacawMessages.getMessage(\"user.phone.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", phoneText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(phone) == true) {\r\n            String phoneText = MacawMessages.getMessage(\"user.phone.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", phoneText, phone);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field Email\r\n        String email = user.getEmail();\r\n        if (ValidationUtility.isBlank(email) == true) {\r\n            String emailText = MacawMessages.getMessage(\"user.email.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", emailText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.isValidEmail(email) == false) {\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.invalidEmail\", email);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field Status\r\n        String status = user.getStatus();\r\n        if (ValidationUtility.isBlank(status) == true) {\r\n            String statusText = MacawMessages.getMessage(\"user.status.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", statusText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(status) == true) {\r\n            String statusText = MacawMessages.getMessage(\"user.status.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", statusText, status);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (ValidationUtility.isBlank(user.getPassword()) == true) {\r\n            String passwordText = MacawMessages.getMessage(\"user.password.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", passwordText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_USER, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        /**\r\n         * \t\tStringBuilder buffer = new StringBuilder();\r\n         * \t\tbuffer.append(firstName);\r\n         * \t\tbuffer.append(\" \");\r\n         * \t\tbuffer.append(lastName);\r\n         * \t\treturn buffer.toString();\r\n         */\r\n        return userID;\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    public Object clone() {\r\n        User cloneUser = new User();\r\n        cloneUser.setIdentifier(identifier);\r\n        cloneUser.setUserID(userID);\r\n        cloneUser.setFirstName(firstName);\r\n        cloneUser.setLastName(lastName);\r\n        cloneUser.setAffiliation(affiliation);\r\n        cloneUser.setAddressLine1(addressLine1);\r\n        cloneUser.setAddressLine2(addressLine2);\r\n        cloneUser.setCity(city);\r\n        cloneUser.setPostCode(postCode);\r\n        cloneUser.setCounty(county);\r\n        cloneUser.setPhone(phone);\r\n        cloneUser.setEmail(email);\r\n        cloneUser.setStatus(status);\r\n        cloneUser.setPassword(password);\r\n        return cloneUser;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/UserTest1.java",
		"test_prompt": "// UserTest1.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.ValidationUtility;\nimport macaw.util.Displayable;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link User}.\n* It contains ten unit test cases for the {@link User#hasSameDisplayName(User)} method.\n*/\nclass UserTest1 {"
	},
	{
		"original_code": "// User.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.ValidationUtility;\r\nimport macaw.util.Displayable;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class User implements Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String userID;\r\n\r\n    private String firstName;\r\n\r\n    private String lastName;\r\n\r\n    private String affiliation;\r\n\r\n    private String addressLine1;\r\n\r\n    private String addressLine2;\r\n\r\n    private String city;\r\n\r\n    private String postCode;\r\n\r\n    private String county;\r\n\r\n    private String phone;\r\n\r\n    private String email;\r\n\r\n    private String status;\r\n\r\n    private String password;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public User() {\r\n        init();\r\n    }\r\n\r\n    public User(String userID, String password) {\r\n        init();\r\n        identifier = 0;\r\n        this.userID = userID;\r\n        this.password = password;\r\n    }\r\n\r\n    private void init() {\r\n        userID = \"\";\r\n        identifier = 0;\r\n        firstName = \"\";\r\n        lastName = \"\";\r\n        affiliation = \"\";\r\n        addressLine1 = \"\";\r\n        addressLine2 = \"\";\r\n        city = \"\";\r\n        postCode = \"\";\r\n        county = \"\";\r\n        phone = \"\";\r\n        email = \"\";\r\n        status = MacawMessages.getMessage(\"user.status.unverified\");\r\n        password = \"\";\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the userID\r\n     */\r\n    public String getUserID() {\r\n        return userID;\r\n    }\r\n\r\n    /**\r\n     * @param userID the userID to set\r\n     */\r\n    public void setUserID(String userID) {\r\n        this.userID = userID;\r\n    }\r\n\r\n    /**\r\n     * @return the firstName\r\n     */\r\n    public String getFirstName() {\r\n        return firstName;\r\n    }\r\n\r\n    /**\r\n     * @param firstName the firstName to set\r\n     */\r\n    public void setFirstName(String firstName) {\r\n        this.firstName = firstName;\r\n    }\r\n\r\n    /**\r\n     * @return the lastName\r\n     */\r\n    public String getLastName() {\r\n        return lastName;\r\n    }\r\n\r\n    /**\r\n     * @param lastName the lastName to set\r\n     */\r\n    public void setLastName(String lastName) {\r\n        this.lastName = lastName;\r\n    }\r\n\r\n    /**\r\n     * @return the affiliation\r\n     */\r\n    public String getAffiliation() {\r\n        return affiliation;\r\n    }\r\n\r\n    /**\r\n     * @param affiliation the affiliation to set\r\n     */\r\n    public void setAffiliation(String affiliation) {\r\n        this.affiliation = affiliation;\r\n    }\r\n\r\n    /**\r\n     * @return the addressLine1\r\n     */\r\n    public String getAddressLine1() {\r\n        return addressLine1;\r\n    }\r\n\r\n    /**\r\n     * @param addressLine1 the addressLine1 to set\r\n     */\r\n    public void setAddressLine1(String addressLine1) {\r\n        this.addressLine1 = addressLine1;\r\n    }\r\n\r\n    /**\r\n     * @return the addressLine2\r\n     */\r\n    public String getAddressLine2() {\r\n        return addressLine2;\r\n    }\r\n\r\n    /**\r\n     * @param addressLine2 the addressLine2 to set\r\n     */\r\n    public void setAddressLine2(String addressLine2) {\r\n        this.addressLine2 = addressLine2;\r\n    }\r\n\r\n    /**\r\n     * @return the city\r\n     */\r\n    public String getCity() {\r\n        return city;\r\n    }\r\n\r\n    /**\r\n     * @param city the city to set\r\n     */\r\n    public void setCity(String city) {\r\n        this.city = city;\r\n    }\r\n\r\n    /**\r\n     * @return the postCode\r\n     */\r\n    public String getPostCode() {\r\n        return postCode;\r\n    }\r\n\r\n    /**\r\n     * @param postCode the postCode to set\r\n     */\r\n    public void setPostCode(String postCode) {\r\n        this.postCode = postCode;\r\n    }\r\n\r\n    /**\r\n     * @return the county\r\n     */\r\n    public String getCounty() {\r\n        return county;\r\n    }\r\n\r\n    /**\r\n     * @param county the county to set\r\n     */\r\n    public void setCounty(String county) {\r\n        this.county = county;\r\n    }\r\n\r\n    /**\r\n     * @return the phone\r\n     */\r\n    public String getPhone() {\r\n        return phone;\r\n    }\r\n\r\n    /**\r\n     * @param phone the phone to set\r\n     */\r\n    public void setPhone(String phone) {\r\n        this.phone = phone;\r\n    }\r\n\r\n    /**\r\n     * @return the email\r\n     */\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    /**\r\n     * @param email the email to set\r\n     */\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    /**\r\n     * @return the status\r\n     */\r\n    public String getStatus() {\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * @param status the status to set\r\n     */\r\n    public void setStatus(String status) {\r\n        this.status = status;\r\n    }\r\n\r\n    /**\r\n     * @return the password\r\n     */\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @param password the password to set\r\n     */\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User admin, User originalUser, User revisedUser) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String oldUserID = originalUser.getUserID();\r\n        String newUserID = revisedUser.getUserID();\r\n        if (oldUserID.equals(newUserID) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.userID.saveChanges\", originalUser.getDisplayName(), oldUserID, newUserID);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldPassword = originalUser.getPassword();\r\n        String newPassword = revisedUser.getPassword();\r\n        if (oldPassword.equals(newPassword) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.password.saveChanges\", originalUser.getDisplayName(), oldPassword, newPassword);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldFirstName = originalUser.getFirstName();\r\n        String newFirstName = revisedUser.getFirstName();\r\n        if (oldFirstName.equals(newFirstName) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.firstName.saveChanges\", originalUser.getDisplayName(), oldFirstName, newFirstName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldLastName = originalUser.getLastName();\r\n        String newLastName = revisedUser.getLastName();\r\n        if (oldLastName.equals(newLastName) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.lastName.saveChanges\", originalUser.getDisplayName(), oldLastName, newLastName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Affiliation\"\r\n        String oldAffiliation = originalUser.getAffiliation();\r\n        String newAffiliation = revisedUser.getAffiliation();\r\n        if (oldAffiliation.equals(newAffiliation) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.affiliation.saveChanges\", originalUser.getDisplayName(), oldAffiliation, newAffiliation);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Address Line 1\"\r\n        String oldAddressLine1 = originalUser.getAddressLine1();\r\n        String newAddressLine1 = revisedUser.getAddressLine1();\r\n        if (oldAddressLine1.equals(newAddressLine1) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.addressLine1.saveChanges\", originalUser.getDisplayName(), oldAddressLine1, newAddressLine1);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Address Line 2\"\r\n        String oldAddressLine2 = originalUser.getAddressLine2();\r\n        String newAddressLine2 = revisedUser.getAddressLine2();\r\n        if (oldAddressLine2.equals(newAddressLine2) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.addressLine2.saveChanges\", originalUser.getDisplayName(), oldAddressLine2, newAddressLine2);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"City\"\r\n        String oldCity = originalUser.getCity();\r\n        String newCity = revisedUser.getCity();\r\n        if (oldCity.equals(newCity) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.city.saveChanges\", originalUser.getDisplayName(), oldCity, newCity);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"County\"\r\n        String oldCounty = originalUser.getCounty();\r\n        String newCounty = revisedUser.getCounty();\r\n        if (oldCounty.equals(newCounty) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.county.saveChanges\", originalUser.getDisplayName(), oldCounty, newCounty);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Post Code\"\r\n        String oldPostCode = originalUser.getPostCode();\r\n        String newPostCode = revisedUser.getPostCode();\r\n        if (oldPostCode.equals(newPostCode) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.postCode.saveChanges\", originalUser.getDisplayName(), oldPostCode, newPostCode);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Phone\"\r\n        String oldPhone = originalUser.getPhone();\r\n        String newPhone = revisedUser.getPhone();\r\n        if (oldPhone.equals(newPhone) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.phone.saveChanges\", originalUser.getDisplayName(), oldPhone, newPhone);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Email\"\r\n        String oldEmail = originalUser.getEmail();\r\n        String newEmail = revisedUser.getEmail();\r\n        if (oldEmail.equals(newEmail) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.email.saveChanges\", originalUser.getDisplayName(), oldEmail, newEmail);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //Detecting changes in field \"Status\"\r\n        String oldStatus = originalUser.getStatus();\r\n        String newStatus = revisedUser.getStatus();\r\n        if (oldStatus.equals(newStatus) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"user.status.saveChanges\", originalUser.getDisplayName(), oldStatus, newStatus);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changedTitleMessage, admin.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(originalUser.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(User user) {\r\n        if (getDisplayName().equals(user.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static public void checkValidEmail(String candidateEmail) throws MacawException {\r\n        if (ValidationUtility.isValidEmail(candidateEmail) == false) {\r\n            //ERROR\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.invalidEmail\", candidateEmail);\r\n            MacawException exception = new MacawException(MacawErrorType.INVALID_USER, errorMessage);\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public void checkValidUserIDField(String candidateUserID) throws MacawException {\r\n        if (ValidationUtility.promotesSecurityRisk(candidateUserID) == true) {\r\n            String userIDText = MacawMessages.getMessage(\"user.userID.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", userIDText, candidateUserID);\r\n            MacawException exception = new MacawException(MacawErrorType.INVALID_USER, errorMessage);\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public void validateFields(User user) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        String userID = user.getUserID();\r\n        if (ValidationUtility.isBlank(userID) == true) {\r\n            String userIDText = MacawMessages.getMessage(\"user.userID.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", userIDText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(userID) == true) {\r\n            String userIDText = MacawMessages.getMessage(\"user.userID.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", userIDText, userID);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        String firstName = user.getFirstName();\r\n        if (ValidationUtility.isBlank(firstName) == true) {\r\n            String firstNameText = MacawMessages.getMessage(\"user.firstName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", firstNameText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(firstName) == true) {\r\n            String firstNameText = MacawMessages.getMessage(\"user.firstName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", firstNameText, firstName);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        String lastName = user.getLastName();\r\n        if (ValidationUtility.isBlank(user.getLastName()) == true) {\r\n            String lastNameText = MacawMessages.getMessage(\"user.lastName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", lastNameText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(lastName) == true) {\r\n            String lastNameText = MacawMessages.getMessage(\"user.lastName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", lastNameText, lastName);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validating Affiliation\r\n        String affiliation = user.getAffiliation();\r\n        if (ValidationUtility.isBlank(affiliation) == true) {\r\n            String affiliationText = MacawMessages.getMessage(\"user.affiliation.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", affiliationText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(affiliation) == true) {\r\n            String affiliationText = MacawMessages.getMessage(\"user.affiliation.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", affiliationText, affiliation);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field Address Line 1\r\n        String addressLine1 = user.getAddressLine1();\r\n        if (ValidationUtility.isBlank(addressLine1) == true) {\r\n            String addressLine1Text = MacawMessages.getMessage(\"user.addressLine1.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", addressLine1Text);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(addressLine1) == true) {\r\n            String addressLine1Text = MacawMessages.getMessage(\"user.addressLine1.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", addressLine1Text, addressLine1);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        String addressLine2 = user.getAddressLine2();\r\n        //Validate field Address Line 2\r\n        /*\r\n\t\tString addressLine2 = user.getAddressLine2();\r\n\t\tif (ValidationUtility.isBlank(addressLine2) == true) {\r\n\t\t\tString addressLine2Text \r\n\t\t\t\t= MacawMessages.getMessage(\"user.addressLine2.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t   addressLine2Text);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        if (addressLine2.equals(\"\") == false) {\r\n            if (ValidationUtility.promotesSecurityRisk(addressLine2) == true) {\r\n                String addressLine2Text = MacawMessages.getMessage(\"user.addressLine2.label\");\r\n                String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", addressLine2Text, addressLine2);\r\n                errorMessages.add(errorMessage);\r\n            }\r\n        }\r\n        //Validate field City\r\n        String city = user.getCity();\r\n        if (ValidationUtility.isBlank(city) == true) {\r\n            String cityText = MacawMessages.getMessage(\"user.city.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", cityText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(city) == true) {\r\n            String cityText = MacawMessages.getMessage(\"user.city.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", cityText, city);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field County\r\n        String county = user.getCounty();\r\n        if (ValidationUtility.isBlank(county) == true) {\r\n            String countyText = MacawMessages.getMessage(\"user.county.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", countyText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(county) == true) {\r\n            String userIDText = MacawMessages.getMessage(\"user.county.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", userIDText, userID);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field PostCode\r\n        String postCode = user.getPostCode();\r\n        if (ValidationUtility.isBlank(postCode) == true) {\r\n            String postCodeText = MacawMessages.getMessage(\"user.postCode.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", postCodeText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(postCode) == true) {\r\n            String postCodeText = MacawMessages.getMessage(\"user.postCode.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", postCodeText, postCode);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field Phone\r\n        String phone = user.getPhone();\r\n        if (ValidationUtility.isBlank(phone) == true) {\r\n            String phoneText = MacawMessages.getMessage(\"user.phone.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", phoneText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(phone) == true) {\r\n            String phoneText = MacawMessages.getMessage(\"user.phone.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", phoneText, phone);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field Email\r\n        String email = user.getEmail();\r\n        if (ValidationUtility.isBlank(email) == true) {\r\n            String emailText = MacawMessages.getMessage(\"user.email.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", emailText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.isValidEmail(email) == false) {\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.invalidEmail\", email);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //Validate field Status\r\n        String status = user.getStatus();\r\n        if (ValidationUtility.isBlank(status) == true) {\r\n            String statusText = MacawMessages.getMessage(\"user.status.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", statusText);\r\n            errorMessages.add(errorMessage);\r\n        } else if (ValidationUtility.promotesSecurityRisk(status) == true) {\r\n            String statusText = MacawMessages.getMessage(\"user.status.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", statusText, status);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (ValidationUtility.isBlank(user.getPassword()) == true) {\r\n            String passwordText = MacawMessages.getMessage(\"user.password.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", passwordText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_USER, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        /**\r\n         * \t\tStringBuilder buffer = new StringBuilder();\r\n         * \t\tbuffer.append(firstName);\r\n         * \t\tbuffer.append(\" \");\r\n         * \t\tbuffer.append(lastName);\r\n         * \t\treturn buffer.toString();\r\n         */\r\n        return userID;\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    public Object clone() {\r\n        User cloneUser = new User();\r\n        cloneUser.setIdentifier(identifier);\r\n        cloneUser.setUserID(userID);\r\n        cloneUser.setFirstName(firstName);\r\n        cloneUser.setLastName(lastName);\r\n        cloneUser.setAffiliation(affiliation);\r\n        cloneUser.setAddressLine1(addressLine1);\r\n        cloneUser.setAddressLine2(addressLine2);\r\n        cloneUser.setCity(city);\r\n        cloneUser.setPostCode(postCode);\r\n        cloneUser.setCounty(county);\r\n        cloneUser.setPhone(phone);\r\n        cloneUser.setEmail(email);\r\n        cloneUser.setStatus(status);\r\n        cloneUser.setPassword(password);\r\n        return cloneUser;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/UserTest2.java",
		"test_prompt": "// UserTest2.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.ValidationUtility;\nimport macaw.util.Displayable;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link User}.\n* It contains ten unit test cases for the {@link User#clone()} method.\n*/\nclass UserTest2 {"
	},
	{
		"original_code": "// Variable.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A concept related to the NSHD study.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\nabstract public class Variable implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String category;\r\n\r\n    private String name;\r\n\r\n    private String label;\r\n\r\n    private boolean isCleaned;\r\n\r\n    private String year;\r\n\r\n    private String cleaningStatus;\r\n\r\n    private String cleaningDescription;\r\n\r\n    private ArrayList<ValueLabel> valueLabels;\r\n\r\n    private String availability;\r\n\r\n    private String alias;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isCoded;\r\n\r\n    protected String form;\r\n\r\n    protected String questionNumber;\r\n\r\n    protected String codeBookNumber;\r\n\r\n    protected String columnStart;\r\n\r\n    protected String columnEnd;\r\n\r\n    protected String notes;\r\n\r\n    private ArrayList<SupportingDocument> supportingDocuments;\r\n\r\n    private ArrayList<OntologyTerm> ontologyTerms;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    private Variable alternativeVariable;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public Variable() {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        identifier = 0;\r\n        category = unknownMessage;\r\n        name = \"\";\r\n        year = \"\";\r\n        label = \"\";\r\n        isCleaned = false;\r\n        cleaningStatus = unknownMessage;\r\n        cleaningDescription = \"\";\r\n        valueLabels = new ArrayList<ValueLabel>();\r\n        availability = unknownMessage;\r\n        alias = \"\";\r\n        filePath = \"\";\r\n        supportingDocuments = new ArrayList<SupportingDocument>();\r\n        ontologyTerms = new ArrayList<OntologyTerm>();\r\n        isCoded = false;\r\n        isNewRecord = false;\r\n        codeBookNumber = \"\";\r\n        columnStart = \"\";\r\n        columnEnd = \"\";\r\n        form = \"\";\r\n        questionNumber = \"\";\r\n        notes = \"\";\r\n        alternativeVariable = null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produces a variable summary suitable for showing in a collection\r\n     * of search results.\r\n     */\r\n    public VariableSummary createVariableSummary() {\r\n        VariableSummary variableSummary = new VariableSummary();\r\n        variableSummary.setIdentifier(identifier);\r\n        variableSummary.setName(name);\r\n        variableSummary.setLabel(label);\r\n        variableSummary.setYear(year);\r\n        return variableSummary;\r\n    }\r\n\r\n    /**\r\n     * an integer which uniquely identifies an instance in the database.\r\n     * All primary key values in the database use a single auto-incremented\r\n     * auto-generated value.\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * variable name, as specified using the NSHD variable naming convention\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * a one-line description of the variable\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * sweep in which the variable was collected\r\n     * @return the year\r\n     */\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    /**\r\n     * @param year the year to set\r\n     */\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    /**\r\n     * @return the category\r\n     */\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    /**\r\n     * @param category the category to set\r\n     */\r\n    public void setCategory(String category) {\r\n        this.category = category;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been cleaned in some way\r\n     * @return the isCleaned\r\n     */\r\n    public boolean isCleaned() {\r\n        return isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @param isCleaned the isCleaned to set\r\n     */\r\n    public void setCleaned(boolean isCleaned) {\r\n        this.isCleaned = isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @return the cleaningStatus\r\n     */\r\n    public String getCleaningStatus() {\r\n        return cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningStatus the cleaningStatus to set\r\n     */\r\n    public void setCleaningStatus(String cleaningStatus) {\r\n        this.cleaningStatus = cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * free text description of how the variable data were cleaned.\r\n     * @return the cleaningDescription\r\n     */\r\n    public String getCleaningDescription() {\r\n        return cleaningDescription;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningDescription the cleaningDescription to set\r\n     */\r\n    public void setCleaningDescription(String cleaningDescription) {\r\n        this.cleaningDescription = cleaningDescription;\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels() {\r\n        return valueLabels;\r\n    }\r\n\r\n    public void setValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        this.valueLabels = valueLabels;\r\n    }\r\n\r\n    public void addValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.add(valueLabel);\r\n    }\r\n\r\n    public void removeValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.remove(valueLabel);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments() {\r\n        return supportingDocuments;\r\n    }\r\n\r\n    public boolean containsSupportingDocument(SupportingDocument targetSupportingDocument) {\r\n        int targetIdentifier = targetSupportingDocument.getIdentifier();\r\n        for (SupportingDocument currentSupportingDocument : supportingDocuments) {\r\n            int currentIdentifier = currentSupportingDocument.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setSupportingDocuments(ArrayList<SupportingDocument> supportingDocuments) {\r\n        this.supportingDocuments = supportingDocuments;\r\n    }\r\n\r\n    public void addSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToAdd) {\r\n        supportingDocuments.addAll(supportingDocumentsToAdd);\r\n    }\r\n\r\n    public void addSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.add(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.remove(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        for (SupportingDocument targetVariable : supportingDocumentsToDelete) {\r\n            supportingDocuments.remove(targetVariable);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms() {\r\n        return ontologyTerms;\r\n    }\r\n\r\n    public boolean containsOntologyTerm(OntologyTerm targetOntologyTerm) {\r\n        int targetIdentifier = targetOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            int currentIdentifier = currentOntologyTerm.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setOntologyTerms(ArrayList<OntologyTerm> ontologyTerms) {\r\n        this.ontologyTerms = ontologyTerms;\r\n    }\r\n\r\n    public void addOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToAdd) {\r\n        ontologyTerms.addAll(ontologyTermsToAdd);\r\n    }\r\n\r\n    public void addOntologyTerm(OntologyTerm ontologyTerm) {\r\n        ontologyTerms.add(ontologyTerm);\r\n    }\r\n\r\n    public void removeOntologyTerm(OntologyTerm copyOfOntologyTermToDelete) {\r\n        OntologyTerm itemToDelete = findOntologyTerm(copyOfOntologyTermToDelete);\r\n        if (itemToDelete != null) {\r\n            ontologyTerms.remove(itemToDelete);\r\n        }\r\n    }\r\n\r\n    public void removeOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToDelete) {\r\n        for (OntologyTerm targetOntologyTerm : ontologyTermsToDelete) {\r\n            removeOntologyTerm(targetOntologyTerm);\r\n        }\r\n    }\r\n\r\n    public void updateOntologyTerm(OntologyTerm revisedOntologyTerm) {\r\n        OntologyTerm itemToUpdate = findOntologyTerm(revisedOntologyTerm);\r\n        if (itemToUpdate != null) {\r\n            int numberOfTerms = ontologyTerms.size();\r\n            int index = ontologyTerms.indexOf(itemToUpdate);\r\n            ontologyTerms.remove(itemToUpdate);\r\n            if (index == numberOfTerms - 1) {\r\n                //item to update was at the end\r\n                ontologyTerms.add(revisedOntologyTerm);\r\n            } else {\r\n                ontologyTerms.add(index, revisedOntologyTerm);\r\n            }\r\n        }\r\n    }\r\n\r\n    private OntologyTerm findOntologyTerm(OntologyTerm copyofOntologyTerm) {\r\n        int targetIdentifier = copyofOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            if (currentOntologyTerm.getIdentifier() == targetIdentifier) {\r\n                //found the item to delete\r\n                return currentOntologyTerm;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @return the availability\r\n     */\r\n    public String getAvailability() {\r\n        return availability;\r\n    }\r\n\r\n    /**\r\n     * @param availability the availability to set\r\n     */\r\n    public void setAvailability(String availability) {\r\n        this.availability = availability;\r\n    }\r\n\r\n    /**\r\n     * @return the codeBookNumber\r\n     */\r\n    public String getCodeBookNumber() {\r\n        return codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * reference to the physical code book entry\r\n     * @param codeBookNumber the codeBookNumber to set\r\n     */\r\n    public void setCodeBookNumber(String codeBookNumber) {\r\n        this.codeBookNumber = codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * starting column in library file for this variable\r\n     * @return the columnStart\r\n     */\r\n    public String getColumnStart() {\r\n        return columnStart;\r\n    }\r\n\r\n    /**\r\n     * @param columnStart the columnStart to set\r\n     */\r\n    public void setColumnStart(String columnStart) {\r\n        this.columnStart = columnStart;\r\n    }\r\n\r\n    /**\r\n     * ending column in library file for this variable\r\n     * @return the columnEnd\r\n     */\r\n    public String getColumnEnd() {\r\n        return columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @param columnEnd the columnEnd to set\r\n     */\r\n    public void setColumnEnd(String columnEnd) {\r\n        this.columnEnd = columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @return the alias\r\n     */\r\n    public String getAlias() {\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * @param alias the alias to set\r\n     */\r\n    public void setAlias(String alias) {\r\n        this.alias = alias;\r\n    }\r\n\r\n    /**\r\n     * @return the file Name\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the dataLibraryFileName to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been coded electronically (or not)\r\n     * @return the isCoded\r\n     */\r\n    public boolean isCoded() {\r\n        return isCoded;\r\n    }\r\n\r\n    /**\r\n     * @param isCoded the isCoded to set\r\n     */\r\n    public void setCoded(boolean isCoded) {\r\n        this.isCoded = isCoded;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    public void setIsNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * questionnaire form containing the question whose response is stored in the variable\r\n     * @return the form\r\n     */\r\n    public String getForm() {\r\n        return form;\r\n    }\r\n\r\n    /**\r\n     * @param form the form to set\r\n     */\r\n    public void setForm(String form) {\r\n        this.form = form;\r\n    }\r\n\r\n    /**\r\n     * question number from the questionnaire for this variable\r\n     * @return the questionNumber\r\n     */\r\n    public String getQuestionNumber() {\r\n        return questionNumber;\r\n    }\r\n\r\n    /**\r\n     * @param questionNumber the questionNumber to set\r\n     */\r\n    public void setQuestionNumber(String questionNumber) {\r\n        this.questionNumber = questionNumber;\r\n    }\r\n\r\n    public String getNotes() {\r\n        return notes;\r\n    }\r\n\r\n    public void setNotes(String notes) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public Variable getAlternativeVariable() {\r\n        return alternativeVariable;\r\n    }\r\n\r\n    public void setAlternativeVariable(Variable alterativeVariable) {\r\n        this.alternativeVariable = alterativeVariable;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static protected ArrayList<String> validateFields(Variable variable) {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //specify a name\r\n        if (ValidationUtility.isBlank(variable.getName()) == true) {\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", nameLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //specify a label\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getLabel()) == true) {\r\n         * \t\t\tString labelLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.label.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tlabelLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a category\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t\r\n\t\tif (ValidationUtility.isUnknown(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        //specify an availability\r\n        if (ValidationUtility.isBlank(variable.getAvailability()) == true) {\r\n            String availabilityLabelText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", availabilityLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /**\r\n         * \t\tif (ValidationUtility.isUnknown(variable.getAvailability()) == true) {\r\n         * \t\t\tString availabilityLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.availability.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tavailabilityLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify cleaning status\r\n        if (variable.isCleaned() == true) {\r\n            if (ValidationUtility.isBlank(variable.getCleaningStatus()) == true) {\r\n                String cleaningStatusLabelText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", cleaningStatusLabelText);\r\n                errorMessages.add(errorMessage);\r\n            }\r\n            /**\r\n             * \t\t\tif (ValidationUtility.isUnknown(variable.getCleaningStatus()) == true) {\r\n             * \t\t\t\tString cleaningStatusLabelText\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n             * \t\t\t\tString errorMessage\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n             * \t\t\t\t\t\t\t\t\t\t\t\tcleaningStatusLabelText);\r\n             * \t\t\t\terrorMessages.add(errorMessage);\r\n             * \t\t\t}\r\n             */\r\n        }\r\n        //specify a year\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getYear()) == true) {\r\n         * \t\t\tString yearLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.year.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tyearLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         * \t\telse {\r\n         * \t\t\t//make sure year is numeric\r\n         * \t\t\tString yearValue = variable.getYear();\r\n         *\r\n         * \t\t\ttry {\r\n         * \t\t\t\tDate currentDate = new Date();\r\n         * \t\t\t\tGregorianCalendar gregorianCalendar = new GregorianCalendar();\r\n         * \t\t\t\tgregorianCalendar.setTime(currentDate);\r\n         * \t\t\t\tint currentYearNumber = gregorianCalendar.get(Calendar.YEAR);\r\n         *\r\n         * \t\t\t\tint calendarYear = new Integer(yearValue).intValue();\r\n         * \t\t\t\tif (calendarYear < 1946) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooOld\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t\telse if (calendarYear > currentYearNumber) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooNew\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t}\r\n         * \t\t\tcatch(NumberFormatException exception) {\r\n         * \t\t\t\tString illegalNumberFormatException\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.illegalYear\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\terrorMessages.add(illegalNumberFormatException);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        /**\r\n         * \t\tString columnStart = variable.getColumnStart();\r\n         * \t\tif (ValidationUtility.isBlank(columnStart) == false) {\r\n         * \t\t\t//check that column start is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnStart);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnStartLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnStart.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStart,\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStartLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         *\r\n         * \t\tString columnEnd = variable.getColumnEnd();\r\n         * \t\tif (ValidationUtility.isBlank(columnEnd) == false) {\r\n         * \t\t\t//check that column end is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnEnd);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnEndLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEnd,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEndLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        //specify an alias\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getAlias()) == true) {\r\n         * \t\t\tString aliasLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.alias.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\taliasLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a file name\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getFilePath()) == true) {\r\n         * \t\t\tString filePathLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tfilePathLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        return errorMessages;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable originalVariable, Variable revisedVariable) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String ownerVariableName = originalVariable.getDisplayName();\r\n        //detect changes in name\r\n        String oldName = originalVariable.getName();\r\n        String newName = revisedVariable.getName();\r\n        if (oldName.equals(newName) == false) {\r\n            oldName = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newName = ValidationUtility.convertEmptyValueToBlank(newName);\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, nameLabelText, oldName, newName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //=Changed variable {0}, field {1}, from {2} to {3}\r\n        //detect changes in label\r\n        String oldLabel = originalVariable.getLabel();\r\n        String newLabel = revisedVariable.getLabel();\r\n        if (oldLabel.equals(newLabel) == false) {\r\n            oldLabel = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newLabel = ValidationUtility.convertEmptyValueToBlank(newLabel);\r\n            String labelLabelText = MacawMessages.getMessage(\"variable.label.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, labelLabelText, oldLabel, newLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in year\r\n        String oldYear = originalVariable.getYear();\r\n        String newYear = revisedVariable.getYear();\r\n        if (oldYear.equals(newYear) == false) {\r\n            oldYear = ValidationUtility.convertEmptyValueToBlank(oldYear);\r\n            newYear = ValidationUtility.convertEmptyValueToBlank(newYear);\r\n            String yearLabelText = MacawMessages.getMessage(\"variable.year.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, yearLabelText, oldYear, newYear);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in category\r\n        String originalCategory = originalVariable.getCategory();\r\n        String revisedCategory = revisedVariable.getCategory();\r\n        if (originalCategory.equals(revisedCategory) == false) {\r\n            originalCategory = ValidationUtility.convertEmptyValueToBlank(originalCategory);\r\n            revisedCategory = ValidationUtility.convertEmptyValueToBlank(revisedCategory);\r\n            String categoryLabelText = MacawMessages.getMessage(\"variable.category.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, categoryLabelText, originalCategory, revisedCategory);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCleaned = originalVariable.isCleaned();\r\n        boolean revisedIsCleaned = revisedVariable.isCleaned();\r\n        if ((originalIsCleaned != revisedIsCleaned) && (revisedIsCleaned == false)) {\r\n            String changedToNotCleaned = MacawMessages.getMessage(\"variable.isCleaned.saveChanges.changedToNotClean\", ownerVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changedToNotCleaned, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String oldCleaningChoice = originalVariable.getCleaningStatus();\r\n            String revisedCleaningChoice = revisedVariable.getCleaningStatus();\r\n            if (oldCleaningChoice.equals(revisedCleaningChoice) == false) {\r\n                oldCleaningChoice = ValidationUtility.convertEmptyValueToBlank(oldCleaningChoice);\r\n                revisedCleaningChoice = ValidationUtility.convertEmptyValueToBlank(revisedCleaningChoice);\r\n                String cleaningStatusText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningStatusText, oldCleaningChoice, revisedCleaningChoice);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n            String oldCleaningDescription = originalVariable.getCleaningDescription();\r\n            String revisedCleaningDescription = originalVariable.getCleaningDescription();\r\n            if (oldCleaningDescription.equals(revisedCleaningDescription) == false) {\r\n                oldCleaningDescription = ValidationUtility.convertEmptyValueToBlank(oldCleaningDescription);\r\n                revisedCleaningDescription = ValidationUtility.convertEmptyValueToBlank(revisedCleaningDescription);\r\n                String cleaningDescriptionText = MacawMessages.getMessage(\"variable.cleaningDescription.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningDescriptionText, oldCleaningDescription, revisedCleaningDescription);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        //detect changes in code book number\r\n        String originalCodeBookNumber = originalVariable.getCodeBookNumber();\r\n        String revisedCodeBookNumber = revisedVariable.getCodeBookNumber();\r\n        if (originalCodeBookNumber.equals(revisedCodeBookNumber) == false) {\r\n            originalCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(originalCodeBookNumber);\r\n            revisedCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(revisedCodeBookNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.codeBookNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalCodeBookNumber, revisedCodeBookNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column start\r\n        String columnStartLabelText = MacawMessages.getMessage(\"variable.columnStart.label\");\r\n        String originalColumnStart = originalVariable.getColumnStart();\r\n        if (originalColumnStart == null) {\r\n            originalColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnStart = revisedVariable.getColumnStart();\r\n        if (revisedColumnStart == null) {\r\n            revisedColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnStart.equals(revisedColumnStart) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnStartLabelText, originalColumnStart, revisedColumnStart);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column end\r\n        String columnEndLabelText = MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n        String originalColumnEnd = originalVariable.getColumnEnd();\r\n        if (originalColumnEnd.equals(\"\") == true) {\r\n            originalColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnEnd = revisedVariable.getColumnEnd();\r\n        if (revisedColumnEnd.equals(\"\") == true) {\r\n            revisedColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnEnd.equals(revisedColumnEnd) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnEndLabelText, originalColumnEnd, revisedColumnEnd);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check alias\r\n        String oldAlias = originalVariable.getAlias();\r\n        String newAlias = revisedVariable.getAlias();\r\n        if (oldAlias.equals(newAlias) == false) {\r\n            oldAlias = ValidationUtility.convertEmptyValueToBlank(oldAlias);\r\n            newAlias = ValidationUtility.convertEmptyValueToBlank(newAlias);\r\n            String aliasText = MacawMessages.getMessage(\"variable.alias.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, aliasText, oldAlias, newAlias);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check file name\r\n        /**\r\n         * \t\tString oldFilePath = originalVariable.getFilePath();\r\n         * \t\tString newFilePath = revisedVariable.getFilePath();\r\n         * \t\tif (oldFilePath.equals(newFilePath) == false) {\r\n         * \t\t\toldFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(oldFilePath);\r\n         * \t\t\tnewFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(newFilePath);\r\n         *\r\n         * \t\t\tString filePathText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString fieldChangedMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n         * \t\t\t\t\t\t\t\t\t\t   ownerVariableName,\r\n         * \t\t\t\t\t\t\t\t\t\t   filePathText,\r\n         * \t\t\t\t\t\t\t\t\t\t   oldFilePath,\r\n         * \t\t\t\t\t\t\t\t\t\t   newFilePath);\r\n         * \t\t\tMacawChangeEvent changeEvent\r\n         * \t\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n         * \t\t\t\t\t\t\t\t\t   fieldChangedMessage,\r\n         * \t\t\t\t\t\t\t\t\t   userID);\r\n         * \t\t\tchangeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        String oldAvailability = originalVariable.getAvailability();\r\n        String revisedAvailability = revisedVariable.getAvailability();\r\n        if (oldAvailability.equals(revisedAvailability) == false) {\r\n            oldAvailability = ValidationUtility.convertEmptyValueToBlank(oldAvailability);\r\n            revisedAvailability = ValidationUtility.convertEmptyValueToBlank(revisedAvailability);\r\n            String availabilityText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, availabilityText, oldAvailability, revisedAvailability);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCoded = originalVariable.isCoded();\r\n        boolean revisedIsCoded = revisedVariable.isCoded();\r\n        if (originalIsCoded != revisedIsCoded) {\r\n            String oldIsCodedValue = Boolean.toString(originalIsCoded);\r\n            String revisedIsCodedValue = Boolean.toString(revisedIsCoded);\r\n            String isCodedLabel = MacawMessages.getMessage(\"variable.isCoded.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, isCodedLabel, oldIsCodedValue, revisedIsCodedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalForm = originalVariable.getForm();\r\n        String revisedForm = revisedVariable.getForm();\r\n        if (originalForm.equals(revisedForm) == false) {\r\n            originalForm = ValidationUtility.convertEmptyValueToBlank(originalForm);\r\n            revisedForm = ValidationUtility.convertEmptyValueToBlank(revisedForm);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.form.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalForm, revisedForm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalQuestionNumber = originalVariable.getQuestionNumber();\r\n        String revisedQuestionNumber = revisedVariable.getQuestionNumber();\r\n        if (originalQuestionNumber.equals(revisedQuestionNumber) == false) {\r\n            originalQuestionNumber = ValidationUtility.convertEmptyValueToBlank(originalQuestionNumber);\r\n            revisedQuestionNumber = ValidationUtility.convertEmptyValueToBlank(revisedQuestionNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.questionNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalQuestionNumber, revisedQuestionNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalNotes = originalVariable.getNotes();\r\n        String revisedNotes = revisedVariable.getNotes();\r\n        if (originalNotes.equals(revisedNotes) == false) {\r\n            originalNotes = ValidationUtility.convertEmptyValueToBlank(originalNotes);\r\n            revisedNotes = ValidationUtility.convertEmptyValueToBlank(revisedNotes);\r\n            String notesLabelText = MacawMessages.getMessage(\"variable.notes.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, notesLabelText, originalNotes, revisedNotes);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        /**\r\n         * \t\tMacawChangeEvent changeEvent\r\n         * \t\t\t= detectChangesInAlternativeVariable(user,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t originalVariable,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t revisedVariable);\r\n         * \t\tif (changeEvent != null) {\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        return changeEvents;\r\n    }\r\n\r\n    static public MacawChangeEvent detectChangesInAlternativeVariable(User user, Variable originalVariable, Variable revisedAlternativeVariable) {\r\n        Variable oldAlternativeVariable = originalVariable.getAlternativeVariable();\r\n        boolean alternativeVariableChanged = false;\r\n        if ((oldAlternativeVariable == null) && (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = false;\r\n        } else if ((oldAlternativeVariable == null) || (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = true;\r\n        } else {\r\n            //both are non-null\r\n            if (oldAlternativeVariable.getIdentifier() == revisedAlternativeVariable.getIdentifier()) {\r\n                alternativeVariableChanged = true;\r\n            } else {\r\n                alternativeVariableChanged = false;\r\n            }\r\n        }\r\n        if (alternativeVariableChanged == true) {\r\n            String blankFieldValue = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n            String fieldName = MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n            String oldAlternativeVariableName = blankFieldValue;\r\n            if (oldAlternativeVariable != null) {\r\n                oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n            }\r\n            String revisedAlternativeVariableName = blankFieldValue;\r\n            if (revisedAlternativeVariable != null) {\r\n                revisedAlternativeVariableName = revisedAlternativeVariable.getDisplayName();\r\n            }\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", fieldName, oldAlternativeVariableName, revisedAlternativeVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            int targetVariableID = originalVariable.getIdentifier();\r\n            changeEvent.setVariableOwnerID(targetVariableID);\r\n            changeEvent.setChangedObjectIdentifier(targetVariableID);\r\n            return changeEvent;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return getName();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Clonable\r\n    abstract public Object clone();\r\n\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    protected void cloneAttributes(Variable cloneVariable) {\r\n        cloneVariable.setIdentifier(identifier);\r\n        cloneVariable.setCategory(category);\r\n        cloneVariable.setName(name);\r\n        cloneVariable.setLabel(label);\r\n        cloneVariable.setForm(form);\r\n        cloneVariable.setQuestionNumber(questionNumber);\r\n        cloneVariable.setYear(year);\r\n        cloneVariable.setCleaned(isCleaned);\r\n        cloneVariable.setCoded(isCoded);\r\n        cloneVariable.setCleaningStatus(cleaningStatus);\r\n        cloneVariable.setCleaningDescription(cleaningDescription);\r\n        cloneVariable.setCodeBookNumber(codeBookNumber);\r\n        cloneVariable.setColumnStart(columnStart);\r\n        cloneVariable.setColumnEnd(columnEnd);\r\n        cloneVariable.setAvailability(availability);\r\n        for (ValueLabel valueLabel : valueLabels) {\r\n            ValueLabel clonedValueLabel = (ValueLabel) valueLabel.clone();\r\n            cloneVariable.addValueLabel(clonedValueLabel);\r\n        }\r\n        cloneVariable.setAlias(alias);\r\n        cloneVariable.setFilePath(filePath);\r\n        cloneVariable.setIsNewRecord(isNewRecord);\r\n        //make copies of references to supporting documents\r\n        ArrayList<SupportingDocument> cloneSupportingDocuments = new ArrayList<SupportingDocument>();\r\n        for (SupportingDocument supportingDocument : supportingDocuments) {\r\n            cloneSupportingDocuments.add((SupportingDocument) supportingDocument.clone());\r\n        }\r\n        cloneVariable.setSupportingDocuments(cloneSupportingDocuments);\r\n        ArrayList<OntologyTerm> cloneOntologyTerms = new ArrayList<OntologyTerm>();\r\n        for (OntologyTerm ontologyTerm : ontologyTerms) {\r\n            cloneOntologyTerms.add((OntologyTerm) ontologyTerm.clone());\r\n        }\r\n        cloneVariable.setOntologyTerms(cloneOntologyTerms);\r\n        //we don't need\r\n        if (alternativeVariable != null) {\r\n            Variable cloneAlternativeVariable = (Variable) alternativeVariable.clone();\r\n            cloneVariable.setAlternativeVariable(cloneAlternativeVariable);\r\n        }\r\n        cloneVariable.setNotes(notes);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/VariableTest0.java",
		"test_prompt": "// VariableTest0.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Variable}.\n* It contains ten unit test cases for the {@link Variable#createVariableSummary()} method.\n*/\nclass VariableTest0 {"
	},
	{
		"original_code": "// Variable.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A concept related to the NSHD study.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\nabstract public class Variable implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String category;\r\n\r\n    private String name;\r\n\r\n    private String label;\r\n\r\n    private boolean isCleaned;\r\n\r\n    private String year;\r\n\r\n    private String cleaningStatus;\r\n\r\n    private String cleaningDescription;\r\n\r\n    private ArrayList<ValueLabel> valueLabels;\r\n\r\n    private String availability;\r\n\r\n    private String alias;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isCoded;\r\n\r\n    protected String form;\r\n\r\n    protected String questionNumber;\r\n\r\n    protected String codeBookNumber;\r\n\r\n    protected String columnStart;\r\n\r\n    protected String columnEnd;\r\n\r\n    protected String notes;\r\n\r\n    private ArrayList<SupportingDocument> supportingDocuments;\r\n\r\n    private ArrayList<OntologyTerm> ontologyTerms;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    private Variable alternativeVariable;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public Variable() {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        identifier = 0;\r\n        category = unknownMessage;\r\n        name = \"\";\r\n        year = \"\";\r\n        label = \"\";\r\n        isCleaned = false;\r\n        cleaningStatus = unknownMessage;\r\n        cleaningDescription = \"\";\r\n        valueLabels = new ArrayList<ValueLabel>();\r\n        availability = unknownMessage;\r\n        alias = \"\";\r\n        filePath = \"\";\r\n        supportingDocuments = new ArrayList<SupportingDocument>();\r\n        ontologyTerms = new ArrayList<OntologyTerm>();\r\n        isCoded = false;\r\n        isNewRecord = false;\r\n        codeBookNumber = \"\";\r\n        columnStart = \"\";\r\n        columnEnd = \"\";\r\n        form = \"\";\r\n        questionNumber = \"\";\r\n        notes = \"\";\r\n        alternativeVariable = null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produces a variable summary suitable for showing in a collection\r\n     * of search results.\r\n     */\r\n    public VariableSummary createVariableSummary() {\r\n        VariableSummary variableSummary = new VariableSummary();\r\n        variableSummary.setIdentifier(identifier);\r\n        variableSummary.setName(name);\r\n        variableSummary.setLabel(label);\r\n        variableSummary.setYear(year);\r\n        return variableSummary;\r\n    }\r\n\r\n    /**\r\n     * an integer which uniquely identifies an instance in the database.\r\n     * All primary key values in the database use a single auto-incremented\r\n     * auto-generated value.\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * variable name, as specified using the NSHD variable naming convention\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * a one-line description of the variable\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * sweep in which the variable was collected\r\n     * @return the year\r\n     */\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    /**\r\n     * @param year the year to set\r\n     */\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    /**\r\n     * @return the category\r\n     */\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    /**\r\n     * @param category the category to set\r\n     */\r\n    public void setCategory(String category) {\r\n        this.category = category;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been cleaned in some way\r\n     * @return the isCleaned\r\n     */\r\n    public boolean isCleaned() {\r\n        return isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @param isCleaned the isCleaned to set\r\n     */\r\n    public void setCleaned(boolean isCleaned) {\r\n        this.isCleaned = isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @return the cleaningStatus\r\n     */\r\n    public String getCleaningStatus() {\r\n        return cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningStatus the cleaningStatus to set\r\n     */\r\n    public void setCleaningStatus(String cleaningStatus) {\r\n        this.cleaningStatus = cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * free text description of how the variable data were cleaned.\r\n     * @return the cleaningDescription\r\n     */\r\n    public String getCleaningDescription() {\r\n        return cleaningDescription;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningDescription the cleaningDescription to set\r\n     */\r\n    public void setCleaningDescription(String cleaningDescription) {\r\n        this.cleaningDescription = cleaningDescription;\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels() {\r\n        return valueLabels;\r\n    }\r\n\r\n    public void setValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        this.valueLabels = valueLabels;\r\n    }\r\n\r\n    public void addValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.add(valueLabel);\r\n    }\r\n\r\n    public void removeValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.remove(valueLabel);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments() {\r\n        return supportingDocuments;\r\n    }\r\n\r\n    public boolean containsSupportingDocument(SupportingDocument targetSupportingDocument) {\r\n        int targetIdentifier = targetSupportingDocument.getIdentifier();\r\n        for (SupportingDocument currentSupportingDocument : supportingDocuments) {\r\n            int currentIdentifier = currentSupportingDocument.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setSupportingDocuments(ArrayList<SupportingDocument> supportingDocuments) {\r\n        this.supportingDocuments = supportingDocuments;\r\n    }\r\n\r\n    public void addSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToAdd) {\r\n        supportingDocuments.addAll(supportingDocumentsToAdd);\r\n    }\r\n\r\n    public void addSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.add(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.remove(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        for (SupportingDocument targetVariable : supportingDocumentsToDelete) {\r\n            supportingDocuments.remove(targetVariable);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms() {\r\n        return ontologyTerms;\r\n    }\r\n\r\n    public boolean containsOntologyTerm(OntologyTerm targetOntologyTerm) {\r\n        int targetIdentifier = targetOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            int currentIdentifier = currentOntologyTerm.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setOntologyTerms(ArrayList<OntologyTerm> ontologyTerms) {\r\n        this.ontologyTerms = ontologyTerms;\r\n    }\r\n\r\n    public void addOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToAdd) {\r\n        ontologyTerms.addAll(ontologyTermsToAdd);\r\n    }\r\n\r\n    public void addOntologyTerm(OntologyTerm ontologyTerm) {\r\n        ontologyTerms.add(ontologyTerm);\r\n    }\r\n\r\n    public void removeOntologyTerm(OntologyTerm copyOfOntologyTermToDelete) {\r\n        OntologyTerm itemToDelete = findOntologyTerm(copyOfOntologyTermToDelete);\r\n        if (itemToDelete != null) {\r\n            ontologyTerms.remove(itemToDelete);\r\n        }\r\n    }\r\n\r\n    public void removeOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToDelete) {\r\n        for (OntologyTerm targetOntologyTerm : ontologyTermsToDelete) {\r\n            removeOntologyTerm(targetOntologyTerm);\r\n        }\r\n    }\r\n\r\n    public void updateOntologyTerm(OntologyTerm revisedOntologyTerm) {\r\n        OntologyTerm itemToUpdate = findOntologyTerm(revisedOntologyTerm);\r\n        if (itemToUpdate != null) {\r\n            int numberOfTerms = ontologyTerms.size();\r\n            int index = ontologyTerms.indexOf(itemToUpdate);\r\n            ontologyTerms.remove(itemToUpdate);\r\n            if (index == numberOfTerms - 1) {\r\n                //item to update was at the end\r\n                ontologyTerms.add(revisedOntologyTerm);\r\n            } else {\r\n                ontologyTerms.add(index, revisedOntologyTerm);\r\n            }\r\n        }\r\n    }\r\n\r\n    private OntologyTerm findOntologyTerm(OntologyTerm copyofOntologyTerm) {\r\n        int targetIdentifier = copyofOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            if (currentOntologyTerm.getIdentifier() == targetIdentifier) {\r\n                //found the item to delete\r\n                return currentOntologyTerm;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @return the availability\r\n     */\r\n    public String getAvailability() {\r\n        return availability;\r\n    }\r\n\r\n    /**\r\n     * @param availability the availability to set\r\n     */\r\n    public void setAvailability(String availability) {\r\n        this.availability = availability;\r\n    }\r\n\r\n    /**\r\n     * @return the codeBookNumber\r\n     */\r\n    public String getCodeBookNumber() {\r\n        return codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * reference to the physical code book entry\r\n     * @param codeBookNumber the codeBookNumber to set\r\n     */\r\n    public void setCodeBookNumber(String codeBookNumber) {\r\n        this.codeBookNumber = codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * starting column in library file for this variable\r\n     * @return the columnStart\r\n     */\r\n    public String getColumnStart() {\r\n        return columnStart;\r\n    }\r\n\r\n    /**\r\n     * @param columnStart the columnStart to set\r\n     */\r\n    public void setColumnStart(String columnStart) {\r\n        this.columnStart = columnStart;\r\n    }\r\n\r\n    /**\r\n     * ending column in library file for this variable\r\n     * @return the columnEnd\r\n     */\r\n    public String getColumnEnd() {\r\n        return columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @param columnEnd the columnEnd to set\r\n     */\r\n    public void setColumnEnd(String columnEnd) {\r\n        this.columnEnd = columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @return the alias\r\n     */\r\n    public String getAlias() {\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * @param alias the alias to set\r\n     */\r\n    public void setAlias(String alias) {\r\n        this.alias = alias;\r\n    }\r\n\r\n    /**\r\n     * @return the file Name\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the dataLibraryFileName to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been coded electronically (or not)\r\n     * @return the isCoded\r\n     */\r\n    public boolean isCoded() {\r\n        return isCoded;\r\n    }\r\n\r\n    /**\r\n     * @param isCoded the isCoded to set\r\n     */\r\n    public void setCoded(boolean isCoded) {\r\n        this.isCoded = isCoded;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    public void setIsNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * questionnaire form containing the question whose response is stored in the variable\r\n     * @return the form\r\n     */\r\n    public String getForm() {\r\n        return form;\r\n    }\r\n\r\n    /**\r\n     * @param form the form to set\r\n     */\r\n    public void setForm(String form) {\r\n        this.form = form;\r\n    }\r\n\r\n    /**\r\n     * question number from the questionnaire for this variable\r\n     * @return the questionNumber\r\n     */\r\n    public String getQuestionNumber() {\r\n        return questionNumber;\r\n    }\r\n\r\n    /**\r\n     * @param questionNumber the questionNumber to set\r\n     */\r\n    public void setQuestionNumber(String questionNumber) {\r\n        this.questionNumber = questionNumber;\r\n    }\r\n\r\n    public String getNotes() {\r\n        return notes;\r\n    }\r\n\r\n    public void setNotes(String notes) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public Variable getAlternativeVariable() {\r\n        return alternativeVariable;\r\n    }\r\n\r\n    public void setAlternativeVariable(Variable alterativeVariable) {\r\n        this.alternativeVariable = alterativeVariable;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static protected ArrayList<String> validateFields(Variable variable) {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //specify a name\r\n        if (ValidationUtility.isBlank(variable.getName()) == true) {\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", nameLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //specify a label\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getLabel()) == true) {\r\n         * \t\t\tString labelLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.label.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tlabelLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a category\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t\r\n\t\tif (ValidationUtility.isUnknown(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        //specify an availability\r\n        if (ValidationUtility.isBlank(variable.getAvailability()) == true) {\r\n            String availabilityLabelText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", availabilityLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /**\r\n         * \t\tif (ValidationUtility.isUnknown(variable.getAvailability()) == true) {\r\n         * \t\t\tString availabilityLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.availability.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tavailabilityLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify cleaning status\r\n        if (variable.isCleaned() == true) {\r\n            if (ValidationUtility.isBlank(variable.getCleaningStatus()) == true) {\r\n                String cleaningStatusLabelText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", cleaningStatusLabelText);\r\n                errorMessages.add(errorMessage);\r\n            }\r\n            /**\r\n             * \t\t\tif (ValidationUtility.isUnknown(variable.getCleaningStatus()) == true) {\r\n             * \t\t\t\tString cleaningStatusLabelText\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n             * \t\t\t\tString errorMessage\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n             * \t\t\t\t\t\t\t\t\t\t\t\tcleaningStatusLabelText);\r\n             * \t\t\t\terrorMessages.add(errorMessage);\r\n             * \t\t\t}\r\n             */\r\n        }\r\n        //specify a year\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getYear()) == true) {\r\n         * \t\t\tString yearLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.year.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tyearLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         * \t\telse {\r\n         * \t\t\t//make sure year is numeric\r\n         * \t\t\tString yearValue = variable.getYear();\r\n         *\r\n         * \t\t\ttry {\r\n         * \t\t\t\tDate currentDate = new Date();\r\n         * \t\t\t\tGregorianCalendar gregorianCalendar = new GregorianCalendar();\r\n         * \t\t\t\tgregorianCalendar.setTime(currentDate);\r\n         * \t\t\t\tint currentYearNumber = gregorianCalendar.get(Calendar.YEAR);\r\n         *\r\n         * \t\t\t\tint calendarYear = new Integer(yearValue).intValue();\r\n         * \t\t\t\tif (calendarYear < 1946) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooOld\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t\telse if (calendarYear > currentYearNumber) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooNew\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t}\r\n         * \t\t\tcatch(NumberFormatException exception) {\r\n         * \t\t\t\tString illegalNumberFormatException\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.illegalYear\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\terrorMessages.add(illegalNumberFormatException);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        /**\r\n         * \t\tString columnStart = variable.getColumnStart();\r\n         * \t\tif (ValidationUtility.isBlank(columnStart) == false) {\r\n         * \t\t\t//check that column start is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnStart);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnStartLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnStart.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStart,\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStartLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         *\r\n         * \t\tString columnEnd = variable.getColumnEnd();\r\n         * \t\tif (ValidationUtility.isBlank(columnEnd) == false) {\r\n         * \t\t\t//check that column end is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnEnd);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnEndLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEnd,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEndLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        //specify an alias\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getAlias()) == true) {\r\n         * \t\t\tString aliasLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.alias.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\taliasLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a file name\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getFilePath()) == true) {\r\n         * \t\t\tString filePathLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tfilePathLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        return errorMessages;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable originalVariable, Variable revisedVariable) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String ownerVariableName = originalVariable.getDisplayName();\r\n        //detect changes in name\r\n        String oldName = originalVariable.getName();\r\n        String newName = revisedVariable.getName();\r\n        if (oldName.equals(newName) == false) {\r\n            oldName = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newName = ValidationUtility.convertEmptyValueToBlank(newName);\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, nameLabelText, oldName, newName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //=Changed variable {0}, field {1}, from {2} to {3}\r\n        //detect changes in label\r\n        String oldLabel = originalVariable.getLabel();\r\n        String newLabel = revisedVariable.getLabel();\r\n        if (oldLabel.equals(newLabel) == false) {\r\n            oldLabel = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newLabel = ValidationUtility.convertEmptyValueToBlank(newLabel);\r\n            String labelLabelText = MacawMessages.getMessage(\"variable.label.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, labelLabelText, oldLabel, newLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in year\r\n        String oldYear = originalVariable.getYear();\r\n        String newYear = revisedVariable.getYear();\r\n        if (oldYear.equals(newYear) == false) {\r\n            oldYear = ValidationUtility.convertEmptyValueToBlank(oldYear);\r\n            newYear = ValidationUtility.convertEmptyValueToBlank(newYear);\r\n            String yearLabelText = MacawMessages.getMessage(\"variable.year.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, yearLabelText, oldYear, newYear);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in category\r\n        String originalCategory = originalVariable.getCategory();\r\n        String revisedCategory = revisedVariable.getCategory();\r\n        if (originalCategory.equals(revisedCategory) == false) {\r\n            originalCategory = ValidationUtility.convertEmptyValueToBlank(originalCategory);\r\n            revisedCategory = ValidationUtility.convertEmptyValueToBlank(revisedCategory);\r\n            String categoryLabelText = MacawMessages.getMessage(\"variable.category.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, categoryLabelText, originalCategory, revisedCategory);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCleaned = originalVariable.isCleaned();\r\n        boolean revisedIsCleaned = revisedVariable.isCleaned();\r\n        if ((originalIsCleaned != revisedIsCleaned) && (revisedIsCleaned == false)) {\r\n            String changedToNotCleaned = MacawMessages.getMessage(\"variable.isCleaned.saveChanges.changedToNotClean\", ownerVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changedToNotCleaned, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String oldCleaningChoice = originalVariable.getCleaningStatus();\r\n            String revisedCleaningChoice = revisedVariable.getCleaningStatus();\r\n            if (oldCleaningChoice.equals(revisedCleaningChoice) == false) {\r\n                oldCleaningChoice = ValidationUtility.convertEmptyValueToBlank(oldCleaningChoice);\r\n                revisedCleaningChoice = ValidationUtility.convertEmptyValueToBlank(revisedCleaningChoice);\r\n                String cleaningStatusText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningStatusText, oldCleaningChoice, revisedCleaningChoice);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n            String oldCleaningDescription = originalVariable.getCleaningDescription();\r\n            String revisedCleaningDescription = originalVariable.getCleaningDescription();\r\n            if (oldCleaningDescription.equals(revisedCleaningDescription) == false) {\r\n                oldCleaningDescription = ValidationUtility.convertEmptyValueToBlank(oldCleaningDescription);\r\n                revisedCleaningDescription = ValidationUtility.convertEmptyValueToBlank(revisedCleaningDescription);\r\n                String cleaningDescriptionText = MacawMessages.getMessage(\"variable.cleaningDescription.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningDescriptionText, oldCleaningDescription, revisedCleaningDescription);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        //detect changes in code book number\r\n        String originalCodeBookNumber = originalVariable.getCodeBookNumber();\r\n        String revisedCodeBookNumber = revisedVariable.getCodeBookNumber();\r\n        if (originalCodeBookNumber.equals(revisedCodeBookNumber) == false) {\r\n            originalCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(originalCodeBookNumber);\r\n            revisedCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(revisedCodeBookNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.codeBookNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalCodeBookNumber, revisedCodeBookNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column start\r\n        String columnStartLabelText = MacawMessages.getMessage(\"variable.columnStart.label\");\r\n        String originalColumnStart = originalVariable.getColumnStart();\r\n        if (originalColumnStart == null) {\r\n            originalColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnStart = revisedVariable.getColumnStart();\r\n        if (revisedColumnStart == null) {\r\n            revisedColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnStart.equals(revisedColumnStart) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnStartLabelText, originalColumnStart, revisedColumnStart);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column end\r\n        String columnEndLabelText = MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n        String originalColumnEnd = originalVariable.getColumnEnd();\r\n        if (originalColumnEnd.equals(\"\") == true) {\r\n            originalColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnEnd = revisedVariable.getColumnEnd();\r\n        if (revisedColumnEnd.equals(\"\") == true) {\r\n            revisedColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnEnd.equals(revisedColumnEnd) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnEndLabelText, originalColumnEnd, revisedColumnEnd);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check alias\r\n        String oldAlias = originalVariable.getAlias();\r\n        String newAlias = revisedVariable.getAlias();\r\n        if (oldAlias.equals(newAlias) == false) {\r\n            oldAlias = ValidationUtility.convertEmptyValueToBlank(oldAlias);\r\n            newAlias = ValidationUtility.convertEmptyValueToBlank(newAlias);\r\n            String aliasText = MacawMessages.getMessage(\"variable.alias.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, aliasText, oldAlias, newAlias);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check file name\r\n        /**\r\n         * \t\tString oldFilePath = originalVariable.getFilePath();\r\n         * \t\tString newFilePath = revisedVariable.getFilePath();\r\n         * \t\tif (oldFilePath.equals(newFilePath) == false) {\r\n         * \t\t\toldFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(oldFilePath);\r\n         * \t\t\tnewFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(newFilePath);\r\n         *\r\n         * \t\t\tString filePathText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString fieldChangedMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n         * \t\t\t\t\t\t\t\t\t\t   ownerVariableName,\r\n         * \t\t\t\t\t\t\t\t\t\t   filePathText,\r\n         * \t\t\t\t\t\t\t\t\t\t   oldFilePath,\r\n         * \t\t\t\t\t\t\t\t\t\t   newFilePath);\r\n         * \t\t\tMacawChangeEvent changeEvent\r\n         * \t\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n         * \t\t\t\t\t\t\t\t\t   fieldChangedMessage,\r\n         * \t\t\t\t\t\t\t\t\t   userID);\r\n         * \t\t\tchangeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        String oldAvailability = originalVariable.getAvailability();\r\n        String revisedAvailability = revisedVariable.getAvailability();\r\n        if (oldAvailability.equals(revisedAvailability) == false) {\r\n            oldAvailability = ValidationUtility.convertEmptyValueToBlank(oldAvailability);\r\n            revisedAvailability = ValidationUtility.convertEmptyValueToBlank(revisedAvailability);\r\n            String availabilityText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, availabilityText, oldAvailability, revisedAvailability);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCoded = originalVariable.isCoded();\r\n        boolean revisedIsCoded = revisedVariable.isCoded();\r\n        if (originalIsCoded != revisedIsCoded) {\r\n            String oldIsCodedValue = Boolean.toString(originalIsCoded);\r\n            String revisedIsCodedValue = Boolean.toString(revisedIsCoded);\r\n            String isCodedLabel = MacawMessages.getMessage(\"variable.isCoded.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, isCodedLabel, oldIsCodedValue, revisedIsCodedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalForm = originalVariable.getForm();\r\n        String revisedForm = revisedVariable.getForm();\r\n        if (originalForm.equals(revisedForm) == false) {\r\n            originalForm = ValidationUtility.convertEmptyValueToBlank(originalForm);\r\n            revisedForm = ValidationUtility.convertEmptyValueToBlank(revisedForm);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.form.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalForm, revisedForm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalQuestionNumber = originalVariable.getQuestionNumber();\r\n        String revisedQuestionNumber = revisedVariable.getQuestionNumber();\r\n        if (originalQuestionNumber.equals(revisedQuestionNumber) == false) {\r\n            originalQuestionNumber = ValidationUtility.convertEmptyValueToBlank(originalQuestionNumber);\r\n            revisedQuestionNumber = ValidationUtility.convertEmptyValueToBlank(revisedQuestionNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.questionNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalQuestionNumber, revisedQuestionNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalNotes = originalVariable.getNotes();\r\n        String revisedNotes = revisedVariable.getNotes();\r\n        if (originalNotes.equals(revisedNotes) == false) {\r\n            originalNotes = ValidationUtility.convertEmptyValueToBlank(originalNotes);\r\n            revisedNotes = ValidationUtility.convertEmptyValueToBlank(revisedNotes);\r\n            String notesLabelText = MacawMessages.getMessage(\"variable.notes.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, notesLabelText, originalNotes, revisedNotes);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        /**\r\n         * \t\tMacawChangeEvent changeEvent\r\n         * \t\t\t= detectChangesInAlternativeVariable(user,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t originalVariable,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t revisedVariable);\r\n         * \t\tif (changeEvent != null) {\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        return changeEvents;\r\n    }\r\n\r\n    static public MacawChangeEvent detectChangesInAlternativeVariable(User user, Variable originalVariable, Variable revisedAlternativeVariable) {\r\n        Variable oldAlternativeVariable = originalVariable.getAlternativeVariable();\r\n        boolean alternativeVariableChanged = false;\r\n        if ((oldAlternativeVariable == null) && (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = false;\r\n        } else if ((oldAlternativeVariable == null) || (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = true;\r\n        } else {\r\n            //both are non-null\r\n            if (oldAlternativeVariable.getIdentifier() == revisedAlternativeVariable.getIdentifier()) {\r\n                alternativeVariableChanged = true;\r\n            } else {\r\n                alternativeVariableChanged = false;\r\n            }\r\n        }\r\n        if (alternativeVariableChanged == true) {\r\n            String blankFieldValue = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n            String fieldName = MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n            String oldAlternativeVariableName = blankFieldValue;\r\n            if (oldAlternativeVariable != null) {\r\n                oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n            }\r\n            String revisedAlternativeVariableName = blankFieldValue;\r\n            if (revisedAlternativeVariable != null) {\r\n                revisedAlternativeVariableName = revisedAlternativeVariable.getDisplayName();\r\n            }\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", fieldName, oldAlternativeVariableName, revisedAlternativeVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            int targetVariableID = originalVariable.getIdentifier();\r\n            changeEvent.setVariableOwnerID(targetVariableID);\r\n            changeEvent.setChangedObjectIdentifier(targetVariableID);\r\n            return changeEvent;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return getName();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Clonable\r\n    abstract public Object clone();\r\n\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    protected void cloneAttributes(Variable cloneVariable) {\r\n        cloneVariable.setIdentifier(identifier);\r\n        cloneVariable.setCategory(category);\r\n        cloneVariable.setName(name);\r\n        cloneVariable.setLabel(label);\r\n        cloneVariable.setForm(form);\r\n        cloneVariable.setQuestionNumber(questionNumber);\r\n        cloneVariable.setYear(year);\r\n        cloneVariable.setCleaned(isCleaned);\r\n        cloneVariable.setCoded(isCoded);\r\n        cloneVariable.setCleaningStatus(cleaningStatus);\r\n        cloneVariable.setCleaningDescription(cleaningDescription);\r\n        cloneVariable.setCodeBookNumber(codeBookNumber);\r\n        cloneVariable.setColumnStart(columnStart);\r\n        cloneVariable.setColumnEnd(columnEnd);\r\n        cloneVariable.setAvailability(availability);\r\n        for (ValueLabel valueLabel : valueLabels) {\r\n            ValueLabel clonedValueLabel = (ValueLabel) valueLabel.clone();\r\n            cloneVariable.addValueLabel(clonedValueLabel);\r\n        }\r\n        cloneVariable.setAlias(alias);\r\n        cloneVariable.setFilePath(filePath);\r\n        cloneVariable.setIsNewRecord(isNewRecord);\r\n        //make copies of references to supporting documents\r\n        ArrayList<SupportingDocument> cloneSupportingDocuments = new ArrayList<SupportingDocument>();\r\n        for (SupportingDocument supportingDocument : supportingDocuments) {\r\n            cloneSupportingDocuments.add((SupportingDocument) supportingDocument.clone());\r\n        }\r\n        cloneVariable.setSupportingDocuments(cloneSupportingDocuments);\r\n        ArrayList<OntologyTerm> cloneOntologyTerms = new ArrayList<OntologyTerm>();\r\n        for (OntologyTerm ontologyTerm : ontologyTerms) {\r\n            cloneOntologyTerms.add((OntologyTerm) ontologyTerm.clone());\r\n        }\r\n        cloneVariable.setOntologyTerms(cloneOntologyTerms);\r\n        //we don't need\r\n        if (alternativeVariable != null) {\r\n            Variable cloneAlternativeVariable = (Variable) alternativeVariable.clone();\r\n            cloneVariable.setAlternativeVariable(cloneAlternativeVariable);\r\n        }\r\n        cloneVariable.setNotes(notes);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/VariableTest1.java",
		"test_prompt": "// VariableTest1.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Variable}.\n* It contains ten unit test cases for the {@link Variable#isCleaned()} method.\n*/\nclass VariableTest1 {"
	},
	{
		"original_code": "// Variable.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A concept related to the NSHD study.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\nabstract public class Variable implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String category;\r\n\r\n    private String name;\r\n\r\n    private String label;\r\n\r\n    private boolean isCleaned;\r\n\r\n    private String year;\r\n\r\n    private String cleaningStatus;\r\n\r\n    private String cleaningDescription;\r\n\r\n    private ArrayList<ValueLabel> valueLabels;\r\n\r\n    private String availability;\r\n\r\n    private String alias;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isCoded;\r\n\r\n    protected String form;\r\n\r\n    protected String questionNumber;\r\n\r\n    protected String codeBookNumber;\r\n\r\n    protected String columnStart;\r\n\r\n    protected String columnEnd;\r\n\r\n    protected String notes;\r\n\r\n    private ArrayList<SupportingDocument> supportingDocuments;\r\n\r\n    private ArrayList<OntologyTerm> ontologyTerms;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    private Variable alternativeVariable;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public Variable() {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        identifier = 0;\r\n        category = unknownMessage;\r\n        name = \"\";\r\n        year = \"\";\r\n        label = \"\";\r\n        isCleaned = false;\r\n        cleaningStatus = unknownMessage;\r\n        cleaningDescription = \"\";\r\n        valueLabels = new ArrayList<ValueLabel>();\r\n        availability = unknownMessage;\r\n        alias = \"\";\r\n        filePath = \"\";\r\n        supportingDocuments = new ArrayList<SupportingDocument>();\r\n        ontologyTerms = new ArrayList<OntologyTerm>();\r\n        isCoded = false;\r\n        isNewRecord = false;\r\n        codeBookNumber = \"\";\r\n        columnStart = \"\";\r\n        columnEnd = \"\";\r\n        form = \"\";\r\n        questionNumber = \"\";\r\n        notes = \"\";\r\n        alternativeVariable = null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produces a variable summary suitable for showing in a collection\r\n     * of search results.\r\n     */\r\n    public VariableSummary createVariableSummary() {\r\n        VariableSummary variableSummary = new VariableSummary();\r\n        variableSummary.setIdentifier(identifier);\r\n        variableSummary.setName(name);\r\n        variableSummary.setLabel(label);\r\n        variableSummary.setYear(year);\r\n        return variableSummary;\r\n    }\r\n\r\n    /**\r\n     * an integer which uniquely identifies an instance in the database.\r\n     * All primary key values in the database use a single auto-incremented\r\n     * auto-generated value.\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * variable name, as specified using the NSHD variable naming convention\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * a one-line description of the variable\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * sweep in which the variable was collected\r\n     * @return the year\r\n     */\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    /**\r\n     * @param year the year to set\r\n     */\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    /**\r\n     * @return the category\r\n     */\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    /**\r\n     * @param category the category to set\r\n     */\r\n    public void setCategory(String category) {\r\n        this.category = category;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been cleaned in some way\r\n     * @return the isCleaned\r\n     */\r\n    public boolean isCleaned() {\r\n        return isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @param isCleaned the isCleaned to set\r\n     */\r\n    public void setCleaned(boolean isCleaned) {\r\n        this.isCleaned = isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @return the cleaningStatus\r\n     */\r\n    public String getCleaningStatus() {\r\n        return cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningStatus the cleaningStatus to set\r\n     */\r\n    public void setCleaningStatus(String cleaningStatus) {\r\n        this.cleaningStatus = cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * free text description of how the variable data were cleaned.\r\n     * @return the cleaningDescription\r\n     */\r\n    public String getCleaningDescription() {\r\n        return cleaningDescription;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningDescription the cleaningDescription to set\r\n     */\r\n    public void setCleaningDescription(String cleaningDescription) {\r\n        this.cleaningDescription = cleaningDescription;\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels() {\r\n        return valueLabels;\r\n    }\r\n\r\n    public void setValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        this.valueLabels = valueLabels;\r\n    }\r\n\r\n    public void addValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.add(valueLabel);\r\n    }\r\n\r\n    public void removeValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.remove(valueLabel);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments() {\r\n        return supportingDocuments;\r\n    }\r\n\r\n    public boolean containsSupportingDocument(SupportingDocument targetSupportingDocument) {\r\n        int targetIdentifier = targetSupportingDocument.getIdentifier();\r\n        for (SupportingDocument currentSupportingDocument : supportingDocuments) {\r\n            int currentIdentifier = currentSupportingDocument.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setSupportingDocuments(ArrayList<SupportingDocument> supportingDocuments) {\r\n        this.supportingDocuments = supportingDocuments;\r\n    }\r\n\r\n    public void addSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToAdd) {\r\n        supportingDocuments.addAll(supportingDocumentsToAdd);\r\n    }\r\n\r\n    public void addSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.add(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.remove(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        for (SupportingDocument targetVariable : supportingDocumentsToDelete) {\r\n            supportingDocuments.remove(targetVariable);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms() {\r\n        return ontologyTerms;\r\n    }\r\n\r\n    public boolean containsOntologyTerm(OntologyTerm targetOntologyTerm) {\r\n        int targetIdentifier = targetOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            int currentIdentifier = currentOntologyTerm.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setOntologyTerms(ArrayList<OntologyTerm> ontologyTerms) {\r\n        this.ontologyTerms = ontologyTerms;\r\n    }\r\n\r\n    public void addOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToAdd) {\r\n        ontologyTerms.addAll(ontologyTermsToAdd);\r\n    }\r\n\r\n    public void addOntologyTerm(OntologyTerm ontologyTerm) {\r\n        ontologyTerms.add(ontologyTerm);\r\n    }\r\n\r\n    public void removeOntologyTerm(OntologyTerm copyOfOntologyTermToDelete) {\r\n        OntologyTerm itemToDelete = findOntologyTerm(copyOfOntologyTermToDelete);\r\n        if (itemToDelete != null) {\r\n            ontologyTerms.remove(itemToDelete);\r\n        }\r\n    }\r\n\r\n    public void removeOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToDelete) {\r\n        for (OntologyTerm targetOntologyTerm : ontologyTermsToDelete) {\r\n            removeOntologyTerm(targetOntologyTerm);\r\n        }\r\n    }\r\n\r\n    public void updateOntologyTerm(OntologyTerm revisedOntologyTerm) {\r\n        OntologyTerm itemToUpdate = findOntologyTerm(revisedOntologyTerm);\r\n        if (itemToUpdate != null) {\r\n            int numberOfTerms = ontologyTerms.size();\r\n            int index = ontologyTerms.indexOf(itemToUpdate);\r\n            ontologyTerms.remove(itemToUpdate);\r\n            if (index == numberOfTerms - 1) {\r\n                //item to update was at the end\r\n                ontologyTerms.add(revisedOntologyTerm);\r\n            } else {\r\n                ontologyTerms.add(index, revisedOntologyTerm);\r\n            }\r\n        }\r\n    }\r\n\r\n    private OntologyTerm findOntologyTerm(OntologyTerm copyofOntologyTerm) {\r\n        int targetIdentifier = copyofOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            if (currentOntologyTerm.getIdentifier() == targetIdentifier) {\r\n                //found the item to delete\r\n                return currentOntologyTerm;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @return the availability\r\n     */\r\n    public String getAvailability() {\r\n        return availability;\r\n    }\r\n\r\n    /**\r\n     * @param availability the availability to set\r\n     */\r\n    public void setAvailability(String availability) {\r\n        this.availability = availability;\r\n    }\r\n\r\n    /**\r\n     * @return the codeBookNumber\r\n     */\r\n    public String getCodeBookNumber() {\r\n        return codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * reference to the physical code book entry\r\n     * @param codeBookNumber the codeBookNumber to set\r\n     */\r\n    public void setCodeBookNumber(String codeBookNumber) {\r\n        this.codeBookNumber = codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * starting column in library file for this variable\r\n     * @return the columnStart\r\n     */\r\n    public String getColumnStart() {\r\n        return columnStart;\r\n    }\r\n\r\n    /**\r\n     * @param columnStart the columnStart to set\r\n     */\r\n    public void setColumnStart(String columnStart) {\r\n        this.columnStart = columnStart;\r\n    }\r\n\r\n    /**\r\n     * ending column in library file for this variable\r\n     * @return the columnEnd\r\n     */\r\n    public String getColumnEnd() {\r\n        return columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @param columnEnd the columnEnd to set\r\n     */\r\n    public void setColumnEnd(String columnEnd) {\r\n        this.columnEnd = columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @return the alias\r\n     */\r\n    public String getAlias() {\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * @param alias the alias to set\r\n     */\r\n    public void setAlias(String alias) {\r\n        this.alias = alias;\r\n    }\r\n\r\n    /**\r\n     * @return the file Name\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the dataLibraryFileName to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been coded electronically (or not)\r\n     * @return the isCoded\r\n     */\r\n    public boolean isCoded() {\r\n        return isCoded;\r\n    }\r\n\r\n    /**\r\n     * @param isCoded the isCoded to set\r\n     */\r\n    public void setCoded(boolean isCoded) {\r\n        this.isCoded = isCoded;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    public void setIsNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * questionnaire form containing the question whose response is stored in the variable\r\n     * @return the form\r\n     */\r\n    public String getForm() {\r\n        return form;\r\n    }\r\n\r\n    /**\r\n     * @param form the form to set\r\n     */\r\n    public void setForm(String form) {\r\n        this.form = form;\r\n    }\r\n\r\n    /**\r\n     * question number from the questionnaire for this variable\r\n     * @return the questionNumber\r\n     */\r\n    public String getQuestionNumber() {\r\n        return questionNumber;\r\n    }\r\n\r\n    /**\r\n     * @param questionNumber the questionNumber to set\r\n     */\r\n    public void setQuestionNumber(String questionNumber) {\r\n        this.questionNumber = questionNumber;\r\n    }\r\n\r\n    public String getNotes() {\r\n        return notes;\r\n    }\r\n\r\n    public void setNotes(String notes) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public Variable getAlternativeVariable() {\r\n        return alternativeVariable;\r\n    }\r\n\r\n    public void setAlternativeVariable(Variable alterativeVariable) {\r\n        this.alternativeVariable = alterativeVariable;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static protected ArrayList<String> validateFields(Variable variable) {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //specify a name\r\n        if (ValidationUtility.isBlank(variable.getName()) == true) {\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", nameLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //specify a label\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getLabel()) == true) {\r\n         * \t\t\tString labelLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.label.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tlabelLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a category\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t\r\n\t\tif (ValidationUtility.isUnknown(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        //specify an availability\r\n        if (ValidationUtility.isBlank(variable.getAvailability()) == true) {\r\n            String availabilityLabelText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", availabilityLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /**\r\n         * \t\tif (ValidationUtility.isUnknown(variable.getAvailability()) == true) {\r\n         * \t\t\tString availabilityLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.availability.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tavailabilityLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify cleaning status\r\n        if (variable.isCleaned() == true) {\r\n            if (ValidationUtility.isBlank(variable.getCleaningStatus()) == true) {\r\n                String cleaningStatusLabelText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", cleaningStatusLabelText);\r\n                errorMessages.add(errorMessage);\r\n            }\r\n            /**\r\n             * \t\t\tif (ValidationUtility.isUnknown(variable.getCleaningStatus()) == true) {\r\n             * \t\t\t\tString cleaningStatusLabelText\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n             * \t\t\t\tString errorMessage\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n             * \t\t\t\t\t\t\t\t\t\t\t\tcleaningStatusLabelText);\r\n             * \t\t\t\terrorMessages.add(errorMessage);\r\n             * \t\t\t}\r\n             */\r\n        }\r\n        //specify a year\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getYear()) == true) {\r\n         * \t\t\tString yearLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.year.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tyearLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         * \t\telse {\r\n         * \t\t\t//make sure year is numeric\r\n         * \t\t\tString yearValue = variable.getYear();\r\n         *\r\n         * \t\t\ttry {\r\n         * \t\t\t\tDate currentDate = new Date();\r\n         * \t\t\t\tGregorianCalendar gregorianCalendar = new GregorianCalendar();\r\n         * \t\t\t\tgregorianCalendar.setTime(currentDate);\r\n         * \t\t\t\tint currentYearNumber = gregorianCalendar.get(Calendar.YEAR);\r\n         *\r\n         * \t\t\t\tint calendarYear = new Integer(yearValue).intValue();\r\n         * \t\t\t\tif (calendarYear < 1946) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooOld\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t\telse if (calendarYear > currentYearNumber) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooNew\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t}\r\n         * \t\t\tcatch(NumberFormatException exception) {\r\n         * \t\t\t\tString illegalNumberFormatException\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.illegalYear\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\terrorMessages.add(illegalNumberFormatException);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        /**\r\n         * \t\tString columnStart = variable.getColumnStart();\r\n         * \t\tif (ValidationUtility.isBlank(columnStart) == false) {\r\n         * \t\t\t//check that column start is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnStart);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnStartLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnStart.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStart,\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStartLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         *\r\n         * \t\tString columnEnd = variable.getColumnEnd();\r\n         * \t\tif (ValidationUtility.isBlank(columnEnd) == false) {\r\n         * \t\t\t//check that column end is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnEnd);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnEndLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEnd,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEndLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        //specify an alias\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getAlias()) == true) {\r\n         * \t\t\tString aliasLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.alias.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\taliasLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a file name\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getFilePath()) == true) {\r\n         * \t\t\tString filePathLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tfilePathLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        return errorMessages;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable originalVariable, Variable revisedVariable) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String ownerVariableName = originalVariable.getDisplayName();\r\n        //detect changes in name\r\n        String oldName = originalVariable.getName();\r\n        String newName = revisedVariable.getName();\r\n        if (oldName.equals(newName) == false) {\r\n            oldName = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newName = ValidationUtility.convertEmptyValueToBlank(newName);\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, nameLabelText, oldName, newName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //=Changed variable {0}, field {1}, from {2} to {3}\r\n        //detect changes in label\r\n        String oldLabel = originalVariable.getLabel();\r\n        String newLabel = revisedVariable.getLabel();\r\n        if (oldLabel.equals(newLabel) == false) {\r\n            oldLabel = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newLabel = ValidationUtility.convertEmptyValueToBlank(newLabel);\r\n            String labelLabelText = MacawMessages.getMessage(\"variable.label.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, labelLabelText, oldLabel, newLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in year\r\n        String oldYear = originalVariable.getYear();\r\n        String newYear = revisedVariable.getYear();\r\n        if (oldYear.equals(newYear) == false) {\r\n            oldYear = ValidationUtility.convertEmptyValueToBlank(oldYear);\r\n            newYear = ValidationUtility.convertEmptyValueToBlank(newYear);\r\n            String yearLabelText = MacawMessages.getMessage(\"variable.year.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, yearLabelText, oldYear, newYear);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in category\r\n        String originalCategory = originalVariable.getCategory();\r\n        String revisedCategory = revisedVariable.getCategory();\r\n        if (originalCategory.equals(revisedCategory) == false) {\r\n            originalCategory = ValidationUtility.convertEmptyValueToBlank(originalCategory);\r\n            revisedCategory = ValidationUtility.convertEmptyValueToBlank(revisedCategory);\r\n            String categoryLabelText = MacawMessages.getMessage(\"variable.category.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, categoryLabelText, originalCategory, revisedCategory);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCleaned = originalVariable.isCleaned();\r\n        boolean revisedIsCleaned = revisedVariable.isCleaned();\r\n        if ((originalIsCleaned != revisedIsCleaned) && (revisedIsCleaned == false)) {\r\n            String changedToNotCleaned = MacawMessages.getMessage(\"variable.isCleaned.saveChanges.changedToNotClean\", ownerVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changedToNotCleaned, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String oldCleaningChoice = originalVariable.getCleaningStatus();\r\n            String revisedCleaningChoice = revisedVariable.getCleaningStatus();\r\n            if (oldCleaningChoice.equals(revisedCleaningChoice) == false) {\r\n                oldCleaningChoice = ValidationUtility.convertEmptyValueToBlank(oldCleaningChoice);\r\n                revisedCleaningChoice = ValidationUtility.convertEmptyValueToBlank(revisedCleaningChoice);\r\n                String cleaningStatusText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningStatusText, oldCleaningChoice, revisedCleaningChoice);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n            String oldCleaningDescription = originalVariable.getCleaningDescription();\r\n            String revisedCleaningDescription = originalVariable.getCleaningDescription();\r\n            if (oldCleaningDescription.equals(revisedCleaningDescription) == false) {\r\n                oldCleaningDescription = ValidationUtility.convertEmptyValueToBlank(oldCleaningDescription);\r\n                revisedCleaningDescription = ValidationUtility.convertEmptyValueToBlank(revisedCleaningDescription);\r\n                String cleaningDescriptionText = MacawMessages.getMessage(\"variable.cleaningDescription.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningDescriptionText, oldCleaningDescription, revisedCleaningDescription);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        //detect changes in code book number\r\n        String originalCodeBookNumber = originalVariable.getCodeBookNumber();\r\n        String revisedCodeBookNumber = revisedVariable.getCodeBookNumber();\r\n        if (originalCodeBookNumber.equals(revisedCodeBookNumber) == false) {\r\n            originalCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(originalCodeBookNumber);\r\n            revisedCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(revisedCodeBookNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.codeBookNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalCodeBookNumber, revisedCodeBookNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column start\r\n        String columnStartLabelText = MacawMessages.getMessage(\"variable.columnStart.label\");\r\n        String originalColumnStart = originalVariable.getColumnStart();\r\n        if (originalColumnStart == null) {\r\n            originalColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnStart = revisedVariable.getColumnStart();\r\n        if (revisedColumnStart == null) {\r\n            revisedColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnStart.equals(revisedColumnStart) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnStartLabelText, originalColumnStart, revisedColumnStart);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column end\r\n        String columnEndLabelText = MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n        String originalColumnEnd = originalVariable.getColumnEnd();\r\n        if (originalColumnEnd.equals(\"\") == true) {\r\n            originalColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnEnd = revisedVariable.getColumnEnd();\r\n        if (revisedColumnEnd.equals(\"\") == true) {\r\n            revisedColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnEnd.equals(revisedColumnEnd) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnEndLabelText, originalColumnEnd, revisedColumnEnd);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check alias\r\n        String oldAlias = originalVariable.getAlias();\r\n        String newAlias = revisedVariable.getAlias();\r\n        if (oldAlias.equals(newAlias) == false) {\r\n            oldAlias = ValidationUtility.convertEmptyValueToBlank(oldAlias);\r\n            newAlias = ValidationUtility.convertEmptyValueToBlank(newAlias);\r\n            String aliasText = MacawMessages.getMessage(\"variable.alias.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, aliasText, oldAlias, newAlias);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check file name\r\n        /**\r\n         * \t\tString oldFilePath = originalVariable.getFilePath();\r\n         * \t\tString newFilePath = revisedVariable.getFilePath();\r\n         * \t\tif (oldFilePath.equals(newFilePath) == false) {\r\n         * \t\t\toldFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(oldFilePath);\r\n         * \t\t\tnewFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(newFilePath);\r\n         *\r\n         * \t\t\tString filePathText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString fieldChangedMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n         * \t\t\t\t\t\t\t\t\t\t   ownerVariableName,\r\n         * \t\t\t\t\t\t\t\t\t\t   filePathText,\r\n         * \t\t\t\t\t\t\t\t\t\t   oldFilePath,\r\n         * \t\t\t\t\t\t\t\t\t\t   newFilePath);\r\n         * \t\t\tMacawChangeEvent changeEvent\r\n         * \t\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n         * \t\t\t\t\t\t\t\t\t   fieldChangedMessage,\r\n         * \t\t\t\t\t\t\t\t\t   userID);\r\n         * \t\t\tchangeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        String oldAvailability = originalVariable.getAvailability();\r\n        String revisedAvailability = revisedVariable.getAvailability();\r\n        if (oldAvailability.equals(revisedAvailability) == false) {\r\n            oldAvailability = ValidationUtility.convertEmptyValueToBlank(oldAvailability);\r\n            revisedAvailability = ValidationUtility.convertEmptyValueToBlank(revisedAvailability);\r\n            String availabilityText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, availabilityText, oldAvailability, revisedAvailability);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCoded = originalVariable.isCoded();\r\n        boolean revisedIsCoded = revisedVariable.isCoded();\r\n        if (originalIsCoded != revisedIsCoded) {\r\n            String oldIsCodedValue = Boolean.toString(originalIsCoded);\r\n            String revisedIsCodedValue = Boolean.toString(revisedIsCoded);\r\n            String isCodedLabel = MacawMessages.getMessage(\"variable.isCoded.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, isCodedLabel, oldIsCodedValue, revisedIsCodedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalForm = originalVariable.getForm();\r\n        String revisedForm = revisedVariable.getForm();\r\n        if (originalForm.equals(revisedForm) == false) {\r\n            originalForm = ValidationUtility.convertEmptyValueToBlank(originalForm);\r\n            revisedForm = ValidationUtility.convertEmptyValueToBlank(revisedForm);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.form.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalForm, revisedForm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalQuestionNumber = originalVariable.getQuestionNumber();\r\n        String revisedQuestionNumber = revisedVariable.getQuestionNumber();\r\n        if (originalQuestionNumber.equals(revisedQuestionNumber) == false) {\r\n            originalQuestionNumber = ValidationUtility.convertEmptyValueToBlank(originalQuestionNumber);\r\n            revisedQuestionNumber = ValidationUtility.convertEmptyValueToBlank(revisedQuestionNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.questionNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalQuestionNumber, revisedQuestionNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalNotes = originalVariable.getNotes();\r\n        String revisedNotes = revisedVariable.getNotes();\r\n        if (originalNotes.equals(revisedNotes) == false) {\r\n            originalNotes = ValidationUtility.convertEmptyValueToBlank(originalNotes);\r\n            revisedNotes = ValidationUtility.convertEmptyValueToBlank(revisedNotes);\r\n            String notesLabelText = MacawMessages.getMessage(\"variable.notes.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, notesLabelText, originalNotes, revisedNotes);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        /**\r\n         * \t\tMacawChangeEvent changeEvent\r\n         * \t\t\t= detectChangesInAlternativeVariable(user,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t originalVariable,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t revisedVariable);\r\n         * \t\tif (changeEvent != null) {\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        return changeEvents;\r\n    }\r\n\r\n    static public MacawChangeEvent detectChangesInAlternativeVariable(User user, Variable originalVariable, Variable revisedAlternativeVariable) {\r\n        Variable oldAlternativeVariable = originalVariable.getAlternativeVariable();\r\n        boolean alternativeVariableChanged = false;\r\n        if ((oldAlternativeVariable == null) && (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = false;\r\n        } else if ((oldAlternativeVariable == null) || (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = true;\r\n        } else {\r\n            //both are non-null\r\n            if (oldAlternativeVariable.getIdentifier() == revisedAlternativeVariable.getIdentifier()) {\r\n                alternativeVariableChanged = true;\r\n            } else {\r\n                alternativeVariableChanged = false;\r\n            }\r\n        }\r\n        if (alternativeVariableChanged == true) {\r\n            String blankFieldValue = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n            String fieldName = MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n            String oldAlternativeVariableName = blankFieldValue;\r\n            if (oldAlternativeVariable != null) {\r\n                oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n            }\r\n            String revisedAlternativeVariableName = blankFieldValue;\r\n            if (revisedAlternativeVariable != null) {\r\n                revisedAlternativeVariableName = revisedAlternativeVariable.getDisplayName();\r\n            }\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", fieldName, oldAlternativeVariableName, revisedAlternativeVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            int targetVariableID = originalVariable.getIdentifier();\r\n            changeEvent.setVariableOwnerID(targetVariableID);\r\n            changeEvent.setChangedObjectIdentifier(targetVariableID);\r\n            return changeEvent;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return getName();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Clonable\r\n    abstract public Object clone();\r\n\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    protected void cloneAttributes(Variable cloneVariable) {\r\n        cloneVariable.setIdentifier(identifier);\r\n        cloneVariable.setCategory(category);\r\n        cloneVariable.setName(name);\r\n        cloneVariable.setLabel(label);\r\n        cloneVariable.setForm(form);\r\n        cloneVariable.setQuestionNumber(questionNumber);\r\n        cloneVariable.setYear(year);\r\n        cloneVariable.setCleaned(isCleaned);\r\n        cloneVariable.setCoded(isCoded);\r\n        cloneVariable.setCleaningStatus(cleaningStatus);\r\n        cloneVariable.setCleaningDescription(cleaningDescription);\r\n        cloneVariable.setCodeBookNumber(codeBookNumber);\r\n        cloneVariable.setColumnStart(columnStart);\r\n        cloneVariable.setColumnEnd(columnEnd);\r\n        cloneVariable.setAvailability(availability);\r\n        for (ValueLabel valueLabel : valueLabels) {\r\n            ValueLabel clonedValueLabel = (ValueLabel) valueLabel.clone();\r\n            cloneVariable.addValueLabel(clonedValueLabel);\r\n        }\r\n        cloneVariable.setAlias(alias);\r\n        cloneVariable.setFilePath(filePath);\r\n        cloneVariable.setIsNewRecord(isNewRecord);\r\n        //make copies of references to supporting documents\r\n        ArrayList<SupportingDocument> cloneSupportingDocuments = new ArrayList<SupportingDocument>();\r\n        for (SupportingDocument supportingDocument : supportingDocuments) {\r\n            cloneSupportingDocuments.add((SupportingDocument) supportingDocument.clone());\r\n        }\r\n        cloneVariable.setSupportingDocuments(cloneSupportingDocuments);\r\n        ArrayList<OntologyTerm> cloneOntologyTerms = new ArrayList<OntologyTerm>();\r\n        for (OntologyTerm ontologyTerm : ontologyTerms) {\r\n            cloneOntologyTerms.add((OntologyTerm) ontologyTerm.clone());\r\n        }\r\n        cloneVariable.setOntologyTerms(cloneOntologyTerms);\r\n        //we don't need\r\n        if (alternativeVariable != null) {\r\n            Variable cloneAlternativeVariable = (Variable) alternativeVariable.clone();\r\n            cloneVariable.setAlternativeVariable(cloneAlternativeVariable);\r\n        }\r\n        cloneVariable.setNotes(notes);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/VariableTest2.java",
		"test_prompt": "// VariableTest2.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Variable}.\n* It contains ten unit test cases for the {@link Variable#containsSupportingDocument(SupportingDocument)} method.\n*/\nclass VariableTest2 {"
	},
	{
		"original_code": "// Variable.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A concept related to the NSHD study.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\nabstract public class Variable implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String category;\r\n\r\n    private String name;\r\n\r\n    private String label;\r\n\r\n    private boolean isCleaned;\r\n\r\n    private String year;\r\n\r\n    private String cleaningStatus;\r\n\r\n    private String cleaningDescription;\r\n\r\n    private ArrayList<ValueLabel> valueLabels;\r\n\r\n    private String availability;\r\n\r\n    private String alias;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isCoded;\r\n\r\n    protected String form;\r\n\r\n    protected String questionNumber;\r\n\r\n    protected String codeBookNumber;\r\n\r\n    protected String columnStart;\r\n\r\n    protected String columnEnd;\r\n\r\n    protected String notes;\r\n\r\n    private ArrayList<SupportingDocument> supportingDocuments;\r\n\r\n    private ArrayList<OntologyTerm> ontologyTerms;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    private Variable alternativeVariable;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public Variable() {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        identifier = 0;\r\n        category = unknownMessage;\r\n        name = \"\";\r\n        year = \"\";\r\n        label = \"\";\r\n        isCleaned = false;\r\n        cleaningStatus = unknownMessage;\r\n        cleaningDescription = \"\";\r\n        valueLabels = new ArrayList<ValueLabel>();\r\n        availability = unknownMessage;\r\n        alias = \"\";\r\n        filePath = \"\";\r\n        supportingDocuments = new ArrayList<SupportingDocument>();\r\n        ontologyTerms = new ArrayList<OntologyTerm>();\r\n        isCoded = false;\r\n        isNewRecord = false;\r\n        codeBookNumber = \"\";\r\n        columnStart = \"\";\r\n        columnEnd = \"\";\r\n        form = \"\";\r\n        questionNumber = \"\";\r\n        notes = \"\";\r\n        alternativeVariable = null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produces a variable summary suitable for showing in a collection\r\n     * of search results.\r\n     */\r\n    public VariableSummary createVariableSummary() {\r\n        VariableSummary variableSummary = new VariableSummary();\r\n        variableSummary.setIdentifier(identifier);\r\n        variableSummary.setName(name);\r\n        variableSummary.setLabel(label);\r\n        variableSummary.setYear(year);\r\n        return variableSummary;\r\n    }\r\n\r\n    /**\r\n     * an integer which uniquely identifies an instance in the database.\r\n     * All primary key values in the database use a single auto-incremented\r\n     * auto-generated value.\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * variable name, as specified using the NSHD variable naming convention\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * a one-line description of the variable\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * sweep in which the variable was collected\r\n     * @return the year\r\n     */\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    /**\r\n     * @param year the year to set\r\n     */\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    /**\r\n     * @return the category\r\n     */\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    /**\r\n     * @param category the category to set\r\n     */\r\n    public void setCategory(String category) {\r\n        this.category = category;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been cleaned in some way\r\n     * @return the isCleaned\r\n     */\r\n    public boolean isCleaned() {\r\n        return isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @param isCleaned the isCleaned to set\r\n     */\r\n    public void setCleaned(boolean isCleaned) {\r\n        this.isCleaned = isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @return the cleaningStatus\r\n     */\r\n    public String getCleaningStatus() {\r\n        return cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningStatus the cleaningStatus to set\r\n     */\r\n    public void setCleaningStatus(String cleaningStatus) {\r\n        this.cleaningStatus = cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * free text description of how the variable data were cleaned.\r\n     * @return the cleaningDescription\r\n     */\r\n    public String getCleaningDescription() {\r\n        return cleaningDescription;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningDescription the cleaningDescription to set\r\n     */\r\n    public void setCleaningDescription(String cleaningDescription) {\r\n        this.cleaningDescription = cleaningDescription;\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels() {\r\n        return valueLabels;\r\n    }\r\n\r\n    public void setValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        this.valueLabels = valueLabels;\r\n    }\r\n\r\n    public void addValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.add(valueLabel);\r\n    }\r\n\r\n    public void removeValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.remove(valueLabel);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments() {\r\n        return supportingDocuments;\r\n    }\r\n\r\n    public boolean containsSupportingDocument(SupportingDocument targetSupportingDocument) {\r\n        int targetIdentifier = targetSupportingDocument.getIdentifier();\r\n        for (SupportingDocument currentSupportingDocument : supportingDocuments) {\r\n            int currentIdentifier = currentSupportingDocument.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setSupportingDocuments(ArrayList<SupportingDocument> supportingDocuments) {\r\n        this.supportingDocuments = supportingDocuments;\r\n    }\r\n\r\n    public void addSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToAdd) {\r\n        supportingDocuments.addAll(supportingDocumentsToAdd);\r\n    }\r\n\r\n    public void addSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.add(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.remove(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        for (SupportingDocument targetVariable : supportingDocumentsToDelete) {\r\n            supportingDocuments.remove(targetVariable);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms() {\r\n        return ontologyTerms;\r\n    }\r\n\r\n    public boolean containsOntologyTerm(OntologyTerm targetOntologyTerm) {\r\n        int targetIdentifier = targetOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            int currentIdentifier = currentOntologyTerm.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setOntologyTerms(ArrayList<OntologyTerm> ontologyTerms) {\r\n        this.ontologyTerms = ontologyTerms;\r\n    }\r\n\r\n    public void addOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToAdd) {\r\n        ontologyTerms.addAll(ontologyTermsToAdd);\r\n    }\r\n\r\n    public void addOntologyTerm(OntologyTerm ontologyTerm) {\r\n        ontologyTerms.add(ontologyTerm);\r\n    }\r\n\r\n    public void removeOntologyTerm(OntologyTerm copyOfOntologyTermToDelete) {\r\n        OntologyTerm itemToDelete = findOntologyTerm(copyOfOntologyTermToDelete);\r\n        if (itemToDelete != null) {\r\n            ontologyTerms.remove(itemToDelete);\r\n        }\r\n    }\r\n\r\n    public void removeOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToDelete) {\r\n        for (OntologyTerm targetOntologyTerm : ontologyTermsToDelete) {\r\n            removeOntologyTerm(targetOntologyTerm);\r\n        }\r\n    }\r\n\r\n    public void updateOntologyTerm(OntologyTerm revisedOntologyTerm) {\r\n        OntologyTerm itemToUpdate = findOntologyTerm(revisedOntologyTerm);\r\n        if (itemToUpdate != null) {\r\n            int numberOfTerms = ontologyTerms.size();\r\n            int index = ontologyTerms.indexOf(itemToUpdate);\r\n            ontologyTerms.remove(itemToUpdate);\r\n            if (index == numberOfTerms - 1) {\r\n                //item to update was at the end\r\n                ontologyTerms.add(revisedOntologyTerm);\r\n            } else {\r\n                ontologyTerms.add(index, revisedOntologyTerm);\r\n            }\r\n        }\r\n    }\r\n\r\n    private OntologyTerm findOntologyTerm(OntologyTerm copyofOntologyTerm) {\r\n        int targetIdentifier = copyofOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            if (currentOntologyTerm.getIdentifier() == targetIdentifier) {\r\n                //found the item to delete\r\n                return currentOntologyTerm;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @return the availability\r\n     */\r\n    public String getAvailability() {\r\n        return availability;\r\n    }\r\n\r\n    /**\r\n     * @param availability the availability to set\r\n     */\r\n    public void setAvailability(String availability) {\r\n        this.availability = availability;\r\n    }\r\n\r\n    /**\r\n     * @return the codeBookNumber\r\n     */\r\n    public String getCodeBookNumber() {\r\n        return codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * reference to the physical code book entry\r\n     * @param codeBookNumber the codeBookNumber to set\r\n     */\r\n    public void setCodeBookNumber(String codeBookNumber) {\r\n        this.codeBookNumber = codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * starting column in library file for this variable\r\n     * @return the columnStart\r\n     */\r\n    public String getColumnStart() {\r\n        return columnStart;\r\n    }\r\n\r\n    /**\r\n     * @param columnStart the columnStart to set\r\n     */\r\n    public void setColumnStart(String columnStart) {\r\n        this.columnStart = columnStart;\r\n    }\r\n\r\n    /**\r\n     * ending column in library file for this variable\r\n     * @return the columnEnd\r\n     */\r\n    public String getColumnEnd() {\r\n        return columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @param columnEnd the columnEnd to set\r\n     */\r\n    public void setColumnEnd(String columnEnd) {\r\n        this.columnEnd = columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @return the alias\r\n     */\r\n    public String getAlias() {\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * @param alias the alias to set\r\n     */\r\n    public void setAlias(String alias) {\r\n        this.alias = alias;\r\n    }\r\n\r\n    /**\r\n     * @return the file Name\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the dataLibraryFileName to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been coded electronically (or not)\r\n     * @return the isCoded\r\n     */\r\n    public boolean isCoded() {\r\n        return isCoded;\r\n    }\r\n\r\n    /**\r\n     * @param isCoded the isCoded to set\r\n     */\r\n    public void setCoded(boolean isCoded) {\r\n        this.isCoded = isCoded;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    public void setIsNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * questionnaire form containing the question whose response is stored in the variable\r\n     * @return the form\r\n     */\r\n    public String getForm() {\r\n        return form;\r\n    }\r\n\r\n    /**\r\n     * @param form the form to set\r\n     */\r\n    public void setForm(String form) {\r\n        this.form = form;\r\n    }\r\n\r\n    /**\r\n     * question number from the questionnaire for this variable\r\n     * @return the questionNumber\r\n     */\r\n    public String getQuestionNumber() {\r\n        return questionNumber;\r\n    }\r\n\r\n    /**\r\n     * @param questionNumber the questionNumber to set\r\n     */\r\n    public void setQuestionNumber(String questionNumber) {\r\n        this.questionNumber = questionNumber;\r\n    }\r\n\r\n    public String getNotes() {\r\n        return notes;\r\n    }\r\n\r\n    public void setNotes(String notes) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public Variable getAlternativeVariable() {\r\n        return alternativeVariable;\r\n    }\r\n\r\n    public void setAlternativeVariable(Variable alterativeVariable) {\r\n        this.alternativeVariable = alterativeVariable;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static protected ArrayList<String> validateFields(Variable variable) {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //specify a name\r\n        if (ValidationUtility.isBlank(variable.getName()) == true) {\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", nameLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //specify a label\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getLabel()) == true) {\r\n         * \t\t\tString labelLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.label.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tlabelLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a category\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t\r\n\t\tif (ValidationUtility.isUnknown(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        //specify an availability\r\n        if (ValidationUtility.isBlank(variable.getAvailability()) == true) {\r\n            String availabilityLabelText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", availabilityLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /**\r\n         * \t\tif (ValidationUtility.isUnknown(variable.getAvailability()) == true) {\r\n         * \t\t\tString availabilityLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.availability.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tavailabilityLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify cleaning status\r\n        if (variable.isCleaned() == true) {\r\n            if (ValidationUtility.isBlank(variable.getCleaningStatus()) == true) {\r\n                String cleaningStatusLabelText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", cleaningStatusLabelText);\r\n                errorMessages.add(errorMessage);\r\n            }\r\n            /**\r\n             * \t\t\tif (ValidationUtility.isUnknown(variable.getCleaningStatus()) == true) {\r\n             * \t\t\t\tString cleaningStatusLabelText\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n             * \t\t\t\tString errorMessage\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n             * \t\t\t\t\t\t\t\t\t\t\t\tcleaningStatusLabelText);\r\n             * \t\t\t\terrorMessages.add(errorMessage);\r\n             * \t\t\t}\r\n             */\r\n        }\r\n        //specify a year\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getYear()) == true) {\r\n         * \t\t\tString yearLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.year.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tyearLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         * \t\telse {\r\n         * \t\t\t//make sure year is numeric\r\n         * \t\t\tString yearValue = variable.getYear();\r\n         *\r\n         * \t\t\ttry {\r\n         * \t\t\t\tDate currentDate = new Date();\r\n         * \t\t\t\tGregorianCalendar gregorianCalendar = new GregorianCalendar();\r\n         * \t\t\t\tgregorianCalendar.setTime(currentDate);\r\n         * \t\t\t\tint currentYearNumber = gregorianCalendar.get(Calendar.YEAR);\r\n         *\r\n         * \t\t\t\tint calendarYear = new Integer(yearValue).intValue();\r\n         * \t\t\t\tif (calendarYear < 1946) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooOld\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t\telse if (calendarYear > currentYearNumber) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooNew\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t}\r\n         * \t\t\tcatch(NumberFormatException exception) {\r\n         * \t\t\t\tString illegalNumberFormatException\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.illegalYear\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\terrorMessages.add(illegalNumberFormatException);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        /**\r\n         * \t\tString columnStart = variable.getColumnStart();\r\n         * \t\tif (ValidationUtility.isBlank(columnStart) == false) {\r\n         * \t\t\t//check that column start is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnStart);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnStartLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnStart.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStart,\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStartLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         *\r\n         * \t\tString columnEnd = variable.getColumnEnd();\r\n         * \t\tif (ValidationUtility.isBlank(columnEnd) == false) {\r\n         * \t\t\t//check that column end is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnEnd);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnEndLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEnd,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEndLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        //specify an alias\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getAlias()) == true) {\r\n         * \t\t\tString aliasLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.alias.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\taliasLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a file name\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getFilePath()) == true) {\r\n         * \t\t\tString filePathLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tfilePathLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        return errorMessages;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable originalVariable, Variable revisedVariable) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String ownerVariableName = originalVariable.getDisplayName();\r\n        //detect changes in name\r\n        String oldName = originalVariable.getName();\r\n        String newName = revisedVariable.getName();\r\n        if (oldName.equals(newName) == false) {\r\n            oldName = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newName = ValidationUtility.convertEmptyValueToBlank(newName);\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, nameLabelText, oldName, newName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //=Changed variable {0}, field {1}, from {2} to {3}\r\n        //detect changes in label\r\n        String oldLabel = originalVariable.getLabel();\r\n        String newLabel = revisedVariable.getLabel();\r\n        if (oldLabel.equals(newLabel) == false) {\r\n            oldLabel = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newLabel = ValidationUtility.convertEmptyValueToBlank(newLabel);\r\n            String labelLabelText = MacawMessages.getMessage(\"variable.label.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, labelLabelText, oldLabel, newLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in year\r\n        String oldYear = originalVariable.getYear();\r\n        String newYear = revisedVariable.getYear();\r\n        if (oldYear.equals(newYear) == false) {\r\n            oldYear = ValidationUtility.convertEmptyValueToBlank(oldYear);\r\n            newYear = ValidationUtility.convertEmptyValueToBlank(newYear);\r\n            String yearLabelText = MacawMessages.getMessage(\"variable.year.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, yearLabelText, oldYear, newYear);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in category\r\n        String originalCategory = originalVariable.getCategory();\r\n        String revisedCategory = revisedVariable.getCategory();\r\n        if (originalCategory.equals(revisedCategory) == false) {\r\n            originalCategory = ValidationUtility.convertEmptyValueToBlank(originalCategory);\r\n            revisedCategory = ValidationUtility.convertEmptyValueToBlank(revisedCategory);\r\n            String categoryLabelText = MacawMessages.getMessage(\"variable.category.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, categoryLabelText, originalCategory, revisedCategory);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCleaned = originalVariable.isCleaned();\r\n        boolean revisedIsCleaned = revisedVariable.isCleaned();\r\n        if ((originalIsCleaned != revisedIsCleaned) && (revisedIsCleaned == false)) {\r\n            String changedToNotCleaned = MacawMessages.getMessage(\"variable.isCleaned.saveChanges.changedToNotClean\", ownerVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changedToNotCleaned, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String oldCleaningChoice = originalVariable.getCleaningStatus();\r\n            String revisedCleaningChoice = revisedVariable.getCleaningStatus();\r\n            if (oldCleaningChoice.equals(revisedCleaningChoice) == false) {\r\n                oldCleaningChoice = ValidationUtility.convertEmptyValueToBlank(oldCleaningChoice);\r\n                revisedCleaningChoice = ValidationUtility.convertEmptyValueToBlank(revisedCleaningChoice);\r\n                String cleaningStatusText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningStatusText, oldCleaningChoice, revisedCleaningChoice);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n            String oldCleaningDescription = originalVariable.getCleaningDescription();\r\n            String revisedCleaningDescription = originalVariable.getCleaningDescription();\r\n            if (oldCleaningDescription.equals(revisedCleaningDescription) == false) {\r\n                oldCleaningDescription = ValidationUtility.convertEmptyValueToBlank(oldCleaningDescription);\r\n                revisedCleaningDescription = ValidationUtility.convertEmptyValueToBlank(revisedCleaningDescription);\r\n                String cleaningDescriptionText = MacawMessages.getMessage(\"variable.cleaningDescription.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningDescriptionText, oldCleaningDescription, revisedCleaningDescription);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        //detect changes in code book number\r\n        String originalCodeBookNumber = originalVariable.getCodeBookNumber();\r\n        String revisedCodeBookNumber = revisedVariable.getCodeBookNumber();\r\n        if (originalCodeBookNumber.equals(revisedCodeBookNumber) == false) {\r\n            originalCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(originalCodeBookNumber);\r\n            revisedCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(revisedCodeBookNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.codeBookNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalCodeBookNumber, revisedCodeBookNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column start\r\n        String columnStartLabelText = MacawMessages.getMessage(\"variable.columnStart.label\");\r\n        String originalColumnStart = originalVariable.getColumnStart();\r\n        if (originalColumnStart == null) {\r\n            originalColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnStart = revisedVariable.getColumnStart();\r\n        if (revisedColumnStart == null) {\r\n            revisedColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnStart.equals(revisedColumnStart) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnStartLabelText, originalColumnStart, revisedColumnStart);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column end\r\n        String columnEndLabelText = MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n        String originalColumnEnd = originalVariable.getColumnEnd();\r\n        if (originalColumnEnd.equals(\"\") == true) {\r\n            originalColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnEnd = revisedVariable.getColumnEnd();\r\n        if (revisedColumnEnd.equals(\"\") == true) {\r\n            revisedColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnEnd.equals(revisedColumnEnd) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnEndLabelText, originalColumnEnd, revisedColumnEnd);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check alias\r\n        String oldAlias = originalVariable.getAlias();\r\n        String newAlias = revisedVariable.getAlias();\r\n        if (oldAlias.equals(newAlias) == false) {\r\n            oldAlias = ValidationUtility.convertEmptyValueToBlank(oldAlias);\r\n            newAlias = ValidationUtility.convertEmptyValueToBlank(newAlias);\r\n            String aliasText = MacawMessages.getMessage(\"variable.alias.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, aliasText, oldAlias, newAlias);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check file name\r\n        /**\r\n         * \t\tString oldFilePath = originalVariable.getFilePath();\r\n         * \t\tString newFilePath = revisedVariable.getFilePath();\r\n         * \t\tif (oldFilePath.equals(newFilePath) == false) {\r\n         * \t\t\toldFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(oldFilePath);\r\n         * \t\t\tnewFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(newFilePath);\r\n         *\r\n         * \t\t\tString filePathText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString fieldChangedMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n         * \t\t\t\t\t\t\t\t\t\t   ownerVariableName,\r\n         * \t\t\t\t\t\t\t\t\t\t   filePathText,\r\n         * \t\t\t\t\t\t\t\t\t\t   oldFilePath,\r\n         * \t\t\t\t\t\t\t\t\t\t   newFilePath);\r\n         * \t\t\tMacawChangeEvent changeEvent\r\n         * \t\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n         * \t\t\t\t\t\t\t\t\t   fieldChangedMessage,\r\n         * \t\t\t\t\t\t\t\t\t   userID);\r\n         * \t\t\tchangeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        String oldAvailability = originalVariable.getAvailability();\r\n        String revisedAvailability = revisedVariable.getAvailability();\r\n        if (oldAvailability.equals(revisedAvailability) == false) {\r\n            oldAvailability = ValidationUtility.convertEmptyValueToBlank(oldAvailability);\r\n            revisedAvailability = ValidationUtility.convertEmptyValueToBlank(revisedAvailability);\r\n            String availabilityText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, availabilityText, oldAvailability, revisedAvailability);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCoded = originalVariable.isCoded();\r\n        boolean revisedIsCoded = revisedVariable.isCoded();\r\n        if (originalIsCoded != revisedIsCoded) {\r\n            String oldIsCodedValue = Boolean.toString(originalIsCoded);\r\n            String revisedIsCodedValue = Boolean.toString(revisedIsCoded);\r\n            String isCodedLabel = MacawMessages.getMessage(\"variable.isCoded.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, isCodedLabel, oldIsCodedValue, revisedIsCodedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalForm = originalVariable.getForm();\r\n        String revisedForm = revisedVariable.getForm();\r\n        if (originalForm.equals(revisedForm) == false) {\r\n            originalForm = ValidationUtility.convertEmptyValueToBlank(originalForm);\r\n            revisedForm = ValidationUtility.convertEmptyValueToBlank(revisedForm);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.form.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalForm, revisedForm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalQuestionNumber = originalVariable.getQuestionNumber();\r\n        String revisedQuestionNumber = revisedVariable.getQuestionNumber();\r\n        if (originalQuestionNumber.equals(revisedQuestionNumber) == false) {\r\n            originalQuestionNumber = ValidationUtility.convertEmptyValueToBlank(originalQuestionNumber);\r\n            revisedQuestionNumber = ValidationUtility.convertEmptyValueToBlank(revisedQuestionNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.questionNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalQuestionNumber, revisedQuestionNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalNotes = originalVariable.getNotes();\r\n        String revisedNotes = revisedVariable.getNotes();\r\n        if (originalNotes.equals(revisedNotes) == false) {\r\n            originalNotes = ValidationUtility.convertEmptyValueToBlank(originalNotes);\r\n            revisedNotes = ValidationUtility.convertEmptyValueToBlank(revisedNotes);\r\n            String notesLabelText = MacawMessages.getMessage(\"variable.notes.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, notesLabelText, originalNotes, revisedNotes);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        /**\r\n         * \t\tMacawChangeEvent changeEvent\r\n         * \t\t\t= detectChangesInAlternativeVariable(user,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t originalVariable,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t revisedVariable);\r\n         * \t\tif (changeEvent != null) {\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        return changeEvents;\r\n    }\r\n\r\n    static public MacawChangeEvent detectChangesInAlternativeVariable(User user, Variable originalVariable, Variable revisedAlternativeVariable) {\r\n        Variable oldAlternativeVariable = originalVariable.getAlternativeVariable();\r\n        boolean alternativeVariableChanged = false;\r\n        if ((oldAlternativeVariable == null) && (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = false;\r\n        } else if ((oldAlternativeVariable == null) || (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = true;\r\n        } else {\r\n            //both are non-null\r\n            if (oldAlternativeVariable.getIdentifier() == revisedAlternativeVariable.getIdentifier()) {\r\n                alternativeVariableChanged = true;\r\n            } else {\r\n                alternativeVariableChanged = false;\r\n            }\r\n        }\r\n        if (alternativeVariableChanged == true) {\r\n            String blankFieldValue = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n            String fieldName = MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n            String oldAlternativeVariableName = blankFieldValue;\r\n            if (oldAlternativeVariable != null) {\r\n                oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n            }\r\n            String revisedAlternativeVariableName = blankFieldValue;\r\n            if (revisedAlternativeVariable != null) {\r\n                revisedAlternativeVariableName = revisedAlternativeVariable.getDisplayName();\r\n            }\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", fieldName, oldAlternativeVariableName, revisedAlternativeVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            int targetVariableID = originalVariable.getIdentifier();\r\n            changeEvent.setVariableOwnerID(targetVariableID);\r\n            changeEvent.setChangedObjectIdentifier(targetVariableID);\r\n            return changeEvent;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return getName();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Clonable\r\n    abstract public Object clone();\r\n\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    protected void cloneAttributes(Variable cloneVariable) {\r\n        cloneVariable.setIdentifier(identifier);\r\n        cloneVariable.setCategory(category);\r\n        cloneVariable.setName(name);\r\n        cloneVariable.setLabel(label);\r\n        cloneVariable.setForm(form);\r\n        cloneVariable.setQuestionNumber(questionNumber);\r\n        cloneVariable.setYear(year);\r\n        cloneVariable.setCleaned(isCleaned);\r\n        cloneVariable.setCoded(isCoded);\r\n        cloneVariable.setCleaningStatus(cleaningStatus);\r\n        cloneVariable.setCleaningDescription(cleaningDescription);\r\n        cloneVariable.setCodeBookNumber(codeBookNumber);\r\n        cloneVariable.setColumnStart(columnStart);\r\n        cloneVariable.setColumnEnd(columnEnd);\r\n        cloneVariable.setAvailability(availability);\r\n        for (ValueLabel valueLabel : valueLabels) {\r\n            ValueLabel clonedValueLabel = (ValueLabel) valueLabel.clone();\r\n            cloneVariable.addValueLabel(clonedValueLabel);\r\n        }\r\n        cloneVariable.setAlias(alias);\r\n        cloneVariable.setFilePath(filePath);\r\n        cloneVariable.setIsNewRecord(isNewRecord);\r\n        //make copies of references to supporting documents\r\n        ArrayList<SupportingDocument> cloneSupportingDocuments = new ArrayList<SupportingDocument>();\r\n        for (SupportingDocument supportingDocument : supportingDocuments) {\r\n            cloneSupportingDocuments.add((SupportingDocument) supportingDocument.clone());\r\n        }\r\n        cloneVariable.setSupportingDocuments(cloneSupportingDocuments);\r\n        ArrayList<OntologyTerm> cloneOntologyTerms = new ArrayList<OntologyTerm>();\r\n        for (OntologyTerm ontologyTerm : ontologyTerms) {\r\n            cloneOntologyTerms.add((OntologyTerm) ontologyTerm.clone());\r\n        }\r\n        cloneVariable.setOntologyTerms(cloneOntologyTerms);\r\n        //we don't need\r\n        if (alternativeVariable != null) {\r\n            Variable cloneAlternativeVariable = (Variable) alternativeVariable.clone();\r\n            cloneVariable.setAlternativeVariable(cloneAlternativeVariable);\r\n        }\r\n        cloneVariable.setNotes(notes);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/VariableTest3.java",
		"test_prompt": "// VariableTest3.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Variable}.\n* It contains ten unit test cases for the {@link Variable#containsOntologyTerm(OntologyTerm)} method.\n*/\nclass VariableTest3 {"
	},
	{
		"original_code": "// Variable.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A concept related to the NSHD study.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\nabstract public class Variable implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String category;\r\n\r\n    private String name;\r\n\r\n    private String label;\r\n\r\n    private boolean isCleaned;\r\n\r\n    private String year;\r\n\r\n    private String cleaningStatus;\r\n\r\n    private String cleaningDescription;\r\n\r\n    private ArrayList<ValueLabel> valueLabels;\r\n\r\n    private String availability;\r\n\r\n    private String alias;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isCoded;\r\n\r\n    protected String form;\r\n\r\n    protected String questionNumber;\r\n\r\n    protected String codeBookNumber;\r\n\r\n    protected String columnStart;\r\n\r\n    protected String columnEnd;\r\n\r\n    protected String notes;\r\n\r\n    private ArrayList<SupportingDocument> supportingDocuments;\r\n\r\n    private ArrayList<OntologyTerm> ontologyTerms;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    private Variable alternativeVariable;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public Variable() {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        identifier = 0;\r\n        category = unknownMessage;\r\n        name = \"\";\r\n        year = \"\";\r\n        label = \"\";\r\n        isCleaned = false;\r\n        cleaningStatus = unknownMessage;\r\n        cleaningDescription = \"\";\r\n        valueLabels = new ArrayList<ValueLabel>();\r\n        availability = unknownMessage;\r\n        alias = \"\";\r\n        filePath = \"\";\r\n        supportingDocuments = new ArrayList<SupportingDocument>();\r\n        ontologyTerms = new ArrayList<OntologyTerm>();\r\n        isCoded = false;\r\n        isNewRecord = false;\r\n        codeBookNumber = \"\";\r\n        columnStart = \"\";\r\n        columnEnd = \"\";\r\n        form = \"\";\r\n        questionNumber = \"\";\r\n        notes = \"\";\r\n        alternativeVariable = null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produces a variable summary suitable for showing in a collection\r\n     * of search results.\r\n     */\r\n    public VariableSummary createVariableSummary() {\r\n        VariableSummary variableSummary = new VariableSummary();\r\n        variableSummary.setIdentifier(identifier);\r\n        variableSummary.setName(name);\r\n        variableSummary.setLabel(label);\r\n        variableSummary.setYear(year);\r\n        return variableSummary;\r\n    }\r\n\r\n    /**\r\n     * an integer which uniquely identifies an instance in the database.\r\n     * All primary key values in the database use a single auto-incremented\r\n     * auto-generated value.\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * variable name, as specified using the NSHD variable naming convention\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * a one-line description of the variable\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * sweep in which the variable was collected\r\n     * @return the year\r\n     */\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    /**\r\n     * @param year the year to set\r\n     */\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    /**\r\n     * @return the category\r\n     */\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    /**\r\n     * @param category the category to set\r\n     */\r\n    public void setCategory(String category) {\r\n        this.category = category;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been cleaned in some way\r\n     * @return the isCleaned\r\n     */\r\n    public boolean isCleaned() {\r\n        return isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @param isCleaned the isCleaned to set\r\n     */\r\n    public void setCleaned(boolean isCleaned) {\r\n        this.isCleaned = isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @return the cleaningStatus\r\n     */\r\n    public String getCleaningStatus() {\r\n        return cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningStatus the cleaningStatus to set\r\n     */\r\n    public void setCleaningStatus(String cleaningStatus) {\r\n        this.cleaningStatus = cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * free text description of how the variable data were cleaned.\r\n     * @return the cleaningDescription\r\n     */\r\n    public String getCleaningDescription() {\r\n        return cleaningDescription;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningDescription the cleaningDescription to set\r\n     */\r\n    public void setCleaningDescription(String cleaningDescription) {\r\n        this.cleaningDescription = cleaningDescription;\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels() {\r\n        return valueLabels;\r\n    }\r\n\r\n    public void setValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        this.valueLabels = valueLabels;\r\n    }\r\n\r\n    public void addValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.add(valueLabel);\r\n    }\r\n\r\n    public void removeValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.remove(valueLabel);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments() {\r\n        return supportingDocuments;\r\n    }\r\n\r\n    public boolean containsSupportingDocument(SupportingDocument targetSupportingDocument) {\r\n        int targetIdentifier = targetSupportingDocument.getIdentifier();\r\n        for (SupportingDocument currentSupportingDocument : supportingDocuments) {\r\n            int currentIdentifier = currentSupportingDocument.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setSupportingDocuments(ArrayList<SupportingDocument> supportingDocuments) {\r\n        this.supportingDocuments = supportingDocuments;\r\n    }\r\n\r\n    public void addSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToAdd) {\r\n        supportingDocuments.addAll(supportingDocumentsToAdd);\r\n    }\r\n\r\n    public void addSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.add(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.remove(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        for (SupportingDocument targetVariable : supportingDocumentsToDelete) {\r\n            supportingDocuments.remove(targetVariable);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms() {\r\n        return ontologyTerms;\r\n    }\r\n\r\n    public boolean containsOntologyTerm(OntologyTerm targetOntologyTerm) {\r\n        int targetIdentifier = targetOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            int currentIdentifier = currentOntologyTerm.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setOntologyTerms(ArrayList<OntologyTerm> ontologyTerms) {\r\n        this.ontologyTerms = ontologyTerms;\r\n    }\r\n\r\n    public void addOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToAdd) {\r\n        ontologyTerms.addAll(ontologyTermsToAdd);\r\n    }\r\n\r\n    public void addOntologyTerm(OntologyTerm ontologyTerm) {\r\n        ontologyTerms.add(ontologyTerm);\r\n    }\r\n\r\n    public void removeOntologyTerm(OntologyTerm copyOfOntologyTermToDelete) {\r\n        OntologyTerm itemToDelete = findOntologyTerm(copyOfOntologyTermToDelete);\r\n        if (itemToDelete != null) {\r\n            ontologyTerms.remove(itemToDelete);\r\n        }\r\n    }\r\n\r\n    public void removeOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToDelete) {\r\n        for (OntologyTerm targetOntologyTerm : ontologyTermsToDelete) {\r\n            removeOntologyTerm(targetOntologyTerm);\r\n        }\r\n    }\r\n\r\n    public void updateOntologyTerm(OntologyTerm revisedOntologyTerm) {\r\n        OntologyTerm itemToUpdate = findOntologyTerm(revisedOntologyTerm);\r\n        if (itemToUpdate != null) {\r\n            int numberOfTerms = ontologyTerms.size();\r\n            int index = ontologyTerms.indexOf(itemToUpdate);\r\n            ontologyTerms.remove(itemToUpdate);\r\n            if (index == numberOfTerms - 1) {\r\n                //item to update was at the end\r\n                ontologyTerms.add(revisedOntologyTerm);\r\n            } else {\r\n                ontologyTerms.add(index, revisedOntologyTerm);\r\n            }\r\n        }\r\n    }\r\n\r\n    private OntologyTerm findOntologyTerm(OntologyTerm copyofOntologyTerm) {\r\n        int targetIdentifier = copyofOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            if (currentOntologyTerm.getIdentifier() == targetIdentifier) {\r\n                //found the item to delete\r\n                return currentOntologyTerm;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @return the availability\r\n     */\r\n    public String getAvailability() {\r\n        return availability;\r\n    }\r\n\r\n    /**\r\n     * @param availability the availability to set\r\n     */\r\n    public void setAvailability(String availability) {\r\n        this.availability = availability;\r\n    }\r\n\r\n    /**\r\n     * @return the codeBookNumber\r\n     */\r\n    public String getCodeBookNumber() {\r\n        return codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * reference to the physical code book entry\r\n     * @param codeBookNumber the codeBookNumber to set\r\n     */\r\n    public void setCodeBookNumber(String codeBookNumber) {\r\n        this.codeBookNumber = codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * starting column in library file for this variable\r\n     * @return the columnStart\r\n     */\r\n    public String getColumnStart() {\r\n        return columnStart;\r\n    }\r\n\r\n    /**\r\n     * @param columnStart the columnStart to set\r\n     */\r\n    public void setColumnStart(String columnStart) {\r\n        this.columnStart = columnStart;\r\n    }\r\n\r\n    /**\r\n     * ending column in library file for this variable\r\n     * @return the columnEnd\r\n     */\r\n    public String getColumnEnd() {\r\n        return columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @param columnEnd the columnEnd to set\r\n     */\r\n    public void setColumnEnd(String columnEnd) {\r\n        this.columnEnd = columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @return the alias\r\n     */\r\n    public String getAlias() {\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * @param alias the alias to set\r\n     */\r\n    public void setAlias(String alias) {\r\n        this.alias = alias;\r\n    }\r\n\r\n    /**\r\n     * @return the file Name\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the dataLibraryFileName to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been coded electronically (or not)\r\n     * @return the isCoded\r\n     */\r\n    public boolean isCoded() {\r\n        return isCoded;\r\n    }\r\n\r\n    /**\r\n     * @param isCoded the isCoded to set\r\n     */\r\n    public void setCoded(boolean isCoded) {\r\n        this.isCoded = isCoded;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    public void setIsNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * questionnaire form containing the question whose response is stored in the variable\r\n     * @return the form\r\n     */\r\n    public String getForm() {\r\n        return form;\r\n    }\r\n\r\n    /**\r\n     * @param form the form to set\r\n     */\r\n    public void setForm(String form) {\r\n        this.form = form;\r\n    }\r\n\r\n    /**\r\n     * question number from the questionnaire for this variable\r\n     * @return the questionNumber\r\n     */\r\n    public String getQuestionNumber() {\r\n        return questionNumber;\r\n    }\r\n\r\n    /**\r\n     * @param questionNumber the questionNumber to set\r\n     */\r\n    public void setQuestionNumber(String questionNumber) {\r\n        this.questionNumber = questionNumber;\r\n    }\r\n\r\n    public String getNotes() {\r\n        return notes;\r\n    }\r\n\r\n    public void setNotes(String notes) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public Variable getAlternativeVariable() {\r\n        return alternativeVariable;\r\n    }\r\n\r\n    public void setAlternativeVariable(Variable alterativeVariable) {\r\n        this.alternativeVariable = alterativeVariable;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static protected ArrayList<String> validateFields(Variable variable) {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //specify a name\r\n        if (ValidationUtility.isBlank(variable.getName()) == true) {\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", nameLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //specify a label\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getLabel()) == true) {\r\n         * \t\t\tString labelLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.label.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tlabelLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a category\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t\r\n\t\tif (ValidationUtility.isUnknown(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        //specify an availability\r\n        if (ValidationUtility.isBlank(variable.getAvailability()) == true) {\r\n            String availabilityLabelText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", availabilityLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /**\r\n         * \t\tif (ValidationUtility.isUnknown(variable.getAvailability()) == true) {\r\n         * \t\t\tString availabilityLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.availability.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tavailabilityLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify cleaning status\r\n        if (variable.isCleaned() == true) {\r\n            if (ValidationUtility.isBlank(variable.getCleaningStatus()) == true) {\r\n                String cleaningStatusLabelText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", cleaningStatusLabelText);\r\n                errorMessages.add(errorMessage);\r\n            }\r\n            /**\r\n             * \t\t\tif (ValidationUtility.isUnknown(variable.getCleaningStatus()) == true) {\r\n             * \t\t\t\tString cleaningStatusLabelText\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n             * \t\t\t\tString errorMessage\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n             * \t\t\t\t\t\t\t\t\t\t\t\tcleaningStatusLabelText);\r\n             * \t\t\t\terrorMessages.add(errorMessage);\r\n             * \t\t\t}\r\n             */\r\n        }\r\n        //specify a year\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getYear()) == true) {\r\n         * \t\t\tString yearLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.year.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tyearLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         * \t\telse {\r\n         * \t\t\t//make sure year is numeric\r\n         * \t\t\tString yearValue = variable.getYear();\r\n         *\r\n         * \t\t\ttry {\r\n         * \t\t\t\tDate currentDate = new Date();\r\n         * \t\t\t\tGregorianCalendar gregorianCalendar = new GregorianCalendar();\r\n         * \t\t\t\tgregorianCalendar.setTime(currentDate);\r\n         * \t\t\t\tint currentYearNumber = gregorianCalendar.get(Calendar.YEAR);\r\n         *\r\n         * \t\t\t\tint calendarYear = new Integer(yearValue).intValue();\r\n         * \t\t\t\tif (calendarYear < 1946) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooOld\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t\telse if (calendarYear > currentYearNumber) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooNew\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t}\r\n         * \t\t\tcatch(NumberFormatException exception) {\r\n         * \t\t\t\tString illegalNumberFormatException\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.illegalYear\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\terrorMessages.add(illegalNumberFormatException);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        /**\r\n         * \t\tString columnStart = variable.getColumnStart();\r\n         * \t\tif (ValidationUtility.isBlank(columnStart) == false) {\r\n         * \t\t\t//check that column start is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnStart);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnStartLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnStart.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStart,\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStartLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         *\r\n         * \t\tString columnEnd = variable.getColumnEnd();\r\n         * \t\tif (ValidationUtility.isBlank(columnEnd) == false) {\r\n         * \t\t\t//check that column end is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnEnd);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnEndLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEnd,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEndLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        //specify an alias\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getAlias()) == true) {\r\n         * \t\t\tString aliasLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.alias.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\taliasLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a file name\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getFilePath()) == true) {\r\n         * \t\t\tString filePathLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tfilePathLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        return errorMessages;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable originalVariable, Variable revisedVariable) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String ownerVariableName = originalVariable.getDisplayName();\r\n        //detect changes in name\r\n        String oldName = originalVariable.getName();\r\n        String newName = revisedVariable.getName();\r\n        if (oldName.equals(newName) == false) {\r\n            oldName = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newName = ValidationUtility.convertEmptyValueToBlank(newName);\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, nameLabelText, oldName, newName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //=Changed variable {0}, field {1}, from {2} to {3}\r\n        //detect changes in label\r\n        String oldLabel = originalVariable.getLabel();\r\n        String newLabel = revisedVariable.getLabel();\r\n        if (oldLabel.equals(newLabel) == false) {\r\n            oldLabel = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newLabel = ValidationUtility.convertEmptyValueToBlank(newLabel);\r\n            String labelLabelText = MacawMessages.getMessage(\"variable.label.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, labelLabelText, oldLabel, newLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in year\r\n        String oldYear = originalVariable.getYear();\r\n        String newYear = revisedVariable.getYear();\r\n        if (oldYear.equals(newYear) == false) {\r\n            oldYear = ValidationUtility.convertEmptyValueToBlank(oldYear);\r\n            newYear = ValidationUtility.convertEmptyValueToBlank(newYear);\r\n            String yearLabelText = MacawMessages.getMessage(\"variable.year.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, yearLabelText, oldYear, newYear);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in category\r\n        String originalCategory = originalVariable.getCategory();\r\n        String revisedCategory = revisedVariable.getCategory();\r\n        if (originalCategory.equals(revisedCategory) == false) {\r\n            originalCategory = ValidationUtility.convertEmptyValueToBlank(originalCategory);\r\n            revisedCategory = ValidationUtility.convertEmptyValueToBlank(revisedCategory);\r\n            String categoryLabelText = MacawMessages.getMessage(\"variable.category.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, categoryLabelText, originalCategory, revisedCategory);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCleaned = originalVariable.isCleaned();\r\n        boolean revisedIsCleaned = revisedVariable.isCleaned();\r\n        if ((originalIsCleaned != revisedIsCleaned) && (revisedIsCleaned == false)) {\r\n            String changedToNotCleaned = MacawMessages.getMessage(\"variable.isCleaned.saveChanges.changedToNotClean\", ownerVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changedToNotCleaned, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String oldCleaningChoice = originalVariable.getCleaningStatus();\r\n            String revisedCleaningChoice = revisedVariable.getCleaningStatus();\r\n            if (oldCleaningChoice.equals(revisedCleaningChoice) == false) {\r\n                oldCleaningChoice = ValidationUtility.convertEmptyValueToBlank(oldCleaningChoice);\r\n                revisedCleaningChoice = ValidationUtility.convertEmptyValueToBlank(revisedCleaningChoice);\r\n                String cleaningStatusText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningStatusText, oldCleaningChoice, revisedCleaningChoice);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n            String oldCleaningDescription = originalVariable.getCleaningDescription();\r\n            String revisedCleaningDescription = originalVariable.getCleaningDescription();\r\n            if (oldCleaningDescription.equals(revisedCleaningDescription) == false) {\r\n                oldCleaningDescription = ValidationUtility.convertEmptyValueToBlank(oldCleaningDescription);\r\n                revisedCleaningDescription = ValidationUtility.convertEmptyValueToBlank(revisedCleaningDescription);\r\n                String cleaningDescriptionText = MacawMessages.getMessage(\"variable.cleaningDescription.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningDescriptionText, oldCleaningDescription, revisedCleaningDescription);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        //detect changes in code book number\r\n        String originalCodeBookNumber = originalVariable.getCodeBookNumber();\r\n        String revisedCodeBookNumber = revisedVariable.getCodeBookNumber();\r\n        if (originalCodeBookNumber.equals(revisedCodeBookNumber) == false) {\r\n            originalCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(originalCodeBookNumber);\r\n            revisedCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(revisedCodeBookNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.codeBookNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalCodeBookNumber, revisedCodeBookNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column start\r\n        String columnStartLabelText = MacawMessages.getMessage(\"variable.columnStart.label\");\r\n        String originalColumnStart = originalVariable.getColumnStart();\r\n        if (originalColumnStart == null) {\r\n            originalColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnStart = revisedVariable.getColumnStart();\r\n        if (revisedColumnStart == null) {\r\n            revisedColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnStart.equals(revisedColumnStart) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnStartLabelText, originalColumnStart, revisedColumnStart);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column end\r\n        String columnEndLabelText = MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n        String originalColumnEnd = originalVariable.getColumnEnd();\r\n        if (originalColumnEnd.equals(\"\") == true) {\r\n            originalColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnEnd = revisedVariable.getColumnEnd();\r\n        if (revisedColumnEnd.equals(\"\") == true) {\r\n            revisedColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnEnd.equals(revisedColumnEnd) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnEndLabelText, originalColumnEnd, revisedColumnEnd);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check alias\r\n        String oldAlias = originalVariable.getAlias();\r\n        String newAlias = revisedVariable.getAlias();\r\n        if (oldAlias.equals(newAlias) == false) {\r\n            oldAlias = ValidationUtility.convertEmptyValueToBlank(oldAlias);\r\n            newAlias = ValidationUtility.convertEmptyValueToBlank(newAlias);\r\n            String aliasText = MacawMessages.getMessage(\"variable.alias.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, aliasText, oldAlias, newAlias);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check file name\r\n        /**\r\n         * \t\tString oldFilePath = originalVariable.getFilePath();\r\n         * \t\tString newFilePath = revisedVariable.getFilePath();\r\n         * \t\tif (oldFilePath.equals(newFilePath) == false) {\r\n         * \t\t\toldFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(oldFilePath);\r\n         * \t\t\tnewFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(newFilePath);\r\n         *\r\n         * \t\t\tString filePathText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString fieldChangedMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n         * \t\t\t\t\t\t\t\t\t\t   ownerVariableName,\r\n         * \t\t\t\t\t\t\t\t\t\t   filePathText,\r\n         * \t\t\t\t\t\t\t\t\t\t   oldFilePath,\r\n         * \t\t\t\t\t\t\t\t\t\t   newFilePath);\r\n         * \t\t\tMacawChangeEvent changeEvent\r\n         * \t\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n         * \t\t\t\t\t\t\t\t\t   fieldChangedMessage,\r\n         * \t\t\t\t\t\t\t\t\t   userID);\r\n         * \t\t\tchangeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        String oldAvailability = originalVariable.getAvailability();\r\n        String revisedAvailability = revisedVariable.getAvailability();\r\n        if (oldAvailability.equals(revisedAvailability) == false) {\r\n            oldAvailability = ValidationUtility.convertEmptyValueToBlank(oldAvailability);\r\n            revisedAvailability = ValidationUtility.convertEmptyValueToBlank(revisedAvailability);\r\n            String availabilityText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, availabilityText, oldAvailability, revisedAvailability);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCoded = originalVariable.isCoded();\r\n        boolean revisedIsCoded = revisedVariable.isCoded();\r\n        if (originalIsCoded != revisedIsCoded) {\r\n            String oldIsCodedValue = Boolean.toString(originalIsCoded);\r\n            String revisedIsCodedValue = Boolean.toString(revisedIsCoded);\r\n            String isCodedLabel = MacawMessages.getMessage(\"variable.isCoded.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, isCodedLabel, oldIsCodedValue, revisedIsCodedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalForm = originalVariable.getForm();\r\n        String revisedForm = revisedVariable.getForm();\r\n        if (originalForm.equals(revisedForm) == false) {\r\n            originalForm = ValidationUtility.convertEmptyValueToBlank(originalForm);\r\n            revisedForm = ValidationUtility.convertEmptyValueToBlank(revisedForm);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.form.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalForm, revisedForm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalQuestionNumber = originalVariable.getQuestionNumber();\r\n        String revisedQuestionNumber = revisedVariable.getQuestionNumber();\r\n        if (originalQuestionNumber.equals(revisedQuestionNumber) == false) {\r\n            originalQuestionNumber = ValidationUtility.convertEmptyValueToBlank(originalQuestionNumber);\r\n            revisedQuestionNumber = ValidationUtility.convertEmptyValueToBlank(revisedQuestionNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.questionNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalQuestionNumber, revisedQuestionNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalNotes = originalVariable.getNotes();\r\n        String revisedNotes = revisedVariable.getNotes();\r\n        if (originalNotes.equals(revisedNotes) == false) {\r\n            originalNotes = ValidationUtility.convertEmptyValueToBlank(originalNotes);\r\n            revisedNotes = ValidationUtility.convertEmptyValueToBlank(revisedNotes);\r\n            String notesLabelText = MacawMessages.getMessage(\"variable.notes.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, notesLabelText, originalNotes, revisedNotes);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        /**\r\n         * \t\tMacawChangeEvent changeEvent\r\n         * \t\t\t= detectChangesInAlternativeVariable(user,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t originalVariable,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t revisedVariable);\r\n         * \t\tif (changeEvent != null) {\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        return changeEvents;\r\n    }\r\n\r\n    static public MacawChangeEvent detectChangesInAlternativeVariable(User user, Variable originalVariable, Variable revisedAlternativeVariable) {\r\n        Variable oldAlternativeVariable = originalVariable.getAlternativeVariable();\r\n        boolean alternativeVariableChanged = false;\r\n        if ((oldAlternativeVariable == null) && (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = false;\r\n        } else if ((oldAlternativeVariable == null) || (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = true;\r\n        } else {\r\n            //both are non-null\r\n            if (oldAlternativeVariable.getIdentifier() == revisedAlternativeVariable.getIdentifier()) {\r\n                alternativeVariableChanged = true;\r\n            } else {\r\n                alternativeVariableChanged = false;\r\n            }\r\n        }\r\n        if (alternativeVariableChanged == true) {\r\n            String blankFieldValue = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n            String fieldName = MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n            String oldAlternativeVariableName = blankFieldValue;\r\n            if (oldAlternativeVariable != null) {\r\n                oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n            }\r\n            String revisedAlternativeVariableName = blankFieldValue;\r\n            if (revisedAlternativeVariable != null) {\r\n                revisedAlternativeVariableName = revisedAlternativeVariable.getDisplayName();\r\n            }\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", fieldName, oldAlternativeVariableName, revisedAlternativeVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            int targetVariableID = originalVariable.getIdentifier();\r\n            changeEvent.setVariableOwnerID(targetVariableID);\r\n            changeEvent.setChangedObjectIdentifier(targetVariableID);\r\n            return changeEvent;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return getName();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Clonable\r\n    abstract public Object clone();\r\n\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    protected void cloneAttributes(Variable cloneVariable) {\r\n        cloneVariable.setIdentifier(identifier);\r\n        cloneVariable.setCategory(category);\r\n        cloneVariable.setName(name);\r\n        cloneVariable.setLabel(label);\r\n        cloneVariable.setForm(form);\r\n        cloneVariable.setQuestionNumber(questionNumber);\r\n        cloneVariable.setYear(year);\r\n        cloneVariable.setCleaned(isCleaned);\r\n        cloneVariable.setCoded(isCoded);\r\n        cloneVariable.setCleaningStatus(cleaningStatus);\r\n        cloneVariable.setCleaningDescription(cleaningDescription);\r\n        cloneVariable.setCodeBookNumber(codeBookNumber);\r\n        cloneVariable.setColumnStart(columnStart);\r\n        cloneVariable.setColumnEnd(columnEnd);\r\n        cloneVariable.setAvailability(availability);\r\n        for (ValueLabel valueLabel : valueLabels) {\r\n            ValueLabel clonedValueLabel = (ValueLabel) valueLabel.clone();\r\n            cloneVariable.addValueLabel(clonedValueLabel);\r\n        }\r\n        cloneVariable.setAlias(alias);\r\n        cloneVariable.setFilePath(filePath);\r\n        cloneVariable.setIsNewRecord(isNewRecord);\r\n        //make copies of references to supporting documents\r\n        ArrayList<SupportingDocument> cloneSupportingDocuments = new ArrayList<SupportingDocument>();\r\n        for (SupportingDocument supportingDocument : supportingDocuments) {\r\n            cloneSupportingDocuments.add((SupportingDocument) supportingDocument.clone());\r\n        }\r\n        cloneVariable.setSupportingDocuments(cloneSupportingDocuments);\r\n        ArrayList<OntologyTerm> cloneOntologyTerms = new ArrayList<OntologyTerm>();\r\n        for (OntologyTerm ontologyTerm : ontologyTerms) {\r\n            cloneOntologyTerms.add((OntologyTerm) ontologyTerm.clone());\r\n        }\r\n        cloneVariable.setOntologyTerms(cloneOntologyTerms);\r\n        //we don't need\r\n        if (alternativeVariable != null) {\r\n            Variable cloneAlternativeVariable = (Variable) alternativeVariable.clone();\r\n            cloneVariable.setAlternativeVariable(cloneAlternativeVariable);\r\n        }\r\n        cloneVariable.setNotes(notes);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/VariableTest4.java",
		"test_prompt": "// VariableTest4.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Variable}.\n* It contains ten unit test cases for the {@link Variable#isCoded()} method.\n*/\nclass VariableTest4 {"
	},
	{
		"original_code": "// Variable.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A concept related to the NSHD study.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\nabstract public class Variable implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String category;\r\n\r\n    private String name;\r\n\r\n    private String label;\r\n\r\n    private boolean isCleaned;\r\n\r\n    private String year;\r\n\r\n    private String cleaningStatus;\r\n\r\n    private String cleaningDescription;\r\n\r\n    private ArrayList<ValueLabel> valueLabels;\r\n\r\n    private String availability;\r\n\r\n    private String alias;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isCoded;\r\n\r\n    protected String form;\r\n\r\n    protected String questionNumber;\r\n\r\n    protected String codeBookNumber;\r\n\r\n    protected String columnStart;\r\n\r\n    protected String columnEnd;\r\n\r\n    protected String notes;\r\n\r\n    private ArrayList<SupportingDocument> supportingDocuments;\r\n\r\n    private ArrayList<OntologyTerm> ontologyTerms;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    private Variable alternativeVariable;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public Variable() {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        identifier = 0;\r\n        category = unknownMessage;\r\n        name = \"\";\r\n        year = \"\";\r\n        label = \"\";\r\n        isCleaned = false;\r\n        cleaningStatus = unknownMessage;\r\n        cleaningDescription = \"\";\r\n        valueLabels = new ArrayList<ValueLabel>();\r\n        availability = unknownMessage;\r\n        alias = \"\";\r\n        filePath = \"\";\r\n        supportingDocuments = new ArrayList<SupportingDocument>();\r\n        ontologyTerms = new ArrayList<OntologyTerm>();\r\n        isCoded = false;\r\n        isNewRecord = false;\r\n        codeBookNumber = \"\";\r\n        columnStart = \"\";\r\n        columnEnd = \"\";\r\n        form = \"\";\r\n        questionNumber = \"\";\r\n        notes = \"\";\r\n        alternativeVariable = null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produces a variable summary suitable for showing in a collection\r\n     * of search results.\r\n     */\r\n    public VariableSummary createVariableSummary() {\r\n        VariableSummary variableSummary = new VariableSummary();\r\n        variableSummary.setIdentifier(identifier);\r\n        variableSummary.setName(name);\r\n        variableSummary.setLabel(label);\r\n        variableSummary.setYear(year);\r\n        return variableSummary;\r\n    }\r\n\r\n    /**\r\n     * an integer which uniquely identifies an instance in the database.\r\n     * All primary key values in the database use a single auto-incremented\r\n     * auto-generated value.\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * variable name, as specified using the NSHD variable naming convention\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * a one-line description of the variable\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * sweep in which the variable was collected\r\n     * @return the year\r\n     */\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    /**\r\n     * @param year the year to set\r\n     */\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    /**\r\n     * @return the category\r\n     */\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    /**\r\n     * @param category the category to set\r\n     */\r\n    public void setCategory(String category) {\r\n        this.category = category;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been cleaned in some way\r\n     * @return the isCleaned\r\n     */\r\n    public boolean isCleaned() {\r\n        return isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @param isCleaned the isCleaned to set\r\n     */\r\n    public void setCleaned(boolean isCleaned) {\r\n        this.isCleaned = isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @return the cleaningStatus\r\n     */\r\n    public String getCleaningStatus() {\r\n        return cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningStatus the cleaningStatus to set\r\n     */\r\n    public void setCleaningStatus(String cleaningStatus) {\r\n        this.cleaningStatus = cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * free text description of how the variable data were cleaned.\r\n     * @return the cleaningDescription\r\n     */\r\n    public String getCleaningDescription() {\r\n        return cleaningDescription;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningDescription the cleaningDescription to set\r\n     */\r\n    public void setCleaningDescription(String cleaningDescription) {\r\n        this.cleaningDescription = cleaningDescription;\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels() {\r\n        return valueLabels;\r\n    }\r\n\r\n    public void setValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        this.valueLabels = valueLabels;\r\n    }\r\n\r\n    public void addValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.add(valueLabel);\r\n    }\r\n\r\n    public void removeValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.remove(valueLabel);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments() {\r\n        return supportingDocuments;\r\n    }\r\n\r\n    public boolean containsSupportingDocument(SupportingDocument targetSupportingDocument) {\r\n        int targetIdentifier = targetSupportingDocument.getIdentifier();\r\n        for (SupportingDocument currentSupportingDocument : supportingDocuments) {\r\n            int currentIdentifier = currentSupportingDocument.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setSupportingDocuments(ArrayList<SupportingDocument> supportingDocuments) {\r\n        this.supportingDocuments = supportingDocuments;\r\n    }\r\n\r\n    public void addSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToAdd) {\r\n        supportingDocuments.addAll(supportingDocumentsToAdd);\r\n    }\r\n\r\n    public void addSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.add(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.remove(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        for (SupportingDocument targetVariable : supportingDocumentsToDelete) {\r\n            supportingDocuments.remove(targetVariable);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms() {\r\n        return ontologyTerms;\r\n    }\r\n\r\n    public boolean containsOntologyTerm(OntologyTerm targetOntologyTerm) {\r\n        int targetIdentifier = targetOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            int currentIdentifier = currentOntologyTerm.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setOntologyTerms(ArrayList<OntologyTerm> ontologyTerms) {\r\n        this.ontologyTerms = ontologyTerms;\r\n    }\r\n\r\n    public void addOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToAdd) {\r\n        ontologyTerms.addAll(ontologyTermsToAdd);\r\n    }\r\n\r\n    public void addOntologyTerm(OntologyTerm ontologyTerm) {\r\n        ontologyTerms.add(ontologyTerm);\r\n    }\r\n\r\n    public void removeOntologyTerm(OntologyTerm copyOfOntologyTermToDelete) {\r\n        OntologyTerm itemToDelete = findOntologyTerm(copyOfOntologyTermToDelete);\r\n        if (itemToDelete != null) {\r\n            ontologyTerms.remove(itemToDelete);\r\n        }\r\n    }\r\n\r\n    public void removeOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToDelete) {\r\n        for (OntologyTerm targetOntologyTerm : ontologyTermsToDelete) {\r\n            removeOntologyTerm(targetOntologyTerm);\r\n        }\r\n    }\r\n\r\n    public void updateOntologyTerm(OntologyTerm revisedOntologyTerm) {\r\n        OntologyTerm itemToUpdate = findOntologyTerm(revisedOntologyTerm);\r\n        if (itemToUpdate != null) {\r\n            int numberOfTerms = ontologyTerms.size();\r\n            int index = ontologyTerms.indexOf(itemToUpdate);\r\n            ontologyTerms.remove(itemToUpdate);\r\n            if (index == numberOfTerms - 1) {\r\n                //item to update was at the end\r\n                ontologyTerms.add(revisedOntologyTerm);\r\n            } else {\r\n                ontologyTerms.add(index, revisedOntologyTerm);\r\n            }\r\n        }\r\n    }\r\n\r\n    private OntologyTerm findOntologyTerm(OntologyTerm copyofOntologyTerm) {\r\n        int targetIdentifier = copyofOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            if (currentOntologyTerm.getIdentifier() == targetIdentifier) {\r\n                //found the item to delete\r\n                return currentOntologyTerm;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @return the availability\r\n     */\r\n    public String getAvailability() {\r\n        return availability;\r\n    }\r\n\r\n    /**\r\n     * @param availability the availability to set\r\n     */\r\n    public void setAvailability(String availability) {\r\n        this.availability = availability;\r\n    }\r\n\r\n    /**\r\n     * @return the codeBookNumber\r\n     */\r\n    public String getCodeBookNumber() {\r\n        return codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * reference to the physical code book entry\r\n     * @param codeBookNumber the codeBookNumber to set\r\n     */\r\n    public void setCodeBookNumber(String codeBookNumber) {\r\n        this.codeBookNumber = codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * starting column in library file for this variable\r\n     * @return the columnStart\r\n     */\r\n    public String getColumnStart() {\r\n        return columnStart;\r\n    }\r\n\r\n    /**\r\n     * @param columnStart the columnStart to set\r\n     */\r\n    public void setColumnStart(String columnStart) {\r\n        this.columnStart = columnStart;\r\n    }\r\n\r\n    /**\r\n     * ending column in library file for this variable\r\n     * @return the columnEnd\r\n     */\r\n    public String getColumnEnd() {\r\n        return columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @param columnEnd the columnEnd to set\r\n     */\r\n    public void setColumnEnd(String columnEnd) {\r\n        this.columnEnd = columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @return the alias\r\n     */\r\n    public String getAlias() {\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * @param alias the alias to set\r\n     */\r\n    public void setAlias(String alias) {\r\n        this.alias = alias;\r\n    }\r\n\r\n    /**\r\n     * @return the file Name\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the dataLibraryFileName to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been coded electronically (or not)\r\n     * @return the isCoded\r\n     */\r\n    public boolean isCoded() {\r\n        return isCoded;\r\n    }\r\n\r\n    /**\r\n     * @param isCoded the isCoded to set\r\n     */\r\n    public void setCoded(boolean isCoded) {\r\n        this.isCoded = isCoded;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    public void setIsNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * questionnaire form containing the question whose response is stored in the variable\r\n     * @return the form\r\n     */\r\n    public String getForm() {\r\n        return form;\r\n    }\r\n\r\n    /**\r\n     * @param form the form to set\r\n     */\r\n    public void setForm(String form) {\r\n        this.form = form;\r\n    }\r\n\r\n    /**\r\n     * question number from the questionnaire for this variable\r\n     * @return the questionNumber\r\n     */\r\n    public String getQuestionNumber() {\r\n        return questionNumber;\r\n    }\r\n\r\n    /**\r\n     * @param questionNumber the questionNumber to set\r\n     */\r\n    public void setQuestionNumber(String questionNumber) {\r\n        this.questionNumber = questionNumber;\r\n    }\r\n\r\n    public String getNotes() {\r\n        return notes;\r\n    }\r\n\r\n    public void setNotes(String notes) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public Variable getAlternativeVariable() {\r\n        return alternativeVariable;\r\n    }\r\n\r\n    public void setAlternativeVariable(Variable alterativeVariable) {\r\n        this.alternativeVariable = alterativeVariable;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static protected ArrayList<String> validateFields(Variable variable) {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //specify a name\r\n        if (ValidationUtility.isBlank(variable.getName()) == true) {\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", nameLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //specify a label\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getLabel()) == true) {\r\n         * \t\t\tString labelLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.label.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tlabelLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a category\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t\r\n\t\tif (ValidationUtility.isUnknown(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        //specify an availability\r\n        if (ValidationUtility.isBlank(variable.getAvailability()) == true) {\r\n            String availabilityLabelText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", availabilityLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /**\r\n         * \t\tif (ValidationUtility.isUnknown(variable.getAvailability()) == true) {\r\n         * \t\t\tString availabilityLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.availability.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tavailabilityLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify cleaning status\r\n        if (variable.isCleaned() == true) {\r\n            if (ValidationUtility.isBlank(variable.getCleaningStatus()) == true) {\r\n                String cleaningStatusLabelText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", cleaningStatusLabelText);\r\n                errorMessages.add(errorMessage);\r\n            }\r\n            /**\r\n             * \t\t\tif (ValidationUtility.isUnknown(variable.getCleaningStatus()) == true) {\r\n             * \t\t\t\tString cleaningStatusLabelText\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n             * \t\t\t\tString errorMessage\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n             * \t\t\t\t\t\t\t\t\t\t\t\tcleaningStatusLabelText);\r\n             * \t\t\t\terrorMessages.add(errorMessage);\r\n             * \t\t\t}\r\n             */\r\n        }\r\n        //specify a year\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getYear()) == true) {\r\n         * \t\t\tString yearLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.year.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tyearLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         * \t\telse {\r\n         * \t\t\t//make sure year is numeric\r\n         * \t\t\tString yearValue = variable.getYear();\r\n         *\r\n         * \t\t\ttry {\r\n         * \t\t\t\tDate currentDate = new Date();\r\n         * \t\t\t\tGregorianCalendar gregorianCalendar = new GregorianCalendar();\r\n         * \t\t\t\tgregorianCalendar.setTime(currentDate);\r\n         * \t\t\t\tint currentYearNumber = gregorianCalendar.get(Calendar.YEAR);\r\n         *\r\n         * \t\t\t\tint calendarYear = new Integer(yearValue).intValue();\r\n         * \t\t\t\tif (calendarYear < 1946) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooOld\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t\telse if (calendarYear > currentYearNumber) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooNew\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t}\r\n         * \t\t\tcatch(NumberFormatException exception) {\r\n         * \t\t\t\tString illegalNumberFormatException\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.illegalYear\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\terrorMessages.add(illegalNumberFormatException);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        /**\r\n         * \t\tString columnStart = variable.getColumnStart();\r\n         * \t\tif (ValidationUtility.isBlank(columnStart) == false) {\r\n         * \t\t\t//check that column start is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnStart);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnStartLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnStart.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStart,\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStartLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         *\r\n         * \t\tString columnEnd = variable.getColumnEnd();\r\n         * \t\tif (ValidationUtility.isBlank(columnEnd) == false) {\r\n         * \t\t\t//check that column end is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnEnd);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnEndLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEnd,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEndLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        //specify an alias\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getAlias()) == true) {\r\n         * \t\t\tString aliasLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.alias.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\taliasLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a file name\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getFilePath()) == true) {\r\n         * \t\t\tString filePathLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tfilePathLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        return errorMessages;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable originalVariable, Variable revisedVariable) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String ownerVariableName = originalVariable.getDisplayName();\r\n        //detect changes in name\r\n        String oldName = originalVariable.getName();\r\n        String newName = revisedVariable.getName();\r\n        if (oldName.equals(newName) == false) {\r\n            oldName = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newName = ValidationUtility.convertEmptyValueToBlank(newName);\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, nameLabelText, oldName, newName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //=Changed variable {0}, field {1}, from {2} to {3}\r\n        //detect changes in label\r\n        String oldLabel = originalVariable.getLabel();\r\n        String newLabel = revisedVariable.getLabel();\r\n        if (oldLabel.equals(newLabel) == false) {\r\n            oldLabel = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newLabel = ValidationUtility.convertEmptyValueToBlank(newLabel);\r\n            String labelLabelText = MacawMessages.getMessage(\"variable.label.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, labelLabelText, oldLabel, newLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in year\r\n        String oldYear = originalVariable.getYear();\r\n        String newYear = revisedVariable.getYear();\r\n        if (oldYear.equals(newYear) == false) {\r\n            oldYear = ValidationUtility.convertEmptyValueToBlank(oldYear);\r\n            newYear = ValidationUtility.convertEmptyValueToBlank(newYear);\r\n            String yearLabelText = MacawMessages.getMessage(\"variable.year.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, yearLabelText, oldYear, newYear);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in category\r\n        String originalCategory = originalVariable.getCategory();\r\n        String revisedCategory = revisedVariable.getCategory();\r\n        if (originalCategory.equals(revisedCategory) == false) {\r\n            originalCategory = ValidationUtility.convertEmptyValueToBlank(originalCategory);\r\n            revisedCategory = ValidationUtility.convertEmptyValueToBlank(revisedCategory);\r\n            String categoryLabelText = MacawMessages.getMessage(\"variable.category.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, categoryLabelText, originalCategory, revisedCategory);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCleaned = originalVariable.isCleaned();\r\n        boolean revisedIsCleaned = revisedVariable.isCleaned();\r\n        if ((originalIsCleaned != revisedIsCleaned) && (revisedIsCleaned == false)) {\r\n            String changedToNotCleaned = MacawMessages.getMessage(\"variable.isCleaned.saveChanges.changedToNotClean\", ownerVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changedToNotCleaned, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String oldCleaningChoice = originalVariable.getCleaningStatus();\r\n            String revisedCleaningChoice = revisedVariable.getCleaningStatus();\r\n            if (oldCleaningChoice.equals(revisedCleaningChoice) == false) {\r\n                oldCleaningChoice = ValidationUtility.convertEmptyValueToBlank(oldCleaningChoice);\r\n                revisedCleaningChoice = ValidationUtility.convertEmptyValueToBlank(revisedCleaningChoice);\r\n                String cleaningStatusText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningStatusText, oldCleaningChoice, revisedCleaningChoice);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n            String oldCleaningDescription = originalVariable.getCleaningDescription();\r\n            String revisedCleaningDescription = originalVariable.getCleaningDescription();\r\n            if (oldCleaningDescription.equals(revisedCleaningDescription) == false) {\r\n                oldCleaningDescription = ValidationUtility.convertEmptyValueToBlank(oldCleaningDescription);\r\n                revisedCleaningDescription = ValidationUtility.convertEmptyValueToBlank(revisedCleaningDescription);\r\n                String cleaningDescriptionText = MacawMessages.getMessage(\"variable.cleaningDescription.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningDescriptionText, oldCleaningDescription, revisedCleaningDescription);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        //detect changes in code book number\r\n        String originalCodeBookNumber = originalVariable.getCodeBookNumber();\r\n        String revisedCodeBookNumber = revisedVariable.getCodeBookNumber();\r\n        if (originalCodeBookNumber.equals(revisedCodeBookNumber) == false) {\r\n            originalCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(originalCodeBookNumber);\r\n            revisedCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(revisedCodeBookNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.codeBookNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalCodeBookNumber, revisedCodeBookNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column start\r\n        String columnStartLabelText = MacawMessages.getMessage(\"variable.columnStart.label\");\r\n        String originalColumnStart = originalVariable.getColumnStart();\r\n        if (originalColumnStart == null) {\r\n            originalColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnStart = revisedVariable.getColumnStart();\r\n        if (revisedColumnStart == null) {\r\n            revisedColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnStart.equals(revisedColumnStart) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnStartLabelText, originalColumnStart, revisedColumnStart);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column end\r\n        String columnEndLabelText = MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n        String originalColumnEnd = originalVariable.getColumnEnd();\r\n        if (originalColumnEnd.equals(\"\") == true) {\r\n            originalColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnEnd = revisedVariable.getColumnEnd();\r\n        if (revisedColumnEnd.equals(\"\") == true) {\r\n            revisedColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnEnd.equals(revisedColumnEnd) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnEndLabelText, originalColumnEnd, revisedColumnEnd);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check alias\r\n        String oldAlias = originalVariable.getAlias();\r\n        String newAlias = revisedVariable.getAlias();\r\n        if (oldAlias.equals(newAlias) == false) {\r\n            oldAlias = ValidationUtility.convertEmptyValueToBlank(oldAlias);\r\n            newAlias = ValidationUtility.convertEmptyValueToBlank(newAlias);\r\n            String aliasText = MacawMessages.getMessage(\"variable.alias.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, aliasText, oldAlias, newAlias);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check file name\r\n        /**\r\n         * \t\tString oldFilePath = originalVariable.getFilePath();\r\n         * \t\tString newFilePath = revisedVariable.getFilePath();\r\n         * \t\tif (oldFilePath.equals(newFilePath) == false) {\r\n         * \t\t\toldFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(oldFilePath);\r\n         * \t\t\tnewFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(newFilePath);\r\n         *\r\n         * \t\t\tString filePathText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString fieldChangedMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n         * \t\t\t\t\t\t\t\t\t\t   ownerVariableName,\r\n         * \t\t\t\t\t\t\t\t\t\t   filePathText,\r\n         * \t\t\t\t\t\t\t\t\t\t   oldFilePath,\r\n         * \t\t\t\t\t\t\t\t\t\t   newFilePath);\r\n         * \t\t\tMacawChangeEvent changeEvent\r\n         * \t\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n         * \t\t\t\t\t\t\t\t\t   fieldChangedMessage,\r\n         * \t\t\t\t\t\t\t\t\t   userID);\r\n         * \t\t\tchangeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        String oldAvailability = originalVariable.getAvailability();\r\n        String revisedAvailability = revisedVariable.getAvailability();\r\n        if (oldAvailability.equals(revisedAvailability) == false) {\r\n            oldAvailability = ValidationUtility.convertEmptyValueToBlank(oldAvailability);\r\n            revisedAvailability = ValidationUtility.convertEmptyValueToBlank(revisedAvailability);\r\n            String availabilityText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, availabilityText, oldAvailability, revisedAvailability);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCoded = originalVariable.isCoded();\r\n        boolean revisedIsCoded = revisedVariable.isCoded();\r\n        if (originalIsCoded != revisedIsCoded) {\r\n            String oldIsCodedValue = Boolean.toString(originalIsCoded);\r\n            String revisedIsCodedValue = Boolean.toString(revisedIsCoded);\r\n            String isCodedLabel = MacawMessages.getMessage(\"variable.isCoded.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, isCodedLabel, oldIsCodedValue, revisedIsCodedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalForm = originalVariable.getForm();\r\n        String revisedForm = revisedVariable.getForm();\r\n        if (originalForm.equals(revisedForm) == false) {\r\n            originalForm = ValidationUtility.convertEmptyValueToBlank(originalForm);\r\n            revisedForm = ValidationUtility.convertEmptyValueToBlank(revisedForm);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.form.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalForm, revisedForm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalQuestionNumber = originalVariable.getQuestionNumber();\r\n        String revisedQuestionNumber = revisedVariable.getQuestionNumber();\r\n        if (originalQuestionNumber.equals(revisedQuestionNumber) == false) {\r\n            originalQuestionNumber = ValidationUtility.convertEmptyValueToBlank(originalQuestionNumber);\r\n            revisedQuestionNumber = ValidationUtility.convertEmptyValueToBlank(revisedQuestionNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.questionNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalQuestionNumber, revisedQuestionNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalNotes = originalVariable.getNotes();\r\n        String revisedNotes = revisedVariable.getNotes();\r\n        if (originalNotes.equals(revisedNotes) == false) {\r\n            originalNotes = ValidationUtility.convertEmptyValueToBlank(originalNotes);\r\n            revisedNotes = ValidationUtility.convertEmptyValueToBlank(revisedNotes);\r\n            String notesLabelText = MacawMessages.getMessage(\"variable.notes.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, notesLabelText, originalNotes, revisedNotes);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        /**\r\n         * \t\tMacawChangeEvent changeEvent\r\n         * \t\t\t= detectChangesInAlternativeVariable(user,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t originalVariable,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t revisedVariable);\r\n         * \t\tif (changeEvent != null) {\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        return changeEvents;\r\n    }\r\n\r\n    static public MacawChangeEvent detectChangesInAlternativeVariable(User user, Variable originalVariable, Variable revisedAlternativeVariable) {\r\n        Variable oldAlternativeVariable = originalVariable.getAlternativeVariable();\r\n        boolean alternativeVariableChanged = false;\r\n        if ((oldAlternativeVariable == null) && (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = false;\r\n        } else if ((oldAlternativeVariable == null) || (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = true;\r\n        } else {\r\n            //both are non-null\r\n            if (oldAlternativeVariable.getIdentifier() == revisedAlternativeVariable.getIdentifier()) {\r\n                alternativeVariableChanged = true;\r\n            } else {\r\n                alternativeVariableChanged = false;\r\n            }\r\n        }\r\n        if (alternativeVariableChanged == true) {\r\n            String blankFieldValue = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n            String fieldName = MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n            String oldAlternativeVariableName = blankFieldValue;\r\n            if (oldAlternativeVariable != null) {\r\n                oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n            }\r\n            String revisedAlternativeVariableName = blankFieldValue;\r\n            if (revisedAlternativeVariable != null) {\r\n                revisedAlternativeVariableName = revisedAlternativeVariable.getDisplayName();\r\n            }\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", fieldName, oldAlternativeVariableName, revisedAlternativeVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            int targetVariableID = originalVariable.getIdentifier();\r\n            changeEvent.setVariableOwnerID(targetVariableID);\r\n            changeEvent.setChangedObjectIdentifier(targetVariableID);\r\n            return changeEvent;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return getName();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Clonable\r\n    abstract public Object clone();\r\n\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    protected void cloneAttributes(Variable cloneVariable) {\r\n        cloneVariable.setIdentifier(identifier);\r\n        cloneVariable.setCategory(category);\r\n        cloneVariable.setName(name);\r\n        cloneVariable.setLabel(label);\r\n        cloneVariable.setForm(form);\r\n        cloneVariable.setQuestionNumber(questionNumber);\r\n        cloneVariable.setYear(year);\r\n        cloneVariable.setCleaned(isCleaned);\r\n        cloneVariable.setCoded(isCoded);\r\n        cloneVariable.setCleaningStatus(cleaningStatus);\r\n        cloneVariable.setCleaningDescription(cleaningDescription);\r\n        cloneVariable.setCodeBookNumber(codeBookNumber);\r\n        cloneVariable.setColumnStart(columnStart);\r\n        cloneVariable.setColumnEnd(columnEnd);\r\n        cloneVariable.setAvailability(availability);\r\n        for (ValueLabel valueLabel : valueLabels) {\r\n            ValueLabel clonedValueLabel = (ValueLabel) valueLabel.clone();\r\n            cloneVariable.addValueLabel(clonedValueLabel);\r\n        }\r\n        cloneVariable.setAlias(alias);\r\n        cloneVariable.setFilePath(filePath);\r\n        cloneVariable.setIsNewRecord(isNewRecord);\r\n        //make copies of references to supporting documents\r\n        ArrayList<SupportingDocument> cloneSupportingDocuments = new ArrayList<SupportingDocument>();\r\n        for (SupportingDocument supportingDocument : supportingDocuments) {\r\n            cloneSupportingDocuments.add((SupportingDocument) supportingDocument.clone());\r\n        }\r\n        cloneVariable.setSupportingDocuments(cloneSupportingDocuments);\r\n        ArrayList<OntologyTerm> cloneOntologyTerms = new ArrayList<OntologyTerm>();\r\n        for (OntologyTerm ontologyTerm : ontologyTerms) {\r\n            cloneOntologyTerms.add((OntologyTerm) ontologyTerm.clone());\r\n        }\r\n        cloneVariable.setOntologyTerms(cloneOntologyTerms);\r\n        //we don't need\r\n        if (alternativeVariable != null) {\r\n            Variable cloneAlternativeVariable = (Variable) alternativeVariable.clone();\r\n            cloneVariable.setAlternativeVariable(cloneAlternativeVariable);\r\n        }\r\n        cloneVariable.setNotes(notes);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/VariableTest5.java",
		"test_prompt": "// VariableTest5.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Variable}.\n* It contains ten unit test cases for the {@link Variable#isNewRecord()} method.\n*/\nclass VariableTest5 {"
	},
	{
		"original_code": "// Variable.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A concept related to the NSHD study.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\nabstract public class Variable implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String category;\r\n\r\n    private String name;\r\n\r\n    private String label;\r\n\r\n    private boolean isCleaned;\r\n\r\n    private String year;\r\n\r\n    private String cleaningStatus;\r\n\r\n    private String cleaningDescription;\r\n\r\n    private ArrayList<ValueLabel> valueLabels;\r\n\r\n    private String availability;\r\n\r\n    private String alias;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isCoded;\r\n\r\n    protected String form;\r\n\r\n    protected String questionNumber;\r\n\r\n    protected String codeBookNumber;\r\n\r\n    protected String columnStart;\r\n\r\n    protected String columnEnd;\r\n\r\n    protected String notes;\r\n\r\n    private ArrayList<SupportingDocument> supportingDocuments;\r\n\r\n    private ArrayList<OntologyTerm> ontologyTerms;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    private Variable alternativeVariable;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public Variable() {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        identifier = 0;\r\n        category = unknownMessage;\r\n        name = \"\";\r\n        year = \"\";\r\n        label = \"\";\r\n        isCleaned = false;\r\n        cleaningStatus = unknownMessage;\r\n        cleaningDescription = \"\";\r\n        valueLabels = new ArrayList<ValueLabel>();\r\n        availability = unknownMessage;\r\n        alias = \"\";\r\n        filePath = \"\";\r\n        supportingDocuments = new ArrayList<SupportingDocument>();\r\n        ontologyTerms = new ArrayList<OntologyTerm>();\r\n        isCoded = false;\r\n        isNewRecord = false;\r\n        codeBookNumber = \"\";\r\n        columnStart = \"\";\r\n        columnEnd = \"\";\r\n        form = \"\";\r\n        questionNumber = \"\";\r\n        notes = \"\";\r\n        alternativeVariable = null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produces a variable summary suitable for showing in a collection\r\n     * of search results.\r\n     */\r\n    public VariableSummary createVariableSummary() {\r\n        VariableSummary variableSummary = new VariableSummary();\r\n        variableSummary.setIdentifier(identifier);\r\n        variableSummary.setName(name);\r\n        variableSummary.setLabel(label);\r\n        variableSummary.setYear(year);\r\n        return variableSummary;\r\n    }\r\n\r\n    /**\r\n     * an integer which uniquely identifies an instance in the database.\r\n     * All primary key values in the database use a single auto-incremented\r\n     * auto-generated value.\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * variable name, as specified using the NSHD variable naming convention\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * a one-line description of the variable\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * sweep in which the variable was collected\r\n     * @return the year\r\n     */\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    /**\r\n     * @param year the year to set\r\n     */\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    /**\r\n     * @return the category\r\n     */\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    /**\r\n     * @param category the category to set\r\n     */\r\n    public void setCategory(String category) {\r\n        this.category = category;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been cleaned in some way\r\n     * @return the isCleaned\r\n     */\r\n    public boolean isCleaned() {\r\n        return isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @param isCleaned the isCleaned to set\r\n     */\r\n    public void setCleaned(boolean isCleaned) {\r\n        this.isCleaned = isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @return the cleaningStatus\r\n     */\r\n    public String getCleaningStatus() {\r\n        return cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningStatus the cleaningStatus to set\r\n     */\r\n    public void setCleaningStatus(String cleaningStatus) {\r\n        this.cleaningStatus = cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * free text description of how the variable data were cleaned.\r\n     * @return the cleaningDescription\r\n     */\r\n    public String getCleaningDescription() {\r\n        return cleaningDescription;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningDescription the cleaningDescription to set\r\n     */\r\n    public void setCleaningDescription(String cleaningDescription) {\r\n        this.cleaningDescription = cleaningDescription;\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels() {\r\n        return valueLabels;\r\n    }\r\n\r\n    public void setValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        this.valueLabels = valueLabels;\r\n    }\r\n\r\n    public void addValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.add(valueLabel);\r\n    }\r\n\r\n    public void removeValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.remove(valueLabel);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments() {\r\n        return supportingDocuments;\r\n    }\r\n\r\n    public boolean containsSupportingDocument(SupportingDocument targetSupportingDocument) {\r\n        int targetIdentifier = targetSupportingDocument.getIdentifier();\r\n        for (SupportingDocument currentSupportingDocument : supportingDocuments) {\r\n            int currentIdentifier = currentSupportingDocument.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setSupportingDocuments(ArrayList<SupportingDocument> supportingDocuments) {\r\n        this.supportingDocuments = supportingDocuments;\r\n    }\r\n\r\n    public void addSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToAdd) {\r\n        supportingDocuments.addAll(supportingDocumentsToAdd);\r\n    }\r\n\r\n    public void addSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.add(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.remove(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        for (SupportingDocument targetVariable : supportingDocumentsToDelete) {\r\n            supportingDocuments.remove(targetVariable);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms() {\r\n        return ontologyTerms;\r\n    }\r\n\r\n    public boolean containsOntologyTerm(OntologyTerm targetOntologyTerm) {\r\n        int targetIdentifier = targetOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            int currentIdentifier = currentOntologyTerm.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setOntologyTerms(ArrayList<OntologyTerm> ontologyTerms) {\r\n        this.ontologyTerms = ontologyTerms;\r\n    }\r\n\r\n    public void addOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToAdd) {\r\n        ontologyTerms.addAll(ontologyTermsToAdd);\r\n    }\r\n\r\n    public void addOntologyTerm(OntologyTerm ontologyTerm) {\r\n        ontologyTerms.add(ontologyTerm);\r\n    }\r\n\r\n    public void removeOntologyTerm(OntologyTerm copyOfOntologyTermToDelete) {\r\n        OntologyTerm itemToDelete = findOntologyTerm(copyOfOntologyTermToDelete);\r\n        if (itemToDelete != null) {\r\n            ontologyTerms.remove(itemToDelete);\r\n        }\r\n    }\r\n\r\n    public void removeOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToDelete) {\r\n        for (OntologyTerm targetOntologyTerm : ontologyTermsToDelete) {\r\n            removeOntologyTerm(targetOntologyTerm);\r\n        }\r\n    }\r\n\r\n    public void updateOntologyTerm(OntologyTerm revisedOntologyTerm) {\r\n        OntologyTerm itemToUpdate = findOntologyTerm(revisedOntologyTerm);\r\n        if (itemToUpdate != null) {\r\n            int numberOfTerms = ontologyTerms.size();\r\n            int index = ontologyTerms.indexOf(itemToUpdate);\r\n            ontologyTerms.remove(itemToUpdate);\r\n            if (index == numberOfTerms - 1) {\r\n                //item to update was at the end\r\n                ontologyTerms.add(revisedOntologyTerm);\r\n            } else {\r\n                ontologyTerms.add(index, revisedOntologyTerm);\r\n            }\r\n        }\r\n    }\r\n\r\n    private OntologyTerm findOntologyTerm(OntologyTerm copyofOntologyTerm) {\r\n        int targetIdentifier = copyofOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            if (currentOntologyTerm.getIdentifier() == targetIdentifier) {\r\n                //found the item to delete\r\n                return currentOntologyTerm;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @return the availability\r\n     */\r\n    public String getAvailability() {\r\n        return availability;\r\n    }\r\n\r\n    /**\r\n     * @param availability the availability to set\r\n     */\r\n    public void setAvailability(String availability) {\r\n        this.availability = availability;\r\n    }\r\n\r\n    /**\r\n     * @return the codeBookNumber\r\n     */\r\n    public String getCodeBookNumber() {\r\n        return codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * reference to the physical code book entry\r\n     * @param codeBookNumber the codeBookNumber to set\r\n     */\r\n    public void setCodeBookNumber(String codeBookNumber) {\r\n        this.codeBookNumber = codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * starting column in library file for this variable\r\n     * @return the columnStart\r\n     */\r\n    public String getColumnStart() {\r\n        return columnStart;\r\n    }\r\n\r\n    /**\r\n     * @param columnStart the columnStart to set\r\n     */\r\n    public void setColumnStart(String columnStart) {\r\n        this.columnStart = columnStart;\r\n    }\r\n\r\n    /**\r\n     * ending column in library file for this variable\r\n     * @return the columnEnd\r\n     */\r\n    public String getColumnEnd() {\r\n        return columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @param columnEnd the columnEnd to set\r\n     */\r\n    public void setColumnEnd(String columnEnd) {\r\n        this.columnEnd = columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @return the alias\r\n     */\r\n    public String getAlias() {\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * @param alias the alias to set\r\n     */\r\n    public void setAlias(String alias) {\r\n        this.alias = alias;\r\n    }\r\n\r\n    /**\r\n     * @return the file Name\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the dataLibraryFileName to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been coded electronically (or not)\r\n     * @return the isCoded\r\n     */\r\n    public boolean isCoded() {\r\n        return isCoded;\r\n    }\r\n\r\n    /**\r\n     * @param isCoded the isCoded to set\r\n     */\r\n    public void setCoded(boolean isCoded) {\r\n        this.isCoded = isCoded;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    public void setIsNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * questionnaire form containing the question whose response is stored in the variable\r\n     * @return the form\r\n     */\r\n    public String getForm() {\r\n        return form;\r\n    }\r\n\r\n    /**\r\n     * @param form the form to set\r\n     */\r\n    public void setForm(String form) {\r\n        this.form = form;\r\n    }\r\n\r\n    /**\r\n     * question number from the questionnaire for this variable\r\n     * @return the questionNumber\r\n     */\r\n    public String getQuestionNumber() {\r\n        return questionNumber;\r\n    }\r\n\r\n    /**\r\n     * @param questionNumber the questionNumber to set\r\n     */\r\n    public void setQuestionNumber(String questionNumber) {\r\n        this.questionNumber = questionNumber;\r\n    }\r\n\r\n    public String getNotes() {\r\n        return notes;\r\n    }\r\n\r\n    public void setNotes(String notes) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public Variable getAlternativeVariable() {\r\n        return alternativeVariable;\r\n    }\r\n\r\n    public void setAlternativeVariable(Variable alterativeVariable) {\r\n        this.alternativeVariable = alterativeVariable;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static protected ArrayList<String> validateFields(Variable variable) {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //specify a name\r\n        if (ValidationUtility.isBlank(variable.getName()) == true) {\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", nameLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //specify a label\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getLabel()) == true) {\r\n         * \t\t\tString labelLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.label.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tlabelLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a category\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t\r\n\t\tif (ValidationUtility.isUnknown(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        //specify an availability\r\n        if (ValidationUtility.isBlank(variable.getAvailability()) == true) {\r\n            String availabilityLabelText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", availabilityLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /**\r\n         * \t\tif (ValidationUtility.isUnknown(variable.getAvailability()) == true) {\r\n         * \t\t\tString availabilityLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.availability.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tavailabilityLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify cleaning status\r\n        if (variable.isCleaned() == true) {\r\n            if (ValidationUtility.isBlank(variable.getCleaningStatus()) == true) {\r\n                String cleaningStatusLabelText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", cleaningStatusLabelText);\r\n                errorMessages.add(errorMessage);\r\n            }\r\n            /**\r\n             * \t\t\tif (ValidationUtility.isUnknown(variable.getCleaningStatus()) == true) {\r\n             * \t\t\t\tString cleaningStatusLabelText\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n             * \t\t\t\tString errorMessage\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n             * \t\t\t\t\t\t\t\t\t\t\t\tcleaningStatusLabelText);\r\n             * \t\t\t\terrorMessages.add(errorMessage);\r\n             * \t\t\t}\r\n             */\r\n        }\r\n        //specify a year\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getYear()) == true) {\r\n         * \t\t\tString yearLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.year.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tyearLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         * \t\telse {\r\n         * \t\t\t//make sure year is numeric\r\n         * \t\t\tString yearValue = variable.getYear();\r\n         *\r\n         * \t\t\ttry {\r\n         * \t\t\t\tDate currentDate = new Date();\r\n         * \t\t\t\tGregorianCalendar gregorianCalendar = new GregorianCalendar();\r\n         * \t\t\t\tgregorianCalendar.setTime(currentDate);\r\n         * \t\t\t\tint currentYearNumber = gregorianCalendar.get(Calendar.YEAR);\r\n         *\r\n         * \t\t\t\tint calendarYear = new Integer(yearValue).intValue();\r\n         * \t\t\t\tif (calendarYear < 1946) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooOld\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t\telse if (calendarYear > currentYearNumber) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooNew\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t}\r\n         * \t\t\tcatch(NumberFormatException exception) {\r\n         * \t\t\t\tString illegalNumberFormatException\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.illegalYear\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\terrorMessages.add(illegalNumberFormatException);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        /**\r\n         * \t\tString columnStart = variable.getColumnStart();\r\n         * \t\tif (ValidationUtility.isBlank(columnStart) == false) {\r\n         * \t\t\t//check that column start is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnStart);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnStartLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnStart.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStart,\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStartLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         *\r\n         * \t\tString columnEnd = variable.getColumnEnd();\r\n         * \t\tif (ValidationUtility.isBlank(columnEnd) == false) {\r\n         * \t\t\t//check that column end is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnEnd);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnEndLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEnd,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEndLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        //specify an alias\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getAlias()) == true) {\r\n         * \t\t\tString aliasLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.alias.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\taliasLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a file name\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getFilePath()) == true) {\r\n         * \t\t\tString filePathLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tfilePathLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        return errorMessages;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable originalVariable, Variable revisedVariable) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String ownerVariableName = originalVariable.getDisplayName();\r\n        //detect changes in name\r\n        String oldName = originalVariable.getName();\r\n        String newName = revisedVariable.getName();\r\n        if (oldName.equals(newName) == false) {\r\n            oldName = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newName = ValidationUtility.convertEmptyValueToBlank(newName);\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, nameLabelText, oldName, newName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //=Changed variable {0}, field {1}, from {2} to {3}\r\n        //detect changes in label\r\n        String oldLabel = originalVariable.getLabel();\r\n        String newLabel = revisedVariable.getLabel();\r\n        if (oldLabel.equals(newLabel) == false) {\r\n            oldLabel = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newLabel = ValidationUtility.convertEmptyValueToBlank(newLabel);\r\n            String labelLabelText = MacawMessages.getMessage(\"variable.label.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, labelLabelText, oldLabel, newLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in year\r\n        String oldYear = originalVariable.getYear();\r\n        String newYear = revisedVariable.getYear();\r\n        if (oldYear.equals(newYear) == false) {\r\n            oldYear = ValidationUtility.convertEmptyValueToBlank(oldYear);\r\n            newYear = ValidationUtility.convertEmptyValueToBlank(newYear);\r\n            String yearLabelText = MacawMessages.getMessage(\"variable.year.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, yearLabelText, oldYear, newYear);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in category\r\n        String originalCategory = originalVariable.getCategory();\r\n        String revisedCategory = revisedVariable.getCategory();\r\n        if (originalCategory.equals(revisedCategory) == false) {\r\n            originalCategory = ValidationUtility.convertEmptyValueToBlank(originalCategory);\r\n            revisedCategory = ValidationUtility.convertEmptyValueToBlank(revisedCategory);\r\n            String categoryLabelText = MacawMessages.getMessage(\"variable.category.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, categoryLabelText, originalCategory, revisedCategory);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCleaned = originalVariable.isCleaned();\r\n        boolean revisedIsCleaned = revisedVariable.isCleaned();\r\n        if ((originalIsCleaned != revisedIsCleaned) && (revisedIsCleaned == false)) {\r\n            String changedToNotCleaned = MacawMessages.getMessage(\"variable.isCleaned.saveChanges.changedToNotClean\", ownerVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changedToNotCleaned, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String oldCleaningChoice = originalVariable.getCleaningStatus();\r\n            String revisedCleaningChoice = revisedVariable.getCleaningStatus();\r\n            if (oldCleaningChoice.equals(revisedCleaningChoice) == false) {\r\n                oldCleaningChoice = ValidationUtility.convertEmptyValueToBlank(oldCleaningChoice);\r\n                revisedCleaningChoice = ValidationUtility.convertEmptyValueToBlank(revisedCleaningChoice);\r\n                String cleaningStatusText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningStatusText, oldCleaningChoice, revisedCleaningChoice);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n            String oldCleaningDescription = originalVariable.getCleaningDescription();\r\n            String revisedCleaningDescription = originalVariable.getCleaningDescription();\r\n            if (oldCleaningDescription.equals(revisedCleaningDescription) == false) {\r\n                oldCleaningDescription = ValidationUtility.convertEmptyValueToBlank(oldCleaningDescription);\r\n                revisedCleaningDescription = ValidationUtility.convertEmptyValueToBlank(revisedCleaningDescription);\r\n                String cleaningDescriptionText = MacawMessages.getMessage(\"variable.cleaningDescription.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningDescriptionText, oldCleaningDescription, revisedCleaningDescription);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        //detect changes in code book number\r\n        String originalCodeBookNumber = originalVariable.getCodeBookNumber();\r\n        String revisedCodeBookNumber = revisedVariable.getCodeBookNumber();\r\n        if (originalCodeBookNumber.equals(revisedCodeBookNumber) == false) {\r\n            originalCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(originalCodeBookNumber);\r\n            revisedCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(revisedCodeBookNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.codeBookNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalCodeBookNumber, revisedCodeBookNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column start\r\n        String columnStartLabelText = MacawMessages.getMessage(\"variable.columnStart.label\");\r\n        String originalColumnStart = originalVariable.getColumnStart();\r\n        if (originalColumnStart == null) {\r\n            originalColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnStart = revisedVariable.getColumnStart();\r\n        if (revisedColumnStart == null) {\r\n            revisedColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnStart.equals(revisedColumnStart) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnStartLabelText, originalColumnStart, revisedColumnStart);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column end\r\n        String columnEndLabelText = MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n        String originalColumnEnd = originalVariable.getColumnEnd();\r\n        if (originalColumnEnd.equals(\"\") == true) {\r\n            originalColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnEnd = revisedVariable.getColumnEnd();\r\n        if (revisedColumnEnd.equals(\"\") == true) {\r\n            revisedColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnEnd.equals(revisedColumnEnd) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnEndLabelText, originalColumnEnd, revisedColumnEnd);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check alias\r\n        String oldAlias = originalVariable.getAlias();\r\n        String newAlias = revisedVariable.getAlias();\r\n        if (oldAlias.equals(newAlias) == false) {\r\n            oldAlias = ValidationUtility.convertEmptyValueToBlank(oldAlias);\r\n            newAlias = ValidationUtility.convertEmptyValueToBlank(newAlias);\r\n            String aliasText = MacawMessages.getMessage(\"variable.alias.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, aliasText, oldAlias, newAlias);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check file name\r\n        /**\r\n         * \t\tString oldFilePath = originalVariable.getFilePath();\r\n         * \t\tString newFilePath = revisedVariable.getFilePath();\r\n         * \t\tif (oldFilePath.equals(newFilePath) == false) {\r\n         * \t\t\toldFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(oldFilePath);\r\n         * \t\t\tnewFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(newFilePath);\r\n         *\r\n         * \t\t\tString filePathText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString fieldChangedMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n         * \t\t\t\t\t\t\t\t\t\t   ownerVariableName,\r\n         * \t\t\t\t\t\t\t\t\t\t   filePathText,\r\n         * \t\t\t\t\t\t\t\t\t\t   oldFilePath,\r\n         * \t\t\t\t\t\t\t\t\t\t   newFilePath);\r\n         * \t\t\tMacawChangeEvent changeEvent\r\n         * \t\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n         * \t\t\t\t\t\t\t\t\t   fieldChangedMessage,\r\n         * \t\t\t\t\t\t\t\t\t   userID);\r\n         * \t\t\tchangeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        String oldAvailability = originalVariable.getAvailability();\r\n        String revisedAvailability = revisedVariable.getAvailability();\r\n        if (oldAvailability.equals(revisedAvailability) == false) {\r\n            oldAvailability = ValidationUtility.convertEmptyValueToBlank(oldAvailability);\r\n            revisedAvailability = ValidationUtility.convertEmptyValueToBlank(revisedAvailability);\r\n            String availabilityText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, availabilityText, oldAvailability, revisedAvailability);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCoded = originalVariable.isCoded();\r\n        boolean revisedIsCoded = revisedVariable.isCoded();\r\n        if (originalIsCoded != revisedIsCoded) {\r\n            String oldIsCodedValue = Boolean.toString(originalIsCoded);\r\n            String revisedIsCodedValue = Boolean.toString(revisedIsCoded);\r\n            String isCodedLabel = MacawMessages.getMessage(\"variable.isCoded.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, isCodedLabel, oldIsCodedValue, revisedIsCodedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalForm = originalVariable.getForm();\r\n        String revisedForm = revisedVariable.getForm();\r\n        if (originalForm.equals(revisedForm) == false) {\r\n            originalForm = ValidationUtility.convertEmptyValueToBlank(originalForm);\r\n            revisedForm = ValidationUtility.convertEmptyValueToBlank(revisedForm);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.form.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalForm, revisedForm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalQuestionNumber = originalVariable.getQuestionNumber();\r\n        String revisedQuestionNumber = revisedVariable.getQuestionNumber();\r\n        if (originalQuestionNumber.equals(revisedQuestionNumber) == false) {\r\n            originalQuestionNumber = ValidationUtility.convertEmptyValueToBlank(originalQuestionNumber);\r\n            revisedQuestionNumber = ValidationUtility.convertEmptyValueToBlank(revisedQuestionNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.questionNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalQuestionNumber, revisedQuestionNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalNotes = originalVariable.getNotes();\r\n        String revisedNotes = revisedVariable.getNotes();\r\n        if (originalNotes.equals(revisedNotes) == false) {\r\n            originalNotes = ValidationUtility.convertEmptyValueToBlank(originalNotes);\r\n            revisedNotes = ValidationUtility.convertEmptyValueToBlank(revisedNotes);\r\n            String notesLabelText = MacawMessages.getMessage(\"variable.notes.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, notesLabelText, originalNotes, revisedNotes);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        /**\r\n         * \t\tMacawChangeEvent changeEvent\r\n         * \t\t\t= detectChangesInAlternativeVariable(user,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t originalVariable,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t revisedVariable);\r\n         * \t\tif (changeEvent != null) {\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        return changeEvents;\r\n    }\r\n\r\n    static public MacawChangeEvent detectChangesInAlternativeVariable(User user, Variable originalVariable, Variable revisedAlternativeVariable) {\r\n        Variable oldAlternativeVariable = originalVariable.getAlternativeVariable();\r\n        boolean alternativeVariableChanged = false;\r\n        if ((oldAlternativeVariable == null) && (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = false;\r\n        } else if ((oldAlternativeVariable == null) || (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = true;\r\n        } else {\r\n            //both are non-null\r\n            if (oldAlternativeVariable.getIdentifier() == revisedAlternativeVariable.getIdentifier()) {\r\n                alternativeVariableChanged = true;\r\n            } else {\r\n                alternativeVariableChanged = false;\r\n            }\r\n        }\r\n        if (alternativeVariableChanged == true) {\r\n            String blankFieldValue = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n            String fieldName = MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n            String oldAlternativeVariableName = blankFieldValue;\r\n            if (oldAlternativeVariable != null) {\r\n                oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n            }\r\n            String revisedAlternativeVariableName = blankFieldValue;\r\n            if (revisedAlternativeVariable != null) {\r\n                revisedAlternativeVariableName = revisedAlternativeVariable.getDisplayName();\r\n            }\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", fieldName, oldAlternativeVariableName, revisedAlternativeVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            int targetVariableID = originalVariable.getIdentifier();\r\n            changeEvent.setVariableOwnerID(targetVariableID);\r\n            changeEvent.setChangedObjectIdentifier(targetVariableID);\r\n            return changeEvent;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return getName();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Clonable\r\n    abstract public Object clone();\r\n\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    protected void cloneAttributes(Variable cloneVariable) {\r\n        cloneVariable.setIdentifier(identifier);\r\n        cloneVariable.setCategory(category);\r\n        cloneVariable.setName(name);\r\n        cloneVariable.setLabel(label);\r\n        cloneVariable.setForm(form);\r\n        cloneVariable.setQuestionNumber(questionNumber);\r\n        cloneVariable.setYear(year);\r\n        cloneVariable.setCleaned(isCleaned);\r\n        cloneVariable.setCoded(isCoded);\r\n        cloneVariable.setCleaningStatus(cleaningStatus);\r\n        cloneVariable.setCleaningDescription(cleaningDescription);\r\n        cloneVariable.setCodeBookNumber(codeBookNumber);\r\n        cloneVariable.setColumnStart(columnStart);\r\n        cloneVariable.setColumnEnd(columnEnd);\r\n        cloneVariable.setAvailability(availability);\r\n        for (ValueLabel valueLabel : valueLabels) {\r\n            ValueLabel clonedValueLabel = (ValueLabel) valueLabel.clone();\r\n            cloneVariable.addValueLabel(clonedValueLabel);\r\n        }\r\n        cloneVariable.setAlias(alias);\r\n        cloneVariable.setFilePath(filePath);\r\n        cloneVariable.setIsNewRecord(isNewRecord);\r\n        //make copies of references to supporting documents\r\n        ArrayList<SupportingDocument> cloneSupportingDocuments = new ArrayList<SupportingDocument>();\r\n        for (SupportingDocument supportingDocument : supportingDocuments) {\r\n            cloneSupportingDocuments.add((SupportingDocument) supportingDocument.clone());\r\n        }\r\n        cloneVariable.setSupportingDocuments(cloneSupportingDocuments);\r\n        ArrayList<OntologyTerm> cloneOntologyTerms = new ArrayList<OntologyTerm>();\r\n        for (OntologyTerm ontologyTerm : ontologyTerms) {\r\n            cloneOntologyTerms.add((OntologyTerm) ontologyTerm.clone());\r\n        }\r\n        cloneVariable.setOntologyTerms(cloneOntologyTerms);\r\n        //we don't need\r\n        if (alternativeVariable != null) {\r\n            Variable cloneAlternativeVariable = (Variable) alternativeVariable.clone();\r\n            cloneVariable.setAlternativeVariable(cloneAlternativeVariable);\r\n        }\r\n        cloneVariable.setNotes(notes);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/VariableTest6.java",
		"test_prompt": "// VariableTest6.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Variable}.\n* It contains ten unit test cases for the {@link Variable#detectFieldChanges(User, Variable, Variable)} method.\n*/\nclass VariableTest6 {"
	},
	{
		"original_code": "// Variable.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A concept related to the NSHD study.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\nabstract public class Variable implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String category;\r\n\r\n    private String name;\r\n\r\n    private String label;\r\n\r\n    private boolean isCleaned;\r\n\r\n    private String year;\r\n\r\n    private String cleaningStatus;\r\n\r\n    private String cleaningDescription;\r\n\r\n    private ArrayList<ValueLabel> valueLabels;\r\n\r\n    private String availability;\r\n\r\n    private String alias;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isCoded;\r\n\r\n    protected String form;\r\n\r\n    protected String questionNumber;\r\n\r\n    protected String codeBookNumber;\r\n\r\n    protected String columnStart;\r\n\r\n    protected String columnEnd;\r\n\r\n    protected String notes;\r\n\r\n    private ArrayList<SupportingDocument> supportingDocuments;\r\n\r\n    private ArrayList<OntologyTerm> ontologyTerms;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    private Variable alternativeVariable;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public Variable() {\r\n        String unknownMessage = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        identifier = 0;\r\n        category = unknownMessage;\r\n        name = \"\";\r\n        year = \"\";\r\n        label = \"\";\r\n        isCleaned = false;\r\n        cleaningStatus = unknownMessage;\r\n        cleaningDescription = \"\";\r\n        valueLabels = new ArrayList<ValueLabel>();\r\n        availability = unknownMessage;\r\n        alias = \"\";\r\n        filePath = \"\";\r\n        supportingDocuments = new ArrayList<SupportingDocument>();\r\n        ontologyTerms = new ArrayList<OntologyTerm>();\r\n        isCoded = false;\r\n        isNewRecord = false;\r\n        codeBookNumber = \"\";\r\n        columnStart = \"\";\r\n        columnEnd = \"\";\r\n        form = \"\";\r\n        questionNumber = \"\";\r\n        notes = \"\";\r\n        alternativeVariable = null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produces a variable summary suitable for showing in a collection\r\n     * of search results.\r\n     */\r\n    public VariableSummary createVariableSummary() {\r\n        VariableSummary variableSummary = new VariableSummary();\r\n        variableSummary.setIdentifier(identifier);\r\n        variableSummary.setName(name);\r\n        variableSummary.setLabel(label);\r\n        variableSummary.setYear(year);\r\n        return variableSummary;\r\n    }\r\n\r\n    /**\r\n     * an integer which uniquely identifies an instance in the database.\r\n     * All primary key values in the database use a single auto-incremented\r\n     * auto-generated value.\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * variable name, as specified using the NSHD variable naming convention\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * a one-line description of the variable\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * sweep in which the variable was collected\r\n     * @return the year\r\n     */\r\n    public String getYear() {\r\n        return year;\r\n    }\r\n\r\n    /**\r\n     * @param year the year to set\r\n     */\r\n    public void setYear(String year) {\r\n        this.year = year;\r\n    }\r\n\r\n    /**\r\n     * @return the category\r\n     */\r\n    public String getCategory() {\r\n        return category;\r\n    }\r\n\r\n    /**\r\n     * @param category the category to set\r\n     */\r\n    public void setCategory(String category) {\r\n        this.category = category;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been cleaned in some way\r\n     * @return the isCleaned\r\n     */\r\n    public boolean isCleaned() {\r\n        return isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @param isCleaned the isCleaned to set\r\n     */\r\n    public void setCleaned(boolean isCleaned) {\r\n        this.isCleaned = isCleaned;\r\n    }\r\n\r\n    /**\r\n     * @return the cleaningStatus\r\n     */\r\n    public String getCleaningStatus() {\r\n        return cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningStatus the cleaningStatus to set\r\n     */\r\n    public void setCleaningStatus(String cleaningStatus) {\r\n        this.cleaningStatus = cleaningStatus;\r\n    }\r\n\r\n    /**\r\n     * free text description of how the variable data were cleaned.\r\n     * @return the cleaningDescription\r\n     */\r\n    public String getCleaningDescription() {\r\n        return cleaningDescription;\r\n    }\r\n\r\n    /**\r\n     * @param cleaningDescription the cleaningDescription to set\r\n     */\r\n    public void setCleaningDescription(String cleaningDescription) {\r\n        this.cleaningDescription = cleaningDescription;\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels() {\r\n        return valueLabels;\r\n    }\r\n\r\n    public void setValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        this.valueLabels = valueLabels;\r\n    }\r\n\r\n    public void addValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.add(valueLabel);\r\n    }\r\n\r\n    public void removeValueLabel(ValueLabel valueLabel) {\r\n        valueLabels.remove(valueLabel);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments() {\r\n        return supportingDocuments;\r\n    }\r\n\r\n    public boolean containsSupportingDocument(SupportingDocument targetSupportingDocument) {\r\n        int targetIdentifier = targetSupportingDocument.getIdentifier();\r\n        for (SupportingDocument currentSupportingDocument : supportingDocuments) {\r\n            int currentIdentifier = currentSupportingDocument.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setSupportingDocuments(ArrayList<SupportingDocument> supportingDocuments) {\r\n        this.supportingDocuments = supportingDocuments;\r\n    }\r\n\r\n    public void addSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToAdd) {\r\n        supportingDocuments.addAll(supportingDocumentsToAdd);\r\n    }\r\n\r\n    public void addSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.add(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocument(SupportingDocument supportingDocument) {\r\n        supportingDocuments.remove(supportingDocument);\r\n    }\r\n\r\n    public void removeSupportingDocuments(ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        for (SupportingDocument targetVariable : supportingDocumentsToDelete) {\r\n            supportingDocuments.remove(targetVariable);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms() {\r\n        return ontologyTerms;\r\n    }\r\n\r\n    public boolean containsOntologyTerm(OntologyTerm targetOntologyTerm) {\r\n        int targetIdentifier = targetOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            int currentIdentifier = currentOntologyTerm.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void setOntologyTerms(ArrayList<OntologyTerm> ontologyTerms) {\r\n        this.ontologyTerms = ontologyTerms;\r\n    }\r\n\r\n    public void addOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToAdd) {\r\n        ontologyTerms.addAll(ontologyTermsToAdd);\r\n    }\r\n\r\n    public void addOntologyTerm(OntologyTerm ontologyTerm) {\r\n        ontologyTerms.add(ontologyTerm);\r\n    }\r\n\r\n    public void removeOntologyTerm(OntologyTerm copyOfOntologyTermToDelete) {\r\n        OntologyTerm itemToDelete = findOntologyTerm(copyOfOntologyTermToDelete);\r\n        if (itemToDelete != null) {\r\n            ontologyTerms.remove(itemToDelete);\r\n        }\r\n    }\r\n\r\n    public void removeOntologyTerms(ArrayList<OntologyTerm> ontologyTermsToDelete) {\r\n        for (OntologyTerm targetOntologyTerm : ontologyTermsToDelete) {\r\n            removeOntologyTerm(targetOntologyTerm);\r\n        }\r\n    }\r\n\r\n    public void updateOntologyTerm(OntologyTerm revisedOntologyTerm) {\r\n        OntologyTerm itemToUpdate = findOntologyTerm(revisedOntologyTerm);\r\n        if (itemToUpdate != null) {\r\n            int numberOfTerms = ontologyTerms.size();\r\n            int index = ontologyTerms.indexOf(itemToUpdate);\r\n            ontologyTerms.remove(itemToUpdate);\r\n            if (index == numberOfTerms - 1) {\r\n                //item to update was at the end\r\n                ontologyTerms.add(revisedOntologyTerm);\r\n            } else {\r\n                ontologyTerms.add(index, revisedOntologyTerm);\r\n            }\r\n        }\r\n    }\r\n\r\n    private OntologyTerm findOntologyTerm(OntologyTerm copyofOntologyTerm) {\r\n        int targetIdentifier = copyofOntologyTerm.getIdentifier();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            if (currentOntologyTerm.getIdentifier() == targetIdentifier) {\r\n                //found the item to delete\r\n                return currentOntologyTerm;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @return the availability\r\n     */\r\n    public String getAvailability() {\r\n        return availability;\r\n    }\r\n\r\n    /**\r\n     * @param availability the availability to set\r\n     */\r\n    public void setAvailability(String availability) {\r\n        this.availability = availability;\r\n    }\r\n\r\n    /**\r\n     * @return the codeBookNumber\r\n     */\r\n    public String getCodeBookNumber() {\r\n        return codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * reference to the physical code book entry\r\n     * @param codeBookNumber the codeBookNumber to set\r\n     */\r\n    public void setCodeBookNumber(String codeBookNumber) {\r\n        this.codeBookNumber = codeBookNumber;\r\n    }\r\n\r\n    /**\r\n     * starting column in library file for this variable\r\n     * @return the columnStart\r\n     */\r\n    public String getColumnStart() {\r\n        return columnStart;\r\n    }\r\n\r\n    /**\r\n     * @param columnStart the columnStart to set\r\n     */\r\n    public void setColumnStart(String columnStart) {\r\n        this.columnStart = columnStart;\r\n    }\r\n\r\n    /**\r\n     * ending column in library file for this variable\r\n     * @return the columnEnd\r\n     */\r\n    public String getColumnEnd() {\r\n        return columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @param columnEnd the columnEnd to set\r\n     */\r\n    public void setColumnEnd(String columnEnd) {\r\n        this.columnEnd = columnEnd;\r\n    }\r\n\r\n    /**\r\n     * @return the alias\r\n     */\r\n    public String getAlias() {\r\n        return alias;\r\n    }\r\n\r\n    /**\r\n     * @param alias the alias to set\r\n     */\r\n    public void setAlias(String alias) {\r\n        this.alias = alias;\r\n    }\r\n\r\n    /**\r\n     * @return the file Name\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the dataLibraryFileName to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    /**\r\n     * flag for whether the variable has been coded electronically (or not)\r\n     * @return the isCoded\r\n     */\r\n    public boolean isCoded() {\r\n        return isCoded;\r\n    }\r\n\r\n    /**\r\n     * @param isCoded the isCoded to set\r\n     */\r\n    public void setCoded(boolean isCoded) {\r\n        this.isCoded = isCoded;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    public void setIsNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * questionnaire form containing the question whose response is stored in the variable\r\n     * @return the form\r\n     */\r\n    public String getForm() {\r\n        return form;\r\n    }\r\n\r\n    /**\r\n     * @param form the form to set\r\n     */\r\n    public void setForm(String form) {\r\n        this.form = form;\r\n    }\r\n\r\n    /**\r\n     * question number from the questionnaire for this variable\r\n     * @return the questionNumber\r\n     */\r\n    public String getQuestionNumber() {\r\n        return questionNumber;\r\n    }\r\n\r\n    /**\r\n     * @param questionNumber the questionNumber to set\r\n     */\r\n    public void setQuestionNumber(String questionNumber) {\r\n        this.questionNumber = questionNumber;\r\n    }\r\n\r\n    public String getNotes() {\r\n        return notes;\r\n    }\r\n\r\n    public void setNotes(String notes) {\r\n        this.notes = notes;\r\n    }\r\n\r\n    public Variable getAlternativeVariable() {\r\n        return alternativeVariable;\r\n    }\r\n\r\n    public void setAlternativeVariable(Variable alterativeVariable) {\r\n        this.alternativeVariable = alterativeVariable;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static protected ArrayList<String> validateFields(Variable variable) {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //specify a name\r\n        if (ValidationUtility.isBlank(variable.getName()) == true) {\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", nameLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //specify a label\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getLabel()) == true) {\r\n         * \t\t\tString labelLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.label.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tlabelLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a category\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t\r\n\t\tif (ValidationUtility.isUnknown(variable.getCategory()) == true) {\r\n\t\t\tString categoryLabelText\r\n\t\t\t\t= MacawMessages.getMessage(\"variable.category.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n\t\t\t\t\t\t\t\t\t\t\tcategoryLabelText);\t\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        //specify an availability\r\n        if (ValidationUtility.isBlank(variable.getAvailability()) == true) {\r\n            String availabilityLabelText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", availabilityLabelText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /**\r\n         * \t\tif (ValidationUtility.isUnknown(variable.getAvailability()) == true) {\r\n         * \t\t\tString availabilityLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.availability.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tavailabilityLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify cleaning status\r\n        if (variable.isCleaned() == true) {\r\n            if (ValidationUtility.isBlank(variable.getCleaningStatus()) == true) {\r\n                String cleaningStatusLabelText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", cleaningStatusLabelText);\r\n                errorMessages.add(errorMessage);\r\n            }\r\n            /**\r\n             * \t\t\tif (ValidationUtility.isUnknown(variable.getCleaningStatus()) == true) {\r\n             * \t\t\t\tString cleaningStatusLabelText\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n             * \t\t\t\tString errorMessage\r\n             * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.unselectedItem\",\r\n             * \t\t\t\t\t\t\t\t\t\t\t\tcleaningStatusLabelText);\r\n             * \t\t\t\terrorMessages.add(errorMessage);\r\n             * \t\t\t}\r\n             */\r\n        }\r\n        //specify a year\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getYear()) == true) {\r\n         * \t\t\tString yearLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.year.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t   \t\tyearLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         * \t\telse {\r\n         * \t\t\t//make sure year is numeric\r\n         * \t\t\tString yearValue = variable.getYear();\r\n         *\r\n         * \t\t\ttry {\r\n         * \t\t\t\tDate currentDate = new Date();\r\n         * \t\t\t\tGregorianCalendar gregorianCalendar = new GregorianCalendar();\r\n         * \t\t\t\tgregorianCalendar.setTime(currentDate);\r\n         * \t\t\t\tint currentYearNumber = gregorianCalendar.get(Calendar.YEAR);\r\n         *\r\n         * \t\t\t\tint calendarYear = new Integer(yearValue).intValue();\r\n         * \t\t\t\tif (calendarYear < 1946) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooOld\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t\telse if (calendarYear > currentYearNumber) {\r\n         * \t\t\t\t\tString errorMessage\r\n         * \t\t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.tooNew\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t\t}\r\n         * \t\t\t}\r\n         * \t\t\tcatch(NumberFormatException exception) {\r\n         * \t\t\t\tString illegalNumberFormatException\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.year.error.illegalYear\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t   yearValue);\r\n         * \t\t\t\terrorMessages.add(illegalNumberFormatException);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        /**\r\n         * \t\tString columnStart = variable.getColumnStart();\r\n         * \t\tif (ValidationUtility.isBlank(columnStart) == false) {\r\n         * \t\t\t//check that column start is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnStart);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnStartLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnStart.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStart,\r\n         * \t\t\t\t\t\t\t\t\t\t       columnStartLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         *\r\n         * \t\tString columnEnd = variable.getColumnEnd();\r\n         * \t\tif (ValidationUtility.isBlank(columnEnd) == false) {\r\n         * \t\t\t//check that column end is an integer\r\n         * \t\t\ttry {\r\n         * \t\t\t\t//ensure that values are integers\r\n         * \t\t\t\tInteger.valueOf(columnEnd);\r\n         * \t\t\t}\r\n         * \t\t\tcatch(Exception exception) {\r\n         * \t\t\t\tString columnEndLabelText\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n         * \t\t\t\tString errorMessage\r\n         * \t\t\t\t\t= MacawMessages.getMessage(\"general.error.illegalNumber\",\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEnd,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\tcolumnEndLabelText);\r\n         * \t\t\t\terrorMessages.add(errorMessage);\r\n         * \t\t\t}\r\n         * \t\t}\r\n         */\r\n        //specify an alias\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getAlias()) == true) {\r\n         * \t\t\tString aliasLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.alias.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\taliasLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //specify a file name\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(variable.getFilePath()) == true) {\r\n         * \t\t\tString filePathLabelText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t\tfilePathLabelText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        return errorMessages;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable originalVariable, Variable revisedVariable) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String ownerVariableName = originalVariable.getDisplayName();\r\n        //detect changes in name\r\n        String oldName = originalVariable.getName();\r\n        String newName = revisedVariable.getName();\r\n        if (oldName.equals(newName) == false) {\r\n            oldName = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newName = ValidationUtility.convertEmptyValueToBlank(newName);\r\n            String nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, nameLabelText, oldName, newName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //=Changed variable {0}, field {1}, from {2} to {3}\r\n        //detect changes in label\r\n        String oldLabel = originalVariable.getLabel();\r\n        String newLabel = revisedVariable.getLabel();\r\n        if (oldLabel.equals(newLabel) == false) {\r\n            oldLabel = ValidationUtility.convertEmptyValueToBlank(oldName);\r\n            newLabel = ValidationUtility.convertEmptyValueToBlank(newLabel);\r\n            String labelLabelText = MacawMessages.getMessage(\"variable.label.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, labelLabelText, oldLabel, newLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in year\r\n        String oldYear = originalVariable.getYear();\r\n        String newYear = revisedVariable.getYear();\r\n        if (oldYear.equals(newYear) == false) {\r\n            oldYear = ValidationUtility.convertEmptyValueToBlank(oldYear);\r\n            newYear = ValidationUtility.convertEmptyValueToBlank(newYear);\r\n            String yearLabelText = MacawMessages.getMessage(\"variable.year.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, yearLabelText, oldYear, newYear);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in category\r\n        String originalCategory = originalVariable.getCategory();\r\n        String revisedCategory = revisedVariable.getCategory();\r\n        if (originalCategory.equals(revisedCategory) == false) {\r\n            originalCategory = ValidationUtility.convertEmptyValueToBlank(originalCategory);\r\n            revisedCategory = ValidationUtility.convertEmptyValueToBlank(revisedCategory);\r\n            String categoryLabelText = MacawMessages.getMessage(\"variable.category.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, categoryLabelText, originalCategory, revisedCategory);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCleaned = originalVariable.isCleaned();\r\n        boolean revisedIsCleaned = revisedVariable.isCleaned();\r\n        if ((originalIsCleaned != revisedIsCleaned) && (revisedIsCleaned == false)) {\r\n            String changedToNotCleaned = MacawMessages.getMessage(\"variable.isCleaned.saveChanges.changedToNotClean\", ownerVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changedToNotCleaned, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String oldCleaningChoice = originalVariable.getCleaningStatus();\r\n            String revisedCleaningChoice = revisedVariable.getCleaningStatus();\r\n            if (oldCleaningChoice.equals(revisedCleaningChoice) == false) {\r\n                oldCleaningChoice = ValidationUtility.convertEmptyValueToBlank(oldCleaningChoice);\r\n                revisedCleaningChoice = ValidationUtility.convertEmptyValueToBlank(revisedCleaningChoice);\r\n                String cleaningStatusText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningStatusText, oldCleaningChoice, revisedCleaningChoice);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n            String oldCleaningDescription = originalVariable.getCleaningDescription();\r\n            String revisedCleaningDescription = originalVariable.getCleaningDescription();\r\n            if (oldCleaningDescription.equals(revisedCleaningDescription) == false) {\r\n                oldCleaningDescription = ValidationUtility.convertEmptyValueToBlank(oldCleaningDescription);\r\n                revisedCleaningDescription = ValidationUtility.convertEmptyValueToBlank(revisedCleaningDescription);\r\n                String cleaningDescriptionText = MacawMessages.getMessage(\"variable.cleaningDescription.label\");\r\n                String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, cleaningDescriptionText, oldCleaningDescription, revisedCleaningDescription);\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n                changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        //detect changes in code book number\r\n        String originalCodeBookNumber = originalVariable.getCodeBookNumber();\r\n        String revisedCodeBookNumber = revisedVariable.getCodeBookNumber();\r\n        if (originalCodeBookNumber.equals(revisedCodeBookNumber) == false) {\r\n            originalCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(originalCodeBookNumber);\r\n            revisedCodeBookNumber = ValidationUtility.convertEmptyValueToBlank(revisedCodeBookNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.codeBookNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalCodeBookNumber, revisedCodeBookNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column start\r\n        String columnStartLabelText = MacawMessages.getMessage(\"variable.columnStart.label\");\r\n        String originalColumnStart = originalVariable.getColumnStart();\r\n        if (originalColumnStart == null) {\r\n            originalColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnStart = revisedVariable.getColumnStart();\r\n        if (revisedColumnStart == null) {\r\n            revisedColumnStart = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnStart.equals(revisedColumnStart) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnStartLabelText, originalColumnStart, revisedColumnStart);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //detect changes in column end\r\n        String columnEndLabelText = MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n        String originalColumnEnd = originalVariable.getColumnEnd();\r\n        if (originalColumnEnd.equals(\"\") == true) {\r\n            originalColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        String revisedColumnEnd = revisedVariable.getColumnEnd();\r\n        if (revisedColumnEnd.equals(\"\") == true) {\r\n            revisedColumnEnd = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n        }\r\n        if (originalColumnEnd.equals(revisedColumnEnd) == false) {\r\n            //change occured\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, columnEndLabelText, originalColumnEnd, revisedColumnEnd);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check alias\r\n        String oldAlias = originalVariable.getAlias();\r\n        String newAlias = revisedVariable.getAlias();\r\n        if (oldAlias.equals(newAlias) == false) {\r\n            oldAlias = ValidationUtility.convertEmptyValueToBlank(oldAlias);\r\n            newAlias = ValidationUtility.convertEmptyValueToBlank(newAlias);\r\n            String aliasText = MacawMessages.getMessage(\"variable.alias.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, aliasText, oldAlias, newAlias);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        //check file name\r\n        /**\r\n         * \t\tString oldFilePath = originalVariable.getFilePath();\r\n         * \t\tString newFilePath = revisedVariable.getFilePath();\r\n         * \t\tif (oldFilePath.equals(newFilePath) == false) {\r\n         * \t\t\toldFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(oldFilePath);\r\n         * \t\t\tnewFilePath\r\n         * \t\t\t\t= ValidationUtility.convertEmptyValueToBlank(newFilePath);\r\n         *\r\n         * \t\t\tString filePathText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.filePath.label\");\r\n         * \t\t\tString fieldChangedMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n         * \t\t\t\t\t\t\t\t\t\t   ownerVariableName,\r\n         * \t\t\t\t\t\t\t\t\t\t   filePathText,\r\n         * \t\t\t\t\t\t\t\t\t\t   oldFilePath,\r\n         * \t\t\t\t\t\t\t\t\t\t   newFilePath);\r\n         * \t\t\tMacawChangeEvent changeEvent\r\n         * \t\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n         * \t\t\t\t\t\t\t\t\t   fieldChangedMessage,\r\n         * \t\t\t\t\t\t\t\t\t   userID);\r\n         * \t\t\tchangeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        String oldAvailability = originalVariable.getAvailability();\r\n        String revisedAvailability = revisedVariable.getAvailability();\r\n        if (oldAvailability.equals(revisedAvailability) == false) {\r\n            oldAvailability = ValidationUtility.convertEmptyValueToBlank(oldAvailability);\r\n            revisedAvailability = ValidationUtility.convertEmptyValueToBlank(revisedAvailability);\r\n            String availabilityText = MacawMessages.getMessage(\"variable.availability.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, availabilityText, oldAvailability, revisedAvailability);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsCoded = originalVariable.isCoded();\r\n        boolean revisedIsCoded = revisedVariable.isCoded();\r\n        if (originalIsCoded != revisedIsCoded) {\r\n            String oldIsCodedValue = Boolean.toString(originalIsCoded);\r\n            String revisedIsCodedValue = Boolean.toString(revisedIsCoded);\r\n            String isCodedLabel = MacawMessages.getMessage(\"variable.isCoded.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, isCodedLabel, oldIsCodedValue, revisedIsCodedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalForm = originalVariable.getForm();\r\n        String revisedForm = revisedVariable.getForm();\r\n        if (originalForm.equals(revisedForm) == false) {\r\n            originalForm = ValidationUtility.convertEmptyValueToBlank(originalForm);\r\n            revisedForm = ValidationUtility.convertEmptyValueToBlank(revisedForm);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.form.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalForm, revisedForm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalQuestionNumber = originalVariable.getQuestionNumber();\r\n        String revisedQuestionNumber = revisedVariable.getQuestionNumber();\r\n        if (originalQuestionNumber.equals(revisedQuestionNumber) == false) {\r\n            originalQuestionNumber = ValidationUtility.convertEmptyValueToBlank(originalQuestionNumber);\r\n            revisedQuestionNumber = ValidationUtility.convertEmptyValueToBlank(revisedQuestionNumber);\r\n            String formLabelText = MacawMessages.getMessage(\"variable.questionNumber.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, formLabelText, originalQuestionNumber, revisedQuestionNumber);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalNotes = originalVariable.getNotes();\r\n        String revisedNotes = revisedVariable.getNotes();\r\n        if (originalNotes.equals(revisedNotes) == false) {\r\n            originalNotes = ValidationUtility.convertEmptyValueToBlank(originalNotes);\r\n            revisedNotes = ValidationUtility.convertEmptyValueToBlank(revisedNotes);\r\n            String notesLabelText = MacawMessages.getMessage(\"variable.notes.label\");\r\n            String fieldChangedMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", ownerVariableName, notesLabelText, originalNotes, revisedNotes);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, fieldChangedMessage, userID);\r\n            changeEvent.setVariableOwnerID(originalVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        /**\r\n         * \t\tMacawChangeEvent changeEvent\r\n         * \t\t\t= detectChangesInAlternativeVariable(user,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t originalVariable,\r\n         * \t\t\t\t\t\t\t\t\t\t\t\t revisedVariable);\r\n         * \t\tif (changeEvent != null) {\r\n         * \t\t\tchangeEvents.add(changeEvent);\r\n         * \t\t}\r\n         */\r\n        return changeEvents;\r\n    }\r\n\r\n    static public MacawChangeEvent detectChangesInAlternativeVariable(User user, Variable originalVariable, Variable revisedAlternativeVariable) {\r\n        Variable oldAlternativeVariable = originalVariable.getAlternativeVariable();\r\n        boolean alternativeVariableChanged = false;\r\n        if ((oldAlternativeVariable == null) && (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = false;\r\n        } else if ((oldAlternativeVariable == null) || (revisedAlternativeVariable == null)) {\r\n            alternativeVariableChanged = true;\r\n        } else {\r\n            //both are non-null\r\n            if (oldAlternativeVariable.getIdentifier() == revisedAlternativeVariable.getIdentifier()) {\r\n                alternativeVariableChanged = true;\r\n            } else {\r\n                alternativeVariableChanged = false;\r\n            }\r\n        }\r\n        if (alternativeVariableChanged == true) {\r\n            String blankFieldValue = MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n            String fieldName = MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n            String oldAlternativeVariableName = blankFieldValue;\r\n            if (oldAlternativeVariable != null) {\r\n                oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n            }\r\n            String revisedAlternativeVariableName = blankFieldValue;\r\n            if (revisedAlternativeVariable != null) {\r\n                revisedAlternativeVariableName = revisedAlternativeVariable.getDisplayName();\r\n            }\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.valueChanged\", fieldName, oldAlternativeVariableName, revisedAlternativeVariableName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            int targetVariableID = originalVariable.getIdentifier();\r\n            changeEvent.setVariableOwnerID(targetVariableID);\r\n            changeEvent.setChangedObjectIdentifier(targetVariableID);\r\n            return changeEvent;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        return getName();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Clonable\r\n    abstract public Object clone();\r\n\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    protected void cloneAttributes(Variable cloneVariable) {\r\n        cloneVariable.setIdentifier(identifier);\r\n        cloneVariable.setCategory(category);\r\n        cloneVariable.setName(name);\r\n        cloneVariable.setLabel(label);\r\n        cloneVariable.setForm(form);\r\n        cloneVariable.setQuestionNumber(questionNumber);\r\n        cloneVariable.setYear(year);\r\n        cloneVariable.setCleaned(isCleaned);\r\n        cloneVariable.setCoded(isCoded);\r\n        cloneVariable.setCleaningStatus(cleaningStatus);\r\n        cloneVariable.setCleaningDescription(cleaningDescription);\r\n        cloneVariable.setCodeBookNumber(codeBookNumber);\r\n        cloneVariable.setColumnStart(columnStart);\r\n        cloneVariable.setColumnEnd(columnEnd);\r\n        cloneVariable.setAvailability(availability);\r\n        for (ValueLabel valueLabel : valueLabels) {\r\n            ValueLabel clonedValueLabel = (ValueLabel) valueLabel.clone();\r\n            cloneVariable.addValueLabel(clonedValueLabel);\r\n        }\r\n        cloneVariable.setAlias(alias);\r\n        cloneVariable.setFilePath(filePath);\r\n        cloneVariable.setIsNewRecord(isNewRecord);\r\n        //make copies of references to supporting documents\r\n        ArrayList<SupportingDocument> cloneSupportingDocuments = new ArrayList<SupportingDocument>();\r\n        for (SupportingDocument supportingDocument : supportingDocuments) {\r\n            cloneSupportingDocuments.add((SupportingDocument) supportingDocument.clone());\r\n        }\r\n        cloneVariable.setSupportingDocuments(cloneSupportingDocuments);\r\n        ArrayList<OntologyTerm> cloneOntologyTerms = new ArrayList<OntologyTerm>();\r\n        for (OntologyTerm ontologyTerm : ontologyTerms) {\r\n            cloneOntologyTerms.add((OntologyTerm) ontologyTerm.clone());\r\n        }\r\n        cloneVariable.setOntologyTerms(cloneOntologyTerms);\r\n        //we don't need\r\n        if (alternativeVariable != null) {\r\n            Variable cloneAlternativeVariable = (Variable) alternativeVariable.clone();\r\n            cloneVariable.setAlternativeVariable(cloneAlternativeVariable);\r\n        }\r\n        cloneVariable.setNotes(notes);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/VariableTest7.java",
		"test_prompt": "// VariableTest7.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Variable}.\n* It contains ten unit test cases for the {@link Variable#detectChangesInAlternativeVariable(User, Variable, Variable)} method.\n*/\nclass VariableTest7 {"
	},
	{
		"original_code": "// SupportingDocument.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes a document used to provide background information about\r\n * a derived variable.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class SupportingDocument implements Displayable, Cloneable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String title;\r\n\r\n    private String documentCode;\r\n\r\n    private String description;\r\n\r\n    private String fileName;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public SupportingDocument() {\r\n        identifier = 0;\r\n        title = \"\";\r\n        documentCode = \"\";\r\n        description = \"\";\r\n        fileName = \"\";\r\n        filePath = \"\";\r\n        isNewRecord = false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * the primary key value of the instance stored in the relational database.\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * title of the document\r\n     * @return the title\r\n     */\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n\r\n    /**\r\n     * @param title the title to set\r\n     */\r\n    public void setTitle(String title) {\r\n        this.title = title;\r\n    }\r\n\r\n    /**\r\n     * a code used to help uniquely identify a document for the end-user.\r\n     * Two documents could have the same title but be published in different\r\n     * years or by different authors.  The purpose of the code is simply to\r\n     * uniquely identify records in a list of displayed documents.\r\n     * @return the documentCode\r\n     */\r\n    public String getDocumentCode() {\r\n        return documentCode;\r\n    }\r\n\r\n    /**\r\n     * @param documentCode the documentCode to set\r\n     */\r\n    public void setDocumentCode(String documentCode) {\r\n        this.documentCode = documentCode;\r\n    }\r\n\r\n    /**\r\n     * description of the document\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * @param description the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * name of the file\r\n     * @return the fileName\r\n     */\r\n    public String getFileName() {\r\n        return fileName;\r\n    }\r\n\r\n    /**\r\n     * @param fileName the fileName to set\r\n     */\r\n    public void setFileName(String fileName) {\r\n        this.fileName = fileName;\r\n    }\r\n\r\n    /**\r\n     * the logical location of the file\r\n     * @return the filePath\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the filePath to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    public void setIsNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(SupportingDocument supportingDocument) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //check that the title has been filled in\r\n        String title = supportingDocument.getTitle();\r\n        if (ValidationUtility.isBlank(title) == true) {\r\n            String titleNameText = MacawMessages.getMessage(\"supportingDocument.title.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", titleNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /*\r\n\t\tif (ValidationUtility.promotesSecurityRisk(title) == true) {\t\r\n\t\t\tString titleNameText \r\n\t\t\t\t= MacawMessages.getMessage(\"supportingDocument.title.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.promotesSecurityRisk\",\r\n\t\t\t\t\t\t\t\t\t\t\ttitleNameText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        String documentCode = supportingDocument.getDocumentCode();\r\n        if (ValidationUtility.isBlank(documentCode) == true) {\r\n            String documentCodeNameText = MacawMessages.getMessage(\"supportingDocument.documentCode.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", documentCodeNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /*\r\n\t\tString filePath = supportingDocument.getFilePath();\r\n\t\tif (ValidationUtility.isBlank(filePath) == true) {\t\r\n\t\t\tString filePathNameText = MacawMessages.getMessage(\"supportingDocument.filePath.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t\tfilePathNameText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        String fileName = supportingDocument.getFileName();\r\n        if (ValidationUtility.isBlank(fileName) == true) {\r\n            String fileNameText = MacawMessages.getMessage(\"supportingDocument.fileName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", fileNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_SUPPORTING_DOCUMENT, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(title);\r\n        buffer.append(\"-\");\r\n        buffer.append(documentCode);\r\n        return buffer.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        SupportingDocument cloneDocument = new SupportingDocument();\r\n        cloneDocument.setIdentifier(identifier);\r\n        cloneDocument.setTitle(title);\r\n        cloneDocument.setDocumentCode(documentCode);\r\n        cloneDocument.setDescription(description);\r\n        cloneDocument.setFileName(fileName);\r\n        cloneDocument.setFilePath(filePath);\r\n        return cloneDocument;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, SupportingDocument originalDocument, SupportingDocument revisedDocument) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String oldTitle = originalDocument.getTitle();\r\n        String newTitle = revisedDocument.getTitle();\r\n        if (oldTitle.equals(newTitle) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"supportingDocument.title.saveChanges\", oldTitle, newTitle);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedTitleMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldDocumentCode = originalDocument.getDocumentCode();\r\n        String newDocumentCode = revisedDocument.getDocumentCode();\r\n        if (oldDocumentCode.equals(newDocumentCode) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"supportingDocument.documentCode.saveChanges\", oldDocumentCode, newDocumentCode);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedTitleMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldDescription = originalDocument.getDescription();\r\n        String newDescription = revisedDocument.getDescription();\r\n        if (oldDescription.equals(newDescription) == false) {\r\n            String changedDescriptionMessage = MacawMessages.getMessage(\"supportingDocument.description.saveChanges\", oldDescription, newDescription);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedDescriptionMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldFileName = originalDocument.getFileName();\r\n        String newFileName = revisedDocument.getFileName();\r\n        if (oldFileName.equals(newFileName) == false) {\r\n            String changedFileNameMessage = MacawMessages.getMessage(\"supportingDocument.fileName.saveChanges\", oldFileName, newFileName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedFileNameMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldFilePath = originalDocument.getFilePath();\r\n        String newFilePath = revisedDocument.getFilePath();\r\n        if (oldFilePath.equals(newFilePath) == false) {\r\n            String changedFileNameMessage = MacawMessages.getMessage(\"supportingDocument.filePath.saveChanges\", oldFilePath, newFilePath);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedFileNameMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/SupportingDocumentTest0.java",
		"test_prompt": "// SupportingDocumentTest0.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SupportingDocument}.\n* It contains ten unit test cases for the {@link SupportingDocument#isNewRecord()} method.\n*/\nclass SupportingDocumentTest0 {"
	},
	{
		"original_code": "// SupportingDocument.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes a document used to provide background information about\r\n * a derived variable.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class SupportingDocument implements Displayable, Cloneable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String title;\r\n\r\n    private String documentCode;\r\n\r\n    private String description;\r\n\r\n    private String fileName;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public SupportingDocument() {\r\n        identifier = 0;\r\n        title = \"\";\r\n        documentCode = \"\";\r\n        description = \"\";\r\n        fileName = \"\";\r\n        filePath = \"\";\r\n        isNewRecord = false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * the primary key value of the instance stored in the relational database.\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * title of the document\r\n     * @return the title\r\n     */\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n\r\n    /**\r\n     * @param title the title to set\r\n     */\r\n    public void setTitle(String title) {\r\n        this.title = title;\r\n    }\r\n\r\n    /**\r\n     * a code used to help uniquely identify a document for the end-user.\r\n     * Two documents could have the same title but be published in different\r\n     * years or by different authors.  The purpose of the code is simply to\r\n     * uniquely identify records in a list of displayed documents.\r\n     * @return the documentCode\r\n     */\r\n    public String getDocumentCode() {\r\n        return documentCode;\r\n    }\r\n\r\n    /**\r\n     * @param documentCode the documentCode to set\r\n     */\r\n    public void setDocumentCode(String documentCode) {\r\n        this.documentCode = documentCode;\r\n    }\r\n\r\n    /**\r\n     * description of the document\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * @param description the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * name of the file\r\n     * @return the fileName\r\n     */\r\n    public String getFileName() {\r\n        return fileName;\r\n    }\r\n\r\n    /**\r\n     * @param fileName the fileName to set\r\n     */\r\n    public void setFileName(String fileName) {\r\n        this.fileName = fileName;\r\n    }\r\n\r\n    /**\r\n     * the logical location of the file\r\n     * @return the filePath\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the filePath to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    public void setIsNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(SupportingDocument supportingDocument) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //check that the title has been filled in\r\n        String title = supportingDocument.getTitle();\r\n        if (ValidationUtility.isBlank(title) == true) {\r\n            String titleNameText = MacawMessages.getMessage(\"supportingDocument.title.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", titleNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /*\r\n\t\tif (ValidationUtility.promotesSecurityRisk(title) == true) {\t\r\n\t\t\tString titleNameText \r\n\t\t\t\t= MacawMessages.getMessage(\"supportingDocument.title.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.promotesSecurityRisk\",\r\n\t\t\t\t\t\t\t\t\t\t\ttitleNameText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        String documentCode = supportingDocument.getDocumentCode();\r\n        if (ValidationUtility.isBlank(documentCode) == true) {\r\n            String documentCodeNameText = MacawMessages.getMessage(\"supportingDocument.documentCode.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", documentCodeNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /*\r\n\t\tString filePath = supportingDocument.getFilePath();\r\n\t\tif (ValidationUtility.isBlank(filePath) == true) {\t\r\n\t\t\tString filePathNameText = MacawMessages.getMessage(\"supportingDocument.filePath.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t\tfilePathNameText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        String fileName = supportingDocument.getFileName();\r\n        if (ValidationUtility.isBlank(fileName) == true) {\r\n            String fileNameText = MacawMessages.getMessage(\"supportingDocument.fileName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", fileNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_SUPPORTING_DOCUMENT, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(title);\r\n        buffer.append(\"-\");\r\n        buffer.append(documentCode);\r\n        return buffer.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        SupportingDocument cloneDocument = new SupportingDocument();\r\n        cloneDocument.setIdentifier(identifier);\r\n        cloneDocument.setTitle(title);\r\n        cloneDocument.setDocumentCode(documentCode);\r\n        cloneDocument.setDescription(description);\r\n        cloneDocument.setFileName(fileName);\r\n        cloneDocument.setFilePath(filePath);\r\n        return cloneDocument;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, SupportingDocument originalDocument, SupportingDocument revisedDocument) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String oldTitle = originalDocument.getTitle();\r\n        String newTitle = revisedDocument.getTitle();\r\n        if (oldTitle.equals(newTitle) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"supportingDocument.title.saveChanges\", oldTitle, newTitle);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedTitleMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldDocumentCode = originalDocument.getDocumentCode();\r\n        String newDocumentCode = revisedDocument.getDocumentCode();\r\n        if (oldDocumentCode.equals(newDocumentCode) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"supportingDocument.documentCode.saveChanges\", oldDocumentCode, newDocumentCode);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedTitleMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldDescription = originalDocument.getDescription();\r\n        String newDescription = revisedDocument.getDescription();\r\n        if (oldDescription.equals(newDescription) == false) {\r\n            String changedDescriptionMessage = MacawMessages.getMessage(\"supportingDocument.description.saveChanges\", oldDescription, newDescription);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedDescriptionMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldFileName = originalDocument.getFileName();\r\n        String newFileName = revisedDocument.getFileName();\r\n        if (oldFileName.equals(newFileName) == false) {\r\n            String changedFileNameMessage = MacawMessages.getMessage(\"supportingDocument.fileName.saveChanges\", oldFileName, newFileName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedFileNameMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldFilePath = originalDocument.getFilePath();\r\n        String newFilePath = revisedDocument.getFilePath();\r\n        if (oldFilePath.equals(newFilePath) == false) {\r\n            String changedFileNameMessage = MacawMessages.getMessage(\"supportingDocument.filePath.saveChanges\", oldFilePath, newFilePath);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedFileNameMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/SupportingDocumentTest1.java",
		"test_prompt": "// SupportingDocumentTest1.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SupportingDocument}.\n* It contains ten unit test cases for the {@link SupportingDocument#clone()} method.\n*/\nclass SupportingDocumentTest1 {"
	},
	{
		"original_code": "// SupportingDocument.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes a document used to provide background information about\r\n * a derived variable.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class SupportingDocument implements Displayable, Cloneable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String title;\r\n\r\n    private String documentCode;\r\n\r\n    private String description;\r\n\r\n    private String fileName;\r\n\r\n    private String filePath;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public SupportingDocument() {\r\n        identifier = 0;\r\n        title = \"\";\r\n        documentCode = \"\";\r\n        description = \"\";\r\n        fileName = \"\";\r\n        filePath = \"\";\r\n        isNewRecord = false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * the primary key value of the instance stored in the relational database.\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * title of the document\r\n     * @return the title\r\n     */\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n\r\n    /**\r\n     * @param title the title to set\r\n     */\r\n    public void setTitle(String title) {\r\n        this.title = title;\r\n    }\r\n\r\n    /**\r\n     * a code used to help uniquely identify a document for the end-user.\r\n     * Two documents could have the same title but be published in different\r\n     * years or by different authors.  The purpose of the code is simply to\r\n     * uniquely identify records in a list of displayed documents.\r\n     * @return the documentCode\r\n     */\r\n    public String getDocumentCode() {\r\n        return documentCode;\r\n    }\r\n\r\n    /**\r\n     * @param documentCode the documentCode to set\r\n     */\r\n    public void setDocumentCode(String documentCode) {\r\n        this.documentCode = documentCode;\r\n    }\r\n\r\n    /**\r\n     * description of the document\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * @param description the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * name of the file\r\n     * @return the fileName\r\n     */\r\n    public String getFileName() {\r\n        return fileName;\r\n    }\r\n\r\n    /**\r\n     * @param fileName the fileName to set\r\n     */\r\n    public void setFileName(String fileName) {\r\n        this.fileName = fileName;\r\n    }\r\n\r\n    /**\r\n     * the logical location of the file\r\n     * @return the filePath\r\n     */\r\n    public String getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    /**\r\n     * @param filePath the filePath to set\r\n     */\r\n    public void setFilePath(String filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    public void setIsNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(SupportingDocument supportingDocument) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //check that the title has been filled in\r\n        String title = supportingDocument.getTitle();\r\n        if (ValidationUtility.isBlank(title) == true) {\r\n            String titleNameText = MacawMessages.getMessage(\"supportingDocument.title.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", titleNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /*\r\n\t\tif (ValidationUtility.promotesSecurityRisk(title) == true) {\t\r\n\t\t\tString titleNameText \r\n\t\t\t\t= MacawMessages.getMessage(\"supportingDocument.title.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.promotesSecurityRisk\",\r\n\t\t\t\t\t\t\t\t\t\t\ttitleNameText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        String documentCode = supportingDocument.getDocumentCode();\r\n        if (ValidationUtility.isBlank(documentCode) == true) {\r\n            String documentCodeNameText = MacawMessages.getMessage(\"supportingDocument.documentCode.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", documentCodeNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        /*\r\n\t\tString filePath = supportingDocument.getFilePath();\r\n\t\tif (ValidationUtility.isBlank(filePath) == true) {\t\r\n\t\t\tString filePathNameText = MacawMessages.getMessage(\"supportingDocument.filePath.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t\tfilePathNameText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        String fileName = supportingDocument.getFileName();\r\n        if (ValidationUtility.isBlank(fileName) == true) {\r\n            String fileNameText = MacawMessages.getMessage(\"supportingDocument.fileName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", fileNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_SUPPORTING_DOCUMENT, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(title);\r\n        buffer.append(\"-\");\r\n        buffer.append(documentCode);\r\n        return buffer.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        SupportingDocument cloneDocument = new SupportingDocument();\r\n        cloneDocument.setIdentifier(identifier);\r\n        cloneDocument.setTitle(title);\r\n        cloneDocument.setDocumentCode(documentCode);\r\n        cloneDocument.setDescription(description);\r\n        cloneDocument.setFileName(fileName);\r\n        cloneDocument.setFilePath(filePath);\r\n        return cloneDocument;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, SupportingDocument originalDocument, SupportingDocument revisedDocument) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String oldTitle = originalDocument.getTitle();\r\n        String newTitle = revisedDocument.getTitle();\r\n        if (oldTitle.equals(newTitle) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"supportingDocument.title.saveChanges\", oldTitle, newTitle);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedTitleMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldDocumentCode = originalDocument.getDocumentCode();\r\n        String newDocumentCode = revisedDocument.getDocumentCode();\r\n        if (oldDocumentCode.equals(newDocumentCode) == false) {\r\n            String changedTitleMessage = MacawMessages.getMessage(\"supportingDocument.documentCode.saveChanges\", oldDocumentCode, newDocumentCode);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedTitleMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldDescription = originalDocument.getDescription();\r\n        String newDescription = revisedDocument.getDescription();\r\n        if (oldDescription.equals(newDescription) == false) {\r\n            String changedDescriptionMessage = MacawMessages.getMessage(\"supportingDocument.description.saveChanges\", oldDescription, newDescription);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedDescriptionMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldFileName = originalDocument.getFileName();\r\n        String newFileName = revisedDocument.getFileName();\r\n        if (oldFileName.equals(newFileName) == false) {\r\n            String changedFileNameMessage = MacawMessages.getMessage(\"supportingDocument.fileName.saveChanges\", oldFileName, newFileName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedFileNameMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldFilePath = originalDocument.getFilePath();\r\n        String newFilePath = revisedDocument.getFilePath();\r\n        if (oldFilePath.equals(newFilePath) == false) {\r\n            String changedFileNameMessage = MacawMessages.getMessage(\"supportingDocument.filePath.saveChanges\", oldFilePath, newFilePath);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changedFileNameMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/SupportingDocumentTest2.java",
		"test_prompt": "// SupportingDocumentTest2.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SupportingDocument}.\n* It contains ten unit test cases for the {@link SupportingDocument#detectFieldChanges(User, SupportingDocument, SupportingDocument)} method.\n*/\nclass SupportingDocumentTest2 {"
	},
	{
		"original_code": "// AvailabilityState.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes which kinds of users can access a variable\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class AvailabilityState extends MacawListChoice {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public AvailabilityState(int identifier, String status) {\r\n        super(identifier, status);\r\n    }\r\n\r\n    public AvailabilityState(String status) {\r\n        super(status);\r\n    }\r\n\r\n    public AvailabilityState() {\r\n        super();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, AvailabilityState originalAvailabilityState, AvailabilityState revisedAvailabilityState) {\r\n        return MacawListChoice.detectFieldChanges(user, \"availabilityState.saveChanges.changedValue\", originalAvailabilityState, revisedAvailabilityState);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static public void validateFields(AvailabilityState availabilityState) throws MacawException {\r\n        ArrayList<String> errorMessages = MacawListChoice.validateFields(availabilityState);\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_AVAILABILITY_STATE, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public Object clone() {\r\n        AvailabilityState cloneAvailabilityStatus = new AvailabilityState();\r\n        super.cloneAttributes(cloneAvailabilityStatus);\r\n        return cloneAvailabilityStatus;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/AvailabilityStateTest0.java",
		"test_prompt": "// AvailabilityStateTest0.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AvailabilityState}.\n* It contains ten unit test cases for the {@link AvailabilityState#detectFieldChanges(User, AvailabilityState, AvailabilityState)} method.\n*/\nclass AvailabilityStateTest0 {"
	},
	{
		"original_code": "// AvailabilityState.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes which kinds of users can access a variable\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class AvailabilityState extends MacawListChoice {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public AvailabilityState(int identifier, String status) {\r\n        super(identifier, status);\r\n    }\r\n\r\n    public AvailabilityState(String status) {\r\n        super(status);\r\n    }\r\n\r\n    public AvailabilityState() {\r\n        super();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, AvailabilityState originalAvailabilityState, AvailabilityState revisedAvailabilityState) {\r\n        return MacawListChoice.detectFieldChanges(user, \"availabilityState.saveChanges.changedValue\", originalAvailabilityState, revisedAvailabilityState);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static public void validateFields(AvailabilityState availabilityState) throws MacawException {\r\n        ArrayList<String> errorMessages = MacawListChoice.validateFields(availabilityState);\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_AVAILABILITY_STATE, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public Object clone() {\r\n        AvailabilityState cloneAvailabilityStatus = new AvailabilityState();\r\n        super.cloneAttributes(cloneAvailabilityStatus);\r\n        return cloneAvailabilityStatus;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/AvailabilityStateTest1.java",
		"test_prompt": "// AvailabilityStateTest1.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AvailabilityState}.\n* It contains ten unit test cases for the {@link AvailabilityState#clone()} method.\n*/\nclass AvailabilityStateTest1 {"
	},
	{
		"original_code": "// OntologyTerm.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\nimport macaw.util.*;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class OntologyTerm implements Displayable, Cloneable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String term;\r\n\r\n    private String ontologyName;\r\n\r\n    private String description;\r\n\r\n    private String nameSpace;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public OntologyTerm() {\r\n        identifier = 0;\r\n        term = \"\";\r\n        ontologyName = \"LHA\";\r\n        description = \"\";\r\n        nameSpace = \"lha.mrc.ac.uk:LHA\";\r\n        isNewRecord = true;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * a unique numeric identifier that is used by software clients\r\n     * to manage the term eg: 10453.\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * a phrase that represents a concept to the user eg: �sex�\r\n     * @return the term\r\n     */\r\n    public String getTerm() {\r\n        return term;\r\n    }\r\n\r\n    /**\r\n     * @param term the term to set\r\n     */\r\n    public void setTerm(String term) {\r\n        this.term = term;\r\n    }\r\n\r\n    /**\r\n     * the name of an ontology to which this term belongs.\r\n     * eg: �The LHA dictionary�\r\n     * @return the ontologyName\r\n     */\r\n    public String getOntologyName() {\r\n        return ontologyName;\r\n    }\r\n\r\n    /**\r\n     * @param ontologyName the ontologyName to set\r\n     */\r\n    public void setOntologyName(String ontologyName) {\r\n        this.ontologyName = ontologyName;\r\n    }\r\n\r\n    /**\r\n     * the meaning of the phrase eg: �a person�s gender�\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * @param description the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * a URI fragment that is used to uniquely identify ontology\r\n     * concepts for software clients eg: www.nshd.mrc.ac.uk:LHA/variables\r\n     * @return the nameSpace\r\n     */\r\n    public String getNameSpace() {\r\n        return nameSpace;\r\n    }\r\n\r\n    /**\r\n     * @param nameSpace the nameSpace to set\r\n     */\r\n    public void setNameSpace(String nameSpace) {\r\n        this.nameSpace = nameSpace;\r\n    }\r\n\r\n    /**\r\n     * @return the isNewRecord\r\n     */\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * @param isNewRecord the isNewRecord to set\r\n     */\r\n    public void setNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(OntologyTerm ontologyTerm) {\r\n        if (term.equals(ontologyTerm.getTerm()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(OntologyTerm ontologyTerm) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //check that the term has been filled in\r\n        String term = ontologyTerm.getTerm();\r\n        if (ValidationUtility.isBlank(term) == true) {\r\n            String termText = MacawMessages.getMessage(\"ontologyTerm.term.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", termText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //check that the field value avoids potential security errors\r\n        if (ValidationUtility.promotesSecurityRisk(term) == true) {\r\n            String termText = MacawMessages.getMessage(\"ontologyTerm.term.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", termText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //ensure that ontology name has been filled in.  This will be used in displaying\r\n        //term to user\r\n        String ontologyName = ontologyTerm.getOntologyName();\r\n        if (ValidationUtility.isBlank(ontologyName) == true) {\r\n            String ontologyNameText = MacawMessages.getMessage(\"ontologyTerm.ontologyName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", ontologyNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //check that the field value avoids potential security errors\r\n        if (ValidationUtility.promotesSecurityRisk(ontologyName) == true) {\r\n            String ontologyNameText = MacawMessages.getMessage(\"ontologyTerm.ontologyName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", ontologyNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //ensure that namespace is present; this will be used by software services\r\n        if (ValidationUtility.isBlank(ontologyTerm.getNameSpace()) == true) {\r\n            String nameSpaceText = MacawMessages.getMessage(\"ontologyTerm.nameSpace.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", nameSpaceText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_ONTOLOGY_TERM, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, OntologyTerm originalOntologyTerm, OntologyTerm revisedOntologyTerm) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String oldTerm = originalOntologyTerm.getTerm();\r\n        String newTerm = revisedOntologyTerm.getTerm();\r\n        if (oldTerm.equals(newTerm) == false) {\r\n            oldTerm = ValidationUtility.convertEmptyValueToBlank(oldTerm);\r\n            newTerm = ValidationUtility.convertEmptyValueToBlank(newTerm);\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.term.saveChanges\", oldTerm, newTerm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldOntologyName = originalOntologyTerm.getOntologyName();\r\n        String newOntologyName = revisedOntologyTerm.getOntologyName();\r\n        if (oldOntologyName.equals(newOntologyName) == false) {\r\n            oldOntologyName = ValidationUtility.convertEmptyValueToBlank(oldOntologyName);\r\n            newOntologyName = ValidationUtility.convertEmptyValueToBlank(newOntologyName);\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.ontologyName.saveChanges\", oldOntologyName, newOntologyName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldNameSpace = originalOntologyTerm.getNameSpace();\r\n        String newNameSpace = revisedOntologyTerm.getNameSpace();\r\n        if (oldNameSpace.equals(newNameSpace) == false) {\r\n            oldNameSpace = ValidationUtility.convertEmptyValueToBlank(oldNameSpace);\r\n            newNameSpace = ValidationUtility.convertEmptyValueToBlank(newNameSpace);\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.term.saveChanges\", oldTerm, newTerm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldDescription = originalOntologyTerm.getDescription();\r\n        String newDescription = revisedOntologyTerm.getDescription();\r\n        if (oldDescription.equals(newDescription) == false) {\r\n            oldDescription = ValidationUtility.convertEmptyValueToBlank(oldDescription);\r\n            newDescription = ValidationUtility.convertEmptyValueToBlank(newDescription);\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.description.saveChanges\", oldDescription, newDescription);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder displayName = new StringBuilder();\r\n        displayName.append(term);\r\n        displayName.append(\"-\");\r\n        displayName.append(ontologyName);\r\n        return displayName.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    public Object clone() {\r\n        OntologyTerm cloneTerm = new OntologyTerm();\r\n        cloneTerm.setIdentifier(identifier);\r\n        cloneTerm.setOntologyName(ontologyName);\r\n        cloneTerm.setNameSpace(nameSpace);\r\n        cloneTerm.setTerm(term);\r\n        cloneTerm.setDescription(description);\r\n        cloneTerm.setNewRecord(isNewRecord);\r\n        return cloneTerm;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/OntologyTermTest0.java",
		"test_prompt": "// OntologyTermTest0.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport macaw.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OntologyTerm}.\n* It contains ten unit test cases for the {@link OntologyTerm#isNewRecord()} method.\n*/\nclass OntologyTermTest0 {"
	},
	{
		"original_code": "// OntologyTerm.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\nimport macaw.util.*;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class OntologyTerm implements Displayable, Cloneable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String term;\r\n\r\n    private String ontologyName;\r\n\r\n    private String description;\r\n\r\n    private String nameSpace;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public OntologyTerm() {\r\n        identifier = 0;\r\n        term = \"\";\r\n        ontologyName = \"LHA\";\r\n        description = \"\";\r\n        nameSpace = \"lha.mrc.ac.uk:LHA\";\r\n        isNewRecord = true;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * a unique numeric identifier that is used by software clients\r\n     * to manage the term eg: 10453.\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * a phrase that represents a concept to the user eg: �sex�\r\n     * @return the term\r\n     */\r\n    public String getTerm() {\r\n        return term;\r\n    }\r\n\r\n    /**\r\n     * @param term the term to set\r\n     */\r\n    public void setTerm(String term) {\r\n        this.term = term;\r\n    }\r\n\r\n    /**\r\n     * the name of an ontology to which this term belongs.\r\n     * eg: �The LHA dictionary�\r\n     * @return the ontologyName\r\n     */\r\n    public String getOntologyName() {\r\n        return ontologyName;\r\n    }\r\n\r\n    /**\r\n     * @param ontologyName the ontologyName to set\r\n     */\r\n    public void setOntologyName(String ontologyName) {\r\n        this.ontologyName = ontologyName;\r\n    }\r\n\r\n    /**\r\n     * the meaning of the phrase eg: �a person�s gender�\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * @param description the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * a URI fragment that is used to uniquely identify ontology\r\n     * concepts for software clients eg: www.nshd.mrc.ac.uk:LHA/variables\r\n     * @return the nameSpace\r\n     */\r\n    public String getNameSpace() {\r\n        return nameSpace;\r\n    }\r\n\r\n    /**\r\n     * @param nameSpace the nameSpace to set\r\n     */\r\n    public void setNameSpace(String nameSpace) {\r\n        this.nameSpace = nameSpace;\r\n    }\r\n\r\n    /**\r\n     * @return the isNewRecord\r\n     */\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * @param isNewRecord the isNewRecord to set\r\n     */\r\n    public void setNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(OntologyTerm ontologyTerm) {\r\n        if (term.equals(ontologyTerm.getTerm()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(OntologyTerm ontologyTerm) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //check that the term has been filled in\r\n        String term = ontologyTerm.getTerm();\r\n        if (ValidationUtility.isBlank(term) == true) {\r\n            String termText = MacawMessages.getMessage(\"ontologyTerm.term.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", termText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //check that the field value avoids potential security errors\r\n        if (ValidationUtility.promotesSecurityRisk(term) == true) {\r\n            String termText = MacawMessages.getMessage(\"ontologyTerm.term.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", termText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //ensure that ontology name has been filled in.  This will be used in displaying\r\n        //term to user\r\n        String ontologyName = ontologyTerm.getOntologyName();\r\n        if (ValidationUtility.isBlank(ontologyName) == true) {\r\n            String ontologyNameText = MacawMessages.getMessage(\"ontologyTerm.ontologyName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", ontologyNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //check that the field value avoids potential security errors\r\n        if (ValidationUtility.promotesSecurityRisk(ontologyName) == true) {\r\n            String ontologyNameText = MacawMessages.getMessage(\"ontologyTerm.ontologyName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", ontologyNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //ensure that namespace is present; this will be used by software services\r\n        if (ValidationUtility.isBlank(ontologyTerm.getNameSpace()) == true) {\r\n            String nameSpaceText = MacawMessages.getMessage(\"ontologyTerm.nameSpace.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", nameSpaceText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_ONTOLOGY_TERM, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, OntologyTerm originalOntologyTerm, OntologyTerm revisedOntologyTerm) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String oldTerm = originalOntologyTerm.getTerm();\r\n        String newTerm = revisedOntologyTerm.getTerm();\r\n        if (oldTerm.equals(newTerm) == false) {\r\n            oldTerm = ValidationUtility.convertEmptyValueToBlank(oldTerm);\r\n            newTerm = ValidationUtility.convertEmptyValueToBlank(newTerm);\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.term.saveChanges\", oldTerm, newTerm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldOntologyName = originalOntologyTerm.getOntologyName();\r\n        String newOntologyName = revisedOntologyTerm.getOntologyName();\r\n        if (oldOntologyName.equals(newOntologyName) == false) {\r\n            oldOntologyName = ValidationUtility.convertEmptyValueToBlank(oldOntologyName);\r\n            newOntologyName = ValidationUtility.convertEmptyValueToBlank(newOntologyName);\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.ontologyName.saveChanges\", oldOntologyName, newOntologyName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldNameSpace = originalOntologyTerm.getNameSpace();\r\n        String newNameSpace = revisedOntologyTerm.getNameSpace();\r\n        if (oldNameSpace.equals(newNameSpace) == false) {\r\n            oldNameSpace = ValidationUtility.convertEmptyValueToBlank(oldNameSpace);\r\n            newNameSpace = ValidationUtility.convertEmptyValueToBlank(newNameSpace);\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.term.saveChanges\", oldTerm, newTerm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldDescription = originalOntologyTerm.getDescription();\r\n        String newDescription = revisedOntologyTerm.getDescription();\r\n        if (oldDescription.equals(newDescription) == false) {\r\n            oldDescription = ValidationUtility.convertEmptyValueToBlank(oldDescription);\r\n            newDescription = ValidationUtility.convertEmptyValueToBlank(newDescription);\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.description.saveChanges\", oldDescription, newDescription);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder displayName = new StringBuilder();\r\n        displayName.append(term);\r\n        displayName.append(\"-\");\r\n        displayName.append(ontologyName);\r\n        return displayName.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    public Object clone() {\r\n        OntologyTerm cloneTerm = new OntologyTerm();\r\n        cloneTerm.setIdentifier(identifier);\r\n        cloneTerm.setOntologyName(ontologyName);\r\n        cloneTerm.setNameSpace(nameSpace);\r\n        cloneTerm.setTerm(term);\r\n        cloneTerm.setDescription(description);\r\n        cloneTerm.setNewRecord(isNewRecord);\r\n        return cloneTerm;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/OntologyTermTest1.java",
		"test_prompt": "// OntologyTermTest1.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport macaw.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OntologyTerm}.\n* It contains ten unit test cases for the {@link OntologyTerm#hasSameDisplayName(OntologyTerm)} method.\n*/\nclass OntologyTermTest1 {"
	},
	{
		"original_code": "// OntologyTerm.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\nimport macaw.util.*;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class OntologyTerm implements Displayable, Cloneable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String term;\r\n\r\n    private String ontologyName;\r\n\r\n    private String description;\r\n\r\n    private String nameSpace;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public OntologyTerm() {\r\n        identifier = 0;\r\n        term = \"\";\r\n        ontologyName = \"LHA\";\r\n        description = \"\";\r\n        nameSpace = \"lha.mrc.ac.uk:LHA\";\r\n        isNewRecord = true;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * a unique numeric identifier that is used by software clients\r\n     * to manage the term eg: 10453.\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * a phrase that represents a concept to the user eg: �sex�\r\n     * @return the term\r\n     */\r\n    public String getTerm() {\r\n        return term;\r\n    }\r\n\r\n    /**\r\n     * @param term the term to set\r\n     */\r\n    public void setTerm(String term) {\r\n        this.term = term;\r\n    }\r\n\r\n    /**\r\n     * the name of an ontology to which this term belongs.\r\n     * eg: �The LHA dictionary�\r\n     * @return the ontologyName\r\n     */\r\n    public String getOntologyName() {\r\n        return ontologyName;\r\n    }\r\n\r\n    /**\r\n     * @param ontologyName the ontologyName to set\r\n     */\r\n    public void setOntologyName(String ontologyName) {\r\n        this.ontologyName = ontologyName;\r\n    }\r\n\r\n    /**\r\n     * the meaning of the phrase eg: �a person�s gender�\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * @param description the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * a URI fragment that is used to uniquely identify ontology\r\n     * concepts for software clients eg: www.nshd.mrc.ac.uk:LHA/variables\r\n     * @return the nameSpace\r\n     */\r\n    public String getNameSpace() {\r\n        return nameSpace;\r\n    }\r\n\r\n    /**\r\n     * @param nameSpace the nameSpace to set\r\n     */\r\n    public void setNameSpace(String nameSpace) {\r\n        this.nameSpace = nameSpace;\r\n    }\r\n\r\n    /**\r\n     * @return the isNewRecord\r\n     */\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * @param isNewRecord the isNewRecord to set\r\n     */\r\n    public void setNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(OntologyTerm ontologyTerm) {\r\n        if (term.equals(ontologyTerm.getTerm()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(OntologyTerm ontologyTerm) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //check that the term has been filled in\r\n        String term = ontologyTerm.getTerm();\r\n        if (ValidationUtility.isBlank(term) == true) {\r\n            String termText = MacawMessages.getMessage(\"ontologyTerm.term.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", termText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //check that the field value avoids potential security errors\r\n        if (ValidationUtility.promotesSecurityRisk(term) == true) {\r\n            String termText = MacawMessages.getMessage(\"ontologyTerm.term.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", termText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //ensure that ontology name has been filled in.  This will be used in displaying\r\n        //term to user\r\n        String ontologyName = ontologyTerm.getOntologyName();\r\n        if (ValidationUtility.isBlank(ontologyName) == true) {\r\n            String ontologyNameText = MacawMessages.getMessage(\"ontologyTerm.ontologyName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", ontologyNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //check that the field value avoids potential security errors\r\n        if (ValidationUtility.promotesSecurityRisk(ontologyName) == true) {\r\n            String ontologyNameText = MacawMessages.getMessage(\"ontologyTerm.ontologyName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", ontologyNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //ensure that namespace is present; this will be used by software services\r\n        if (ValidationUtility.isBlank(ontologyTerm.getNameSpace()) == true) {\r\n            String nameSpaceText = MacawMessages.getMessage(\"ontologyTerm.nameSpace.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", nameSpaceText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_ONTOLOGY_TERM, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, OntologyTerm originalOntologyTerm, OntologyTerm revisedOntologyTerm) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String oldTerm = originalOntologyTerm.getTerm();\r\n        String newTerm = revisedOntologyTerm.getTerm();\r\n        if (oldTerm.equals(newTerm) == false) {\r\n            oldTerm = ValidationUtility.convertEmptyValueToBlank(oldTerm);\r\n            newTerm = ValidationUtility.convertEmptyValueToBlank(newTerm);\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.term.saveChanges\", oldTerm, newTerm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldOntologyName = originalOntologyTerm.getOntologyName();\r\n        String newOntologyName = revisedOntologyTerm.getOntologyName();\r\n        if (oldOntologyName.equals(newOntologyName) == false) {\r\n            oldOntologyName = ValidationUtility.convertEmptyValueToBlank(oldOntologyName);\r\n            newOntologyName = ValidationUtility.convertEmptyValueToBlank(newOntologyName);\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.ontologyName.saveChanges\", oldOntologyName, newOntologyName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldNameSpace = originalOntologyTerm.getNameSpace();\r\n        String newNameSpace = revisedOntologyTerm.getNameSpace();\r\n        if (oldNameSpace.equals(newNameSpace) == false) {\r\n            oldNameSpace = ValidationUtility.convertEmptyValueToBlank(oldNameSpace);\r\n            newNameSpace = ValidationUtility.convertEmptyValueToBlank(newNameSpace);\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.term.saveChanges\", oldTerm, newTerm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldDescription = originalOntologyTerm.getDescription();\r\n        String newDescription = revisedOntologyTerm.getDescription();\r\n        if (oldDescription.equals(newDescription) == false) {\r\n            oldDescription = ValidationUtility.convertEmptyValueToBlank(oldDescription);\r\n            newDescription = ValidationUtility.convertEmptyValueToBlank(newDescription);\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.description.saveChanges\", oldDescription, newDescription);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder displayName = new StringBuilder();\r\n        displayName.append(term);\r\n        displayName.append(\"-\");\r\n        displayName.append(ontologyName);\r\n        return displayName.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    public Object clone() {\r\n        OntologyTerm cloneTerm = new OntologyTerm();\r\n        cloneTerm.setIdentifier(identifier);\r\n        cloneTerm.setOntologyName(ontologyName);\r\n        cloneTerm.setNameSpace(nameSpace);\r\n        cloneTerm.setTerm(term);\r\n        cloneTerm.setDescription(description);\r\n        cloneTerm.setNewRecord(isNewRecord);\r\n        return cloneTerm;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/OntologyTermTest2.java",
		"test_prompt": "// OntologyTermTest2.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport macaw.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OntologyTerm}.\n* It contains ten unit test cases for the {@link OntologyTerm#detectFieldChanges(User, OntologyTerm, OntologyTerm)} method.\n*/\nclass OntologyTermTest2 {"
	},
	{
		"original_code": "// OntologyTerm.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\nimport macaw.util.*;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class OntologyTerm implements Displayable, Cloneable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String term;\r\n\r\n    private String ontologyName;\r\n\r\n    private String description;\r\n\r\n    private String nameSpace;\r\n\r\n    private boolean isNewRecord;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public OntologyTerm() {\r\n        identifier = 0;\r\n        term = \"\";\r\n        ontologyName = \"LHA\";\r\n        description = \"\";\r\n        nameSpace = \"lha.mrc.ac.uk:LHA\";\r\n        isNewRecord = true;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * a unique numeric identifier that is used by software clients\r\n     * to manage the term eg: 10453.\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * a phrase that represents a concept to the user eg: �sex�\r\n     * @return the term\r\n     */\r\n    public String getTerm() {\r\n        return term;\r\n    }\r\n\r\n    /**\r\n     * @param term the term to set\r\n     */\r\n    public void setTerm(String term) {\r\n        this.term = term;\r\n    }\r\n\r\n    /**\r\n     * the name of an ontology to which this term belongs.\r\n     * eg: �The LHA dictionary�\r\n     * @return the ontologyName\r\n     */\r\n    public String getOntologyName() {\r\n        return ontologyName;\r\n    }\r\n\r\n    /**\r\n     * @param ontologyName the ontologyName to set\r\n     */\r\n    public void setOntologyName(String ontologyName) {\r\n        this.ontologyName = ontologyName;\r\n    }\r\n\r\n    /**\r\n     * the meaning of the phrase eg: �a person�s gender�\r\n     * @return the description\r\n     */\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    /**\r\n     * @param description the description to set\r\n     */\r\n    public void setDescription(String description) {\r\n        this.description = description;\r\n    }\r\n\r\n    /**\r\n     * a URI fragment that is used to uniquely identify ontology\r\n     * concepts for software clients eg: www.nshd.mrc.ac.uk:LHA/variables\r\n     * @return the nameSpace\r\n     */\r\n    public String getNameSpace() {\r\n        return nameSpace;\r\n    }\r\n\r\n    /**\r\n     * @param nameSpace the nameSpace to set\r\n     */\r\n    public void setNameSpace(String nameSpace) {\r\n        this.nameSpace = nameSpace;\r\n    }\r\n\r\n    /**\r\n     * @return the isNewRecord\r\n     */\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * @param isNewRecord the isNewRecord to set\r\n     */\r\n    public void setNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(OntologyTerm ontologyTerm) {\r\n        if (term.equals(ontologyTerm.getTerm()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(OntologyTerm ontologyTerm) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        //check that the term has been filled in\r\n        String term = ontologyTerm.getTerm();\r\n        if (ValidationUtility.isBlank(term) == true) {\r\n            String termText = MacawMessages.getMessage(\"ontologyTerm.term.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", termText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //check that the field value avoids potential security errors\r\n        if (ValidationUtility.promotesSecurityRisk(term) == true) {\r\n            String termText = MacawMessages.getMessage(\"ontologyTerm.term.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", termText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //ensure that ontology name has been filled in.  This will be used in displaying\r\n        //term to user\r\n        String ontologyName = ontologyTerm.getOntologyName();\r\n        if (ValidationUtility.isBlank(ontologyName) == true) {\r\n            String ontologyNameText = MacawMessages.getMessage(\"ontologyTerm.ontologyName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", ontologyNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //check that the field value avoids potential security errors\r\n        if (ValidationUtility.promotesSecurityRisk(ontologyName) == true) {\r\n            String ontologyNameText = MacawMessages.getMessage(\"ontologyTerm.ontologyName.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.promotesSecurityRisk\", ontologyNameText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        //ensure that namespace is present; this will be used by software services\r\n        if (ValidationUtility.isBlank(ontologyTerm.getNameSpace()) == true) {\r\n            String nameSpaceText = MacawMessages.getMessage(\"ontologyTerm.nameSpace.label\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", nameSpaceText);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_ONTOLOGY_TERM, errorMessage);\r\n            }\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, OntologyTerm originalOntologyTerm, OntologyTerm revisedOntologyTerm) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String oldTerm = originalOntologyTerm.getTerm();\r\n        String newTerm = revisedOntologyTerm.getTerm();\r\n        if (oldTerm.equals(newTerm) == false) {\r\n            oldTerm = ValidationUtility.convertEmptyValueToBlank(oldTerm);\r\n            newTerm = ValidationUtility.convertEmptyValueToBlank(newTerm);\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.term.saveChanges\", oldTerm, newTerm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldOntologyName = originalOntologyTerm.getOntologyName();\r\n        String newOntologyName = revisedOntologyTerm.getOntologyName();\r\n        if (oldOntologyName.equals(newOntologyName) == false) {\r\n            oldOntologyName = ValidationUtility.convertEmptyValueToBlank(oldOntologyName);\r\n            newOntologyName = ValidationUtility.convertEmptyValueToBlank(newOntologyName);\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.ontologyName.saveChanges\", oldOntologyName, newOntologyName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldNameSpace = originalOntologyTerm.getNameSpace();\r\n        String newNameSpace = revisedOntologyTerm.getNameSpace();\r\n        if (oldNameSpace.equals(newNameSpace) == false) {\r\n            oldNameSpace = ValidationUtility.convertEmptyValueToBlank(oldNameSpace);\r\n            newNameSpace = ValidationUtility.convertEmptyValueToBlank(newNameSpace);\r\n            String changedMessage = MacawMessages.getMessage(\"ontologyTerm.term.saveChanges\", oldTerm, newTerm);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changedMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String oldDescription = originalOntologyTerm.getDescription();\r\n        String newDescription = revisedOntologyTerm.getDescription();\r\n        if (oldDescription.equals(newDescription) == false) {\r\n            oldDescription = ValidationUtility.convertEmptyValueToBlank(oldDescription);\r\n            newDescription = ValidationUtility.convertEmptyValueToBlank(newDescription);\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.description.saveChanges\", oldDescription, newDescription);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(originalOntologyTerm.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder displayName = new StringBuilder();\r\n        displayName.append(term);\r\n        displayName.append(\"-\");\r\n        displayName.append(ontologyName);\r\n        return displayName.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    public Object clone() {\r\n        OntologyTerm cloneTerm = new OntologyTerm();\r\n        cloneTerm.setIdentifier(identifier);\r\n        cloneTerm.setOntologyName(ontologyName);\r\n        cloneTerm.setNameSpace(nameSpace);\r\n        cloneTerm.setTerm(term);\r\n        cloneTerm.setDescription(description);\r\n        cloneTerm.setNewRecord(isNewRecord);\r\n        return cloneTerm;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/OntologyTermTest3.java",
		"test_prompt": "// OntologyTermTest3.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport macaw.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OntologyTerm}.\n* It contains ten unit test cases for the {@link OntologyTerm#clone()} method.\n*/\nclass OntologyTermTest3 {"
	},
	{
		"original_code": "// DerivedVariable.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\n\r\n/**\r\n * a Variable that has been created using data from one or more {@link macaw.businessLayer.Variable}.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class DerivedVariable extends Variable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private ArrayList<Variable> sourceVariables;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public DerivedVariable() {\r\n        sourceVariables = new ArrayList<Variable>();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public ArrayList<Variable> getSourceVariables() {\r\n        return sourceVariables;\r\n    }\r\n\r\n    public void addSourceVariables(ArrayList<Variable> variables) {\r\n        sourceVariables.addAll(variables);\r\n    }\r\n\r\n    public void setSourceVariables(ArrayList<Variable> sourceVariables) {\r\n        this.sourceVariables = sourceVariables;\r\n    }\r\n\r\n    public void addSourceVariable(Variable variable) {\r\n        sourceVariables.add(variable);\r\n    }\r\n\r\n    public void removeSourceVariable(Variable variable) {\r\n        sourceVariables.remove(variable);\r\n    }\r\n\r\n    public void removeSourceVariables(ArrayList<Variable> variablesToDelete) {\r\n        for (Variable targetVariable : variablesToDelete) {\r\n            sourceVariables.remove(targetVariable);\r\n        }\r\n    }\r\n\r\n    public boolean containsSourceVariable(Variable targetVariable) {\r\n        int targetIdentifier = targetVariable.getIdentifier();\r\n        for (Variable sourceVariable : sourceVariables) {\r\n            int currentIdentifier = sourceVariable.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, DerivedVariable originalDerivedVariable, DerivedVariable revisedDerivedVariable) {\r\n        return Variable.detectFieldChanges(user, originalDerivedVariable, revisedDerivedVariable);\r\n    }\r\n\r\n    public boolean hasSameDisplayName(Variable variable) {\r\n        if ((getName().equals(variable.getName()) == true) && (variable instanceof DerivedVariable == true)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(DerivedVariable derivedVariable) throws MacawException {\r\n        ArrayList<String> errorMessages = Variable.validateFields(derivedVariable);\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_DERIVED_VARIABLE, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public Object clone() {\r\n        DerivedVariable cloneDerivedVariable = new DerivedVariable();\r\n        ArrayList<Variable> clonedVariableList = new ArrayList<Variable>();\r\n        clonedVariableList.addAll(sourceVariables);\r\n        cloneDerivedVariable.setSourceVariables(clonedVariableList);\r\n        super.cloneAttributes(cloneDerivedVariable);\r\n        return cloneDerivedVariable;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/DerivedVariableTest0.java",
		"test_prompt": "// DerivedVariableTest0.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DerivedVariable}.\n* It contains ten unit test cases for the {@link DerivedVariable#containsSourceVariable(Variable)} method.\n*/\nclass DerivedVariableTest0 {"
	},
	{
		"original_code": "// DerivedVariable.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\n\r\n/**\r\n * a Variable that has been created using data from one or more {@link macaw.businessLayer.Variable}.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class DerivedVariable extends Variable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private ArrayList<Variable> sourceVariables;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public DerivedVariable() {\r\n        sourceVariables = new ArrayList<Variable>();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public ArrayList<Variable> getSourceVariables() {\r\n        return sourceVariables;\r\n    }\r\n\r\n    public void addSourceVariables(ArrayList<Variable> variables) {\r\n        sourceVariables.addAll(variables);\r\n    }\r\n\r\n    public void setSourceVariables(ArrayList<Variable> sourceVariables) {\r\n        this.sourceVariables = sourceVariables;\r\n    }\r\n\r\n    public void addSourceVariable(Variable variable) {\r\n        sourceVariables.add(variable);\r\n    }\r\n\r\n    public void removeSourceVariable(Variable variable) {\r\n        sourceVariables.remove(variable);\r\n    }\r\n\r\n    public void removeSourceVariables(ArrayList<Variable> variablesToDelete) {\r\n        for (Variable targetVariable : variablesToDelete) {\r\n            sourceVariables.remove(targetVariable);\r\n        }\r\n    }\r\n\r\n    public boolean containsSourceVariable(Variable targetVariable) {\r\n        int targetIdentifier = targetVariable.getIdentifier();\r\n        for (Variable sourceVariable : sourceVariables) {\r\n            int currentIdentifier = sourceVariable.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, DerivedVariable originalDerivedVariable, DerivedVariable revisedDerivedVariable) {\r\n        return Variable.detectFieldChanges(user, originalDerivedVariable, revisedDerivedVariable);\r\n    }\r\n\r\n    public boolean hasSameDisplayName(Variable variable) {\r\n        if ((getName().equals(variable.getName()) == true) && (variable instanceof DerivedVariable == true)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(DerivedVariable derivedVariable) throws MacawException {\r\n        ArrayList<String> errorMessages = Variable.validateFields(derivedVariable);\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_DERIVED_VARIABLE, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public Object clone() {\r\n        DerivedVariable cloneDerivedVariable = new DerivedVariable();\r\n        ArrayList<Variable> clonedVariableList = new ArrayList<Variable>();\r\n        clonedVariableList.addAll(sourceVariables);\r\n        cloneDerivedVariable.setSourceVariables(clonedVariableList);\r\n        super.cloneAttributes(cloneDerivedVariable);\r\n        return cloneDerivedVariable;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/DerivedVariableTest1.java",
		"test_prompt": "// DerivedVariableTest1.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DerivedVariable}.\n* It contains ten unit test cases for the {@link DerivedVariable#detectFieldChanges(User, DerivedVariable, DerivedVariable)} method.\n*/\nclass DerivedVariableTest1 {"
	},
	{
		"original_code": "// DerivedVariable.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\n\r\n/**\r\n * a Variable that has been created using data from one or more {@link macaw.businessLayer.Variable}.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class DerivedVariable extends Variable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private ArrayList<Variable> sourceVariables;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public DerivedVariable() {\r\n        sourceVariables = new ArrayList<Variable>();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public ArrayList<Variable> getSourceVariables() {\r\n        return sourceVariables;\r\n    }\r\n\r\n    public void addSourceVariables(ArrayList<Variable> variables) {\r\n        sourceVariables.addAll(variables);\r\n    }\r\n\r\n    public void setSourceVariables(ArrayList<Variable> sourceVariables) {\r\n        this.sourceVariables = sourceVariables;\r\n    }\r\n\r\n    public void addSourceVariable(Variable variable) {\r\n        sourceVariables.add(variable);\r\n    }\r\n\r\n    public void removeSourceVariable(Variable variable) {\r\n        sourceVariables.remove(variable);\r\n    }\r\n\r\n    public void removeSourceVariables(ArrayList<Variable> variablesToDelete) {\r\n        for (Variable targetVariable : variablesToDelete) {\r\n            sourceVariables.remove(targetVariable);\r\n        }\r\n    }\r\n\r\n    public boolean containsSourceVariable(Variable targetVariable) {\r\n        int targetIdentifier = targetVariable.getIdentifier();\r\n        for (Variable sourceVariable : sourceVariables) {\r\n            int currentIdentifier = sourceVariable.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, DerivedVariable originalDerivedVariable, DerivedVariable revisedDerivedVariable) {\r\n        return Variable.detectFieldChanges(user, originalDerivedVariable, revisedDerivedVariable);\r\n    }\r\n\r\n    public boolean hasSameDisplayName(Variable variable) {\r\n        if ((getName().equals(variable.getName()) == true) && (variable instanceof DerivedVariable == true)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(DerivedVariable derivedVariable) throws MacawException {\r\n        ArrayList<String> errorMessages = Variable.validateFields(derivedVariable);\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_DERIVED_VARIABLE, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public Object clone() {\r\n        DerivedVariable cloneDerivedVariable = new DerivedVariable();\r\n        ArrayList<Variable> clonedVariableList = new ArrayList<Variable>();\r\n        clonedVariableList.addAll(sourceVariables);\r\n        cloneDerivedVariable.setSourceVariables(clonedVariableList);\r\n        super.cloneAttributes(cloneDerivedVariable);\r\n        return cloneDerivedVariable;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/DerivedVariableTest2.java",
		"test_prompt": "// DerivedVariableTest2.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DerivedVariable}.\n* It contains ten unit test cases for the {@link DerivedVariable#hasSameDisplayName(Variable)} method.\n*/\nclass DerivedVariableTest2 {"
	},
	{
		"original_code": "// DerivedVariable.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\n\r\n/**\r\n * a Variable that has been created using data from one or more {@link macaw.businessLayer.Variable}.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class DerivedVariable extends Variable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private ArrayList<Variable> sourceVariables;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public DerivedVariable() {\r\n        sourceVariables = new ArrayList<Variable>();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public ArrayList<Variable> getSourceVariables() {\r\n        return sourceVariables;\r\n    }\r\n\r\n    public void addSourceVariables(ArrayList<Variable> variables) {\r\n        sourceVariables.addAll(variables);\r\n    }\r\n\r\n    public void setSourceVariables(ArrayList<Variable> sourceVariables) {\r\n        this.sourceVariables = sourceVariables;\r\n    }\r\n\r\n    public void addSourceVariable(Variable variable) {\r\n        sourceVariables.add(variable);\r\n    }\r\n\r\n    public void removeSourceVariable(Variable variable) {\r\n        sourceVariables.remove(variable);\r\n    }\r\n\r\n    public void removeSourceVariables(ArrayList<Variable> variablesToDelete) {\r\n        for (Variable targetVariable : variablesToDelete) {\r\n            sourceVariables.remove(targetVariable);\r\n        }\r\n    }\r\n\r\n    public boolean containsSourceVariable(Variable targetVariable) {\r\n        int targetIdentifier = targetVariable.getIdentifier();\r\n        for (Variable sourceVariable : sourceVariables) {\r\n            int currentIdentifier = sourceVariable.getIdentifier();\r\n            if (targetIdentifier == currentIdentifier) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, DerivedVariable originalDerivedVariable, DerivedVariable revisedDerivedVariable) {\r\n        return Variable.detectFieldChanges(user, originalDerivedVariable, revisedDerivedVariable);\r\n    }\r\n\r\n    public boolean hasSameDisplayName(Variable variable) {\r\n        if ((getName().equals(variable.getName()) == true) && (variable instanceof DerivedVariable == true)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(DerivedVariable derivedVariable) throws MacawException {\r\n        ArrayList<String> errorMessages = Variable.validateFields(derivedVariable);\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_DERIVED_VARIABLE, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public Object clone() {\r\n        DerivedVariable cloneDerivedVariable = new DerivedVariable();\r\n        ArrayList<Variable> clonedVariableList = new ArrayList<Variable>();\r\n        clonedVariableList.addAll(sourceVariables);\r\n        cloneDerivedVariable.setSourceVariables(clonedVariableList);\r\n        super.cloneAttributes(cloneDerivedVariable);\r\n        return cloneDerivedVariable;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/DerivedVariableTest3.java",
		"test_prompt": "// DerivedVariableTest3.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DerivedVariable}.\n* It contains ten unit test cases for the {@link DerivedVariable#clone()} method.\n*/\nclass DerivedVariableTest3 {"
	},
	{
		"original_code": "// ConstantConverter.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ConstantConverter {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ConstantConverter() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * creates string lists from model objects.\r\n     */\r\n    static public String[] getCategoryChoices(ArrayList<Category> categories) {\r\n        String[] results = new String[categories.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = categories.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAvailabilityStatusChoices(ArrayList<AvailabilityState> availabilityStatusChoices) {\r\n        String[] results = new String[availabilityStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = availabilityStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getCleaningStatusChoices(ArrayList<CleaningState> cleaningStatusChoices) {\r\n        String[] results = new String[cleaningStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = cleaningStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAliasFilePathChoices(ArrayList<AliasFilePath> aliasFilePathChoices) {\r\n        String[] results = new String[aliasFilePathChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = aliasFilePathChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getSupportingDocumentNames(ArrayList<SupportingDocument> supportingDocuments) {\r\n        String[] results = new String[supportingDocuments.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = supportingDocuments.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getVariableNames(ArrayList<Variable> variables) {\r\n        String[] results = new String[variables.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = variables.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        String[] results = new String[valueLabels.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = valueLabels.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ConstantConverterTest0.java",
		"test_prompt": "// ConstantConverterTest0.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConstantConverter}.\n* It contains ten unit test cases for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.\n*/\nclass ConstantConverterTest0 {"
	},
	{
		"original_code": "// ConstantConverter.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ConstantConverter {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ConstantConverter() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * creates string lists from model objects.\r\n     */\r\n    static public String[] getCategoryChoices(ArrayList<Category> categories) {\r\n        String[] results = new String[categories.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = categories.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAvailabilityStatusChoices(ArrayList<AvailabilityState> availabilityStatusChoices) {\r\n        String[] results = new String[availabilityStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = availabilityStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getCleaningStatusChoices(ArrayList<CleaningState> cleaningStatusChoices) {\r\n        String[] results = new String[cleaningStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = cleaningStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAliasFilePathChoices(ArrayList<AliasFilePath> aliasFilePathChoices) {\r\n        String[] results = new String[aliasFilePathChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = aliasFilePathChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getSupportingDocumentNames(ArrayList<SupportingDocument> supportingDocuments) {\r\n        String[] results = new String[supportingDocuments.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = supportingDocuments.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getVariableNames(ArrayList<Variable> variables) {\r\n        String[] results = new String[variables.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = variables.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        String[] results = new String[valueLabels.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = valueLabels.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ConstantConverterTest1.java",
		"test_prompt": "// ConstantConverterTest1.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConstantConverter}.\n* It contains ten unit test cases for the {@link ConstantConverter#getAvailabilityStatusChoices(ArrayList)} method.\n*/\nclass ConstantConverterTest1 {"
	},
	{
		"original_code": "// ConstantConverter.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ConstantConverter {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ConstantConverter() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * creates string lists from model objects.\r\n     */\r\n    static public String[] getCategoryChoices(ArrayList<Category> categories) {\r\n        String[] results = new String[categories.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = categories.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAvailabilityStatusChoices(ArrayList<AvailabilityState> availabilityStatusChoices) {\r\n        String[] results = new String[availabilityStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = availabilityStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getCleaningStatusChoices(ArrayList<CleaningState> cleaningStatusChoices) {\r\n        String[] results = new String[cleaningStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = cleaningStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAliasFilePathChoices(ArrayList<AliasFilePath> aliasFilePathChoices) {\r\n        String[] results = new String[aliasFilePathChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = aliasFilePathChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getSupportingDocumentNames(ArrayList<SupportingDocument> supportingDocuments) {\r\n        String[] results = new String[supportingDocuments.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = supportingDocuments.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getVariableNames(ArrayList<Variable> variables) {\r\n        String[] results = new String[variables.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = variables.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        String[] results = new String[valueLabels.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = valueLabels.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ConstantConverterTest2.java",
		"test_prompt": "// ConstantConverterTest2.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConstantConverter}.\n* It contains ten unit test cases for the {@link ConstantConverter#getCleaningStatusChoices(ArrayList)} method.\n*/\nclass ConstantConverterTest2 {"
	},
	{
		"original_code": "// ConstantConverter.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ConstantConverter {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ConstantConverter() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * creates string lists from model objects.\r\n     */\r\n    static public String[] getCategoryChoices(ArrayList<Category> categories) {\r\n        String[] results = new String[categories.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = categories.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAvailabilityStatusChoices(ArrayList<AvailabilityState> availabilityStatusChoices) {\r\n        String[] results = new String[availabilityStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = availabilityStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getCleaningStatusChoices(ArrayList<CleaningState> cleaningStatusChoices) {\r\n        String[] results = new String[cleaningStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = cleaningStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAliasFilePathChoices(ArrayList<AliasFilePath> aliasFilePathChoices) {\r\n        String[] results = new String[aliasFilePathChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = aliasFilePathChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getSupportingDocumentNames(ArrayList<SupportingDocument> supportingDocuments) {\r\n        String[] results = new String[supportingDocuments.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = supportingDocuments.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getVariableNames(ArrayList<Variable> variables) {\r\n        String[] results = new String[variables.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = variables.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        String[] results = new String[valueLabels.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = valueLabels.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ConstantConverterTest3.java",
		"test_prompt": "// ConstantConverterTest3.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConstantConverter}.\n* It contains ten unit test cases for the {@link ConstantConverter#getAliasFilePathChoices(ArrayList)} method.\n*/\nclass ConstantConverterTest3 {"
	},
	{
		"original_code": "// ConstantConverter.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ConstantConverter {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ConstantConverter() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * creates string lists from model objects.\r\n     */\r\n    static public String[] getCategoryChoices(ArrayList<Category> categories) {\r\n        String[] results = new String[categories.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = categories.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAvailabilityStatusChoices(ArrayList<AvailabilityState> availabilityStatusChoices) {\r\n        String[] results = new String[availabilityStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = availabilityStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getCleaningStatusChoices(ArrayList<CleaningState> cleaningStatusChoices) {\r\n        String[] results = new String[cleaningStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = cleaningStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAliasFilePathChoices(ArrayList<AliasFilePath> aliasFilePathChoices) {\r\n        String[] results = new String[aliasFilePathChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = aliasFilePathChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getSupportingDocumentNames(ArrayList<SupportingDocument> supportingDocuments) {\r\n        String[] results = new String[supportingDocuments.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = supportingDocuments.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getVariableNames(ArrayList<Variable> variables) {\r\n        String[] results = new String[variables.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = variables.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        String[] results = new String[valueLabels.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = valueLabels.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ConstantConverterTest4.java",
		"test_prompt": "// ConstantConverterTest4.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConstantConverter}.\n* It contains ten unit test cases for the {@link ConstantConverter#getSupportingDocumentNames(ArrayList)} method.\n*/\nclass ConstantConverterTest4 {"
	},
	{
		"original_code": "// ConstantConverter.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ConstantConverter {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ConstantConverter() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * creates string lists from model objects.\r\n     */\r\n    static public String[] getCategoryChoices(ArrayList<Category> categories) {\r\n        String[] results = new String[categories.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = categories.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAvailabilityStatusChoices(ArrayList<AvailabilityState> availabilityStatusChoices) {\r\n        String[] results = new String[availabilityStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = availabilityStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getCleaningStatusChoices(ArrayList<CleaningState> cleaningStatusChoices) {\r\n        String[] results = new String[cleaningStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = cleaningStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAliasFilePathChoices(ArrayList<AliasFilePath> aliasFilePathChoices) {\r\n        String[] results = new String[aliasFilePathChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = aliasFilePathChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getSupportingDocumentNames(ArrayList<SupportingDocument> supportingDocuments) {\r\n        String[] results = new String[supportingDocuments.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = supportingDocuments.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getVariableNames(ArrayList<Variable> variables) {\r\n        String[] results = new String[variables.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = variables.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        String[] results = new String[valueLabels.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = valueLabels.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ConstantConverterTest5.java",
		"test_prompt": "// ConstantConverterTest5.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConstantConverter}.\n* It contains ten unit test cases for the {@link ConstantConverter#getVariableNames(ArrayList)} method.\n*/\nclass ConstantConverterTest5 {"
	},
	{
		"original_code": "// ConstantConverter.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ConstantConverter {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private ConstantConverter() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * creates string lists from model objects.\r\n     */\r\n    static public String[] getCategoryChoices(ArrayList<Category> categories) {\r\n        String[] results = new String[categories.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = categories.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAvailabilityStatusChoices(ArrayList<AvailabilityState> availabilityStatusChoices) {\r\n        String[] results = new String[availabilityStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = availabilityStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getCleaningStatusChoices(ArrayList<CleaningState> cleaningStatusChoices) {\r\n        String[] results = new String[cleaningStatusChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = cleaningStatusChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getAliasFilePathChoices(ArrayList<AliasFilePath> aliasFilePathChoices) {\r\n        String[] results = new String[aliasFilePathChoices.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = aliasFilePathChoices.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getSupportingDocumentNames(ArrayList<SupportingDocument> supportingDocuments) {\r\n        String[] results = new String[supportingDocuments.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = supportingDocuments.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getVariableNames(ArrayList<Variable> variables) {\r\n        String[] results = new String[variables.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = variables.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    static public String[] getValueLabels(ArrayList<ValueLabel> valueLabels) {\r\n        String[] results = new String[valueLabels.size()];\r\n        for (int i = 0; i < results.length; i++) {\r\n            results[i] = valueLabels.get(i).getDisplayName();\r\n        }\r\n        return results;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ConstantConverterTest6.java",
		"test_prompt": "// ConstantConverterTest6.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConstantConverter}.\n* It contains ten unit test cases for the {@link ConstantConverter#getValueLabels(ArrayList)} method.\n*/\nclass ConstantConverterTest6 {"
	},
	{
		"original_code": "// MacawListChoice.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\nabstract public class MacawListChoice implements Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private boolean isNewRecord;\r\n\r\n    private int identifier;\r\n\r\n    private String name;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public MacawListChoice(int identifier, String name) {\r\n        this.identifier = identifier;\r\n        this.name = name;\r\n    }\r\n\r\n    public MacawListChoice(String name) {\r\n        isNewRecord = false;\r\n        this.name = name;\r\n    }\r\n\r\n    public MacawListChoice() {\r\n        isNewRecord = false;\r\n        name = \"\";\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    public String getDisplayName() {\r\n        return name;\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    /**\r\n     * @return the isNewRecord\r\n     */\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * @param isNewRecord the isNewRecord to set\r\n     */\r\n    public void setNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static protected ArrayList<String> validateFields(MacawListChoice listChoice) {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        if (ValidationUtility.isBlank(listChoice.getName()) == true) {\r\n            String fieldName = MacawMessages.getMessage(\"general.fields.name\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", fieldName);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        return errorMessages;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, String messageProperty, MacawListChoice originalListChoice, MacawListChoice revisedListChoice) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String originalName = originalListChoice.getName();\r\n        String revisedName = revisedListChoice.getName();\r\n        if (originalName.equals(revisedName) == false) {\r\n            originalName = ValidationUtility.convertEmptyValueToBlank(originalName);\r\n            revisedName = ValidationUtility.convertEmptyValueToBlank(revisedName);\r\n            String changeMessage = MacawMessages.getMessage(messageProperty, originalName, revisedName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.LIST_CHOICE, changeMessage, user.getUserID());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(MacawListChoice listChoice) {\r\n        if (name.equals(listChoice.getName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Cloneable\r\n    protected void cloneAttributes(MacawListChoice macawListChoice) {\r\n        macawListChoice.setIdentifier(identifier);\r\n        macawListChoice.setNewRecord(isNewRecord);\r\n        macawListChoice.setName(name);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    abstract public Object clone();\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/MacawListChoiceTest0.java",
		"test_prompt": "// MacawListChoiceTest0.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MacawListChoice}.\n* It contains ten unit test cases for the {@link MacawListChoice#isNewRecord()} method.\n*/\nclass MacawListChoiceTest0 {"
	},
	{
		"original_code": "// MacawListChoice.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\nabstract public class MacawListChoice implements Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private boolean isNewRecord;\r\n\r\n    private int identifier;\r\n\r\n    private String name;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public MacawListChoice(int identifier, String name) {\r\n        this.identifier = identifier;\r\n        this.name = name;\r\n    }\r\n\r\n    public MacawListChoice(String name) {\r\n        isNewRecord = false;\r\n        this.name = name;\r\n    }\r\n\r\n    public MacawListChoice() {\r\n        isNewRecord = false;\r\n        name = \"\";\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    public String getDisplayName() {\r\n        return name;\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    /**\r\n     * @return the isNewRecord\r\n     */\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * @param isNewRecord the isNewRecord to set\r\n     */\r\n    public void setNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static protected ArrayList<String> validateFields(MacawListChoice listChoice) {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        if (ValidationUtility.isBlank(listChoice.getName()) == true) {\r\n            String fieldName = MacawMessages.getMessage(\"general.fields.name\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", fieldName);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        return errorMessages;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, String messageProperty, MacawListChoice originalListChoice, MacawListChoice revisedListChoice) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String originalName = originalListChoice.getName();\r\n        String revisedName = revisedListChoice.getName();\r\n        if (originalName.equals(revisedName) == false) {\r\n            originalName = ValidationUtility.convertEmptyValueToBlank(originalName);\r\n            revisedName = ValidationUtility.convertEmptyValueToBlank(revisedName);\r\n            String changeMessage = MacawMessages.getMessage(messageProperty, originalName, revisedName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.LIST_CHOICE, changeMessage, user.getUserID());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(MacawListChoice listChoice) {\r\n        if (name.equals(listChoice.getName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Cloneable\r\n    protected void cloneAttributes(MacawListChoice macawListChoice) {\r\n        macawListChoice.setIdentifier(identifier);\r\n        macawListChoice.setNewRecord(isNewRecord);\r\n        macawListChoice.setName(name);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    abstract public Object clone();\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/MacawListChoiceTest1.java",
		"test_prompt": "// MacawListChoiceTest1.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MacawListChoice}.\n* It contains ten unit test cases for the {@link MacawListChoice#detectFieldChanges(User, String, MacawListChoice, MacawListChoice)} method.\n*/\nclass MacawListChoiceTest1 {"
	},
	{
		"original_code": "// MacawListChoice.java\npackage macaw.businessLayer;\r\n\r\nimport java.util.ArrayList;\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\n\r\n/**\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\nabstract public class MacawListChoice implements Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private boolean isNewRecord;\r\n\r\n    private int identifier;\r\n\r\n    private String name;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public MacawListChoice(int identifier, String name) {\r\n        this.identifier = identifier;\r\n        this.name = name;\r\n    }\r\n\r\n    public MacawListChoice(String name) {\r\n        isNewRecord = false;\r\n        this.name = name;\r\n    }\r\n\r\n    public MacawListChoice() {\r\n        isNewRecord = false;\r\n        name = \"\";\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    public String getDisplayName() {\r\n        return name;\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    /**\r\n     * @return the isNewRecord\r\n     */\r\n    public boolean isNewRecord() {\r\n        return isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * @param isNewRecord the isNewRecord to set\r\n     */\r\n    public void setNewRecord(boolean isNewRecord) {\r\n        this.isNewRecord = isNewRecord;\r\n    }\r\n\r\n    /**\r\n     * @return the name\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * @param name the name to set\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    static protected ArrayList<String> validateFields(MacawListChoice listChoice) {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        if (ValidationUtility.isBlank(listChoice.getName()) == true) {\r\n            String fieldName = MacawMessages.getMessage(\"general.fields.name\");\r\n            String errorMessage = MacawMessages.getMessage(\"general.error.blankField\", fieldName);\r\n            errorMessages.add(errorMessage);\r\n        }\r\n        return errorMessages;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, String messageProperty, MacawListChoice originalListChoice, MacawListChoice revisedListChoice) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String originalName = originalListChoice.getName();\r\n        String revisedName = revisedListChoice.getName();\r\n        if (originalName.equals(revisedName) == false) {\r\n            originalName = ValidationUtility.convertEmptyValueToBlank(originalName);\r\n            revisedName = ValidationUtility.convertEmptyValueToBlank(revisedName);\r\n            String changeMessage = MacawMessages.getMessage(messageProperty, originalName, revisedName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.LIST_CHOICE, changeMessage, user.getUserID());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(MacawListChoice listChoice) {\r\n        if (name.equals(listChoice.getName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Cloneable\r\n    protected void cloneAttributes(MacawListChoice macawListChoice) {\r\n        macawListChoice.setIdentifier(identifier);\r\n        macawListChoice.setNewRecord(isNewRecord);\r\n        macawListChoice.setName(name);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    abstract public Object clone();\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/MacawListChoiceTest2.java",
		"test_prompt": "// MacawListChoiceTest2.java\npackage macaw.businessLayer;\n\nimport java.util.ArrayList;\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MacawListChoice}.\n* It contains ten unit test cases for the {@link MacawListChoice#hasSameDisplayName(MacawListChoice)} method.\n*/\nclass MacawListChoiceTest2 {"
	},
	{
		"original_code": "// ValueLabel.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes an answer to a survey question\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValueLabel implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    public enum EditingOperationType {\r\n\r\n        NEW, EDIT, DELETE, CANCEL\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String value;\r\n\r\n    private String label;\r\n\r\n    private boolean isMissingValue;\r\n\r\n    private EditingOperationType editingOperationType;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ValueLabel() {\r\n        identifier = 0;\r\n        value = \"\";\r\n        label = \"\";\r\n        isMissingValue = false;\r\n        editingOperationType = EditingOperationType.NEW;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the value\r\n     */\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @param value the value to set\r\n     */\r\n    public void setValue(String value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * @return the isMissingValue\r\n     */\r\n    public boolean isMissingValue() {\r\n        return isMissingValue;\r\n    }\r\n\r\n    /**\r\n     * @param isMissingValue the isMissingValue to set\r\n     */\r\n    public void setMissingValue(boolean isMissingValue) {\r\n        this.isMissingValue = isMissingValue;\r\n    }\r\n\r\n    public void setEditingOperationType(EditingOperationType editingOperationType) {\r\n        this.editingOperationType = editingOperationType;\r\n    }\r\n\r\n    public EditingOperationType getEditingOperationType() {\r\n        return editingOperationType;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        if (editingOperationType == EditingOperationType.NEW) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isEditingExistingRecord() {\r\n        if (editingOperationType == EditingOperationType.EDIT) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedNewRecord() {\r\n        if (editingOperationType == EditingOperationType.CANCEL) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedRecord() {\r\n        if (editingOperationType == EditingOperationType.DELETE) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(ValueLabel valueLabel) {\r\n        if (getDisplayName().equals(valueLabel.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(ValueLabel valueLabel) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(valueLabel.getValue()) == true) {\r\n         * \t\t\tString valueText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"valueLabel.value.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   valueText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //some legacy variables do not appear to have a value.\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(valueLabel.getLabel()) == true) {\r\n\t\t\tString labelText\r\n\t\t\t\t= MacawMessages.getMessage(\"valueLabel.label.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t   labelText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_VALUE_LABEL, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public boolean differencesExist(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        ArrayList<MacawChangeEvent> changeEvents = ValueLabel.detectFieldChanges(user, ownerVariable, originalValueLabel, revisedValueLabel);\r\n        if (changeEvents.size() > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        String userID = user.getUserID();\r\n        String ownerVariableName = ownerVariable.getDisplayName();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String originalValue = originalValueLabel.getValue();\r\n        String revisedValue = revisedValueLabel.getValue();\r\n        if (originalValue.equals(revisedValue) == false) {\r\n            originalValue = ValidationUtility.convertEmptyValueToBlank(originalValue);\r\n            revisedValue = ValidationUtility.convertEmptyValueToBlank(revisedValue);\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.value.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalValue, revisedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalLabel = originalValueLabel.getLabel();\r\n        String revisedLabel = revisedValueLabel.getLabel();\r\n        if (originalLabel.equals(revisedLabel) == false) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.label.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalLabel, revisedLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsMissingValue = originalValueLabel.isMissingValue();\r\n        boolean revisedIsMissingValue = revisedValueLabel.isMissingValue();\r\n        if (originalIsMissingValue != revisedIsMissingValue) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.isMissingValue.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, String.valueOf(originalIsMissingValue), String.valueOf(revisedIsMissingValue));\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(getValue());\r\n        buffer.append(\"-\");\r\n        buffer.append(getLabel());\r\n        return buffer.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        ValueLabel cloneValueLabel = new ValueLabel();\r\n        cloneValueLabel.setIdentifier(identifier);\r\n        cloneValueLabel.setLabel(label);\r\n        cloneValueLabel.setMissingValue(isMissingValue);\r\n        cloneValueLabel.setValue(value);\r\n        cloneValueLabel.setEditingOperationType(editingOperationType);\r\n        return cloneValueLabel;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ValueLabelTest0.java",
		"test_prompt": "// ValueLabelTest0.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValueLabel}.\n* It contains ten unit test cases for the {@link ValueLabel#isMissingValue()} method.\n*/\nclass ValueLabelTest0 {"
	},
	{
		"original_code": "// ValueLabel.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes an answer to a survey question\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValueLabel implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    public enum EditingOperationType {\r\n\r\n        NEW, EDIT, DELETE, CANCEL\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String value;\r\n\r\n    private String label;\r\n\r\n    private boolean isMissingValue;\r\n\r\n    private EditingOperationType editingOperationType;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ValueLabel() {\r\n        identifier = 0;\r\n        value = \"\";\r\n        label = \"\";\r\n        isMissingValue = false;\r\n        editingOperationType = EditingOperationType.NEW;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the value\r\n     */\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @param value the value to set\r\n     */\r\n    public void setValue(String value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * @return the isMissingValue\r\n     */\r\n    public boolean isMissingValue() {\r\n        return isMissingValue;\r\n    }\r\n\r\n    /**\r\n     * @param isMissingValue the isMissingValue to set\r\n     */\r\n    public void setMissingValue(boolean isMissingValue) {\r\n        this.isMissingValue = isMissingValue;\r\n    }\r\n\r\n    public void setEditingOperationType(EditingOperationType editingOperationType) {\r\n        this.editingOperationType = editingOperationType;\r\n    }\r\n\r\n    public EditingOperationType getEditingOperationType() {\r\n        return editingOperationType;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        if (editingOperationType == EditingOperationType.NEW) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isEditingExistingRecord() {\r\n        if (editingOperationType == EditingOperationType.EDIT) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedNewRecord() {\r\n        if (editingOperationType == EditingOperationType.CANCEL) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedRecord() {\r\n        if (editingOperationType == EditingOperationType.DELETE) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(ValueLabel valueLabel) {\r\n        if (getDisplayName().equals(valueLabel.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(ValueLabel valueLabel) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(valueLabel.getValue()) == true) {\r\n         * \t\t\tString valueText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"valueLabel.value.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   valueText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //some legacy variables do not appear to have a value.\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(valueLabel.getLabel()) == true) {\r\n\t\t\tString labelText\r\n\t\t\t\t= MacawMessages.getMessage(\"valueLabel.label.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t   labelText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_VALUE_LABEL, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public boolean differencesExist(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        ArrayList<MacawChangeEvent> changeEvents = ValueLabel.detectFieldChanges(user, ownerVariable, originalValueLabel, revisedValueLabel);\r\n        if (changeEvents.size() > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        String userID = user.getUserID();\r\n        String ownerVariableName = ownerVariable.getDisplayName();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String originalValue = originalValueLabel.getValue();\r\n        String revisedValue = revisedValueLabel.getValue();\r\n        if (originalValue.equals(revisedValue) == false) {\r\n            originalValue = ValidationUtility.convertEmptyValueToBlank(originalValue);\r\n            revisedValue = ValidationUtility.convertEmptyValueToBlank(revisedValue);\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.value.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalValue, revisedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalLabel = originalValueLabel.getLabel();\r\n        String revisedLabel = revisedValueLabel.getLabel();\r\n        if (originalLabel.equals(revisedLabel) == false) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.label.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalLabel, revisedLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsMissingValue = originalValueLabel.isMissingValue();\r\n        boolean revisedIsMissingValue = revisedValueLabel.isMissingValue();\r\n        if (originalIsMissingValue != revisedIsMissingValue) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.isMissingValue.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, String.valueOf(originalIsMissingValue), String.valueOf(revisedIsMissingValue));\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(getValue());\r\n        buffer.append(\"-\");\r\n        buffer.append(getLabel());\r\n        return buffer.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        ValueLabel cloneValueLabel = new ValueLabel();\r\n        cloneValueLabel.setIdentifier(identifier);\r\n        cloneValueLabel.setLabel(label);\r\n        cloneValueLabel.setMissingValue(isMissingValue);\r\n        cloneValueLabel.setValue(value);\r\n        cloneValueLabel.setEditingOperationType(editingOperationType);\r\n        return cloneValueLabel;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ValueLabelTest1.java",
		"test_prompt": "// ValueLabelTest1.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValueLabel}.\n* It contains ten unit test cases for the {@link ValueLabel#isNewRecord()} method.\n*/\nclass ValueLabelTest1 {"
	},
	{
		"original_code": "// ValueLabel.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes an answer to a survey question\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValueLabel implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    public enum EditingOperationType {\r\n\r\n        NEW, EDIT, DELETE, CANCEL\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String value;\r\n\r\n    private String label;\r\n\r\n    private boolean isMissingValue;\r\n\r\n    private EditingOperationType editingOperationType;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ValueLabel() {\r\n        identifier = 0;\r\n        value = \"\";\r\n        label = \"\";\r\n        isMissingValue = false;\r\n        editingOperationType = EditingOperationType.NEW;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the value\r\n     */\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @param value the value to set\r\n     */\r\n    public void setValue(String value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * @return the isMissingValue\r\n     */\r\n    public boolean isMissingValue() {\r\n        return isMissingValue;\r\n    }\r\n\r\n    /**\r\n     * @param isMissingValue the isMissingValue to set\r\n     */\r\n    public void setMissingValue(boolean isMissingValue) {\r\n        this.isMissingValue = isMissingValue;\r\n    }\r\n\r\n    public void setEditingOperationType(EditingOperationType editingOperationType) {\r\n        this.editingOperationType = editingOperationType;\r\n    }\r\n\r\n    public EditingOperationType getEditingOperationType() {\r\n        return editingOperationType;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        if (editingOperationType == EditingOperationType.NEW) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isEditingExistingRecord() {\r\n        if (editingOperationType == EditingOperationType.EDIT) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedNewRecord() {\r\n        if (editingOperationType == EditingOperationType.CANCEL) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedRecord() {\r\n        if (editingOperationType == EditingOperationType.DELETE) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(ValueLabel valueLabel) {\r\n        if (getDisplayName().equals(valueLabel.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(ValueLabel valueLabel) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(valueLabel.getValue()) == true) {\r\n         * \t\t\tString valueText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"valueLabel.value.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   valueText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //some legacy variables do not appear to have a value.\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(valueLabel.getLabel()) == true) {\r\n\t\t\tString labelText\r\n\t\t\t\t= MacawMessages.getMessage(\"valueLabel.label.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t   labelText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_VALUE_LABEL, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public boolean differencesExist(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        ArrayList<MacawChangeEvent> changeEvents = ValueLabel.detectFieldChanges(user, ownerVariable, originalValueLabel, revisedValueLabel);\r\n        if (changeEvents.size() > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        String userID = user.getUserID();\r\n        String ownerVariableName = ownerVariable.getDisplayName();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String originalValue = originalValueLabel.getValue();\r\n        String revisedValue = revisedValueLabel.getValue();\r\n        if (originalValue.equals(revisedValue) == false) {\r\n            originalValue = ValidationUtility.convertEmptyValueToBlank(originalValue);\r\n            revisedValue = ValidationUtility.convertEmptyValueToBlank(revisedValue);\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.value.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalValue, revisedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalLabel = originalValueLabel.getLabel();\r\n        String revisedLabel = revisedValueLabel.getLabel();\r\n        if (originalLabel.equals(revisedLabel) == false) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.label.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalLabel, revisedLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsMissingValue = originalValueLabel.isMissingValue();\r\n        boolean revisedIsMissingValue = revisedValueLabel.isMissingValue();\r\n        if (originalIsMissingValue != revisedIsMissingValue) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.isMissingValue.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, String.valueOf(originalIsMissingValue), String.valueOf(revisedIsMissingValue));\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(getValue());\r\n        buffer.append(\"-\");\r\n        buffer.append(getLabel());\r\n        return buffer.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        ValueLabel cloneValueLabel = new ValueLabel();\r\n        cloneValueLabel.setIdentifier(identifier);\r\n        cloneValueLabel.setLabel(label);\r\n        cloneValueLabel.setMissingValue(isMissingValue);\r\n        cloneValueLabel.setValue(value);\r\n        cloneValueLabel.setEditingOperationType(editingOperationType);\r\n        return cloneValueLabel;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ValueLabelTest2.java",
		"test_prompt": "// ValueLabelTest2.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValueLabel}.\n* It contains ten unit test cases for the {@link ValueLabel#isEditingExistingRecord()} method.\n*/\nclass ValueLabelTest2 {"
	},
	{
		"original_code": "// ValueLabel.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes an answer to a survey question\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValueLabel implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    public enum EditingOperationType {\r\n\r\n        NEW, EDIT, DELETE, CANCEL\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String value;\r\n\r\n    private String label;\r\n\r\n    private boolean isMissingValue;\r\n\r\n    private EditingOperationType editingOperationType;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ValueLabel() {\r\n        identifier = 0;\r\n        value = \"\";\r\n        label = \"\";\r\n        isMissingValue = false;\r\n        editingOperationType = EditingOperationType.NEW;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the value\r\n     */\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @param value the value to set\r\n     */\r\n    public void setValue(String value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * @return the isMissingValue\r\n     */\r\n    public boolean isMissingValue() {\r\n        return isMissingValue;\r\n    }\r\n\r\n    /**\r\n     * @param isMissingValue the isMissingValue to set\r\n     */\r\n    public void setMissingValue(boolean isMissingValue) {\r\n        this.isMissingValue = isMissingValue;\r\n    }\r\n\r\n    public void setEditingOperationType(EditingOperationType editingOperationType) {\r\n        this.editingOperationType = editingOperationType;\r\n    }\r\n\r\n    public EditingOperationType getEditingOperationType() {\r\n        return editingOperationType;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        if (editingOperationType == EditingOperationType.NEW) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isEditingExistingRecord() {\r\n        if (editingOperationType == EditingOperationType.EDIT) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedNewRecord() {\r\n        if (editingOperationType == EditingOperationType.CANCEL) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedRecord() {\r\n        if (editingOperationType == EditingOperationType.DELETE) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(ValueLabel valueLabel) {\r\n        if (getDisplayName().equals(valueLabel.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(ValueLabel valueLabel) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(valueLabel.getValue()) == true) {\r\n         * \t\t\tString valueText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"valueLabel.value.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   valueText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //some legacy variables do not appear to have a value.\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(valueLabel.getLabel()) == true) {\r\n\t\t\tString labelText\r\n\t\t\t\t= MacawMessages.getMessage(\"valueLabel.label.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t   labelText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_VALUE_LABEL, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public boolean differencesExist(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        ArrayList<MacawChangeEvent> changeEvents = ValueLabel.detectFieldChanges(user, ownerVariable, originalValueLabel, revisedValueLabel);\r\n        if (changeEvents.size() > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        String userID = user.getUserID();\r\n        String ownerVariableName = ownerVariable.getDisplayName();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String originalValue = originalValueLabel.getValue();\r\n        String revisedValue = revisedValueLabel.getValue();\r\n        if (originalValue.equals(revisedValue) == false) {\r\n            originalValue = ValidationUtility.convertEmptyValueToBlank(originalValue);\r\n            revisedValue = ValidationUtility.convertEmptyValueToBlank(revisedValue);\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.value.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalValue, revisedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalLabel = originalValueLabel.getLabel();\r\n        String revisedLabel = revisedValueLabel.getLabel();\r\n        if (originalLabel.equals(revisedLabel) == false) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.label.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalLabel, revisedLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsMissingValue = originalValueLabel.isMissingValue();\r\n        boolean revisedIsMissingValue = revisedValueLabel.isMissingValue();\r\n        if (originalIsMissingValue != revisedIsMissingValue) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.isMissingValue.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, String.valueOf(originalIsMissingValue), String.valueOf(revisedIsMissingValue));\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(getValue());\r\n        buffer.append(\"-\");\r\n        buffer.append(getLabel());\r\n        return buffer.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        ValueLabel cloneValueLabel = new ValueLabel();\r\n        cloneValueLabel.setIdentifier(identifier);\r\n        cloneValueLabel.setLabel(label);\r\n        cloneValueLabel.setMissingValue(isMissingValue);\r\n        cloneValueLabel.setValue(value);\r\n        cloneValueLabel.setEditingOperationType(editingOperationType);\r\n        return cloneValueLabel;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ValueLabelTest3.java",
		"test_prompt": "// ValueLabelTest3.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValueLabel}.\n* It contains ten unit test cases for the {@link ValueLabel#isDeletedNewRecord()} method.\n*/\nclass ValueLabelTest3 {"
	},
	{
		"original_code": "// ValueLabel.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes an answer to a survey question\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValueLabel implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    public enum EditingOperationType {\r\n\r\n        NEW, EDIT, DELETE, CANCEL\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String value;\r\n\r\n    private String label;\r\n\r\n    private boolean isMissingValue;\r\n\r\n    private EditingOperationType editingOperationType;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ValueLabel() {\r\n        identifier = 0;\r\n        value = \"\";\r\n        label = \"\";\r\n        isMissingValue = false;\r\n        editingOperationType = EditingOperationType.NEW;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the value\r\n     */\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @param value the value to set\r\n     */\r\n    public void setValue(String value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * @return the isMissingValue\r\n     */\r\n    public boolean isMissingValue() {\r\n        return isMissingValue;\r\n    }\r\n\r\n    /**\r\n     * @param isMissingValue the isMissingValue to set\r\n     */\r\n    public void setMissingValue(boolean isMissingValue) {\r\n        this.isMissingValue = isMissingValue;\r\n    }\r\n\r\n    public void setEditingOperationType(EditingOperationType editingOperationType) {\r\n        this.editingOperationType = editingOperationType;\r\n    }\r\n\r\n    public EditingOperationType getEditingOperationType() {\r\n        return editingOperationType;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        if (editingOperationType == EditingOperationType.NEW) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isEditingExistingRecord() {\r\n        if (editingOperationType == EditingOperationType.EDIT) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedNewRecord() {\r\n        if (editingOperationType == EditingOperationType.CANCEL) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedRecord() {\r\n        if (editingOperationType == EditingOperationType.DELETE) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(ValueLabel valueLabel) {\r\n        if (getDisplayName().equals(valueLabel.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(ValueLabel valueLabel) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(valueLabel.getValue()) == true) {\r\n         * \t\t\tString valueText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"valueLabel.value.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   valueText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //some legacy variables do not appear to have a value.\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(valueLabel.getLabel()) == true) {\r\n\t\t\tString labelText\r\n\t\t\t\t= MacawMessages.getMessage(\"valueLabel.label.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t   labelText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_VALUE_LABEL, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public boolean differencesExist(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        ArrayList<MacawChangeEvent> changeEvents = ValueLabel.detectFieldChanges(user, ownerVariable, originalValueLabel, revisedValueLabel);\r\n        if (changeEvents.size() > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        String userID = user.getUserID();\r\n        String ownerVariableName = ownerVariable.getDisplayName();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String originalValue = originalValueLabel.getValue();\r\n        String revisedValue = revisedValueLabel.getValue();\r\n        if (originalValue.equals(revisedValue) == false) {\r\n            originalValue = ValidationUtility.convertEmptyValueToBlank(originalValue);\r\n            revisedValue = ValidationUtility.convertEmptyValueToBlank(revisedValue);\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.value.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalValue, revisedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalLabel = originalValueLabel.getLabel();\r\n        String revisedLabel = revisedValueLabel.getLabel();\r\n        if (originalLabel.equals(revisedLabel) == false) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.label.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalLabel, revisedLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsMissingValue = originalValueLabel.isMissingValue();\r\n        boolean revisedIsMissingValue = revisedValueLabel.isMissingValue();\r\n        if (originalIsMissingValue != revisedIsMissingValue) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.isMissingValue.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, String.valueOf(originalIsMissingValue), String.valueOf(revisedIsMissingValue));\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(getValue());\r\n        buffer.append(\"-\");\r\n        buffer.append(getLabel());\r\n        return buffer.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        ValueLabel cloneValueLabel = new ValueLabel();\r\n        cloneValueLabel.setIdentifier(identifier);\r\n        cloneValueLabel.setLabel(label);\r\n        cloneValueLabel.setMissingValue(isMissingValue);\r\n        cloneValueLabel.setValue(value);\r\n        cloneValueLabel.setEditingOperationType(editingOperationType);\r\n        return cloneValueLabel;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ValueLabelTest4.java",
		"test_prompt": "// ValueLabelTest4.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValueLabel}.\n* It contains ten unit test cases for the {@link ValueLabel#isDeletedRecord()} method.\n*/\nclass ValueLabelTest4 {"
	},
	{
		"original_code": "// ValueLabel.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes an answer to a survey question\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValueLabel implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    public enum EditingOperationType {\r\n\r\n        NEW, EDIT, DELETE, CANCEL\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String value;\r\n\r\n    private String label;\r\n\r\n    private boolean isMissingValue;\r\n\r\n    private EditingOperationType editingOperationType;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ValueLabel() {\r\n        identifier = 0;\r\n        value = \"\";\r\n        label = \"\";\r\n        isMissingValue = false;\r\n        editingOperationType = EditingOperationType.NEW;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the value\r\n     */\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @param value the value to set\r\n     */\r\n    public void setValue(String value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * @return the isMissingValue\r\n     */\r\n    public boolean isMissingValue() {\r\n        return isMissingValue;\r\n    }\r\n\r\n    /**\r\n     * @param isMissingValue the isMissingValue to set\r\n     */\r\n    public void setMissingValue(boolean isMissingValue) {\r\n        this.isMissingValue = isMissingValue;\r\n    }\r\n\r\n    public void setEditingOperationType(EditingOperationType editingOperationType) {\r\n        this.editingOperationType = editingOperationType;\r\n    }\r\n\r\n    public EditingOperationType getEditingOperationType() {\r\n        return editingOperationType;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        if (editingOperationType == EditingOperationType.NEW) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isEditingExistingRecord() {\r\n        if (editingOperationType == EditingOperationType.EDIT) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedNewRecord() {\r\n        if (editingOperationType == EditingOperationType.CANCEL) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedRecord() {\r\n        if (editingOperationType == EditingOperationType.DELETE) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(ValueLabel valueLabel) {\r\n        if (getDisplayName().equals(valueLabel.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(ValueLabel valueLabel) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(valueLabel.getValue()) == true) {\r\n         * \t\t\tString valueText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"valueLabel.value.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   valueText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //some legacy variables do not appear to have a value.\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(valueLabel.getLabel()) == true) {\r\n\t\t\tString labelText\r\n\t\t\t\t= MacawMessages.getMessage(\"valueLabel.label.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t   labelText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_VALUE_LABEL, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public boolean differencesExist(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        ArrayList<MacawChangeEvent> changeEvents = ValueLabel.detectFieldChanges(user, ownerVariable, originalValueLabel, revisedValueLabel);\r\n        if (changeEvents.size() > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        String userID = user.getUserID();\r\n        String ownerVariableName = ownerVariable.getDisplayName();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String originalValue = originalValueLabel.getValue();\r\n        String revisedValue = revisedValueLabel.getValue();\r\n        if (originalValue.equals(revisedValue) == false) {\r\n            originalValue = ValidationUtility.convertEmptyValueToBlank(originalValue);\r\n            revisedValue = ValidationUtility.convertEmptyValueToBlank(revisedValue);\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.value.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalValue, revisedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalLabel = originalValueLabel.getLabel();\r\n        String revisedLabel = revisedValueLabel.getLabel();\r\n        if (originalLabel.equals(revisedLabel) == false) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.label.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalLabel, revisedLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsMissingValue = originalValueLabel.isMissingValue();\r\n        boolean revisedIsMissingValue = revisedValueLabel.isMissingValue();\r\n        if (originalIsMissingValue != revisedIsMissingValue) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.isMissingValue.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, String.valueOf(originalIsMissingValue), String.valueOf(revisedIsMissingValue));\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(getValue());\r\n        buffer.append(\"-\");\r\n        buffer.append(getLabel());\r\n        return buffer.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        ValueLabel cloneValueLabel = new ValueLabel();\r\n        cloneValueLabel.setIdentifier(identifier);\r\n        cloneValueLabel.setLabel(label);\r\n        cloneValueLabel.setMissingValue(isMissingValue);\r\n        cloneValueLabel.setValue(value);\r\n        cloneValueLabel.setEditingOperationType(editingOperationType);\r\n        return cloneValueLabel;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ValueLabelTest5.java",
		"test_prompt": "// ValueLabelTest5.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValueLabel}.\n* It contains ten unit test cases for the {@link ValueLabel#hasSameDisplayName(ValueLabel)} method.\n*/\nclass ValueLabelTest5 {"
	},
	{
		"original_code": "// ValueLabel.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes an answer to a survey question\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValueLabel implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    public enum EditingOperationType {\r\n\r\n        NEW, EDIT, DELETE, CANCEL\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String value;\r\n\r\n    private String label;\r\n\r\n    private boolean isMissingValue;\r\n\r\n    private EditingOperationType editingOperationType;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ValueLabel() {\r\n        identifier = 0;\r\n        value = \"\";\r\n        label = \"\";\r\n        isMissingValue = false;\r\n        editingOperationType = EditingOperationType.NEW;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the value\r\n     */\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @param value the value to set\r\n     */\r\n    public void setValue(String value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * @return the isMissingValue\r\n     */\r\n    public boolean isMissingValue() {\r\n        return isMissingValue;\r\n    }\r\n\r\n    /**\r\n     * @param isMissingValue the isMissingValue to set\r\n     */\r\n    public void setMissingValue(boolean isMissingValue) {\r\n        this.isMissingValue = isMissingValue;\r\n    }\r\n\r\n    public void setEditingOperationType(EditingOperationType editingOperationType) {\r\n        this.editingOperationType = editingOperationType;\r\n    }\r\n\r\n    public EditingOperationType getEditingOperationType() {\r\n        return editingOperationType;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        if (editingOperationType == EditingOperationType.NEW) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isEditingExistingRecord() {\r\n        if (editingOperationType == EditingOperationType.EDIT) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedNewRecord() {\r\n        if (editingOperationType == EditingOperationType.CANCEL) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedRecord() {\r\n        if (editingOperationType == EditingOperationType.DELETE) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(ValueLabel valueLabel) {\r\n        if (getDisplayName().equals(valueLabel.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(ValueLabel valueLabel) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(valueLabel.getValue()) == true) {\r\n         * \t\t\tString valueText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"valueLabel.value.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   valueText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //some legacy variables do not appear to have a value.\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(valueLabel.getLabel()) == true) {\r\n\t\t\tString labelText\r\n\t\t\t\t= MacawMessages.getMessage(\"valueLabel.label.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t   labelText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_VALUE_LABEL, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public boolean differencesExist(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        ArrayList<MacawChangeEvent> changeEvents = ValueLabel.detectFieldChanges(user, ownerVariable, originalValueLabel, revisedValueLabel);\r\n        if (changeEvents.size() > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        String userID = user.getUserID();\r\n        String ownerVariableName = ownerVariable.getDisplayName();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String originalValue = originalValueLabel.getValue();\r\n        String revisedValue = revisedValueLabel.getValue();\r\n        if (originalValue.equals(revisedValue) == false) {\r\n            originalValue = ValidationUtility.convertEmptyValueToBlank(originalValue);\r\n            revisedValue = ValidationUtility.convertEmptyValueToBlank(revisedValue);\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.value.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalValue, revisedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalLabel = originalValueLabel.getLabel();\r\n        String revisedLabel = revisedValueLabel.getLabel();\r\n        if (originalLabel.equals(revisedLabel) == false) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.label.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalLabel, revisedLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsMissingValue = originalValueLabel.isMissingValue();\r\n        boolean revisedIsMissingValue = revisedValueLabel.isMissingValue();\r\n        if (originalIsMissingValue != revisedIsMissingValue) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.isMissingValue.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, String.valueOf(originalIsMissingValue), String.valueOf(revisedIsMissingValue));\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(getValue());\r\n        buffer.append(\"-\");\r\n        buffer.append(getLabel());\r\n        return buffer.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        ValueLabel cloneValueLabel = new ValueLabel();\r\n        cloneValueLabel.setIdentifier(identifier);\r\n        cloneValueLabel.setLabel(label);\r\n        cloneValueLabel.setMissingValue(isMissingValue);\r\n        cloneValueLabel.setValue(value);\r\n        cloneValueLabel.setEditingOperationType(editingOperationType);\r\n        return cloneValueLabel;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ValueLabelTest6.java",
		"test_prompt": "// ValueLabelTest6.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValueLabel}.\n* It contains ten unit test cases for the {@link ValueLabel#differencesExist(User, Variable, ValueLabel, ValueLabel)} method.\n*/\nclass ValueLabelTest6 {"
	},
	{
		"original_code": "// ValueLabel.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes an answer to a survey question\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValueLabel implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    public enum EditingOperationType {\r\n\r\n        NEW, EDIT, DELETE, CANCEL\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String value;\r\n\r\n    private String label;\r\n\r\n    private boolean isMissingValue;\r\n\r\n    private EditingOperationType editingOperationType;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ValueLabel() {\r\n        identifier = 0;\r\n        value = \"\";\r\n        label = \"\";\r\n        isMissingValue = false;\r\n        editingOperationType = EditingOperationType.NEW;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the value\r\n     */\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @param value the value to set\r\n     */\r\n    public void setValue(String value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * @return the isMissingValue\r\n     */\r\n    public boolean isMissingValue() {\r\n        return isMissingValue;\r\n    }\r\n\r\n    /**\r\n     * @param isMissingValue the isMissingValue to set\r\n     */\r\n    public void setMissingValue(boolean isMissingValue) {\r\n        this.isMissingValue = isMissingValue;\r\n    }\r\n\r\n    public void setEditingOperationType(EditingOperationType editingOperationType) {\r\n        this.editingOperationType = editingOperationType;\r\n    }\r\n\r\n    public EditingOperationType getEditingOperationType() {\r\n        return editingOperationType;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        if (editingOperationType == EditingOperationType.NEW) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isEditingExistingRecord() {\r\n        if (editingOperationType == EditingOperationType.EDIT) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedNewRecord() {\r\n        if (editingOperationType == EditingOperationType.CANCEL) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedRecord() {\r\n        if (editingOperationType == EditingOperationType.DELETE) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(ValueLabel valueLabel) {\r\n        if (getDisplayName().equals(valueLabel.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(ValueLabel valueLabel) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(valueLabel.getValue()) == true) {\r\n         * \t\t\tString valueText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"valueLabel.value.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   valueText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //some legacy variables do not appear to have a value.\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(valueLabel.getLabel()) == true) {\r\n\t\t\tString labelText\r\n\t\t\t\t= MacawMessages.getMessage(\"valueLabel.label.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t   labelText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_VALUE_LABEL, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public boolean differencesExist(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        ArrayList<MacawChangeEvent> changeEvents = ValueLabel.detectFieldChanges(user, ownerVariable, originalValueLabel, revisedValueLabel);\r\n        if (changeEvents.size() > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        String userID = user.getUserID();\r\n        String ownerVariableName = ownerVariable.getDisplayName();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String originalValue = originalValueLabel.getValue();\r\n        String revisedValue = revisedValueLabel.getValue();\r\n        if (originalValue.equals(revisedValue) == false) {\r\n            originalValue = ValidationUtility.convertEmptyValueToBlank(originalValue);\r\n            revisedValue = ValidationUtility.convertEmptyValueToBlank(revisedValue);\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.value.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalValue, revisedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalLabel = originalValueLabel.getLabel();\r\n        String revisedLabel = revisedValueLabel.getLabel();\r\n        if (originalLabel.equals(revisedLabel) == false) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.label.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalLabel, revisedLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsMissingValue = originalValueLabel.isMissingValue();\r\n        boolean revisedIsMissingValue = revisedValueLabel.isMissingValue();\r\n        if (originalIsMissingValue != revisedIsMissingValue) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.isMissingValue.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, String.valueOf(originalIsMissingValue), String.valueOf(revisedIsMissingValue));\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(getValue());\r\n        buffer.append(\"-\");\r\n        buffer.append(getLabel());\r\n        return buffer.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        ValueLabel cloneValueLabel = new ValueLabel();\r\n        cloneValueLabel.setIdentifier(identifier);\r\n        cloneValueLabel.setLabel(label);\r\n        cloneValueLabel.setMissingValue(isMissingValue);\r\n        cloneValueLabel.setValue(value);\r\n        cloneValueLabel.setEditingOperationType(editingOperationType);\r\n        return cloneValueLabel;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ValueLabelTest7.java",
		"test_prompt": "// ValueLabelTest7.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValueLabel}.\n* It contains ten unit test cases for the {@link ValueLabel#detectFieldChanges(User, Variable, ValueLabel, ValueLabel)} method.\n*/\nclass ValueLabelTest7 {"
	},
	{
		"original_code": "// ValueLabel.java\npackage macaw.businessLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * describes an answer to a survey question\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ValueLabel implements Cloneable, Displayable {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    public enum EditingOperationType {\r\n\r\n        NEW, EDIT, DELETE, CANCEL\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private int identifier;\r\n\r\n    private String value;\r\n\r\n    private String label;\r\n\r\n    private boolean isMissingValue;\r\n\r\n    private EditingOperationType editingOperationType;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ValueLabel() {\r\n        identifier = 0;\r\n        value = \"\";\r\n        label = \"\";\r\n        isMissingValue = false;\r\n        editingOperationType = EditingOperationType.NEW;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * @return the identifier\r\n     */\r\n    public int getIdentifier() {\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * @param identifier the identifier to set\r\n     */\r\n    public void setIdentifier(int identifier) {\r\n        this.identifier = identifier;\r\n    }\r\n\r\n    /**\r\n     * @return the value\r\n     */\r\n    public String getValue() {\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * @param value the value to set\r\n     */\r\n    public void setValue(String value) {\r\n        this.value = value;\r\n    }\r\n\r\n    /**\r\n     * @return the label\r\n     */\r\n    public String getLabel() {\r\n        return label;\r\n    }\r\n\r\n    /**\r\n     * @param label the label to set\r\n     */\r\n    public void setLabel(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    /**\r\n     * @return the isMissingValue\r\n     */\r\n    public boolean isMissingValue() {\r\n        return isMissingValue;\r\n    }\r\n\r\n    /**\r\n     * @param isMissingValue the isMissingValue to set\r\n     */\r\n    public void setMissingValue(boolean isMissingValue) {\r\n        this.isMissingValue = isMissingValue;\r\n    }\r\n\r\n    public void setEditingOperationType(EditingOperationType editingOperationType) {\r\n        this.editingOperationType = editingOperationType;\r\n    }\r\n\r\n    public EditingOperationType getEditingOperationType() {\r\n        return editingOperationType;\r\n    }\r\n\r\n    public boolean isNewRecord() {\r\n        if (editingOperationType == EditingOperationType.NEW) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isEditingExistingRecord() {\r\n        if (editingOperationType == EditingOperationType.EDIT) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedNewRecord() {\r\n        if (editingOperationType == EditingOperationType.CANCEL) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean isDeletedRecord() {\r\n        if (editingOperationType == EditingOperationType.DELETE) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean hasSameDisplayName(ValueLabel valueLabel) {\r\n        if (getDisplayName().equals(valueLabel.getDisplayName()) == true) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    public static void validateFields(ValueLabel valueLabel) throws MacawException {\r\n        ArrayList<String> errorMessages = new ArrayList<String>();\r\n        /**\r\n         * \t\tif (ValidationUtility.isBlank(valueLabel.getValue()) == true) {\r\n         * \t\t\tString valueText\r\n         * \t\t\t\t= MacawMessages.getMessage(\"valueLabel.value.label\");\r\n         * \t\t\tString errorMessage\r\n         * \t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n         * \t\t\t\t\t\t\t\t\t\t   valueText);\r\n         * \t\t\terrorMessages.add(errorMessage);\r\n         * \t\t}\r\n         */\r\n        //some legacy variables do not appear to have a value.\r\n        /*\r\n\t\tif (ValidationUtility.isBlank(valueLabel.getLabel()) == true) {\r\n\t\t\tString labelText\r\n\t\t\t\t= MacawMessages.getMessage(\"valueLabel.label.label\");\r\n\t\t\tString errorMessage\r\n\t\t\t\t= MacawMessages.getMessage(\"general.error.blankField\",\r\n\t\t\t\t\t\t\t\t\t\t   labelText);\r\n\t\t\terrorMessages.add(errorMessage);\r\n\t\t}\r\n\t\t*/\r\n        if (errorMessages.size() > 0) {\r\n            MacawException exception = new MacawException();\r\n            for (String errorMessage : errorMessages) {\r\n                exception.addErrorMessage(MacawErrorType.INVALID_VALUE_LABEL, errorMessage);\r\n            }\r\n            exception.printErrors();\r\n            throw exception;\r\n        }\r\n    }\r\n\r\n    static public boolean differencesExist(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        ArrayList<MacawChangeEvent> changeEvents = ValueLabel.detectFieldChanges(user, ownerVariable, originalValueLabel, revisedValueLabel);\r\n        if (changeEvents.size() > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> detectFieldChanges(User user, Variable ownerVariable, ValueLabel originalValueLabel, ValueLabel revisedValueLabel) {\r\n        String userID = user.getUserID();\r\n        String ownerVariableName = ownerVariable.getDisplayName();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String originalValue = originalValueLabel.getValue();\r\n        String revisedValue = revisedValueLabel.getValue();\r\n        if (originalValue.equals(revisedValue) == false) {\r\n            originalValue = ValidationUtility.convertEmptyValueToBlank(originalValue);\r\n            revisedValue = ValidationUtility.convertEmptyValueToBlank(revisedValue);\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.value.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalValue, revisedValue);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        String originalLabel = originalValueLabel.getLabel();\r\n        String revisedLabel = revisedValueLabel.getLabel();\r\n        if (originalLabel.equals(revisedLabel) == false) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.label.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, originalLabel, revisedLabel);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        boolean originalIsMissingValue = originalValueLabel.isMissingValue();\r\n        boolean revisedIsMissingValue = revisedValueLabel.isMissingValue();\r\n        if (originalIsMissingValue != revisedIsMissingValue) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.isMissingValue.saveChanges\", originalValueLabel.getDisplayName(), ownerVariableName, String.valueOf(originalIsMissingValue), String.valueOf(revisedIsMissingValue));\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(ownerVariable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(originalValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Displayable\r\n    public String getDisplayName() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(getValue());\r\n        buffer.append(\"-\");\r\n        buffer.append(getLabel());\r\n        return buffer.toString();\r\n    }\r\n\r\n    public String getDisplayItemIdentifier() {\r\n        return String.valueOf(identifier);\r\n    }\r\n\r\n    //Interface: Cloneable\r\n    public Object clone() {\r\n        ValueLabel cloneValueLabel = new ValueLabel();\r\n        cloneValueLabel.setIdentifier(identifier);\r\n        cloneValueLabel.setLabel(label);\r\n        cloneValueLabel.setMissingValue(isMissingValue);\r\n        cloneValueLabel.setValue(value);\r\n        cloneValueLabel.setEditingOperationType(editingOperationType);\r\n        return cloneValueLabel;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ValueLabelTest8.java",
		"test_prompt": "// ValueLabelTest8.java\npackage macaw.businessLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValueLabel}.\n* It contains ten unit test cases for the {@link ValueLabel#clone()} method.\n*/\nclass ValueLabelTest8 {"
	},
	{
		"original_code": "// StartupOptions.java\npackage macaw.system;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class StartupOptions {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private boolean useDemo;\r\n\r\n    private String databaseName;\r\n\r\n    private String dbDriverName;\r\n\r\n    private String dbUser;\r\n\r\n    private String dbPassword;\r\n\r\n    private String server;\r\n\r\n    private String port;\r\n\r\n    private int maximumNumberOfConnections;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public StartupOptions() {\r\n        useDemo = true;\r\n        dbUser = null;\r\n        dbPassword = null;\r\n        server = \"localhost\";\r\n        port = null;\r\n        dbDriverName = \"com.mysql.jdbc.Driver\";\r\n        databaseName = \"macaw\";\r\n        maximumNumberOfConnections = 20;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void processCommandLineArguments(String[] arguments) {\r\n        useDemo = true;\r\n        for (int i = 0; i < arguments.length; i++) {\r\n            if (arguments[i].equals(\"-production\") == true) {\r\n                useDemo = false;\r\n            } else if (arguments[i].equals(\"-dbUser\") == true) {\r\n                dbUser = arguments[i + 1];\r\n            } else if (arguments[i].equals(\"-dbPassword\") == true) {\r\n                dbPassword = arguments[i + 1];\r\n            } else if (arguments[i].equals(\"-dbName\") == true) {\r\n                databaseName = arguments[i + 1];\r\n            } else if (arguments[i].equals(\"-dbServer\") == true) {\r\n                server = arguments[i + 1];\r\n            } else if (arguments[i].equals(\"-dbPort\") == true) {\r\n                port = arguments[i + 1];\r\n            }\r\n        }\r\n    }\r\n\r\n    public String getDatabaseURI() {\r\n        StringBuilder buffer = new StringBuilder();\r\n        buffer.append(\"jdbc:mysql://\");\r\n        if (server == null) {\r\n            buffer.append(\"localhost\");\r\n        } else {\r\n            buffer.append(server);\r\n        }\r\n        if (port != null) {\r\n            buffer.append(\":\");\r\n            buffer.append(port);\r\n        }\r\n        buffer.append(\"/\");\r\n        buffer.append(databaseName);\r\n        return buffer.toString();\r\n    }\r\n\r\n    /**\r\n     * @return the dbUser\r\n     */\r\n    public String getDbUser() {\r\n        return dbUser;\r\n    }\r\n\r\n    /**\r\n     * @param dbUser the dbUser to set\r\n     */\r\n    public void setDbUser(String dbUser) {\r\n        this.dbUser = dbUser;\r\n    }\r\n\r\n    /**\r\n     * @return the dbPassword\r\n     */\r\n    public String getDbPassword() {\r\n        return dbPassword;\r\n    }\r\n\r\n    /**\r\n     * @param dbPassword the dbPassword to set\r\n     */\r\n    public void setDbPassword(String dbPassword) {\r\n        this.dbPassword = dbPassword;\r\n    }\r\n\r\n    /**\r\n     * @return the server\r\n     */\r\n    public String getServer() {\r\n        return server;\r\n    }\r\n\r\n    /**\r\n     * @param server the server to set\r\n     */\r\n    public void setServer(String server) {\r\n        this.server = server;\r\n    }\r\n\r\n    /**\r\n     * @return the port\r\n     */\r\n    public String getPort() {\r\n        return port;\r\n    }\r\n\r\n    /**\r\n     * @param port the port to set\r\n     */\r\n    public void setPort(String port) {\r\n        this.port = port;\r\n    }\r\n\r\n    /**\r\n     * @return the useDemo\r\n     */\r\n    public boolean useDemo() {\r\n        return useDemo;\r\n    }\r\n\r\n    /**\r\n     * @param useDemo the useDemo to set\r\n     */\r\n    public void setUseDemo(boolean useDemo) {\r\n        this.useDemo = useDemo;\r\n    }\r\n\r\n    /**\r\n     * @return the databaseName\r\n     */\r\n    public String getDatabaseName() {\r\n        return databaseName;\r\n    }\r\n\r\n    /**\r\n     * @param databaseName the databaseName to set\r\n     */\r\n    public void setDatabaseName(String databaseName) {\r\n        this.databaseName = databaseName;\r\n    }\r\n\r\n    /**\r\n     * @return the dbDriverName\r\n     */\r\n    public String getDbDriverName() {\r\n        return dbDriverName;\r\n    }\r\n\r\n    /**\r\n     * @param dbDriverName the dbDriverName to set\r\n     */\r\n    public void setDbDriverName(String dbDriverName) {\r\n        this.dbDriverName = dbDriverName;\r\n    }\r\n\r\n    /**\r\n     * @return the maximumNumberOfConnections\r\n     */\r\n    public int getMaximumNumberOfConnections() {\r\n        return maximumNumberOfConnections;\r\n    }\r\n\r\n    /**\r\n     * @param maximumNumberOfConnections the maximumNumberOfConnections to set\r\n     */\r\n    public void setMaximumNumberOfConnections(int maximumNumberOfConnections) {\r\n        this.maximumNumberOfConnections = maximumNumberOfConnections;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/StartupOptionsTest.java",
		"test_prompt": "// StartupOptionsTest.java\npackage macaw.system;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StartupOptions}.\n* It contains ten unit test cases for the {@link StartupOptions#useDemo()} method.\n*/\nclass StartupOptionsTest {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest0.java",
		"test_prompt": "// UserInterfaceFactoryTest0.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createButton(String)} method.\n*/\nclass UserInterfaceFactoryTest0 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest1.java",
		"test_prompt": "// UserInterfaceFactoryTest1.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createTabbedPane()} method.\n*/\nclass UserInterfaceFactoryTest1 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest2.java",
		"test_prompt": "// UserInterfaceFactoryTest2.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createLabel()} method.\n*/\nclass UserInterfaceFactoryTest2 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest3.java",
		"test_prompt": "// UserInterfaceFactoryTest3.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createLabel(String)} method.\n*/\nclass UserInterfaceFactoryTest3 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest4.java",
		"test_prompt": "// UserInterfaceFactoryTest4.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createSpinner(SpinnerModel)} method.\n*/\nclass UserInterfaceFactoryTest4 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest5.java",
		"test_prompt": "// UserInterfaceFactoryTest5.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createGridBagConstraints()} method.\n*/\nclass UserInterfaceFactoryTest5 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest6.java",
		"test_prompt": "// UserInterfaceFactoryTest6.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createPanel()} method.\n*/\nclass UserInterfaceFactoryTest6 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest7.java",
		"test_prompt": "// UserInterfaceFactoryTest7.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createBorderLayoutPanel()} method.\n*/\nclass UserInterfaceFactoryTest7 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest8.java",
		"test_prompt": "// UserInterfaceFactoryTest8.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createPasswordField(int)} method.\n*/\nclass UserInterfaceFactoryTest8 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest9.java",
		"test_prompt": "// UserInterfaceFactoryTest9.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createTextField(int)} method.\n*/\nclass UserInterfaceFactoryTest9 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest10.java",
		"test_prompt": "// UserInterfaceFactoryTest10.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createMenuBar()} method.\n*/\nclass UserInterfaceFactoryTest10 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest11.java",
		"test_prompt": "// UserInterfaceFactoryTest11.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createMenu(String)} method.\n*/\nclass UserInterfaceFactoryTest11 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest12.java",
		"test_prompt": "// UserInterfaceFactoryTest12.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createRadioButtonMenuItem(String)} method.\n*/\nclass UserInterfaceFactoryTest12 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest13.java",
		"test_prompt": "// UserInterfaceFactoryTest13.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createRadioButton(String)} method.\n*/\nclass UserInterfaceFactoryTest13 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest14.java",
		"test_prompt": "// UserInterfaceFactoryTest14.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createMenuItem(String)} method.\n*/\nclass UserInterfaceFactoryTest14 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest15.java",
		"test_prompt": "// UserInterfaceFactoryTest15.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createCheckBox(String)} method.\n*/\nclass UserInterfaceFactoryTest15 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest16.java",
		"test_prompt": "// UserInterfaceFactoryTest16.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createScrollPane(Component)} method.\n*/\nclass UserInterfaceFactoryTest16 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest17.java",
		"test_prompt": "// UserInterfaceFactoryTest17.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createImmutableTextField(int)} method.\n*/\nclass UserInterfaceFactoryTest17 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest18.java",
		"test_prompt": "// UserInterfaceFactoryTest18.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createImmutableTextArea(int, int)} method.\n*/\nclass UserInterfaceFactoryTest18 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest19.java",
		"test_prompt": "// UserInterfaceFactoryTest19.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createTextArea(int, int)} method.\n*/\nclass UserInterfaceFactoryTest19 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest20.java",
		"test_prompt": "// UserInterfaceFactoryTest20.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createComboBox(String[])} method.\n*/\nclass UserInterfaceFactoryTest20 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest21.java",
		"test_prompt": "// UserInterfaceFactoryTest21.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createFileChooser()} method.\n*/\nclass UserInterfaceFactoryTest21 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest22.java",
		"test_prompt": "// UserInterfaceFactoryTest22.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createList()} method.\n*/\nclass UserInterfaceFactoryTest22 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest23.java",
		"test_prompt": "// UserInterfaceFactoryTest23.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createList(Vector)} method.\n*/\nclass UserInterfaceFactoryTest23 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest24.java",
		"test_prompt": "// UserInterfaceFactoryTest24.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createEditorPane()} method.\n*/\nclass UserInterfaceFactoryTest24 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest25.java",
		"test_prompt": "// UserInterfaceFactoryTest25.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createTable(TableModel)} method.\n*/\nclass UserInterfaceFactoryTest25 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest26.java",
		"test_prompt": "// UserInterfaceFactoryTest26.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createSeparator()} method.\n*/\nclass UserInterfaceFactoryTest26 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest27.java",
		"test_prompt": "// UserInterfaceFactoryTest27.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createPopupMenu()} method.\n*/\nclass UserInterfaceFactoryTest27 {"
	},
	{
		"original_code": "// UserInterfaceFactory.java\npackage macaw.system;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\nimport javax.swing.table.*;\r\n\r\n/**\r\n * centralised the creation of GUI components used to produce the Macaw data entry forms.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class UserInterfaceFactory {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Font plainFont;\r\n\r\n    private Font currentFont;\r\n\r\n    private Color textColour;\r\n\r\n    //private Color selectedItemBackground;\r\n    private Color buttonBackground;\r\n\r\n    private Color fieldBackground;\r\n\r\n    private Color formBackground;\r\n\r\n    private Font smallFont;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public UserInterfaceFactory() {\r\n        JLabel sampleObject = new JLabel();\r\n        Font normalFont = sampleObject.getFont();\r\n        plainFont = normalFont.deriveFont(Font.PLAIN);\r\n        //currentFont = plainFont.deriveFont(72);\r\n        smallFont = new Font(\"Arial\", Font.PLAIN, 10);\r\n        currentFont = new Font(\"Arial\", Font.PLAIN, 16);\r\n        textColour = Color.black;\r\n        fieldBackground = Color.white;\r\n        formBackground = sampleObject.getBackground();\r\n        //formBackground = Color.orange;\r\n        buttonBackground = sampleObject.getBackground();\r\n        //buttonBackground = Color.orange;\r\n        //updateFontSettings();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public JButton createButton(String buttonText) {\r\n        JButton button = new JButton(buttonText);\r\n        setComponentProperties(button);\r\n        return button;\r\n    }\r\n\r\n    public JTabbedPane createTabbedPane() {\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        setComponentProperties(tabbedPane);\r\n        return tabbedPane;\r\n    }\r\n\r\n    public JLabel createLabel() {\r\n        JLabel label = new JLabel(\"\");\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JLabel createLabel(String labelText) {\r\n        JLabel label = new JLabel(labelText);\r\n        setComponentProperties(label);\r\n        return label;\r\n    }\r\n\r\n    public JSpinner createSpinner(SpinnerModel spinnerModel) {\r\n        JSpinner spinner = new JSpinner(spinnerModel);\r\n        setComponentProperties(spinner);\r\n        return spinner;\r\n    }\r\n\r\n    public GridBagConstraints createGridBagConstraints() {\r\n        GridBagConstraints panelGC = new GridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.anchor = GridBagConstraints.NORTHWEST;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.gridx = 0;\r\n        panelGC.gridy = 0;\r\n        return panelGC;\r\n    }\r\n\r\n    public JPanel createPanel() {\r\n        JPanel panel = new JPanel(new GridBagLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPanel createBorderLayoutPanel() {\r\n        JPanel panel = new JPanel(new BorderLayout());\r\n        setComponentProperties(panel);\r\n        return panel;\r\n    }\r\n\r\n    public JPasswordField createPasswordField(int numberOfColumns) {\r\n        JPasswordField passwordField = new JPasswordField(numberOfColumns);\r\n        passwordField.setBackground(fieldBackground);\r\n        return passwordField;\r\n    }\r\n\r\n    public JTextField createTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        textField.setBackground(fieldBackground);\r\n        return textField;\r\n    }\r\n\r\n    public JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setComponentProperties(menuBar);\r\n        return menuBar;\r\n    }\r\n\r\n    public JMenu createMenu(String menuText) {\r\n        JMenu menu = new JMenu(menuText);\r\n        setComponentProperties(menu);\r\n        return menu;\r\n    }\r\n\r\n    public JRadioButtonMenuItem createRadioButtonMenuItem(String menuItemText) {\r\n        JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public JRadioButton createRadioButton(String buttonText) {\r\n        JRadioButton radioButton = new JRadioButton(buttonText);\r\n        setComponentProperties(radioButton);\r\n        return radioButton;\r\n    }\r\n\r\n    public JMenuItem createMenuItem(String menuItemText) {\r\n        JMenuItem menuItem = new JMenuItem(menuItemText);\r\n        setComponentProperties(menuItem);\r\n        return menuItem;\r\n    }\r\n\r\n    public void setContainerProperties(Container component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public void setComponentProperties(JComponent component) {\r\n        component.setBackground(formBackground);\r\n        component.setFont(currentFont);\r\n    }\r\n\r\n    public JCheckBox createCheckBox(String text) {\r\n        JCheckBox checkBox = new JCheckBox(text);\r\n        setComponentProperties(checkBox);\r\n        return checkBox;\r\n    }\r\n\r\n    public JScrollPane createScrollPane(Component component) {\r\n        JScrollPane scrollPane = new JScrollPane(component);\r\n        setComponentProperties(scrollPane);\r\n        return scrollPane;\r\n    }\r\n\r\n    public JTextField createImmutableTextField(int numberOfColumns) {\r\n        JTextField textField = new JTextField(numberOfColumns);\r\n        setComponentProperties(textField);\r\n        textField.setEditable(false);\r\n        textField.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textField;\r\n    }\r\n\r\n    public JTextArea createImmutableTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setEditable(false);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(formBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JTextArea createTextArea(int numberOfRows, int numberOfColumns) {\r\n        JTextArea textArea = new JTextArea(numberOfRows, numberOfColumns);\r\n        setComponentProperties(textArea);\r\n        textArea.setLineWrap(true);\r\n        textArea.setWrapStyleWord(true);\r\n        textArea.setBackground(fieldBackground);\r\n        //setComponentProperties(textArea);\r\n        return textArea;\r\n    }\r\n\r\n    public JComboBox createComboBox(String[] choices) {\r\n        JComboBox comboBox = new JComboBox(choices);\r\n        setComponentProperties(comboBox);\r\n        return comboBox;\r\n    }\r\n\r\n    public JFileChooser createFileChooser() {\r\n        JFileChooser fileChooser = new JFileChooser(\".\");\r\n        setComponentProperties(fileChooser);\r\n        return fileChooser;\r\n    }\r\n\r\n    public JList createList() {\r\n        JList list = new JList();\r\n        setComponentProperties(list);\r\n        list.getCellRenderer();\r\n        return list;\r\n    }\r\n\r\n    public JList createList(Vector<String> listItems) {\r\n        JList list = new JList(listItems);\r\n        setComponentProperties(list);\r\n        return list;\r\n    }\r\n\r\n    public JEditorPane createEditorPane() {\r\n        JEditorPane editorPane = new JEditorPane();\r\n        setComponentProperties(editorPane);\r\n        editorPane.setEditable(false);\r\n        editorPane.setContentType(\"text/html\");\r\n        return editorPane;\r\n    }\r\n\r\n    public JTable createTable(TableModel tableModel) {\r\n        JTable table = new JTable(tableModel);\r\n        setComponentProperties(table);\r\n        JTableHeader header = table.getTableHeader();\r\n        setComponentProperties(header);\r\n        return table;\r\n    }\r\n\r\n    public JSeparator createSeparator() {\r\n        JSeparator separator = new JSeparator();\r\n        setComponentProperties(separator);\r\n        return separator;\r\n    }\r\n\r\n    public JPopupMenu createPopupMenu() {\r\n        JPopupMenu popupMenu = new JPopupMenu();\r\n        setComponentProperties(popupMenu);\r\n        return popupMenu;\r\n    }\r\n\r\n    public void updateFontSettings() {\r\n        UIDefaults definitions = UIManager.getLookAndFeelDefaults();\r\n        Iterator iterator = definitions.keySet().iterator();\r\n        while (iterator.hasNext() == true) {\r\n            String key = (String) iterator.next();\r\n            String upperCaseKey = key.toUpperCase();\r\n            Font font = definitions.getFont(key);\r\n            if (font != null) {\r\n                UIManager.put(key, currentFont);\r\n            }\r\n            //end if ()\r\n        }\r\n        //end while ()\r\n    }\r\n\r\n    public Color getDefaultApplicationThemeColour() {\r\n        Color color = new Color(200, 200, 200);\r\n        return color;\r\n    }\r\n\r\n    public void setSmallFont(JComponent component) {\r\n        component.setFont(smallFont);\r\n    }\r\n\r\n    public JDialog createDialog() {\r\n        JDialog dialog = new JDialog();\r\n        return dialog;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/UserInterfaceFactoryTest28.java",
		"test_prompt": "// UserInterfaceFactoryTest28.java\npackage macaw.system;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.*;\nimport javax.swing.table.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UserInterfaceFactory}.\n* It contains ten unit test cases for the {@link UserInterfaceFactory#createDialog()} method.\n*/\nclass UserInterfaceFactoryTest28 {"
	},
	{
		"original_code": "// MacawMessages.java\npackage macaw.system;\r\n\r\nimport java.text.MessageFormat;\r\nimport java.util.ResourceBundle;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class MacawMessages {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private static ResourceBundle resourceBundle = ResourceBundle.getBundle(\"MacawProperties\");\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private MacawMessages() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public static String getMessage(String key) {\r\n        if (resourceBundle != null) {\r\n            return (resourceBundle.getString(key));\r\n        }\r\n        return key;\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0) {\r\n        String[] parameters = new String[1];\r\n        parameters[0] = parameter0;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1) {\r\n        String[] parameters = new String[2];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1, String parameter2) {\r\n        String[] parameters = new String[3];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        parameters[2] = parameter2;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1, String parameter2, String parameter3) {\r\n        String[] parameters = new String[4];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        parameters[2] = parameter2;\r\n        parameters[3] = parameter3;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    private static String fillInTheBlanks(String key, String[] parameters) {\r\n        String messageWithBlanks = resourceBundle.getString(key);\r\n        MessageFormat messageFormat = new MessageFormat(messageWithBlanks);\r\n        String messageWithoutBlanks = messageFormat.format(parameters);\r\n        return messageWithoutBlanks;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/MacawMessagesTest0.java",
		"test_prompt": "// MacawMessagesTest0.java\npackage macaw.system;\n\nimport java.text.MessageFormat;\nimport java.util.ResourceBundle;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MacawMessages}.\n* It contains ten unit test cases for the {@link MacawMessages#getMessage(String)} method.\n*/\nclass MacawMessagesTest0 {"
	},
	{
		"original_code": "// MacawMessages.java\npackage macaw.system;\r\n\r\nimport java.text.MessageFormat;\r\nimport java.util.ResourceBundle;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class MacawMessages {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private static ResourceBundle resourceBundle = ResourceBundle.getBundle(\"MacawProperties\");\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private MacawMessages() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public static String getMessage(String key) {\r\n        if (resourceBundle != null) {\r\n            return (resourceBundle.getString(key));\r\n        }\r\n        return key;\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0) {\r\n        String[] parameters = new String[1];\r\n        parameters[0] = parameter0;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1) {\r\n        String[] parameters = new String[2];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1, String parameter2) {\r\n        String[] parameters = new String[3];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        parameters[2] = parameter2;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1, String parameter2, String parameter3) {\r\n        String[] parameters = new String[4];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        parameters[2] = parameter2;\r\n        parameters[3] = parameter3;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    private static String fillInTheBlanks(String key, String[] parameters) {\r\n        String messageWithBlanks = resourceBundle.getString(key);\r\n        MessageFormat messageFormat = new MessageFormat(messageWithBlanks);\r\n        String messageWithoutBlanks = messageFormat.format(parameters);\r\n        return messageWithoutBlanks;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/MacawMessagesTest1.java",
		"test_prompt": "// MacawMessagesTest1.java\npackage macaw.system;\n\nimport java.text.MessageFormat;\nimport java.util.ResourceBundle;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MacawMessages}.\n* It contains ten unit test cases for the {@link MacawMessages#getMessage(String, String)} method.\n*/\nclass MacawMessagesTest1 {"
	},
	{
		"original_code": "// MacawMessages.java\npackage macaw.system;\r\n\r\nimport java.text.MessageFormat;\r\nimport java.util.ResourceBundle;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class MacawMessages {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private static ResourceBundle resourceBundle = ResourceBundle.getBundle(\"MacawProperties\");\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private MacawMessages() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public static String getMessage(String key) {\r\n        if (resourceBundle != null) {\r\n            return (resourceBundle.getString(key));\r\n        }\r\n        return key;\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0) {\r\n        String[] parameters = new String[1];\r\n        parameters[0] = parameter0;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1) {\r\n        String[] parameters = new String[2];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1, String parameter2) {\r\n        String[] parameters = new String[3];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        parameters[2] = parameter2;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1, String parameter2, String parameter3) {\r\n        String[] parameters = new String[4];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        parameters[2] = parameter2;\r\n        parameters[3] = parameter3;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    private static String fillInTheBlanks(String key, String[] parameters) {\r\n        String messageWithBlanks = resourceBundle.getString(key);\r\n        MessageFormat messageFormat = new MessageFormat(messageWithBlanks);\r\n        String messageWithoutBlanks = messageFormat.format(parameters);\r\n        return messageWithoutBlanks;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/MacawMessagesTest2.java",
		"test_prompt": "// MacawMessagesTest2.java\npackage macaw.system;\n\nimport java.text.MessageFormat;\nimport java.util.ResourceBundle;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MacawMessages}.\n* It contains ten unit test cases for the {@link MacawMessages#getMessage(String, String, String)} method.\n*/\nclass MacawMessagesTest2 {"
	},
	{
		"original_code": "// MacawMessages.java\npackage macaw.system;\r\n\r\nimport java.text.MessageFormat;\r\nimport java.util.ResourceBundle;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class MacawMessages {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private static ResourceBundle resourceBundle = ResourceBundle.getBundle(\"MacawProperties\");\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private MacawMessages() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public static String getMessage(String key) {\r\n        if (resourceBundle != null) {\r\n            return (resourceBundle.getString(key));\r\n        }\r\n        return key;\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0) {\r\n        String[] parameters = new String[1];\r\n        parameters[0] = parameter0;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1) {\r\n        String[] parameters = new String[2];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1, String parameter2) {\r\n        String[] parameters = new String[3];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        parameters[2] = parameter2;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1, String parameter2, String parameter3) {\r\n        String[] parameters = new String[4];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        parameters[2] = parameter2;\r\n        parameters[3] = parameter3;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    private static String fillInTheBlanks(String key, String[] parameters) {\r\n        String messageWithBlanks = resourceBundle.getString(key);\r\n        MessageFormat messageFormat = new MessageFormat(messageWithBlanks);\r\n        String messageWithoutBlanks = messageFormat.format(parameters);\r\n        return messageWithoutBlanks;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/MacawMessagesTest3.java",
		"test_prompt": "// MacawMessagesTest3.java\npackage macaw.system;\n\nimport java.text.MessageFormat;\nimport java.util.ResourceBundle;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MacawMessages}.\n* It contains ten unit test cases for the {@link MacawMessages#getMessage(String, String, String, String)} method.\n*/\nclass MacawMessagesTest3 {"
	},
	{
		"original_code": "// MacawMessages.java\npackage macaw.system;\r\n\r\nimport java.text.MessageFormat;\r\nimport java.util.ResourceBundle;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class MacawMessages {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private static ResourceBundle resourceBundle = ResourceBundle.getBundle(\"MacawProperties\");\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    private MacawMessages() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public static String getMessage(String key) {\r\n        if (resourceBundle != null) {\r\n            return (resourceBundle.getString(key));\r\n        }\r\n        return key;\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0) {\r\n        String[] parameters = new String[1];\r\n        parameters[0] = parameter0;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1) {\r\n        String[] parameters = new String[2];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1, String parameter2) {\r\n        String[] parameters = new String[3];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        parameters[2] = parameter2;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    public static String getMessage(String key, String parameter0, String parameter1, String parameter2, String parameter3) {\r\n        String[] parameters = new String[4];\r\n        parameters[0] = parameter0;\r\n        parameters[1] = parameter1;\r\n        parameters[2] = parameter2;\r\n        parameters[3] = parameter3;\r\n        return fillInTheBlanks(key, parameters);\r\n    }\r\n\r\n    private static String fillInTheBlanks(String key, String[] parameters) {\r\n        String messageWithBlanks = resourceBundle.getString(key);\r\n        MessageFormat messageFormat = new MessageFormat(messageWithBlanks);\r\n        String messageWithoutBlanks = messageFormat.format(parameters);\r\n        return messageWithoutBlanks;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/MacawMessagesTest4.java",
		"test_prompt": "// MacawMessagesTest4.java\npackage macaw.system;\n\nimport java.text.MessageFormat;\nimport java.util.ResourceBundle;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MacawMessages}.\n* It contains ten unit test cases for the {@link MacawMessages#getMessage(String, String, String, String, String)} method.\n*/\nclass MacawMessagesTest4 {"
	},
	{
		"original_code": "// InMemoryVariableFilter.java\npackage macaw.persistenceLayer.demo;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport macaw.util.SearchUtility;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * Contains code to support searching for variables in the Macaw forms found\r\n * in the package <code>macaw.view</code>\r\n *\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class InMemoryVariableFilter {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private ArrayList<Variable> variables;\r\n\r\n    private String allText;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public InMemoryVariableFilter() {\r\n        variables = new ArrayList<Variable>();\r\n        allText = MacawMessages.getMessage(\"general.fieldValue.allChoices\");\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void setVariables(ArrayList<Variable> variables) {\r\n        this.variables = variables;\r\n    }\r\n\r\n    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchPhrase, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {\r\n        ArrayList<Variable> variableTypeFilterResults = filterByVariableType(variableTypeFilter, variables);\r\n        ArrayList<Variable> categoryFilterResults = filterByCategory(category, variableTypeFilterResults);\r\n        ArrayList<Variable> yearFilterResults = filterByYear(year, categoryFilterResults);\r\n        ArrayList<Variable> searchPhraseFilterResults = filterBySearchPhrase(searchPhrase, yearFilterResults);\r\n        ArrayList<VariableSummary> finalResults = new ArrayList<VariableSummary>();\r\n        for (Variable currentVariable : searchPhraseFilterResults) {\r\n            finalResults.add(currentVariable.createVariableSummary());\r\n        }\r\n        return finalResults;\r\n    }\r\n\r\n    private ArrayList<Variable> filterByVariableType(VariableTypeFilter variableTypeFilter, ArrayList<Variable> results) {\r\n        ArrayList<Variable> refinedResults = new ArrayList<Variable>();\r\n        if (variableTypeFilter == VariableTypeFilter.RAW_AND_DERIVED) {\r\n            //return everything so just return the original result list\r\n            return results;\r\n        } else if (variableTypeFilter == VariableTypeFilter.RAW) {\r\n            for (Variable currentResult : results) {\r\n                if (currentResult instanceof RawVariable) {\r\n                    refinedResults.add(currentResult);\r\n                }\r\n            }\r\n        } else {\r\n            for (Variable currentResult : results) {\r\n                if (currentResult instanceof DerivedVariable) {\r\n                    refinedResults.add(currentResult);\r\n                }\r\n            }\r\n        }\r\n        return refinedResults;\r\n    }\r\n\r\n    private ArrayList<Variable> filterByCategory(String categoryFilter, ArrayList<Variable> results) {\r\n        if (categoryFilter.equals(allText) == true) {\r\n            return results;\r\n        }\r\n        SearchUtility searchUtility = new SearchUtility();\r\n        searchUtility.setDefaultSearchPattern(categoryFilter);\r\n        ArrayList<Variable> refinedResults = new ArrayList<Variable>();\r\n        for (Variable currentResult : results) {\r\n            String currentCategory = currentResult.getCategory();\r\n            if (searchUtility.valueContainsPattern(currentCategory) == true) {\r\n                refinedResults.add(currentResult);\r\n            }\r\n        }\r\n        return refinedResults;\r\n    }\r\n\r\n    private ArrayList<Variable> filterByYear(String yearFilter, ArrayList<Variable> results) {\r\n        if (yearFilter.equals(allText) == true) {\r\n            return results;\r\n        }\r\n        SearchUtility searchUtility = new SearchUtility();\r\n        searchUtility.setDefaultSearchPattern(yearFilter);\r\n        ArrayList<Variable> refinedResults = new ArrayList<Variable>();\r\n        for (Variable currentResult : results) {\r\n            String currentYear = currentResult.getYear();\r\n            if (searchUtility.valueContainsPattern(currentYear) == true) {\r\n                refinedResults.add(currentResult);\r\n            }\r\n        }\r\n        return refinedResults;\r\n    }\r\n\r\n    private ArrayList<Variable> filterBySearchPhrase(String searchPhraseFilter, ArrayList<Variable> results) {\r\n        //if no search string specified, assume they don't want to filter by\r\n        //that.\r\n        if (ValidationUtility.isEmptyValue(searchPhraseFilter) == true) {\r\n            return results;\r\n        }\r\n        SearchUtility searchUtility = new SearchUtility();\r\n        searchUtility.setDefaultSearchPattern(searchPhraseFilter);\r\n        ArrayList<Variable> refinedResults = new ArrayList<Variable>();\r\n        for (Variable currentResult : results) {\r\n            String currentName = currentResult.getName();\r\n            String currentLabel = currentResult.getLabel();\r\n            if ((searchUtility.valueContainsPattern(currentName) == true) || (searchUtility.valueContainsPattern(currentLabel) == true)) {\r\n                refinedResults.add(currentResult);\r\n            }\r\n        }\r\n        return refinedResults;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/InMemoryVariableFilterTest.java",
		"test_prompt": "// InMemoryVariableFilterTest.java\npackage macaw.persistenceLayer.demo;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport macaw.util.SearchUtility;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InMemoryVariableFilter}.\n* It contains ten unit test cases for the {@link InMemoryVariableFilter#filterVariableSummaries(User, String, String, String, VariableTypeFilter)} method.\n*/\nclass InMemoryVariableFilterTest {"
	},
	{
		"original_code": "// DemonstrationCurationService.java\npackage macaw.persistenceLayer.demo;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.persistenceLayer.DummyDataProvider;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * Implements the {@link macaw.businessLayer.MacawCurationAPI} interface as a service which manages\r\n * all of its data in-memory instead of in a database.  This class allows Macaw to run in\r\n * a demonstration mode off a pen drive without requiring the client machine to have MySQL\r\n * installed.  DemonstrationCurationService is useful in testing as well.  All of the classes\r\n * in the <code> macaw.test</code> sub-packages can be applied to either in-memory or SQL\r\n * versions of Macaw services.  The difference in implementations make it easy to rapidly\r\n * isolate the causes of failed test cases.  In general, the in-memory implementation is\r\n * treated as the gold test standard.\r\n *\r\n * <p>\r\n * DemonstrationCurationService delegates implementations of the API methods to manager\r\n * classes for major concepts.  All of these manager classes have names that are prefixed\r\n * with \"InMemory\", eg: {@link macaw.persistenceLayer.demo.InMemoryVariableManager}.\r\n *\r\n * <p>\r\n * The manager classes support persistence using the following policy\r\n * <ul>\r\n * <li>when an item is added to a collection, treat it as the stored copy </li>\r\n * <li>when calling classes request the item, return a cloned version that serves\r\n * as a working copy.</li>\r\n * </ul>\r\n * <p>\r\n * A more detailed description of how this works is given\r\n * in {@link macaw.persistenceLayer.demo.InMemorySupportingDocumentsManager}.\r\n *\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class DemonstrationCurationService implements MacawCurationAPI {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    protected InMemoryListChoiceManager listChoiceManager;\r\n\r\n    protected InMemorySupportingDocumentsManager supportingDocumentsManager;\r\n\r\n    protected InMemoryChangeEventManager changeEventManager;\r\n\r\n    protected InMemoryVariableManager variableManager;\r\n\r\n    protected InMemoryValueLabelManager valueLabelManager;\r\n\r\n    protected InMemoryOntologyTermManager ontologyTermManager;\r\n\r\n    protected InMemoryUserManager userManager;\r\n\r\n    protected InMemoryVariableFilter variableFilter;\r\n\r\n    protected InMemorySupportingDocumentFilter supportingDocumentFilter;\r\n\r\n    protected InMemoryOntologyTermFilter ontologyTermFilter;\r\n\r\n    protected MacawSecurityAPI securityValidationService;\r\n\r\n    protected User admin;\r\n\r\n    protected Log log;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public DemonstrationCurationService() {\r\n        init(false);\r\n    }\r\n\r\n    public DemonstrationCurationService(boolean automatedTestingMode) {\r\n        init(automatedTestingMode);\r\n    }\r\n\r\n    private void init(boolean automatedTestingMode) {\r\n        admin = new User(\"admin\", \"admin\");\r\n        log = new Log();\r\n        changeEventManager = new InMemoryChangeEventManager();\r\n        userManager = new InMemoryUserManager(changeEventManager, log, admin);\r\n        securityValidationService = userManager;\r\n        ontologyTermManager = new InMemoryOntologyTermManager(changeEventManager);\r\n        supportingDocumentsManager = new InMemorySupportingDocumentsManager(changeEventManager);\r\n        listChoiceManager = new InMemoryListChoiceManager(changeEventManager);\r\n        variableManager = new InMemoryVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, supportingDocumentsManager);\r\n        valueLabelManager = new InMemoryValueLabelManager(changeEventManager);\r\n        variableFilter = new InMemoryVariableFilter();\r\n        supportingDocumentFilter = new InMemorySupportingDocumentFilter();\r\n        ontologyTermFilter = new InMemoryOntologyTermFilter();\r\n        try {\r\n            User jsmith = new User(\"jsmith\", \"cool\");\r\n            if (automatedTestingMode == false) {\r\n                DummyDataProvider dummyDataProvider = new DummyDataProvider(this, admin);\r\n                dummyDataProvider.populateDatabase(jsmith);\r\n            }\r\n        } catch (MacawException exception) {\r\n            exception.printErrors();\r\n            Log log = new Log();\r\n            log.logException(exception);\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: MacawDatabase\r\n    public void addRawVariable(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.addRawVariable(user, rawVariable);\r\n    }\r\n\r\n    public void deleteRawVariables(User user, ArrayList<RawVariable> rawVariables) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.deleteRawVariables(user, rawVariables);\r\n    }\r\n\r\n    public void updateRawVariable(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.updateRawVariable(user, rawVariable);\r\n    }\r\n\r\n    public void addDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.addDerivedVariable(user, derivedVariable);\r\n    }\r\n\r\n    public void deleteDerivedVariables(User user, ArrayList<DerivedVariable> derivedVariables) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.deleteDerivedVariables(user, derivedVariables);\r\n    }\r\n\r\n    public void updateDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.updateDerivedVariable(user, derivedVariable);\r\n    }\r\n\r\n    public int getRawVariableIdentifier(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getRawVariableIdentifier(user, rawVariable);\r\n    }\r\n\r\n    public int getDerivedVariableIdentifier(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getDerivedVariableIdentifier(user, derivedVariable);\r\n    }\r\n\r\n    public Variable getVariable(User user, String variableName) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getVariable(user, variableName);\r\n    }\r\n\r\n    public ArrayList<Variable> getSourceVariables(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getSourceVariables(user, derivedVariable);\r\n    }\r\n\r\n    public void associateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.associateSourceVariables(user, derivedVariable, sourceVariablesToAdd);\r\n    }\r\n\r\n    public void disassociateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.disassociateSourceVariables(user, derivedVariable, sourceVariablesToDelete);\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Variable originalVariable = variableManager.getOriginalVariable(variable);\r\n        return valueLabelManager.getValueLabels(user, originalVariable);\r\n    }\r\n\r\n    public void addValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Variable originalVariable = variableManager.getOriginalVariable(variable);\r\n        valueLabelManager.addValueLabels(user, originalVariable, valueLabels);\r\n    }\r\n\r\n    public void updateValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Variable originalVariable = variableManager.getOriginalVariable(variable);\r\n        valueLabelManager.updateValueLabels(user, originalVariable, valueLabels);\r\n    }\r\n\r\n    public void deleteValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        checkVariableExists(variable);\r\n        Variable originalVariable = variableManager.getOriginalVariable(variable);\r\n        valueLabelManager.deleteValueLabels(user, originalVariable, valueLabels);\r\n    }\r\n\r\n    public int getValueLabelIdentifier(User user, Variable variable, ValueLabel valueLabel) {\r\n        return valueLabelManager.getValueLabelIdentifier(variable, valueLabel);\r\n    }\r\n\r\n    public String[] getStudyYears(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getStudyYears(user);\r\n    }\r\n\r\n    public ArrayList<VariableSummary> getSummaryDataForAllVariables(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getSummaryDataForAllVariables(user);\r\n    }\r\n\r\n    public Variable getCompleteVariableData(User user, VariableSummary variableSummary) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getCompleteVariableData(user, variableSummary);\r\n    }\r\n\r\n    public Variable getOriginalVariable(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getOriginalVariable(variable);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getAllSupportingDocuments(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<SupportingDocument> allSupportingDocuments = supportingDocumentsManager.getAllSupportingDocuments(user);\r\n        return allSupportingDocuments;\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        checkVariableExists(variable);\r\n        ArrayList<SupportingDocument> results = variableManager.getSupportingDocuments(user, variable);\r\n        return results;\r\n    }\r\n\r\n    public void addSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        supportingDocumentsManager.addSupportingDocument(user, supportingDocument);\r\n    }\r\n\r\n    public void updateSupportingDocument(User user, SupportingDocument revisedSupportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        supportingDocumentsManager.updateSupportingDocument(user, revisedSupportingDocument);\r\n    }\r\n\r\n    public void deleteSupportingDocuments(User user, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        supportingDocumentsManager.deleteSupportingDocuments(user, supportingDocuments);\r\n    }\r\n\r\n    public int getSupportingDocumentIdentifier(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        return supportingDocumentsManager.getSupportingDocumentIdentifier(supportingDocument);\r\n    }\r\n\r\n    public void associateSupportingDocumentsWithVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.associateSupportingDocuments(user, variable, supportingDocuments);\r\n    }\r\n\r\n    public void disassociateSupportingDocumentsFromVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.disassociateSupportingDocuments(user, variable, supportingDocuments);\r\n    }\r\n\r\n    public ArrayList<Category> getCategories(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getCategories(user);\r\n    }\r\n\r\n    /**\r\n     * methods for managing categories\r\n     */\r\n    public void addCategory(User user, Category dataLibrary) throws MacawException {\r\n        checkValidUser(user);\r\n        listChoiceManager.addCategory(user, dataLibrary);\r\n    }\r\n\r\n    public void updateCategory(User user, Category dataLibrary) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.updateCategory(user, dataLibrary, variables);\r\n    }\r\n\r\n    public void deleteCategories(User user, ArrayList<Category> categories) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.deleteCategories(user, categories, variables);\r\n    }\r\n\r\n    public int getCategoryIdentifier(User user, Variable variable, Category category) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getCategoryIdentifier(category, variable);\r\n    }\r\n\r\n    /**\r\n     * Methods for managing cleaning states\r\n     */\r\n    public ArrayList<CleaningState> getCleaningStates(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getCleaningStates(user);\r\n    }\r\n\r\n    public void addCleaningState(User user, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        listChoiceManager.addCleaningState(user, cleaningState);\r\n    }\r\n\r\n    public void updateCleaningState(User user, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.updateCleaningState(user, cleaningState, variables);\r\n    }\r\n\r\n    public void deleteCleaningStates(User user, ArrayList<CleaningState> cleaningStates) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.deleteCleaningStates(user, cleaningStates, variables);\r\n    }\r\n\r\n    public int getCleaningStateIdentifier(User user, Variable variable, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getCleaningStateIdentifier(cleaningState, variable);\r\n    }\r\n\r\n    /**\r\n     * Methods for managing availability states\r\n     */\r\n    public ArrayList<AvailabilityState> getAvailabilityStates(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getAvailabilityStates(user);\r\n    }\r\n\r\n    public void addAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        listChoiceManager.addAvailabilityState(user, availabilityState);\r\n    }\r\n\r\n    public void updateAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.updateAvailabilityState(user, availabilityState, variables);\r\n    }\r\n\r\n    public void deleteAvailabilityStates(User user, ArrayList<AvailabilityState> availabilityStatesToDelete) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.deleteAvailabilityStates(user, availabilityStatesToDelete, variables);\r\n    }\r\n\r\n    public int getAvailabilityStateIdentifier(User user, Variable variable, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getAvailabilityStateIdentifier(availabilityState, variable);\r\n    }\r\n\r\n    /**\r\n     * Methods for data libraries\r\n     */\r\n    public ArrayList<AliasFilePath> getAliasFilePaths(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getAliasFilePaths(user);\r\n    }\r\n\r\n    public void addAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        listChoiceManager.addAliasFilePath(user, aliasFilePath);\r\n    }\r\n\r\n    public void updateAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.updateAliasFilePath(user, aliasFilePath, variables);\r\n    }\r\n\r\n    public void deleteAliasFilePaths(User user, ArrayList<AliasFilePath> aliasFilePaths) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.deleteAliasFilePaths(user, aliasFilePaths, variables);\r\n    }\r\n\r\n    public int getAliasFilePathIdentifier(User user, Variable variable, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getAliasFilePathIdentifier(aliasFilePath, variable);\r\n    }\r\n\r\n    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchText, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {\r\n        checkValidUser(user);\r\n        InMemoryVariableFilter inMemoryVariableFilter = new InMemoryVariableFilter();\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        inMemoryVariableFilter.setVariables(variables);\r\n        ArrayList<VariableSummary> results = inMemoryVariableFilter.filterVariableSummaries(user, searchText, year, category, variableTypeFilter);\r\n        return results;\r\n    }\r\n\r\n    public String getFilePathFromAlias(User user, String currentAlias) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getFilePathFromAlias(currentAlias);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitleFilter, String documentCodeFilter) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<SupportingDocument> allSupportingDocuments = supportingDocumentsManager.getAllSupportingDocuments(user);\r\n        supportingDocumentFilter.setSupportingDocuments(allSupportingDocuments);\r\n        return supportingDocumentFilter.filterSupportingDocuments(user, documentTitleFilter, documentCodeFilter);\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String termFilter, String descriptionFilter) throws MacawException {\r\n        ArrayList<OntologyTerm> results = new ArrayList<OntologyTerm>();\r\n        checkValidUser(user);\r\n        ArrayList<OntologyTerm> allOntologyTerms = ontologyTermManager.getAllOntologyTerms(user);\r\n        ontologyTermFilter.setOntologyTerms(allOntologyTerms);\r\n        return ontologyTermFilter.filterOntologyTerms(user, termFilter, descriptionFilter);\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getAllOntologyTerms(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return ontologyTermManager.getAllOntologyTerms(user);\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getAssociatedOntologyTerms(user, variable);\r\n    }\r\n\r\n    public void addOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        ontologyTermManager.addOntologyTerm(user, ontologyTerm);\r\n    }\r\n\r\n    public void updateOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        ontologyTermManager.updateOntologyTerm(user, ontologyTerm);\r\n        variableManager.updateOntologyTermReferences(ontologyTerm);\r\n    }\r\n\r\n    public void deleteOntologyTerms(User user, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        ontologyTermManager.deleteOntologyTerms(user, ontologyTerms);\r\n        variableManager.deleteOntologyTermReferences(ontologyTerms);\r\n    }\r\n\r\n    public int getOntologyTermIdentifier(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        return ontologyTermManager.getOntologyTermIdentifier(ontologyTerm);\r\n    }\r\n\r\n    public void associateOntologyTermsWithVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.associateOntologyTerms(user, variable, ontologyTerms);\r\n    }\r\n\r\n    public void disassociateOntologyTermsFromVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.disassociateOntologyTerms(user, variable, ontologyTerms);\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryForVariable(user, variable);\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryForSupportingDocument(user, supportingDocument);\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryForValueLabels(user, variable);\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryForListChoices();\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryByUser(user);\r\n    }\r\n\r\n    public void addChangeEvents(MacawChangeEvent changeEvent) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        changeEventManager.registerChangeEvents(changeEvents);\r\n    }\r\n\r\n    //admin features for management of users.\r\n    public ArrayList<User> getUsers(User admin) throws MacawException {\r\n        return userManager.getUsers(admin);\r\n    }\r\n\r\n    public void addUser(User admin, User user) throws MacawException {\r\n        userManager.addUser(admin, user);\r\n    }\r\n\r\n    public void updateUser(User admin, User user) throws MacawException {\r\n        userManager.updateUser(admin, user);\r\n    }\r\n\r\n    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        userManager.deleteUsers(admin, usersToDelete);\r\n    }\r\n\r\n    public int getUserIdentifier(User admin, User user) throws MacawException {\r\n        return userManager.getUserIdentifier(user);\r\n    }\r\n\r\n    public void checkValidUser(User user) throws MacawException {\r\n        securityValidationService.validateUser(user);\r\n    }\r\n\r\n    private void checkVariableExists(Variable variable) throws MacawException {\r\n        variableManager.checkVariableExists(variable);\r\n    }\r\n\r\n    public void checkValidAdministrator(User administrator) throws MacawException {\r\n        securityValidationService.validateAdministrator(administrator);\r\n    }\r\n\r\n    public void clear(User admin) throws MacawException {\r\n        userManager.validateAdministrator(admin);\r\n        listChoiceManager.clear();\r\n        supportingDocumentsManager.clear();\r\n        changeEventManager.clear();\r\n        variableManager.clear();\r\n        valueLabelManager.clear();\r\n        ontologyTermManager.clear();\r\n        userManager.clear();\r\n    }\r\n\r\n    public void clearAllChanges(User admin) throws MacawException {\r\n        userManager.validateAdministrator(admin);\r\n        changeEventManager.clear();\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getAllChanges(User admin) throws MacawException {\r\n        userManager.validateAdministrator(admin);\r\n        return changeEventManager.getAllChanges();\r\n    }\r\n\r\n    public Variable getAlternativeVariable(User user, Variable targetVariable) throws MacawException {\r\n        return variableManager.getAlternativeVariable(targetVariable);\r\n    }\r\n\r\n    public void setAlternativeVariable(User user, Variable targetVariable, Variable alternativeVariable) throws MacawException {\r\n        variableManager.setAlternativeVariable(user, targetVariable, alternativeVariable);\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/DemonstrationCurationServiceTest0.java",
		"test_prompt": "// DemonstrationCurationServiceTest0.java\npackage macaw.persistenceLayer.demo;\n\nimport macaw.businessLayer.*;\nimport macaw.persistenceLayer.DummyDataProvider;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DemonstrationCurationService}.\n* It contains ten unit test cases for the {@link DemonstrationCurationService#filterVariableSummaries(User, String, String, String, VariableTypeFilter)} method.\n*/\nclass DemonstrationCurationServiceTest0 {"
	},
	{
		"original_code": "// DemonstrationCurationService.java\npackage macaw.persistenceLayer.demo;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.persistenceLayer.DummyDataProvider;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * Implements the {@link macaw.businessLayer.MacawCurationAPI} interface as a service which manages\r\n * all of its data in-memory instead of in a database.  This class allows Macaw to run in\r\n * a demonstration mode off a pen drive without requiring the client machine to have MySQL\r\n * installed.  DemonstrationCurationService is useful in testing as well.  All of the classes\r\n * in the <code> macaw.test</code> sub-packages can be applied to either in-memory or SQL\r\n * versions of Macaw services.  The difference in implementations make it easy to rapidly\r\n * isolate the causes of failed test cases.  In general, the in-memory implementation is\r\n * treated as the gold test standard.\r\n *\r\n * <p>\r\n * DemonstrationCurationService delegates implementations of the API methods to manager\r\n * classes for major concepts.  All of these manager classes have names that are prefixed\r\n * with \"InMemory\", eg: {@link macaw.persistenceLayer.demo.InMemoryVariableManager}.\r\n *\r\n * <p>\r\n * The manager classes support persistence using the following policy\r\n * <ul>\r\n * <li>when an item is added to a collection, treat it as the stored copy </li>\r\n * <li>when calling classes request the item, return a cloned version that serves\r\n * as a working copy.</li>\r\n * </ul>\r\n * <p>\r\n * A more detailed description of how this works is given\r\n * in {@link macaw.persistenceLayer.demo.InMemorySupportingDocumentsManager}.\r\n *\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class DemonstrationCurationService implements MacawCurationAPI {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    protected InMemoryListChoiceManager listChoiceManager;\r\n\r\n    protected InMemorySupportingDocumentsManager supportingDocumentsManager;\r\n\r\n    protected InMemoryChangeEventManager changeEventManager;\r\n\r\n    protected InMemoryVariableManager variableManager;\r\n\r\n    protected InMemoryValueLabelManager valueLabelManager;\r\n\r\n    protected InMemoryOntologyTermManager ontologyTermManager;\r\n\r\n    protected InMemoryUserManager userManager;\r\n\r\n    protected InMemoryVariableFilter variableFilter;\r\n\r\n    protected InMemorySupportingDocumentFilter supportingDocumentFilter;\r\n\r\n    protected InMemoryOntologyTermFilter ontologyTermFilter;\r\n\r\n    protected MacawSecurityAPI securityValidationService;\r\n\r\n    protected User admin;\r\n\r\n    protected Log log;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public DemonstrationCurationService() {\r\n        init(false);\r\n    }\r\n\r\n    public DemonstrationCurationService(boolean automatedTestingMode) {\r\n        init(automatedTestingMode);\r\n    }\r\n\r\n    private void init(boolean automatedTestingMode) {\r\n        admin = new User(\"admin\", \"admin\");\r\n        log = new Log();\r\n        changeEventManager = new InMemoryChangeEventManager();\r\n        userManager = new InMemoryUserManager(changeEventManager, log, admin);\r\n        securityValidationService = userManager;\r\n        ontologyTermManager = new InMemoryOntologyTermManager(changeEventManager);\r\n        supportingDocumentsManager = new InMemorySupportingDocumentsManager(changeEventManager);\r\n        listChoiceManager = new InMemoryListChoiceManager(changeEventManager);\r\n        variableManager = new InMemoryVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, supportingDocumentsManager);\r\n        valueLabelManager = new InMemoryValueLabelManager(changeEventManager);\r\n        variableFilter = new InMemoryVariableFilter();\r\n        supportingDocumentFilter = new InMemorySupportingDocumentFilter();\r\n        ontologyTermFilter = new InMemoryOntologyTermFilter();\r\n        try {\r\n            User jsmith = new User(\"jsmith\", \"cool\");\r\n            if (automatedTestingMode == false) {\r\n                DummyDataProvider dummyDataProvider = new DummyDataProvider(this, admin);\r\n                dummyDataProvider.populateDatabase(jsmith);\r\n            }\r\n        } catch (MacawException exception) {\r\n            exception.printErrors();\r\n            Log log = new Log();\r\n            log.logException(exception);\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: MacawDatabase\r\n    public void addRawVariable(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.addRawVariable(user, rawVariable);\r\n    }\r\n\r\n    public void deleteRawVariables(User user, ArrayList<RawVariable> rawVariables) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.deleteRawVariables(user, rawVariables);\r\n    }\r\n\r\n    public void updateRawVariable(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.updateRawVariable(user, rawVariable);\r\n    }\r\n\r\n    public void addDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.addDerivedVariable(user, derivedVariable);\r\n    }\r\n\r\n    public void deleteDerivedVariables(User user, ArrayList<DerivedVariable> derivedVariables) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.deleteDerivedVariables(user, derivedVariables);\r\n    }\r\n\r\n    public void updateDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.updateDerivedVariable(user, derivedVariable);\r\n    }\r\n\r\n    public int getRawVariableIdentifier(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getRawVariableIdentifier(user, rawVariable);\r\n    }\r\n\r\n    public int getDerivedVariableIdentifier(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getDerivedVariableIdentifier(user, derivedVariable);\r\n    }\r\n\r\n    public Variable getVariable(User user, String variableName) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getVariable(user, variableName);\r\n    }\r\n\r\n    public ArrayList<Variable> getSourceVariables(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getSourceVariables(user, derivedVariable);\r\n    }\r\n\r\n    public void associateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.associateSourceVariables(user, derivedVariable, sourceVariablesToAdd);\r\n    }\r\n\r\n    public void disassociateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.disassociateSourceVariables(user, derivedVariable, sourceVariablesToDelete);\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Variable originalVariable = variableManager.getOriginalVariable(variable);\r\n        return valueLabelManager.getValueLabels(user, originalVariable);\r\n    }\r\n\r\n    public void addValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Variable originalVariable = variableManager.getOriginalVariable(variable);\r\n        valueLabelManager.addValueLabels(user, originalVariable, valueLabels);\r\n    }\r\n\r\n    public void updateValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Variable originalVariable = variableManager.getOriginalVariable(variable);\r\n        valueLabelManager.updateValueLabels(user, originalVariable, valueLabels);\r\n    }\r\n\r\n    public void deleteValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        checkVariableExists(variable);\r\n        Variable originalVariable = variableManager.getOriginalVariable(variable);\r\n        valueLabelManager.deleteValueLabels(user, originalVariable, valueLabels);\r\n    }\r\n\r\n    public int getValueLabelIdentifier(User user, Variable variable, ValueLabel valueLabel) {\r\n        return valueLabelManager.getValueLabelIdentifier(variable, valueLabel);\r\n    }\r\n\r\n    public String[] getStudyYears(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getStudyYears(user);\r\n    }\r\n\r\n    public ArrayList<VariableSummary> getSummaryDataForAllVariables(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getSummaryDataForAllVariables(user);\r\n    }\r\n\r\n    public Variable getCompleteVariableData(User user, VariableSummary variableSummary) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getCompleteVariableData(user, variableSummary);\r\n    }\r\n\r\n    public Variable getOriginalVariable(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getOriginalVariable(variable);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getAllSupportingDocuments(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<SupportingDocument> allSupportingDocuments = supportingDocumentsManager.getAllSupportingDocuments(user);\r\n        return allSupportingDocuments;\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        checkVariableExists(variable);\r\n        ArrayList<SupportingDocument> results = variableManager.getSupportingDocuments(user, variable);\r\n        return results;\r\n    }\r\n\r\n    public void addSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        supportingDocumentsManager.addSupportingDocument(user, supportingDocument);\r\n    }\r\n\r\n    public void updateSupportingDocument(User user, SupportingDocument revisedSupportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        supportingDocumentsManager.updateSupportingDocument(user, revisedSupportingDocument);\r\n    }\r\n\r\n    public void deleteSupportingDocuments(User user, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        supportingDocumentsManager.deleteSupportingDocuments(user, supportingDocuments);\r\n    }\r\n\r\n    public int getSupportingDocumentIdentifier(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        return supportingDocumentsManager.getSupportingDocumentIdentifier(supportingDocument);\r\n    }\r\n\r\n    public void associateSupportingDocumentsWithVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.associateSupportingDocuments(user, variable, supportingDocuments);\r\n    }\r\n\r\n    public void disassociateSupportingDocumentsFromVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.disassociateSupportingDocuments(user, variable, supportingDocuments);\r\n    }\r\n\r\n    public ArrayList<Category> getCategories(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getCategories(user);\r\n    }\r\n\r\n    /**\r\n     * methods for managing categories\r\n     */\r\n    public void addCategory(User user, Category dataLibrary) throws MacawException {\r\n        checkValidUser(user);\r\n        listChoiceManager.addCategory(user, dataLibrary);\r\n    }\r\n\r\n    public void updateCategory(User user, Category dataLibrary) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.updateCategory(user, dataLibrary, variables);\r\n    }\r\n\r\n    public void deleteCategories(User user, ArrayList<Category> categories) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.deleteCategories(user, categories, variables);\r\n    }\r\n\r\n    public int getCategoryIdentifier(User user, Variable variable, Category category) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getCategoryIdentifier(category, variable);\r\n    }\r\n\r\n    /**\r\n     * Methods for managing cleaning states\r\n     */\r\n    public ArrayList<CleaningState> getCleaningStates(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getCleaningStates(user);\r\n    }\r\n\r\n    public void addCleaningState(User user, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        listChoiceManager.addCleaningState(user, cleaningState);\r\n    }\r\n\r\n    public void updateCleaningState(User user, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.updateCleaningState(user, cleaningState, variables);\r\n    }\r\n\r\n    public void deleteCleaningStates(User user, ArrayList<CleaningState> cleaningStates) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.deleteCleaningStates(user, cleaningStates, variables);\r\n    }\r\n\r\n    public int getCleaningStateIdentifier(User user, Variable variable, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getCleaningStateIdentifier(cleaningState, variable);\r\n    }\r\n\r\n    /**\r\n     * Methods for managing availability states\r\n     */\r\n    public ArrayList<AvailabilityState> getAvailabilityStates(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getAvailabilityStates(user);\r\n    }\r\n\r\n    public void addAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        listChoiceManager.addAvailabilityState(user, availabilityState);\r\n    }\r\n\r\n    public void updateAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.updateAvailabilityState(user, availabilityState, variables);\r\n    }\r\n\r\n    public void deleteAvailabilityStates(User user, ArrayList<AvailabilityState> availabilityStatesToDelete) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.deleteAvailabilityStates(user, availabilityStatesToDelete, variables);\r\n    }\r\n\r\n    public int getAvailabilityStateIdentifier(User user, Variable variable, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getAvailabilityStateIdentifier(availabilityState, variable);\r\n    }\r\n\r\n    /**\r\n     * Methods for data libraries\r\n     */\r\n    public ArrayList<AliasFilePath> getAliasFilePaths(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getAliasFilePaths(user);\r\n    }\r\n\r\n    public void addAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        listChoiceManager.addAliasFilePath(user, aliasFilePath);\r\n    }\r\n\r\n    public void updateAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.updateAliasFilePath(user, aliasFilePath, variables);\r\n    }\r\n\r\n    public void deleteAliasFilePaths(User user, ArrayList<AliasFilePath> aliasFilePaths) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.deleteAliasFilePaths(user, aliasFilePaths, variables);\r\n    }\r\n\r\n    public int getAliasFilePathIdentifier(User user, Variable variable, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getAliasFilePathIdentifier(aliasFilePath, variable);\r\n    }\r\n\r\n    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchText, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {\r\n        checkValidUser(user);\r\n        InMemoryVariableFilter inMemoryVariableFilter = new InMemoryVariableFilter();\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        inMemoryVariableFilter.setVariables(variables);\r\n        ArrayList<VariableSummary> results = inMemoryVariableFilter.filterVariableSummaries(user, searchText, year, category, variableTypeFilter);\r\n        return results;\r\n    }\r\n\r\n    public String getFilePathFromAlias(User user, String currentAlias) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getFilePathFromAlias(currentAlias);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitleFilter, String documentCodeFilter) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<SupportingDocument> allSupportingDocuments = supportingDocumentsManager.getAllSupportingDocuments(user);\r\n        supportingDocumentFilter.setSupportingDocuments(allSupportingDocuments);\r\n        return supportingDocumentFilter.filterSupportingDocuments(user, documentTitleFilter, documentCodeFilter);\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String termFilter, String descriptionFilter) throws MacawException {\r\n        ArrayList<OntologyTerm> results = new ArrayList<OntologyTerm>();\r\n        checkValidUser(user);\r\n        ArrayList<OntologyTerm> allOntologyTerms = ontologyTermManager.getAllOntologyTerms(user);\r\n        ontologyTermFilter.setOntologyTerms(allOntologyTerms);\r\n        return ontologyTermFilter.filterOntologyTerms(user, termFilter, descriptionFilter);\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getAllOntologyTerms(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return ontologyTermManager.getAllOntologyTerms(user);\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getAssociatedOntologyTerms(user, variable);\r\n    }\r\n\r\n    public void addOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        ontologyTermManager.addOntologyTerm(user, ontologyTerm);\r\n    }\r\n\r\n    public void updateOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        ontologyTermManager.updateOntologyTerm(user, ontologyTerm);\r\n        variableManager.updateOntologyTermReferences(ontologyTerm);\r\n    }\r\n\r\n    public void deleteOntologyTerms(User user, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        ontologyTermManager.deleteOntologyTerms(user, ontologyTerms);\r\n        variableManager.deleteOntologyTermReferences(ontologyTerms);\r\n    }\r\n\r\n    public int getOntologyTermIdentifier(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        return ontologyTermManager.getOntologyTermIdentifier(ontologyTerm);\r\n    }\r\n\r\n    public void associateOntologyTermsWithVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.associateOntologyTerms(user, variable, ontologyTerms);\r\n    }\r\n\r\n    public void disassociateOntologyTermsFromVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.disassociateOntologyTerms(user, variable, ontologyTerms);\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryForVariable(user, variable);\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryForSupportingDocument(user, supportingDocument);\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryForValueLabels(user, variable);\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryForListChoices();\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryByUser(user);\r\n    }\r\n\r\n    public void addChangeEvents(MacawChangeEvent changeEvent) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        changeEventManager.registerChangeEvents(changeEvents);\r\n    }\r\n\r\n    //admin features for management of users.\r\n    public ArrayList<User> getUsers(User admin) throws MacawException {\r\n        return userManager.getUsers(admin);\r\n    }\r\n\r\n    public void addUser(User admin, User user) throws MacawException {\r\n        userManager.addUser(admin, user);\r\n    }\r\n\r\n    public void updateUser(User admin, User user) throws MacawException {\r\n        userManager.updateUser(admin, user);\r\n    }\r\n\r\n    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        userManager.deleteUsers(admin, usersToDelete);\r\n    }\r\n\r\n    public int getUserIdentifier(User admin, User user) throws MacawException {\r\n        return userManager.getUserIdentifier(user);\r\n    }\r\n\r\n    public void checkValidUser(User user) throws MacawException {\r\n        securityValidationService.validateUser(user);\r\n    }\r\n\r\n    private void checkVariableExists(Variable variable) throws MacawException {\r\n        variableManager.checkVariableExists(variable);\r\n    }\r\n\r\n    public void checkValidAdministrator(User administrator) throws MacawException {\r\n        securityValidationService.validateAdministrator(administrator);\r\n    }\r\n\r\n    public void clear(User admin) throws MacawException {\r\n        userManager.validateAdministrator(admin);\r\n        listChoiceManager.clear();\r\n        supportingDocumentsManager.clear();\r\n        changeEventManager.clear();\r\n        variableManager.clear();\r\n        valueLabelManager.clear();\r\n        ontologyTermManager.clear();\r\n        userManager.clear();\r\n    }\r\n\r\n    public void clearAllChanges(User admin) throws MacawException {\r\n        userManager.validateAdministrator(admin);\r\n        changeEventManager.clear();\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getAllChanges(User admin) throws MacawException {\r\n        userManager.validateAdministrator(admin);\r\n        return changeEventManager.getAllChanges();\r\n    }\r\n\r\n    public Variable getAlternativeVariable(User user, Variable targetVariable) throws MacawException {\r\n        return variableManager.getAlternativeVariable(targetVariable);\r\n    }\r\n\r\n    public void setAlternativeVariable(User user, Variable targetVariable, Variable alternativeVariable) throws MacawException {\r\n        variableManager.setAlternativeVariable(user, targetVariable, alternativeVariable);\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/DemonstrationCurationServiceTest1.java",
		"test_prompt": "// DemonstrationCurationServiceTest1.java\npackage macaw.persistenceLayer.demo;\n\nimport macaw.businessLayer.*;\nimport macaw.persistenceLayer.DummyDataProvider;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DemonstrationCurationService}.\n* It contains ten unit test cases for the {@link DemonstrationCurationService#filterSupportingDocuments(User, String, String)} method.\n*/\nclass DemonstrationCurationServiceTest1 {"
	},
	{
		"original_code": "// DemonstrationCurationService.java\npackage macaw.persistenceLayer.demo;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.persistenceLayer.DummyDataProvider;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * Implements the {@link macaw.businessLayer.MacawCurationAPI} interface as a service which manages\r\n * all of its data in-memory instead of in a database.  This class allows Macaw to run in\r\n * a demonstration mode off a pen drive without requiring the client machine to have MySQL\r\n * installed.  DemonstrationCurationService is useful in testing as well.  All of the classes\r\n * in the <code> macaw.test</code> sub-packages can be applied to either in-memory or SQL\r\n * versions of Macaw services.  The difference in implementations make it easy to rapidly\r\n * isolate the causes of failed test cases.  In general, the in-memory implementation is\r\n * treated as the gold test standard.\r\n *\r\n * <p>\r\n * DemonstrationCurationService delegates implementations of the API methods to manager\r\n * classes for major concepts.  All of these manager classes have names that are prefixed\r\n * with \"InMemory\", eg: {@link macaw.persistenceLayer.demo.InMemoryVariableManager}.\r\n *\r\n * <p>\r\n * The manager classes support persistence using the following policy\r\n * <ul>\r\n * <li>when an item is added to a collection, treat it as the stored copy </li>\r\n * <li>when calling classes request the item, return a cloned version that serves\r\n * as a working copy.</li>\r\n * </ul>\r\n * <p>\r\n * A more detailed description of how this works is given\r\n * in {@link macaw.persistenceLayer.demo.InMemorySupportingDocumentsManager}.\r\n *\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class DemonstrationCurationService implements MacawCurationAPI {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    protected InMemoryListChoiceManager listChoiceManager;\r\n\r\n    protected InMemorySupportingDocumentsManager supportingDocumentsManager;\r\n\r\n    protected InMemoryChangeEventManager changeEventManager;\r\n\r\n    protected InMemoryVariableManager variableManager;\r\n\r\n    protected InMemoryValueLabelManager valueLabelManager;\r\n\r\n    protected InMemoryOntologyTermManager ontologyTermManager;\r\n\r\n    protected InMemoryUserManager userManager;\r\n\r\n    protected InMemoryVariableFilter variableFilter;\r\n\r\n    protected InMemorySupportingDocumentFilter supportingDocumentFilter;\r\n\r\n    protected InMemoryOntologyTermFilter ontologyTermFilter;\r\n\r\n    protected MacawSecurityAPI securityValidationService;\r\n\r\n    protected User admin;\r\n\r\n    protected Log log;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public DemonstrationCurationService() {\r\n        init(false);\r\n    }\r\n\r\n    public DemonstrationCurationService(boolean automatedTestingMode) {\r\n        init(automatedTestingMode);\r\n    }\r\n\r\n    private void init(boolean automatedTestingMode) {\r\n        admin = new User(\"admin\", \"admin\");\r\n        log = new Log();\r\n        changeEventManager = new InMemoryChangeEventManager();\r\n        userManager = new InMemoryUserManager(changeEventManager, log, admin);\r\n        securityValidationService = userManager;\r\n        ontologyTermManager = new InMemoryOntologyTermManager(changeEventManager);\r\n        supportingDocumentsManager = new InMemorySupportingDocumentsManager(changeEventManager);\r\n        listChoiceManager = new InMemoryListChoiceManager(changeEventManager);\r\n        variableManager = new InMemoryVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, supportingDocumentsManager);\r\n        valueLabelManager = new InMemoryValueLabelManager(changeEventManager);\r\n        variableFilter = new InMemoryVariableFilter();\r\n        supportingDocumentFilter = new InMemorySupportingDocumentFilter();\r\n        ontologyTermFilter = new InMemoryOntologyTermFilter();\r\n        try {\r\n            User jsmith = new User(\"jsmith\", \"cool\");\r\n            if (automatedTestingMode == false) {\r\n                DummyDataProvider dummyDataProvider = new DummyDataProvider(this, admin);\r\n                dummyDataProvider.populateDatabase(jsmith);\r\n            }\r\n        } catch (MacawException exception) {\r\n            exception.printErrors();\r\n            Log log = new Log();\r\n            log.logException(exception);\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: MacawDatabase\r\n    public void addRawVariable(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.addRawVariable(user, rawVariable);\r\n    }\r\n\r\n    public void deleteRawVariables(User user, ArrayList<RawVariable> rawVariables) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.deleteRawVariables(user, rawVariables);\r\n    }\r\n\r\n    public void updateRawVariable(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.updateRawVariable(user, rawVariable);\r\n    }\r\n\r\n    public void addDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.addDerivedVariable(user, derivedVariable);\r\n    }\r\n\r\n    public void deleteDerivedVariables(User user, ArrayList<DerivedVariable> derivedVariables) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.deleteDerivedVariables(user, derivedVariables);\r\n    }\r\n\r\n    public void updateDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.updateDerivedVariable(user, derivedVariable);\r\n    }\r\n\r\n    public int getRawVariableIdentifier(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getRawVariableIdentifier(user, rawVariable);\r\n    }\r\n\r\n    public int getDerivedVariableIdentifier(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getDerivedVariableIdentifier(user, derivedVariable);\r\n    }\r\n\r\n    public Variable getVariable(User user, String variableName) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getVariable(user, variableName);\r\n    }\r\n\r\n    public ArrayList<Variable> getSourceVariables(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getSourceVariables(user, derivedVariable);\r\n    }\r\n\r\n    public void associateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.associateSourceVariables(user, derivedVariable, sourceVariablesToAdd);\r\n    }\r\n\r\n    public void disassociateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.disassociateSourceVariables(user, derivedVariable, sourceVariablesToDelete);\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Variable originalVariable = variableManager.getOriginalVariable(variable);\r\n        return valueLabelManager.getValueLabels(user, originalVariable);\r\n    }\r\n\r\n    public void addValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Variable originalVariable = variableManager.getOriginalVariable(variable);\r\n        valueLabelManager.addValueLabels(user, originalVariable, valueLabels);\r\n    }\r\n\r\n    public void updateValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Variable originalVariable = variableManager.getOriginalVariable(variable);\r\n        valueLabelManager.updateValueLabels(user, originalVariable, valueLabels);\r\n    }\r\n\r\n    public void deleteValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        checkVariableExists(variable);\r\n        Variable originalVariable = variableManager.getOriginalVariable(variable);\r\n        valueLabelManager.deleteValueLabels(user, originalVariable, valueLabels);\r\n    }\r\n\r\n    public int getValueLabelIdentifier(User user, Variable variable, ValueLabel valueLabel) {\r\n        return valueLabelManager.getValueLabelIdentifier(variable, valueLabel);\r\n    }\r\n\r\n    public String[] getStudyYears(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getStudyYears(user);\r\n    }\r\n\r\n    public ArrayList<VariableSummary> getSummaryDataForAllVariables(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getSummaryDataForAllVariables(user);\r\n    }\r\n\r\n    public Variable getCompleteVariableData(User user, VariableSummary variableSummary) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getCompleteVariableData(user, variableSummary);\r\n    }\r\n\r\n    public Variable getOriginalVariable(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getOriginalVariable(variable);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getAllSupportingDocuments(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<SupportingDocument> allSupportingDocuments = supportingDocumentsManager.getAllSupportingDocuments(user);\r\n        return allSupportingDocuments;\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        checkVariableExists(variable);\r\n        ArrayList<SupportingDocument> results = variableManager.getSupportingDocuments(user, variable);\r\n        return results;\r\n    }\r\n\r\n    public void addSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        supportingDocumentsManager.addSupportingDocument(user, supportingDocument);\r\n    }\r\n\r\n    public void updateSupportingDocument(User user, SupportingDocument revisedSupportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        supportingDocumentsManager.updateSupportingDocument(user, revisedSupportingDocument);\r\n    }\r\n\r\n    public void deleteSupportingDocuments(User user, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        supportingDocumentsManager.deleteSupportingDocuments(user, supportingDocuments);\r\n    }\r\n\r\n    public int getSupportingDocumentIdentifier(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        return supportingDocumentsManager.getSupportingDocumentIdentifier(supportingDocument);\r\n    }\r\n\r\n    public void associateSupportingDocumentsWithVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.associateSupportingDocuments(user, variable, supportingDocuments);\r\n    }\r\n\r\n    public void disassociateSupportingDocumentsFromVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.disassociateSupportingDocuments(user, variable, supportingDocuments);\r\n    }\r\n\r\n    public ArrayList<Category> getCategories(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getCategories(user);\r\n    }\r\n\r\n    /**\r\n     * methods for managing categories\r\n     */\r\n    public void addCategory(User user, Category dataLibrary) throws MacawException {\r\n        checkValidUser(user);\r\n        listChoiceManager.addCategory(user, dataLibrary);\r\n    }\r\n\r\n    public void updateCategory(User user, Category dataLibrary) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.updateCategory(user, dataLibrary, variables);\r\n    }\r\n\r\n    public void deleteCategories(User user, ArrayList<Category> categories) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.deleteCategories(user, categories, variables);\r\n    }\r\n\r\n    public int getCategoryIdentifier(User user, Variable variable, Category category) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getCategoryIdentifier(category, variable);\r\n    }\r\n\r\n    /**\r\n     * Methods for managing cleaning states\r\n     */\r\n    public ArrayList<CleaningState> getCleaningStates(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getCleaningStates(user);\r\n    }\r\n\r\n    public void addCleaningState(User user, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        listChoiceManager.addCleaningState(user, cleaningState);\r\n    }\r\n\r\n    public void updateCleaningState(User user, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.updateCleaningState(user, cleaningState, variables);\r\n    }\r\n\r\n    public void deleteCleaningStates(User user, ArrayList<CleaningState> cleaningStates) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.deleteCleaningStates(user, cleaningStates, variables);\r\n    }\r\n\r\n    public int getCleaningStateIdentifier(User user, Variable variable, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getCleaningStateIdentifier(cleaningState, variable);\r\n    }\r\n\r\n    /**\r\n     * Methods for managing availability states\r\n     */\r\n    public ArrayList<AvailabilityState> getAvailabilityStates(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getAvailabilityStates(user);\r\n    }\r\n\r\n    public void addAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        listChoiceManager.addAvailabilityState(user, availabilityState);\r\n    }\r\n\r\n    public void updateAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.updateAvailabilityState(user, availabilityState, variables);\r\n    }\r\n\r\n    public void deleteAvailabilityStates(User user, ArrayList<AvailabilityState> availabilityStatesToDelete) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.deleteAvailabilityStates(user, availabilityStatesToDelete, variables);\r\n    }\r\n\r\n    public int getAvailabilityStateIdentifier(User user, Variable variable, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getAvailabilityStateIdentifier(availabilityState, variable);\r\n    }\r\n\r\n    /**\r\n     * Methods for data libraries\r\n     */\r\n    public ArrayList<AliasFilePath> getAliasFilePaths(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getAliasFilePaths(user);\r\n    }\r\n\r\n    public void addAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        listChoiceManager.addAliasFilePath(user, aliasFilePath);\r\n    }\r\n\r\n    public void updateAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.updateAliasFilePath(user, aliasFilePath, variables);\r\n    }\r\n\r\n    public void deleteAliasFilePaths(User user, ArrayList<AliasFilePath> aliasFilePaths) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        listChoiceManager.deleteAliasFilePaths(user, aliasFilePaths, variables);\r\n    }\r\n\r\n    public int getAliasFilePathIdentifier(User user, Variable variable, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getAliasFilePathIdentifier(aliasFilePath, variable);\r\n    }\r\n\r\n    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchText, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {\r\n        checkValidUser(user);\r\n        InMemoryVariableFilter inMemoryVariableFilter = new InMemoryVariableFilter();\r\n        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);\r\n        inMemoryVariableFilter.setVariables(variables);\r\n        ArrayList<VariableSummary> results = inMemoryVariableFilter.filterVariableSummaries(user, searchText, year, category, variableTypeFilter);\r\n        return results;\r\n    }\r\n\r\n    public String getFilePathFromAlias(User user, String currentAlias) throws MacawException {\r\n        checkValidUser(user);\r\n        return listChoiceManager.getFilePathFromAlias(currentAlias);\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitleFilter, String documentCodeFilter) throws MacawException {\r\n        checkValidUser(user);\r\n        ArrayList<SupportingDocument> allSupportingDocuments = supportingDocumentsManager.getAllSupportingDocuments(user);\r\n        supportingDocumentFilter.setSupportingDocuments(allSupportingDocuments);\r\n        return supportingDocumentFilter.filterSupportingDocuments(user, documentTitleFilter, documentCodeFilter);\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String termFilter, String descriptionFilter) throws MacawException {\r\n        ArrayList<OntologyTerm> results = new ArrayList<OntologyTerm>();\r\n        checkValidUser(user);\r\n        ArrayList<OntologyTerm> allOntologyTerms = ontologyTermManager.getAllOntologyTerms(user);\r\n        ontologyTermFilter.setOntologyTerms(allOntologyTerms);\r\n        return ontologyTermFilter.filterOntologyTerms(user, termFilter, descriptionFilter);\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getAllOntologyTerms(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return ontologyTermManager.getAllOntologyTerms(user);\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        return variableManager.getAssociatedOntologyTerms(user, variable);\r\n    }\r\n\r\n    public void addOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        ontologyTermManager.addOntologyTerm(user, ontologyTerm);\r\n    }\r\n\r\n    public void updateOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        ontologyTermManager.updateOntologyTerm(user, ontologyTerm);\r\n        variableManager.updateOntologyTermReferences(ontologyTerm);\r\n    }\r\n\r\n    public void deleteOntologyTerms(User user, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        ontologyTermManager.deleteOntologyTerms(user, ontologyTerms);\r\n        variableManager.deleteOntologyTermReferences(ontologyTerms);\r\n    }\r\n\r\n    public int getOntologyTermIdentifier(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        return ontologyTermManager.getOntologyTermIdentifier(ontologyTerm);\r\n    }\r\n\r\n    public void associateOntologyTermsWithVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.associateOntologyTerms(user, variable, ontologyTerms);\r\n    }\r\n\r\n    public void disassociateOntologyTermsFromVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        variableManager.disassociateOntologyTerms(user, variable, ontologyTerms);\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryForVariable(user, variable);\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryForSupportingDocument(user, supportingDocument);\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryForValueLabels(user, variable);\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryForListChoices();\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        return changeEventManager.getChangeHistoryByUser(user);\r\n    }\r\n\r\n    public void addChangeEvents(MacawChangeEvent changeEvent) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        changeEventManager.registerChangeEvents(changeEvents);\r\n    }\r\n\r\n    //admin features for management of users.\r\n    public ArrayList<User> getUsers(User admin) throws MacawException {\r\n        return userManager.getUsers(admin);\r\n    }\r\n\r\n    public void addUser(User admin, User user) throws MacawException {\r\n        userManager.addUser(admin, user);\r\n    }\r\n\r\n    public void updateUser(User admin, User user) throws MacawException {\r\n        userManager.updateUser(admin, user);\r\n    }\r\n\r\n    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        userManager.deleteUsers(admin, usersToDelete);\r\n    }\r\n\r\n    public int getUserIdentifier(User admin, User user) throws MacawException {\r\n        return userManager.getUserIdentifier(user);\r\n    }\r\n\r\n    public void checkValidUser(User user) throws MacawException {\r\n        securityValidationService.validateUser(user);\r\n    }\r\n\r\n    private void checkVariableExists(Variable variable) throws MacawException {\r\n        variableManager.checkVariableExists(variable);\r\n    }\r\n\r\n    public void checkValidAdministrator(User administrator) throws MacawException {\r\n        securityValidationService.validateAdministrator(administrator);\r\n    }\r\n\r\n    public void clear(User admin) throws MacawException {\r\n        userManager.validateAdministrator(admin);\r\n        listChoiceManager.clear();\r\n        supportingDocumentsManager.clear();\r\n        changeEventManager.clear();\r\n        variableManager.clear();\r\n        valueLabelManager.clear();\r\n        ontologyTermManager.clear();\r\n        userManager.clear();\r\n    }\r\n\r\n    public void clearAllChanges(User admin) throws MacawException {\r\n        userManager.validateAdministrator(admin);\r\n        changeEventManager.clear();\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getAllChanges(User admin) throws MacawException {\r\n        userManager.validateAdministrator(admin);\r\n        return changeEventManager.getAllChanges();\r\n    }\r\n\r\n    public Variable getAlternativeVariable(User user, Variable targetVariable) throws MacawException {\r\n        return variableManager.getAlternativeVariable(targetVariable);\r\n    }\r\n\r\n    public void setAlternativeVariable(User user, Variable targetVariable, Variable alternativeVariable) throws MacawException {\r\n        variableManager.setAlternativeVariable(user, targetVariable, alternativeVariable);\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/DemonstrationCurationServiceTest2.java",
		"test_prompt": "// DemonstrationCurationServiceTest2.java\npackage macaw.persistenceLayer.demo;\n\nimport macaw.businessLayer.*;\nimport macaw.persistenceLayer.DummyDataProvider;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DemonstrationCurationService}.\n* It contains ten unit test cases for the {@link DemonstrationCurationService#filterOntologyTerms(User, String, String)} method.\n*/\nclass DemonstrationCurationServiceTest2 {"
	},
	{
		"original_code": "// InMemoryOntologyTermFilter.java\npackage macaw.persistenceLayer.demo;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport macaw.util.SearchUtility;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * holds code used to support the search feature that lets end-users\r\n * select an ontology term from an existing list.  When the list\r\n * pops up (see {@link macaw.presentationLayer.OntologyTermsPanel}) and users press the\r\n * \"Select\" button, a new dialog pops up showing all the ontology terms that\r\n * are known in the system.  This filter helps limit the list of all ontology\r\n * terms so that users can rapidly find the one they want to reference for a\r\n * variable record.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class InMemoryOntologyTermFilter {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private ArrayList<OntologyTerm> ontologyTerms;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public InMemoryOntologyTermFilter() {\r\n        ontologyTerms = new ArrayList<OntologyTerm>();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void setOntologyTerms(ArrayList<OntologyTerm> ontologyTerms) {\r\n        this.ontologyTerms = ontologyTerms;\r\n    }\r\n\r\n    /**\r\n     * finds ontology terms that match based on term and based on description.\r\n     *\r\n     * @param user\r\n     * @param ontologyTermFilter - the search phrase that is applied to the term field\r\n     * of an ontology term object.\r\n     * @param ontologyDescriptionFilter - the search phrase that is applied to the\r\n     * description field of the ontology term object.\r\n     * @throws MacawException\r\n     */\r\n    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String ontologyTermFilter, String ontologyDescriptionFilter) throws MacawException {\r\n        if ((ValidationUtility.isEmptyValue(ontologyTermFilter) == true) && (ValidationUtility.isEmptyValue(ontologyDescriptionFilter) == true)) {\r\n            String errorMessage = MacawMessages.getMessage(\"ontologyTermFilter.error\");\r\n            MacawException exception = new MacawException(MacawErrorType.NO_ONTOLOGY_TERM_FILTER, errorMessage);\r\n            throw exception;\r\n        }\r\n        ArrayList<OntologyTerm> termResults = filterByTerm(ontologyTermFilter, ontologyTerms);\r\n        ArrayList<OntologyTerm> descriptionFilterResults = filterByDescription(ontologyDescriptionFilter, termResults);\r\n        ArrayList<OntologyTerm> finalResults = new ArrayList<OntologyTerm>();\r\n        //put them in an alphabetical order\r\n        for (OntologyTerm currentOntologyTerm : descriptionFilterResults) {\r\n            String currentDocumentDisplayName = currentOntologyTerm.getDisplayName();\r\n            int insertionIndex = -1;\r\n            int numberOfResults = finalResults.size();\r\n            for (int i = 0; i < numberOfResults; i++) {\r\n                String currentResultDisplayName = finalResults.get(i).getDisplayName();\r\n                if (currentDocumentDisplayName.compareTo(currentResultDisplayName) > 0) {\r\n                    insertionIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n            OntologyTerm cloneOntologyTerm = (OntologyTerm) currentOntologyTerm.clone();\r\n            if (insertionIndex == -1) {\r\n                //item belongs at the end\r\n                finalResults.add(cloneOntologyTerm);\r\n            } else {\r\n                finalResults.add(insertionIndex, cloneOntologyTerm);\r\n            }\r\n        }\r\n        return finalResults;\r\n    }\r\n\r\n    private ArrayList<OntologyTerm> filterByTerm(String ontologyTermFilter, ArrayList<OntologyTerm> results) {\r\n        ArrayList<OntologyTerm> refinedResults = new ArrayList<OntologyTerm>();\r\n        if (ValidationUtility.isEmptyValue(ontologyTermFilter) == true) {\r\n            //return everything so just return the original result list\r\n            return results;\r\n        }\r\n        SearchUtility searchUtility = new SearchUtility();\r\n        searchUtility.setDefaultSearchPattern(ontologyTermFilter);\r\n        for (OntologyTerm ontologyTerm : results) {\r\n            String term = ontologyTerm.getTerm();\r\n            if (searchUtility.valueContainsPattern(term) == true) {\r\n                refinedResults.add(ontologyTerm);\r\n            }\r\n        }\r\n        return refinedResults;\r\n    }\r\n\r\n    private ArrayList<OntologyTerm> filterByDescription(String descriptionFilter, ArrayList<OntologyTerm> results) {\r\n        if (ValidationUtility.isEmptyValue(descriptionFilter) == true) {\r\n            //return everything so just return the original result list\r\n            return results;\r\n        }\r\n        SearchUtility searchUtility = new SearchUtility();\r\n        searchUtility.setDefaultSearchPattern(descriptionFilter);\r\n        ArrayList<OntologyTerm> refinedResults = new ArrayList<OntologyTerm>();\r\n        for (OntologyTerm currentResult : results) {\r\n            String currentDescription = currentResult.getDescription();\r\n            if (searchUtility.valueContainsPattern(currentDescription) == true) {\r\n                refinedResults.add(currentResult);\r\n            }\r\n        }\r\n        return refinedResults;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/InMemoryOntologyTermFilterTest.java",
		"test_prompt": "// InMemoryOntologyTermFilterTest.java\npackage macaw.persistenceLayer.demo;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport macaw.util.SearchUtility;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InMemoryOntologyTermFilter}.\n* It contains ten unit test cases for the {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.\n*/\nclass InMemoryOntologyTermFilterTest {"
	},
	{
		"original_code": "// InMemorySupportingDocumentFilter.java\npackage macaw.persistenceLayer.demo;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport macaw.util.SearchUtility;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * filter class that performs different searches to retrieve instances of\r\n * {@link macaw.businessLayer.SupportingDocument}.  The Macaw data entry forms for\r\n * raw and derived variables (see package <code> macaw.view </code>) allow\r\n * users to add, edit, delete or select supporting documents. The select\r\n * operation allows users to choose an existing supporting document.\r\n *\r\n * <p>\r\n * Macaw provides a search facility to help users find a particular supporting document\r\n * to associate with a variable.  This class contains the code which supports\r\n * that feature.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class InMemorySupportingDocumentFilter {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private ArrayList<SupportingDocument> supportingDocuments;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public InMemorySupportingDocumentFilter() {\r\n        supportingDocuments = new ArrayList<SupportingDocument>();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void setSupportingDocuments(ArrayList<SupportingDocument> supportingDocuments) {\r\n        this.supportingDocuments = supportingDocuments;\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitleFilter, String documentCodeFilter) throws MacawException {\r\n        if ((ValidationUtility.isEmptyValue(documentTitleFilter) == true) && (ValidationUtility.isEmptyValue(documentCodeFilter) == true)) {\r\n            String errorMessage = MacawMessages.getMessage(\"supportingDocumentFilter.error\");\r\n            MacawException exception = new MacawException(MacawErrorType.NO_SUPPORTING_DOCUMENT_FILTER, errorMessage);\r\n            throw exception;\r\n        }\r\n        ArrayList<SupportingDocument> documentTitleResults = filterByDocumentTitle(documentTitleFilter, supportingDocuments);\r\n        ArrayList<SupportingDocument> documentCodeFilterResults = filterByDocumentCode(documentCodeFilter, documentTitleResults);\r\n        ArrayList<SupportingDocument> finalResults = new ArrayList<SupportingDocument>();\r\n        //put them in an alphabetical order\r\n        for (SupportingDocument currentSupportingDocument : documentCodeFilterResults) {\r\n            String currentDocumentDisplayName = currentSupportingDocument.getDisplayName();\r\n            int insertionIndex = -1;\r\n            int numberOfResults = finalResults.size();\r\n            for (int i = 0; i < numberOfResults; i++) {\r\n                String currentResultDisplayName = finalResults.get(i).getDisplayName();\r\n                if (currentDocumentDisplayName.compareTo(currentResultDisplayName) > 0) {\r\n                    insertionIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n            SupportingDocument cloneSupportingDocument = (SupportingDocument) currentSupportingDocument.clone();\r\n            if (insertionIndex == -1) {\r\n                //item belongs at the end\r\n                finalResults.add(cloneSupportingDocument);\r\n            } else {\r\n                finalResults.add(insertionIndex, cloneSupportingDocument);\r\n            }\r\n        }\r\n        return finalResults;\r\n    }\r\n\r\n    private ArrayList<SupportingDocument> filterByDocumentTitle(String documentTitleFilter, ArrayList<SupportingDocument> results) {\r\n        ArrayList<SupportingDocument> refinedResults = new ArrayList<SupportingDocument>();\r\n        if (ValidationUtility.isEmptyValue(documentTitleFilter) == true) {\r\n            //return everything so just return the original result list\r\n            return results;\r\n        }\r\n        SearchUtility searchUtility = new SearchUtility();\r\n        searchUtility.setDefaultSearchPattern(documentTitleFilter);\r\n        for (SupportingDocument supportingDocument : results) {\r\n            if (searchUtility.valueContainsPattern(supportingDocument.getTitle()) == true) {\r\n                refinedResults.add(supportingDocument);\r\n            }\r\n        }\r\n        return refinedResults;\r\n    }\r\n\r\n    private ArrayList<SupportingDocument> filterByDocumentCode(String documentCodeFilter, ArrayList<SupportingDocument> results) {\r\n        if (ValidationUtility.isEmptyValue(documentCodeFilter) == true) {\r\n            return results;\r\n        }\r\n        SearchUtility searchUtility = new SearchUtility();\r\n        searchUtility.setDefaultSearchPattern(documentCodeFilter);\r\n        ArrayList<SupportingDocument> refinedResults = new ArrayList<SupportingDocument>();\r\n        for (SupportingDocument currentResult : results) {\r\n            String currentDocumentCode = currentResult.getDocumentCode();\r\n            if (searchUtility.valueContainsPattern(currentDocumentCode) == true) {\r\n                refinedResults.add(currentResult);\r\n            }\r\n        }\r\n        return refinedResults;\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/InMemorySupportingDocumentFilterTest.java",
		"test_prompt": "// InMemorySupportingDocumentFilterTest.java\npackage macaw.persistenceLayer.demo;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport macaw.util.SearchUtility;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InMemorySupportingDocumentFilter}.\n* It contains ten unit test cases for the {@link InMemorySupportingDocumentFilter#filterSupportingDocuments(User, String, String)} method.\n*/\nclass InMemorySupportingDocumentFilterTest {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest0.java",
		"test_prompt": "// ChangeEventGeneratorTest0.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#addSupportingDocumentChange(User, SupportingDocument)} method.\n*/\nclass ChangeEventGeneratorTest0 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest1.java",
		"test_prompt": "// ChangeEventGeneratorTest1.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteSupportingDocumentsChange(User, ArrayList)} method.\n*/\nclass ChangeEventGeneratorTest1 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest2.java",
		"test_prompt": "// ChangeEventGeneratorTest2.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#addValueLabelsChange(User, Variable, ArrayList)} method.\n*/\nclass ChangeEventGeneratorTest2 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest3.java",
		"test_prompt": "// ChangeEventGeneratorTest3.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteValueLabelsChange(User, Variable, ArrayList)} method.\n*/\nclass ChangeEventGeneratorTest3 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest4.java",
		"test_prompt": "// ChangeEventGeneratorTest4.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#addOntologyTermChange(User, OntologyTerm)} method.\n*/\nclass ChangeEventGeneratorTest4 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest5.java",
		"test_prompt": "// ChangeEventGeneratorTest5.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteOntologyTermsChange(User, ArrayList)} method.\n*/\nclass ChangeEventGeneratorTest5 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest6.java",
		"test_prompt": "// ChangeEventGeneratorTest6.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteVariableChanges(User, Variable)} method.\n*/\nclass ChangeEventGeneratorTest6 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest7.java",
		"test_prompt": "// ChangeEventGeneratorTest7.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteRawVariablesChanges(User, ArrayList)} method.\n*/\nclass ChangeEventGeneratorTest7 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest8.java",
		"test_prompt": "// ChangeEventGeneratorTest8.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#addVariableChange(User, Variable)} method.\n*/\nclass ChangeEventGeneratorTest8 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest9.java",
		"test_prompt": "// ChangeEventGeneratorTest9.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#associateSourceVariablesChanges(User, DerivedVariable, ArrayList)} method.\n*/\nclass ChangeEventGeneratorTest9 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest10.java",
		"test_prompt": "// ChangeEventGeneratorTest10.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#disassociateSourceVariablesChanges(User, DerivedVariable, ArrayList)} method.\n*/\nclass ChangeEventGeneratorTest10 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest11.java",
		"test_prompt": "// ChangeEventGeneratorTest11.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#associateSupportingDocumentChanges(User, Variable, ArrayList)} method.\n*/\nclass ChangeEventGeneratorTest11 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest12.java",
		"test_prompt": "// ChangeEventGeneratorTest12.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#disassociateSupportingDocumentsChanges(User, Variable, ArrayList)} method.\n*/\nclass ChangeEventGeneratorTest12 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest13.java",
		"test_prompt": "// ChangeEventGeneratorTest13.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#addUserChange(User, User)} method.\n*/\nclass ChangeEventGeneratorTest13 {"
	},
	{
		"original_code": "// ChangeEventGenerator.java\npackage macaw.persistenceLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * A convenience class that generates collections of change event descriptions\r\n * that are used by both the InMemory and SQL-based implementations of\r\n * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API\r\n * began to share common blocks of code, particularly for processing change events associated\r\n * with \"add\", \"delete\", \"associate\" and \"dissociate\" operations.  To record changes\r\n * made in \"update\" operations, a different procedure was followed.  Old and revised\r\n * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>\r\n * that is supported in most of the <code>macaw.model.*</code> classes.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeEventGenerator {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeEventGenerator() {\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * produce change events for operations which involve adding support documents\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {\r\n        String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.newRecord\", supportingDocument.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());\r\n        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting support documents\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"supportingDocument.saveChanges.deleteRecord\", supportingDocument.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding value labels\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.newRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting value labels\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (ValueLabel currentValueLabel : valueLabels) {\r\n            String changeMessage = MacawMessages.getMessage(\"valueLabel.saveChanges.deleteRecord\", currentValueLabel.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding ontology terms\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {\r\n        String userID = user.getUserID();\r\n        String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.newRecord\", ontologyTerm.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting ontology terms\r\n     * from the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        for (OntologyTerm currentOntologyTerm : ontologyTerms) {\r\n            String changeMessage = MacawMessages.getMessage(\"ontologyTerm.saveChanges.deleteRecord\", currentOntologyTerm.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve deleting raw or derived variables\r\n     * from the database\r\n     */\r\n    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {\r\n        String userID = user.getUserID();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.deleteRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            return changeEvent;\r\n        }\r\n    }\r\n\r\n    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {\r\n        String userID = user.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (RawVariable currentRawVariable : rawVariables) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.deleteRecord\", currentRawVariable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve adding raw or derived variables\r\n     * to the database\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        if (variable instanceof RawVariable) {\r\n            String changeMessage = MacawMessages.getMessage(\"rawVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        } else {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.saveChanges.newRecord\", variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.add\", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating source variables\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String userID = user.getUserID();\r\n        String derivedVariableDisplayName = derivedVariable.getDisplayName();\r\n        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"derivedVariable.sourceVariables.saveChanges.delete\", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);\r\n            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());\r\n            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve associating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {\r\n            if (variable.containsSupportingDocument(supportingDocument) == false) {\r\n                variable.addSupportingDocument(supportingDocument);\r\n                String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * produce change events for operations which involve disassociating supporting documents\r\n     * with a derived variable\r\n     */\r\n    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"variable.saveChanges.associateDocument\", supportingDocument.getDisplayName(), variable.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());\r\n            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());\r\n            changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates change event when a new user is added\r\n     * @param admin\r\n     * @param user\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {\r\n        String changeMessage = MacawMessages.getMessage(\"user.saveChanges.newRecord\", admin.getDisplayName(), user.getDisplayName());\r\n        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        changeEvents.add(changeEvent);\r\n        return changeEvents;\r\n    }\r\n\r\n    /**\r\n     * creates a collection of change events for users which are deleted\r\n     * @param admin\r\n     * @param usersToDelete\r\n     * @throws MacawException\r\n     */\r\n    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        String adminID = admin.getUserID();\r\n        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();\r\n        for (User userToDelete : usersToDelete) {\r\n            String changeMessage = MacawMessages.getMessage(\"user.saveChanges.deleteRecord\", admin.getDisplayName(), userToDelete.getDisplayName());\r\n            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);\r\n            changeEvents.add(changeEvent);\r\n        }\r\n        return changeEvents;\r\n    }\r\n    /*\r\n\tstatic public MacawChangeEvent setAlternativeVariable(User user,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable targetVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable oldAlternativeVariable,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Variable updatedAlternativeVariable) throws MacawException {\r\n\r\n\t\tString userID = user.getUserID();\r\n\r\n\t\tString blankFieldValue\r\n\t\t\t= MacawMessages.getMessage(\"general.fieldValue.blank\");\r\n\t\tString fieldName\r\n\t\t\t= MacawMessages.getMessage(\"variable.alternativeVariable.label\");\r\n\t\tString oldAlternativeVariableName = blankFieldValue;\r\n\t\tif (oldAlternativeVariable != null) {\r\n\t\t\toldAlternativeVariableName = oldAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString updatedAlternativeVariableName = blankFieldValue;\r\n\t\tif (updatedAlternativeVariable != null) {\r\n\t\t\tupdatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();\r\n\t\t}\r\n\t\t\r\n\t\tString changeMessage\r\n\t\t\t= MacawMessages.getMessage(\"variable.saveChanges.valueChanged\",\r\n\t\t\t\t\t\t\t\t\t\tfieldName,\r\n\t\t\t\t\t\t\t\t\t\toldAlternativeVariableName,\r\n\t\t\t\t\t\t\t\t\t\tupdatedAlternativeVariableName);\r\n\t\t\r\n\t\tMacawChangeEvent changeEvent\r\n\t\t\t= new MacawChangeEvent(ChangeEventType.VARIABLE,\r\n\t\t\t\t\t\t\t\t   changeMessage,\r\n\t\t\t\t\t\t\t\t   user.getUserID());\r\n\t\t\r\n\t\tint targetVariableID = targetVariable.getIdentifier();\r\n\t\tchangeEvent.setVariableOwnerID(targetVariableID);\r\n\t\tchangeEvent.setChangedObjectIdentifier(targetVariableID);\r\n\t\t\r\n\t\treturn changeEvent;\t\t\r\n\t}\r\n\t*/\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGeneratorTest14.java",
		"test_prompt": "// ChangeEventGeneratorTest14.java\npackage macaw.persistenceLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeEventGenerator}.\n* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteUsersChanges(User, ArrayList)} method.\n*/\nclass ChangeEventGeneratorTest14 {"
	},
	{
		"original_code": "// SetupCurationDatabase.java\npackage macaw.persistenceLayer.production;\n\nimport macaw.businessLayer.*;\nimport macaw.persistenceLayer.DummyDataProvider;\nimport macaw.system.*;\nimport java.sql.*;\nimport java.io.*;\nimport java.util.PropertyResourceBundle;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\n\n/**\n * A convenience class that can be used to create all the database tables used by\n * the production services.\n *\n * <hr>\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *      http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * <hr>\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\n * @version 1.0\n */\n/*\n * Code Road Map:\n * --------------\n * Code is organised into the following sections.  Wherever possible, \n * methods are classified based on an order of precedence described in \n * parentheses (..).  For example, if you're trying to find a method \n * 'getName(...)' that is both an interface method and an accessor \n * method, the order tells you it should appear under interface.\n * \n * Order of \n * Precedence     Section\n * ==========     ======\n * (1)            Section Constants\n * (2)            Section Properties\n * (3)            Section Construction\n * (7)            Section Accessors and Mutators\n * (6)            Section Errors and Validation\n * (5)            Section Interfaces\n * (4)            Section Overload\n *\n */\npublic class SetupCurationDatabase {\n\n    public static final void main(String[] arguments) {\n        SessionProperties sessionProperties = new SessionProperties();\n        StartupOptions startupOptions = (StartupOptions) sessionProperties.getProperty(SessionProperties.STARTUP_OPTIONS);\n        startupOptions.setDatabaseName(\"macaw\");\n        SetupCurationDatabase setupTool = new SetupCurationDatabase(sessionProperties);\n        startupOptions.processCommandLineArguments(arguments);\n        try {\n            setupTool.setup();\n        } catch (MacawException exception) {\n            exception.printErrors();\n        }\n    }\n\n    // ==========================================\n    // Section Constants\n    // ==========================================\n    // ==========================================\n    // Section Properties\n    // ==========================================\n    private String databaseName;\n\n    private String databaseServer;\n\n    private String databasePort;\n\n    private StartupOptions startupOptions;\n\n    private SessionProperties sessionProperties;\n\n    private SQLConnectionManager sqlConnectionManager;\n\n    private String startupPropertiesFileName;\n\n    private SQLListChoiceManager listChoiceManager;\n\n    private SQLSupportingDocumentsManager documentsManager;\n\n    private SQLValueLabelManager valueLabelsManager;\n\n    private SQLChangeEventManager changeEventManager;\n\n    private SQLUserManager userManager;\n\n    private SQLVariableManager variableManager;\n\n    private SQLOntologyTermManager ontologyTermManager;\n\n    private Log log;\n\n    // ==========================================\n    // Section Construction\n    // ==========================================\n    public SetupCurationDatabase(SessionProperties sessionProperties) {\n        log = new Log();\n        this.sessionProperties = sessionProperties;\n    }\n\n    public void setup() throws MacawException {\n        readPropertiesFile();\n        Connection connection = null;\n        sqlConnectionManager = new SQLConnectionManager(sessionProperties);\n        if (databaseExists() == true) {\n            String databaseAlreadyExists = MacawMessages.getMessage(\"setupDatabase.databaseAlreadyExists\");\n            JOptionPane.showMessageDialog(null, databaseAlreadyExists);\n            return;\n        }\n        createDatabase();\n        createManagerObjects();\n        try {\n            connection = sqlConnectionManager.getConnection();\n            changeEventManager.createTable(connection);\n            userManager.createTable(connection);\n            listChoiceManager.createTables(connection);\n            documentsManager.createTable(connection);\n            ontologyTermManager.createTable(connection);\n            valueLabelsManager.createTable(connection);\n            variableManager.createTables(connection);\n            String finishedInstallation = MacawMessages.getMessage(\"setupDatabase.databaseSuccesfullyInstalled\");\n            JOptionPane.showMessageDialog(null, finishedInstallation);\n        } finally {\n            sqlConnectionManager.releaseConnection(connection);\n        }\n    }\n\n    private Connection getConnection(String databaseURI) throws Exception {\n        Connection connection = null;\n        StartupOptions startupOptions = (StartupOptions) sessionProperties.getProperty(SessionProperties.STARTUP_OPTIONS);\n        String dbUserID = startupOptions.getDbUser();\n        String dbPassword = startupOptions.getDbPassword();\n        if (dbUserID == null) {\n            connection = DriverManager.getConnection(databaseURI);\n        } else {\n            connection = DriverManager.getConnection(databaseURI, dbUserID, dbPassword);\n        }\n        return connection;\n    }\n\n    private void readPropertiesFile() {\n        databaseName = \"macaw\";\n        databaseServer = \"localhost\";\n        //databasePort = \"3306\";\n        //databaseServer = \"prometheus\";\n        //databasePort = \"3306\";\n    }\n\n    public boolean databaseExists() throws MacawException {\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultSet = null;\n        try {\n            Class.forName(\"org.gjt.mm.mysql.Driver\").newInstance();\n            //String databaseURI = \"jdbc:mysql://localhost:3306/mysql\";\n            //String databaseURI = \"jdbc:mysql://localhost/mysql\";\n            String databaseURI = \"jdbc:mysql://localhost/\";\n            connection = getConnection(databaseURI);\n            StringBuilder query = new StringBuilder();\n            query.append(\"SELECT SCHEMA_NAME \");\n            query.append(\"FROM INFORMATION_SCHEMA.SCHEMATA \");\n            query.append(\"WHERE SCHEMA_NAME = '\");\n            query.append(databaseName);\n            query.append(\"';\");\n            statement = connection.createStatement();\n            resultSet = statement.executeQuery(query.toString());\n            return (resultSet.next());\n        } catch (Exception exception) {\n            log.logException(exception);\n            String errorMessage = MacawMessages.getMessage(\"sqlDB.error.unableToCreateDatabase\", databaseName);\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_CHECK_DATABASE_EXISTS, errorMessage);\n            throw macawException;\n        } finally {\n            SQLUtilities.closeStatementsWithCatch(statement, null);\n            try {\n                connection.close();\n            } catch (Exception exception) {\n            }\n        }\n    }\n\n    private void createDatabase() throws MacawException {\n        PreparedStatement statement = null;\n        try {\n            StringBuilder databaseURI = new StringBuilder();\n            databaseURI.append(\"jdbc:mysql://\");\n            if (databaseServer == null) {\n                databaseURI.append(\"localhost\");\n            } else {\n                databaseURI.append(databaseServer);\n            }\n            if (databasePort != null) {\n                databaseURI.append(\":\");\n                databaseURI.append(databasePort);\n            }\n            databaseURI.append(\"/\");\n            Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n            StartupOptions startupOptions = (StartupOptions) sessionProperties.getProperty(SessionProperties.STARTUP_OPTIONS);\n            String dbUser = startupOptions.getDbUser();\n            String dbPassword = startupOptions.getDbPassword();\n            Connection connection = null;\n            if (dbUser == null) {\n                connection = DriverManager.getConnection(databaseURI.toString());\n            } else {\n                connection = DriverManager.getConnection(databaseURI.toString(), dbUser, dbPassword);\n            }\n            StringBuilder query = new StringBuilder();\n            query.append(\"CREATE DATABASE \");\n            query.append(databaseName);\n            query.append(\";\");\n            statement = connection.prepareStatement(query.toString());\n            statement.executeUpdate();\n        } catch (Exception exception) {\n            exception.printStackTrace(System.out);\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToCreateDatabase\");\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_CREATE_DATABASE, errorMessage);\n            throw macawException;\n        } finally {\n            try {\n                if (statement != null) {\n                    statement.close();\n                }\n            } catch (SQLException exception) {\n                String errorMessage = MacawMessages.getMessage(\"sql.error.unableToCloseConnection\");\n                MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_CLOSE_CONNECTION, errorMessage);\n                throw macawException;\n            }\n        }\n    }\n\n    private void createManagerObjects() throws MacawException {\n        log = sessionProperties.getLog();\n        changeEventManager = new SQLChangeEventManager(sessionProperties.getLog());\n        userManager = new SQLUserManager(changeEventManager, sqlConnectionManager);\n        userManager.setLog(log);\n        documentsManager = new SQLSupportingDocumentsManager(changeEventManager);\n        documentsManager.setLog(log);\n        listChoiceManager = new SQLListChoiceManager(changeEventManager);\n        //listChoiceManager.setLog(log);\n        valueLabelsManager = new SQLValueLabelManager(changeEventManager);\n        valueLabelsManager.setLog(log);\n        ontologyTermManager = new SQLOntologyTermManager(changeEventManager);\n        ontologyTermManager.setLog(log);\n        variableManager = new SQLVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, documentsManager);\n        variableManager.setLog(log);\n    }\n\n    private void initiallyPopulate() {\n        try {\n            ProductionCurationService database = new ProductionCurationService(sessionProperties);\n            User admin = new User(\"admin\", \"admin\");\n            User jsmith = new User(\"jsmith\", \"cool\");\n            DummyDataProvider dummyDataProvider = new DummyDataProvider(database, admin);\n            dummyDataProvider.populateDatabase(jsmith);\n        } catch (MacawException exception) {\n            exception.printErrors();\n            Log log = new Log();\n            log.logException(exception);\n        }\n    }\n\n    public void dropDatabase() throws MacawException {\n        User user = new User(\"user\", \"user\");\n        StringBuilder query = new StringBuilder();\n        query.append(\"DROP DATABASE macaw;\");\n        Connection connection = sqlConnectionManager.getConnection();\n        PreparedStatement statement = null;\n        try {\n            statement = connection.prepareStatement(query.toString());\n            statement.executeQuery();\n        } catch (SQLException exception) {\n            log.logException(exception);\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToCreateTables\");\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_CREATE_TABLES, errorMessage);\n            throw macawException;\n        } finally {\n            sqlConnectionManager.releaseConnection(connection);\n        }\n    }\n\n    // ==========================================\n    // Section Accessors and Mutators\n    // ==========================================\n    public void setStartUpPropertiesFileName(String startupPropertiesFileName) {\n        this.startupPropertiesFileName = startupPropertiesFileName;\n    }\n\n    public void run() {\n        try {\n            try {\n                //Part I: Obtain the properties file that contains\n                //all the startup properties\n                File setupFile = new File(startupPropertiesFileName);\n                if (setupFile.exists() == false) {\n                    UserInterfaceFactory userInterfaceFactory = new UserInterfaceFactory();\n                    JFileChooser fileChooser = userInterfaceFactory.createFileChooser();\n                    int result = fileChooser.showOpenDialog(null);\n                    if (result == JFileChooser.APPROVE_OPTION) {\n                        setupFile = fileChooser.getSelectedFile();\n                    } else {\n                        String errorMessage = MacawMessages.getMessage(\"\");\n                        log.displayErrorDialog(errorMessage);\n                        System.exit(0);\n                    }\n                    //Part II: Extract important properties from the file\n                    FileInputStream fileInputStream = new FileInputStream(setupFile);\n                    PropertyResourceBundle startupProperties = new PropertyResourceBundle(fileInputStream);\n                    String databaseServer = startupProperties.getString(\"macaw.persistenceLayer.server\");\n                    String databaseName = startupProperties.getString(\"macaw.persistenceLayer.name\");\n                    StringBuilder buffer = new StringBuilder();\n                    buffer.append(\"jdbc:mysql://\");\n                    if (databaseServer == null) {\n                        buffer.append(\"localhost\");\n                    } else {\n                        buffer.append(databaseServer);\n                    }\n                    /**\n                     * \t\t\t\t\tif (databasePort != null) {\n                     * \t\t\t\t\t\tbuffer.append(\":\");\n                     * \t\t\t\t\t\tbuffer.append(databasePort);\n                     * \t\t\t\t\t}\n                     */\n                    StringBuilder databaseURL = new StringBuilder();\n                    //String\n                    Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n                    //Connection connection = DriverManager.getConnection(databaseURL);\n                    //\n                }\n            } catch (Exception exception) {\n                log.logException(exception);\n            }\n            createDatabase();\n        } catch (MacawException exception) {\n            Log log = new Log();\n            log.logException(exception);\n        }\n    }\n    // ==========================================\n    // Section Errors and Validation\n    // ==========================================\n    // ==========================================\n    // Section Interfaces\n    // ==========================================\n    // ==========================================\n    // Section Overload\n    // ==========================================\n}\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/production/SetupCurationDatabaseTest.java",
		"test_prompt": "// SetupCurationDatabaseTest.java\npackage macaw.persistenceLayer.production;\n\nimport macaw.businessLayer.*;\nimport macaw.persistenceLayer.DummyDataProvider;\nimport macaw.system.*;\nimport java.sql.*;\nimport java.io.*;\nimport java.util.PropertyResourceBundle;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SetupCurationDatabase}.\n* It contains ten unit test cases for the {@link SetupCurationDatabase#databaseExists()} method.\n*/\nclass SetupCurationDatabaseTest {"
	},
	{
		"original_code": "// ProductionCurationService.java\npackage macaw.persistenceLayer.production;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.persistenceLayer.*;\r\nimport macaw.system.*;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * Implements the interface {@link macaw.businessLayer.MacawCurationAPI} as a curation service\r\n * which stores data in a MySQL database.  The structure of ProductionCurationService\r\n * is very similar to that of {@link macaw.persistenceLayer.demo.DemonstrationCurationService}.\r\n * Both classes delegate handling API calls to manager classes that are each designed\r\n * to support a major concept from the package <code>macaw.model</code>\r\n * (eg: {@link macaw.businessLayer.SupportingDocument}, {@link macaw.businessLayer.Variable},\r\n * {@link macaw.businessLayer.User})\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ProductionCurationService implements MacawCurationAPI {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private SQLConnectionManager sqlConnectionManager;\r\n\r\n    private SQLFilterQueries filterQueries;\r\n\r\n    private SQLListChoiceManager listChoiceManager;\r\n\r\n    private SQLSupportingDocumentsManager documentsManager;\r\n\r\n    private SQLValueLabelManager valueLabelsManager;\r\n\r\n    private SQLChangeEventManager changeEventManager;\r\n\r\n    private SQLUserManager userManager;\r\n\r\n    private SQLVariableManager variableManager;\r\n\r\n    private SQLOntologyTermManager ontologyTermManager;\r\n\r\n    private MacawSecurityAPI securityValidationService;\r\n\r\n    private Log log;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ProductionCurationService(SessionProperties sessionProperties) throws MacawException {\r\n        changeEventManager = new SQLChangeEventManager(sessionProperties.getLog());\r\n        sqlConnectionManager = new SQLConnectionManager(sessionProperties);\r\n        userManager = new SQLUserManager(changeEventManager, sqlConnectionManager);\r\n        securityValidationService = userManager;\r\n        sessionProperties.setProperty(SessionProperties.SECURITY_SERVICE, securityValidationService);\r\n        log = sessionProperties.getLog();\r\n        userManager.setLog(log);\r\n        documentsManager = new SQLSupportingDocumentsManager(changeEventManager);\r\n        documentsManager.setLog(log);\r\n        listChoiceManager = new SQLListChoiceManager(changeEventManager);\r\n        listChoiceManager.setLog(log);\r\n        valueLabelsManager = new SQLValueLabelManager(changeEventManager);\r\n        valueLabelsManager.setLog(log);\r\n        ontologyTermManager = new SQLOntologyTermManager(changeEventManager);\r\n        ontologyTermManager.setLog(log);\r\n        filterQueries = new SQLFilterQueries(log, listChoiceManager);\r\n        variableManager = new SQLVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, documentsManager);\r\n        variableManager.setLog(log);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    public void addRawVariable(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.addRawVariable(connection, user, rawVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteRawVariables(User user, ArrayList<RawVariable> rawVariables) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.deleteRawVariables(connection, user, rawVariables);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateRawVariable(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.updateRawVariable(connection, user, rawVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getRawVariableIdentifier(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getRawVariableIdentifier(connection, user, rawVariable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.addDerivedVariable(connection, user, derivedVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteDerivedVariables(User user, ArrayList<DerivedVariable> derivedVariables) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.deleteDerivedVariables(connection, user, derivedVariables);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.updateDerivedVariable(connection, user, derivedVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getDerivedVariableIdentifier(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getDerivedVariableIdentifier(connection, user, derivedVariable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public Variable getVariable(User user, String variableName) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            Variable variable = variableManager.getVariable(connection, variableName);\r\n            return variable;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public Variable getOriginalVariable(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getOriginalVariable(connection, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return valueLabelsManager.getValueLabels(connection, user, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            valueLabelsManager.addValueLabels(connection, user, variable, valueLabels);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            valueLabelsManager.updateValueLabels(connection, user, variable, valueLabels);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            valueLabelsManager.deleteValueLabels(connection, user, variable, valueLabels);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getValueLabelIdentifier(User user, Variable variable, ValueLabel valueLabel) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return valueLabelsManager.getValueLabelIdentifier(connection, variable, valueLabel);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getAllSupportingDocuments(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            ArrayList<SupportingDocument> results = documentsManager.getAllSupportingDocuments(connection, user);\r\n            return results;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            ArrayList<SupportingDocument> results = variableManager.getAssociatedSupportingDocuments(connection, user, variable);\r\n            return results;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            documentsManager.addSupportingDocument(connection, user, supportingDocument);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            documentsManager.updateSupportingDocument(connection, user, supportingDocument);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteSupportingDocuments(User user, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            documentsManager.deleteSupportingDocuments(connection, user, supportingDocuments);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getSupportingDocumentIdentifier(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return documentsManager.getSupportingDocumentIdentifier(connection, supportingDocument);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void associateSupportingDocumentsWithVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.associateSupportingDocuments(connection, user, variable, supportingDocuments);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void disassociateSupportingDocumentsFromVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.disassociateSupportingDocuments(connection, user, variable, supportingDocuments);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<Variable> getSourceVariables(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getSourceVariables(connection, user, derivedVariable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void associateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.associateSourceVariables(connection, user, derivedVariable, sourceVariablesToAdd);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void disassociateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.disassociateSourceVariables(connection, user, derivedVariable, sourceVariablesToDelete);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public String[] getStudyYears(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getStudyYears(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<VariableSummary> getSummaryDataForAllVariables(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getSummaryDataForAllVariables(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public Variable getCompleteVariableData(User user, VariableSummary variableSummary) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getCompleteVariableData(connection, user, variableSummary);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<Category> getCategories(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getCategories(connection, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addCategory(User user, Category category) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.addCategory(connection, user, category);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateCategory(User user, Category category) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.updateCategory(connection, user, category);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteCategories(User user, ArrayList<Category> categories) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.deleteCategories(connection, user, categories);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getCategoryIdentifier(User user, Variable variable, Category category) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getCategoryIdentifier(connection, variable, category);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Methods for data libraries\r\n     */\r\n    public ArrayList<AliasFilePath> getAliasFilePaths(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getAliasFilePaths(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.addAliasFilePath(connection, aliasFilePath);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.updateAliasFilePath(connection, user, aliasFilePath);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteAliasFilePaths(User user, ArrayList<AliasFilePath> aliasFilePaths) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.deleteAliasFilePaths(connection, aliasFilePaths);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getAliasFilePathIdentifier(User user, Variable variable, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getAliasFilePathIdentifier(connection, variable, aliasFilePath);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public String getFilePathFromAlias(User user, String currentAlias) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getFilePathFromAlias(connection, currentAlias);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Methods for managing cleaning states\r\n     */\r\n    public ArrayList<CleaningState> getCleaningStates(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getCleaningStates(connection, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addCleaningState(User user, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.addCleaningState(connection, cleaningState);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateCleaningState(User user, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.updateCleaningState(connection, user, cleaningState);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteCleaningStates(User user, ArrayList<CleaningState> cleaningStates) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.deleteCleaningStates(connection, cleaningStates);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getCleaningStateIdentifier(User user, Variable variable, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getCleaningStateIdentifier(connection, variable, cleaningState);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Methods for managing availability states\r\n     */\r\n    public ArrayList<AvailabilityState> getAvailabilityStates(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getAvailabilityStates(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.addAvailabilityState(connection, user, availabilityState);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.updateAvailabilityState(connection, availabilityState);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteAvailabilityStates(User user, ArrayList<AvailabilityState> availabilityStates) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.deleteAvailabilityStates(connection, availabilityStates);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getAvailabilityStateIdentifier(User user, Variable variable, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getAvailabilityStateIdentifier(connection, variable, availabilityState);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchText, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return filterQueries.filterVariableSummaries(connection, searchText, year, category, variableTypeFilter);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitle, String documentCode) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return filterQueries.filterSupportingDocuments(connection, documentTitle, documentCode);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String term, String description) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return filterQueries.filterOntologyTerms(connection, term, description);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getAllOntologyTerms(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return ontologyTermManager.getAllOntologyTerms(connection, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getAssociatedOntologyTerms(connection, user, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            ontologyTermManager.addOntologyTerm(connection, user, ontologyTerm);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            ontologyTermManager.updateOntologyTerm(connection, user, ontologyTerm);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteOntologyTerms(User user, ArrayList<OntologyTerm> ontologyTermsToDelete) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            ontologyTermManager.deleteOntologyTerms(connection, user, ontologyTermsToDelete);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getOntologyTermIdentifier(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return ontologyTermManager.getOntologyTermIdentifier(connection, ontologyTerm);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void associateOntologyTermsWithVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.associateOntologyTerms(connection, user, variable, ontologyTerms);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void disassociateOntologyTermsFromVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.disassociateOntologyTerms(connection, user, variable, ontologyTerms);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForVariable(connection, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForSupportingDocument(connection, supportingDocument);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForValueLabels(connection, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForListChoices(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForUser(connection, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<User> getUsers(User admin) throws MacawException {\r\n        checkValidAdministrator(admin);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return userManager.getUsers(admin);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addUser(User admin, User user) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            userManager.addUser(connection, admin, user);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateUser(User admin, User user) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            userManager.updateUser(connection, admin, user);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            userManager.deleteUsers(connection, admin, usersToDelete);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getUserIdentifier(User admin, User user) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return userManager.getUserIdentifier(connection, admin, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void checkValidAdministrator(User admin) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            securityValidationService.validateAdministrator(admin);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void clear(User admin) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            checkValidAdministrator(admin);\r\n            changeEventManager.clear(connection);\r\n            userManager.clear(connection);\r\n            valueLabelsManager.clear(connection);\r\n            listChoiceManager.clear(connection);\r\n            documentsManager.clear(connection);\r\n            ontologyTermManager.clear(connection);\r\n            variableManager.clear(connection);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void clearAllChanges(User admin) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            securityValidationService.validateAdministrator(admin);\r\n            changeEventManager.clearAllChanges(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getAllChanges(User admin) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            securityValidationService.validateAdministrator(admin);\r\n            return changeEventManager.getAllChanges(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public Variable getAlternativeVariable(User user, Variable targetVariable) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            securityValidationService.validateAdministrator(user);\r\n            return variableManager.getAlternativeVariable(connection, user, targetVariable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void setAlternativeVariable(User user, Variable targetVariable, Variable alternativeVariable) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            checkValidUser(user);\r\n            variableManager.setAlternativeVariable(connection, user, targetVariable, alternativeVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void checkValidUser(User user) throws MacawException {\r\n        securityValidationService.validateUser(user);\r\n    }\r\n\r\n    public int getNumberOfConnections() {\r\n        return sqlConnectionManager.getNumberOfConnections();\r\n    }\r\n\r\n    public void initialiseConnection(Connection connection) throws MacawException {\r\n        try {\r\n            connection.setAutoCommit(false);\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToInitialiseConnection\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_INITIALISE_CONNECTION, errorMessage);\r\n            throw macawException;\r\n        }\r\n    }\r\n\r\n    public void commitDatabaseChanges(Connection connection) throws MacawException {\r\n        try {\r\n            connection.commit();\r\n            connection.setAutoCommit(true);\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToCommitChanges\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_COMMIT_CHANGES, errorMessage);\r\n            throw macawException;\r\n        }\r\n    }\r\n\r\n    public void rollBack(Connection connection) throws MacawException {\r\n        try {\r\n            connection.rollback();\r\n            connection.setAutoCommit(true);\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToRollbackChanges\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_ROLLBACK, errorMessage);\r\n            throw macawException;\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/production/ProductionCurationServiceTest0.java",
		"test_prompt": "// ProductionCurationServiceTest0.java\npackage macaw.persistenceLayer.production;\n\nimport macaw.businessLayer.*;\nimport macaw.persistenceLayer.*;\nimport macaw.system.*;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProductionCurationService}.\n* It contains ten unit test cases for the {@link ProductionCurationService#filterVariableSummaries(User, String, String, String, VariableTypeFilter)} method.\n*/\nclass ProductionCurationServiceTest0 {"
	},
	{
		"original_code": "// ProductionCurationService.java\npackage macaw.persistenceLayer.production;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.persistenceLayer.*;\r\nimport macaw.system.*;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * Implements the interface {@link macaw.businessLayer.MacawCurationAPI} as a curation service\r\n * which stores data in a MySQL database.  The structure of ProductionCurationService\r\n * is very similar to that of {@link macaw.persistenceLayer.demo.DemonstrationCurationService}.\r\n * Both classes delegate handling API calls to manager classes that are each designed\r\n * to support a major concept from the package <code>macaw.model</code>\r\n * (eg: {@link macaw.businessLayer.SupportingDocument}, {@link macaw.businessLayer.Variable},\r\n * {@link macaw.businessLayer.User})\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ProductionCurationService implements MacawCurationAPI {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private SQLConnectionManager sqlConnectionManager;\r\n\r\n    private SQLFilterQueries filterQueries;\r\n\r\n    private SQLListChoiceManager listChoiceManager;\r\n\r\n    private SQLSupportingDocumentsManager documentsManager;\r\n\r\n    private SQLValueLabelManager valueLabelsManager;\r\n\r\n    private SQLChangeEventManager changeEventManager;\r\n\r\n    private SQLUserManager userManager;\r\n\r\n    private SQLVariableManager variableManager;\r\n\r\n    private SQLOntologyTermManager ontologyTermManager;\r\n\r\n    private MacawSecurityAPI securityValidationService;\r\n\r\n    private Log log;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ProductionCurationService(SessionProperties sessionProperties) throws MacawException {\r\n        changeEventManager = new SQLChangeEventManager(sessionProperties.getLog());\r\n        sqlConnectionManager = new SQLConnectionManager(sessionProperties);\r\n        userManager = new SQLUserManager(changeEventManager, sqlConnectionManager);\r\n        securityValidationService = userManager;\r\n        sessionProperties.setProperty(SessionProperties.SECURITY_SERVICE, securityValidationService);\r\n        log = sessionProperties.getLog();\r\n        userManager.setLog(log);\r\n        documentsManager = new SQLSupportingDocumentsManager(changeEventManager);\r\n        documentsManager.setLog(log);\r\n        listChoiceManager = new SQLListChoiceManager(changeEventManager);\r\n        listChoiceManager.setLog(log);\r\n        valueLabelsManager = new SQLValueLabelManager(changeEventManager);\r\n        valueLabelsManager.setLog(log);\r\n        ontologyTermManager = new SQLOntologyTermManager(changeEventManager);\r\n        ontologyTermManager.setLog(log);\r\n        filterQueries = new SQLFilterQueries(log, listChoiceManager);\r\n        variableManager = new SQLVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, documentsManager);\r\n        variableManager.setLog(log);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    public void addRawVariable(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.addRawVariable(connection, user, rawVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteRawVariables(User user, ArrayList<RawVariable> rawVariables) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.deleteRawVariables(connection, user, rawVariables);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateRawVariable(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.updateRawVariable(connection, user, rawVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getRawVariableIdentifier(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getRawVariableIdentifier(connection, user, rawVariable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.addDerivedVariable(connection, user, derivedVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteDerivedVariables(User user, ArrayList<DerivedVariable> derivedVariables) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.deleteDerivedVariables(connection, user, derivedVariables);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.updateDerivedVariable(connection, user, derivedVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getDerivedVariableIdentifier(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getDerivedVariableIdentifier(connection, user, derivedVariable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public Variable getVariable(User user, String variableName) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            Variable variable = variableManager.getVariable(connection, variableName);\r\n            return variable;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public Variable getOriginalVariable(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getOriginalVariable(connection, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return valueLabelsManager.getValueLabels(connection, user, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            valueLabelsManager.addValueLabels(connection, user, variable, valueLabels);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            valueLabelsManager.updateValueLabels(connection, user, variable, valueLabels);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            valueLabelsManager.deleteValueLabels(connection, user, variable, valueLabels);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getValueLabelIdentifier(User user, Variable variable, ValueLabel valueLabel) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return valueLabelsManager.getValueLabelIdentifier(connection, variable, valueLabel);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getAllSupportingDocuments(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            ArrayList<SupportingDocument> results = documentsManager.getAllSupportingDocuments(connection, user);\r\n            return results;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            ArrayList<SupportingDocument> results = variableManager.getAssociatedSupportingDocuments(connection, user, variable);\r\n            return results;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            documentsManager.addSupportingDocument(connection, user, supportingDocument);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            documentsManager.updateSupportingDocument(connection, user, supportingDocument);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteSupportingDocuments(User user, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            documentsManager.deleteSupportingDocuments(connection, user, supportingDocuments);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getSupportingDocumentIdentifier(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return documentsManager.getSupportingDocumentIdentifier(connection, supportingDocument);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void associateSupportingDocumentsWithVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.associateSupportingDocuments(connection, user, variable, supportingDocuments);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void disassociateSupportingDocumentsFromVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.disassociateSupportingDocuments(connection, user, variable, supportingDocuments);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<Variable> getSourceVariables(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getSourceVariables(connection, user, derivedVariable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void associateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.associateSourceVariables(connection, user, derivedVariable, sourceVariablesToAdd);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void disassociateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.disassociateSourceVariables(connection, user, derivedVariable, sourceVariablesToDelete);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public String[] getStudyYears(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getStudyYears(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<VariableSummary> getSummaryDataForAllVariables(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getSummaryDataForAllVariables(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public Variable getCompleteVariableData(User user, VariableSummary variableSummary) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getCompleteVariableData(connection, user, variableSummary);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<Category> getCategories(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getCategories(connection, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addCategory(User user, Category category) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.addCategory(connection, user, category);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateCategory(User user, Category category) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.updateCategory(connection, user, category);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteCategories(User user, ArrayList<Category> categories) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.deleteCategories(connection, user, categories);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getCategoryIdentifier(User user, Variable variable, Category category) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getCategoryIdentifier(connection, variable, category);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Methods for data libraries\r\n     */\r\n    public ArrayList<AliasFilePath> getAliasFilePaths(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getAliasFilePaths(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.addAliasFilePath(connection, aliasFilePath);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.updateAliasFilePath(connection, user, aliasFilePath);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteAliasFilePaths(User user, ArrayList<AliasFilePath> aliasFilePaths) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.deleteAliasFilePaths(connection, aliasFilePaths);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getAliasFilePathIdentifier(User user, Variable variable, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getAliasFilePathIdentifier(connection, variable, aliasFilePath);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public String getFilePathFromAlias(User user, String currentAlias) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getFilePathFromAlias(connection, currentAlias);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Methods for managing cleaning states\r\n     */\r\n    public ArrayList<CleaningState> getCleaningStates(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getCleaningStates(connection, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addCleaningState(User user, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.addCleaningState(connection, cleaningState);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateCleaningState(User user, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.updateCleaningState(connection, user, cleaningState);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteCleaningStates(User user, ArrayList<CleaningState> cleaningStates) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.deleteCleaningStates(connection, cleaningStates);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getCleaningStateIdentifier(User user, Variable variable, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getCleaningStateIdentifier(connection, variable, cleaningState);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Methods for managing availability states\r\n     */\r\n    public ArrayList<AvailabilityState> getAvailabilityStates(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getAvailabilityStates(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.addAvailabilityState(connection, user, availabilityState);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.updateAvailabilityState(connection, availabilityState);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteAvailabilityStates(User user, ArrayList<AvailabilityState> availabilityStates) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.deleteAvailabilityStates(connection, availabilityStates);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getAvailabilityStateIdentifier(User user, Variable variable, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getAvailabilityStateIdentifier(connection, variable, availabilityState);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchText, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return filterQueries.filterVariableSummaries(connection, searchText, year, category, variableTypeFilter);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitle, String documentCode) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return filterQueries.filterSupportingDocuments(connection, documentTitle, documentCode);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String term, String description) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return filterQueries.filterOntologyTerms(connection, term, description);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getAllOntologyTerms(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return ontologyTermManager.getAllOntologyTerms(connection, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getAssociatedOntologyTerms(connection, user, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            ontologyTermManager.addOntologyTerm(connection, user, ontologyTerm);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            ontologyTermManager.updateOntologyTerm(connection, user, ontologyTerm);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteOntologyTerms(User user, ArrayList<OntologyTerm> ontologyTermsToDelete) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            ontologyTermManager.deleteOntologyTerms(connection, user, ontologyTermsToDelete);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getOntologyTermIdentifier(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return ontologyTermManager.getOntologyTermIdentifier(connection, ontologyTerm);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void associateOntologyTermsWithVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.associateOntologyTerms(connection, user, variable, ontologyTerms);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void disassociateOntologyTermsFromVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.disassociateOntologyTerms(connection, user, variable, ontologyTerms);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForVariable(connection, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForSupportingDocument(connection, supportingDocument);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForValueLabels(connection, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForListChoices(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForUser(connection, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<User> getUsers(User admin) throws MacawException {\r\n        checkValidAdministrator(admin);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return userManager.getUsers(admin);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addUser(User admin, User user) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            userManager.addUser(connection, admin, user);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateUser(User admin, User user) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            userManager.updateUser(connection, admin, user);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            userManager.deleteUsers(connection, admin, usersToDelete);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getUserIdentifier(User admin, User user) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return userManager.getUserIdentifier(connection, admin, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void checkValidAdministrator(User admin) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            securityValidationService.validateAdministrator(admin);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void clear(User admin) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            checkValidAdministrator(admin);\r\n            changeEventManager.clear(connection);\r\n            userManager.clear(connection);\r\n            valueLabelsManager.clear(connection);\r\n            listChoiceManager.clear(connection);\r\n            documentsManager.clear(connection);\r\n            ontologyTermManager.clear(connection);\r\n            variableManager.clear(connection);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void clearAllChanges(User admin) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            securityValidationService.validateAdministrator(admin);\r\n            changeEventManager.clearAllChanges(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getAllChanges(User admin) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            securityValidationService.validateAdministrator(admin);\r\n            return changeEventManager.getAllChanges(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public Variable getAlternativeVariable(User user, Variable targetVariable) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            securityValidationService.validateAdministrator(user);\r\n            return variableManager.getAlternativeVariable(connection, user, targetVariable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void setAlternativeVariable(User user, Variable targetVariable, Variable alternativeVariable) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            checkValidUser(user);\r\n            variableManager.setAlternativeVariable(connection, user, targetVariable, alternativeVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void checkValidUser(User user) throws MacawException {\r\n        securityValidationService.validateUser(user);\r\n    }\r\n\r\n    public int getNumberOfConnections() {\r\n        return sqlConnectionManager.getNumberOfConnections();\r\n    }\r\n\r\n    public void initialiseConnection(Connection connection) throws MacawException {\r\n        try {\r\n            connection.setAutoCommit(false);\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToInitialiseConnection\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_INITIALISE_CONNECTION, errorMessage);\r\n            throw macawException;\r\n        }\r\n    }\r\n\r\n    public void commitDatabaseChanges(Connection connection) throws MacawException {\r\n        try {\r\n            connection.commit();\r\n            connection.setAutoCommit(true);\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToCommitChanges\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_COMMIT_CHANGES, errorMessage);\r\n            throw macawException;\r\n        }\r\n    }\r\n\r\n    public void rollBack(Connection connection) throws MacawException {\r\n        try {\r\n            connection.rollback();\r\n            connection.setAutoCommit(true);\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToRollbackChanges\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_ROLLBACK, errorMessage);\r\n            throw macawException;\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/production/ProductionCurationServiceTest1.java",
		"test_prompt": "// ProductionCurationServiceTest1.java\npackage macaw.persistenceLayer.production;\n\nimport macaw.businessLayer.*;\nimport macaw.persistenceLayer.*;\nimport macaw.system.*;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProductionCurationService}.\n* It contains ten unit test cases for the {@link ProductionCurationService#filterSupportingDocuments(User, String, String)} method.\n*/\nclass ProductionCurationServiceTest1 {"
	},
	{
		"original_code": "// ProductionCurationService.java\npackage macaw.persistenceLayer.production;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.persistenceLayer.*;\r\nimport macaw.system.*;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * Implements the interface {@link macaw.businessLayer.MacawCurationAPI} as a curation service\r\n * which stores data in a MySQL database.  The structure of ProductionCurationService\r\n * is very similar to that of {@link macaw.persistenceLayer.demo.DemonstrationCurationService}.\r\n * Both classes delegate handling API calls to manager classes that are each designed\r\n * to support a major concept from the package <code>macaw.model</code>\r\n * (eg: {@link macaw.businessLayer.SupportingDocument}, {@link macaw.businessLayer.Variable},\r\n * {@link macaw.businessLayer.User})\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ProductionCurationService implements MacawCurationAPI {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private SQLConnectionManager sqlConnectionManager;\r\n\r\n    private SQLFilterQueries filterQueries;\r\n\r\n    private SQLListChoiceManager listChoiceManager;\r\n\r\n    private SQLSupportingDocumentsManager documentsManager;\r\n\r\n    private SQLValueLabelManager valueLabelsManager;\r\n\r\n    private SQLChangeEventManager changeEventManager;\r\n\r\n    private SQLUserManager userManager;\r\n\r\n    private SQLVariableManager variableManager;\r\n\r\n    private SQLOntologyTermManager ontologyTermManager;\r\n\r\n    private MacawSecurityAPI securityValidationService;\r\n\r\n    private Log log;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ProductionCurationService(SessionProperties sessionProperties) throws MacawException {\r\n        changeEventManager = new SQLChangeEventManager(sessionProperties.getLog());\r\n        sqlConnectionManager = new SQLConnectionManager(sessionProperties);\r\n        userManager = new SQLUserManager(changeEventManager, sqlConnectionManager);\r\n        securityValidationService = userManager;\r\n        sessionProperties.setProperty(SessionProperties.SECURITY_SERVICE, securityValidationService);\r\n        log = sessionProperties.getLog();\r\n        userManager.setLog(log);\r\n        documentsManager = new SQLSupportingDocumentsManager(changeEventManager);\r\n        documentsManager.setLog(log);\r\n        listChoiceManager = new SQLListChoiceManager(changeEventManager);\r\n        listChoiceManager.setLog(log);\r\n        valueLabelsManager = new SQLValueLabelManager(changeEventManager);\r\n        valueLabelsManager.setLog(log);\r\n        ontologyTermManager = new SQLOntologyTermManager(changeEventManager);\r\n        ontologyTermManager.setLog(log);\r\n        filterQueries = new SQLFilterQueries(log, listChoiceManager);\r\n        variableManager = new SQLVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, documentsManager);\r\n        variableManager.setLog(log);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    public void addRawVariable(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.addRawVariable(connection, user, rawVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteRawVariables(User user, ArrayList<RawVariable> rawVariables) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.deleteRawVariables(connection, user, rawVariables);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateRawVariable(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.updateRawVariable(connection, user, rawVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getRawVariableIdentifier(User user, RawVariable rawVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getRawVariableIdentifier(connection, user, rawVariable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.addDerivedVariable(connection, user, derivedVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteDerivedVariables(User user, ArrayList<DerivedVariable> derivedVariables) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.deleteDerivedVariables(connection, user, derivedVariables);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.updateDerivedVariable(connection, user, derivedVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getDerivedVariableIdentifier(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getDerivedVariableIdentifier(connection, user, derivedVariable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public Variable getVariable(User user, String variableName) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            Variable variable = variableManager.getVariable(connection, variableName);\r\n            return variable;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public Variable getOriginalVariable(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getOriginalVariable(connection, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getValueLabels(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return valueLabelsManager.getValueLabels(connection, user, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            valueLabelsManager.addValueLabels(connection, user, variable, valueLabels);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            valueLabelsManager.updateValueLabels(connection, user, variable, valueLabels);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            valueLabelsManager.deleteValueLabels(connection, user, variable, valueLabels);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getValueLabelIdentifier(User user, Variable variable, ValueLabel valueLabel) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return valueLabelsManager.getValueLabelIdentifier(connection, variable, valueLabel);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getAllSupportingDocuments(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            ArrayList<SupportingDocument> results = documentsManager.getAllSupportingDocuments(connection, user);\r\n            return results;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> getSupportingDocuments(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            ArrayList<SupportingDocument> results = variableManager.getAssociatedSupportingDocuments(connection, user, variable);\r\n            return results;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            documentsManager.addSupportingDocument(connection, user, supportingDocument);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            documentsManager.updateSupportingDocument(connection, user, supportingDocument);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteSupportingDocuments(User user, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            documentsManager.deleteSupportingDocuments(connection, user, supportingDocuments);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getSupportingDocumentIdentifier(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return documentsManager.getSupportingDocumentIdentifier(connection, supportingDocument);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void associateSupportingDocumentsWithVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.associateSupportingDocuments(connection, user, variable, supportingDocuments);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void disassociateSupportingDocumentsFromVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.disassociateSupportingDocuments(connection, user, variable, supportingDocuments);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<Variable> getSourceVariables(User user, DerivedVariable derivedVariable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getSourceVariables(connection, user, derivedVariable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void associateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.associateSourceVariables(connection, user, derivedVariable, sourceVariablesToAdd);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void disassociateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.disassociateSourceVariables(connection, user, derivedVariable, sourceVariablesToDelete);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public String[] getStudyYears(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getStudyYears(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<VariableSummary> getSummaryDataForAllVariables(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getSummaryDataForAllVariables(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public Variable getCompleteVariableData(User user, VariableSummary variableSummary) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getCompleteVariableData(connection, user, variableSummary);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<Category> getCategories(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getCategories(connection, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addCategory(User user, Category category) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.addCategory(connection, user, category);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateCategory(User user, Category category) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.updateCategory(connection, user, category);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteCategories(User user, ArrayList<Category> categories) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.deleteCategories(connection, user, categories);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getCategoryIdentifier(User user, Variable variable, Category category) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getCategoryIdentifier(connection, variable, category);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Methods for data libraries\r\n     */\r\n    public ArrayList<AliasFilePath> getAliasFilePaths(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getAliasFilePaths(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.addAliasFilePath(connection, aliasFilePath);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.updateAliasFilePath(connection, user, aliasFilePath);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteAliasFilePaths(User user, ArrayList<AliasFilePath> aliasFilePaths) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.deleteAliasFilePaths(connection, aliasFilePaths);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getAliasFilePathIdentifier(User user, Variable variable, AliasFilePath aliasFilePath) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getAliasFilePathIdentifier(connection, variable, aliasFilePath);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public String getFilePathFromAlias(User user, String currentAlias) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getFilePathFromAlias(connection, currentAlias);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Methods for managing cleaning states\r\n     */\r\n    public ArrayList<CleaningState> getCleaningStates(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getCleaningStates(connection, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addCleaningState(User user, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.addCleaningState(connection, cleaningState);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateCleaningState(User user, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.updateCleaningState(connection, user, cleaningState);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteCleaningStates(User user, ArrayList<CleaningState> cleaningStates) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.deleteCleaningStates(connection, cleaningStates);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getCleaningStateIdentifier(User user, Variable variable, CleaningState cleaningState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getCleaningStateIdentifier(connection, variable, cleaningState);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Methods for managing availability states\r\n     */\r\n    public ArrayList<AvailabilityState> getAvailabilityStates(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getAvailabilityStates(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.addAvailabilityState(connection, user, availabilityState);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.updateAvailabilityState(connection, availabilityState);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteAvailabilityStates(User user, ArrayList<AvailabilityState> availabilityStates) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            listChoiceManager.deleteAvailabilityStates(connection, availabilityStates);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getAvailabilityStateIdentifier(User user, Variable variable, AvailabilityState availabilityState) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return listChoiceManager.getAvailabilityStateIdentifier(connection, variable, availabilityState);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchText, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return filterQueries.filterVariableSummaries(connection, searchText, year, category, variableTypeFilter);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitle, String documentCode) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return filterQueries.filterSupportingDocuments(connection, documentTitle, documentCode);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String term, String description) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return filterQueries.filterOntologyTerms(connection, term, description);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getAllOntologyTerms(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return ontologyTermManager.getAllOntologyTerms(connection, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return variableManager.getAssociatedOntologyTerms(connection, user, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            ontologyTermManager.addOntologyTerm(connection, user, ontologyTerm);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            ontologyTermManager.updateOntologyTerm(connection, user, ontologyTerm);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteOntologyTerms(User user, ArrayList<OntologyTerm> ontologyTermsToDelete) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            ontologyTermManager.deleteOntologyTerms(connection, user, ontologyTermsToDelete);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getOntologyTermIdentifier(User user, OntologyTerm ontologyTerm) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return ontologyTermManager.getOntologyTermIdentifier(connection, ontologyTerm);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void associateOntologyTermsWithVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.associateOntologyTerms(connection, user, variable, ontologyTerms);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void disassociateOntologyTermsFromVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            variableManager.disassociateOntologyTerms(connection, user, variable, ontologyTerms);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForVariable(connection, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForSupportingDocument(connection, supportingDocument);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForValueLabels(connection, variable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForListChoices(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {\r\n        checkValidUser(user);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return changeEventManager.getChangeHistoryForUser(connection, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<User> getUsers(User admin) throws MacawException {\r\n        checkValidAdministrator(admin);\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return userManager.getUsers(admin);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void addUser(User admin, User user) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            userManager.addUser(connection, admin, user);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void updateUser(User admin, User user) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            userManager.updateUser(connection, admin, user);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            userManager.deleteUsers(connection, admin, usersToDelete);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public int getUserIdentifier(User admin, User user) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            return userManager.getUserIdentifier(connection, admin, user);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void checkValidAdministrator(User admin) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            securityValidationService.validateAdministrator(admin);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void clear(User admin) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            checkValidAdministrator(admin);\r\n            changeEventManager.clear(connection);\r\n            userManager.clear(connection);\r\n            valueLabelsManager.clear(connection);\r\n            listChoiceManager.clear(connection);\r\n            documentsManager.clear(connection);\r\n            ontologyTermManager.clear(connection);\r\n            variableManager.clear(connection);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void clearAllChanges(User admin) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            securityValidationService.validateAdministrator(admin);\r\n            changeEventManager.clearAllChanges(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getAllChanges(User admin) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            securityValidationService.validateAdministrator(admin);\r\n            return changeEventManager.getAllChanges(connection);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public Variable getAlternativeVariable(User user, Variable targetVariable) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            securityValidationService.validateAdministrator(user);\r\n            return variableManager.getAlternativeVariable(connection, user, targetVariable);\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void setAlternativeVariable(User user, Variable targetVariable, Variable alternativeVariable) throws MacawException {\r\n        Connection connection = sqlConnectionManager.getConnection();\r\n        try {\r\n            initialiseConnection(connection);\r\n            checkValidUser(user);\r\n            variableManager.setAlternativeVariable(connection, user, targetVariable, alternativeVariable);\r\n            commitDatabaseChanges(connection);\r\n        } catch (MacawException exception) {\r\n            rollBack(connection);\r\n            throw exception;\r\n        } finally {\r\n            sqlConnectionManager.releaseConnection(connection);\r\n        }\r\n    }\r\n\r\n    public void checkValidUser(User user) throws MacawException {\r\n        securityValidationService.validateUser(user);\r\n    }\r\n\r\n    public int getNumberOfConnections() {\r\n        return sqlConnectionManager.getNumberOfConnections();\r\n    }\r\n\r\n    public void initialiseConnection(Connection connection) throws MacawException {\r\n        try {\r\n            connection.setAutoCommit(false);\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToInitialiseConnection\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_INITIALISE_CONNECTION, errorMessage);\r\n            throw macawException;\r\n        }\r\n    }\r\n\r\n    public void commitDatabaseChanges(Connection connection) throws MacawException {\r\n        try {\r\n            connection.commit();\r\n            connection.setAutoCommit(true);\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToCommitChanges\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_COMMIT_CHANGES, errorMessage);\r\n            throw macawException;\r\n        }\r\n    }\r\n\r\n    public void rollBack(Connection connection) throws MacawException {\r\n        try {\r\n            connection.rollback();\r\n            connection.setAutoCommit(true);\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToRollbackChanges\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_ROLLBACK, errorMessage);\r\n            throw macawException;\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/production/ProductionCurationServiceTest2.java",
		"test_prompt": "// ProductionCurationServiceTest2.java\npackage macaw.persistenceLayer.production;\n\nimport macaw.businessLayer.*;\nimport macaw.persistenceLayer.*;\nimport macaw.system.*;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProductionCurationService}.\n* It contains ten unit test cases for the {@link ProductionCurationService#filterOntologyTerms(User, String, String)} method.\n*/\nclass ProductionCurationServiceTest2 {"
	},
	{
		"original_code": "// SQLFilterQueries.java\npackage macaw.persistenceLayer.production;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\nimport java.sql.*;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * (c) 2009 Medical Research Council of the United Kingdom.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class SQLFilterQueries {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Log log;\r\n\r\n    private SQLListChoiceManager listChoiceManager;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public SQLFilterQueries(Log log, SQLListChoiceManager listChoiceManager) {\r\n        this.log = log;\r\n        this.listChoiceManager = listChoiceManager;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * we don't need to create a derivedVariables table because there are no\r\n     * concepts beyond the ones in Variables we need to retain.  The exception is\r\n     * the list of source variables for each derived variable but that is handled in\r\n     * a separate table.\r\n     * @param connection\r\n     * @throws SQLException\r\n     */\r\n    //now focusing on methods demanded by the MacawDatabase API\r\n    public ArrayList<VariableSummary> filterVariableSummaries(Connection connection, String searchText, String year, String categoryName, VariableTypeFilter variableTypeFilter) throws MacawException {\r\n        ResultSet resultSet = null;\r\n        Statement statement = null;\r\n        try {\r\n            StringBuilder query = new StringBuilder();\r\n            query.append(\"SELECT identifier,\");\r\n            query.append(\"name,\");\r\n            query.append(\"year,\");\r\n            query.append(\"label,\");\r\n            query.append(\"is_derived_variable \");\r\n            query.append(\"FROM variables\");\r\n            ArrayList<String> conditions = new ArrayList<String>();\r\n            if (ValidationUtility.isBlank(searchText) == false) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\" (label LIKE '%\");\r\n                condition.append(searchText);\r\n                condition.append(\"%' OR name LIKE '%\");\r\n                condition.append(searchText);\r\n                condition.append(\"%')\");\r\n                conditions.add(condition.toString());\r\n            }\r\n            if ((ValidationUtility.isBlank(year) == false) && (year.equals(\"All\") == false)) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\"year='\");\r\n                condition.append(year);\r\n                condition.append(\"'\");\r\n                conditions.add(condition.toString());\r\n            }\r\n            if ((ValidationUtility.isBlank(categoryName) == false) && (categoryName.equals(\"All\") == false)) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\"category_id=\");\r\n                Category category = new Category(categoryName);\r\n                int categoryId = listChoiceManager.getCategoryIdentifier(connection, null, category);\r\n                condition.append(String.valueOf(categoryId));\r\n                conditions.add(condition.toString());\r\n            }\r\n            if (variableTypeFilter == VariableTypeFilter.DERIVED) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\"is_derived_variable=TRUE\");\r\n                conditions.add(condition.toString());\r\n            } else if (variableTypeFilter == VariableTypeFilter.RAW) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\"is_derived_variable=FALSE\");\r\n                conditions.add(condition.toString());\r\n            }\r\n            query.append(\" WHERE deleted_at IS NULL\");\r\n            int numberOfConditions = conditions.size();\r\n            for (int i = 0; i < numberOfConditions; i++) {\r\n                query.append(\" AND \");\r\n                query.append(conditions.get(i));\r\n            }\r\n            query.append(\" ORDER BY year DESC;\");\r\n            statement = connection.createStatement();\r\n            resultSet = statement.executeQuery(query.toString());\r\n            ArrayList<VariableSummary> variableSummaries = new ArrayList<VariableSummary>();\r\n            while (resultSet.next() == true) {\r\n                VariableSummary variableSummary = new VariableSummary();\r\n                variableSummary.setIdentifier(resultSet.getInt(1));\r\n                variableSummary.setName(resultSet.getString(2));\r\n                String currentYear = resultSet.getString(3);\r\n                variableSummary.setYear(currentYear);\r\n                variableSummary.setLabel(resultSet.getString(4));\r\n                variableSummary.setDerived(resultSet.getBoolean(5));\r\n                variableSummaries.add(variableSummary);\r\n            }\r\n            return variableSummaries;\r\n        } catch (SQLException exception) {\r\n            exception.printStackTrace(System.out);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToFilterVariableSummaries\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_FILTER_SUMMARIES, errorMessage);\r\n            throw macawException;\r\n        } finally {\r\n            SQLUtilities.closeStatementsWithCatch(statement, resultSet);\r\n        }\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> filterSupportingDocuments(Connection connection, String documentTitleFilter, String documentCodeFilter) throws MacawException {\r\n        if ((documentTitleFilter.equals(\"\") == true) && (documentCodeFilter.equals(\"\") == true)) {\r\n            String errorMessage = MacawMessages.getMessage(\"supportingDocumentFilter.error\");\r\n            MacawException exception = new MacawException(MacawErrorType.NO_SUPPORTING_DOCUMENT_FILTER, errorMessage);\r\n            throw exception;\r\n        }\r\n        StringBuilder query = new StringBuilder();\r\n        query.append(\"SELECT identifier,\");\r\n        query.append(\"title,\");\r\n        query.append(\"document_code,\");\r\n        query.append(\"description,\");\r\n        query.append(\"file_name,\");\r\n        query.append(\"file_path \");\r\n        query.append(\"FROM supporting_documents \");\r\n        query.append(\"WHERE deleted_at IS NULL AND \");\r\n        ArrayList<String> conditions = new ArrayList<String>();\r\n        if (ValidationUtility.isBlank(documentTitleFilter) == false) {\r\n            StringBuilder condition = new StringBuilder();\r\n            condition.append(\"title LIKE '%\");\r\n            condition.append(documentTitleFilter);\r\n            condition.append(\"%'\");\r\n            conditions.add(condition.toString());\r\n        }\r\n        if (ValidationUtility.isBlank(documentCodeFilter) == false) {\r\n            StringBuilder condition = new StringBuilder();\r\n            condition.append(\"document_code LIKE '%\");\r\n            condition.append(documentCodeFilter);\r\n            condition.append(\"%'\");\r\n            conditions.add(condition.toString());\r\n        }\r\n        int numberOfConditions = conditions.size();\r\n        for (int i = 0; i < numberOfConditions; i++) {\r\n            if (i != 0) {\r\n                query.append(\" AND \");\r\n            }\r\n            query.append(conditions.get(i));\r\n        }\r\n        query.append(\" ORDER BY title ASC;\");\r\n        ResultSet resultSet = null;\r\n        Statement statement = null;\r\n        try {\r\n            statement = connection.createStatement();\r\n            resultSet = statement.executeQuery(query.toString());\r\n            ArrayList<SupportingDocument> searchResults = new ArrayList<SupportingDocument>();\r\n            while (resultSet.next() == true) {\r\n                SupportingDocument supportingDocument = new SupportingDocument();\r\n                supportingDocument.setIdentifier(resultSet.getInt(1));\r\n                supportingDocument.setTitle(resultSet.getString(2));\r\n                supportingDocument.setDocumentCode(resultSet.getString(3));\r\n                supportingDocument.setDescription(resultSet.getString(4));\r\n                supportingDocument.setFileName(resultSet.getString(5));\r\n                supportingDocument.setFilePath(resultSet.getString(6));\r\n                searchResults.add(supportingDocument);\r\n            }\r\n            return searchResults;\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToFilterSupportingDocuments\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_FILTER_SUPPORTING_DOCUMENTS, errorMessage);\r\n            throw macawException;\r\n        } finally {\r\n            SQLUtilities.closeStatementsWithCatch(statement, resultSet);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> filterOntologyTerms(Connection connection, String term, String description) throws MacawException {\r\n        if ((term.equals(\"\") == true) && (description.equals(\"\") == true)) {\r\n            String errorMessage = MacawMessages.getMessage(\"ontologyTermFilter.error\");\r\n            MacawException exception = new MacawException(MacawErrorType.NO_ONTOLOGY_TERM_FILTER, errorMessage);\r\n            throw exception;\r\n        }\r\n        StringBuilder query = new StringBuilder();\r\n        query.append(\"SELECT identifier,\");\r\n        query.append(\"term,\");\r\n        query.append(\"ontology_name,\");\r\n        query.append(\"description,\");\r\n        query.append(\"name_space\");\r\n        query.append(\" FROM ontology_terms \");\r\n        query.append(\"WHERE deleted_at IS NULL AND \");\r\n        ArrayList<String> conditions = new ArrayList<String>();\r\n        if (ValidationUtility.isBlank(term) == false) {\r\n            StringBuilder condition = new StringBuilder();\r\n            condition.append(\"term LIKE '%\");\r\n            condition.append(term);\r\n            condition.append(\"%'\");\r\n            conditions.add(condition.toString());\r\n        }\r\n        if (ValidationUtility.isBlank(description) == false) {\r\n            StringBuilder condition = new StringBuilder();\r\n            condition.append(\"description LIKE '%\");\r\n            condition.append(description);\r\n            condition.append(\"%'\");\r\n            conditions.add(condition.toString());\r\n        }\r\n        int numberOfConditions = conditions.size();\r\n        for (int i = 0; i < numberOfConditions; i++) {\r\n            if (i != 0) {\r\n                query.append(\" AND \");\r\n            }\r\n            query.append(conditions.get(i));\r\n        }\r\n        query.append(\" ORDER BY term ASC;\");\r\n        ResultSet resultSet = null;\r\n        Statement statement = null;\r\n        try {\r\n            statement = connection.createStatement();\r\n            resultSet = statement.executeQuery(query.toString());\r\n            ArrayList<OntologyTerm> searchResults = new ArrayList<OntologyTerm>();\r\n            while (resultSet.next() == true) {\r\n                OntologyTerm ontologyTerm = new OntologyTerm();\r\n                ontologyTerm.setIdentifier(resultSet.getInt(1));\r\n                ontologyTerm.setTerm(resultSet.getString(2));\r\n                ontologyTerm.setOntologyName(resultSet.getString(3));\r\n                ontologyTerm.setDescription(resultSet.getString(4));\r\n                ontologyTerm.setNameSpace(resultSet.getString(5));\r\n                searchResults.add(ontologyTerm);\r\n            }\r\n            return searchResults;\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToFilterOntologyTerms\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_FILTER_ONTOLOGY_TERMS, errorMessage);\r\n            throw macawException;\r\n        } finally {\r\n            SQLUtilities.closeStatementsWithCatch(statement, resultSet);\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/production/SQLFilterQueriesTest0.java",
		"test_prompt": "// SQLFilterQueriesTest0.java\npackage macaw.persistenceLayer.production;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport java.sql.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SQLFilterQueries}.\n* It contains ten unit test cases for the {@link SQLFilterQueries#filterVariableSummaries(Connection, String, String, String, VariableTypeFilter)} method.\n*/\nclass SQLFilterQueriesTest0 {"
	},
	{
		"original_code": "// SQLFilterQueries.java\npackage macaw.persistenceLayer.production;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\nimport java.sql.*;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * (c) 2009 Medical Research Council of the United Kingdom.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class SQLFilterQueries {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Log log;\r\n\r\n    private SQLListChoiceManager listChoiceManager;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public SQLFilterQueries(Log log, SQLListChoiceManager listChoiceManager) {\r\n        this.log = log;\r\n        this.listChoiceManager = listChoiceManager;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * we don't need to create a derivedVariables table because there are no\r\n     * concepts beyond the ones in Variables we need to retain.  The exception is\r\n     * the list of source variables for each derived variable but that is handled in\r\n     * a separate table.\r\n     * @param connection\r\n     * @throws SQLException\r\n     */\r\n    //now focusing on methods demanded by the MacawDatabase API\r\n    public ArrayList<VariableSummary> filterVariableSummaries(Connection connection, String searchText, String year, String categoryName, VariableTypeFilter variableTypeFilter) throws MacawException {\r\n        ResultSet resultSet = null;\r\n        Statement statement = null;\r\n        try {\r\n            StringBuilder query = new StringBuilder();\r\n            query.append(\"SELECT identifier,\");\r\n            query.append(\"name,\");\r\n            query.append(\"year,\");\r\n            query.append(\"label,\");\r\n            query.append(\"is_derived_variable \");\r\n            query.append(\"FROM variables\");\r\n            ArrayList<String> conditions = new ArrayList<String>();\r\n            if (ValidationUtility.isBlank(searchText) == false) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\" (label LIKE '%\");\r\n                condition.append(searchText);\r\n                condition.append(\"%' OR name LIKE '%\");\r\n                condition.append(searchText);\r\n                condition.append(\"%')\");\r\n                conditions.add(condition.toString());\r\n            }\r\n            if ((ValidationUtility.isBlank(year) == false) && (year.equals(\"All\") == false)) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\"year='\");\r\n                condition.append(year);\r\n                condition.append(\"'\");\r\n                conditions.add(condition.toString());\r\n            }\r\n            if ((ValidationUtility.isBlank(categoryName) == false) && (categoryName.equals(\"All\") == false)) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\"category_id=\");\r\n                Category category = new Category(categoryName);\r\n                int categoryId = listChoiceManager.getCategoryIdentifier(connection, null, category);\r\n                condition.append(String.valueOf(categoryId));\r\n                conditions.add(condition.toString());\r\n            }\r\n            if (variableTypeFilter == VariableTypeFilter.DERIVED) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\"is_derived_variable=TRUE\");\r\n                conditions.add(condition.toString());\r\n            } else if (variableTypeFilter == VariableTypeFilter.RAW) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\"is_derived_variable=FALSE\");\r\n                conditions.add(condition.toString());\r\n            }\r\n            query.append(\" WHERE deleted_at IS NULL\");\r\n            int numberOfConditions = conditions.size();\r\n            for (int i = 0; i < numberOfConditions; i++) {\r\n                query.append(\" AND \");\r\n                query.append(conditions.get(i));\r\n            }\r\n            query.append(\" ORDER BY year DESC;\");\r\n            statement = connection.createStatement();\r\n            resultSet = statement.executeQuery(query.toString());\r\n            ArrayList<VariableSummary> variableSummaries = new ArrayList<VariableSummary>();\r\n            while (resultSet.next() == true) {\r\n                VariableSummary variableSummary = new VariableSummary();\r\n                variableSummary.setIdentifier(resultSet.getInt(1));\r\n                variableSummary.setName(resultSet.getString(2));\r\n                String currentYear = resultSet.getString(3);\r\n                variableSummary.setYear(currentYear);\r\n                variableSummary.setLabel(resultSet.getString(4));\r\n                variableSummary.setDerived(resultSet.getBoolean(5));\r\n                variableSummaries.add(variableSummary);\r\n            }\r\n            return variableSummaries;\r\n        } catch (SQLException exception) {\r\n            exception.printStackTrace(System.out);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToFilterVariableSummaries\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_FILTER_SUMMARIES, errorMessage);\r\n            throw macawException;\r\n        } finally {\r\n            SQLUtilities.closeStatementsWithCatch(statement, resultSet);\r\n        }\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> filterSupportingDocuments(Connection connection, String documentTitleFilter, String documentCodeFilter) throws MacawException {\r\n        if ((documentTitleFilter.equals(\"\") == true) && (documentCodeFilter.equals(\"\") == true)) {\r\n            String errorMessage = MacawMessages.getMessage(\"supportingDocumentFilter.error\");\r\n            MacawException exception = new MacawException(MacawErrorType.NO_SUPPORTING_DOCUMENT_FILTER, errorMessage);\r\n            throw exception;\r\n        }\r\n        StringBuilder query = new StringBuilder();\r\n        query.append(\"SELECT identifier,\");\r\n        query.append(\"title,\");\r\n        query.append(\"document_code,\");\r\n        query.append(\"description,\");\r\n        query.append(\"file_name,\");\r\n        query.append(\"file_path \");\r\n        query.append(\"FROM supporting_documents \");\r\n        query.append(\"WHERE deleted_at IS NULL AND \");\r\n        ArrayList<String> conditions = new ArrayList<String>();\r\n        if (ValidationUtility.isBlank(documentTitleFilter) == false) {\r\n            StringBuilder condition = new StringBuilder();\r\n            condition.append(\"title LIKE '%\");\r\n            condition.append(documentTitleFilter);\r\n            condition.append(\"%'\");\r\n            conditions.add(condition.toString());\r\n        }\r\n        if (ValidationUtility.isBlank(documentCodeFilter) == false) {\r\n            StringBuilder condition = new StringBuilder();\r\n            condition.append(\"document_code LIKE '%\");\r\n            condition.append(documentCodeFilter);\r\n            condition.append(\"%'\");\r\n            conditions.add(condition.toString());\r\n        }\r\n        int numberOfConditions = conditions.size();\r\n        for (int i = 0; i < numberOfConditions; i++) {\r\n            if (i != 0) {\r\n                query.append(\" AND \");\r\n            }\r\n            query.append(conditions.get(i));\r\n        }\r\n        query.append(\" ORDER BY title ASC;\");\r\n        ResultSet resultSet = null;\r\n        Statement statement = null;\r\n        try {\r\n            statement = connection.createStatement();\r\n            resultSet = statement.executeQuery(query.toString());\r\n            ArrayList<SupportingDocument> searchResults = new ArrayList<SupportingDocument>();\r\n            while (resultSet.next() == true) {\r\n                SupportingDocument supportingDocument = new SupportingDocument();\r\n                supportingDocument.setIdentifier(resultSet.getInt(1));\r\n                supportingDocument.setTitle(resultSet.getString(2));\r\n                supportingDocument.setDocumentCode(resultSet.getString(3));\r\n                supportingDocument.setDescription(resultSet.getString(4));\r\n                supportingDocument.setFileName(resultSet.getString(5));\r\n                supportingDocument.setFilePath(resultSet.getString(6));\r\n                searchResults.add(supportingDocument);\r\n            }\r\n            return searchResults;\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToFilterSupportingDocuments\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_FILTER_SUPPORTING_DOCUMENTS, errorMessage);\r\n            throw macawException;\r\n        } finally {\r\n            SQLUtilities.closeStatementsWithCatch(statement, resultSet);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> filterOntologyTerms(Connection connection, String term, String description) throws MacawException {\r\n        if ((term.equals(\"\") == true) && (description.equals(\"\") == true)) {\r\n            String errorMessage = MacawMessages.getMessage(\"ontologyTermFilter.error\");\r\n            MacawException exception = new MacawException(MacawErrorType.NO_ONTOLOGY_TERM_FILTER, errorMessage);\r\n            throw exception;\r\n        }\r\n        StringBuilder query = new StringBuilder();\r\n        query.append(\"SELECT identifier,\");\r\n        query.append(\"term,\");\r\n        query.append(\"ontology_name,\");\r\n        query.append(\"description,\");\r\n        query.append(\"name_space\");\r\n        query.append(\" FROM ontology_terms \");\r\n        query.append(\"WHERE deleted_at IS NULL AND \");\r\n        ArrayList<String> conditions = new ArrayList<String>();\r\n        if (ValidationUtility.isBlank(term) == false) {\r\n            StringBuilder condition = new StringBuilder();\r\n            condition.append(\"term LIKE '%\");\r\n            condition.append(term);\r\n            condition.append(\"%'\");\r\n            conditions.add(condition.toString());\r\n        }\r\n        if (ValidationUtility.isBlank(description) == false) {\r\n            StringBuilder condition = new StringBuilder();\r\n            condition.append(\"description LIKE '%\");\r\n            condition.append(description);\r\n            condition.append(\"%'\");\r\n            conditions.add(condition.toString());\r\n        }\r\n        int numberOfConditions = conditions.size();\r\n        for (int i = 0; i < numberOfConditions; i++) {\r\n            if (i != 0) {\r\n                query.append(\" AND \");\r\n            }\r\n            query.append(conditions.get(i));\r\n        }\r\n        query.append(\" ORDER BY term ASC;\");\r\n        ResultSet resultSet = null;\r\n        Statement statement = null;\r\n        try {\r\n            statement = connection.createStatement();\r\n            resultSet = statement.executeQuery(query.toString());\r\n            ArrayList<OntologyTerm> searchResults = new ArrayList<OntologyTerm>();\r\n            while (resultSet.next() == true) {\r\n                OntologyTerm ontologyTerm = new OntologyTerm();\r\n                ontologyTerm.setIdentifier(resultSet.getInt(1));\r\n                ontologyTerm.setTerm(resultSet.getString(2));\r\n                ontologyTerm.setOntologyName(resultSet.getString(3));\r\n                ontologyTerm.setDescription(resultSet.getString(4));\r\n                ontologyTerm.setNameSpace(resultSet.getString(5));\r\n                searchResults.add(ontologyTerm);\r\n            }\r\n            return searchResults;\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToFilterOntologyTerms\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_FILTER_ONTOLOGY_TERMS, errorMessage);\r\n            throw macawException;\r\n        } finally {\r\n            SQLUtilities.closeStatementsWithCatch(statement, resultSet);\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/production/SQLFilterQueriesTest1.java",
		"test_prompt": "// SQLFilterQueriesTest1.java\npackage macaw.persistenceLayer.production;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport java.sql.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SQLFilterQueries}.\n* It contains ten unit test cases for the {@link SQLFilterQueries#filterSupportingDocuments(Connection, String, String)} method.\n*/\nclass SQLFilterQueriesTest1 {"
	},
	{
		"original_code": "// SQLFilterQueries.java\npackage macaw.persistenceLayer.production;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport macaw.util.ValidationUtility;\r\nimport java.util.ArrayList;\r\nimport java.sql.*;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * (c) 2009 Medical Research Council of the United Kingdom.\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class SQLFilterQueries {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private Log log;\r\n\r\n    private SQLListChoiceManager listChoiceManager;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public SQLFilterQueries(Log log, SQLListChoiceManager listChoiceManager) {\r\n        this.log = log;\r\n        this.listChoiceManager = listChoiceManager;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    /**\r\n     * we don't need to create a derivedVariables table because there are no\r\n     * concepts beyond the ones in Variables we need to retain.  The exception is\r\n     * the list of source variables for each derived variable but that is handled in\r\n     * a separate table.\r\n     * @param connection\r\n     * @throws SQLException\r\n     */\r\n    //now focusing on methods demanded by the MacawDatabase API\r\n    public ArrayList<VariableSummary> filterVariableSummaries(Connection connection, String searchText, String year, String categoryName, VariableTypeFilter variableTypeFilter) throws MacawException {\r\n        ResultSet resultSet = null;\r\n        Statement statement = null;\r\n        try {\r\n            StringBuilder query = new StringBuilder();\r\n            query.append(\"SELECT identifier,\");\r\n            query.append(\"name,\");\r\n            query.append(\"year,\");\r\n            query.append(\"label,\");\r\n            query.append(\"is_derived_variable \");\r\n            query.append(\"FROM variables\");\r\n            ArrayList<String> conditions = new ArrayList<String>();\r\n            if (ValidationUtility.isBlank(searchText) == false) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\" (label LIKE '%\");\r\n                condition.append(searchText);\r\n                condition.append(\"%' OR name LIKE '%\");\r\n                condition.append(searchText);\r\n                condition.append(\"%')\");\r\n                conditions.add(condition.toString());\r\n            }\r\n            if ((ValidationUtility.isBlank(year) == false) && (year.equals(\"All\") == false)) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\"year='\");\r\n                condition.append(year);\r\n                condition.append(\"'\");\r\n                conditions.add(condition.toString());\r\n            }\r\n            if ((ValidationUtility.isBlank(categoryName) == false) && (categoryName.equals(\"All\") == false)) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\"category_id=\");\r\n                Category category = new Category(categoryName);\r\n                int categoryId = listChoiceManager.getCategoryIdentifier(connection, null, category);\r\n                condition.append(String.valueOf(categoryId));\r\n                conditions.add(condition.toString());\r\n            }\r\n            if (variableTypeFilter == VariableTypeFilter.DERIVED) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\"is_derived_variable=TRUE\");\r\n                conditions.add(condition.toString());\r\n            } else if (variableTypeFilter == VariableTypeFilter.RAW) {\r\n                StringBuilder condition = new StringBuilder();\r\n                condition.append(\"is_derived_variable=FALSE\");\r\n                conditions.add(condition.toString());\r\n            }\r\n            query.append(\" WHERE deleted_at IS NULL\");\r\n            int numberOfConditions = conditions.size();\r\n            for (int i = 0; i < numberOfConditions; i++) {\r\n                query.append(\" AND \");\r\n                query.append(conditions.get(i));\r\n            }\r\n            query.append(\" ORDER BY year DESC;\");\r\n            statement = connection.createStatement();\r\n            resultSet = statement.executeQuery(query.toString());\r\n            ArrayList<VariableSummary> variableSummaries = new ArrayList<VariableSummary>();\r\n            while (resultSet.next() == true) {\r\n                VariableSummary variableSummary = new VariableSummary();\r\n                variableSummary.setIdentifier(resultSet.getInt(1));\r\n                variableSummary.setName(resultSet.getString(2));\r\n                String currentYear = resultSet.getString(3);\r\n                variableSummary.setYear(currentYear);\r\n                variableSummary.setLabel(resultSet.getString(4));\r\n                variableSummary.setDerived(resultSet.getBoolean(5));\r\n                variableSummaries.add(variableSummary);\r\n            }\r\n            return variableSummaries;\r\n        } catch (SQLException exception) {\r\n            exception.printStackTrace(System.out);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToFilterVariableSummaries\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_FILTER_SUMMARIES, errorMessage);\r\n            throw macawException;\r\n        } finally {\r\n            SQLUtilities.closeStatementsWithCatch(statement, resultSet);\r\n        }\r\n    }\r\n\r\n    public ArrayList<SupportingDocument> filterSupportingDocuments(Connection connection, String documentTitleFilter, String documentCodeFilter) throws MacawException {\r\n        if ((documentTitleFilter.equals(\"\") == true) && (documentCodeFilter.equals(\"\") == true)) {\r\n            String errorMessage = MacawMessages.getMessage(\"supportingDocumentFilter.error\");\r\n            MacawException exception = new MacawException(MacawErrorType.NO_SUPPORTING_DOCUMENT_FILTER, errorMessage);\r\n            throw exception;\r\n        }\r\n        StringBuilder query = new StringBuilder();\r\n        query.append(\"SELECT identifier,\");\r\n        query.append(\"title,\");\r\n        query.append(\"document_code,\");\r\n        query.append(\"description,\");\r\n        query.append(\"file_name,\");\r\n        query.append(\"file_path \");\r\n        query.append(\"FROM supporting_documents \");\r\n        query.append(\"WHERE deleted_at IS NULL AND \");\r\n        ArrayList<String> conditions = new ArrayList<String>();\r\n        if (ValidationUtility.isBlank(documentTitleFilter) == false) {\r\n            StringBuilder condition = new StringBuilder();\r\n            condition.append(\"title LIKE '%\");\r\n            condition.append(documentTitleFilter);\r\n            condition.append(\"%'\");\r\n            conditions.add(condition.toString());\r\n        }\r\n        if (ValidationUtility.isBlank(documentCodeFilter) == false) {\r\n            StringBuilder condition = new StringBuilder();\r\n            condition.append(\"document_code LIKE '%\");\r\n            condition.append(documentCodeFilter);\r\n            condition.append(\"%'\");\r\n            conditions.add(condition.toString());\r\n        }\r\n        int numberOfConditions = conditions.size();\r\n        for (int i = 0; i < numberOfConditions; i++) {\r\n            if (i != 0) {\r\n                query.append(\" AND \");\r\n            }\r\n            query.append(conditions.get(i));\r\n        }\r\n        query.append(\" ORDER BY title ASC;\");\r\n        ResultSet resultSet = null;\r\n        Statement statement = null;\r\n        try {\r\n            statement = connection.createStatement();\r\n            resultSet = statement.executeQuery(query.toString());\r\n            ArrayList<SupportingDocument> searchResults = new ArrayList<SupportingDocument>();\r\n            while (resultSet.next() == true) {\r\n                SupportingDocument supportingDocument = new SupportingDocument();\r\n                supportingDocument.setIdentifier(resultSet.getInt(1));\r\n                supportingDocument.setTitle(resultSet.getString(2));\r\n                supportingDocument.setDocumentCode(resultSet.getString(3));\r\n                supportingDocument.setDescription(resultSet.getString(4));\r\n                supportingDocument.setFileName(resultSet.getString(5));\r\n                supportingDocument.setFilePath(resultSet.getString(6));\r\n                searchResults.add(supportingDocument);\r\n            }\r\n            return searchResults;\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToFilterSupportingDocuments\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_FILTER_SUPPORTING_DOCUMENTS, errorMessage);\r\n            throw macawException;\r\n        } finally {\r\n            SQLUtilities.closeStatementsWithCatch(statement, resultSet);\r\n        }\r\n    }\r\n\r\n    public ArrayList<OntologyTerm> filterOntologyTerms(Connection connection, String term, String description) throws MacawException {\r\n        if ((term.equals(\"\") == true) && (description.equals(\"\") == true)) {\r\n            String errorMessage = MacawMessages.getMessage(\"ontologyTermFilter.error\");\r\n            MacawException exception = new MacawException(MacawErrorType.NO_ONTOLOGY_TERM_FILTER, errorMessage);\r\n            throw exception;\r\n        }\r\n        StringBuilder query = new StringBuilder();\r\n        query.append(\"SELECT identifier,\");\r\n        query.append(\"term,\");\r\n        query.append(\"ontology_name,\");\r\n        query.append(\"description,\");\r\n        query.append(\"name_space\");\r\n        query.append(\" FROM ontology_terms \");\r\n        query.append(\"WHERE deleted_at IS NULL AND \");\r\n        ArrayList<String> conditions = new ArrayList<String>();\r\n        if (ValidationUtility.isBlank(term) == false) {\r\n            StringBuilder condition = new StringBuilder();\r\n            condition.append(\"term LIKE '%\");\r\n            condition.append(term);\r\n            condition.append(\"%'\");\r\n            conditions.add(condition.toString());\r\n        }\r\n        if (ValidationUtility.isBlank(description) == false) {\r\n            StringBuilder condition = new StringBuilder();\r\n            condition.append(\"description LIKE '%\");\r\n            condition.append(description);\r\n            condition.append(\"%'\");\r\n            conditions.add(condition.toString());\r\n        }\r\n        int numberOfConditions = conditions.size();\r\n        for (int i = 0; i < numberOfConditions; i++) {\r\n            if (i != 0) {\r\n                query.append(\" AND \");\r\n            }\r\n            query.append(conditions.get(i));\r\n        }\r\n        query.append(\" ORDER BY term ASC;\");\r\n        ResultSet resultSet = null;\r\n        Statement statement = null;\r\n        try {\r\n            statement = connection.createStatement();\r\n            resultSet = statement.executeQuery(query.toString());\r\n            ArrayList<OntologyTerm> searchResults = new ArrayList<OntologyTerm>();\r\n            while (resultSet.next() == true) {\r\n                OntologyTerm ontologyTerm = new OntologyTerm();\r\n                ontologyTerm.setIdentifier(resultSet.getInt(1));\r\n                ontologyTerm.setTerm(resultSet.getString(2));\r\n                ontologyTerm.setOntologyName(resultSet.getString(3));\r\n                ontologyTerm.setDescription(resultSet.getString(4));\r\n                ontologyTerm.setNameSpace(resultSet.getString(5));\r\n                searchResults.add(ontologyTerm);\r\n            }\r\n            return searchResults;\r\n        } catch (SQLException exception) {\r\n            log.logException(exception);\r\n            String errorMessage = MacawMessages.getMessage(\"sql.error.unableToFilterOntologyTerms\");\r\n            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_FILTER_ONTOLOGY_TERMS, errorMessage);\r\n            throw macawException;\r\n        } finally {\r\n            SQLUtilities.closeStatementsWithCatch(statement, resultSet);\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/production/SQLFilterQueriesTest2.java",
		"test_prompt": "// SQLFilterQueriesTest2.java\npackage macaw.persistenceLayer.production;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport macaw.util.ValidationUtility;\nimport java.util.ArrayList;\nimport java.sql.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SQLFilterQueries}.\n* It contains ten unit test cases for the {@link SQLFilterQueries#filterOntologyTerms(Connection, String, String)} method.\n*/\nclass SQLFilterQueriesTest2 {"
	},
	{
		"original_code": "// SourceVariableSelectionDialog.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.Displayable;\r\nimport macaw.util.DisplayableList;\r\nimport macaw.util.DisplayableListItemSelector;\r\nimport macaw.util.DisplayableListItemDeleter;\r\nimport macaw.businessLayer.*;\r\nimport java.awt.GridBagConstraints;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport javax.swing.*;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class SourceVariableSelectionDialog implements ActionListener, DisplayableListItemSelector, DisplayableListItemDeleter {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private SessionProperties sessionProperties;\r\n\r\n    private MacawCurationAPI database;\r\n\r\n    private User currentUser;\r\n\r\n    private SourceVariablesPanel sourceVariablesPanel;\r\n\r\n    private UserInterfaceFactory userInterfaceFactory;\r\n\r\n    private boolean isEditingCancelled;\r\n\r\n    private ArrayList<Displayable> selectedItems;\r\n\r\n    private JDialog dialog;\r\n\r\n    private VariableSearchPanel variableSearchPanel;\r\n\r\n    private String listOwnerName;\r\n\r\n    private DisplayableList parentList;\r\n\r\n    private JButton addSourceVariables;\r\n\r\n    private JButton cancel;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public SourceVariableSelectionDialog(SessionProperties sessionProperties, SourceVariablesPanel sourceVariablesPanel) {\r\n        this.sessionProperties = sessionProperties;\r\n        database = (MacawCurationAPI) sessionProperties.getProperty(SessionProperties.DATABASE);\r\n        currentUser = (User) sessionProperties.getProperty(SessionProperties.CURRENT_USER);\r\n        this.sourceVariablesPanel = sourceVariablesPanel;\r\n        userInterfaceFactory = sessionProperties.getUserInterfaceFactory();\r\n        isEditingCancelled = false;\r\n        selectedItems = new ArrayList<Displayable>();\r\n        String title = MacawMessages.getMessage(\"sourceVariableSelectionDialog.title\");\r\n        dialog = userInterfaceFactory.createDialog();\r\n        dialog.setTitle(title);\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 100;\r\n        panelGC.weighty = 100;\r\n        variableSearchPanel = new VariableSearchPanel(sessionProperties);\r\n        panel.add(variableSearchPanel.getPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.anchor = GridBagConstraints.SOUTHEAST;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panel.add(createButtonPanel(), panelGC);\r\n        dialog.getContentPane().add(panel);\r\n        dialog.setModal(true);\r\n        dialog.setSize(500, 500);\r\n    }\r\n\r\n    private JPanel createButtonPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        String addSourceVariablesText = MacawMessages.getMessage(\"sourceVariableSelectionDialog.addSourceVariables\");\r\n        addSourceVariables = userInterfaceFactory.createButton(addSourceVariablesText);\r\n        addSourceVariables.addActionListener(this);\r\n        panel.add(addSourceVariables, panelGC);\r\n        panelGC.gridx++;\r\n        String cancelText = MacawMessages.getMessage(\"general.buttons.cancel\");\r\n        cancel = userInterfaceFactory.createButton(cancelText);\r\n        cancel.addActionListener(this);\r\n        panel.add(cancel, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void show() {\r\n        dialog.setVisible(true);\r\n    }\r\n\r\n    public void addSourceVariables() {\r\n        try {\r\n            DerivedVariable derivedVariable = sourceVariablesPanel.getData();\r\n            ArrayList<Variable> sourceVariablesToAdd = variableSearchPanel.getSelectedVariables();\r\n            database.associateSourceVariables(currentUser, derivedVariable, sourceVariablesToAdd);\r\n            dialog.setVisible(false);\r\n            updateList();\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    public void cancel() {\r\n        isEditingCancelled = true;\r\n        dialog.setVisible(false);\r\n    }\r\n\r\n    private void updateList() throws MacawException {\r\n        DerivedVariable derivedVariable = sourceVariablesPanel.getData();\r\n        ArrayList<Variable> sourceVariables = database.getSourceVariables(currentUser, derivedVariable);\r\n        ArrayList<Displayable> displayableItems = new ArrayList<Displayable>();\r\n        for (Variable currentSourceVariables : sourceVariables) {\r\n            displayableItems.add((Displayable) currentSourceVariables);\r\n        }\r\n        parentList.setDisplayItems(displayableItems);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Action Listener\r\n    public void actionPerformed(ActionEvent event) {\r\n        Object button = event.getSource();\r\n        if (button == addSourceVariables) {\r\n            addSourceVariables();\r\n        } else if (button == cancel) {\r\n            cancel();\r\n        }\r\n    }\r\n\r\n    //Interface: DisplayableListItemSelector\r\n    public void selectListItems(String listOwnerName, DisplayableList parentList) throws MacawException {\r\n        this.listOwnerName = listOwnerName;\r\n        this.parentList = parentList;\r\n        show();\r\n        if (isEditingCancelled() == false) {\r\n            ArrayList<Variable> sourceVariablesToAdd = new ArrayList<Variable>();\r\n            for (Displayable currentItem : selectedItems) {\r\n                sourceVariablesToAdd.add((Variable) currentItem);\r\n            }\r\n            DerivedVariable derivedVariable = sourceVariablesPanel.getData();\r\n            database.associateSourceVariables(currentUser, derivedVariable, sourceVariablesToAdd);\r\n            updateList();\r\n        }\r\n    }\r\n\r\n    public void deleteListItems(String listOwnerName, DisplayableList parentList) throws MacawException {\r\n        this.parentList = parentList;\r\n        ArrayList<Displayable> listItemsToRemove = parentList.getSelectedItems();\r\n        ArrayList<Variable> sourceVariablesToRemove = new ArrayList<Variable>();\r\n        for (Displayable currentItemToRemove : listItemsToRemove) {\r\n            sourceVariablesToRemove.add((Variable) currentItemToRemove);\r\n        }\r\n        DerivedVariable derivedVariable = sourceVariablesPanel.getData();\r\n        database.disassociateSourceVariables(currentUser, derivedVariable, sourceVariablesToRemove);\r\n        updateList();\r\n    }\r\n\r\n    public boolean isEditingCancelled() {\r\n        return isEditingCancelled;\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/SourceVariableSelectionDialogTest.java",
		"test_prompt": "// SourceVariableSelectionDialogTest.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.util.Displayable;\nimport macaw.util.DisplayableList;\nimport macaw.util.DisplayableListItemSelector;\nimport macaw.util.DisplayableListItemDeleter;\nimport macaw.businessLayer.*;\nimport java.awt.GridBagConstraints;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.*;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SourceVariableSelectionDialog}.\n* It contains ten unit test cases for the {@link SourceVariableSelectionDialog#isEditingCancelled()} method.\n*/\nclass SourceVariableSelectionDialogTest {"
	},
	{
		"original_code": "// VariableLabelValueEditor.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.util.OKClosePanel;\r\nimport macaw.businessLayer.*;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.ActionEvent;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class VariableLabelValueEditor implements ActionListener {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private SessionProperties sessionProperties;\r\n\r\n    private User currentUser;\r\n\r\n    private UserInterfaceFactory userInterfaceFactory;\r\n\r\n    private MacawCurationAPI database;\r\n\r\n    private JDialog dialog;\r\n\r\n    private VariableLabelTable variableLabelTable;\r\n\r\n    private JButton addLabelValue;\r\n\r\n    private JButton deleteLabelValue;\r\n\r\n    private OKClosePanel okCancelPanel;\r\n\r\n    private JButton save;\r\n\r\n    private JButton cancel;\r\n\r\n    private JButton close;\r\n\r\n    private Variable variable;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public VariableLabelValueEditor(SessionProperties sessionProperties, boolean allowWriteAccess) {\r\n        this.sessionProperties = sessionProperties;\r\n        database = (MacawCurationAPI) sessionProperties.getProperty(SessionProperties.DATABASE);\r\n        userInterfaceFactory = sessionProperties.getUserInterfaceFactory();\r\n        currentUser = (User) sessionProperties.getProperty(SessionProperties.CURRENT_USER);\r\n        dialog = userInterfaceFactory.createDialog();\r\n        if (allowWriteAccess == true) {\r\n            String title = MacawMessages.getMessage(\"variableLabelValueEditor.title\");\r\n            dialog.setTitle(title);\r\n        } else {\r\n            String title = MacawMessages.getMessage(\"variableLabelValueEditor.title.readOnly\");\r\n            dialog.setTitle(title);\r\n        }\r\n        dialog.setModal(true);\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 100;\r\n        panelGC.weighty = 100;\r\n        variableLabelTable = new VariableLabelTable(database, allowWriteAccess);\r\n        JScrollPane tableScrollPane = userInterfaceFactory.createScrollPane(variableLabelTable);\r\n        panel.add(tableScrollPane, panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.anchor = GridBagConstraints.SOUTHEAST;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        String addLabelValueText = MacawMessages.getMessage(\"general.buttons.add\");\r\n        addLabelValue = userInterfaceFactory.createButton(addLabelValueText);\r\n        addLabelValue.setEnabled(allowWriteAccess);\r\n        String deleteLabelValueText = MacawMessages.getMessage(\"general.buttons.delete\");\r\n        deleteLabelValue = userInterfaceFactory.createButton(deleteLabelValueText);\r\n        deleteLabelValue.setEnabled(allowWriteAccess);\r\n        okCancelPanel = new OKClosePanel(userInterfaceFactory, this);\r\n        okCancelPanel.addButton(addLabelValue);\r\n        okCancelPanel.addButton(deleteLabelValue);\r\n        save = okCancelPanel.getSaveButton();\r\n        close = okCancelPanel.getCloseButton();\r\n        okCancelPanel.setAllowWriteAccess(allowWriteAccess);\r\n        panel.add(okCancelPanel.getPanel(), panelGC);\r\n        dialog.getContentPane().add(panel);\r\n        dialog.setSize(400, 300);\r\n        dialog.setModal(true);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void setData(Variable variable) throws MacawException {\r\n        this.variable = variable;\r\n        variableLabelTable.setData(currentUser, variable);\r\n    }\r\n\r\n    public void show() {\r\n        dialog.setVisible(true);\r\n    }\r\n\r\n    public boolean isCancelled() {\r\n        return isCancelled();\r\n    }\r\n\r\n    private void addLabelValue() {\r\n        variableLabelTable.addValueLabel();\r\n    }\r\n\r\n    private void deleteLabelValue() {\r\n        variableLabelTable.deleteValueLabel();\r\n    }\r\n\r\n    private void save() {\r\n        try {\r\n            variableLabelTable.save();\r\n            dialog.setVisible(false);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    private void close() {\r\n        variableLabelTable.cancel();\r\n        dialog.setVisible(false);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Action Listener\r\n    public void actionPerformed(ActionEvent event) {\r\n        Object button = event.getSource();\r\n        if (button == addLabelValue) {\r\n            addLabelValue();\r\n        } else if (button == deleteLabelValue) {\r\n            deleteLabelValue();\r\n        } else if (button == save) {\r\n            save();\r\n        } else if (button == close) {\r\n            close();\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/VariableLabelValueEditorTest.java",
		"test_prompt": "// VariableLabelValueEditorTest.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.util.OKClosePanel;\nimport macaw.businessLayer.*;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VariableLabelValueEditor}.\n* It contains ten unit test cases for the {@link VariableLabelValueEditor#isCancelled()} method.\n*/\nclass VariableLabelValueEditorTest {"
	},
	{
		"original_code": "// CleaningStatePanel.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.businessLayer.User;\r\nimport macaw.businessLayer.Variable;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.ActionEvent;\r\nimport java.util.ArrayList;\r\nimport javax.swing.border.LineBorder;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class CleaningStatePanel implements ActionListener {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private boolean allowWriteAccess;\r\n\r\n    private JPanel panel;\r\n\r\n    private UserInterfaceFactory userInterfaceFactory;\r\n\r\n    private String currentUserID;\r\n\r\n    private ArrayList<MacawChangeEvent> changeEvents;\r\n\r\n    private JCheckBox isCleaned;\r\n\r\n    private JComboBox cleaningStatusChoices;\r\n\r\n    private JTextArea cleaningDescriptionField;\r\n\r\n    private boolean oldIsCleaned;\r\n\r\n    private String oldCleaningStatusChoice;\r\n\r\n    private String oldCleaningDescription;\r\n\r\n    private Variable variable;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public CleaningStatePanel(SessionProperties sessionProperties, String[] cleaningStates, boolean allowWriteAccess) {\r\n        this.allowWriteAccess = allowWriteAccess;\r\n        this.userInterfaceFactory = sessionProperties.getUserInterfaceFactory();\r\n        User currentUser = (User) sessionProperties.getProperty(SessionProperties.CURRENT_USER);\r\n        currentUserID = currentUser.getUserID();\r\n        changeEvents = new ArrayList<MacawChangeEvent>();\r\n        String isCleanedText = MacawMessages.getMessage(\"variable.isCleaned.label\");\r\n        isCleaned = userInterfaceFactory.createCheckBox(isCleanedText);\r\n        isCleaned.setEnabled(allowWriteAccess);\r\n        panel = createCleaningDescriptionPanel(cleaningStates);\r\n        panel.setBorder(LineBorder.createGrayLineBorder());\r\n        isCleaned.setSelected(false);\r\n        if (allowWriteAccess == true) {\r\n            isCleaned.addActionListener(this);\r\n        }\r\n        setEnabled(false);\r\n    }\r\n\r\n    private JPanel createCleaningDescriptionPanel(String[] cleaningStates) {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 100;\r\n        panelGC.insets = new Insets(2, 20, 2, 20);\r\n        String cleaningStatusText = MacawMessages.getMessage(\"variable.cleaningStatus.label\");\r\n        JLabel cleaningStatusLabel = userInterfaceFactory.createLabel(cleaningStatusText);\r\n        panel.add(cleaningStatusLabel, panelGC);\r\n        panelGC.gridx++;\r\n        cleaningStatusChoices = userInterfaceFactory.createComboBox(cleaningStates);\r\n        cleaningStatusChoices.setEnabled(allowWriteAccess);\r\n        panel.add(cleaningStatusChoices, panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.gridx = 0;\r\n        String cleaningDescriptionText = MacawMessages.getMessage(\"variable.cleaningDescription.label\");\r\n        JLabel cleaningDescriptionLabel = userInterfaceFactory.createLabel(cleaningDescriptionText);\r\n        panel.add(cleaningDescriptionLabel, panelGC);\r\n        panelGC.gridx++;\r\n        cleaningDescriptionField = userInterfaceFactory.createTextArea(3, 30);\r\n        cleaningDescriptionField.setEditable(allowWriteAccess);\r\n        JScrollPane scrollPane = userInterfaceFactory.createScrollPane(cleaningDescriptionField);\r\n        panel.add(scrollPane, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public boolean isCleaned() {\r\n        return isCleaned.isSelected();\r\n    }\r\n\r\n    public JCheckBox getCheckBox() {\r\n        return isCleaned;\r\n    }\r\n\r\n    public JPanel getPanel() {\r\n        return panel;\r\n    }\r\n\r\n    public void initialise(Variable variable) {\r\n        this.variable = variable;\r\n        setEnabled(variable.isCleaned());\r\n        oldIsCleaned = variable.isCleaned();\r\n        oldCleaningStatusChoice = variable.getCleaningStatus();\r\n        if (oldCleaningStatusChoice.equals(\"\") == true) {\r\n            oldCleaningStatusChoice = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        }\r\n        oldCleaningDescription = variable.getCleaningDescription();\r\n    }\r\n\r\n    public String getCleaningStatus() {\r\n        return oldCleaningStatusChoice;\r\n    }\r\n\r\n    public String getCleaningDescription() {\r\n        return oldCleaningDescription;\r\n    }\r\n\r\n    public void save() {\r\n        oldCleaningStatusChoice = (String) cleaningStatusChoices.getSelectedItem();\r\n        oldCleaningDescription = cleaningDescriptionField.getText().trim();\r\n        changeEvents.clear();\r\n    }\r\n\r\n    public void restore() {\r\n        setEnabled(oldIsCleaned);\r\n        if (oldIsCleaned == true) {\r\n            if (allowWriteAccess == true) {\r\n                isCleaned.removeActionListener(this);\r\n            }\r\n            isCleaned.setSelected(true);\r\n            if (allowWriteAccess == true) {\r\n                isCleaned.addActionListener(this);\r\n            }\r\n            cleaningStatusChoices.setSelectedItem(oldCleaningStatusChoice);\r\n            cleaningDescriptionField.setText(oldCleaningDescription);\r\n        }\r\n        changeEvents.clear();\r\n    }\r\n\r\n    public void clearChanges() {\r\n        changeEvents.clear();\r\n    }\r\n\r\n    public ArrayList<MacawChangeEvent> getChangeEvents() {\r\n        if (isCleaned.isSelected() != oldIsCleaned) {\r\n            if (isCleaned.isSelected() == false) {\r\n                //user has deselected it; we only care to report\r\n                //change that record is no longer assessed for cleaning.\r\n                //cleaning description and cleaning status should be\r\n                //blank and irrelevant\r\n                String changedToNotCleaned = MacawMessages.getMessage(\"variable.isCleaned.saveChanges.changedToNotClean\", variable.getDisplayName());\r\n                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changedToNotCleaned, currentUserID);\r\n                changeEvent.setVariableOwnerID(variable.getIdentifier());\r\n                changeEvent.setChangedObjectIdentifier(variable.getIdentifier());\r\n                changeEvents.add(changeEvent);\r\n            } else {\r\n                String newCleaningStatusChoice = (String) cleaningStatusChoices.getSelectedItem();\r\n                if (oldCleaningStatusChoice.equals(newCleaningStatusChoice) == false) {\r\n                }\r\n                String newCleaningDescription = cleaningDescriptionField.getText().trim();\r\n                if (oldCleaningDescription.equals(newCleaningDescription) == false) {\r\n                }\r\n            }\r\n        }\r\n        return changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: Action Listener\r\n    public void actionPerformed(ActionEvent event) {\r\n        //this can only be the check box\r\n        setEnabled(isCleaned.isSelected());\r\n    }\r\n\r\n    private void setEnabled(boolean isEnabled) {\r\n        if (isEnabled == true) {\r\n            cleaningStatusChoices.setEnabled(true);\r\n            cleaningDescriptionField.setEnabled(true);\r\n        } else {\r\n            cleaningStatusChoices.setEnabled(false);\r\n            String unknownStatus = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n            cleaningStatusChoices.setSelectedItem(unknownStatus);\r\n            cleaningDescriptionField.setText(\"\");\r\n            cleaningDescriptionField.setEnabled(false);\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/CleaningStatePanelTest.java",
		"test_prompt": "// CleaningStatePanelTest.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.businessLayer.User;\nimport macaw.businessLayer.Variable;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport java.util.ArrayList;\nimport javax.swing.border.LineBorder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CleaningStatePanel}.\n* It contains ten unit test cases for the {@link CleaningStatePanel#isCleaned()} method.\n*/\nclass CleaningStatePanelTest {"
	},
	{
		"original_code": "// ChangeHistoryTableModel.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport javax.swing.table.AbstractTableModel;\r\nimport java.util.ArrayList;\r\nimport java.text.SimpleDateFormat;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class ChangeHistoryTableModel extends AbstractTableModel {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    private static final int DATE_COLUMN = 0;\r\n\r\n    private static final int CHANGE_MESSAGE = 1;\r\n\r\n    private static final int USER_ID = 2;\r\n\r\n    private SimpleDateFormat simpleDateFormat;\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private ArrayList<MacawChangeEvent> changeEvents;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public ChangeHistoryTableModel() {\r\n        changeEvents = new ArrayList<MacawChangeEvent>();\r\n        simpleDateFormat = new SimpleDateFormat(\"dd-MMM-yyyy hh:mm:ss\");\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void setChangeEvents(ArrayList<MacawChangeEvent> changeEvents) {\r\n        this.changeEvents = changeEvents;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public boolean isCellEditable(int row, int column) {\r\n        return false;\r\n    }\r\n\r\n    public String getColumnName(int column) {\r\n        String columnName = null;\r\n        if (column == DATE_COLUMN) {\r\n            columnName = MacawMessages.getMessage(\"changeHistory.date\");\r\n        } else if (column == CHANGE_MESSAGE) {\r\n            columnName = MacawMessages.getMessage(\"changeHistory.changeMessage\");\r\n        } else if (column == USER_ID) {\r\n            columnName = MacawMessages.getMessage(\"changeHistory.userID\");\r\n        }\r\n        return columnName;\r\n    }\r\n\r\n    public int getColumnCount() {\r\n        return 3;\r\n    }\r\n\r\n    public int getRowCount() {\r\n        return changeEvents.size();\r\n    }\r\n\r\n    public Object getValueAt(int row, int column) {\r\n        MacawChangeEvent changeEvent = changeEvents.get(row);\r\n        if (column == DATE_COLUMN) {\r\n            java.util.Date date = changeEvent.getDate();\r\n            return simpleDateFormat.format(date);\r\n        } else if (column == CHANGE_MESSAGE) {\r\n            return changeEvent.getChangeMessage();\r\n        } else if (column == USER_ID) {\r\n            return changeEvent.getUserID();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/ChangeHistoryTableModelTest.java",
		"test_prompt": "// ChangeHistoryTableModelTest.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport javax.swing.table.AbstractTableModel;\nimport java.util.ArrayList;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeHistoryTableModel}.\n* It contains ten unit test cases for the {@link ChangeHistoryTableModel#isCellEditable(int, int)} method.\n*/\nclass ChangeHistoryTableModelTest {"
	},
	{
		"original_code": "// VariableLabelTableModel.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.businessLayer.MacawCurationAPI;\r\nimport macaw.businessLayer.User;\r\nimport macaw.businessLayer.ValueLabel;\r\nimport macaw.businessLayer.Variable;\r\nimport javax.swing.table.AbstractTableModel;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class VariableLabelTableModel extends AbstractTableModel {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    public static final int VALUE_COLUMN = 0;\r\n\r\n    public static final int LABEL_COLUMN = 1;\r\n\r\n    public static final int IS_MISSING_VALUE = 2;\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private User currentUser;\r\n\r\n    private MacawCurationAPI database;\r\n\r\n    private boolean allowWriteAccess;\r\n\r\n    private Variable currentVariable;\r\n\r\n    private ArrayList<ValueLabel> valueLabelsOriginalList;\r\n\r\n    private ArrayList<ValueLabel> valueLabelsCurrentList;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public VariableLabelTableModel(MacawCurationAPI database, boolean allowWriteAccess) {\r\n        this.database = database;\r\n        this.allowWriteAccess = allowWriteAccess;\r\n        valueLabelsOriginalList = new ArrayList<ValueLabel>();\r\n        valueLabelsCurrentList = new ArrayList<ValueLabel>();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void setData(User currentUser, Variable currentVariable) throws MacawException {\r\n        this.currentUser = currentUser;\r\n        this.currentVariable = currentVariable;\r\n        this.valueLabelsOriginalList = database.getValueLabels(currentUser, currentVariable);\r\n        valueLabelsCurrentList.clear();\r\n        for (ValueLabel valueLabel : valueLabelsOriginalList) {\r\n            ValueLabel cloneValueLabel = (ValueLabel) valueLabel.clone();\r\n            valueLabelsCurrentList.add(cloneValueLabel);\r\n        }\r\n        fireTableDataChanged();\r\n    }\r\n\r\n    public ArrayList<ValueLabel> getData() {\r\n        return valueLabelsOriginalList;\r\n    }\r\n\r\n    public void addValueLabel(int row, ValueLabel valueLabel) {\r\n        valueLabelsCurrentList.add(row, valueLabel);\r\n        fireTableRowsInserted(row, row);\r\n    }\r\n\r\n    public void deleteValueLabel(int row) {\r\n        valueLabelsCurrentList.remove(row);\r\n        fireTableRowsDeleted(row, row);\r\n    }\r\n\r\n    public void save() throws MacawException {\r\n        //perform validation\r\n        for (ValueLabel valueLabel : valueLabelsCurrentList) {\r\n            ValueLabel.validateFields(valueLabel);\r\n        }\r\n        //note that some of these methods may not be terribly efficient\r\n        //but we don't expect that a variable will have a lot of entries.\r\n        ArrayList<ValueLabel> addedValueLabelItems = new ArrayList<ValueLabel>();\r\n        ArrayList<ValueLabel> editedValueLabelItems = new ArrayList<ValueLabel>();\r\n        ArrayList<ValueLabel> deletedValueLabelItems = new ArrayList<ValueLabel>();\r\n        //identify items that have been added\r\n        for (ValueLabel copyValueLabel : valueLabelsCurrentList) {\r\n            if (copyValueLabel.isNewRecord() == true) {\r\n                addedValueLabelItems.add(copyValueLabel);\r\n            }\r\n        }\r\n        //Identify items that have been deleted or edited...\r\n        for (ValueLabel originalValueLabel : valueLabelsOriginalList) {\r\n            ValueLabel copyValueLabel = findCopy(originalValueLabel);\r\n            if (copyValueLabel == null) {\r\n                //this means we must have deleted it\r\n                deletedValueLabelItems.add(originalValueLabel);\r\n            } else {\r\n                //don't worry if nobody has touched the values,\r\n                //the api implementation is intended to make a quick\r\n                //return if there are no differences\r\n                editedValueLabelItems.add(copyValueLabel);\r\n            }\r\n        }\r\n        //make commits to database\r\n        database.addValueLabels(currentUser, currentVariable, addedValueLabelItems);\r\n        database.updateValueLabels(currentUser, currentVariable, editedValueLabelItems);\r\n        database.deleteValueLabels(currentUser, currentVariable, deletedValueLabelItems);\r\n    }\r\n\r\n    private ValueLabel findCopy(ValueLabel original) {\r\n        int originalIdentifier = original.getIdentifier();\r\n        for (ValueLabel currentCopy : valueLabelsCurrentList) {\r\n            if (currentCopy.getIdentifier() == originalIdentifier) {\r\n                return currentCopy;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //methods used to record provenance\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public Class getColumnClass(int column) {\r\n        if (column == VALUE_COLUMN) {\r\n            return String.class;\r\n        } else if (column == LABEL_COLUMN) {\r\n            return String.class;\r\n        } else {\r\n            //helps ensure that JTable will render this column with a\r\n            //check box\r\n            return Boolean.class;\r\n        }\r\n    }\r\n\r\n    public String getColumnName(int column) {\r\n        if (column == VALUE_COLUMN) {\r\n            String valueLabelText = MacawMessages.getMessage(\"variableLabelValueEditor.value\");\r\n            return valueLabelText;\r\n        } else if (column == LABEL_COLUMN) {\r\n            String labelLabelText = MacawMessages.getMessage(\"variableLabelValueEditor.label\");\r\n            return labelLabelText;\r\n        } else {\r\n            String isMissingValueLabelText = MacawMessages.getMessage(\"variableLabelValueEditor.isMissingValue\");\r\n            return isMissingValueLabelText;\r\n        }\r\n    }\r\n\r\n    public boolean isCellEditable(int row, int column) {\r\n        return allowWriteAccess;\r\n    }\r\n\r\n    public int getColumnCount() {\r\n        return 3;\r\n    }\r\n\r\n    public int getRowCount() {\r\n        return valueLabelsCurrentList.size();\r\n    }\r\n\r\n    public Object getValueAt(int row, int column) {\r\n        ValueLabel valueLabel = valueLabelsCurrentList.get(row);\r\n        if (column == VALUE_COLUMN) {\r\n            return valueLabel.getValue();\r\n        } else if (column == LABEL_COLUMN) {\r\n            return valueLabel.getLabel();\r\n        } else {\r\n            return valueLabel.isMissingValue();\r\n        }\r\n    }\r\n\r\n    public void setValueAt(Object value, int row, int column) {\r\n        //we only want to set a value and record the change if\r\n        //(1) the record has not just been created and\r\n        //(2) the old and new field values are different.\r\n        //this setValueAt(...) method is called whenever the user\r\n        //attempts to edit a table cell.  If they jump away or if\r\n        //the table programatically finishes an editing operation,\r\n        //then this method is triggered.  In some cases users may\r\n        //attempt to edit a cell then not do anything.\r\n        ValueLabel valueLabel = valueLabelsCurrentList.get(row);\r\n        if (valueLabel.isNewRecord() == true) {\r\n            if (column == IS_MISSING_VALUE) {\r\n                Boolean newFieldValue = (Boolean) value;\r\n                valueLabel.setMissingValue(newFieldValue);\r\n            } else {\r\n                String newFieldValue = (String) value;\r\n                if (column == VALUE_COLUMN) {\r\n                    valueLabel.setValue(newFieldValue);\r\n                } else {\r\n                    valueLabel.setLabel(newFieldValue);\r\n                }\r\n            }\r\n        } else {\r\n            if (column == IS_MISSING_VALUE) {\r\n                Boolean oldFieldValue = valueLabel.isMissingValue();\r\n                Boolean newFieldValue = (Boolean) value;\r\n                if (oldFieldValue.equals(newFieldValue) == false) {\r\n                    valueLabel.setMissingValue(newFieldValue);\r\n                }\r\n            } else {\r\n                String newFieldValue = (String) value;\r\n                if (column == VALUE_COLUMN) {\r\n                    String oldFieldValue = valueLabel.getValue();\r\n                    if (oldFieldValue.equals(newFieldValue) == false) {\r\n                        valueLabel.setValue(newFieldValue);\r\n                    }\r\n                } else {\r\n                    String oldFieldValue = valueLabel.getLabel();\r\n                    if (oldFieldValue.equals(newFieldValue) == false) {\r\n                        valueLabel.setLabel(newFieldValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/VariableLabelTableModelTest.java",
		"test_prompt": "// VariableLabelTableModelTest.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.businessLayer.MacawCurationAPI;\nimport macaw.businessLayer.User;\nimport macaw.businessLayer.ValueLabel;\nimport macaw.businessLayer.Variable;\nimport javax.swing.table.AbstractTableModel;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VariableLabelTableModel}.\n* It contains ten unit test cases for the {@link VariableLabelTableModel#isCellEditable(int, int)} method.\n*/\nclass VariableLabelTableModelTest {"
	},
	{
		"original_code": "// VariableSearchPanel.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.businessLayer.*;\r\nimport javax.swing.*;\r\nimport javax.swing.table.JTableHeader;\r\nimport javax.swing.event.*;\r\nimport java.awt.*;\r\nimport javax.swing.border.LineBorder;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class VariableSearchPanel implements ActionListener, ListSelectionListener, TableModelListener {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private SessionProperties sessionProperties;\r\n\r\n    private MacawCurationAPI database;\r\n\r\n    private User currentUser;\r\n\r\n    private UserInterfaceFactory userInterfaceFactory;\r\n\r\n    private JPanel panel;\r\n\r\n    private String allChoicesText;\r\n\r\n    private VariableSearchTableModel variableSearchTableModel;\r\n\r\n    private JTable searchTable;\r\n\r\n    private JTextField searchField;\r\n\r\n    private JRadioButton filterByRawVariables;\r\n\r\n    private JRadioButton filterByDerivedVariables;\r\n\r\n    private JRadioButton showRawAndDerivedVariables;\r\n\r\n    private JComboBox filterByCategory;\r\n\r\n    private JComboBox filterByYear;\r\n\r\n    private JButton applySearch;\r\n\r\n    private JButton reset;\r\n\r\n    private ChangeListener changeListener;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public VariableSearchPanel(SessionProperties sessionProperties) {\r\n        this.sessionProperties = sessionProperties;\r\n        userInterfaceFactory = sessionProperties.getUserInterfaceFactory();\r\n        database = (MacawCurationAPI) sessionProperties.getProperty(SessionProperties.DATABASE);\r\n        currentUser = (User) sessionProperties.getProperty(SessionProperties.CURRENT_USER);\r\n        allChoicesText = MacawMessages.getMessage(\"general.fieldValue.allChoices\");\r\n        panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        panelGC.insets = new Insets(2, 2, 2, 2);\r\n        JPanel filterCriteriaPanel = createFilterCriteriaPanel();\r\n        filterCriteriaPanel.setBorder(LineBorder.createGrayLineBorder());\r\n        panel.add(filterCriteriaPanel, panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 1.0;\r\n        panelGC.weighty = 1.0;\r\n        panel.add(createResultPanel(), panelGC);\r\n    }\r\n\r\n    private JPanel createResultPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.insets = new Insets(2, 2, 2, 2);\r\n        String searchResultsTitleLabelText = MacawMessages.getMessage(\"general.labels.searchResults\");\r\n        JLabel searchResultsTitleLabel = userInterfaceFactory.createLabel(searchResultsTitleLabelText);\r\n        panel.add(searchResultsTitleLabel, panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 100;\r\n        panelGC.weighty = 100;\r\n        variableSearchTableModel = new VariableSearchTableModel(database);\r\n        searchTable = userInterfaceFactory.createTable(variableSearchTableModel);\r\n        JTableHeader header = searchTable.getTableHeader();\r\n        header.setReorderingAllowed(false);\r\n        JScrollPane filterPane = userInterfaceFactory.createScrollPane(searchTable);\r\n        ListSelectionModel listSelectionModel = searchTable.getSelectionModel();\r\n        listSelectionModel.addListSelectionListener(this);\r\n        variableSearchTableModel.addTableModelListener(this);\r\n        panel.add(filterPane, panelGC);\r\n        try {\r\n            variableSearchTableModel.showAllVariableSummaries(currentUser);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createFilterCriteriaPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.insets = new Insets(2, 2, 2, 2);\r\n        panelGC.ipadx = 5;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        panel.add(createSearchFieldFilterPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panel.add(createYearAndCategoryFieldFilterPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0.0;\r\n        panel.add(createVariableTypeFilterPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.anchor = GridBagConstraints.SOUTHEAST;\r\n        panel.add(createButtonPanel(), panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createButtonPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.insets = new Insets(2, 2, 2, 2);\r\n        panelGC.anchor = GridBagConstraints.SOUTHEAST;\r\n        String searchLabelText = MacawMessages.getMessage(\"general.labels.search\");\r\n        applySearch = userInterfaceFactory.createButton(searchLabelText);\r\n        applySearch.addActionListener(this);\r\n        panel.add(applySearch, panelGC);\r\n        panelGC.gridx++;\r\n        String resetLabelText = MacawMessages.getMessage(\"general.buttons.reset\");\r\n        reset = userInterfaceFactory.createButton(resetLabelText);\r\n        reset.addActionListener(this);\r\n        panel.add(reset, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createSearchFieldFilterPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.ipadx = 5;\r\n        String searchFieldLabelText = MacawMessages.getMessage(\"general.labels.searchPhrase\");\r\n        JLabel searchFieldLabel = userInterfaceFactory.createLabel(searchFieldLabelText);\r\n        panel.add(searchFieldLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.weightx = 1.0;\r\n        searchField = userInterfaceFactory.createTextField(40);\r\n        panel.add(searchField, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createVariableTypeFilterPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.ipadx = 5;\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        String filterbyTypeLabelText = MacawMessages.getMessage(\"variableSearchPanel.variableType\");\r\n        JLabel filterByTypeLabel = userInterfaceFactory.createLabel(filterbyTypeLabelText);\r\n        panel.add(filterByTypeLabel, panelGC);\r\n        panelGC.gridx++;\r\n        String filterByRawVariablesText = MacawMessages.getMessage(\"variableSearchPanel.rawVariables\");\r\n        filterByRawVariables = userInterfaceFactory.createRadioButton(filterByRawVariablesText);\r\n        buttonGroup.add(filterByRawVariables);\r\n        panel.add(filterByRawVariables, panelGC);\r\n        panelGC.gridx++;\r\n        String filterByDerivedVariablesText = MacawMessages.getMessage(\"variableSearchPanel.derivedVariables\");\r\n        filterByDerivedVariables = userInterfaceFactory.createRadioButton(filterByDerivedVariablesText);\r\n        buttonGroup.add(filterByDerivedVariables);\r\n        panel.add(filterByDerivedVariables, panelGC);\r\n        panelGC.gridx++;\r\n        String showRawAndDerivedVariablesText = MacawMessages.getMessage(\"variableSearchPanel.rawAndDerivedVariables\");\r\n        showRawAndDerivedVariables = userInterfaceFactory.createRadioButton(showRawAndDerivedVariablesText);\r\n        buttonGroup.add(showRawAndDerivedVariables);\r\n        panel.add(showRawAndDerivedVariables, panelGC);\r\n        showRawAndDerivedVariables.setSelected(true);\r\n        filterByRawVariables.addActionListener(this);\r\n        filterByDerivedVariables.addActionListener(this);\r\n        showRawAndDerivedVariables.addActionListener(this);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createYearAndCategoryFieldFilterPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.ipadx = 5;\r\n        panelGC.gridy++;\r\n        panelGC.gridx = 0;\r\n        panelGC.weightx = 0;\r\n        String yearFieldLabelText = MacawMessages.getMessage(\"general.fields.year\");\r\n        JLabel yearFieldLabel = userInterfaceFactory.createLabel(yearFieldLabelText);\r\n        panel.add(yearFieldLabel, panelGC);\r\n        panelGC.gridx++;\r\n        String[] availableYears = getYearChoices();\r\n        filterByYear = userInterfaceFactory.createComboBox(availableYears);\r\n        panel.add(filterByYear, panelGC);\r\n        //add the filter by category criteria\r\n        panelGC.gridx++;\r\n        String categoryLabelText = MacawMessages.getMessage(\"general.fields.category\");\r\n        JLabel categoryLabel = userInterfaceFactory.createLabel(categoryLabelText);\r\n        panel.add(categoryLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        String[] categoryChoices = new String[0];\r\n        try {\r\n            ArrayList<Category> categories = database.getCategories(currentUser);\r\n            //here, insert the category key word \"All\"\r\n            String allText = MacawMessages.getMessage(\"general.fieldValue.allChoices\");\r\n            Category allCategories = new Category(allText);\r\n            categories.add(0, allCategories);\r\n            categoryChoices = ConstantConverter.getCategoryChoices(categories);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        filterByCategory = userInterfaceFactory.createComboBox(categoryChoices);\r\n        panel.add(filterByCategory, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private String[] getYearChoices() {\r\n        try {\r\n            String[] years = database.getStudyYears(currentUser);\r\n            String[] results = new String[years.length + 1];\r\n            //add the \"All\" choice to allow all choices to be selected\r\n            results[0] = allChoicesText;\r\n            for (int i = 1; i < results.length; i++) {\r\n                results[i] = years[i - 1];\r\n            }\r\n            return results;\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        return (new String[0]);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void deleteSelectedItems() throws MacawException {\r\n        ArrayList<RawVariable> selectedRawVariables = new ArrayList<RawVariable>();\r\n        ArrayList<DerivedVariable> selectedDerivedVariables = new ArrayList<DerivedVariable>();\r\n        int[] selectedRowIndices = searchTable.getSelectedRows();\r\n        for (int i = 0; i < selectedRowIndices.length; i++) {\r\n            VariableSummary variableSummary = variableSearchTableModel.getVariableSummary(selectedRowIndices[i]);\r\n            Variable selectedVariable = database.getCompleteVariableData(currentUser, variableSummary);\r\n            if (selectedVariable instanceof RawVariable) {\r\n                selectedRawVariables.add((RawVariable) selectedVariable);\r\n            } else {\r\n                selectedDerivedVariables.add((DerivedVariable) selectedVariable);\r\n            }\r\n        }\r\n        database.deleteRawVariables(currentUser, selectedRawVariables);\r\n        database.deleteDerivedVariables(currentUser, selectedDerivedVariables);\r\n        searchTable.clearSelection();\r\n    }\r\n\r\n    public JPanel getPanel() {\r\n        return panel;\r\n    }\r\n\r\n    public ArrayList<Variable> getSelectedVariables() throws MacawException {\r\n        ArrayList<Variable> selectedVariables = new ArrayList<Variable>();\r\n        int[] selectedRowIndices = searchTable.getSelectedRows();\r\n        for (int i = 0; i < selectedRowIndices.length; i++) {\r\n            VariableSummary variableSummary = variableSearchTableModel.getVariableSummary(selectedRowIndices[i]);\r\n            Variable variable = database.getCompleteVariableData(currentUser, variableSummary);\r\n            selectedVariables.add(variable);\r\n        }\r\n        //XXXX convert summaries into real values\r\n        return selectedVariables;\r\n    }\r\n\r\n    public Variable getSelectedVariable() throws MacawException {\r\n        int selectedIndex = searchTable.getSelectedRow();\r\n        if (selectedIndex == -1) {\r\n            return null;\r\n        } else {\r\n            VariableSummary variableSummary = variableSearchTableModel.getVariableSummary(selectedIndex);\r\n            Variable variable = database.getCompleteVariableData(currentUser, variableSummary);\r\n            return variable;\r\n        }\r\n    }\r\n\r\n    public void applySearch() {\r\n        String searchPhrase = searchField.getText().trim();\r\n        String selectedCategory = (String) filterByCategory.getSelectedItem();\r\n        String selectedYear = (String) filterByYear.getSelectedItem();\r\n        try {\r\n            if (showRawAndDerivedVariables.isSelected() == true) {\r\n                variableSearchTableModel.filterVariables(currentUser, searchPhrase, selectedYear, selectedCategory);\r\n            } else if (filterByDerivedVariables.isSelected() == true) {\r\n                variableSearchTableModel.filterVariables(currentUser, searchPhrase, selectedYear, selectedCategory, true);\r\n            } else {\r\n                variableSearchTableModel.filterVariables(currentUser, searchPhrase, selectedYear, selectedCategory, false);\r\n            }\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    public void refreshList() {\r\n        try {\r\n            variableSearchTableModel.refreshList();\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    public void reset() {\r\n        //reset the search field\r\n        searchField.setText(\"\");\r\n        filterByYear.setSelectedItem(allChoicesText);\r\n        filterByCategory.setSelectedItem(allChoicesText);\r\n        showRawAndDerivedVariables.setSelected(true);\r\n        try {\r\n            variableSearchTableModel.showAllVariableSummaries(currentUser);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    public void setChangeListener(ChangeListener changeListener) {\r\n        this.changeListener = changeListener;\r\n    }\r\n\r\n    public void setSelectionMode(int selectionMode) {\r\n        ListSelectionModel listSelectionModel = searchTable.getSelectionModel();\r\n        listSelectionModel.setSelectionMode(selectionMode);\r\n    }\r\n\r\n    public boolean showRawVariables() {\r\n        if (filterByRawVariables.isSelected() == true) {\r\n            return true;\r\n        } else if (showRawAndDerivedVariables.isSelected() == true) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean showDerivedVariables() {\r\n        if (filterByDerivedVariables.isSelected() == true) {\r\n            return true;\r\n        } else if (showRawAndDerivedVariables.isSelected() == true) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public void selectVariable(Variable variable) {\r\n        int selectionRow = variableSearchTableModel.getRow(variable.createVariableSummary());\r\n        if (selectionRow != -1) {\r\n            Rectangle selectionArea = searchTable.getCellRect(selectionRow, 0, true);\r\n            searchTable.scrollRectToVisible(selectionArea);\r\n        }\r\n    }\r\n\r\n    public boolean hasSearchResults() {\r\n        if (variableSearchTableModel.getRowCount() > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: ActionListener\r\n    public void actionPerformed(ActionEvent event) {\r\n        Object button = event.getSource();\r\n        if (button == applySearch) {\r\n            applySearch();\r\n        } else if (button == reset) {\r\n            reset();\r\n        }\r\n    }\r\n\r\n    //Interface: List Selection Listener\r\n    public void valueChanged(ListSelectionEvent event) {\r\n        if ((event.getValueIsAdjusting() == false) && (changeListener != null)) {\r\n            ChangeEvent changeEvent = new ChangeEvent(this);\r\n            changeListener.stateChanged(changeEvent);\r\n        }\r\n    }\r\n\r\n    //Interface: Table Model Listener\r\n    public void tableChanged(TableModelEvent event) {\r\n        if (changeListener != null) {\r\n            ChangeEvent changeEvent = new ChangeEvent(this);\r\n            changeListener.stateChanged(changeEvent);\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/VariableSearchPanelTest0.java",
		"test_prompt": "// VariableSearchPanelTest0.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.businessLayer.*;\nimport javax.swing.*;\nimport javax.swing.table.JTableHeader;\nimport javax.swing.event.*;\nimport java.awt.*;\nimport javax.swing.border.LineBorder;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VariableSearchPanel}.\n* It contains ten unit test cases for the {@link VariableSearchPanel#showRawVariables()} method.\n*/\nclass VariableSearchPanelTest0 {"
	},
	{
		"original_code": "// VariableSearchPanel.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.businessLayer.*;\r\nimport javax.swing.*;\r\nimport javax.swing.table.JTableHeader;\r\nimport javax.swing.event.*;\r\nimport java.awt.*;\r\nimport javax.swing.border.LineBorder;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class VariableSearchPanel implements ActionListener, ListSelectionListener, TableModelListener {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private SessionProperties sessionProperties;\r\n\r\n    private MacawCurationAPI database;\r\n\r\n    private User currentUser;\r\n\r\n    private UserInterfaceFactory userInterfaceFactory;\r\n\r\n    private JPanel panel;\r\n\r\n    private String allChoicesText;\r\n\r\n    private VariableSearchTableModel variableSearchTableModel;\r\n\r\n    private JTable searchTable;\r\n\r\n    private JTextField searchField;\r\n\r\n    private JRadioButton filterByRawVariables;\r\n\r\n    private JRadioButton filterByDerivedVariables;\r\n\r\n    private JRadioButton showRawAndDerivedVariables;\r\n\r\n    private JComboBox filterByCategory;\r\n\r\n    private JComboBox filterByYear;\r\n\r\n    private JButton applySearch;\r\n\r\n    private JButton reset;\r\n\r\n    private ChangeListener changeListener;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public VariableSearchPanel(SessionProperties sessionProperties) {\r\n        this.sessionProperties = sessionProperties;\r\n        userInterfaceFactory = sessionProperties.getUserInterfaceFactory();\r\n        database = (MacawCurationAPI) sessionProperties.getProperty(SessionProperties.DATABASE);\r\n        currentUser = (User) sessionProperties.getProperty(SessionProperties.CURRENT_USER);\r\n        allChoicesText = MacawMessages.getMessage(\"general.fieldValue.allChoices\");\r\n        panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        panelGC.insets = new Insets(2, 2, 2, 2);\r\n        JPanel filterCriteriaPanel = createFilterCriteriaPanel();\r\n        filterCriteriaPanel.setBorder(LineBorder.createGrayLineBorder());\r\n        panel.add(filterCriteriaPanel, panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 1.0;\r\n        panelGC.weighty = 1.0;\r\n        panel.add(createResultPanel(), panelGC);\r\n    }\r\n\r\n    private JPanel createResultPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.insets = new Insets(2, 2, 2, 2);\r\n        String searchResultsTitleLabelText = MacawMessages.getMessage(\"general.labels.searchResults\");\r\n        JLabel searchResultsTitleLabel = userInterfaceFactory.createLabel(searchResultsTitleLabelText);\r\n        panel.add(searchResultsTitleLabel, panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 100;\r\n        panelGC.weighty = 100;\r\n        variableSearchTableModel = new VariableSearchTableModel(database);\r\n        searchTable = userInterfaceFactory.createTable(variableSearchTableModel);\r\n        JTableHeader header = searchTable.getTableHeader();\r\n        header.setReorderingAllowed(false);\r\n        JScrollPane filterPane = userInterfaceFactory.createScrollPane(searchTable);\r\n        ListSelectionModel listSelectionModel = searchTable.getSelectionModel();\r\n        listSelectionModel.addListSelectionListener(this);\r\n        variableSearchTableModel.addTableModelListener(this);\r\n        panel.add(filterPane, panelGC);\r\n        try {\r\n            variableSearchTableModel.showAllVariableSummaries(currentUser);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createFilterCriteriaPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.insets = new Insets(2, 2, 2, 2);\r\n        panelGC.ipadx = 5;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        panel.add(createSearchFieldFilterPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panel.add(createYearAndCategoryFieldFilterPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0.0;\r\n        panel.add(createVariableTypeFilterPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.anchor = GridBagConstraints.SOUTHEAST;\r\n        panel.add(createButtonPanel(), panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createButtonPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.insets = new Insets(2, 2, 2, 2);\r\n        panelGC.anchor = GridBagConstraints.SOUTHEAST;\r\n        String searchLabelText = MacawMessages.getMessage(\"general.labels.search\");\r\n        applySearch = userInterfaceFactory.createButton(searchLabelText);\r\n        applySearch.addActionListener(this);\r\n        panel.add(applySearch, panelGC);\r\n        panelGC.gridx++;\r\n        String resetLabelText = MacawMessages.getMessage(\"general.buttons.reset\");\r\n        reset = userInterfaceFactory.createButton(resetLabelText);\r\n        reset.addActionListener(this);\r\n        panel.add(reset, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createSearchFieldFilterPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.ipadx = 5;\r\n        String searchFieldLabelText = MacawMessages.getMessage(\"general.labels.searchPhrase\");\r\n        JLabel searchFieldLabel = userInterfaceFactory.createLabel(searchFieldLabelText);\r\n        panel.add(searchFieldLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.weightx = 1.0;\r\n        searchField = userInterfaceFactory.createTextField(40);\r\n        panel.add(searchField, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createVariableTypeFilterPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.ipadx = 5;\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        String filterbyTypeLabelText = MacawMessages.getMessage(\"variableSearchPanel.variableType\");\r\n        JLabel filterByTypeLabel = userInterfaceFactory.createLabel(filterbyTypeLabelText);\r\n        panel.add(filterByTypeLabel, panelGC);\r\n        panelGC.gridx++;\r\n        String filterByRawVariablesText = MacawMessages.getMessage(\"variableSearchPanel.rawVariables\");\r\n        filterByRawVariables = userInterfaceFactory.createRadioButton(filterByRawVariablesText);\r\n        buttonGroup.add(filterByRawVariables);\r\n        panel.add(filterByRawVariables, panelGC);\r\n        panelGC.gridx++;\r\n        String filterByDerivedVariablesText = MacawMessages.getMessage(\"variableSearchPanel.derivedVariables\");\r\n        filterByDerivedVariables = userInterfaceFactory.createRadioButton(filterByDerivedVariablesText);\r\n        buttonGroup.add(filterByDerivedVariables);\r\n        panel.add(filterByDerivedVariables, panelGC);\r\n        panelGC.gridx++;\r\n        String showRawAndDerivedVariablesText = MacawMessages.getMessage(\"variableSearchPanel.rawAndDerivedVariables\");\r\n        showRawAndDerivedVariables = userInterfaceFactory.createRadioButton(showRawAndDerivedVariablesText);\r\n        buttonGroup.add(showRawAndDerivedVariables);\r\n        panel.add(showRawAndDerivedVariables, panelGC);\r\n        showRawAndDerivedVariables.setSelected(true);\r\n        filterByRawVariables.addActionListener(this);\r\n        filterByDerivedVariables.addActionListener(this);\r\n        showRawAndDerivedVariables.addActionListener(this);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createYearAndCategoryFieldFilterPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.ipadx = 5;\r\n        panelGC.gridy++;\r\n        panelGC.gridx = 0;\r\n        panelGC.weightx = 0;\r\n        String yearFieldLabelText = MacawMessages.getMessage(\"general.fields.year\");\r\n        JLabel yearFieldLabel = userInterfaceFactory.createLabel(yearFieldLabelText);\r\n        panel.add(yearFieldLabel, panelGC);\r\n        panelGC.gridx++;\r\n        String[] availableYears = getYearChoices();\r\n        filterByYear = userInterfaceFactory.createComboBox(availableYears);\r\n        panel.add(filterByYear, panelGC);\r\n        //add the filter by category criteria\r\n        panelGC.gridx++;\r\n        String categoryLabelText = MacawMessages.getMessage(\"general.fields.category\");\r\n        JLabel categoryLabel = userInterfaceFactory.createLabel(categoryLabelText);\r\n        panel.add(categoryLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        String[] categoryChoices = new String[0];\r\n        try {\r\n            ArrayList<Category> categories = database.getCategories(currentUser);\r\n            //here, insert the category key word \"All\"\r\n            String allText = MacawMessages.getMessage(\"general.fieldValue.allChoices\");\r\n            Category allCategories = new Category(allText);\r\n            categories.add(0, allCategories);\r\n            categoryChoices = ConstantConverter.getCategoryChoices(categories);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        filterByCategory = userInterfaceFactory.createComboBox(categoryChoices);\r\n        panel.add(filterByCategory, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private String[] getYearChoices() {\r\n        try {\r\n            String[] years = database.getStudyYears(currentUser);\r\n            String[] results = new String[years.length + 1];\r\n            //add the \"All\" choice to allow all choices to be selected\r\n            results[0] = allChoicesText;\r\n            for (int i = 1; i < results.length; i++) {\r\n                results[i] = years[i - 1];\r\n            }\r\n            return results;\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        return (new String[0]);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void deleteSelectedItems() throws MacawException {\r\n        ArrayList<RawVariable> selectedRawVariables = new ArrayList<RawVariable>();\r\n        ArrayList<DerivedVariable> selectedDerivedVariables = new ArrayList<DerivedVariable>();\r\n        int[] selectedRowIndices = searchTable.getSelectedRows();\r\n        for (int i = 0; i < selectedRowIndices.length; i++) {\r\n            VariableSummary variableSummary = variableSearchTableModel.getVariableSummary(selectedRowIndices[i]);\r\n            Variable selectedVariable = database.getCompleteVariableData(currentUser, variableSummary);\r\n            if (selectedVariable instanceof RawVariable) {\r\n                selectedRawVariables.add((RawVariable) selectedVariable);\r\n            } else {\r\n                selectedDerivedVariables.add((DerivedVariable) selectedVariable);\r\n            }\r\n        }\r\n        database.deleteRawVariables(currentUser, selectedRawVariables);\r\n        database.deleteDerivedVariables(currentUser, selectedDerivedVariables);\r\n        searchTable.clearSelection();\r\n    }\r\n\r\n    public JPanel getPanel() {\r\n        return panel;\r\n    }\r\n\r\n    public ArrayList<Variable> getSelectedVariables() throws MacawException {\r\n        ArrayList<Variable> selectedVariables = new ArrayList<Variable>();\r\n        int[] selectedRowIndices = searchTable.getSelectedRows();\r\n        for (int i = 0; i < selectedRowIndices.length; i++) {\r\n            VariableSummary variableSummary = variableSearchTableModel.getVariableSummary(selectedRowIndices[i]);\r\n            Variable variable = database.getCompleteVariableData(currentUser, variableSummary);\r\n            selectedVariables.add(variable);\r\n        }\r\n        //XXXX convert summaries into real values\r\n        return selectedVariables;\r\n    }\r\n\r\n    public Variable getSelectedVariable() throws MacawException {\r\n        int selectedIndex = searchTable.getSelectedRow();\r\n        if (selectedIndex == -1) {\r\n            return null;\r\n        } else {\r\n            VariableSummary variableSummary = variableSearchTableModel.getVariableSummary(selectedIndex);\r\n            Variable variable = database.getCompleteVariableData(currentUser, variableSummary);\r\n            return variable;\r\n        }\r\n    }\r\n\r\n    public void applySearch() {\r\n        String searchPhrase = searchField.getText().trim();\r\n        String selectedCategory = (String) filterByCategory.getSelectedItem();\r\n        String selectedYear = (String) filterByYear.getSelectedItem();\r\n        try {\r\n            if (showRawAndDerivedVariables.isSelected() == true) {\r\n                variableSearchTableModel.filterVariables(currentUser, searchPhrase, selectedYear, selectedCategory);\r\n            } else if (filterByDerivedVariables.isSelected() == true) {\r\n                variableSearchTableModel.filterVariables(currentUser, searchPhrase, selectedYear, selectedCategory, true);\r\n            } else {\r\n                variableSearchTableModel.filterVariables(currentUser, searchPhrase, selectedYear, selectedCategory, false);\r\n            }\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    public void refreshList() {\r\n        try {\r\n            variableSearchTableModel.refreshList();\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    public void reset() {\r\n        //reset the search field\r\n        searchField.setText(\"\");\r\n        filterByYear.setSelectedItem(allChoicesText);\r\n        filterByCategory.setSelectedItem(allChoicesText);\r\n        showRawAndDerivedVariables.setSelected(true);\r\n        try {\r\n            variableSearchTableModel.showAllVariableSummaries(currentUser);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    public void setChangeListener(ChangeListener changeListener) {\r\n        this.changeListener = changeListener;\r\n    }\r\n\r\n    public void setSelectionMode(int selectionMode) {\r\n        ListSelectionModel listSelectionModel = searchTable.getSelectionModel();\r\n        listSelectionModel.setSelectionMode(selectionMode);\r\n    }\r\n\r\n    public boolean showRawVariables() {\r\n        if (filterByRawVariables.isSelected() == true) {\r\n            return true;\r\n        } else if (showRawAndDerivedVariables.isSelected() == true) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean showDerivedVariables() {\r\n        if (filterByDerivedVariables.isSelected() == true) {\r\n            return true;\r\n        } else if (showRawAndDerivedVariables.isSelected() == true) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public void selectVariable(Variable variable) {\r\n        int selectionRow = variableSearchTableModel.getRow(variable.createVariableSummary());\r\n        if (selectionRow != -1) {\r\n            Rectangle selectionArea = searchTable.getCellRect(selectionRow, 0, true);\r\n            searchTable.scrollRectToVisible(selectionArea);\r\n        }\r\n    }\r\n\r\n    public boolean hasSearchResults() {\r\n        if (variableSearchTableModel.getRowCount() > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: ActionListener\r\n    public void actionPerformed(ActionEvent event) {\r\n        Object button = event.getSource();\r\n        if (button == applySearch) {\r\n            applySearch();\r\n        } else if (button == reset) {\r\n            reset();\r\n        }\r\n    }\r\n\r\n    //Interface: List Selection Listener\r\n    public void valueChanged(ListSelectionEvent event) {\r\n        if ((event.getValueIsAdjusting() == false) && (changeListener != null)) {\r\n            ChangeEvent changeEvent = new ChangeEvent(this);\r\n            changeListener.stateChanged(changeEvent);\r\n        }\r\n    }\r\n\r\n    //Interface: Table Model Listener\r\n    public void tableChanged(TableModelEvent event) {\r\n        if (changeListener != null) {\r\n            ChangeEvent changeEvent = new ChangeEvent(this);\r\n            changeListener.stateChanged(changeEvent);\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/VariableSearchPanelTest1.java",
		"test_prompt": "// VariableSearchPanelTest1.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.businessLayer.*;\nimport javax.swing.*;\nimport javax.swing.table.JTableHeader;\nimport javax.swing.event.*;\nimport java.awt.*;\nimport javax.swing.border.LineBorder;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VariableSearchPanel}.\n* It contains ten unit test cases for the {@link VariableSearchPanel#showDerivedVariables()} method.\n*/\nclass VariableSearchPanelTest1 {"
	},
	{
		"original_code": "// VariableSearchPanel.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.businessLayer.*;\r\nimport javax.swing.*;\r\nimport javax.swing.table.JTableHeader;\r\nimport javax.swing.event.*;\r\nimport java.awt.*;\r\nimport javax.swing.border.LineBorder;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class VariableSearchPanel implements ActionListener, ListSelectionListener, TableModelListener {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private SessionProperties sessionProperties;\r\n\r\n    private MacawCurationAPI database;\r\n\r\n    private User currentUser;\r\n\r\n    private UserInterfaceFactory userInterfaceFactory;\r\n\r\n    private JPanel panel;\r\n\r\n    private String allChoicesText;\r\n\r\n    private VariableSearchTableModel variableSearchTableModel;\r\n\r\n    private JTable searchTable;\r\n\r\n    private JTextField searchField;\r\n\r\n    private JRadioButton filterByRawVariables;\r\n\r\n    private JRadioButton filterByDerivedVariables;\r\n\r\n    private JRadioButton showRawAndDerivedVariables;\r\n\r\n    private JComboBox filterByCategory;\r\n\r\n    private JComboBox filterByYear;\r\n\r\n    private JButton applySearch;\r\n\r\n    private JButton reset;\r\n\r\n    private ChangeListener changeListener;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public VariableSearchPanel(SessionProperties sessionProperties) {\r\n        this.sessionProperties = sessionProperties;\r\n        userInterfaceFactory = sessionProperties.getUserInterfaceFactory();\r\n        database = (MacawCurationAPI) sessionProperties.getProperty(SessionProperties.DATABASE);\r\n        currentUser = (User) sessionProperties.getProperty(SessionProperties.CURRENT_USER);\r\n        allChoicesText = MacawMessages.getMessage(\"general.fieldValue.allChoices\");\r\n        panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        panelGC.insets = new Insets(2, 2, 2, 2);\r\n        JPanel filterCriteriaPanel = createFilterCriteriaPanel();\r\n        filterCriteriaPanel.setBorder(LineBorder.createGrayLineBorder());\r\n        panel.add(filterCriteriaPanel, panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 1.0;\r\n        panelGC.weighty = 1.0;\r\n        panel.add(createResultPanel(), panelGC);\r\n    }\r\n\r\n    private JPanel createResultPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.insets = new Insets(2, 2, 2, 2);\r\n        String searchResultsTitleLabelText = MacawMessages.getMessage(\"general.labels.searchResults\");\r\n        JLabel searchResultsTitleLabel = userInterfaceFactory.createLabel(searchResultsTitleLabelText);\r\n        panel.add(searchResultsTitleLabel, panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 100;\r\n        panelGC.weighty = 100;\r\n        variableSearchTableModel = new VariableSearchTableModel(database);\r\n        searchTable = userInterfaceFactory.createTable(variableSearchTableModel);\r\n        JTableHeader header = searchTable.getTableHeader();\r\n        header.setReorderingAllowed(false);\r\n        JScrollPane filterPane = userInterfaceFactory.createScrollPane(searchTable);\r\n        ListSelectionModel listSelectionModel = searchTable.getSelectionModel();\r\n        listSelectionModel.addListSelectionListener(this);\r\n        variableSearchTableModel.addTableModelListener(this);\r\n        panel.add(filterPane, panelGC);\r\n        try {\r\n            variableSearchTableModel.showAllVariableSummaries(currentUser);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createFilterCriteriaPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.insets = new Insets(2, 2, 2, 2);\r\n        panelGC.ipadx = 5;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        panel.add(createSearchFieldFilterPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panel.add(createYearAndCategoryFieldFilterPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0.0;\r\n        panel.add(createVariableTypeFilterPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.anchor = GridBagConstraints.SOUTHEAST;\r\n        panel.add(createButtonPanel(), panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createButtonPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.insets = new Insets(2, 2, 2, 2);\r\n        panelGC.anchor = GridBagConstraints.SOUTHEAST;\r\n        String searchLabelText = MacawMessages.getMessage(\"general.labels.search\");\r\n        applySearch = userInterfaceFactory.createButton(searchLabelText);\r\n        applySearch.addActionListener(this);\r\n        panel.add(applySearch, panelGC);\r\n        panelGC.gridx++;\r\n        String resetLabelText = MacawMessages.getMessage(\"general.buttons.reset\");\r\n        reset = userInterfaceFactory.createButton(resetLabelText);\r\n        reset.addActionListener(this);\r\n        panel.add(reset, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createSearchFieldFilterPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.ipadx = 5;\r\n        String searchFieldLabelText = MacawMessages.getMessage(\"general.labels.searchPhrase\");\r\n        JLabel searchFieldLabel = userInterfaceFactory.createLabel(searchFieldLabelText);\r\n        panel.add(searchFieldLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.weightx = 1.0;\r\n        searchField = userInterfaceFactory.createTextField(40);\r\n        panel.add(searchField, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createVariableTypeFilterPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.ipadx = 5;\r\n        ButtonGroup buttonGroup = new ButtonGroup();\r\n        String filterbyTypeLabelText = MacawMessages.getMessage(\"variableSearchPanel.variableType\");\r\n        JLabel filterByTypeLabel = userInterfaceFactory.createLabel(filterbyTypeLabelText);\r\n        panel.add(filterByTypeLabel, panelGC);\r\n        panelGC.gridx++;\r\n        String filterByRawVariablesText = MacawMessages.getMessage(\"variableSearchPanel.rawVariables\");\r\n        filterByRawVariables = userInterfaceFactory.createRadioButton(filterByRawVariablesText);\r\n        buttonGroup.add(filterByRawVariables);\r\n        panel.add(filterByRawVariables, panelGC);\r\n        panelGC.gridx++;\r\n        String filterByDerivedVariablesText = MacawMessages.getMessage(\"variableSearchPanel.derivedVariables\");\r\n        filterByDerivedVariables = userInterfaceFactory.createRadioButton(filterByDerivedVariablesText);\r\n        buttonGroup.add(filterByDerivedVariables);\r\n        panel.add(filterByDerivedVariables, panelGC);\r\n        panelGC.gridx++;\r\n        String showRawAndDerivedVariablesText = MacawMessages.getMessage(\"variableSearchPanel.rawAndDerivedVariables\");\r\n        showRawAndDerivedVariables = userInterfaceFactory.createRadioButton(showRawAndDerivedVariablesText);\r\n        buttonGroup.add(showRawAndDerivedVariables);\r\n        panel.add(showRawAndDerivedVariables, panelGC);\r\n        showRawAndDerivedVariables.setSelected(true);\r\n        filterByRawVariables.addActionListener(this);\r\n        filterByDerivedVariables.addActionListener(this);\r\n        showRawAndDerivedVariables.addActionListener(this);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createYearAndCategoryFieldFilterPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.ipadx = 5;\r\n        panelGC.gridy++;\r\n        panelGC.gridx = 0;\r\n        panelGC.weightx = 0;\r\n        String yearFieldLabelText = MacawMessages.getMessage(\"general.fields.year\");\r\n        JLabel yearFieldLabel = userInterfaceFactory.createLabel(yearFieldLabelText);\r\n        panel.add(yearFieldLabel, panelGC);\r\n        panelGC.gridx++;\r\n        String[] availableYears = getYearChoices();\r\n        filterByYear = userInterfaceFactory.createComboBox(availableYears);\r\n        panel.add(filterByYear, panelGC);\r\n        //add the filter by category criteria\r\n        panelGC.gridx++;\r\n        String categoryLabelText = MacawMessages.getMessage(\"general.fields.category\");\r\n        JLabel categoryLabel = userInterfaceFactory.createLabel(categoryLabelText);\r\n        panel.add(categoryLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        String[] categoryChoices = new String[0];\r\n        try {\r\n            ArrayList<Category> categories = database.getCategories(currentUser);\r\n            //here, insert the category key word \"All\"\r\n            String allText = MacawMessages.getMessage(\"general.fieldValue.allChoices\");\r\n            Category allCategories = new Category(allText);\r\n            categories.add(0, allCategories);\r\n            categoryChoices = ConstantConverter.getCategoryChoices(categories);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        filterByCategory = userInterfaceFactory.createComboBox(categoryChoices);\r\n        panel.add(filterByCategory, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private String[] getYearChoices() {\r\n        try {\r\n            String[] years = database.getStudyYears(currentUser);\r\n            String[] results = new String[years.length + 1];\r\n            //add the \"All\" choice to allow all choices to be selected\r\n            results[0] = allChoicesText;\r\n            for (int i = 1; i < results.length; i++) {\r\n                results[i] = years[i - 1];\r\n            }\r\n            return results;\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        return (new String[0]);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void deleteSelectedItems() throws MacawException {\r\n        ArrayList<RawVariable> selectedRawVariables = new ArrayList<RawVariable>();\r\n        ArrayList<DerivedVariable> selectedDerivedVariables = new ArrayList<DerivedVariable>();\r\n        int[] selectedRowIndices = searchTable.getSelectedRows();\r\n        for (int i = 0; i < selectedRowIndices.length; i++) {\r\n            VariableSummary variableSummary = variableSearchTableModel.getVariableSummary(selectedRowIndices[i]);\r\n            Variable selectedVariable = database.getCompleteVariableData(currentUser, variableSummary);\r\n            if (selectedVariable instanceof RawVariable) {\r\n                selectedRawVariables.add((RawVariable) selectedVariable);\r\n            } else {\r\n                selectedDerivedVariables.add((DerivedVariable) selectedVariable);\r\n            }\r\n        }\r\n        database.deleteRawVariables(currentUser, selectedRawVariables);\r\n        database.deleteDerivedVariables(currentUser, selectedDerivedVariables);\r\n        searchTable.clearSelection();\r\n    }\r\n\r\n    public JPanel getPanel() {\r\n        return panel;\r\n    }\r\n\r\n    public ArrayList<Variable> getSelectedVariables() throws MacawException {\r\n        ArrayList<Variable> selectedVariables = new ArrayList<Variable>();\r\n        int[] selectedRowIndices = searchTable.getSelectedRows();\r\n        for (int i = 0; i < selectedRowIndices.length; i++) {\r\n            VariableSummary variableSummary = variableSearchTableModel.getVariableSummary(selectedRowIndices[i]);\r\n            Variable variable = database.getCompleteVariableData(currentUser, variableSummary);\r\n            selectedVariables.add(variable);\r\n        }\r\n        //XXXX convert summaries into real values\r\n        return selectedVariables;\r\n    }\r\n\r\n    public Variable getSelectedVariable() throws MacawException {\r\n        int selectedIndex = searchTable.getSelectedRow();\r\n        if (selectedIndex == -1) {\r\n            return null;\r\n        } else {\r\n            VariableSummary variableSummary = variableSearchTableModel.getVariableSummary(selectedIndex);\r\n            Variable variable = database.getCompleteVariableData(currentUser, variableSummary);\r\n            return variable;\r\n        }\r\n    }\r\n\r\n    public void applySearch() {\r\n        String searchPhrase = searchField.getText().trim();\r\n        String selectedCategory = (String) filterByCategory.getSelectedItem();\r\n        String selectedYear = (String) filterByYear.getSelectedItem();\r\n        try {\r\n            if (showRawAndDerivedVariables.isSelected() == true) {\r\n                variableSearchTableModel.filterVariables(currentUser, searchPhrase, selectedYear, selectedCategory);\r\n            } else if (filterByDerivedVariables.isSelected() == true) {\r\n                variableSearchTableModel.filterVariables(currentUser, searchPhrase, selectedYear, selectedCategory, true);\r\n            } else {\r\n                variableSearchTableModel.filterVariables(currentUser, searchPhrase, selectedYear, selectedCategory, false);\r\n            }\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    public void refreshList() {\r\n        try {\r\n            variableSearchTableModel.refreshList();\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    public void reset() {\r\n        //reset the search field\r\n        searchField.setText(\"\");\r\n        filterByYear.setSelectedItem(allChoicesText);\r\n        filterByCategory.setSelectedItem(allChoicesText);\r\n        showRawAndDerivedVariables.setSelected(true);\r\n        try {\r\n            variableSearchTableModel.showAllVariableSummaries(currentUser);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    public void setChangeListener(ChangeListener changeListener) {\r\n        this.changeListener = changeListener;\r\n    }\r\n\r\n    public void setSelectionMode(int selectionMode) {\r\n        ListSelectionModel listSelectionModel = searchTable.getSelectionModel();\r\n        listSelectionModel.setSelectionMode(selectionMode);\r\n    }\r\n\r\n    public boolean showRawVariables() {\r\n        if (filterByRawVariables.isSelected() == true) {\r\n            return true;\r\n        } else if (showRawAndDerivedVariables.isSelected() == true) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean showDerivedVariables() {\r\n        if (filterByDerivedVariables.isSelected() == true) {\r\n            return true;\r\n        } else if (showRawAndDerivedVariables.isSelected() == true) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public void selectVariable(Variable variable) {\r\n        int selectionRow = variableSearchTableModel.getRow(variable.createVariableSummary());\r\n        if (selectionRow != -1) {\r\n            Rectangle selectionArea = searchTable.getCellRect(selectionRow, 0, true);\r\n            searchTable.scrollRectToVisible(selectionArea);\r\n        }\r\n    }\r\n\r\n    public boolean hasSearchResults() {\r\n        if (variableSearchTableModel.getRowCount() > 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: ActionListener\r\n    public void actionPerformed(ActionEvent event) {\r\n        Object button = event.getSource();\r\n        if (button == applySearch) {\r\n            applySearch();\r\n        } else if (button == reset) {\r\n            reset();\r\n        }\r\n    }\r\n\r\n    //Interface: List Selection Listener\r\n    public void valueChanged(ListSelectionEvent event) {\r\n        if ((event.getValueIsAdjusting() == false) && (changeListener != null)) {\r\n            ChangeEvent changeEvent = new ChangeEvent(this);\r\n            changeListener.stateChanged(changeEvent);\r\n        }\r\n    }\r\n\r\n    //Interface: Table Model Listener\r\n    public void tableChanged(TableModelEvent event) {\r\n        if (changeListener != null) {\r\n            ChangeEvent changeEvent = new ChangeEvent(this);\r\n            changeListener.stateChanged(changeEvent);\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/VariableSearchPanelTest2.java",
		"test_prompt": "// VariableSearchPanelTest2.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.businessLayer.*;\nimport javax.swing.*;\nimport javax.swing.table.JTableHeader;\nimport javax.swing.event.*;\nimport java.awt.*;\nimport javax.swing.border.LineBorder;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VariableSearchPanel}.\n* It contains ten unit test cases for the {@link VariableSearchPanel#hasSearchResults()} method.\n*/\nclass VariableSearchPanelTest2 {"
	},
	{
		"original_code": "// VariableSearchTableModel.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.businessLayer.MacawCurationAPI;\r\nimport macaw.businessLayer.User;\r\nimport macaw.businessLayer.VariableSummary;\r\nimport macaw.businessLayer.VariableTypeFilter;\r\nimport javax.swing.table.AbstractTableModel;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class VariableSearchTableModel extends AbstractTableModel {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    private static final int NAME_FIELD = 0;\r\n\r\n    private static final int LABEL_FIELD = 1;\r\n\r\n    private static final int YEAR_FIELD = 2;\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private MacawCurationAPI database;\r\n\r\n    private ArrayList<VariableSummary> variableSummaries;\r\n\r\n    private User currentUser;\r\n\r\n    private String searchText;\r\n\r\n    private String year;\r\n\r\n    private String category;\r\n\r\n    private VariableTypeFilter variableTypeFilter;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public VariableSearchTableModel(MacawCurationAPI database) {\r\n        this.database = database;\r\n        variableSummaries = new ArrayList<VariableSummary>();\r\n        searchText = \"\";\r\n        year = \"\";\r\n        category = \"\";\r\n        variableTypeFilter = VariableTypeFilter.RAW_AND_DERIVED;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public int getRow(VariableSummary targetVariable) {\r\n        int numberOfVariables = variableSummaries.size();\r\n        for (int i = 0; i < numberOfVariables; i++) {\r\n            if (targetVariable.equals(variableSummaries.get(i)) == true) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public VariableSummary getVariableSummary(int row) {\r\n        return variableSummaries.get(row);\r\n    }\r\n\r\n    public void showAllVariableSummaries(User currentUser) throws MacawException {\r\n        variableSummaries = database.getSummaryDataForAllVariables(currentUser);\r\n        fireTableDataChanged();\r\n    }\r\n\r\n    public void filterVariables(User currentUser, String searchText, String year, String category) throws MacawException {\r\n        this.currentUser = currentUser;\r\n        this.searchText = searchText;\r\n        this.year = year;\r\n        this.category = category;\r\n        this.variableTypeFilter = VariableTypeFilter.RAW_AND_DERIVED;\r\n        variableSummaries = database.filterVariableSummaries(currentUser, searchText, year, category, variableTypeFilter);\r\n        fireTableDataChanged();\r\n    }\r\n\r\n    public void filterVariables(User currentUser, String searchText, String year, String category, boolean isDerivedVariable) throws MacawException {\r\n        this.currentUser = currentUser;\r\n        this.searchText = searchText;\r\n        this.year = year;\r\n        this.category = category;\r\n        if (isDerivedVariable == true) {\r\n            variableTypeFilter = VariableTypeFilter.DERIVED;\r\n        } else {\r\n            variableTypeFilter = VariableTypeFilter.RAW;\r\n        }\r\n        variableSummaries = database.filterVariableSummaries(currentUser, searchText, year, category, variableTypeFilter);\r\n        fireTableDataChanged();\r\n    }\r\n\r\n    /**\r\n     * updates the last search.   This method is used when users have added, edited\r\n     * or deleted items from the list.\r\n     */\r\n    public void refreshList() throws MacawException {\r\n        variableSummaries = database.filterVariableSummaries(currentUser, searchText, year, category, variableTypeFilter);\r\n        fireTableDataChanged();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public boolean isCellEditable(int row, int column) {\r\n        return false;\r\n    }\r\n\r\n    public String getColumnName(int column) {\r\n        if (column == NAME_FIELD) {\r\n            String nameLabelText = MacawMessages.getMessage(\"general.fields.name\");\r\n            return nameLabelText;\r\n        } else if (column == LABEL_FIELD) {\r\n            String labelLabelText = MacawMessages.getMessage(\"general.fields.label\");\r\n            return labelLabelText;\r\n        } else {\r\n            String yearLabelText = MacawMessages.getMessage(\"general.fields.year\");\r\n            return yearLabelText;\r\n        }\r\n    }\r\n\r\n    public int getColumnCount() {\r\n        return 3;\r\n    }\r\n\r\n    public int getRowCount() {\r\n        return variableSummaries.size();\r\n    }\r\n\r\n    public Object getValueAt(int row, int column) {\r\n        VariableSummary variableSummary = variableSummaries.get(row);\r\n        if (column == NAME_FIELD) {\r\n            return variableSummary.getName();\r\n        } else if (column == LABEL_FIELD) {\r\n            return variableSummary.getLabel();\r\n        } else if (column == YEAR_FIELD) {\r\n            return variableSummary.getYear();\r\n        } else {\r\n            //should never happen but should most certainly cause an exception if it does.\r\n            return null;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/VariableSearchTableModelTest.java",
		"test_prompt": "// VariableSearchTableModelTest.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.businessLayer.MacawCurationAPI;\nimport macaw.businessLayer.User;\nimport macaw.businessLayer.VariableSummary;\nimport macaw.businessLayer.VariableTypeFilter;\nimport javax.swing.table.AbstractTableModel;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VariableSearchTableModel}.\n* It contains ten unit test cases for the {@link VariableSearchTableModel#isCellEditable(int, int)} method.\n*/\nclass VariableSearchTableModelTest {"
	},
	{
		"original_code": "// LoginDialog.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.businessLayer.MacawCurationAPI;\r\nimport macaw.businessLayer.User;\r\nimport macaw.util.WindowSizeListener;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class LoginDialog implements ActionListener {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    public static final int MAXIMUM_ATTEMPTS = 3;\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private SessionProperties sessionProperties;\r\n\r\n    private int remainingAttempts;\r\n\r\n    private UserInterfaceFactory userInterfaceFactory;\r\n\r\n    private MacawCurationAPI database;\r\n\r\n    private JDialog dialog;\r\n\r\n    private JTextField userIDField;\r\n\r\n    private JPasswordField passwordField;\r\n\r\n    private JButton login;\r\n\r\n    private JButton close;\r\n\r\n    private boolean isCancelled;\r\n\r\n    private boolean loginSuccessful;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public LoginDialog(SessionProperties sessionProperties, int ithAttempt) {\r\n        this.sessionProperties = sessionProperties;\r\n        remainingAttempts = MAXIMUM_ATTEMPTS - ithAttempt;\r\n        userInterfaceFactory = sessionProperties.getUserInterfaceFactory();\r\n        database = (MacawCurationAPI) sessionProperties.getProperty(SessionProperties.DATABASE);\r\n        dialog = userInterfaceFactory.createDialog();\r\n        String title = MacawMessages.getMessage(\"loginDialog.title\");\r\n        dialog.setTitle(title);\r\n        dialog.setModal(true);\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 1.0;\r\n        panelGC.weighty = 1.0;\r\n        panel.add(createInstructionPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panel.add(createMainFormPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        panelGC.anchor = GridBagConstraints.SOUTHEAST;\r\n        panel.add(createButtonPanel(), panelGC);\r\n        dialog.getContentPane().add(panel);\r\n        dialog.setSize(340, 200);\r\n        dialog.setResizable(false);\r\n        WindowSizeListener windowSizeListener = new WindowSizeListener();\r\n        dialog.addComponentListener(windowSizeListener);\r\n    }\r\n\r\n    private JPanel createInstructionPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 1.0;\r\n        panelGC.weighty = 1.0;\r\n        String loginInstructions = MacawMessages.getMessage(\"loginDialog.instructions\", String.valueOf(remainingAttempts));\r\n        JTextArea textArea = userInterfaceFactory.createImmutableTextArea(3, 10);\r\n        textArea.setText(loginInstructions);\r\n        panel.add(textArea, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createMainFormPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        String userIDLabelText = MacawMessages.getMessage(\"user.userID.label\");\r\n        JLabel userIDLabel = userInterfaceFactory.createLabel(userIDLabelText);\r\n        panel.add(userIDLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        userIDField = userInterfaceFactory.createTextField(10);\r\n        panel.add(userIDField, panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.gridx = 0;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        String passwordFieldLabelText = MacawMessages.getMessage(\"user.password.label\");\r\n        JLabel passwordFieldLabel = userInterfaceFactory.createLabel(passwordFieldLabelText);\r\n        panel.add(passwordFieldLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        passwordField = userInterfaceFactory.createPasswordField(10);\r\n        panel.add(passwordField, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createButtonPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        String loginText = MacawMessages.getMessage(\"loginDialog.login\");\r\n        login = userInterfaceFactory.createButton(loginText);\r\n        login.addActionListener(this);\r\n        panel.add(login, panelGC);\r\n        panelGC.gridx++;\r\n        String closeText = MacawMessages.getMessage(\"general.buttons.close\");\r\n        close = userInterfaceFactory.createButton(closeText);\r\n        close.addActionListener(this);\r\n        panel.add(close, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void show() {\r\n        dialog.setVisible(true);\r\n    }\r\n\r\n    public boolean isCancelled() {\r\n        return isCancelled;\r\n    }\r\n\r\n    public boolean isLoginSuccessful() {\r\n        return loginSuccessful;\r\n    }\r\n\r\n    private void login() {\r\n        loginSuccessful = false;\r\n        try {\r\n            User user = new User();\r\n            user.setUserID(userIDField.getText().trim());\r\n            char[] password = passwordField.getPassword();\r\n            user.setPassword(new String(password));\r\n            database.checkValidUser(user);\r\n            loginSuccessful = true;\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n            userIDField.setText(\"\");\r\n            passwordField.setText(\"\");\r\n            loginSuccessful = false;\r\n        }\r\n        dialog.setVisible(false);\r\n    }\r\n\r\n    private void close() {\r\n        isCancelled = true;\r\n        dialog.setVisible(false);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: ActionListener\r\n    public void actionPerformed(ActionEvent event) {\r\n        Object button = event.getSource();\r\n        if (button == login) {\r\n            login();\r\n        } else if (button == close) {\r\n            close();\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/LoginDialogTest0.java",
		"test_prompt": "// LoginDialogTest0.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.businessLayer.MacawCurationAPI;\nimport macaw.businessLayer.User;\nimport macaw.util.WindowSizeListener;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.*;\nimport java.awt.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LoginDialog}.\n* It contains ten unit test cases for the {@link LoginDialog#isCancelled()} method.\n*/\nclass LoginDialogTest0 {"
	},
	{
		"original_code": "// LoginDialog.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.businessLayer.MacawCurationAPI;\r\nimport macaw.businessLayer.User;\r\nimport macaw.util.WindowSizeListener;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class LoginDialog implements ActionListener {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    public static final int MAXIMUM_ATTEMPTS = 3;\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private SessionProperties sessionProperties;\r\n\r\n    private int remainingAttempts;\r\n\r\n    private UserInterfaceFactory userInterfaceFactory;\r\n\r\n    private MacawCurationAPI database;\r\n\r\n    private JDialog dialog;\r\n\r\n    private JTextField userIDField;\r\n\r\n    private JPasswordField passwordField;\r\n\r\n    private JButton login;\r\n\r\n    private JButton close;\r\n\r\n    private boolean isCancelled;\r\n\r\n    private boolean loginSuccessful;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public LoginDialog(SessionProperties sessionProperties, int ithAttempt) {\r\n        this.sessionProperties = sessionProperties;\r\n        remainingAttempts = MAXIMUM_ATTEMPTS - ithAttempt;\r\n        userInterfaceFactory = sessionProperties.getUserInterfaceFactory();\r\n        database = (MacawCurationAPI) sessionProperties.getProperty(SessionProperties.DATABASE);\r\n        dialog = userInterfaceFactory.createDialog();\r\n        String title = MacawMessages.getMessage(\"loginDialog.title\");\r\n        dialog.setTitle(title);\r\n        dialog.setModal(true);\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 1.0;\r\n        panelGC.weighty = 1.0;\r\n        panel.add(createInstructionPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panel.add(createMainFormPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        panelGC.anchor = GridBagConstraints.SOUTHEAST;\r\n        panel.add(createButtonPanel(), panelGC);\r\n        dialog.getContentPane().add(panel);\r\n        dialog.setSize(340, 200);\r\n        dialog.setResizable(false);\r\n        WindowSizeListener windowSizeListener = new WindowSizeListener();\r\n        dialog.addComponentListener(windowSizeListener);\r\n    }\r\n\r\n    private JPanel createInstructionPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 1.0;\r\n        panelGC.weighty = 1.0;\r\n        String loginInstructions = MacawMessages.getMessage(\"loginDialog.instructions\", String.valueOf(remainingAttempts));\r\n        JTextArea textArea = userInterfaceFactory.createImmutableTextArea(3, 10);\r\n        textArea.setText(loginInstructions);\r\n        panel.add(textArea, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createMainFormPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        String userIDLabelText = MacawMessages.getMessage(\"user.userID.label\");\r\n        JLabel userIDLabel = userInterfaceFactory.createLabel(userIDLabelText);\r\n        panel.add(userIDLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        userIDField = userInterfaceFactory.createTextField(10);\r\n        panel.add(userIDField, panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.gridx = 0;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        String passwordFieldLabelText = MacawMessages.getMessage(\"user.password.label\");\r\n        JLabel passwordFieldLabel = userInterfaceFactory.createLabel(passwordFieldLabelText);\r\n        panel.add(passwordFieldLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        passwordField = userInterfaceFactory.createPasswordField(10);\r\n        panel.add(passwordField, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    private JPanel createButtonPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        String loginText = MacawMessages.getMessage(\"loginDialog.login\");\r\n        login = userInterfaceFactory.createButton(loginText);\r\n        login.addActionListener(this);\r\n        panel.add(login, panelGC);\r\n        panelGC.gridx++;\r\n        String closeText = MacawMessages.getMessage(\"general.buttons.close\");\r\n        close = userInterfaceFactory.createButton(closeText);\r\n        close.addActionListener(this);\r\n        panel.add(close, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void show() {\r\n        dialog.setVisible(true);\r\n    }\r\n\r\n    public boolean isCancelled() {\r\n        return isCancelled;\r\n    }\r\n\r\n    public boolean isLoginSuccessful() {\r\n        return loginSuccessful;\r\n    }\r\n\r\n    private void login() {\r\n        loginSuccessful = false;\r\n        try {\r\n            User user = new User();\r\n            user.setUserID(userIDField.getText().trim());\r\n            char[] password = passwordField.getPassword();\r\n            user.setPassword(new String(password));\r\n            database.checkValidUser(user);\r\n            loginSuccessful = true;\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n            userIDField.setText(\"\");\r\n            passwordField.setText(\"\");\r\n            loginSuccessful = false;\r\n        }\r\n        dialog.setVisible(false);\r\n    }\r\n\r\n    private void close() {\r\n        isCancelled = true;\r\n        dialog.setVisible(false);\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: ActionListener\r\n    public void actionPerformed(ActionEvent event) {\r\n        Object button = event.getSource();\r\n        if (button == login) {\r\n            login();\r\n        } else if (button == close) {\r\n            close();\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/LoginDialogTest1.java",
		"test_prompt": "// LoginDialogTest1.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.businessLayer.MacawCurationAPI;\nimport macaw.businessLayer.User;\nimport macaw.util.WindowSizeListener;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.*;\nimport java.awt.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LoginDialog}.\n* It contains ten unit test cases for the {@link LoginDialog#isLoginSuccessful()} method.\n*/\nclass LoginDialogTest1 {"
	},
	{
		"original_code": "// OntologyTermSearchTableModel.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.businessLayer.MacawCurationAPI;\r\nimport macaw.businessLayer.OntologyTerm;\r\nimport javax.swing.table.AbstractTableModel;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class OntologyTermSearchTableModel extends AbstractTableModel {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    private static final int TERM = 0;\r\n\r\n    private static final int DESCRIPTION = 1;\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private ArrayList<OntologyTerm> ontologyTerms;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public OntologyTermSearchTableModel(MacawCurationAPI database) {\r\n        ontologyTerms = new ArrayList<OntologyTerm>();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void setData(ArrayList<OntologyTerm> ontologyTerms) {\r\n        this.ontologyTerms = ontologyTerms;\r\n        fireTableDataChanged();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public OntologyTerm getRow(int row) {\r\n        return ontologyTerms.get(row);\r\n    }\r\n\r\n    public String getColumnName(int column) {\r\n        String columnName = null;\r\n        if (column == TERM) {\r\n            columnName = MacawMessages.getMessage(\"ontologyTerm.term.label\");\r\n        } else if (column == DESCRIPTION) {\r\n            columnName = MacawMessages.getMessage(\"ontologyTerm.description.label\");\r\n        }\r\n        return columnName;\r\n    }\r\n\r\n    public boolean isCellEditable(int row, int column) {\r\n        return false;\r\n    }\r\n\r\n    public int getColumnCount() {\r\n        return 2;\r\n    }\r\n\r\n    public int getRowCount() {\r\n        return ontologyTerms.size();\r\n    }\r\n\r\n    public Object getValueAt(int row, int column) {\r\n        OntologyTerm ontologyTerm = ontologyTerms.get(row);\r\n        if (column == TERM) {\r\n            return ontologyTerm.getTerm();\r\n        } else if (column == DESCRIPTION) {\r\n            return ontologyTerm.getDescription();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/OntologyTermSearchTableModelTest.java",
		"test_prompt": "// OntologyTermSearchTableModelTest.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.businessLayer.MacawCurationAPI;\nimport macaw.businessLayer.OntologyTerm;\nimport javax.swing.table.AbstractTableModel;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OntologyTermSearchTableModel}.\n* It contains ten unit test cases for the {@link OntologyTermSearchTableModel#isCellEditable(int, int)} method.\n*/\nclass OntologyTermSearchTableModelTest {"
	},
	{
		"original_code": "// VariableEditor.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.businessLayer.*;\r\nimport macaw.system.*;\r\nimport macaw.util.*;\r\nimport javax.swing.*;\r\nimport javax.swing.border.LineBorder;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.GridBagConstraints;\r\nimport java.awt.Insets;\r\nimport java.util.*;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\nabstract public class VariableEditor implements ActionListener, DisplayableListParentForm {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    protected SessionProperties sessionProperties;\r\n\r\n    protected UserInterfaceFactory userInterfaceFactory;\r\n\r\n    protected User currentUser;\r\n\r\n    protected String currentUserID;\r\n\r\n    protected Log log;\r\n\r\n    protected MacawCurationAPI database;\r\n\r\n    protected JDialog dialog;\r\n\r\n    protected JTextArea instructionsTextArea;\r\n\r\n    protected String isCodedText;\r\n\r\n    protected JCheckBox isCodedField;\r\n\r\n    protected String nameLabelText;\r\n\r\n    protected JTextField nameField;\r\n\r\n    protected String labelLabelText;\r\n\r\n    protected JTextField labelField;\r\n\r\n    protected String categoryLabelText;\r\n\r\n    protected JComboBox categoryChoicesField;\r\n\r\n    protected CleaningStatePanel cleaningStatePanel;\r\n\r\n    protected String yearLabelText;\r\n\r\n    protected JTextField yearField;\r\n\r\n    private String formLabelText;\r\n\r\n    private JTextField formField;\r\n\r\n    private String questionNumberLabelText;\r\n\r\n    private JTextField questionNumberField;\r\n\r\n    protected OntologyTermsPanel ontologyTermsPanel;\r\n\r\n    protected SupportingDocumentsPanel supportingDocumentsPanel;\r\n\r\n    protected String availabilityLabelText;\r\n\r\n    protected JComboBox availabilityChoicesField;\r\n\r\n    protected String aliasFilePathLabelText;\r\n\r\n    protected JComboBox aliasFilePathChoicesField;\r\n\r\n    private JTextField codeBookNumberField;\r\n\r\n    private JTextField columnStartField;\r\n\r\n    private JTextField columnEndField;\r\n\r\n    protected String filePathLabelText;\r\n\r\n    protected JTextField filePathField;\r\n\r\n    protected JTextArea notesField;\r\n\r\n    protected AlternativeVariableSelectionPanel alternativeVariableSelectionPanel;\r\n\r\n    protected JButton showChangeHistory;\r\n\r\n    protected JButton editLabelValues;\r\n\r\n    protected OKClosePanel okCancelPanel;\r\n\r\n    protected JButton save;\r\n\r\n    protected JButton close;\r\n\r\n    protected boolean committedChanges;\r\n\r\n    private Variable variable;\r\n\r\n    protected boolean allowWriteAccess;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public VariableEditor(SessionProperties sessionProperties, boolean allowWriteAccess) {\r\n        this.sessionProperties = sessionProperties;\r\n        this.allowWriteAccess = allowWriteAccess;\r\n        userInterfaceFactory = sessionProperties.getUserInterfaceFactory();\r\n        database = (MacawCurationAPI) sessionProperties.getProperty(SessionProperties.DATABASE);\r\n        currentUser = (User) sessionProperties.getProperty(SessionProperties.CURRENT_USER);\r\n        currentUserID = currentUser.getUserID();\r\n        log = (Log) sessionProperties.getProperty(SessionProperties.LOG);\r\n        instructionsTextArea = userInterfaceFactory.createImmutableTextArea(3, 30);\r\n        String instructionsAreaText = MacawMessages.getMessage(\"variableLabelEditor.instructions\");\r\n        instructionsTextArea.setText(instructionsAreaText);\r\n        instructionsTextArea.setBorder(LineBorder.createGrayLineBorder());\r\n        nameLabelText = MacawMessages.getMessage(\"variable.name.label\");\r\n        nameField = userInterfaceFactory.createTextField(10);\r\n        nameField.setEditable(allowWriteAccess);\r\n        labelLabelText = MacawMessages.getMessage(\"variable.label.label\");\r\n        labelField = userInterfaceFactory.createTextField(30);\r\n        labelField.setEditable(allowWriteAccess);\r\n        categoryLabelText = MacawMessages.getMessage(\"variable.category.label\");\r\n        String[] categoryChoices = new String[0];\r\n        try {\r\n            ArrayList<Category> categories = database.getCategories(currentUser);\r\n            categoryChoices = ConstantConverter.getCategoryChoices(categories);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        categoryChoicesField = userInterfaceFactory.createComboBox(categoryChoices);\r\n        categoryChoicesField.setEnabled(allowWriteAccess);\r\n        yearLabelText = MacawMessages.getMessage(\"variable.year.label\");\r\n        yearField = userInterfaceFactory.createTextField(5);\r\n        yearField.setEditable(allowWriteAccess);\r\n        isCodedText = MacawMessages.getMessage(\"variable.isCoded.label\");\r\n        isCodedField = userInterfaceFactory.createCheckBox(isCodedText);\r\n        ontologyTermsPanel = new OntologyTermsPanel(sessionProperties, this, allowWriteAccess);\r\n        supportingDocumentsPanel = new SupportingDocumentsPanel(sessionProperties, this, allowWriteAccess);\r\n        alternativeVariableSelectionPanel = new AlternativeVariableSelectionPanel(sessionProperties);\r\n        availabilityLabelText = MacawMessages.getMessage(\"variable.availability.label\");\r\n        String[] availabilityChoices = new String[0];\r\n        try {\r\n            ArrayList<AvailabilityState> availabilityStates = database.getAvailabilityStates(currentUser);\r\n            availabilityChoices = ConstantConverter.getAvailabilityStatusChoices(availabilityStates);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        availabilityChoicesField = userInterfaceFactory.createComboBox(availabilityChoices);\r\n        availabilityChoicesField.setEnabled(allowWriteAccess);\r\n        aliasFilePathLabelText = MacawMessages.getMessage(\"variable.alias.label\");\r\n        String[] aliasFilePathChoices = new String[0];\r\n        try {\r\n            ArrayList<AliasFilePath> aliasFilePaths = database.getAliasFilePaths(currentUser);\r\n            aliasFilePathChoices = ConstantConverter.getAliasFilePathChoices(aliasFilePaths);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        aliasFilePathChoicesField = userInterfaceFactory.createComboBox(aliasFilePathChoices);\r\n        aliasFilePathChoicesField.setEnabled(allowWriteAccess);\r\n        filePathLabelText = MacawMessages.getMessage(\"variable.filePath.label\");\r\n        filePathField = userInterfaceFactory.createTextField(5);\r\n        filePathField.setEditable(false);\r\n        String showChangeHistoryText = MacawMessages.getMessage(\"general.buttons.showChangeHistory\");\r\n        showChangeHistory = userInterfaceFactory.createButton(showChangeHistoryText);\r\n        editLabelValues = userInterfaceFactory.createButton(\"\");\r\n        okCancelPanel = new OKClosePanel(userInterfaceFactory, this);\r\n        okCancelPanel.addButton(showChangeHistory);\r\n        okCancelPanel.addButton(editLabelValues);\r\n        okCancelPanel.setAllowWriteAccess(allowWriteAccess);\r\n        save = okCancelPanel.getSaveButton();\r\n        close = okCancelPanel.getCloseButton();\r\n        committedChanges = false;\r\n        dialog = userInterfaceFactory.createDialog();\r\n        WindowSizeListener windowSizeListener = new WindowSizeListener();\r\n        dialog.addComponentListener(windowSizeListener);\r\n        aliasFilePathChoicesField.addActionListener(this);\r\n    }\r\n\r\n    protected JPanel createYearFormQuestionNumberPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 0.0;\r\n        panelGC.ipadx = 10;\r\n        JLabel yearLabel = userInterfaceFactory.createLabel(yearLabelText);\r\n        panel.add(yearLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.weightx = 0.3;\r\n        panel.add(yearField, panelGC);\r\n        panelGC.gridx++;\r\n        formLabelText = MacawMessages.getMessage(\"rawVariableLabelEditor.form\");\r\n        JLabel formLabel = userInterfaceFactory.createLabel(formLabelText);\r\n        panelGC.weightx = 0.0;\r\n        panel.add(formLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.weightx = 0.3;\r\n        formField = userInterfaceFactory.createTextField(10);\r\n        formField.setEditable(allowWriteAccess);\r\n        panel.add(formField, panelGC);\r\n        panelGC.gridx++;\r\n        questionNumberLabelText = MacawMessages.getMessage(\"rawVariableLabelEditor.questionNumber\");\r\n        JLabel questionNumberLabel = userInterfaceFactory.createLabel(questionNumberLabelText);\r\n        panelGC.weightx = 0.0;\r\n        panel.add(questionNumberLabel, panelGC);\r\n        panelGC.gridx++;\r\n        questionNumberField = userInterfaceFactory.createTextField(10);\r\n        questionNumberField.setEditable(allowWriteAccess);\r\n        panelGC.weightx = 0.3;\r\n        panel.add(questionNumberField, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    protected JPanel createNameLabelPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.ipadx = 5;\r\n        JLabel nameFieldLabel = userInterfaceFactory.createLabel(nameLabelText);\r\n        panel.add(nameFieldLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panel.add(nameField, panelGC);\r\n        panelGC.gridx++;\r\n        JLabel labelLabel = userInterfaceFactory.createLabel(labelLabelText);\r\n        panel.add(labelLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        panel.add(labelField, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    protected JPanel createRubricCardPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.insets = new Insets(5, 0, 5, 0);\r\n        String panelTitleText = MacawMessages.getMessage(\"rawVariableLabelEditor.rubricCardData.title\");\r\n        JLabel panelTitleLabel = userInterfaceFactory.createLabel(panelTitleText);\r\n        panel.add(panelTitleLabel, panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        panel.add(createRubricCardFields(), panelGC);\r\n        panel.setBorder(LineBorder.createGrayLineBorder());\r\n        return panel;\r\n    }\r\n\r\n    protected JPanel createRubricCardFields() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        //adding code book number field\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        panelGC.gridx++;\r\n        String codeBookNumberLabelText = MacawMessages.getMessage(\"variable.codeBookNumber.label\");\r\n        JLabel codeBookNumberLabel = userInterfaceFactory.createLabel(codeBookNumberLabelText);\r\n        panel.add(codeBookNumberLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        codeBookNumberField = userInterfaceFactory.createTextField(20);\r\n        codeBookNumberField.setEditable(allowWriteAccess);\r\n        panel.add(codeBookNumberField, panelGC);\r\n        //adding column start field\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        panelGC.gridx++;\r\n        String columnStartLabelText = MacawMessages.getMessage(\"variable.columnStart.label\");\r\n        JLabel columnStartLabel = userInterfaceFactory.createLabel(columnStartLabelText);\r\n        panel.add(columnStartLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        columnStartField = userInterfaceFactory.createTextField(20);\r\n        columnStartField.setEditable(allowWriteAccess);\r\n        panel.add(columnStartField, panelGC);\r\n        //adding column end field\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        panelGC.gridx++;\r\n        String columnEndLabelText = MacawMessages.getMessage(\"variable.columnEnd.label\");\r\n        JLabel columnEndLabel = userInterfaceFactory.createLabel(columnEndLabelText);\r\n        panel.add(columnEndLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        columnEndField = userInterfaceFactory.createTextField(20);\r\n        columnEndField.setEditable(allowWriteAccess);\r\n        panel.add(columnEndField, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    protected JPanel createDataLibraryAndFilePanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.ipadx = 5;\r\n        JLabel dataLibraryLabel = userInterfaceFactory.createLabel(aliasFilePathLabelText);\r\n        panel.add(dataLibraryLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panel.add(aliasFilePathChoicesField, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.gridy++;\r\n        panelGC.gridx = 0;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        JLabel filePathLabel = userInterfaceFactory.createLabel(filePathLabelText);\r\n        panel.add(filePathLabel, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 1.0;\r\n        panel.add(filePathField, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    protected JPanel createNotesFieldPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.ipadx = 5;\r\n        String notesFieldText = MacawMessages.getMessage(\"variable.notes.label\");\r\n        JLabel notesFieldLabel = userInterfaceFactory.createLabel(notesFieldText);\r\n        panel.add(notesFieldLabel, panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 1.0;\r\n        panelGC.weighty = 1.0;\r\n        notesField = userInterfaceFactory.createTextArea(2, 10);\r\n        JScrollPane notesScrollPane = userInterfaceFactory.createScrollPane(notesField);\r\n        panel.add(notesScrollPane, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    protected void addField(String fieldName, JComponent editingComponent, JPanel parentPanel, GridBagConstraints parentPanelGC) {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.ipadx = 5;\r\n        panelGC.ipady = 5;\r\n        JLabel label = userInterfaceFactory.createLabel(fieldName);\r\n        panel.add(label, panelGC);\r\n        panelGC.gridx++;\r\n        panelGC.fill = GridBagConstraints.HORIZONTAL;\r\n        panelGC.weightx = 100;\r\n        panel.add(editingComponent, panelGC);\r\n        parentPanel.add(panel, parentPanelGC);\r\n    }\r\n\r\n    protected JPanel createIsCleanedPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        String[] cleaningStateChoices = new String[0];\r\n        try {\r\n            ArrayList<CleaningState> cleaningStates = database.getCleaningStates(currentUser);\r\n            cleaningStateChoices = ConstantConverter.getCleaningStatusChoices(cleaningStates);\r\n        } catch (MacawException exception) {\r\n            Log log = sessionProperties.getLog();\r\n            log.displayErrorDialog(exception);\r\n        }\r\n        cleaningStatePanel = new CleaningStatePanel(sessionProperties, cleaningStateChoices, allowWriteAccess);\r\n        panel.add(cleaningStatePanel.getCheckBox(), panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 100;\r\n        panelGC.weighty = 100;\r\n        panel.add(cleaningStatePanel.getPanel(), panelGC);\r\n        return panel;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public boolean isCancelled() {\r\n        return committedChanges;\r\n    }\r\n\r\n    public void show() {\r\n        dialog.setVisible(true);\r\n    }\r\n\r\n    private void updateEditLabelValuesButton() {\r\n        try {\r\n            int numberOfValues = 0;\r\n            if (variable.isNewRecord() == false) {\r\n                ArrayList<ValueLabel> valueLabels = database.getValueLabels(currentUser, variable);\r\n                numberOfValues = valueLabels.size();\r\n            }\r\n            if (allowWriteAccess == true) {\r\n                String editLabelValuesText = MacawMessages.getMessage(\"rawVariableLabelEditor.editLabelValues\", String.valueOf(numberOfValues));\r\n                editLabelValues.setText(editLabelValuesText);\r\n            } else {\r\n                String viewLabelValuesText = MacawMessages.getMessage(\"rawVariableLabelEditor.viewLabelValues\", String.valueOf(numberOfValues));\r\n                editLabelValues.setText(viewLabelValuesText);\r\n            }\r\n        } catch (MacawException exception) {\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    protected void setData(Variable variable, boolean isNewRecord) {\r\n        this.variable = variable;\r\n        ontologyTermsPanel.setData(variable);\r\n        supportingDocumentsPanel.setData(variable);\r\n        updateEditLabelValuesButton();\r\n        alternativeVariableSelectionPanel.setData(variable);\r\n        cleaningStatePanel.initialise(variable);\r\n    }\r\n\r\n    protected void saveVariableFields(Variable variable) {\r\n        this.variable = variable;\r\n        if (allowWriteAccess == false) {\r\n            return;\r\n        }\r\n        variable.setName(nameField.getText().trim());\r\n        variable.setLabel(labelField.getText().trim());\r\n        variable.setYear(yearField.getText().trim());\r\n        variable.setForm(formField.getText().trim());\r\n        variable.setQuestionNumber(questionNumberField.getText().trim());\r\n        variable.setCategory((String) categoryChoicesField.getSelectedItem());\r\n        variable.setCoded(isCodedField.isSelected());\r\n        //save state managed by cleaning state panel\r\n        cleaningStatePanel.save();\r\n        boolean isCleaned = cleaningStatePanel.isCleaned();\r\n        variable.setCleaned(isCleaned);\r\n        if (isCleaned == false) {\r\n            variable.setCleaningStatus(\"\");\r\n            variable.setCleaningDescription(\"\");\r\n        } else {\r\n            variable.setCleaningStatus(cleaningStatePanel.getCleaningStatus());\r\n            variable.setCleaningDescription(cleaningStatePanel.getCleaningDescription());\r\n        }\r\n        ArrayList<SupportingDocument> supportingDocuments = supportingDocumentsPanel.getSupportingDocuments();\r\n        variable.setSupportingDocuments(supportingDocuments);\r\n        String selectedAvailability = (String) availabilityChoicesField.getSelectedItem();\r\n        variable.setAvailability((String) availabilityChoicesField.getSelectedItem());\r\n        variable.setCodeBookNumber(codeBookNumberField.getText().trim());\r\n        variable.setColumnStart(columnStartField.getText().trim());\r\n        variable.setColumnEnd(columnEndField.getText().trim());\r\n        variable.setAlias((String) aliasFilePathChoicesField.getSelectedItem());\r\n        variable.setFilePath(filePathField.getText().trim());\r\n        variable.setNotes(notesField.getText().trim());\r\n        Variable alternativeVariable = alternativeVariableSelectionPanel.getAlternativeVariable();\r\n        variable.setAlternativeVariable(alternativeVariable);\r\n        alternativeVariableSelectionPanel.setData(variable);\r\n        //assumes that change events have already been recorded\r\n        cleaningStatePanel.clearChanges();\r\n    }\r\n\r\n    protected void restoreVariableFields(Variable variable) {\r\n        nameField.setText(variable.getName());\r\n        labelField.setText(variable.getLabel());\r\n        yearField.setText(variable.getYear());\r\n        formField.setText(variable.getForm());\r\n        questionNumberField.setText(variable.getQuestionNumber());\r\n        isCodedField.setSelected(variable.isCoded());\r\n        String category = variable.getCategory();\r\n        if (category.equals(\"\") == true) {\r\n            category = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        }\r\n        categoryChoicesField.setSelectedItem(category);\r\n        cleaningStatePanel.restore();\r\n        supportingDocumentsPanel.setData(variable);\r\n        String availability = variable.getAvailability();\r\n        if (availability.equals(\"\") == true) {\r\n            availability = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        }\r\n        availabilityChoicesField.setSelectedItem(availability);\r\n        String alias = variable.getAlias();\r\n        if (alias.equals(\"\") == true) {\r\n            alias = MacawMessages.getMessage(\"general.fieldValue.unknown\");\r\n        }\r\n        aliasFilePathChoicesField.setSelectedItem(alias);\r\n        updateFilePath();\r\n        codeBookNumberField.setText(variable.getCodeBookNumber());\r\n        columnStartField.setText(variable.getColumnStart());\r\n        columnEndField.setText(variable.getColumnEnd());\r\n        notesField.setText(variable.getNotes());\r\n        alternativeVariableSelectionPanel.setData(variable);\r\n    }\r\n\r\n    protected void close() {\r\n        dialog.setVisible(false);\r\n    }\r\n\r\n    protected void editLabelValues() {\r\n        try {\r\n            VariableLabelValueEditor variableLabelValueEditor = new VariableLabelValueEditor(sessionProperties, allowWriteAccess);\r\n            variableLabelValueEditor.setData(variable);\r\n            variableLabelValueEditor.show();\r\n            updateEditLabelValuesButton();\r\n        } catch (MacawException exception) {\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    protected void showChangeHistory() {\r\n        try {\r\n            ChangeHistoryViewer changeHistoryViewer = new ChangeHistoryViewer(sessionProperties);\r\n            changeHistoryViewer.showHistoryForVariable(variable);\r\n        } catch (MacawException exception) {\r\n            log.displayErrorDialog(exception);\r\n        }\r\n    }\r\n\r\n    abstract public Displayable getData();\r\n\r\n    protected void updateFilePath() {\r\n        try {\r\n            String currentAlias = (String) aliasFilePathChoicesField.getSelectedItem();\r\n            String filePath = database.getFilePathFromAlias(currentUser, currentAlias);\r\n            filePathField.setText(filePath);\r\n        } catch (MacawException exception) {\r\n            log.logException(exception);\r\n        }\r\n    }\r\n\r\n    protected void updateValueLabelsButtonState(Variable rawVariable) {\r\n        if (rawVariable.isNewRecord() == true) {\r\n            editLabelValues.setEnabled(false);\r\n        } else {\r\n            editLabelValues.setEnabled(true);\r\n        }\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    abstract public void actionPerformed(ActionEvent event);\r\n\r\n    abstract public void commitChanges() throws MacawException;\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/VariableEditorTest.java",
		"test_prompt": "// VariableEditorTest.java\npackage macaw.presentationLayer;\n\nimport macaw.businessLayer.*;\nimport macaw.system.*;\nimport macaw.util.*;\nimport javax.swing.*;\nimport javax.swing.border.LineBorder;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport java.awt.GridBagConstraints;\nimport java.awt.Insets;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VariableEditor}.\n* It contains ten unit test cases for the {@link VariableEditor#isCancelled()} method.\n*/\nclass VariableEditorTest {"
	},
	{
		"original_code": "// SupportingDocumentSearchTableModel.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.businessLayer.MacawCurationAPI;\r\nimport macaw.businessLayer.SupportingDocument;\r\nimport javax.swing.table.AbstractTableModel;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class SupportingDocumentSearchTableModel extends AbstractTableModel {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    private static final int DOCUMENT_CODE = 0;\r\n\r\n    private static final int DOCUMENT_TITLE = 1;\r\n\r\n    private static final int DOCUMENT_DESCRIPTION = 2;\r\n\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private MacawCurationAPI database;\r\n\r\n    private ArrayList<SupportingDocument> supportingDocuments;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public SupportingDocumentSearchTableModel(MacawCurationAPI database) {\r\n        this.database = database;\r\n        supportingDocuments = new ArrayList<SupportingDocument>();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public void setData(ArrayList<SupportingDocument> supportingDocuments) {\r\n        this.supportingDocuments = supportingDocuments;\r\n        fireTableDataChanged();\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n    public SupportingDocument getRow(int row) {\r\n        return supportingDocuments.get(row);\r\n    }\r\n\r\n    public String getColumnName(int column) {\r\n        String columnName = null;\r\n        if (column == DOCUMENT_CODE) {\r\n            columnName = MacawMessages.getMessage(\"supportingDocument.documentCode.label\");\r\n        } else if (column == DOCUMENT_TITLE) {\r\n            columnName = MacawMessages.getMessage(\"supportingDocument.title.label\");\r\n        } else if (column == DOCUMENT_DESCRIPTION) {\r\n            columnName = MacawMessages.getMessage(\"supportingDocument.description.label\");\r\n        }\r\n        return columnName;\r\n    }\r\n\r\n    public boolean isCellEditable(int row, int column) {\r\n        return false;\r\n    }\r\n\r\n    public int getColumnCount() {\r\n        return 3;\r\n    }\r\n\r\n    public int getRowCount() {\r\n        return supportingDocuments.size();\r\n    }\r\n\r\n    public Object getValueAt(int row, int column) {\r\n        SupportingDocument supportingDocument = supportingDocuments.get(row);\r\n        if (column == DOCUMENT_CODE) {\r\n            return supportingDocument.getDocumentCode();\r\n        } else if (column == DOCUMENT_TITLE) {\r\n            return supportingDocument.getTitle();\r\n        } else {\r\n            //assume it is document description\r\n            return supportingDocument.getDescription();\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/SupportingDocumentSearchTableModelTest.java",
		"test_prompt": "// SupportingDocumentSearchTableModelTest.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.businessLayer.MacawCurationAPI;\nimport macaw.businessLayer.SupportingDocument;\nimport javax.swing.table.AbstractTableModel;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SupportingDocumentSearchTableModel}.\n* It contains ten unit test cases for the {@link SupportingDocumentSearchTableModel#isCellEditable(int, int)} method.\n*/\nclass SupportingDocumentSearchTableModelTest {"
	},
	{
		"original_code": "// VariableSelectionDialog.java\npackage macaw.presentationLayer;\r\n\r\nimport macaw.system.*;\r\nimport macaw.businessLayer.Variable;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.*;\r\nimport javax.swing.*;\r\n\r\n/**\r\n * <p></p>\r\n * <hr>\r\n * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * <hr>\r\n * @author Kevin Garwood (kgarwood@users.sourceforge.net)\r\n * @version 1.0\r\n */\r\n/*\r\n * Code Road Map:\r\n * --------------\r\n * Code is organised into the following sections.  Wherever possible, \r\n * methods are classified based on an order of precedence described in \r\n * parentheses (..).  For example, if you're trying to find a method \r\n * 'getName(...)' that is both an interface method and an accessor \r\n * method, the order tells you it should appear under interface.\r\n * \r\n * Order of \r\n * Precedence     Section\r\n * ==========     ======\r\n * (1)            Section Constants\r\n * (2)            Section Properties\r\n * (3)            Section Construction\r\n * (7)            Section Accessors and Mutators\r\n * (6)            Section Errors and Validation\r\n * (5)            Section Interfaces\r\n * (4)            Section Overload\r\n *\r\n */\r\npublic class VariableSelectionDialog implements ActionListener {\r\n\r\n    // ==========================================\r\n    // Section Constants\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Properties\r\n    // ==========================================\r\n    private SessionProperties sessionProperties;\r\n\r\n    private UserInterfaceFactory userInterfaceFactory;\r\n\r\n    private VariableSearchPanel variableSearchPanel;\r\n\r\n    private JDialog dialog;\r\n\r\n    private JButton ok;\r\n\r\n    private JButton cancel;\r\n\r\n    private boolean isCancelled;\r\n\r\n    private Log log;\r\n\r\n    // ==========================================\r\n    // Section Construction\r\n    // ==========================================\r\n    public VariableSelectionDialog(SessionProperties sessionProperties) {\r\n        this.sessionProperties = sessionProperties;\r\n        this.userInterfaceFactory = sessionProperties.getUserInterfaceFactory();\r\n        dialog = userInterfaceFactory.createDialog();\r\n        String dialogTitle = MacawMessages.getMessage(\"variableSelectionDialog.title\");\r\n        dialog.setTitle(dialogTitle);\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.fill = GridBagConstraints.BOTH;\r\n        panelGC.weightx = 1.0;\r\n        panelGC.weighty = 1.0;\r\n        variableSearchPanel = new VariableSearchPanel(sessionProperties);\r\n        panel.add(variableSearchPanel.getPanel(), panelGC);\r\n        panelGC.gridy++;\r\n        panelGC.fill = GridBagConstraints.NONE;\r\n        panelGC.weightx = 0;\r\n        panelGC.weighty = 0;\r\n        panelGC.anchor = GridBagConstraints.SOUTHEAST;\r\n        panel.add(createButtonPanel(), panelGC);\r\n        dialog.getContentPane().add(panel);\r\n        dialog.setModal(true);\r\n        dialog.setSize(300, 300);\r\n        isCancelled = false;\r\n        this.log = sessionProperties.getLog();\r\n    }\r\n\r\n    private JPanel createButtonPanel() {\r\n        JPanel panel = userInterfaceFactory.createPanel();\r\n        GridBagConstraints panelGC = userInterfaceFactory.createGridBagConstraints();\r\n        panelGC.anchor = GridBagConstraints.SOUTHEAST;\r\n        String okText = MacawMessages.getMessage(\"general.buttons.ok\");\r\n        ok = userInterfaceFactory.createButton(okText);\r\n        ok.addActionListener(this);\r\n        panel.add(ok, panelGC);\r\n        panelGC.gridx++;\r\n        String cancelText = MacawMessages.getMessage(\"general.buttons.cancel\");\r\n        cancel = userInterfaceFactory.createButton(cancelText);\r\n        cancel.addActionListener(this);\r\n        panel.add(cancel, panelGC);\r\n        return panel;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Accessors and Mutators\r\n    // ==========================================\r\n    public Variable getAlternativeVariable() {\r\n        try {\r\n            Variable selectedVariable = variableSearchPanel.getSelectedVariable();\r\n            return selectedVariable;\r\n        } catch (MacawException exception) {\r\n            log.displayErrorDialog(exception);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public void show() {\r\n        dialog.setVisible(true);\r\n    }\r\n\r\n    private void ok() {\r\n        dialog.setVisible(false);\r\n    }\r\n\r\n    private void cancel() {\r\n        isCancelled = true;\r\n        dialog.setVisible(false);\r\n    }\r\n\r\n    public boolean isCancelled() {\r\n        return isCancelled;\r\n    }\r\n\r\n    // ==========================================\r\n    // Section Errors and Validation\r\n    // ==========================================\r\n    // ==========================================\r\n    // Section Interfaces\r\n    // ==========================================\r\n    //Interface: ActionListener\r\n    public void actionPerformed(ActionEvent event) {\r\n        Object button = event.getSource();\r\n        if (button == ok) {\r\n            ok();\r\n        } else if (button == cancel) {\r\n            cancel();\r\n        }\r\n    }\r\n    // ==========================================\r\n    // Section Overload\r\n    // ==========================================\r\n}\r\n",
		"id": "EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/presentationLayer/VariableSelectionDialogTest.java",
		"test_prompt": "// VariableSelectionDialogTest.java\npackage macaw.presentationLayer;\n\nimport macaw.system.*;\nimport macaw.businessLayer.Variable;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.*;\nimport javax.swing.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VariableSelectionDialog}.\n* It contains ten unit test cases for the {@link VariableSelectionDialog#isCancelled()} method.\n*/\nclass VariableSelectionDialogTest {"
	}
]