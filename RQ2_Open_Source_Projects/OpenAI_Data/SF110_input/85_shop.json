[
	{
		"original_code": "// JSSubstitution.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSSubstitution extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean fail;\r\n\r\n    JSSubstitution() {\r\n        super();\r\n        fail = false;\r\n    }\r\n\r\n    // Modified to represent compound substitution\r\n    public JSTerm instance(JSTerm var) {\r\n        JSPairVarTerm pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            if (var.equals(pair.var))\r\n                return pair.term();\r\n        }\r\n        return var;\r\n    }\r\n\r\n    public JSSubstitution cloneS() {\r\n        JSSubstitution newS = new JSSubstitution();\r\n        JSPairVarTerm pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            newS.addElement(pair.clonePVT());\r\n        }\r\n        return newS;\r\n    }\r\n\r\n    public boolean fail() {\r\n        return fail;\r\n    }\r\n\r\n    public void assignFailure() {\r\n        fail = true;\r\n    }\r\n\r\n    public void addElements(JSSubstitution l) {\r\n        short j, i;\r\n        JSPairVarTerm pair, p1, p2;\r\n        JSTerm t, v1, v2;\r\n        for (j = 0; j < this.size(); j++) {\r\n            pair = (JSPairVarTerm) this.elementAt(j);\r\n            t = pair.term().applySubstitutionT(l);\r\n            pair.setTerm(t);\r\n        }\r\n        boolean found;\r\n        for (i = 0; i < l.size(); i++) {\r\n            found = false;\r\n            for (j = 0; j < this.size(); j++) {\r\n                p1 = (JSPairVarTerm) this.elementAt(j);\r\n                p2 = (JSPairVarTerm) l.elementAt(i);\r\n                if (p1.var().equals(p2.var())) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found)\r\n                this.addElement(l.elementAt(i));\r\n        }\r\n    }\r\n\r\n    public void removeElements(JSSubstitution l) {\r\n        for (short i = 0; i < l.size(); i++) {\r\n            this.removeElement(l.elementAt(i));\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        if (this.fail()) {\r\n            JSUtil.print(\"failed substitution\");\r\n            return;\r\n        }\r\n        JSPairVarTerm pair;\r\n        JSUtil.print(\"[\");\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            pair.print();\r\n        }\r\n        JSUtil.println(\"]\");\r\n    }\r\n\r\n    public JSSubstitution standarizerSubs() {\r\n        JSSubstitution newSubs = new JSSubstitution();\r\n        JSPairVarTerm pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            newSubs.addElement(pair.standarizerPVT());\r\n        }\r\n        return newSubs;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSSubstitutionTest0.java",
		"test_prompt": "// JSSubstitutionTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSSubstitution}.\n* It contains ten unit test cases for the {@link JSSubstitution#instance(JSTerm)} method.\n*/\nclass JSSubstitutionTest0 {"
	},
	{
		"original_code": "// JSSubstitution.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSSubstitution extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean fail;\r\n\r\n    JSSubstitution() {\r\n        super();\r\n        fail = false;\r\n    }\r\n\r\n    // Modified to represent compound substitution\r\n    public JSTerm instance(JSTerm var) {\r\n        JSPairVarTerm pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            if (var.equals(pair.var))\r\n                return pair.term();\r\n        }\r\n        return var;\r\n    }\r\n\r\n    public JSSubstitution cloneS() {\r\n        JSSubstitution newS = new JSSubstitution();\r\n        JSPairVarTerm pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            newS.addElement(pair.clonePVT());\r\n        }\r\n        return newS;\r\n    }\r\n\r\n    public boolean fail() {\r\n        return fail;\r\n    }\r\n\r\n    public void assignFailure() {\r\n        fail = true;\r\n    }\r\n\r\n    public void addElements(JSSubstitution l) {\r\n        short j, i;\r\n        JSPairVarTerm pair, p1, p2;\r\n        JSTerm t, v1, v2;\r\n        for (j = 0; j < this.size(); j++) {\r\n            pair = (JSPairVarTerm) this.elementAt(j);\r\n            t = pair.term().applySubstitutionT(l);\r\n            pair.setTerm(t);\r\n        }\r\n        boolean found;\r\n        for (i = 0; i < l.size(); i++) {\r\n            found = false;\r\n            for (j = 0; j < this.size(); j++) {\r\n                p1 = (JSPairVarTerm) this.elementAt(j);\r\n                p2 = (JSPairVarTerm) l.elementAt(i);\r\n                if (p1.var().equals(p2.var())) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found)\r\n                this.addElement(l.elementAt(i));\r\n        }\r\n    }\r\n\r\n    public void removeElements(JSSubstitution l) {\r\n        for (short i = 0; i < l.size(); i++) {\r\n            this.removeElement(l.elementAt(i));\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        if (this.fail()) {\r\n            JSUtil.print(\"failed substitution\");\r\n            return;\r\n        }\r\n        JSPairVarTerm pair;\r\n        JSUtil.print(\"[\");\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            pair.print();\r\n        }\r\n        JSUtil.println(\"]\");\r\n    }\r\n\r\n    public JSSubstitution standarizerSubs() {\r\n        JSSubstitution newSubs = new JSSubstitution();\r\n        JSPairVarTerm pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            newSubs.addElement(pair.standarizerPVT());\r\n        }\r\n        return newSubs;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSSubstitutionTest1.java",
		"test_prompt": "// JSSubstitutionTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSSubstitution}.\n* It contains ten unit test cases for the {@link JSSubstitution#cloneS()} method.\n*/\nclass JSSubstitutionTest1 {"
	},
	{
		"original_code": "// JSSubstitution.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSSubstitution extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean fail;\r\n\r\n    JSSubstitution() {\r\n        super();\r\n        fail = false;\r\n    }\r\n\r\n    // Modified to represent compound substitution\r\n    public JSTerm instance(JSTerm var) {\r\n        JSPairVarTerm pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            if (var.equals(pair.var))\r\n                return pair.term();\r\n        }\r\n        return var;\r\n    }\r\n\r\n    public JSSubstitution cloneS() {\r\n        JSSubstitution newS = new JSSubstitution();\r\n        JSPairVarTerm pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            newS.addElement(pair.clonePVT());\r\n        }\r\n        return newS;\r\n    }\r\n\r\n    public boolean fail() {\r\n        return fail;\r\n    }\r\n\r\n    public void assignFailure() {\r\n        fail = true;\r\n    }\r\n\r\n    public void addElements(JSSubstitution l) {\r\n        short j, i;\r\n        JSPairVarTerm pair, p1, p2;\r\n        JSTerm t, v1, v2;\r\n        for (j = 0; j < this.size(); j++) {\r\n            pair = (JSPairVarTerm) this.elementAt(j);\r\n            t = pair.term().applySubstitutionT(l);\r\n            pair.setTerm(t);\r\n        }\r\n        boolean found;\r\n        for (i = 0; i < l.size(); i++) {\r\n            found = false;\r\n            for (j = 0; j < this.size(); j++) {\r\n                p1 = (JSPairVarTerm) this.elementAt(j);\r\n                p2 = (JSPairVarTerm) l.elementAt(i);\r\n                if (p1.var().equals(p2.var())) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found)\r\n                this.addElement(l.elementAt(i));\r\n        }\r\n    }\r\n\r\n    public void removeElements(JSSubstitution l) {\r\n        for (short i = 0; i < l.size(); i++) {\r\n            this.removeElement(l.elementAt(i));\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        if (this.fail()) {\r\n            JSUtil.print(\"failed substitution\");\r\n            return;\r\n        }\r\n        JSPairVarTerm pair;\r\n        JSUtil.print(\"[\");\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            pair.print();\r\n        }\r\n        JSUtil.println(\"]\");\r\n    }\r\n\r\n    public JSSubstitution standarizerSubs() {\r\n        JSSubstitution newSubs = new JSSubstitution();\r\n        JSPairVarTerm pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            newSubs.addElement(pair.standarizerPVT());\r\n        }\r\n        return newSubs;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSSubstitutionTest2.java",
		"test_prompt": "// JSSubstitutionTest2.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSSubstitution}.\n* It contains ten unit test cases for the {@link JSSubstitution#fail()} method.\n*/\nclass JSSubstitutionTest2 {"
	},
	{
		"original_code": "// JSSubstitution.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSSubstitution extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean fail;\r\n\r\n    JSSubstitution() {\r\n        super();\r\n        fail = false;\r\n    }\r\n\r\n    // Modified to represent compound substitution\r\n    public JSTerm instance(JSTerm var) {\r\n        JSPairVarTerm pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            if (var.equals(pair.var))\r\n                return pair.term();\r\n        }\r\n        return var;\r\n    }\r\n\r\n    public JSSubstitution cloneS() {\r\n        JSSubstitution newS = new JSSubstitution();\r\n        JSPairVarTerm pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            newS.addElement(pair.clonePVT());\r\n        }\r\n        return newS;\r\n    }\r\n\r\n    public boolean fail() {\r\n        return fail;\r\n    }\r\n\r\n    public void assignFailure() {\r\n        fail = true;\r\n    }\r\n\r\n    public void addElements(JSSubstitution l) {\r\n        short j, i;\r\n        JSPairVarTerm pair, p1, p2;\r\n        JSTerm t, v1, v2;\r\n        for (j = 0; j < this.size(); j++) {\r\n            pair = (JSPairVarTerm) this.elementAt(j);\r\n            t = pair.term().applySubstitutionT(l);\r\n            pair.setTerm(t);\r\n        }\r\n        boolean found;\r\n        for (i = 0; i < l.size(); i++) {\r\n            found = false;\r\n            for (j = 0; j < this.size(); j++) {\r\n                p1 = (JSPairVarTerm) this.elementAt(j);\r\n                p2 = (JSPairVarTerm) l.elementAt(i);\r\n                if (p1.var().equals(p2.var())) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found)\r\n                this.addElement(l.elementAt(i));\r\n        }\r\n    }\r\n\r\n    public void removeElements(JSSubstitution l) {\r\n        for (short i = 0; i < l.size(); i++) {\r\n            this.removeElement(l.elementAt(i));\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        if (this.fail()) {\r\n            JSUtil.print(\"failed substitution\");\r\n            return;\r\n        }\r\n        JSPairVarTerm pair;\r\n        JSUtil.print(\"[\");\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            pair.print();\r\n        }\r\n        JSUtil.println(\"]\");\r\n    }\r\n\r\n    public JSSubstitution standarizerSubs() {\r\n        JSSubstitution newSubs = new JSSubstitution();\r\n        JSPairVarTerm pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairVarTerm) this.elementAt(i);\r\n            newSubs.addElement(pair.standarizerPVT());\r\n        }\r\n        return newSubs;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSSubstitutionTest3.java",
		"test_prompt": "// JSSubstitutionTest3.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSSubstitution}.\n* It contains ten unit test cases for the {@link JSSubstitution#standarizerSubs()} method.\n*/\nclass JSSubstitutionTest3 {"
	},
	{
		"original_code": "// JSTasks.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSTasks extends JSListLogicalAtoms {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean fail;\r\n\r\n    JSTasks() {\r\n        super();\r\n    }\r\n\r\n    JSTasks(StreamTokenizer tokenizer) {\r\n        super();\r\n        JSTaskAtom ta;\r\n        JSUtil.flagParser(\"in ListTasks()\");\r\n        if (!JSUtil.readToken(tokenizer, \"List of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        /*  If this is an empty list \"nil\"    */\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\r\n            return;\r\n        tokenizer.pushBack();\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \" Expecting '(' \"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting list of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            ta = new JSTaskAtom(tokenizer);\r\n            if (ta.size() != 0) {\r\n                this.addElement(ta);\r\n            } else {\r\n                JSUtil.println(\"Line: \" + tokenizer.lineno() + \" parsing list of tasks: unexpected atom\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')'\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        //  JSUtil.flagParser(\"ListTasks parse succesful\");\r\n    }\r\n\r\n    public JSPairPlanTState seekPlan(JSTState ts, JSPlanningDomain dom, JSPlan pl, Vector listNodes) {\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        if (this.isEmpty()) {\r\n            return new JSPairPlanTState(pl, ts);\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        rest.removeElement(t);\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                // failure\r\n                return pair;\r\n            } else {\r\n                pl.addElements(ans);\r\n                listNodes.addElement(new JSJshopNode(t, new Vector()));\r\n                return rest.seekPlan(pair.tState(), dom, pl, listNodes);\r\n            }\r\n        } else {\r\n            JSJshopNode node;\r\n            JSReduction red = new JSReduction();\r\n            //counter to iterate\r\n            red = t.reduce(dom, ts.state(), red);\r\n            // on all reductions\r\n            JSTasks newTasks;\r\n            JSMethod selMet = red.selectedMethod();\r\n            while (!red.isDummy()) {\r\n                newTasks = (JSTasks) red.reduction();\r\n                node = new JSJshopNode(t, newTasks.cloneTasks());\r\n                //  JSUtil.flag(\"<- tasks\");\r\n                newTasks.addElements(rest);\r\n                pair = newTasks.seekPlan(ts, dom, pl, listNodes);\r\n                if (!pair.plan().isFailure()) {\r\n                    //  JSUtil.flag(\"reduced\");\r\n                    listNodes.addElement(node);\r\n                    return pair;\r\n                }\r\n                // JSUtil.flag(\"iterating\");\r\n                red = t.reduce(dom, ts.state(), red);\r\n                selMet = red.selectedMethod();\r\n            }\r\n        }\r\n        ans = new JSPlan();\r\n        ans.assignFailure();\r\n        return new JSPairPlanTState(ans, new JSTState());\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    //  Multi plan generator\r\n    /**\r\n     * **************************************************************\r\n     */\r\n    public JSListPairPlanTStateNodes seekPlanAll(JSTState ts, JSPlanningDomain dom, boolean All) {\r\n        JSListPairPlanTStateNodes results, plans = new JSListPairPlanTStateNodes();\r\n        JSPairPlanTSListNodes ptl;\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        JSJshopNode node;\r\n        Vector listnodes;\r\n        JSTaskAtom ta;\r\n        JSTState tts;\r\n        if (this.isEmpty()) {\r\n            if (JSJshopVars.flagLevel > 1)\r\n                JSUtil.println(\"Returning successfully from find-plan : No more tasks to plan\");\r\n            pair = new JSPairPlanTState((new JSPlan()), ts);\r\n            ptl = new JSPairPlanTSListNodes(pair, new Vector());\r\n            plans.addElement(ptl);\r\n            return plans;\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        if (JSJshopVars.flagLevel > 2) {\r\n            JSUtil.println(\" \");\r\n            JSUtil.print(\"Searching a plan for\");\r\n            t.print();\r\n        }\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                if (JSJshopVars.flagLevel > 1)\r\n                    JSUtil.println(\"Returning failure from find-plan: Can not find an operator\");\r\n                // failure - empty list\r\n                return plans;\r\n            }\r\n            results = rest.seekPlanAll(pair.tState(), dom, All);\r\n            if (results.isEmpty())\r\n                return plans;\r\n            ta = (JSTaskAtom) ans.elementAt(0);\r\n            node = new JSJshopNode(t, new Vector());\r\n            for (int i = 0; i < results.size(); i++) {\r\n                ptl = (JSPairPlanTSListNodes) results.elementAt(i);\r\n                ptl.planS().plan().insertWithCost(0, ta, ans.elementCost(0));\r\n                ptl.listNodes().insertElementAt(node, 0);\r\n                plans.addElement(ptl);\r\n            }\r\n            return plans;\r\n        }\r\n        JSAllReduction red = new JSAllReduction();\r\n        red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n        JSTasks newTasks;\r\n        JSMethod selMet = red.selectedMethod();\r\n        if (JSJshopVars.flagLevel > 1 && red.isDummy())\r\n            JSUtil.println(\"Returning failure from find-plan: Can not find an applicable method\");\r\n        while (!red.isDummy()) {\r\n            if (JSJshopVars.flagLevel > 4) {\r\n                JSUtil.println(\"The reductions are: \");\r\n                red.printReductions();\r\n            }\r\n            for (int k = 0; k < red.reductions().size(); k++) {\r\n                newTasks = (JSTasks) red.reductions().elementAt(k);\r\n                node = new JSJshopNode((JSTaskAtom) t.clone(), newTasks.cloneTasks());\r\n                newTasks.addElements(rest);\r\n                results = newTasks.seekPlanAll(new JSTState(ts), dom, All);\r\n                if (results.isEmpty())\r\n                    continue;\r\n                for (int j = 0; j < results.size(); j++) {\r\n                    ptl = (JSPairPlanTSListNodes) results.elementAt(j);\r\n                    ptl.listNodes().addElement(node);\r\n                    plans.addElement(ptl);\r\n                    if (plans.size() >= 1 && !All)\r\n                        return plans;\r\n                }\r\n            }\r\n            red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n            selMet = red.selectedMethod();\r\n        }\r\n        return plans;\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    public boolean fail() {\r\n        return fail;\r\n    }\r\n\r\n    public void makeFail() {\r\n        fail = true;\r\n    }\r\n\r\n    public void makeSucceed() {\r\n        fail = false;\r\n    }\r\n\r\n    public JSTasks applySubstitutionTasks(JSSubstitution alpha) {\r\n        JSTasks nt = new JSTasks();\r\n        JSTaskAtom ti;\r\n        JSTaskAtom nti;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            ti = (JSTaskAtom) this.elementAt(i);\r\n            //ti.print();\r\n            nti = ti.applySubstitutionTA(alpha);\r\n            //nti.print();\r\n            nt.addElement(nti);\r\n            //nt.print();\r\n            //JSUtil.flag(\"<-- applyJSTasks\");\r\n        }\r\n        /* nt.print();\r\n    // JSUtil.flag(\"<-- final applyTasks\");*/\r\n        return nt;\r\n    }\r\n\r\n    public boolean contains(JSTaskAtom t) {\r\n        JSTaskAtom el;\r\n        for (int i = this.size() - 1; i > -1; i--) {\r\n            el = (JSTaskAtom) this.elementAt(i);\r\n            /*JSUtil.print(\"JSTaskAtom:\");\r\n            el.print();\r\n            JSUtil.print(\" equals: \");\r\n            t.print();\r\n            JSUtil.flag(\"?\");*/\r\n            if (t.equals(el)) {\r\n                //JSUtil.flag(\"YES\");\r\n                return true;\r\n            }\r\n        }\r\n        //JSUtil.flag(\"NO\");\r\n        return false;\r\n    }\r\n\r\n    public JSTasks cloneTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.cloneTA());\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks cdr() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t);\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks standarizerTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.standarizerTA());\r\n        }\r\n        return newTs;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTasksTest0.java",
		"test_prompt": "// JSTasksTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTasks}.\n* It contains ten unit test cases for the {@link JSTasks#seekPlan(JSTState, JSPlanningDomain, JSPlan, Vector)} method.\n*/\nclass JSTasksTest0 {"
	},
	{
		"original_code": "// JSTasks.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSTasks extends JSListLogicalAtoms {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean fail;\r\n\r\n    JSTasks() {\r\n        super();\r\n    }\r\n\r\n    JSTasks(StreamTokenizer tokenizer) {\r\n        super();\r\n        JSTaskAtom ta;\r\n        JSUtil.flagParser(\"in ListTasks()\");\r\n        if (!JSUtil.readToken(tokenizer, \"List of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        /*  If this is an empty list \"nil\"    */\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\r\n            return;\r\n        tokenizer.pushBack();\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \" Expecting '(' \"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting list of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            ta = new JSTaskAtom(tokenizer);\r\n            if (ta.size() != 0) {\r\n                this.addElement(ta);\r\n            } else {\r\n                JSUtil.println(\"Line: \" + tokenizer.lineno() + \" parsing list of tasks: unexpected atom\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')'\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        //  JSUtil.flagParser(\"ListTasks parse succesful\");\r\n    }\r\n\r\n    public JSPairPlanTState seekPlan(JSTState ts, JSPlanningDomain dom, JSPlan pl, Vector listNodes) {\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        if (this.isEmpty()) {\r\n            return new JSPairPlanTState(pl, ts);\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        rest.removeElement(t);\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                // failure\r\n                return pair;\r\n            } else {\r\n                pl.addElements(ans);\r\n                listNodes.addElement(new JSJshopNode(t, new Vector()));\r\n                return rest.seekPlan(pair.tState(), dom, pl, listNodes);\r\n            }\r\n        } else {\r\n            JSJshopNode node;\r\n            JSReduction red = new JSReduction();\r\n            //counter to iterate\r\n            red = t.reduce(dom, ts.state(), red);\r\n            // on all reductions\r\n            JSTasks newTasks;\r\n            JSMethod selMet = red.selectedMethod();\r\n            while (!red.isDummy()) {\r\n                newTasks = (JSTasks) red.reduction();\r\n                node = new JSJshopNode(t, newTasks.cloneTasks());\r\n                //  JSUtil.flag(\"<- tasks\");\r\n                newTasks.addElements(rest);\r\n                pair = newTasks.seekPlan(ts, dom, pl, listNodes);\r\n                if (!pair.plan().isFailure()) {\r\n                    //  JSUtil.flag(\"reduced\");\r\n                    listNodes.addElement(node);\r\n                    return pair;\r\n                }\r\n                // JSUtil.flag(\"iterating\");\r\n                red = t.reduce(dom, ts.state(), red);\r\n                selMet = red.selectedMethod();\r\n            }\r\n        }\r\n        ans = new JSPlan();\r\n        ans.assignFailure();\r\n        return new JSPairPlanTState(ans, new JSTState());\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    //  Multi plan generator\r\n    /**\r\n     * **************************************************************\r\n     */\r\n    public JSListPairPlanTStateNodes seekPlanAll(JSTState ts, JSPlanningDomain dom, boolean All) {\r\n        JSListPairPlanTStateNodes results, plans = new JSListPairPlanTStateNodes();\r\n        JSPairPlanTSListNodes ptl;\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        JSJshopNode node;\r\n        Vector listnodes;\r\n        JSTaskAtom ta;\r\n        JSTState tts;\r\n        if (this.isEmpty()) {\r\n            if (JSJshopVars.flagLevel > 1)\r\n                JSUtil.println(\"Returning successfully from find-plan : No more tasks to plan\");\r\n            pair = new JSPairPlanTState((new JSPlan()), ts);\r\n            ptl = new JSPairPlanTSListNodes(pair, new Vector());\r\n            plans.addElement(ptl);\r\n            return plans;\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        if (JSJshopVars.flagLevel > 2) {\r\n            JSUtil.println(\" \");\r\n            JSUtil.print(\"Searching a plan for\");\r\n            t.print();\r\n        }\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                if (JSJshopVars.flagLevel > 1)\r\n                    JSUtil.println(\"Returning failure from find-plan: Can not find an operator\");\r\n                // failure - empty list\r\n                return plans;\r\n            }\r\n            results = rest.seekPlanAll(pair.tState(), dom, All);\r\n            if (results.isEmpty())\r\n                return plans;\r\n            ta = (JSTaskAtom) ans.elementAt(0);\r\n            node = new JSJshopNode(t, new Vector());\r\n            for (int i = 0; i < results.size(); i++) {\r\n                ptl = (JSPairPlanTSListNodes) results.elementAt(i);\r\n                ptl.planS().plan().insertWithCost(0, ta, ans.elementCost(0));\r\n                ptl.listNodes().insertElementAt(node, 0);\r\n                plans.addElement(ptl);\r\n            }\r\n            return plans;\r\n        }\r\n        JSAllReduction red = new JSAllReduction();\r\n        red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n        JSTasks newTasks;\r\n        JSMethod selMet = red.selectedMethod();\r\n        if (JSJshopVars.flagLevel > 1 && red.isDummy())\r\n            JSUtil.println(\"Returning failure from find-plan: Can not find an applicable method\");\r\n        while (!red.isDummy()) {\r\n            if (JSJshopVars.flagLevel > 4) {\r\n                JSUtil.println(\"The reductions are: \");\r\n                red.printReductions();\r\n            }\r\n            for (int k = 0; k < red.reductions().size(); k++) {\r\n                newTasks = (JSTasks) red.reductions().elementAt(k);\r\n                node = new JSJshopNode((JSTaskAtom) t.clone(), newTasks.cloneTasks());\r\n                newTasks.addElements(rest);\r\n                results = newTasks.seekPlanAll(new JSTState(ts), dom, All);\r\n                if (results.isEmpty())\r\n                    continue;\r\n                for (int j = 0; j < results.size(); j++) {\r\n                    ptl = (JSPairPlanTSListNodes) results.elementAt(j);\r\n                    ptl.listNodes().addElement(node);\r\n                    plans.addElement(ptl);\r\n                    if (plans.size() >= 1 && !All)\r\n                        return plans;\r\n                }\r\n            }\r\n            red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n            selMet = red.selectedMethod();\r\n        }\r\n        return plans;\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    public boolean fail() {\r\n        return fail;\r\n    }\r\n\r\n    public void makeFail() {\r\n        fail = true;\r\n    }\r\n\r\n    public void makeSucceed() {\r\n        fail = false;\r\n    }\r\n\r\n    public JSTasks applySubstitutionTasks(JSSubstitution alpha) {\r\n        JSTasks nt = new JSTasks();\r\n        JSTaskAtom ti;\r\n        JSTaskAtom nti;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            ti = (JSTaskAtom) this.elementAt(i);\r\n            //ti.print();\r\n            nti = ti.applySubstitutionTA(alpha);\r\n            //nti.print();\r\n            nt.addElement(nti);\r\n            //nt.print();\r\n            //JSUtil.flag(\"<-- applyJSTasks\");\r\n        }\r\n        /* nt.print();\r\n    // JSUtil.flag(\"<-- final applyTasks\");*/\r\n        return nt;\r\n    }\r\n\r\n    public boolean contains(JSTaskAtom t) {\r\n        JSTaskAtom el;\r\n        for (int i = this.size() - 1; i > -1; i--) {\r\n            el = (JSTaskAtom) this.elementAt(i);\r\n            /*JSUtil.print(\"JSTaskAtom:\");\r\n            el.print();\r\n            JSUtil.print(\" equals: \");\r\n            t.print();\r\n            JSUtil.flag(\"?\");*/\r\n            if (t.equals(el)) {\r\n                //JSUtil.flag(\"YES\");\r\n                return true;\r\n            }\r\n        }\r\n        //JSUtil.flag(\"NO\");\r\n        return false;\r\n    }\r\n\r\n    public JSTasks cloneTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.cloneTA());\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks cdr() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t);\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks standarizerTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.standarizerTA());\r\n        }\r\n        return newTs;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTasksTest1.java",
		"test_prompt": "// JSTasksTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTasks}.\n* It contains ten unit test cases for the {@link JSTasks#seekPlanAll(JSTState, JSPlanningDomain, boolean)} method.\n*/\nclass JSTasksTest1 {"
	},
	{
		"original_code": "// JSTasks.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSTasks extends JSListLogicalAtoms {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean fail;\r\n\r\n    JSTasks() {\r\n        super();\r\n    }\r\n\r\n    JSTasks(StreamTokenizer tokenizer) {\r\n        super();\r\n        JSTaskAtom ta;\r\n        JSUtil.flagParser(\"in ListTasks()\");\r\n        if (!JSUtil.readToken(tokenizer, \"List of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        /*  If this is an empty list \"nil\"    */\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\r\n            return;\r\n        tokenizer.pushBack();\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \" Expecting '(' \"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting list of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            ta = new JSTaskAtom(tokenizer);\r\n            if (ta.size() != 0) {\r\n                this.addElement(ta);\r\n            } else {\r\n                JSUtil.println(\"Line: \" + tokenizer.lineno() + \" parsing list of tasks: unexpected atom\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')'\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        //  JSUtil.flagParser(\"ListTasks parse succesful\");\r\n    }\r\n\r\n    public JSPairPlanTState seekPlan(JSTState ts, JSPlanningDomain dom, JSPlan pl, Vector listNodes) {\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        if (this.isEmpty()) {\r\n            return new JSPairPlanTState(pl, ts);\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        rest.removeElement(t);\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                // failure\r\n                return pair;\r\n            } else {\r\n                pl.addElements(ans);\r\n                listNodes.addElement(new JSJshopNode(t, new Vector()));\r\n                return rest.seekPlan(pair.tState(), dom, pl, listNodes);\r\n            }\r\n        } else {\r\n            JSJshopNode node;\r\n            JSReduction red = new JSReduction();\r\n            //counter to iterate\r\n            red = t.reduce(dom, ts.state(), red);\r\n            // on all reductions\r\n            JSTasks newTasks;\r\n            JSMethod selMet = red.selectedMethod();\r\n            while (!red.isDummy()) {\r\n                newTasks = (JSTasks) red.reduction();\r\n                node = new JSJshopNode(t, newTasks.cloneTasks());\r\n                //  JSUtil.flag(\"<- tasks\");\r\n                newTasks.addElements(rest);\r\n                pair = newTasks.seekPlan(ts, dom, pl, listNodes);\r\n                if (!pair.plan().isFailure()) {\r\n                    //  JSUtil.flag(\"reduced\");\r\n                    listNodes.addElement(node);\r\n                    return pair;\r\n                }\r\n                // JSUtil.flag(\"iterating\");\r\n                red = t.reduce(dom, ts.state(), red);\r\n                selMet = red.selectedMethod();\r\n            }\r\n        }\r\n        ans = new JSPlan();\r\n        ans.assignFailure();\r\n        return new JSPairPlanTState(ans, new JSTState());\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    //  Multi plan generator\r\n    /**\r\n     * **************************************************************\r\n     */\r\n    public JSListPairPlanTStateNodes seekPlanAll(JSTState ts, JSPlanningDomain dom, boolean All) {\r\n        JSListPairPlanTStateNodes results, plans = new JSListPairPlanTStateNodes();\r\n        JSPairPlanTSListNodes ptl;\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        JSJshopNode node;\r\n        Vector listnodes;\r\n        JSTaskAtom ta;\r\n        JSTState tts;\r\n        if (this.isEmpty()) {\r\n            if (JSJshopVars.flagLevel > 1)\r\n                JSUtil.println(\"Returning successfully from find-plan : No more tasks to plan\");\r\n            pair = new JSPairPlanTState((new JSPlan()), ts);\r\n            ptl = new JSPairPlanTSListNodes(pair, new Vector());\r\n            plans.addElement(ptl);\r\n            return plans;\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        if (JSJshopVars.flagLevel > 2) {\r\n            JSUtil.println(\" \");\r\n            JSUtil.print(\"Searching a plan for\");\r\n            t.print();\r\n        }\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                if (JSJshopVars.flagLevel > 1)\r\n                    JSUtil.println(\"Returning failure from find-plan: Can not find an operator\");\r\n                // failure - empty list\r\n                return plans;\r\n            }\r\n            results = rest.seekPlanAll(pair.tState(), dom, All);\r\n            if (results.isEmpty())\r\n                return plans;\r\n            ta = (JSTaskAtom) ans.elementAt(0);\r\n            node = new JSJshopNode(t, new Vector());\r\n            for (int i = 0; i < results.size(); i++) {\r\n                ptl = (JSPairPlanTSListNodes) results.elementAt(i);\r\n                ptl.planS().plan().insertWithCost(0, ta, ans.elementCost(0));\r\n                ptl.listNodes().insertElementAt(node, 0);\r\n                plans.addElement(ptl);\r\n            }\r\n            return plans;\r\n        }\r\n        JSAllReduction red = new JSAllReduction();\r\n        red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n        JSTasks newTasks;\r\n        JSMethod selMet = red.selectedMethod();\r\n        if (JSJshopVars.flagLevel > 1 && red.isDummy())\r\n            JSUtil.println(\"Returning failure from find-plan: Can not find an applicable method\");\r\n        while (!red.isDummy()) {\r\n            if (JSJshopVars.flagLevel > 4) {\r\n                JSUtil.println(\"The reductions are: \");\r\n                red.printReductions();\r\n            }\r\n            for (int k = 0; k < red.reductions().size(); k++) {\r\n                newTasks = (JSTasks) red.reductions().elementAt(k);\r\n                node = new JSJshopNode((JSTaskAtom) t.clone(), newTasks.cloneTasks());\r\n                newTasks.addElements(rest);\r\n                results = newTasks.seekPlanAll(new JSTState(ts), dom, All);\r\n                if (results.isEmpty())\r\n                    continue;\r\n                for (int j = 0; j < results.size(); j++) {\r\n                    ptl = (JSPairPlanTSListNodes) results.elementAt(j);\r\n                    ptl.listNodes().addElement(node);\r\n                    plans.addElement(ptl);\r\n                    if (plans.size() >= 1 && !All)\r\n                        return plans;\r\n                }\r\n            }\r\n            red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n            selMet = red.selectedMethod();\r\n        }\r\n        return plans;\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    public boolean fail() {\r\n        return fail;\r\n    }\r\n\r\n    public void makeFail() {\r\n        fail = true;\r\n    }\r\n\r\n    public void makeSucceed() {\r\n        fail = false;\r\n    }\r\n\r\n    public JSTasks applySubstitutionTasks(JSSubstitution alpha) {\r\n        JSTasks nt = new JSTasks();\r\n        JSTaskAtom ti;\r\n        JSTaskAtom nti;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            ti = (JSTaskAtom) this.elementAt(i);\r\n            //ti.print();\r\n            nti = ti.applySubstitutionTA(alpha);\r\n            //nti.print();\r\n            nt.addElement(nti);\r\n            //nt.print();\r\n            //JSUtil.flag(\"<-- applyJSTasks\");\r\n        }\r\n        /* nt.print();\r\n    // JSUtil.flag(\"<-- final applyTasks\");*/\r\n        return nt;\r\n    }\r\n\r\n    public boolean contains(JSTaskAtom t) {\r\n        JSTaskAtom el;\r\n        for (int i = this.size() - 1; i > -1; i--) {\r\n            el = (JSTaskAtom) this.elementAt(i);\r\n            /*JSUtil.print(\"JSTaskAtom:\");\r\n            el.print();\r\n            JSUtil.print(\" equals: \");\r\n            t.print();\r\n            JSUtil.flag(\"?\");*/\r\n            if (t.equals(el)) {\r\n                //JSUtil.flag(\"YES\");\r\n                return true;\r\n            }\r\n        }\r\n        //JSUtil.flag(\"NO\");\r\n        return false;\r\n    }\r\n\r\n    public JSTasks cloneTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.cloneTA());\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks cdr() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t);\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks standarizerTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.standarizerTA());\r\n        }\r\n        return newTs;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTasksTest2.java",
		"test_prompt": "// JSTasksTest2.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTasks}.\n* It contains ten unit test cases for the {@link JSTasks#fail()} method.\n*/\nclass JSTasksTest2 {"
	},
	{
		"original_code": "// JSTasks.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSTasks extends JSListLogicalAtoms {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean fail;\r\n\r\n    JSTasks() {\r\n        super();\r\n    }\r\n\r\n    JSTasks(StreamTokenizer tokenizer) {\r\n        super();\r\n        JSTaskAtom ta;\r\n        JSUtil.flagParser(\"in ListTasks()\");\r\n        if (!JSUtil.readToken(tokenizer, \"List of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        /*  If this is an empty list \"nil\"    */\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\r\n            return;\r\n        tokenizer.pushBack();\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \" Expecting '(' \"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting list of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            ta = new JSTaskAtom(tokenizer);\r\n            if (ta.size() != 0) {\r\n                this.addElement(ta);\r\n            } else {\r\n                JSUtil.println(\"Line: \" + tokenizer.lineno() + \" parsing list of tasks: unexpected atom\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')'\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        //  JSUtil.flagParser(\"ListTasks parse succesful\");\r\n    }\r\n\r\n    public JSPairPlanTState seekPlan(JSTState ts, JSPlanningDomain dom, JSPlan pl, Vector listNodes) {\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        if (this.isEmpty()) {\r\n            return new JSPairPlanTState(pl, ts);\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        rest.removeElement(t);\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                // failure\r\n                return pair;\r\n            } else {\r\n                pl.addElements(ans);\r\n                listNodes.addElement(new JSJshopNode(t, new Vector()));\r\n                return rest.seekPlan(pair.tState(), dom, pl, listNodes);\r\n            }\r\n        } else {\r\n            JSJshopNode node;\r\n            JSReduction red = new JSReduction();\r\n            //counter to iterate\r\n            red = t.reduce(dom, ts.state(), red);\r\n            // on all reductions\r\n            JSTasks newTasks;\r\n            JSMethod selMet = red.selectedMethod();\r\n            while (!red.isDummy()) {\r\n                newTasks = (JSTasks) red.reduction();\r\n                node = new JSJshopNode(t, newTasks.cloneTasks());\r\n                //  JSUtil.flag(\"<- tasks\");\r\n                newTasks.addElements(rest);\r\n                pair = newTasks.seekPlan(ts, dom, pl, listNodes);\r\n                if (!pair.plan().isFailure()) {\r\n                    //  JSUtil.flag(\"reduced\");\r\n                    listNodes.addElement(node);\r\n                    return pair;\r\n                }\r\n                // JSUtil.flag(\"iterating\");\r\n                red = t.reduce(dom, ts.state(), red);\r\n                selMet = red.selectedMethod();\r\n            }\r\n        }\r\n        ans = new JSPlan();\r\n        ans.assignFailure();\r\n        return new JSPairPlanTState(ans, new JSTState());\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    //  Multi plan generator\r\n    /**\r\n     * **************************************************************\r\n     */\r\n    public JSListPairPlanTStateNodes seekPlanAll(JSTState ts, JSPlanningDomain dom, boolean All) {\r\n        JSListPairPlanTStateNodes results, plans = new JSListPairPlanTStateNodes();\r\n        JSPairPlanTSListNodes ptl;\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        JSJshopNode node;\r\n        Vector listnodes;\r\n        JSTaskAtom ta;\r\n        JSTState tts;\r\n        if (this.isEmpty()) {\r\n            if (JSJshopVars.flagLevel > 1)\r\n                JSUtil.println(\"Returning successfully from find-plan : No more tasks to plan\");\r\n            pair = new JSPairPlanTState((new JSPlan()), ts);\r\n            ptl = new JSPairPlanTSListNodes(pair, new Vector());\r\n            plans.addElement(ptl);\r\n            return plans;\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        if (JSJshopVars.flagLevel > 2) {\r\n            JSUtil.println(\" \");\r\n            JSUtil.print(\"Searching a plan for\");\r\n            t.print();\r\n        }\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                if (JSJshopVars.flagLevel > 1)\r\n                    JSUtil.println(\"Returning failure from find-plan: Can not find an operator\");\r\n                // failure - empty list\r\n                return plans;\r\n            }\r\n            results = rest.seekPlanAll(pair.tState(), dom, All);\r\n            if (results.isEmpty())\r\n                return plans;\r\n            ta = (JSTaskAtom) ans.elementAt(0);\r\n            node = new JSJshopNode(t, new Vector());\r\n            for (int i = 0; i < results.size(); i++) {\r\n                ptl = (JSPairPlanTSListNodes) results.elementAt(i);\r\n                ptl.planS().plan().insertWithCost(0, ta, ans.elementCost(0));\r\n                ptl.listNodes().insertElementAt(node, 0);\r\n                plans.addElement(ptl);\r\n            }\r\n            return plans;\r\n        }\r\n        JSAllReduction red = new JSAllReduction();\r\n        red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n        JSTasks newTasks;\r\n        JSMethod selMet = red.selectedMethod();\r\n        if (JSJshopVars.flagLevel > 1 && red.isDummy())\r\n            JSUtil.println(\"Returning failure from find-plan: Can not find an applicable method\");\r\n        while (!red.isDummy()) {\r\n            if (JSJshopVars.flagLevel > 4) {\r\n                JSUtil.println(\"The reductions are: \");\r\n                red.printReductions();\r\n            }\r\n            for (int k = 0; k < red.reductions().size(); k++) {\r\n                newTasks = (JSTasks) red.reductions().elementAt(k);\r\n                node = new JSJshopNode((JSTaskAtom) t.clone(), newTasks.cloneTasks());\r\n                newTasks.addElements(rest);\r\n                results = newTasks.seekPlanAll(new JSTState(ts), dom, All);\r\n                if (results.isEmpty())\r\n                    continue;\r\n                for (int j = 0; j < results.size(); j++) {\r\n                    ptl = (JSPairPlanTSListNodes) results.elementAt(j);\r\n                    ptl.listNodes().addElement(node);\r\n                    plans.addElement(ptl);\r\n                    if (plans.size() >= 1 && !All)\r\n                        return plans;\r\n                }\r\n            }\r\n            red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n            selMet = red.selectedMethod();\r\n        }\r\n        return plans;\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    public boolean fail() {\r\n        return fail;\r\n    }\r\n\r\n    public void makeFail() {\r\n        fail = true;\r\n    }\r\n\r\n    public void makeSucceed() {\r\n        fail = false;\r\n    }\r\n\r\n    public JSTasks applySubstitutionTasks(JSSubstitution alpha) {\r\n        JSTasks nt = new JSTasks();\r\n        JSTaskAtom ti;\r\n        JSTaskAtom nti;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            ti = (JSTaskAtom) this.elementAt(i);\r\n            //ti.print();\r\n            nti = ti.applySubstitutionTA(alpha);\r\n            //nti.print();\r\n            nt.addElement(nti);\r\n            //nt.print();\r\n            //JSUtil.flag(\"<-- applyJSTasks\");\r\n        }\r\n        /* nt.print();\r\n    // JSUtil.flag(\"<-- final applyTasks\");*/\r\n        return nt;\r\n    }\r\n\r\n    public boolean contains(JSTaskAtom t) {\r\n        JSTaskAtom el;\r\n        for (int i = this.size() - 1; i > -1; i--) {\r\n            el = (JSTaskAtom) this.elementAt(i);\r\n            /*JSUtil.print(\"JSTaskAtom:\");\r\n            el.print();\r\n            JSUtil.print(\" equals: \");\r\n            t.print();\r\n            JSUtil.flag(\"?\");*/\r\n            if (t.equals(el)) {\r\n                //JSUtil.flag(\"YES\");\r\n                return true;\r\n            }\r\n        }\r\n        //JSUtil.flag(\"NO\");\r\n        return false;\r\n    }\r\n\r\n    public JSTasks cloneTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.cloneTA());\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks cdr() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t);\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks standarizerTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.standarizerTA());\r\n        }\r\n        return newTs;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTasksTest3.java",
		"test_prompt": "// JSTasksTest3.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTasks}.\n* It contains ten unit test cases for the {@link JSTasks#applySubstitutionTasks(JSSubstitution)} method.\n*/\nclass JSTasksTest3 {"
	},
	{
		"original_code": "// JSTasks.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSTasks extends JSListLogicalAtoms {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean fail;\r\n\r\n    JSTasks() {\r\n        super();\r\n    }\r\n\r\n    JSTasks(StreamTokenizer tokenizer) {\r\n        super();\r\n        JSTaskAtom ta;\r\n        JSUtil.flagParser(\"in ListTasks()\");\r\n        if (!JSUtil.readToken(tokenizer, \"List of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        /*  If this is an empty list \"nil\"    */\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\r\n            return;\r\n        tokenizer.pushBack();\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \" Expecting '(' \"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting list of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            ta = new JSTaskAtom(tokenizer);\r\n            if (ta.size() != 0) {\r\n                this.addElement(ta);\r\n            } else {\r\n                JSUtil.println(\"Line: \" + tokenizer.lineno() + \" parsing list of tasks: unexpected atom\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')'\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        //  JSUtil.flagParser(\"ListTasks parse succesful\");\r\n    }\r\n\r\n    public JSPairPlanTState seekPlan(JSTState ts, JSPlanningDomain dom, JSPlan pl, Vector listNodes) {\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        if (this.isEmpty()) {\r\n            return new JSPairPlanTState(pl, ts);\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        rest.removeElement(t);\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                // failure\r\n                return pair;\r\n            } else {\r\n                pl.addElements(ans);\r\n                listNodes.addElement(new JSJshopNode(t, new Vector()));\r\n                return rest.seekPlan(pair.tState(), dom, pl, listNodes);\r\n            }\r\n        } else {\r\n            JSJshopNode node;\r\n            JSReduction red = new JSReduction();\r\n            //counter to iterate\r\n            red = t.reduce(dom, ts.state(), red);\r\n            // on all reductions\r\n            JSTasks newTasks;\r\n            JSMethod selMet = red.selectedMethod();\r\n            while (!red.isDummy()) {\r\n                newTasks = (JSTasks) red.reduction();\r\n                node = new JSJshopNode(t, newTasks.cloneTasks());\r\n                //  JSUtil.flag(\"<- tasks\");\r\n                newTasks.addElements(rest);\r\n                pair = newTasks.seekPlan(ts, dom, pl, listNodes);\r\n                if (!pair.plan().isFailure()) {\r\n                    //  JSUtil.flag(\"reduced\");\r\n                    listNodes.addElement(node);\r\n                    return pair;\r\n                }\r\n                // JSUtil.flag(\"iterating\");\r\n                red = t.reduce(dom, ts.state(), red);\r\n                selMet = red.selectedMethod();\r\n            }\r\n        }\r\n        ans = new JSPlan();\r\n        ans.assignFailure();\r\n        return new JSPairPlanTState(ans, new JSTState());\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    //  Multi plan generator\r\n    /**\r\n     * **************************************************************\r\n     */\r\n    public JSListPairPlanTStateNodes seekPlanAll(JSTState ts, JSPlanningDomain dom, boolean All) {\r\n        JSListPairPlanTStateNodes results, plans = new JSListPairPlanTStateNodes();\r\n        JSPairPlanTSListNodes ptl;\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        JSJshopNode node;\r\n        Vector listnodes;\r\n        JSTaskAtom ta;\r\n        JSTState tts;\r\n        if (this.isEmpty()) {\r\n            if (JSJshopVars.flagLevel > 1)\r\n                JSUtil.println(\"Returning successfully from find-plan : No more tasks to plan\");\r\n            pair = new JSPairPlanTState((new JSPlan()), ts);\r\n            ptl = new JSPairPlanTSListNodes(pair, new Vector());\r\n            plans.addElement(ptl);\r\n            return plans;\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        if (JSJshopVars.flagLevel > 2) {\r\n            JSUtil.println(\" \");\r\n            JSUtil.print(\"Searching a plan for\");\r\n            t.print();\r\n        }\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                if (JSJshopVars.flagLevel > 1)\r\n                    JSUtil.println(\"Returning failure from find-plan: Can not find an operator\");\r\n                // failure - empty list\r\n                return plans;\r\n            }\r\n            results = rest.seekPlanAll(pair.tState(), dom, All);\r\n            if (results.isEmpty())\r\n                return plans;\r\n            ta = (JSTaskAtom) ans.elementAt(0);\r\n            node = new JSJshopNode(t, new Vector());\r\n            for (int i = 0; i < results.size(); i++) {\r\n                ptl = (JSPairPlanTSListNodes) results.elementAt(i);\r\n                ptl.planS().plan().insertWithCost(0, ta, ans.elementCost(0));\r\n                ptl.listNodes().insertElementAt(node, 0);\r\n                plans.addElement(ptl);\r\n            }\r\n            return plans;\r\n        }\r\n        JSAllReduction red = new JSAllReduction();\r\n        red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n        JSTasks newTasks;\r\n        JSMethod selMet = red.selectedMethod();\r\n        if (JSJshopVars.flagLevel > 1 && red.isDummy())\r\n            JSUtil.println(\"Returning failure from find-plan: Can not find an applicable method\");\r\n        while (!red.isDummy()) {\r\n            if (JSJshopVars.flagLevel > 4) {\r\n                JSUtil.println(\"The reductions are: \");\r\n                red.printReductions();\r\n            }\r\n            for (int k = 0; k < red.reductions().size(); k++) {\r\n                newTasks = (JSTasks) red.reductions().elementAt(k);\r\n                node = new JSJshopNode((JSTaskAtom) t.clone(), newTasks.cloneTasks());\r\n                newTasks.addElements(rest);\r\n                results = newTasks.seekPlanAll(new JSTState(ts), dom, All);\r\n                if (results.isEmpty())\r\n                    continue;\r\n                for (int j = 0; j < results.size(); j++) {\r\n                    ptl = (JSPairPlanTSListNodes) results.elementAt(j);\r\n                    ptl.listNodes().addElement(node);\r\n                    plans.addElement(ptl);\r\n                    if (plans.size() >= 1 && !All)\r\n                        return plans;\r\n                }\r\n            }\r\n            red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n            selMet = red.selectedMethod();\r\n        }\r\n        return plans;\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    public boolean fail() {\r\n        return fail;\r\n    }\r\n\r\n    public void makeFail() {\r\n        fail = true;\r\n    }\r\n\r\n    public void makeSucceed() {\r\n        fail = false;\r\n    }\r\n\r\n    public JSTasks applySubstitutionTasks(JSSubstitution alpha) {\r\n        JSTasks nt = new JSTasks();\r\n        JSTaskAtom ti;\r\n        JSTaskAtom nti;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            ti = (JSTaskAtom) this.elementAt(i);\r\n            //ti.print();\r\n            nti = ti.applySubstitutionTA(alpha);\r\n            //nti.print();\r\n            nt.addElement(nti);\r\n            //nt.print();\r\n            //JSUtil.flag(\"<-- applyJSTasks\");\r\n        }\r\n        /* nt.print();\r\n    // JSUtil.flag(\"<-- final applyTasks\");*/\r\n        return nt;\r\n    }\r\n\r\n    public boolean contains(JSTaskAtom t) {\r\n        JSTaskAtom el;\r\n        for (int i = this.size() - 1; i > -1; i--) {\r\n            el = (JSTaskAtom) this.elementAt(i);\r\n            /*JSUtil.print(\"JSTaskAtom:\");\r\n            el.print();\r\n            JSUtil.print(\" equals: \");\r\n            t.print();\r\n            JSUtil.flag(\"?\");*/\r\n            if (t.equals(el)) {\r\n                //JSUtil.flag(\"YES\");\r\n                return true;\r\n            }\r\n        }\r\n        //JSUtil.flag(\"NO\");\r\n        return false;\r\n    }\r\n\r\n    public JSTasks cloneTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.cloneTA());\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks cdr() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t);\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks standarizerTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.standarizerTA());\r\n        }\r\n        return newTs;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTasksTest4.java",
		"test_prompt": "// JSTasksTest4.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTasks}.\n* It contains ten unit test cases for the {@link JSTasks#contains(JSTaskAtom)} method.\n*/\nclass JSTasksTest4 {"
	},
	{
		"original_code": "// JSTasks.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSTasks extends JSListLogicalAtoms {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean fail;\r\n\r\n    JSTasks() {\r\n        super();\r\n    }\r\n\r\n    JSTasks(StreamTokenizer tokenizer) {\r\n        super();\r\n        JSTaskAtom ta;\r\n        JSUtil.flagParser(\"in ListTasks()\");\r\n        if (!JSUtil.readToken(tokenizer, \"List of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        /*  If this is an empty list \"nil\"    */\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\r\n            return;\r\n        tokenizer.pushBack();\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \" Expecting '(' \"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting list of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            ta = new JSTaskAtom(tokenizer);\r\n            if (ta.size() != 0) {\r\n                this.addElement(ta);\r\n            } else {\r\n                JSUtil.println(\"Line: \" + tokenizer.lineno() + \" parsing list of tasks: unexpected atom\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')'\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        //  JSUtil.flagParser(\"ListTasks parse succesful\");\r\n    }\r\n\r\n    public JSPairPlanTState seekPlan(JSTState ts, JSPlanningDomain dom, JSPlan pl, Vector listNodes) {\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        if (this.isEmpty()) {\r\n            return new JSPairPlanTState(pl, ts);\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        rest.removeElement(t);\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                // failure\r\n                return pair;\r\n            } else {\r\n                pl.addElements(ans);\r\n                listNodes.addElement(new JSJshopNode(t, new Vector()));\r\n                return rest.seekPlan(pair.tState(), dom, pl, listNodes);\r\n            }\r\n        } else {\r\n            JSJshopNode node;\r\n            JSReduction red = new JSReduction();\r\n            //counter to iterate\r\n            red = t.reduce(dom, ts.state(), red);\r\n            // on all reductions\r\n            JSTasks newTasks;\r\n            JSMethod selMet = red.selectedMethod();\r\n            while (!red.isDummy()) {\r\n                newTasks = (JSTasks) red.reduction();\r\n                node = new JSJshopNode(t, newTasks.cloneTasks());\r\n                //  JSUtil.flag(\"<- tasks\");\r\n                newTasks.addElements(rest);\r\n                pair = newTasks.seekPlan(ts, dom, pl, listNodes);\r\n                if (!pair.plan().isFailure()) {\r\n                    //  JSUtil.flag(\"reduced\");\r\n                    listNodes.addElement(node);\r\n                    return pair;\r\n                }\r\n                // JSUtil.flag(\"iterating\");\r\n                red = t.reduce(dom, ts.state(), red);\r\n                selMet = red.selectedMethod();\r\n            }\r\n        }\r\n        ans = new JSPlan();\r\n        ans.assignFailure();\r\n        return new JSPairPlanTState(ans, new JSTState());\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    //  Multi plan generator\r\n    /**\r\n     * **************************************************************\r\n     */\r\n    public JSListPairPlanTStateNodes seekPlanAll(JSTState ts, JSPlanningDomain dom, boolean All) {\r\n        JSListPairPlanTStateNodes results, plans = new JSListPairPlanTStateNodes();\r\n        JSPairPlanTSListNodes ptl;\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        JSJshopNode node;\r\n        Vector listnodes;\r\n        JSTaskAtom ta;\r\n        JSTState tts;\r\n        if (this.isEmpty()) {\r\n            if (JSJshopVars.flagLevel > 1)\r\n                JSUtil.println(\"Returning successfully from find-plan : No more tasks to plan\");\r\n            pair = new JSPairPlanTState((new JSPlan()), ts);\r\n            ptl = new JSPairPlanTSListNodes(pair, new Vector());\r\n            plans.addElement(ptl);\r\n            return plans;\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        if (JSJshopVars.flagLevel > 2) {\r\n            JSUtil.println(\" \");\r\n            JSUtil.print(\"Searching a plan for\");\r\n            t.print();\r\n        }\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                if (JSJshopVars.flagLevel > 1)\r\n                    JSUtil.println(\"Returning failure from find-plan: Can not find an operator\");\r\n                // failure - empty list\r\n                return plans;\r\n            }\r\n            results = rest.seekPlanAll(pair.tState(), dom, All);\r\n            if (results.isEmpty())\r\n                return plans;\r\n            ta = (JSTaskAtom) ans.elementAt(0);\r\n            node = new JSJshopNode(t, new Vector());\r\n            for (int i = 0; i < results.size(); i++) {\r\n                ptl = (JSPairPlanTSListNodes) results.elementAt(i);\r\n                ptl.planS().plan().insertWithCost(0, ta, ans.elementCost(0));\r\n                ptl.listNodes().insertElementAt(node, 0);\r\n                plans.addElement(ptl);\r\n            }\r\n            return plans;\r\n        }\r\n        JSAllReduction red = new JSAllReduction();\r\n        red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n        JSTasks newTasks;\r\n        JSMethod selMet = red.selectedMethod();\r\n        if (JSJshopVars.flagLevel > 1 && red.isDummy())\r\n            JSUtil.println(\"Returning failure from find-plan: Can not find an applicable method\");\r\n        while (!red.isDummy()) {\r\n            if (JSJshopVars.flagLevel > 4) {\r\n                JSUtil.println(\"The reductions are: \");\r\n                red.printReductions();\r\n            }\r\n            for (int k = 0; k < red.reductions().size(); k++) {\r\n                newTasks = (JSTasks) red.reductions().elementAt(k);\r\n                node = new JSJshopNode((JSTaskAtom) t.clone(), newTasks.cloneTasks());\r\n                newTasks.addElements(rest);\r\n                results = newTasks.seekPlanAll(new JSTState(ts), dom, All);\r\n                if (results.isEmpty())\r\n                    continue;\r\n                for (int j = 0; j < results.size(); j++) {\r\n                    ptl = (JSPairPlanTSListNodes) results.elementAt(j);\r\n                    ptl.listNodes().addElement(node);\r\n                    plans.addElement(ptl);\r\n                    if (plans.size() >= 1 && !All)\r\n                        return plans;\r\n                }\r\n            }\r\n            red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n            selMet = red.selectedMethod();\r\n        }\r\n        return plans;\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    public boolean fail() {\r\n        return fail;\r\n    }\r\n\r\n    public void makeFail() {\r\n        fail = true;\r\n    }\r\n\r\n    public void makeSucceed() {\r\n        fail = false;\r\n    }\r\n\r\n    public JSTasks applySubstitutionTasks(JSSubstitution alpha) {\r\n        JSTasks nt = new JSTasks();\r\n        JSTaskAtom ti;\r\n        JSTaskAtom nti;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            ti = (JSTaskAtom) this.elementAt(i);\r\n            //ti.print();\r\n            nti = ti.applySubstitutionTA(alpha);\r\n            //nti.print();\r\n            nt.addElement(nti);\r\n            //nt.print();\r\n            //JSUtil.flag(\"<-- applyJSTasks\");\r\n        }\r\n        /* nt.print();\r\n    // JSUtil.flag(\"<-- final applyTasks\");*/\r\n        return nt;\r\n    }\r\n\r\n    public boolean contains(JSTaskAtom t) {\r\n        JSTaskAtom el;\r\n        for (int i = this.size() - 1; i > -1; i--) {\r\n            el = (JSTaskAtom) this.elementAt(i);\r\n            /*JSUtil.print(\"JSTaskAtom:\");\r\n            el.print();\r\n            JSUtil.print(\" equals: \");\r\n            t.print();\r\n            JSUtil.flag(\"?\");*/\r\n            if (t.equals(el)) {\r\n                //JSUtil.flag(\"YES\");\r\n                return true;\r\n            }\r\n        }\r\n        //JSUtil.flag(\"NO\");\r\n        return false;\r\n    }\r\n\r\n    public JSTasks cloneTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.cloneTA());\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks cdr() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t);\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks standarizerTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.standarizerTA());\r\n        }\r\n        return newTs;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTasksTest5.java",
		"test_prompt": "// JSTasksTest5.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTasks}.\n* It contains ten unit test cases for the {@link JSTasks#cloneTasks()} method.\n*/\nclass JSTasksTest5 {"
	},
	{
		"original_code": "// JSTasks.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSTasks extends JSListLogicalAtoms {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean fail;\r\n\r\n    JSTasks() {\r\n        super();\r\n    }\r\n\r\n    JSTasks(StreamTokenizer tokenizer) {\r\n        super();\r\n        JSTaskAtom ta;\r\n        JSUtil.flagParser(\"in ListTasks()\");\r\n        if (!JSUtil.readToken(tokenizer, \"List of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        /*  If this is an empty list \"nil\"    */\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\r\n            return;\r\n        tokenizer.pushBack();\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \" Expecting '(' \"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting list of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            ta = new JSTaskAtom(tokenizer);\r\n            if (ta.size() != 0) {\r\n                this.addElement(ta);\r\n            } else {\r\n                JSUtil.println(\"Line: \" + tokenizer.lineno() + \" parsing list of tasks: unexpected atom\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')'\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        //  JSUtil.flagParser(\"ListTasks parse succesful\");\r\n    }\r\n\r\n    public JSPairPlanTState seekPlan(JSTState ts, JSPlanningDomain dom, JSPlan pl, Vector listNodes) {\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        if (this.isEmpty()) {\r\n            return new JSPairPlanTState(pl, ts);\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        rest.removeElement(t);\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                // failure\r\n                return pair;\r\n            } else {\r\n                pl.addElements(ans);\r\n                listNodes.addElement(new JSJshopNode(t, new Vector()));\r\n                return rest.seekPlan(pair.tState(), dom, pl, listNodes);\r\n            }\r\n        } else {\r\n            JSJshopNode node;\r\n            JSReduction red = new JSReduction();\r\n            //counter to iterate\r\n            red = t.reduce(dom, ts.state(), red);\r\n            // on all reductions\r\n            JSTasks newTasks;\r\n            JSMethod selMet = red.selectedMethod();\r\n            while (!red.isDummy()) {\r\n                newTasks = (JSTasks) red.reduction();\r\n                node = new JSJshopNode(t, newTasks.cloneTasks());\r\n                //  JSUtil.flag(\"<- tasks\");\r\n                newTasks.addElements(rest);\r\n                pair = newTasks.seekPlan(ts, dom, pl, listNodes);\r\n                if (!pair.plan().isFailure()) {\r\n                    //  JSUtil.flag(\"reduced\");\r\n                    listNodes.addElement(node);\r\n                    return pair;\r\n                }\r\n                // JSUtil.flag(\"iterating\");\r\n                red = t.reduce(dom, ts.state(), red);\r\n                selMet = red.selectedMethod();\r\n            }\r\n        }\r\n        ans = new JSPlan();\r\n        ans.assignFailure();\r\n        return new JSPairPlanTState(ans, new JSTState());\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    //  Multi plan generator\r\n    /**\r\n     * **************************************************************\r\n     */\r\n    public JSListPairPlanTStateNodes seekPlanAll(JSTState ts, JSPlanningDomain dom, boolean All) {\r\n        JSListPairPlanTStateNodes results, plans = new JSListPairPlanTStateNodes();\r\n        JSPairPlanTSListNodes ptl;\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        JSJshopNode node;\r\n        Vector listnodes;\r\n        JSTaskAtom ta;\r\n        JSTState tts;\r\n        if (this.isEmpty()) {\r\n            if (JSJshopVars.flagLevel > 1)\r\n                JSUtil.println(\"Returning successfully from find-plan : No more tasks to plan\");\r\n            pair = new JSPairPlanTState((new JSPlan()), ts);\r\n            ptl = new JSPairPlanTSListNodes(pair, new Vector());\r\n            plans.addElement(ptl);\r\n            return plans;\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        if (JSJshopVars.flagLevel > 2) {\r\n            JSUtil.println(\" \");\r\n            JSUtil.print(\"Searching a plan for\");\r\n            t.print();\r\n        }\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                if (JSJshopVars.flagLevel > 1)\r\n                    JSUtil.println(\"Returning failure from find-plan: Can not find an operator\");\r\n                // failure - empty list\r\n                return plans;\r\n            }\r\n            results = rest.seekPlanAll(pair.tState(), dom, All);\r\n            if (results.isEmpty())\r\n                return plans;\r\n            ta = (JSTaskAtom) ans.elementAt(0);\r\n            node = new JSJshopNode(t, new Vector());\r\n            for (int i = 0; i < results.size(); i++) {\r\n                ptl = (JSPairPlanTSListNodes) results.elementAt(i);\r\n                ptl.planS().plan().insertWithCost(0, ta, ans.elementCost(0));\r\n                ptl.listNodes().insertElementAt(node, 0);\r\n                plans.addElement(ptl);\r\n            }\r\n            return plans;\r\n        }\r\n        JSAllReduction red = new JSAllReduction();\r\n        red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n        JSTasks newTasks;\r\n        JSMethod selMet = red.selectedMethod();\r\n        if (JSJshopVars.flagLevel > 1 && red.isDummy())\r\n            JSUtil.println(\"Returning failure from find-plan: Can not find an applicable method\");\r\n        while (!red.isDummy()) {\r\n            if (JSJshopVars.flagLevel > 4) {\r\n                JSUtil.println(\"The reductions are: \");\r\n                red.printReductions();\r\n            }\r\n            for (int k = 0; k < red.reductions().size(); k++) {\r\n                newTasks = (JSTasks) red.reductions().elementAt(k);\r\n                node = new JSJshopNode((JSTaskAtom) t.clone(), newTasks.cloneTasks());\r\n                newTasks.addElements(rest);\r\n                results = newTasks.seekPlanAll(new JSTState(ts), dom, All);\r\n                if (results.isEmpty())\r\n                    continue;\r\n                for (int j = 0; j < results.size(); j++) {\r\n                    ptl = (JSPairPlanTSListNodes) results.elementAt(j);\r\n                    ptl.listNodes().addElement(node);\r\n                    plans.addElement(ptl);\r\n                    if (plans.size() >= 1 && !All)\r\n                        return plans;\r\n                }\r\n            }\r\n            red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n            selMet = red.selectedMethod();\r\n        }\r\n        return plans;\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    public boolean fail() {\r\n        return fail;\r\n    }\r\n\r\n    public void makeFail() {\r\n        fail = true;\r\n    }\r\n\r\n    public void makeSucceed() {\r\n        fail = false;\r\n    }\r\n\r\n    public JSTasks applySubstitutionTasks(JSSubstitution alpha) {\r\n        JSTasks nt = new JSTasks();\r\n        JSTaskAtom ti;\r\n        JSTaskAtom nti;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            ti = (JSTaskAtom) this.elementAt(i);\r\n            //ti.print();\r\n            nti = ti.applySubstitutionTA(alpha);\r\n            //nti.print();\r\n            nt.addElement(nti);\r\n            //nt.print();\r\n            //JSUtil.flag(\"<-- applyJSTasks\");\r\n        }\r\n        /* nt.print();\r\n    // JSUtil.flag(\"<-- final applyTasks\");*/\r\n        return nt;\r\n    }\r\n\r\n    public boolean contains(JSTaskAtom t) {\r\n        JSTaskAtom el;\r\n        for (int i = this.size() - 1; i > -1; i--) {\r\n            el = (JSTaskAtom) this.elementAt(i);\r\n            /*JSUtil.print(\"JSTaskAtom:\");\r\n            el.print();\r\n            JSUtil.print(\" equals: \");\r\n            t.print();\r\n            JSUtil.flag(\"?\");*/\r\n            if (t.equals(el)) {\r\n                //JSUtil.flag(\"YES\");\r\n                return true;\r\n            }\r\n        }\r\n        //JSUtil.flag(\"NO\");\r\n        return false;\r\n    }\r\n\r\n    public JSTasks cloneTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.cloneTA());\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks cdr() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t);\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks standarizerTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.standarizerTA());\r\n        }\r\n        return newTs;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTasksTest6.java",
		"test_prompt": "// JSTasksTest6.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTasks}.\n* It contains ten unit test cases for the {@link JSTasks#cdr()} method.\n*/\nclass JSTasksTest6 {"
	},
	{
		"original_code": "// JSTasks.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSTasks extends JSListLogicalAtoms {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean fail;\r\n\r\n    JSTasks() {\r\n        super();\r\n    }\r\n\r\n    JSTasks(StreamTokenizer tokenizer) {\r\n        super();\r\n        JSTaskAtom ta;\r\n        JSUtil.flagParser(\"in ListTasks()\");\r\n        if (!JSUtil.readToken(tokenizer, \"List of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        /*  If this is an empty list \"nil\"    */\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\r\n            return;\r\n        tokenizer.pushBack();\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \" Expecting '(' \"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting list of tasks\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            ta = new JSTaskAtom(tokenizer);\r\n            if (ta.size() != 0) {\r\n                this.addElement(ta);\r\n            } else {\r\n                JSUtil.println(\"Line: \" + tokenizer.lineno() + \" parsing list of tasks: unexpected atom\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')'\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        //  JSUtil.flagParser(\"ListTasks parse succesful\");\r\n    }\r\n\r\n    public JSPairPlanTState seekPlan(JSTState ts, JSPlanningDomain dom, JSPlan pl, Vector listNodes) {\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        if (this.isEmpty()) {\r\n            return new JSPairPlanTState(pl, ts);\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        rest.removeElement(t);\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                // failure\r\n                return pair;\r\n            } else {\r\n                pl.addElements(ans);\r\n                listNodes.addElement(new JSJshopNode(t, new Vector()));\r\n                return rest.seekPlan(pair.tState(), dom, pl, listNodes);\r\n            }\r\n        } else {\r\n            JSJshopNode node;\r\n            JSReduction red = new JSReduction();\r\n            //counter to iterate\r\n            red = t.reduce(dom, ts.state(), red);\r\n            // on all reductions\r\n            JSTasks newTasks;\r\n            JSMethod selMet = red.selectedMethod();\r\n            while (!red.isDummy()) {\r\n                newTasks = (JSTasks) red.reduction();\r\n                node = new JSJshopNode(t, newTasks.cloneTasks());\r\n                //  JSUtil.flag(\"<- tasks\");\r\n                newTasks.addElements(rest);\r\n                pair = newTasks.seekPlan(ts, dom, pl, listNodes);\r\n                if (!pair.plan().isFailure()) {\r\n                    //  JSUtil.flag(\"reduced\");\r\n                    listNodes.addElement(node);\r\n                    return pair;\r\n                }\r\n                // JSUtil.flag(\"iterating\");\r\n                red = t.reduce(dom, ts.state(), red);\r\n                selMet = red.selectedMethod();\r\n            }\r\n        }\r\n        ans = new JSPlan();\r\n        ans.assignFailure();\r\n        return new JSPairPlanTState(ans, new JSTState());\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    //  Multi plan generator\r\n    /**\r\n     * **************************************************************\r\n     */\r\n    public JSListPairPlanTStateNodes seekPlanAll(JSTState ts, JSPlanningDomain dom, boolean All) {\r\n        JSListPairPlanTStateNodes results, plans = new JSListPairPlanTStateNodes();\r\n        JSPairPlanTSListNodes ptl;\r\n        JSPlan ans;\r\n        JSPairPlanTState pair;\r\n        JSPlan sol;\r\n        JSJshopNode node;\r\n        Vector listnodes;\r\n        JSTaskAtom ta;\r\n        JSTState tts;\r\n        if (this.isEmpty()) {\r\n            if (JSJshopVars.flagLevel > 1)\r\n                JSUtil.println(\"Returning successfully from find-plan : No more tasks to plan\");\r\n            pair = new JSPairPlanTState((new JSPlan()), ts);\r\n            ptl = new JSPairPlanTSListNodes(pair, new Vector());\r\n            plans.addElement(ptl);\r\n            return plans;\r\n        }\r\n        JSTaskAtom t = (JSTaskAtom) this.firstElement();\r\n        if (JSJshopVars.flagLevel > 2) {\r\n            JSUtil.println(\" \");\r\n            JSUtil.print(\"Searching a plan for\");\r\n            t.print();\r\n        }\r\n        JSTasks rest = (JSTasks) this.cdr();\r\n        if (t.isPrimitive()) {\r\n            pair = t.seekSimplePlan(dom, ts);\r\n            ans = pair.plan();\r\n            if (ans.isFailure()) {\r\n                if (JSJshopVars.flagLevel > 1)\r\n                    JSUtil.println(\"Returning failure from find-plan: Can not find an operator\");\r\n                // failure - empty list\r\n                return plans;\r\n            }\r\n            results = rest.seekPlanAll(pair.tState(), dom, All);\r\n            if (results.isEmpty())\r\n                return plans;\r\n            ta = (JSTaskAtom) ans.elementAt(0);\r\n            node = new JSJshopNode(t, new Vector());\r\n            for (int i = 0; i < results.size(); i++) {\r\n                ptl = (JSPairPlanTSListNodes) results.elementAt(i);\r\n                ptl.planS().plan().insertWithCost(0, ta, ans.elementCost(0));\r\n                ptl.listNodes().insertElementAt(node, 0);\r\n                plans.addElement(ptl);\r\n            }\r\n            return plans;\r\n        }\r\n        JSAllReduction red = new JSAllReduction();\r\n        red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n        JSTasks newTasks;\r\n        JSMethod selMet = red.selectedMethod();\r\n        if (JSJshopVars.flagLevel > 1 && red.isDummy())\r\n            JSUtil.println(\"Returning failure from find-plan: Can not find an applicable method\");\r\n        while (!red.isDummy()) {\r\n            if (JSJshopVars.flagLevel > 4) {\r\n                JSUtil.println(\"The reductions are: \");\r\n                red.printReductions();\r\n            }\r\n            for (int k = 0; k < red.reductions().size(); k++) {\r\n                newTasks = (JSTasks) red.reductions().elementAt(k);\r\n                node = new JSJshopNode((JSTaskAtom) t.clone(), newTasks.cloneTasks());\r\n                newTasks.addElements(rest);\r\n                results = newTasks.seekPlanAll(new JSTState(ts), dom, All);\r\n                if (results.isEmpty())\r\n                    continue;\r\n                for (int j = 0; j < results.size(); j++) {\r\n                    ptl = (JSPairPlanTSListNodes) results.elementAt(j);\r\n                    ptl.listNodes().addElement(node);\r\n                    plans.addElement(ptl);\r\n                    if (plans.size() >= 1 && !All)\r\n                        return plans;\r\n                }\r\n            }\r\n            red = dom.methods().findAllReduction(t, ts.state(), red, dom.axioms());\r\n            selMet = red.selectedMethod();\r\n        }\r\n        return plans;\r\n    }\r\n\r\n    /**\r\n     * *************************************************************\r\n     */\r\n    public boolean fail() {\r\n        return fail;\r\n    }\r\n\r\n    public void makeFail() {\r\n        fail = true;\r\n    }\r\n\r\n    public void makeSucceed() {\r\n        fail = false;\r\n    }\r\n\r\n    public JSTasks applySubstitutionTasks(JSSubstitution alpha) {\r\n        JSTasks nt = new JSTasks();\r\n        JSTaskAtom ti;\r\n        JSTaskAtom nti;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            ti = (JSTaskAtom) this.elementAt(i);\r\n            //ti.print();\r\n            nti = ti.applySubstitutionTA(alpha);\r\n            //nti.print();\r\n            nt.addElement(nti);\r\n            //nt.print();\r\n            //JSUtil.flag(\"<-- applyJSTasks\");\r\n        }\r\n        /* nt.print();\r\n    // JSUtil.flag(\"<-- final applyTasks\");*/\r\n        return nt;\r\n    }\r\n\r\n    public boolean contains(JSTaskAtom t) {\r\n        JSTaskAtom el;\r\n        for (int i = this.size() - 1; i > -1; i--) {\r\n            el = (JSTaskAtom) this.elementAt(i);\r\n            /*JSUtil.print(\"JSTaskAtom:\");\r\n            el.print();\r\n            JSUtil.print(\" equals: \");\r\n            t.print();\r\n            JSUtil.flag(\"?\");*/\r\n            if (t.equals(el)) {\r\n                //JSUtil.flag(\"YES\");\r\n                return true;\r\n            }\r\n        }\r\n        //JSUtil.flag(\"NO\");\r\n        return false;\r\n    }\r\n\r\n    public JSTasks cloneTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.cloneTA());\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks cdr() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t);\r\n        }\r\n        return newTs;\r\n    }\r\n\r\n    public JSTasks standarizerTasks() {\r\n        JSTasks newTs = new JSTasks();\r\n        JSTaskAtom t;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            t = (JSTaskAtom) this.elementAt(i);\r\n            newTs.addElement(t.standarizerTA());\r\n        }\r\n        return newTs;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTasksTest7.java",
		"test_prompt": "// JSTasksTest7.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTasks}.\n* It contains ten unit test cases for the {@link JSTasks#standarizerTasks()} method.\n*/\nclass JSTasksTest7 {"
	},
	{
		"original_code": "// JSPredicateForm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSPredicateForm extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    JSPredicateForm() {\r\n        super();\r\n    }\r\n\r\n    // HICAP: Constructor used by NeoEditor to evaluate preconditions of methods.\r\n    // aNeoEditor.state.questions (an ArrayList of CaseQues 's).\r\n    // In a CaseQues: aCaseQues.question.predicate\r\n    // aCaseQues.getAnswer().equals(\"Yes\")\r\n    public JSPredicateForm(String text) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        super();\r\n        // System.out.println(\"JSPRedicateForm init with text: \" + text);\r\n        if (text != null) {\r\n            JSPredicateFormInit(new StreamTokenizer(new StringReader(text)));\r\n        }\r\n    }\r\n\r\n    // HICAP: To add to state:\r\n    //   1. add a Question: shop gives aJSPredicateForm and aString\r\n    //      describing it:  aState.addQuestion( JSPredicateForm predicate,\r\n    //      String questionTitle )\r\n    //      returns Question: method makes a new question, adds it to\r\n    //      the questionList, and makes a new CaseQues with that question\r\n    //      and answer \"Yes\" and adds it to the State.\r\n    //   2. add a CaseQues: question in 1 with answer \"Yes\".\r\n    //      public Question addQuestion( JSPredicateForm, String)\r\n    //      public void deleteFromState(  JSPredicateForm inPredicate):\r\n    //      find a Question in state whose predicate.equals( JSPredicateForm t)\r\n    //      the inPredicate\r\n    // HICAP: To add to state:\r\n    //  aNeoEditor.addToState( JSPredicateForm pred)\r\n    // To delete from state:\r\n    //   aNeoEditor.deleteFromState( JSPredicateForm pred)\r\n    public JSPredicateForm(StreamTokenizer tokenizer) {\r\n        // Parse elements of the form: (<name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        //       or: ,(+ ?m2 ?amount)\r\n        super();\r\n        JSPredicateFormInit(tokenizer);\r\n    }\r\n\r\n    void JSPredicateFormInit(StreamTokenizer tokenizer) {\r\n        //return;\r\n        if (tokenizer == null)\r\n            throw new JSParserError();\r\n        // JSUtil.flagParser(\"in PredicateForm()\");\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"expected '('\"))\r\n            //  return; // error: expected '('\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Reading Predicate\"))\r\n            //return; // error:\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            JSUtil.println(\"Unexpected ) while reading Predicate\");\r\n            // return;\r\n            throw new JSParserError();\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.exclamation) {\r\n            if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \"Operator name expected\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            tokenizer.pushBack();\r\n            String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n            if (//means that an error occur\r\n            w.equals(\"%%%\"))\r\n                //    return;\r\n                throw new JSParserError();\r\n            this.addElement(\"!\" + w);\r\n        } else {\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"not\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                this.addElement(new JSPredicateForm(tokenizer));\r\n                if (JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"JSPredicateForm\"))\r\n                    // Parse succesfull\r\n                    return;\r\n                else\r\n                    throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"call\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                tokenizer.ttype = JSJshopVars.leftPar;\r\n                tokenizer.pushBack();\r\n                JSTerm t = new JSTerm(tokenizer);\r\n                t.makeEval(true);\r\n                this.addElement(t);\r\n                // Parse succesfull\r\n                return;\r\n            } else {\r\n                if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                    JSUtil.println(\"PlanningDomain: error\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                tokenizer.pushBack();\r\n                String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n                if (//means that an error occur\r\n                w.equals(\"%%%\"))\r\n                    throw new JSParserError();\r\n                this.addElement(w);\r\n            }\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n            // return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            this.addElement(new JSTerm(tokenizer));\r\n            if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return;\r\n        }\r\n        String str = (String) this.elementAt(0);\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(str + \" \");\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            el.print();\r\n        } else {\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n        }\r\n        JSUtil.print(\" ) \");\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return res;\r\n        }\r\n        res.append(\"(\");\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        res.append(str);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            res.append(el.toStr());\r\n        } else {\r\n            //Additions end\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n        }\r\n        res.append(\")\");\r\n        //JSUtil.flag10(\"Atom: \"+ res);\r\n        return res;\r\n    }\r\n\r\n    public JSPredicateForm clonePF() {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.clonePF());\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.cloneT());\r\n            }\r\n        }\r\n        return np;\r\n    }\r\n\r\n    public JSPredicateForm applySubstitutionPF(JSSubstitution alpha) {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n        JSUtil.print(\"applyPF subst:\");\r\n        alpha.print();\r\n        JSUtil.print(\"to:\");\r\n        this.print();\r\n    }\r\n    JSUtil.flagPlanning(\"stop\");*/\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.applySubstitutionPF(alpha));\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n         JSUtil.flagPlanning(\"<--\");*/\r\n            for (short i = 1; i < this.size(); i++) {\r\n                /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                  np.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.applySubstitutionT(alpha));\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n     JSUtil.flagPlanning(\"<-- final applyPF\");*/\r\n        return np;\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t) {\r\n        return this.matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t, JSSubstitution alpha) /*this &  t does not have to be ground*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            beta = e1.matches(e2, alpha);\r\n            return beta;\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.cloneS();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n            JSUtil.print(\"The atom \");\r\n            this.print();\r\n            JSUtil.print(\"matches \");\r\n            t.print();\r\n            JSUtil.print(\"With subst. \");\r\n            beta.print();\r\n            JSUtil.print(\"Initial Subs:\");\r\n            alpha.print();\r\n        }\r\n        JSUtil.flagPlanning(\"stop\");*/\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSPredicateForm t) /* t is a ground term*/\r\n    {\r\n        if (t == null)\r\n            return false;\r\n        String functor = (String) this.elementAt(0);\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            return e1.equals(e2);\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSPredicateForm standarizerPredicateForm() {\r\n        JSPredicateForm nTA = new JSPredicateForm();\r\n        //Added 11/28/00\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            nTA.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            nTA.addElement(el.standarizerPredicateForm());\r\n            return nTA;\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPredicateFormTest0.java",
		"test_prompt": "// JSPredicateFormTest0.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPredicateForm}.\n* It contains ten unit test cases for the {@link JSPredicateForm#toStr()} method.\n*/\nclass JSPredicateFormTest0 {"
	},
	{
		"original_code": "// JSPredicateForm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSPredicateForm extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    JSPredicateForm() {\r\n        super();\r\n    }\r\n\r\n    // HICAP: Constructor used by NeoEditor to evaluate preconditions of methods.\r\n    // aNeoEditor.state.questions (an ArrayList of CaseQues 's).\r\n    // In a CaseQues: aCaseQues.question.predicate\r\n    // aCaseQues.getAnswer().equals(\"Yes\")\r\n    public JSPredicateForm(String text) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        super();\r\n        // System.out.println(\"JSPRedicateForm init with text: \" + text);\r\n        if (text != null) {\r\n            JSPredicateFormInit(new StreamTokenizer(new StringReader(text)));\r\n        }\r\n    }\r\n\r\n    // HICAP: To add to state:\r\n    //   1. add a Question: shop gives aJSPredicateForm and aString\r\n    //      describing it:  aState.addQuestion( JSPredicateForm predicate,\r\n    //      String questionTitle )\r\n    //      returns Question: method makes a new question, adds it to\r\n    //      the questionList, and makes a new CaseQues with that question\r\n    //      and answer \"Yes\" and adds it to the State.\r\n    //   2. add a CaseQues: question in 1 with answer \"Yes\".\r\n    //      public Question addQuestion( JSPredicateForm, String)\r\n    //      public void deleteFromState(  JSPredicateForm inPredicate):\r\n    //      find a Question in state whose predicate.equals( JSPredicateForm t)\r\n    //      the inPredicate\r\n    // HICAP: To add to state:\r\n    //  aNeoEditor.addToState( JSPredicateForm pred)\r\n    // To delete from state:\r\n    //   aNeoEditor.deleteFromState( JSPredicateForm pred)\r\n    public JSPredicateForm(StreamTokenizer tokenizer) {\r\n        // Parse elements of the form: (<name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        //       or: ,(+ ?m2 ?amount)\r\n        super();\r\n        JSPredicateFormInit(tokenizer);\r\n    }\r\n\r\n    void JSPredicateFormInit(StreamTokenizer tokenizer) {\r\n        //return;\r\n        if (tokenizer == null)\r\n            throw new JSParserError();\r\n        // JSUtil.flagParser(\"in PredicateForm()\");\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"expected '('\"))\r\n            //  return; // error: expected '('\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Reading Predicate\"))\r\n            //return; // error:\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            JSUtil.println(\"Unexpected ) while reading Predicate\");\r\n            // return;\r\n            throw new JSParserError();\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.exclamation) {\r\n            if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \"Operator name expected\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            tokenizer.pushBack();\r\n            String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n            if (//means that an error occur\r\n            w.equals(\"%%%\"))\r\n                //    return;\r\n                throw new JSParserError();\r\n            this.addElement(\"!\" + w);\r\n        } else {\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"not\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                this.addElement(new JSPredicateForm(tokenizer));\r\n                if (JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"JSPredicateForm\"))\r\n                    // Parse succesfull\r\n                    return;\r\n                else\r\n                    throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"call\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                tokenizer.ttype = JSJshopVars.leftPar;\r\n                tokenizer.pushBack();\r\n                JSTerm t = new JSTerm(tokenizer);\r\n                t.makeEval(true);\r\n                this.addElement(t);\r\n                // Parse succesfull\r\n                return;\r\n            } else {\r\n                if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                    JSUtil.println(\"PlanningDomain: error\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                tokenizer.pushBack();\r\n                String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n                if (//means that an error occur\r\n                w.equals(\"%%%\"))\r\n                    throw new JSParserError();\r\n                this.addElement(w);\r\n            }\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n            // return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            this.addElement(new JSTerm(tokenizer));\r\n            if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return;\r\n        }\r\n        String str = (String) this.elementAt(0);\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(str + \" \");\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            el.print();\r\n        } else {\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n        }\r\n        JSUtil.print(\" ) \");\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return res;\r\n        }\r\n        res.append(\"(\");\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        res.append(str);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            res.append(el.toStr());\r\n        } else {\r\n            //Additions end\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n        }\r\n        res.append(\")\");\r\n        //JSUtil.flag10(\"Atom: \"+ res);\r\n        return res;\r\n    }\r\n\r\n    public JSPredicateForm clonePF() {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.clonePF());\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.cloneT());\r\n            }\r\n        }\r\n        return np;\r\n    }\r\n\r\n    public JSPredicateForm applySubstitutionPF(JSSubstitution alpha) {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n        JSUtil.print(\"applyPF subst:\");\r\n        alpha.print();\r\n        JSUtil.print(\"to:\");\r\n        this.print();\r\n    }\r\n    JSUtil.flagPlanning(\"stop\");*/\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.applySubstitutionPF(alpha));\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n         JSUtil.flagPlanning(\"<--\");*/\r\n            for (short i = 1; i < this.size(); i++) {\r\n                /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                  np.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.applySubstitutionT(alpha));\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n     JSUtil.flagPlanning(\"<-- final applyPF\");*/\r\n        return np;\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t) {\r\n        return this.matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t, JSSubstitution alpha) /*this &  t does not have to be ground*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            beta = e1.matches(e2, alpha);\r\n            return beta;\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.cloneS();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n            JSUtil.print(\"The atom \");\r\n            this.print();\r\n            JSUtil.print(\"matches \");\r\n            t.print();\r\n            JSUtil.print(\"With subst. \");\r\n            beta.print();\r\n            JSUtil.print(\"Initial Subs:\");\r\n            alpha.print();\r\n        }\r\n        JSUtil.flagPlanning(\"stop\");*/\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSPredicateForm t) /* t is a ground term*/\r\n    {\r\n        if (t == null)\r\n            return false;\r\n        String functor = (String) this.elementAt(0);\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            return e1.equals(e2);\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSPredicateForm standarizerPredicateForm() {\r\n        JSPredicateForm nTA = new JSPredicateForm();\r\n        //Added 11/28/00\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            nTA.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            nTA.addElement(el.standarizerPredicateForm());\r\n            return nTA;\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPredicateFormTest1.java",
		"test_prompt": "// JSPredicateFormTest1.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPredicateForm}.\n* It contains ten unit test cases for the {@link JSPredicateForm#clonePF()} method.\n*/\nclass JSPredicateFormTest1 {"
	},
	{
		"original_code": "// JSPredicateForm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSPredicateForm extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    JSPredicateForm() {\r\n        super();\r\n    }\r\n\r\n    // HICAP: Constructor used by NeoEditor to evaluate preconditions of methods.\r\n    // aNeoEditor.state.questions (an ArrayList of CaseQues 's).\r\n    // In a CaseQues: aCaseQues.question.predicate\r\n    // aCaseQues.getAnswer().equals(\"Yes\")\r\n    public JSPredicateForm(String text) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        super();\r\n        // System.out.println(\"JSPRedicateForm init with text: \" + text);\r\n        if (text != null) {\r\n            JSPredicateFormInit(new StreamTokenizer(new StringReader(text)));\r\n        }\r\n    }\r\n\r\n    // HICAP: To add to state:\r\n    //   1. add a Question: shop gives aJSPredicateForm and aString\r\n    //      describing it:  aState.addQuestion( JSPredicateForm predicate,\r\n    //      String questionTitle )\r\n    //      returns Question: method makes a new question, adds it to\r\n    //      the questionList, and makes a new CaseQues with that question\r\n    //      and answer \"Yes\" and adds it to the State.\r\n    //   2. add a CaseQues: question in 1 with answer \"Yes\".\r\n    //      public Question addQuestion( JSPredicateForm, String)\r\n    //      public void deleteFromState(  JSPredicateForm inPredicate):\r\n    //      find a Question in state whose predicate.equals( JSPredicateForm t)\r\n    //      the inPredicate\r\n    // HICAP: To add to state:\r\n    //  aNeoEditor.addToState( JSPredicateForm pred)\r\n    // To delete from state:\r\n    //   aNeoEditor.deleteFromState( JSPredicateForm pred)\r\n    public JSPredicateForm(StreamTokenizer tokenizer) {\r\n        // Parse elements of the form: (<name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        //       or: ,(+ ?m2 ?amount)\r\n        super();\r\n        JSPredicateFormInit(tokenizer);\r\n    }\r\n\r\n    void JSPredicateFormInit(StreamTokenizer tokenizer) {\r\n        //return;\r\n        if (tokenizer == null)\r\n            throw new JSParserError();\r\n        // JSUtil.flagParser(\"in PredicateForm()\");\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"expected '('\"))\r\n            //  return; // error: expected '('\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Reading Predicate\"))\r\n            //return; // error:\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            JSUtil.println(\"Unexpected ) while reading Predicate\");\r\n            // return;\r\n            throw new JSParserError();\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.exclamation) {\r\n            if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \"Operator name expected\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            tokenizer.pushBack();\r\n            String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n            if (//means that an error occur\r\n            w.equals(\"%%%\"))\r\n                //    return;\r\n                throw new JSParserError();\r\n            this.addElement(\"!\" + w);\r\n        } else {\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"not\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                this.addElement(new JSPredicateForm(tokenizer));\r\n                if (JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"JSPredicateForm\"))\r\n                    // Parse succesfull\r\n                    return;\r\n                else\r\n                    throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"call\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                tokenizer.ttype = JSJshopVars.leftPar;\r\n                tokenizer.pushBack();\r\n                JSTerm t = new JSTerm(tokenizer);\r\n                t.makeEval(true);\r\n                this.addElement(t);\r\n                // Parse succesfull\r\n                return;\r\n            } else {\r\n                if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                    JSUtil.println(\"PlanningDomain: error\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                tokenizer.pushBack();\r\n                String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n                if (//means that an error occur\r\n                w.equals(\"%%%\"))\r\n                    throw new JSParserError();\r\n                this.addElement(w);\r\n            }\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n            // return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            this.addElement(new JSTerm(tokenizer));\r\n            if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return;\r\n        }\r\n        String str = (String) this.elementAt(0);\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(str + \" \");\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            el.print();\r\n        } else {\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n        }\r\n        JSUtil.print(\" ) \");\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return res;\r\n        }\r\n        res.append(\"(\");\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        res.append(str);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            res.append(el.toStr());\r\n        } else {\r\n            //Additions end\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n        }\r\n        res.append(\")\");\r\n        //JSUtil.flag10(\"Atom: \"+ res);\r\n        return res;\r\n    }\r\n\r\n    public JSPredicateForm clonePF() {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.clonePF());\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.cloneT());\r\n            }\r\n        }\r\n        return np;\r\n    }\r\n\r\n    public JSPredicateForm applySubstitutionPF(JSSubstitution alpha) {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n        JSUtil.print(\"applyPF subst:\");\r\n        alpha.print();\r\n        JSUtil.print(\"to:\");\r\n        this.print();\r\n    }\r\n    JSUtil.flagPlanning(\"stop\");*/\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.applySubstitutionPF(alpha));\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n         JSUtil.flagPlanning(\"<--\");*/\r\n            for (short i = 1; i < this.size(); i++) {\r\n                /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                  np.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.applySubstitutionT(alpha));\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n     JSUtil.flagPlanning(\"<-- final applyPF\");*/\r\n        return np;\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t) {\r\n        return this.matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t, JSSubstitution alpha) /*this &  t does not have to be ground*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            beta = e1.matches(e2, alpha);\r\n            return beta;\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.cloneS();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n            JSUtil.print(\"The atom \");\r\n            this.print();\r\n            JSUtil.print(\"matches \");\r\n            t.print();\r\n            JSUtil.print(\"With subst. \");\r\n            beta.print();\r\n            JSUtil.print(\"Initial Subs:\");\r\n            alpha.print();\r\n        }\r\n        JSUtil.flagPlanning(\"stop\");*/\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSPredicateForm t) /* t is a ground term*/\r\n    {\r\n        if (t == null)\r\n            return false;\r\n        String functor = (String) this.elementAt(0);\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            return e1.equals(e2);\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSPredicateForm standarizerPredicateForm() {\r\n        JSPredicateForm nTA = new JSPredicateForm();\r\n        //Added 11/28/00\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            nTA.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            nTA.addElement(el.standarizerPredicateForm());\r\n            return nTA;\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPredicateFormTest2.java",
		"test_prompt": "// JSPredicateFormTest2.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPredicateForm}.\n* It contains ten unit test cases for the {@link JSPredicateForm#applySubstitutionPF(JSSubstitution)} method.\n*/\nclass JSPredicateFormTest2 {"
	},
	{
		"original_code": "// JSPredicateForm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSPredicateForm extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    JSPredicateForm() {\r\n        super();\r\n    }\r\n\r\n    // HICAP: Constructor used by NeoEditor to evaluate preconditions of methods.\r\n    // aNeoEditor.state.questions (an ArrayList of CaseQues 's).\r\n    // In a CaseQues: aCaseQues.question.predicate\r\n    // aCaseQues.getAnswer().equals(\"Yes\")\r\n    public JSPredicateForm(String text) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        super();\r\n        // System.out.println(\"JSPRedicateForm init with text: \" + text);\r\n        if (text != null) {\r\n            JSPredicateFormInit(new StreamTokenizer(new StringReader(text)));\r\n        }\r\n    }\r\n\r\n    // HICAP: To add to state:\r\n    //   1. add a Question: shop gives aJSPredicateForm and aString\r\n    //      describing it:  aState.addQuestion( JSPredicateForm predicate,\r\n    //      String questionTitle )\r\n    //      returns Question: method makes a new question, adds it to\r\n    //      the questionList, and makes a new CaseQues with that question\r\n    //      and answer \"Yes\" and adds it to the State.\r\n    //   2. add a CaseQues: question in 1 with answer \"Yes\".\r\n    //      public Question addQuestion( JSPredicateForm, String)\r\n    //      public void deleteFromState(  JSPredicateForm inPredicate):\r\n    //      find a Question in state whose predicate.equals( JSPredicateForm t)\r\n    //      the inPredicate\r\n    // HICAP: To add to state:\r\n    //  aNeoEditor.addToState( JSPredicateForm pred)\r\n    // To delete from state:\r\n    //   aNeoEditor.deleteFromState( JSPredicateForm pred)\r\n    public JSPredicateForm(StreamTokenizer tokenizer) {\r\n        // Parse elements of the form: (<name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        //       or: ,(+ ?m2 ?amount)\r\n        super();\r\n        JSPredicateFormInit(tokenizer);\r\n    }\r\n\r\n    void JSPredicateFormInit(StreamTokenizer tokenizer) {\r\n        //return;\r\n        if (tokenizer == null)\r\n            throw new JSParserError();\r\n        // JSUtil.flagParser(\"in PredicateForm()\");\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"expected '('\"))\r\n            //  return; // error: expected '('\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Reading Predicate\"))\r\n            //return; // error:\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            JSUtil.println(\"Unexpected ) while reading Predicate\");\r\n            // return;\r\n            throw new JSParserError();\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.exclamation) {\r\n            if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \"Operator name expected\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            tokenizer.pushBack();\r\n            String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n            if (//means that an error occur\r\n            w.equals(\"%%%\"))\r\n                //    return;\r\n                throw new JSParserError();\r\n            this.addElement(\"!\" + w);\r\n        } else {\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"not\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                this.addElement(new JSPredicateForm(tokenizer));\r\n                if (JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"JSPredicateForm\"))\r\n                    // Parse succesfull\r\n                    return;\r\n                else\r\n                    throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"call\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                tokenizer.ttype = JSJshopVars.leftPar;\r\n                tokenizer.pushBack();\r\n                JSTerm t = new JSTerm(tokenizer);\r\n                t.makeEval(true);\r\n                this.addElement(t);\r\n                // Parse succesfull\r\n                return;\r\n            } else {\r\n                if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                    JSUtil.println(\"PlanningDomain: error\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                tokenizer.pushBack();\r\n                String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n                if (//means that an error occur\r\n                w.equals(\"%%%\"))\r\n                    throw new JSParserError();\r\n                this.addElement(w);\r\n            }\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n            // return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            this.addElement(new JSTerm(tokenizer));\r\n            if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return;\r\n        }\r\n        String str = (String) this.elementAt(0);\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(str + \" \");\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            el.print();\r\n        } else {\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n        }\r\n        JSUtil.print(\" ) \");\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return res;\r\n        }\r\n        res.append(\"(\");\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        res.append(str);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            res.append(el.toStr());\r\n        } else {\r\n            //Additions end\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n        }\r\n        res.append(\")\");\r\n        //JSUtil.flag10(\"Atom: \"+ res);\r\n        return res;\r\n    }\r\n\r\n    public JSPredicateForm clonePF() {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.clonePF());\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.cloneT());\r\n            }\r\n        }\r\n        return np;\r\n    }\r\n\r\n    public JSPredicateForm applySubstitutionPF(JSSubstitution alpha) {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n        JSUtil.print(\"applyPF subst:\");\r\n        alpha.print();\r\n        JSUtil.print(\"to:\");\r\n        this.print();\r\n    }\r\n    JSUtil.flagPlanning(\"stop\");*/\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.applySubstitutionPF(alpha));\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n         JSUtil.flagPlanning(\"<--\");*/\r\n            for (short i = 1; i < this.size(); i++) {\r\n                /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                  np.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.applySubstitutionT(alpha));\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n     JSUtil.flagPlanning(\"<-- final applyPF\");*/\r\n        return np;\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t) {\r\n        return this.matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t, JSSubstitution alpha) /*this &  t does not have to be ground*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            beta = e1.matches(e2, alpha);\r\n            return beta;\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.cloneS();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n            JSUtil.print(\"The atom \");\r\n            this.print();\r\n            JSUtil.print(\"matches \");\r\n            t.print();\r\n            JSUtil.print(\"With subst. \");\r\n            beta.print();\r\n            JSUtil.print(\"Initial Subs:\");\r\n            alpha.print();\r\n        }\r\n        JSUtil.flagPlanning(\"stop\");*/\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSPredicateForm t) /* t is a ground term*/\r\n    {\r\n        if (t == null)\r\n            return false;\r\n        String functor = (String) this.elementAt(0);\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            return e1.equals(e2);\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSPredicateForm standarizerPredicateForm() {\r\n        JSPredicateForm nTA = new JSPredicateForm();\r\n        //Added 11/28/00\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            nTA.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            nTA.addElement(el.standarizerPredicateForm());\r\n            return nTA;\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPredicateFormTest3.java",
		"test_prompt": "// JSPredicateFormTest3.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPredicateForm}.\n* It contains ten unit test cases for the {@link JSPredicateForm#matches(JSPredicateForm)} method.\n*/\nclass JSPredicateFormTest3 {"
	},
	{
		"original_code": "// JSPredicateForm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSPredicateForm extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    JSPredicateForm() {\r\n        super();\r\n    }\r\n\r\n    // HICAP: Constructor used by NeoEditor to evaluate preconditions of methods.\r\n    // aNeoEditor.state.questions (an ArrayList of CaseQues 's).\r\n    // In a CaseQues: aCaseQues.question.predicate\r\n    // aCaseQues.getAnswer().equals(\"Yes\")\r\n    public JSPredicateForm(String text) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        super();\r\n        // System.out.println(\"JSPRedicateForm init with text: \" + text);\r\n        if (text != null) {\r\n            JSPredicateFormInit(new StreamTokenizer(new StringReader(text)));\r\n        }\r\n    }\r\n\r\n    // HICAP: To add to state:\r\n    //   1. add a Question: shop gives aJSPredicateForm and aString\r\n    //      describing it:  aState.addQuestion( JSPredicateForm predicate,\r\n    //      String questionTitle )\r\n    //      returns Question: method makes a new question, adds it to\r\n    //      the questionList, and makes a new CaseQues with that question\r\n    //      and answer \"Yes\" and adds it to the State.\r\n    //   2. add a CaseQues: question in 1 with answer \"Yes\".\r\n    //      public Question addQuestion( JSPredicateForm, String)\r\n    //      public void deleteFromState(  JSPredicateForm inPredicate):\r\n    //      find a Question in state whose predicate.equals( JSPredicateForm t)\r\n    //      the inPredicate\r\n    // HICAP: To add to state:\r\n    //  aNeoEditor.addToState( JSPredicateForm pred)\r\n    // To delete from state:\r\n    //   aNeoEditor.deleteFromState( JSPredicateForm pred)\r\n    public JSPredicateForm(StreamTokenizer tokenizer) {\r\n        // Parse elements of the form: (<name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        //       or: ,(+ ?m2 ?amount)\r\n        super();\r\n        JSPredicateFormInit(tokenizer);\r\n    }\r\n\r\n    void JSPredicateFormInit(StreamTokenizer tokenizer) {\r\n        //return;\r\n        if (tokenizer == null)\r\n            throw new JSParserError();\r\n        // JSUtil.flagParser(\"in PredicateForm()\");\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"expected '('\"))\r\n            //  return; // error: expected '('\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Reading Predicate\"))\r\n            //return; // error:\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            JSUtil.println(\"Unexpected ) while reading Predicate\");\r\n            // return;\r\n            throw new JSParserError();\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.exclamation) {\r\n            if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \"Operator name expected\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            tokenizer.pushBack();\r\n            String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n            if (//means that an error occur\r\n            w.equals(\"%%%\"))\r\n                //    return;\r\n                throw new JSParserError();\r\n            this.addElement(\"!\" + w);\r\n        } else {\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"not\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                this.addElement(new JSPredicateForm(tokenizer));\r\n                if (JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"JSPredicateForm\"))\r\n                    // Parse succesfull\r\n                    return;\r\n                else\r\n                    throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"call\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                tokenizer.ttype = JSJshopVars.leftPar;\r\n                tokenizer.pushBack();\r\n                JSTerm t = new JSTerm(tokenizer);\r\n                t.makeEval(true);\r\n                this.addElement(t);\r\n                // Parse succesfull\r\n                return;\r\n            } else {\r\n                if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                    JSUtil.println(\"PlanningDomain: error\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                tokenizer.pushBack();\r\n                String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n                if (//means that an error occur\r\n                w.equals(\"%%%\"))\r\n                    throw new JSParserError();\r\n                this.addElement(w);\r\n            }\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n            // return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            this.addElement(new JSTerm(tokenizer));\r\n            if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return;\r\n        }\r\n        String str = (String) this.elementAt(0);\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(str + \" \");\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            el.print();\r\n        } else {\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n        }\r\n        JSUtil.print(\" ) \");\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return res;\r\n        }\r\n        res.append(\"(\");\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        res.append(str);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            res.append(el.toStr());\r\n        } else {\r\n            //Additions end\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n        }\r\n        res.append(\")\");\r\n        //JSUtil.flag10(\"Atom: \"+ res);\r\n        return res;\r\n    }\r\n\r\n    public JSPredicateForm clonePF() {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.clonePF());\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.cloneT());\r\n            }\r\n        }\r\n        return np;\r\n    }\r\n\r\n    public JSPredicateForm applySubstitutionPF(JSSubstitution alpha) {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n        JSUtil.print(\"applyPF subst:\");\r\n        alpha.print();\r\n        JSUtil.print(\"to:\");\r\n        this.print();\r\n    }\r\n    JSUtil.flagPlanning(\"stop\");*/\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.applySubstitutionPF(alpha));\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n         JSUtil.flagPlanning(\"<--\");*/\r\n            for (short i = 1; i < this.size(); i++) {\r\n                /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                  np.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.applySubstitutionT(alpha));\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n     JSUtil.flagPlanning(\"<-- final applyPF\");*/\r\n        return np;\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t) {\r\n        return this.matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t, JSSubstitution alpha) /*this &  t does not have to be ground*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            beta = e1.matches(e2, alpha);\r\n            return beta;\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.cloneS();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n            JSUtil.print(\"The atom \");\r\n            this.print();\r\n            JSUtil.print(\"matches \");\r\n            t.print();\r\n            JSUtil.print(\"With subst. \");\r\n            beta.print();\r\n            JSUtil.print(\"Initial Subs:\");\r\n            alpha.print();\r\n        }\r\n        JSUtil.flagPlanning(\"stop\");*/\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSPredicateForm t) /* t is a ground term*/\r\n    {\r\n        if (t == null)\r\n            return false;\r\n        String functor = (String) this.elementAt(0);\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            return e1.equals(e2);\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSPredicateForm standarizerPredicateForm() {\r\n        JSPredicateForm nTA = new JSPredicateForm();\r\n        //Added 11/28/00\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            nTA.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            nTA.addElement(el.standarizerPredicateForm());\r\n            return nTA;\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPredicateFormTest4.java",
		"test_prompt": "// JSPredicateFormTest4.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPredicateForm}.\n* It contains ten unit test cases for the {@link JSPredicateForm#matches(JSPredicateForm, JSSubstitution)} method.\n*/\nclass JSPredicateFormTest4 {"
	},
	{
		"original_code": "// JSPredicateForm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSPredicateForm extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    JSPredicateForm() {\r\n        super();\r\n    }\r\n\r\n    // HICAP: Constructor used by NeoEditor to evaluate preconditions of methods.\r\n    // aNeoEditor.state.questions (an ArrayList of CaseQues 's).\r\n    // In a CaseQues: aCaseQues.question.predicate\r\n    // aCaseQues.getAnswer().equals(\"Yes\")\r\n    public JSPredicateForm(String text) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        super();\r\n        // System.out.println(\"JSPRedicateForm init with text: \" + text);\r\n        if (text != null) {\r\n            JSPredicateFormInit(new StreamTokenizer(new StringReader(text)));\r\n        }\r\n    }\r\n\r\n    // HICAP: To add to state:\r\n    //   1. add a Question: shop gives aJSPredicateForm and aString\r\n    //      describing it:  aState.addQuestion( JSPredicateForm predicate,\r\n    //      String questionTitle )\r\n    //      returns Question: method makes a new question, adds it to\r\n    //      the questionList, and makes a new CaseQues with that question\r\n    //      and answer \"Yes\" and adds it to the State.\r\n    //   2. add a CaseQues: question in 1 with answer \"Yes\".\r\n    //      public Question addQuestion( JSPredicateForm, String)\r\n    //      public void deleteFromState(  JSPredicateForm inPredicate):\r\n    //      find a Question in state whose predicate.equals( JSPredicateForm t)\r\n    //      the inPredicate\r\n    // HICAP: To add to state:\r\n    //  aNeoEditor.addToState( JSPredicateForm pred)\r\n    // To delete from state:\r\n    //   aNeoEditor.deleteFromState( JSPredicateForm pred)\r\n    public JSPredicateForm(StreamTokenizer tokenizer) {\r\n        // Parse elements of the form: (<name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        //       or: ,(+ ?m2 ?amount)\r\n        super();\r\n        JSPredicateFormInit(tokenizer);\r\n    }\r\n\r\n    void JSPredicateFormInit(StreamTokenizer tokenizer) {\r\n        //return;\r\n        if (tokenizer == null)\r\n            throw new JSParserError();\r\n        // JSUtil.flagParser(\"in PredicateForm()\");\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"expected '('\"))\r\n            //  return; // error: expected '('\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Reading Predicate\"))\r\n            //return; // error:\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            JSUtil.println(\"Unexpected ) while reading Predicate\");\r\n            // return;\r\n            throw new JSParserError();\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.exclamation) {\r\n            if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \"Operator name expected\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            tokenizer.pushBack();\r\n            String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n            if (//means that an error occur\r\n            w.equals(\"%%%\"))\r\n                //    return;\r\n                throw new JSParserError();\r\n            this.addElement(\"!\" + w);\r\n        } else {\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"not\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                this.addElement(new JSPredicateForm(tokenizer));\r\n                if (JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"JSPredicateForm\"))\r\n                    // Parse succesfull\r\n                    return;\r\n                else\r\n                    throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"call\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                tokenizer.ttype = JSJshopVars.leftPar;\r\n                tokenizer.pushBack();\r\n                JSTerm t = new JSTerm(tokenizer);\r\n                t.makeEval(true);\r\n                this.addElement(t);\r\n                // Parse succesfull\r\n                return;\r\n            } else {\r\n                if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                    JSUtil.println(\"PlanningDomain: error\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                tokenizer.pushBack();\r\n                String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n                if (//means that an error occur\r\n                w.equals(\"%%%\"))\r\n                    throw new JSParserError();\r\n                this.addElement(w);\r\n            }\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n            // return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            this.addElement(new JSTerm(tokenizer));\r\n            if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return;\r\n        }\r\n        String str = (String) this.elementAt(0);\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(str + \" \");\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            el.print();\r\n        } else {\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n        }\r\n        JSUtil.print(\" ) \");\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return res;\r\n        }\r\n        res.append(\"(\");\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        res.append(str);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            res.append(el.toStr());\r\n        } else {\r\n            //Additions end\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n        }\r\n        res.append(\")\");\r\n        //JSUtil.flag10(\"Atom: \"+ res);\r\n        return res;\r\n    }\r\n\r\n    public JSPredicateForm clonePF() {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.clonePF());\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.cloneT());\r\n            }\r\n        }\r\n        return np;\r\n    }\r\n\r\n    public JSPredicateForm applySubstitutionPF(JSSubstitution alpha) {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n        JSUtil.print(\"applyPF subst:\");\r\n        alpha.print();\r\n        JSUtil.print(\"to:\");\r\n        this.print();\r\n    }\r\n    JSUtil.flagPlanning(\"stop\");*/\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.applySubstitutionPF(alpha));\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n         JSUtil.flagPlanning(\"<--\");*/\r\n            for (short i = 1; i < this.size(); i++) {\r\n                /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                  np.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.applySubstitutionT(alpha));\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n     JSUtil.flagPlanning(\"<-- final applyPF\");*/\r\n        return np;\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t) {\r\n        return this.matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t, JSSubstitution alpha) /*this &  t does not have to be ground*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            beta = e1.matches(e2, alpha);\r\n            return beta;\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.cloneS();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n            JSUtil.print(\"The atom \");\r\n            this.print();\r\n            JSUtil.print(\"matches \");\r\n            t.print();\r\n            JSUtil.print(\"With subst. \");\r\n            beta.print();\r\n            JSUtil.print(\"Initial Subs:\");\r\n            alpha.print();\r\n        }\r\n        JSUtil.flagPlanning(\"stop\");*/\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSPredicateForm t) /* t is a ground term*/\r\n    {\r\n        if (t == null)\r\n            return false;\r\n        String functor = (String) this.elementAt(0);\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            return e1.equals(e2);\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSPredicateForm standarizerPredicateForm() {\r\n        JSPredicateForm nTA = new JSPredicateForm();\r\n        //Added 11/28/00\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            nTA.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            nTA.addElement(el.standarizerPredicateForm());\r\n            return nTA;\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPredicateFormTest5.java",
		"test_prompt": "// JSPredicateFormTest5.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPredicateForm}.\n* It contains ten unit test cases for the {@link JSPredicateForm#equals(JSPredicateForm)} method.\n*/\nclass JSPredicateFormTest5 {"
	},
	{
		"original_code": "// JSPredicateForm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSPredicateForm extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    JSPredicateForm() {\r\n        super();\r\n    }\r\n\r\n    // HICAP: Constructor used by NeoEditor to evaluate preconditions of methods.\r\n    // aNeoEditor.state.questions (an ArrayList of CaseQues 's).\r\n    // In a CaseQues: aCaseQues.question.predicate\r\n    // aCaseQues.getAnswer().equals(\"Yes\")\r\n    public JSPredicateForm(String text) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        super();\r\n        // System.out.println(\"JSPRedicateForm init with text: \" + text);\r\n        if (text != null) {\r\n            JSPredicateFormInit(new StreamTokenizer(new StringReader(text)));\r\n        }\r\n    }\r\n\r\n    // HICAP: To add to state:\r\n    //   1. add a Question: shop gives aJSPredicateForm and aString\r\n    //      describing it:  aState.addQuestion( JSPredicateForm predicate,\r\n    //      String questionTitle )\r\n    //      returns Question: method makes a new question, adds it to\r\n    //      the questionList, and makes a new CaseQues with that question\r\n    //      and answer \"Yes\" and adds it to the State.\r\n    //   2. add a CaseQues: question in 1 with answer \"Yes\".\r\n    //      public Question addQuestion( JSPredicateForm, String)\r\n    //      public void deleteFromState(  JSPredicateForm inPredicate):\r\n    //      find a Question in state whose predicate.equals( JSPredicateForm t)\r\n    //      the inPredicate\r\n    // HICAP: To add to state:\r\n    //  aNeoEditor.addToState( JSPredicateForm pred)\r\n    // To delete from state:\r\n    //   aNeoEditor.deleteFromState( JSPredicateForm pred)\r\n    public JSPredicateForm(StreamTokenizer tokenizer) {\r\n        // Parse elements of the form: (<name> <term1> ... <termN>)\r\n        // Example: (!set-money ?p2 ?m2 ,(+ ?m2 ?amount))\r\n        //       or: ,(+ ?m2 ?amount)\r\n        super();\r\n        JSPredicateFormInit(tokenizer);\r\n    }\r\n\r\n    void JSPredicateFormInit(StreamTokenizer tokenizer) {\r\n        //return;\r\n        if (tokenizer == null)\r\n            throw new JSParserError();\r\n        // JSUtil.flagParser(\"in PredicateForm()\");\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"expected '('\"))\r\n            //  return; // error: expected '('\r\n            throw new JSParserError();\r\n        if (!JSUtil.readToken(tokenizer, \"Reading Predicate\"))\r\n            //return; // error:\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            JSUtil.println(\"Unexpected ) while reading Predicate\");\r\n            // return;\r\n            throw new JSParserError();\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.exclamation) {\r\n            if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \"Operator name expected\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            tokenizer.pushBack();\r\n            String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n            if (//means that an error occur\r\n            w.equals(\"%%%\"))\r\n                //    return;\r\n                throw new JSParserError();\r\n            this.addElement(\"!\" + w);\r\n        } else {\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"not\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                this.addElement(new JSPredicateForm(tokenizer));\r\n                if (JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"JSPredicateForm\"))\r\n                    // Parse succesfull\r\n                    return;\r\n                else\r\n                    throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equalsIgnoreCase(\"call\")) {\r\n                this.addElement(new String(tokenizer.sval));\r\n                tokenizer.ttype = JSJshopVars.leftPar;\r\n                tokenizer.pushBack();\r\n                JSTerm t = new JSTerm(tokenizer);\r\n                t.makeEval(true);\r\n                this.addElement(t);\r\n                // Parse succesfull\r\n                return;\r\n            } else {\r\n                if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                    JSUtil.println(\"PlanningDomain: error\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                tokenizer.pushBack();\r\n                String w = JSUtil.readWord(tokenizer, \"JSPredicateForm\");\r\n                if (//means that an error occur\r\n                w.equals(\"%%%\"))\r\n                    throw new JSParserError();\r\n                this.addElement(w);\r\n            }\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n            // return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            this.addElement(new JSTerm(tokenizer));\r\n            if (!JSUtil.readToken(tokenizer, \"JSPredicateForm\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return;\r\n        }\r\n        String str = (String) this.elementAt(0);\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(str + \" \");\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            el.print();\r\n        } else {\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n        }\r\n        JSUtil.print(\" ) \");\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.size() == 0) {\r\n            JSUtil.println(\"Predicateform.print(): 0 elements\");\r\n            return res;\r\n        }\r\n        res.append(\"(\");\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        res.append(str);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            res.append(el.toStr());\r\n        } else {\r\n            //Additions end\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n        }\r\n        res.append(\")\");\r\n        //JSUtil.flag10(\"Atom: \"+ res);\r\n        return res;\r\n    }\r\n\r\n    public JSPredicateForm clonePF() {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.clonePF());\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.cloneT());\r\n            }\r\n        }\r\n        return np;\r\n    }\r\n\r\n    public JSPredicateForm applySubstitutionPF(JSSubstitution alpha) {\r\n        JSPredicateForm np = new JSPredicateForm();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n        JSUtil.print(\"applyPF subst:\");\r\n        alpha.print();\r\n        JSUtil.print(\"to:\");\r\n        this.print();\r\n    }\r\n    JSUtil.flagPlanning(\"stop\");*/\r\n        // Added 11/28/200\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            np.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            np.addElement(el.applySubstitutionPF(alpha));\r\n        } else {\r\n            //Additions end\r\n            np.addElement(this.elementAt(0));\r\n            JSTerm ti;\r\n            /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n         JSUtil.flagPlanning(\"<--\");*/\r\n            for (short i = 1; i < this.size(); i++) {\r\n                /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                  np.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n                ti = (JSTerm) this.elementAt(i);\r\n                np.addElement(ti.applySubstitutionT(alpha));\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n           np.print();\r\n     JSUtil.flagPlanning(\"<-- final applyPF\");*/\r\n        return np;\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t) {\r\n        return this.matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSPredicateForm t, JSSubstitution alpha) /*this &  t does not have to be ground*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            beta = e1.matches(e2, alpha);\r\n            return beta;\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.cloneS();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n            JSUtil.print(\"The atom \");\r\n            this.print();\r\n            JSUtil.print(\"matches \");\r\n            t.print();\r\n            JSUtil.print(\"With subst. \");\r\n            beta.print();\r\n            JSUtil.print(\"Initial Subs:\");\r\n            alpha.print();\r\n        }\r\n        JSUtil.flagPlanning(\"stop\");*/\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSPredicateForm t) /* t is a ground term*/\r\n    {\r\n        if (t == null)\r\n            return false;\r\n        String functor = (String) this.elementAt(0);\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        // Added 11/28/00\r\n        if (functor.equalsIgnoreCase(\"not\")) {\r\n            JSPredicateForm e1 = (JSPredicateForm) this.elementAt(1);\r\n            JSPredicateForm e2 = (JSPredicateForm) t.elementAt(1);\r\n            return e1.equals(e2);\r\n        }\r\n        // Additions end\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSPredicateForm standarizerPredicateForm() {\r\n        JSPredicateForm nTA = new JSPredicateForm();\r\n        //Added 11/28/00\r\n        String str = (String) this.elementAt(0);\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            nTA.addElement(this.elementAt(0));\r\n            JSPredicateForm el;\r\n            el = (JSPredicateForm) this.elementAt(1);\r\n            nTA.addElement(el.standarizerPredicateForm());\r\n            return nTA;\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPredicateFormTest6.java",
		"test_prompt": "// JSPredicateFormTest6.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPredicateForm}.\n* It contains ten unit test cases for the {@link JSPredicateForm#standarizerPredicateForm()} method.\n*/\nclass JSPredicateFormTest6 {"
	},
	{
		"original_code": "// JSPairVarTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSPairVarTerm {\r\n\r\n    JSTerm var;\r\n\r\n    JSTerm term;\r\n\r\n    JSPairVarTerm() {\r\n        super();\r\n    }\r\n\r\n    JSPairVarTerm(JSTerm v, JSTerm t) {\r\n        super();\r\n        var = v;\r\n        term = t;\r\n    }\r\n\r\n    public JSTerm var() {\r\n        return var;\r\n    }\r\n\r\n    public JSTerm term() {\r\n        return term;\r\n    }\r\n\r\n    public void setTerm(JSTerm t) {\r\n        term = t;\r\n    }\r\n\r\n    public JSPairVarTerm clonePVT() {\r\n        JSTerm v = this.var();\r\n        JSTerm t = this.term();\r\n        return new JSPairVarTerm(v.cloneT(), t.cloneT());\r\n    }\r\n\r\n    public void print() {\r\n        JSTerm v = this.var();\r\n        JSTerm t = this.term();\r\n        JSUtil.print(\"(\");\r\n        v.print();\r\n        JSUtil.print(\"->\");\r\n        t.print();\r\n        JSUtil.print(\")\");\r\n    }\r\n\r\n    public JSPairVarTerm standarizerPVT() {\r\n        JSTerm v = this.var();\r\n        JSTerm t = this.term();\r\n        JSPairVarTerm newPVT = new JSPairVarTerm();\r\n        newPVT.var = v.standardizerTerm();\r\n        newPVT.term = t.standardizerTerm();\r\n        return newPVT;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPairVarTermTest0.java",
		"test_prompt": "// JSPairVarTermTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPairVarTerm}.\n* It contains ten unit test cases for the {@link JSPairVarTerm#var()} method.\n*/\nclass JSPairVarTermTest0 {"
	},
	{
		"original_code": "// JSPairVarTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSPairVarTerm {\r\n\r\n    JSTerm var;\r\n\r\n    JSTerm term;\r\n\r\n    JSPairVarTerm() {\r\n        super();\r\n    }\r\n\r\n    JSPairVarTerm(JSTerm v, JSTerm t) {\r\n        super();\r\n        var = v;\r\n        term = t;\r\n    }\r\n\r\n    public JSTerm var() {\r\n        return var;\r\n    }\r\n\r\n    public JSTerm term() {\r\n        return term;\r\n    }\r\n\r\n    public void setTerm(JSTerm t) {\r\n        term = t;\r\n    }\r\n\r\n    public JSPairVarTerm clonePVT() {\r\n        JSTerm v = this.var();\r\n        JSTerm t = this.term();\r\n        return new JSPairVarTerm(v.cloneT(), t.cloneT());\r\n    }\r\n\r\n    public void print() {\r\n        JSTerm v = this.var();\r\n        JSTerm t = this.term();\r\n        JSUtil.print(\"(\");\r\n        v.print();\r\n        JSUtil.print(\"->\");\r\n        t.print();\r\n        JSUtil.print(\")\");\r\n    }\r\n\r\n    public JSPairVarTerm standarizerPVT() {\r\n        JSTerm v = this.var();\r\n        JSTerm t = this.term();\r\n        JSPairVarTerm newPVT = new JSPairVarTerm();\r\n        newPVT.var = v.standardizerTerm();\r\n        newPVT.term = t.standardizerTerm();\r\n        return newPVT;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPairVarTermTest1.java",
		"test_prompt": "// JSPairVarTermTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPairVarTerm}.\n* It contains ten unit test cases for the {@link JSPairVarTerm#term()} method.\n*/\nclass JSPairVarTermTest1 {"
	},
	{
		"original_code": "// JSPairVarTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSPairVarTerm {\r\n\r\n    JSTerm var;\r\n\r\n    JSTerm term;\r\n\r\n    JSPairVarTerm() {\r\n        super();\r\n    }\r\n\r\n    JSPairVarTerm(JSTerm v, JSTerm t) {\r\n        super();\r\n        var = v;\r\n        term = t;\r\n    }\r\n\r\n    public JSTerm var() {\r\n        return var;\r\n    }\r\n\r\n    public JSTerm term() {\r\n        return term;\r\n    }\r\n\r\n    public void setTerm(JSTerm t) {\r\n        term = t;\r\n    }\r\n\r\n    public JSPairVarTerm clonePVT() {\r\n        JSTerm v = this.var();\r\n        JSTerm t = this.term();\r\n        return new JSPairVarTerm(v.cloneT(), t.cloneT());\r\n    }\r\n\r\n    public void print() {\r\n        JSTerm v = this.var();\r\n        JSTerm t = this.term();\r\n        JSUtil.print(\"(\");\r\n        v.print();\r\n        JSUtil.print(\"->\");\r\n        t.print();\r\n        JSUtil.print(\")\");\r\n    }\r\n\r\n    public JSPairVarTerm standarizerPVT() {\r\n        JSTerm v = this.var();\r\n        JSTerm t = this.term();\r\n        JSPairVarTerm newPVT = new JSPairVarTerm();\r\n        newPVT.var = v.standardizerTerm();\r\n        newPVT.term = t.standardizerTerm();\r\n        return newPVT;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPairVarTermTest2.java",
		"test_prompt": "// JSPairVarTermTest2.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPairVarTerm}.\n* It contains ten unit test cases for the {@link JSPairVarTerm#clonePVT()} method.\n*/\nclass JSPairVarTermTest2 {"
	},
	{
		"original_code": "// JSPairVarTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSPairVarTerm {\r\n\r\n    JSTerm var;\r\n\r\n    JSTerm term;\r\n\r\n    JSPairVarTerm() {\r\n        super();\r\n    }\r\n\r\n    JSPairVarTerm(JSTerm v, JSTerm t) {\r\n        super();\r\n        var = v;\r\n        term = t;\r\n    }\r\n\r\n    public JSTerm var() {\r\n        return var;\r\n    }\r\n\r\n    public JSTerm term() {\r\n        return term;\r\n    }\r\n\r\n    public void setTerm(JSTerm t) {\r\n        term = t;\r\n    }\r\n\r\n    public JSPairVarTerm clonePVT() {\r\n        JSTerm v = this.var();\r\n        JSTerm t = this.term();\r\n        return new JSPairVarTerm(v.cloneT(), t.cloneT());\r\n    }\r\n\r\n    public void print() {\r\n        JSTerm v = this.var();\r\n        JSTerm t = this.term();\r\n        JSUtil.print(\"(\");\r\n        v.print();\r\n        JSUtil.print(\"->\");\r\n        t.print();\r\n        JSUtil.print(\")\");\r\n    }\r\n\r\n    public JSPairVarTerm standarizerPVT() {\r\n        JSTerm v = this.var();\r\n        JSTerm t = this.term();\r\n        JSPairVarTerm newPVT = new JSPairVarTerm();\r\n        newPVT.var = v.standardizerTerm();\r\n        newPVT.term = t.standardizerTerm();\r\n        return newPVT;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPairVarTermTest3.java",
		"test_prompt": "// JSPairVarTermTest3.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPairVarTerm}.\n* It contains ten unit test cases for the {@link JSPairVarTerm#standarizerPVT()} method.\n*/\nclass JSPairVarTermTest3 {"
	},
	{
		"original_code": "// JSOperator.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSOperator {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSTaskAtom head;\r\n\r\n    private JSListLogicalAtoms precondition;\r\n\r\n    private JSListLogicalAtoms deleteList;\r\n\r\n    private JSListLogicalAtoms addList;\r\n\r\n    private double cost = 1;\r\n\r\n    /**\r\n     * * constructor ***\r\n     */\r\n    JSOperator() {\r\n        super();\r\n    }\r\n\r\n    JSOperator(StreamTokenizer tokenizer) {\r\n        head = new JSTaskAtom(tokenizer);\r\n        precondition = new JSListLogicalAtoms(tokenizer);\r\n        deleteList = new JSListLogicalAtoms(tokenizer);\r\n        addList = new JSListLogicalAtoms(tokenizer);\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting ) or operator cost\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n            cost = tokenizer.nval;\r\n        else\r\n            tokenizer.pushBack();\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":Operator \");\r\n        head.print();\r\n        precondition.print();\r\n        JSUtil.print(\"-: \");\r\n        deleteList.print();\r\n        JSUtil.print(\"+: \");\r\n        addList.print();\r\n        //if (cost != 1)\r\n        JSUtil.print(cost + \" \");\r\n        JSUtil.println(\")\");\r\n        //       JSUtil.flag(\"<-- operator\");\r\n    }\r\n\r\n    public JSTaskAtom head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListLogicalAtoms addList() {\r\n        return addList;\r\n    }\r\n\r\n    public JSListLogicalAtoms deleteList() {\r\n        return deleteList;\r\n    }\r\n\r\n    public JSListLogicalAtoms precondition() {\r\n        return precondition;\r\n    }\r\n\r\n    public double cost() {\r\n        return cost;\r\n    }\r\n\r\n    public JSOperator standarizerOp() {\r\n        JSOperator newOp = new JSOperator();\r\n        JSTaskAtom ta = this.head();\r\n        JSListLogicalAtoms pre = this.precondition();\r\n        JSListLogicalAtoms addL = this.addList();\r\n        JSListLogicalAtoms delL = this.deleteList();\r\n        newOp.head = ta.standarizerTA();\r\n        newOp.deleteList = delL.standarizerListLogicalAtoms();\r\n        newOp.addList = addL.standarizerListLogicalAtoms();\r\n        newOp.precondition = pre.standarizerListLogicalAtoms();\r\n        newOp.cost = cost;\r\n        return newOp;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSOperatorTest0.java",
		"test_prompt": "// JSOperatorTest0.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSOperator}.\n* It contains ten unit test cases for the {@link JSOperator#head()} method.\n*/\nclass JSOperatorTest0 {"
	},
	{
		"original_code": "// JSOperator.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSOperator {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSTaskAtom head;\r\n\r\n    private JSListLogicalAtoms precondition;\r\n\r\n    private JSListLogicalAtoms deleteList;\r\n\r\n    private JSListLogicalAtoms addList;\r\n\r\n    private double cost = 1;\r\n\r\n    /**\r\n     * * constructor ***\r\n     */\r\n    JSOperator() {\r\n        super();\r\n    }\r\n\r\n    JSOperator(StreamTokenizer tokenizer) {\r\n        head = new JSTaskAtom(tokenizer);\r\n        precondition = new JSListLogicalAtoms(tokenizer);\r\n        deleteList = new JSListLogicalAtoms(tokenizer);\r\n        addList = new JSListLogicalAtoms(tokenizer);\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting ) or operator cost\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n            cost = tokenizer.nval;\r\n        else\r\n            tokenizer.pushBack();\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":Operator \");\r\n        head.print();\r\n        precondition.print();\r\n        JSUtil.print(\"-: \");\r\n        deleteList.print();\r\n        JSUtil.print(\"+: \");\r\n        addList.print();\r\n        //if (cost != 1)\r\n        JSUtil.print(cost + \" \");\r\n        JSUtil.println(\")\");\r\n        //       JSUtil.flag(\"<-- operator\");\r\n    }\r\n\r\n    public JSTaskAtom head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListLogicalAtoms addList() {\r\n        return addList;\r\n    }\r\n\r\n    public JSListLogicalAtoms deleteList() {\r\n        return deleteList;\r\n    }\r\n\r\n    public JSListLogicalAtoms precondition() {\r\n        return precondition;\r\n    }\r\n\r\n    public double cost() {\r\n        return cost;\r\n    }\r\n\r\n    public JSOperator standarizerOp() {\r\n        JSOperator newOp = new JSOperator();\r\n        JSTaskAtom ta = this.head();\r\n        JSListLogicalAtoms pre = this.precondition();\r\n        JSListLogicalAtoms addL = this.addList();\r\n        JSListLogicalAtoms delL = this.deleteList();\r\n        newOp.head = ta.standarizerTA();\r\n        newOp.deleteList = delL.standarizerListLogicalAtoms();\r\n        newOp.addList = addL.standarizerListLogicalAtoms();\r\n        newOp.precondition = pre.standarizerListLogicalAtoms();\r\n        newOp.cost = cost;\r\n        return newOp;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSOperatorTest1.java",
		"test_prompt": "// JSOperatorTest1.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSOperator}.\n* It contains ten unit test cases for the {@link JSOperator#addList()} method.\n*/\nclass JSOperatorTest1 {"
	},
	{
		"original_code": "// JSOperator.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSOperator {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSTaskAtom head;\r\n\r\n    private JSListLogicalAtoms precondition;\r\n\r\n    private JSListLogicalAtoms deleteList;\r\n\r\n    private JSListLogicalAtoms addList;\r\n\r\n    private double cost = 1;\r\n\r\n    /**\r\n     * * constructor ***\r\n     */\r\n    JSOperator() {\r\n        super();\r\n    }\r\n\r\n    JSOperator(StreamTokenizer tokenizer) {\r\n        head = new JSTaskAtom(tokenizer);\r\n        precondition = new JSListLogicalAtoms(tokenizer);\r\n        deleteList = new JSListLogicalAtoms(tokenizer);\r\n        addList = new JSListLogicalAtoms(tokenizer);\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting ) or operator cost\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n            cost = tokenizer.nval;\r\n        else\r\n            tokenizer.pushBack();\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":Operator \");\r\n        head.print();\r\n        precondition.print();\r\n        JSUtil.print(\"-: \");\r\n        deleteList.print();\r\n        JSUtil.print(\"+: \");\r\n        addList.print();\r\n        //if (cost != 1)\r\n        JSUtil.print(cost + \" \");\r\n        JSUtil.println(\")\");\r\n        //       JSUtil.flag(\"<-- operator\");\r\n    }\r\n\r\n    public JSTaskAtom head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListLogicalAtoms addList() {\r\n        return addList;\r\n    }\r\n\r\n    public JSListLogicalAtoms deleteList() {\r\n        return deleteList;\r\n    }\r\n\r\n    public JSListLogicalAtoms precondition() {\r\n        return precondition;\r\n    }\r\n\r\n    public double cost() {\r\n        return cost;\r\n    }\r\n\r\n    public JSOperator standarizerOp() {\r\n        JSOperator newOp = new JSOperator();\r\n        JSTaskAtom ta = this.head();\r\n        JSListLogicalAtoms pre = this.precondition();\r\n        JSListLogicalAtoms addL = this.addList();\r\n        JSListLogicalAtoms delL = this.deleteList();\r\n        newOp.head = ta.standarizerTA();\r\n        newOp.deleteList = delL.standarizerListLogicalAtoms();\r\n        newOp.addList = addL.standarizerListLogicalAtoms();\r\n        newOp.precondition = pre.standarizerListLogicalAtoms();\r\n        newOp.cost = cost;\r\n        return newOp;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSOperatorTest2.java",
		"test_prompt": "// JSOperatorTest2.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSOperator}.\n* It contains ten unit test cases for the {@link JSOperator#deleteList()} method.\n*/\nclass JSOperatorTest2 {"
	},
	{
		"original_code": "// JSOperator.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSOperator {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSTaskAtom head;\r\n\r\n    private JSListLogicalAtoms precondition;\r\n\r\n    private JSListLogicalAtoms deleteList;\r\n\r\n    private JSListLogicalAtoms addList;\r\n\r\n    private double cost = 1;\r\n\r\n    /**\r\n     * * constructor ***\r\n     */\r\n    JSOperator() {\r\n        super();\r\n    }\r\n\r\n    JSOperator(StreamTokenizer tokenizer) {\r\n        head = new JSTaskAtom(tokenizer);\r\n        precondition = new JSListLogicalAtoms(tokenizer);\r\n        deleteList = new JSListLogicalAtoms(tokenizer);\r\n        addList = new JSListLogicalAtoms(tokenizer);\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting ) or operator cost\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n            cost = tokenizer.nval;\r\n        else\r\n            tokenizer.pushBack();\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":Operator \");\r\n        head.print();\r\n        precondition.print();\r\n        JSUtil.print(\"-: \");\r\n        deleteList.print();\r\n        JSUtil.print(\"+: \");\r\n        addList.print();\r\n        //if (cost != 1)\r\n        JSUtil.print(cost + \" \");\r\n        JSUtil.println(\")\");\r\n        //       JSUtil.flag(\"<-- operator\");\r\n    }\r\n\r\n    public JSTaskAtom head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListLogicalAtoms addList() {\r\n        return addList;\r\n    }\r\n\r\n    public JSListLogicalAtoms deleteList() {\r\n        return deleteList;\r\n    }\r\n\r\n    public JSListLogicalAtoms precondition() {\r\n        return precondition;\r\n    }\r\n\r\n    public double cost() {\r\n        return cost;\r\n    }\r\n\r\n    public JSOperator standarizerOp() {\r\n        JSOperator newOp = new JSOperator();\r\n        JSTaskAtom ta = this.head();\r\n        JSListLogicalAtoms pre = this.precondition();\r\n        JSListLogicalAtoms addL = this.addList();\r\n        JSListLogicalAtoms delL = this.deleteList();\r\n        newOp.head = ta.standarizerTA();\r\n        newOp.deleteList = delL.standarizerListLogicalAtoms();\r\n        newOp.addList = addL.standarizerListLogicalAtoms();\r\n        newOp.precondition = pre.standarizerListLogicalAtoms();\r\n        newOp.cost = cost;\r\n        return newOp;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSOperatorTest3.java",
		"test_prompt": "// JSOperatorTest3.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSOperator}.\n* It contains ten unit test cases for the {@link JSOperator#precondition()} method.\n*/\nclass JSOperatorTest3 {"
	},
	{
		"original_code": "// JSOperator.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSOperator {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSTaskAtom head;\r\n\r\n    private JSListLogicalAtoms precondition;\r\n\r\n    private JSListLogicalAtoms deleteList;\r\n\r\n    private JSListLogicalAtoms addList;\r\n\r\n    private double cost = 1;\r\n\r\n    /**\r\n     * * constructor ***\r\n     */\r\n    JSOperator() {\r\n        super();\r\n    }\r\n\r\n    JSOperator(StreamTokenizer tokenizer) {\r\n        head = new JSTaskAtom(tokenizer);\r\n        precondition = new JSListLogicalAtoms(tokenizer);\r\n        deleteList = new JSListLogicalAtoms(tokenizer);\r\n        addList = new JSListLogicalAtoms(tokenizer);\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting ) or operator cost\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n            cost = tokenizer.nval;\r\n        else\r\n            tokenizer.pushBack();\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":Operator \");\r\n        head.print();\r\n        precondition.print();\r\n        JSUtil.print(\"-: \");\r\n        deleteList.print();\r\n        JSUtil.print(\"+: \");\r\n        addList.print();\r\n        //if (cost != 1)\r\n        JSUtil.print(cost + \" \");\r\n        JSUtil.println(\")\");\r\n        //       JSUtil.flag(\"<-- operator\");\r\n    }\r\n\r\n    public JSTaskAtom head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListLogicalAtoms addList() {\r\n        return addList;\r\n    }\r\n\r\n    public JSListLogicalAtoms deleteList() {\r\n        return deleteList;\r\n    }\r\n\r\n    public JSListLogicalAtoms precondition() {\r\n        return precondition;\r\n    }\r\n\r\n    public double cost() {\r\n        return cost;\r\n    }\r\n\r\n    public JSOperator standarizerOp() {\r\n        JSOperator newOp = new JSOperator();\r\n        JSTaskAtom ta = this.head();\r\n        JSListLogicalAtoms pre = this.precondition();\r\n        JSListLogicalAtoms addL = this.addList();\r\n        JSListLogicalAtoms delL = this.deleteList();\r\n        newOp.head = ta.standarizerTA();\r\n        newOp.deleteList = delL.standarizerListLogicalAtoms();\r\n        newOp.addList = addL.standarizerListLogicalAtoms();\r\n        newOp.precondition = pre.standarizerListLogicalAtoms();\r\n        newOp.cost = cost;\r\n        return newOp;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSOperatorTest4.java",
		"test_prompt": "// JSOperatorTest4.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSOperator}.\n* It contains ten unit test cases for the {@link JSOperator#cost()} method.\n*/\nclass JSOperatorTest4 {"
	},
	{
		"original_code": "// JSOperator.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSOperator {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSTaskAtom head;\r\n\r\n    private JSListLogicalAtoms precondition;\r\n\r\n    private JSListLogicalAtoms deleteList;\r\n\r\n    private JSListLogicalAtoms addList;\r\n\r\n    private double cost = 1;\r\n\r\n    /**\r\n     * * constructor ***\r\n     */\r\n    JSOperator() {\r\n        super();\r\n    }\r\n\r\n    JSOperator(StreamTokenizer tokenizer) {\r\n        head = new JSTaskAtom(tokenizer);\r\n        precondition = new JSListLogicalAtoms(tokenizer);\r\n        deleteList = new JSListLogicalAtoms(tokenizer);\r\n        addList = new JSListLogicalAtoms(tokenizer);\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting ) or operator cost\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n            cost = tokenizer.nval;\r\n        else\r\n            tokenizer.pushBack();\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":Operator \");\r\n        head.print();\r\n        precondition.print();\r\n        JSUtil.print(\"-: \");\r\n        deleteList.print();\r\n        JSUtil.print(\"+: \");\r\n        addList.print();\r\n        //if (cost != 1)\r\n        JSUtil.print(cost + \" \");\r\n        JSUtil.println(\")\");\r\n        //       JSUtil.flag(\"<-- operator\");\r\n    }\r\n\r\n    public JSTaskAtom head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListLogicalAtoms addList() {\r\n        return addList;\r\n    }\r\n\r\n    public JSListLogicalAtoms deleteList() {\r\n        return deleteList;\r\n    }\r\n\r\n    public JSListLogicalAtoms precondition() {\r\n        return precondition;\r\n    }\r\n\r\n    public double cost() {\r\n        return cost;\r\n    }\r\n\r\n    public JSOperator standarizerOp() {\r\n        JSOperator newOp = new JSOperator();\r\n        JSTaskAtom ta = this.head();\r\n        JSListLogicalAtoms pre = this.precondition();\r\n        JSListLogicalAtoms addL = this.addList();\r\n        JSListLogicalAtoms delL = this.deleteList();\r\n        newOp.head = ta.standarizerTA();\r\n        newOp.deleteList = delL.standarizerListLogicalAtoms();\r\n        newOp.addList = addL.standarizerListLogicalAtoms();\r\n        newOp.precondition = pre.standarizerListLogicalAtoms();\r\n        newOp.cost = cost;\r\n        return newOp;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSOperatorTest5.java",
		"test_prompt": "// JSOperatorTest5.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSOperator}.\n* It contains ten unit test cases for the {@link JSOperator#standarizerOp()} method.\n*/\nclass JSOperatorTest5 {"
	},
	{
		"original_code": "// JSTaskAtom.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSTaskAtom extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    boolean isPrimitive;\r\n\r\n    boolean isCompound;\r\n\r\n    public JSTaskAtom(String text) {\r\n        super(text);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    public JSTaskAtom(StreamTokenizer token) {\r\n        super(token);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    JSTaskAtom() {\r\n        super();\r\n    }\r\n\r\n    public JSPairPlanTState seekSimplePlan(JSPlanningDomain dom, JSTState ts) {\r\n        JSPairPlanTState pair;\r\n        JSSubstitution alpha;\r\n        JSOperator op;\r\n        JSListOperators list = dom.operators();\r\n        JSTaskAtom top;\r\n        JSState ns;\r\n        JSTState tState;\r\n        JSPlan pl = new JSPlan();\r\n        boolean thisIsGround = this.isGround();\r\n        for (short i = 0; i < list.size(); i++) {\r\n            op = (JSOperator) list.elementAt(i);\r\n            top = op.head();\r\n            if (!thisIsGround) {\r\n                top = top.standarizerTA();\r\n            }\r\n            alpha = top.matches(this);\r\n            if (!alpha.fail()) {\r\n                op = op.standarizerOp();\r\n                alpha = alpha.standarizerSubs();\r\n                JSJshopVars.VarCounter++;\r\n                JSListSubstitution satisfiers = dom.axioms().TheoremProver(op.precondition(), ts.state(), alpha, true);\r\n                if (!satisfiers.isEmpty()) {\r\n                    tState = ts.state().applyOp(op, alpha, ts.addList(), ts.deleteList());\r\n                    ns = tState.state();\r\n                    top = op.head();\r\n                    pl.addWithCost(top.applySubstitutionTA(alpha), op.cost());\r\n                    return new JSPairPlanTState(pl, tState);\r\n                }\r\n            }\r\n        }\r\n        pl.assignFailure();\r\n        return new JSPairPlanTState(pl, new JSTState());\r\n    }\r\n\r\n    public JSReduction reduce(JSPlanningDomain dom, JSState s, JSReduction red) {\r\n        //JSUtil.flag(\"reduce(PlanningDomain dom,State s,Reduction red)\");\r\n        JSListMethods mets = dom.methods();\r\n        return mets.findReduction(this, s, red, dom.axioms());\r\n    }\r\n\r\n    public JSTaskAtom applySubstitutionTA(JSSubstitution alpha) {\r\n        JSTaskAtom nta = new JSTaskAtom();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n    JSUtil.print(\"applyTA subst:\");\r\n    alpha.print();\r\n    JSUtil.print(\"to:\");\r\n    this.print();\r\n   }*/\r\n        /* if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"stop\");*/\r\n        if (this.isPrimitive()) {\r\n            nta.makePrimitive();\r\n        } else {\r\n            nta.makeCompound();\r\n        }\r\n        nta.addElement(this.elementAt(0));\r\n        JSTerm ti, te;\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n        nta.print();*/\r\n        /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"<--\");*/\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                 nta.print();*/\r\n            /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n                 JSUtil.flag(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            // nta.addElement(ti.applySubstitutionT(alpha));\r\n            // Added 11/29/2000\r\n            te = ti.applySubstitutionT(alpha);\r\n            nta.addElement(te.call());\r\n            // Additions ended\r\n        }\r\n        /*  if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n            nta.print();\r\n     if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n            JSUtil.flag(\"<-- final applyTA\");*/\r\n        return nta;\r\n    }\r\n\r\n    public JSTaskAtom cloneTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.cloneT());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTaskAtom standarizerTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    JSJshopNode findInList(Vector list) {\r\n        JSJshopNode node;\r\n        for (int i = 0; i < list.size(); i++) {\r\n            node = (JSJshopNode) list.elementAt(i);\r\n            if (this.equals(node.atom())) {\r\n                return node;\r\n            }\r\n        }\r\n        return new JSJshopNode(this, new Vector());\r\n    }\r\n\r\n    public boolean isPrimitive() {\r\n        return isPrimitive;\r\n    }\r\n\r\n    public boolean isCompound() {\r\n        return isCompound;\r\n    }\r\n\r\n    public void makePrimitive() {\r\n        isPrimitive = true;\r\n        isCompound = false;\r\n    }\r\n\r\n    public void makeCompound() {\r\n        isPrimitive = false;\r\n        isCompound = true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTaskAtomTest0.java",
		"test_prompt": "// JSTaskAtomTest0.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTaskAtom}.\n* It contains ten unit test cases for the {@link JSTaskAtom#seekSimplePlan(JSPlanningDomain, JSTState)} method.\n*/\nclass JSTaskAtomTest0 {"
	},
	{
		"original_code": "// JSTaskAtom.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSTaskAtom extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    boolean isPrimitive;\r\n\r\n    boolean isCompound;\r\n\r\n    public JSTaskAtom(String text) {\r\n        super(text);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    public JSTaskAtom(StreamTokenizer token) {\r\n        super(token);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    JSTaskAtom() {\r\n        super();\r\n    }\r\n\r\n    public JSPairPlanTState seekSimplePlan(JSPlanningDomain dom, JSTState ts) {\r\n        JSPairPlanTState pair;\r\n        JSSubstitution alpha;\r\n        JSOperator op;\r\n        JSListOperators list = dom.operators();\r\n        JSTaskAtom top;\r\n        JSState ns;\r\n        JSTState tState;\r\n        JSPlan pl = new JSPlan();\r\n        boolean thisIsGround = this.isGround();\r\n        for (short i = 0; i < list.size(); i++) {\r\n            op = (JSOperator) list.elementAt(i);\r\n            top = op.head();\r\n            if (!thisIsGround) {\r\n                top = top.standarizerTA();\r\n            }\r\n            alpha = top.matches(this);\r\n            if (!alpha.fail()) {\r\n                op = op.standarizerOp();\r\n                alpha = alpha.standarizerSubs();\r\n                JSJshopVars.VarCounter++;\r\n                JSListSubstitution satisfiers = dom.axioms().TheoremProver(op.precondition(), ts.state(), alpha, true);\r\n                if (!satisfiers.isEmpty()) {\r\n                    tState = ts.state().applyOp(op, alpha, ts.addList(), ts.deleteList());\r\n                    ns = tState.state();\r\n                    top = op.head();\r\n                    pl.addWithCost(top.applySubstitutionTA(alpha), op.cost());\r\n                    return new JSPairPlanTState(pl, tState);\r\n                }\r\n            }\r\n        }\r\n        pl.assignFailure();\r\n        return new JSPairPlanTState(pl, new JSTState());\r\n    }\r\n\r\n    public JSReduction reduce(JSPlanningDomain dom, JSState s, JSReduction red) {\r\n        //JSUtil.flag(\"reduce(PlanningDomain dom,State s,Reduction red)\");\r\n        JSListMethods mets = dom.methods();\r\n        return mets.findReduction(this, s, red, dom.axioms());\r\n    }\r\n\r\n    public JSTaskAtom applySubstitutionTA(JSSubstitution alpha) {\r\n        JSTaskAtom nta = new JSTaskAtom();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n    JSUtil.print(\"applyTA subst:\");\r\n    alpha.print();\r\n    JSUtil.print(\"to:\");\r\n    this.print();\r\n   }*/\r\n        /* if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"stop\");*/\r\n        if (this.isPrimitive()) {\r\n            nta.makePrimitive();\r\n        } else {\r\n            nta.makeCompound();\r\n        }\r\n        nta.addElement(this.elementAt(0));\r\n        JSTerm ti, te;\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n        nta.print();*/\r\n        /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"<--\");*/\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                 nta.print();*/\r\n            /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n                 JSUtil.flag(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            // nta.addElement(ti.applySubstitutionT(alpha));\r\n            // Added 11/29/2000\r\n            te = ti.applySubstitutionT(alpha);\r\n            nta.addElement(te.call());\r\n            // Additions ended\r\n        }\r\n        /*  if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n            nta.print();\r\n     if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n            JSUtil.flag(\"<-- final applyTA\");*/\r\n        return nta;\r\n    }\r\n\r\n    public JSTaskAtom cloneTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.cloneT());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTaskAtom standarizerTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    JSJshopNode findInList(Vector list) {\r\n        JSJshopNode node;\r\n        for (int i = 0; i < list.size(); i++) {\r\n            node = (JSJshopNode) list.elementAt(i);\r\n            if (this.equals(node.atom())) {\r\n                return node;\r\n            }\r\n        }\r\n        return new JSJshopNode(this, new Vector());\r\n    }\r\n\r\n    public boolean isPrimitive() {\r\n        return isPrimitive;\r\n    }\r\n\r\n    public boolean isCompound() {\r\n        return isCompound;\r\n    }\r\n\r\n    public void makePrimitive() {\r\n        isPrimitive = true;\r\n        isCompound = false;\r\n    }\r\n\r\n    public void makeCompound() {\r\n        isPrimitive = false;\r\n        isCompound = true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTaskAtomTest1.java",
		"test_prompt": "// JSTaskAtomTest1.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTaskAtom}.\n* It contains ten unit test cases for the {@link JSTaskAtom#reduce(JSPlanningDomain, JSState, JSReduction)} method.\n*/\nclass JSTaskAtomTest1 {"
	},
	{
		"original_code": "// JSTaskAtom.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSTaskAtom extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    boolean isPrimitive;\r\n\r\n    boolean isCompound;\r\n\r\n    public JSTaskAtom(String text) {\r\n        super(text);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    public JSTaskAtom(StreamTokenizer token) {\r\n        super(token);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    JSTaskAtom() {\r\n        super();\r\n    }\r\n\r\n    public JSPairPlanTState seekSimplePlan(JSPlanningDomain dom, JSTState ts) {\r\n        JSPairPlanTState pair;\r\n        JSSubstitution alpha;\r\n        JSOperator op;\r\n        JSListOperators list = dom.operators();\r\n        JSTaskAtom top;\r\n        JSState ns;\r\n        JSTState tState;\r\n        JSPlan pl = new JSPlan();\r\n        boolean thisIsGround = this.isGround();\r\n        for (short i = 0; i < list.size(); i++) {\r\n            op = (JSOperator) list.elementAt(i);\r\n            top = op.head();\r\n            if (!thisIsGround) {\r\n                top = top.standarizerTA();\r\n            }\r\n            alpha = top.matches(this);\r\n            if (!alpha.fail()) {\r\n                op = op.standarizerOp();\r\n                alpha = alpha.standarizerSubs();\r\n                JSJshopVars.VarCounter++;\r\n                JSListSubstitution satisfiers = dom.axioms().TheoremProver(op.precondition(), ts.state(), alpha, true);\r\n                if (!satisfiers.isEmpty()) {\r\n                    tState = ts.state().applyOp(op, alpha, ts.addList(), ts.deleteList());\r\n                    ns = tState.state();\r\n                    top = op.head();\r\n                    pl.addWithCost(top.applySubstitutionTA(alpha), op.cost());\r\n                    return new JSPairPlanTState(pl, tState);\r\n                }\r\n            }\r\n        }\r\n        pl.assignFailure();\r\n        return new JSPairPlanTState(pl, new JSTState());\r\n    }\r\n\r\n    public JSReduction reduce(JSPlanningDomain dom, JSState s, JSReduction red) {\r\n        //JSUtil.flag(\"reduce(PlanningDomain dom,State s,Reduction red)\");\r\n        JSListMethods mets = dom.methods();\r\n        return mets.findReduction(this, s, red, dom.axioms());\r\n    }\r\n\r\n    public JSTaskAtom applySubstitutionTA(JSSubstitution alpha) {\r\n        JSTaskAtom nta = new JSTaskAtom();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n    JSUtil.print(\"applyTA subst:\");\r\n    alpha.print();\r\n    JSUtil.print(\"to:\");\r\n    this.print();\r\n   }*/\r\n        /* if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"stop\");*/\r\n        if (this.isPrimitive()) {\r\n            nta.makePrimitive();\r\n        } else {\r\n            nta.makeCompound();\r\n        }\r\n        nta.addElement(this.elementAt(0));\r\n        JSTerm ti, te;\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n        nta.print();*/\r\n        /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"<--\");*/\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                 nta.print();*/\r\n            /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n                 JSUtil.flag(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            // nta.addElement(ti.applySubstitutionT(alpha));\r\n            // Added 11/29/2000\r\n            te = ti.applySubstitutionT(alpha);\r\n            nta.addElement(te.call());\r\n            // Additions ended\r\n        }\r\n        /*  if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n            nta.print();\r\n     if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n            JSUtil.flag(\"<-- final applyTA\");*/\r\n        return nta;\r\n    }\r\n\r\n    public JSTaskAtom cloneTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.cloneT());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTaskAtom standarizerTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    JSJshopNode findInList(Vector list) {\r\n        JSJshopNode node;\r\n        for (int i = 0; i < list.size(); i++) {\r\n            node = (JSJshopNode) list.elementAt(i);\r\n            if (this.equals(node.atom())) {\r\n                return node;\r\n            }\r\n        }\r\n        return new JSJshopNode(this, new Vector());\r\n    }\r\n\r\n    public boolean isPrimitive() {\r\n        return isPrimitive;\r\n    }\r\n\r\n    public boolean isCompound() {\r\n        return isCompound;\r\n    }\r\n\r\n    public void makePrimitive() {\r\n        isPrimitive = true;\r\n        isCompound = false;\r\n    }\r\n\r\n    public void makeCompound() {\r\n        isPrimitive = false;\r\n        isCompound = true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTaskAtomTest2.java",
		"test_prompt": "// JSTaskAtomTest2.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTaskAtom}.\n* It contains ten unit test cases for the {@link JSTaskAtom#applySubstitutionTA(JSSubstitution)} method.\n*/\nclass JSTaskAtomTest2 {"
	},
	{
		"original_code": "// JSTaskAtom.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSTaskAtom extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    boolean isPrimitive;\r\n\r\n    boolean isCompound;\r\n\r\n    public JSTaskAtom(String text) {\r\n        super(text);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    public JSTaskAtom(StreamTokenizer token) {\r\n        super(token);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    JSTaskAtom() {\r\n        super();\r\n    }\r\n\r\n    public JSPairPlanTState seekSimplePlan(JSPlanningDomain dom, JSTState ts) {\r\n        JSPairPlanTState pair;\r\n        JSSubstitution alpha;\r\n        JSOperator op;\r\n        JSListOperators list = dom.operators();\r\n        JSTaskAtom top;\r\n        JSState ns;\r\n        JSTState tState;\r\n        JSPlan pl = new JSPlan();\r\n        boolean thisIsGround = this.isGround();\r\n        for (short i = 0; i < list.size(); i++) {\r\n            op = (JSOperator) list.elementAt(i);\r\n            top = op.head();\r\n            if (!thisIsGround) {\r\n                top = top.standarizerTA();\r\n            }\r\n            alpha = top.matches(this);\r\n            if (!alpha.fail()) {\r\n                op = op.standarizerOp();\r\n                alpha = alpha.standarizerSubs();\r\n                JSJshopVars.VarCounter++;\r\n                JSListSubstitution satisfiers = dom.axioms().TheoremProver(op.precondition(), ts.state(), alpha, true);\r\n                if (!satisfiers.isEmpty()) {\r\n                    tState = ts.state().applyOp(op, alpha, ts.addList(), ts.deleteList());\r\n                    ns = tState.state();\r\n                    top = op.head();\r\n                    pl.addWithCost(top.applySubstitutionTA(alpha), op.cost());\r\n                    return new JSPairPlanTState(pl, tState);\r\n                }\r\n            }\r\n        }\r\n        pl.assignFailure();\r\n        return new JSPairPlanTState(pl, new JSTState());\r\n    }\r\n\r\n    public JSReduction reduce(JSPlanningDomain dom, JSState s, JSReduction red) {\r\n        //JSUtil.flag(\"reduce(PlanningDomain dom,State s,Reduction red)\");\r\n        JSListMethods mets = dom.methods();\r\n        return mets.findReduction(this, s, red, dom.axioms());\r\n    }\r\n\r\n    public JSTaskAtom applySubstitutionTA(JSSubstitution alpha) {\r\n        JSTaskAtom nta = new JSTaskAtom();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n    JSUtil.print(\"applyTA subst:\");\r\n    alpha.print();\r\n    JSUtil.print(\"to:\");\r\n    this.print();\r\n   }*/\r\n        /* if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"stop\");*/\r\n        if (this.isPrimitive()) {\r\n            nta.makePrimitive();\r\n        } else {\r\n            nta.makeCompound();\r\n        }\r\n        nta.addElement(this.elementAt(0));\r\n        JSTerm ti, te;\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n        nta.print();*/\r\n        /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"<--\");*/\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                 nta.print();*/\r\n            /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n                 JSUtil.flag(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            // nta.addElement(ti.applySubstitutionT(alpha));\r\n            // Added 11/29/2000\r\n            te = ti.applySubstitutionT(alpha);\r\n            nta.addElement(te.call());\r\n            // Additions ended\r\n        }\r\n        /*  if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n            nta.print();\r\n     if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n            JSUtil.flag(\"<-- final applyTA\");*/\r\n        return nta;\r\n    }\r\n\r\n    public JSTaskAtom cloneTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.cloneT());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTaskAtom standarizerTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    JSJshopNode findInList(Vector list) {\r\n        JSJshopNode node;\r\n        for (int i = 0; i < list.size(); i++) {\r\n            node = (JSJshopNode) list.elementAt(i);\r\n            if (this.equals(node.atom())) {\r\n                return node;\r\n            }\r\n        }\r\n        return new JSJshopNode(this, new Vector());\r\n    }\r\n\r\n    public boolean isPrimitive() {\r\n        return isPrimitive;\r\n    }\r\n\r\n    public boolean isCompound() {\r\n        return isCompound;\r\n    }\r\n\r\n    public void makePrimitive() {\r\n        isPrimitive = true;\r\n        isCompound = false;\r\n    }\r\n\r\n    public void makeCompound() {\r\n        isPrimitive = false;\r\n        isCompound = true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTaskAtomTest3.java",
		"test_prompt": "// JSTaskAtomTest3.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTaskAtom}.\n* It contains ten unit test cases for the {@link JSTaskAtom#cloneTA()} method.\n*/\nclass JSTaskAtomTest3 {"
	},
	{
		"original_code": "// JSTaskAtom.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSTaskAtom extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    boolean isPrimitive;\r\n\r\n    boolean isCompound;\r\n\r\n    public JSTaskAtom(String text) {\r\n        super(text);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    public JSTaskAtom(StreamTokenizer token) {\r\n        super(token);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    JSTaskAtom() {\r\n        super();\r\n    }\r\n\r\n    public JSPairPlanTState seekSimplePlan(JSPlanningDomain dom, JSTState ts) {\r\n        JSPairPlanTState pair;\r\n        JSSubstitution alpha;\r\n        JSOperator op;\r\n        JSListOperators list = dom.operators();\r\n        JSTaskAtom top;\r\n        JSState ns;\r\n        JSTState tState;\r\n        JSPlan pl = new JSPlan();\r\n        boolean thisIsGround = this.isGround();\r\n        for (short i = 0; i < list.size(); i++) {\r\n            op = (JSOperator) list.elementAt(i);\r\n            top = op.head();\r\n            if (!thisIsGround) {\r\n                top = top.standarizerTA();\r\n            }\r\n            alpha = top.matches(this);\r\n            if (!alpha.fail()) {\r\n                op = op.standarizerOp();\r\n                alpha = alpha.standarizerSubs();\r\n                JSJshopVars.VarCounter++;\r\n                JSListSubstitution satisfiers = dom.axioms().TheoremProver(op.precondition(), ts.state(), alpha, true);\r\n                if (!satisfiers.isEmpty()) {\r\n                    tState = ts.state().applyOp(op, alpha, ts.addList(), ts.deleteList());\r\n                    ns = tState.state();\r\n                    top = op.head();\r\n                    pl.addWithCost(top.applySubstitutionTA(alpha), op.cost());\r\n                    return new JSPairPlanTState(pl, tState);\r\n                }\r\n            }\r\n        }\r\n        pl.assignFailure();\r\n        return new JSPairPlanTState(pl, new JSTState());\r\n    }\r\n\r\n    public JSReduction reduce(JSPlanningDomain dom, JSState s, JSReduction red) {\r\n        //JSUtil.flag(\"reduce(PlanningDomain dom,State s,Reduction red)\");\r\n        JSListMethods mets = dom.methods();\r\n        return mets.findReduction(this, s, red, dom.axioms());\r\n    }\r\n\r\n    public JSTaskAtom applySubstitutionTA(JSSubstitution alpha) {\r\n        JSTaskAtom nta = new JSTaskAtom();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n    JSUtil.print(\"applyTA subst:\");\r\n    alpha.print();\r\n    JSUtil.print(\"to:\");\r\n    this.print();\r\n   }*/\r\n        /* if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"stop\");*/\r\n        if (this.isPrimitive()) {\r\n            nta.makePrimitive();\r\n        } else {\r\n            nta.makeCompound();\r\n        }\r\n        nta.addElement(this.elementAt(0));\r\n        JSTerm ti, te;\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n        nta.print();*/\r\n        /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"<--\");*/\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                 nta.print();*/\r\n            /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n                 JSUtil.flag(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            // nta.addElement(ti.applySubstitutionT(alpha));\r\n            // Added 11/29/2000\r\n            te = ti.applySubstitutionT(alpha);\r\n            nta.addElement(te.call());\r\n            // Additions ended\r\n        }\r\n        /*  if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n            nta.print();\r\n     if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n            JSUtil.flag(\"<-- final applyTA\");*/\r\n        return nta;\r\n    }\r\n\r\n    public JSTaskAtom cloneTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.cloneT());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTaskAtom standarizerTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    JSJshopNode findInList(Vector list) {\r\n        JSJshopNode node;\r\n        for (int i = 0; i < list.size(); i++) {\r\n            node = (JSJshopNode) list.elementAt(i);\r\n            if (this.equals(node.atom())) {\r\n                return node;\r\n            }\r\n        }\r\n        return new JSJshopNode(this, new Vector());\r\n    }\r\n\r\n    public boolean isPrimitive() {\r\n        return isPrimitive;\r\n    }\r\n\r\n    public boolean isCompound() {\r\n        return isCompound;\r\n    }\r\n\r\n    public void makePrimitive() {\r\n        isPrimitive = true;\r\n        isCompound = false;\r\n    }\r\n\r\n    public void makeCompound() {\r\n        isPrimitive = false;\r\n        isCompound = true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTaskAtomTest4.java",
		"test_prompt": "// JSTaskAtomTest4.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTaskAtom}.\n* It contains ten unit test cases for the {@link JSTaskAtom#isGround()} method.\n*/\nclass JSTaskAtomTest4 {"
	},
	{
		"original_code": "// JSTaskAtom.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSTaskAtom extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    boolean isPrimitive;\r\n\r\n    boolean isCompound;\r\n\r\n    public JSTaskAtom(String text) {\r\n        super(text);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    public JSTaskAtom(StreamTokenizer token) {\r\n        super(token);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    JSTaskAtom() {\r\n        super();\r\n    }\r\n\r\n    public JSPairPlanTState seekSimplePlan(JSPlanningDomain dom, JSTState ts) {\r\n        JSPairPlanTState pair;\r\n        JSSubstitution alpha;\r\n        JSOperator op;\r\n        JSListOperators list = dom.operators();\r\n        JSTaskAtom top;\r\n        JSState ns;\r\n        JSTState tState;\r\n        JSPlan pl = new JSPlan();\r\n        boolean thisIsGround = this.isGround();\r\n        for (short i = 0; i < list.size(); i++) {\r\n            op = (JSOperator) list.elementAt(i);\r\n            top = op.head();\r\n            if (!thisIsGround) {\r\n                top = top.standarizerTA();\r\n            }\r\n            alpha = top.matches(this);\r\n            if (!alpha.fail()) {\r\n                op = op.standarizerOp();\r\n                alpha = alpha.standarizerSubs();\r\n                JSJshopVars.VarCounter++;\r\n                JSListSubstitution satisfiers = dom.axioms().TheoremProver(op.precondition(), ts.state(), alpha, true);\r\n                if (!satisfiers.isEmpty()) {\r\n                    tState = ts.state().applyOp(op, alpha, ts.addList(), ts.deleteList());\r\n                    ns = tState.state();\r\n                    top = op.head();\r\n                    pl.addWithCost(top.applySubstitutionTA(alpha), op.cost());\r\n                    return new JSPairPlanTState(pl, tState);\r\n                }\r\n            }\r\n        }\r\n        pl.assignFailure();\r\n        return new JSPairPlanTState(pl, new JSTState());\r\n    }\r\n\r\n    public JSReduction reduce(JSPlanningDomain dom, JSState s, JSReduction red) {\r\n        //JSUtil.flag(\"reduce(PlanningDomain dom,State s,Reduction red)\");\r\n        JSListMethods mets = dom.methods();\r\n        return mets.findReduction(this, s, red, dom.axioms());\r\n    }\r\n\r\n    public JSTaskAtom applySubstitutionTA(JSSubstitution alpha) {\r\n        JSTaskAtom nta = new JSTaskAtom();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n    JSUtil.print(\"applyTA subst:\");\r\n    alpha.print();\r\n    JSUtil.print(\"to:\");\r\n    this.print();\r\n   }*/\r\n        /* if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"stop\");*/\r\n        if (this.isPrimitive()) {\r\n            nta.makePrimitive();\r\n        } else {\r\n            nta.makeCompound();\r\n        }\r\n        nta.addElement(this.elementAt(0));\r\n        JSTerm ti, te;\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n        nta.print();*/\r\n        /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"<--\");*/\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                 nta.print();*/\r\n            /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n                 JSUtil.flag(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            // nta.addElement(ti.applySubstitutionT(alpha));\r\n            // Added 11/29/2000\r\n            te = ti.applySubstitutionT(alpha);\r\n            nta.addElement(te.call());\r\n            // Additions ended\r\n        }\r\n        /*  if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n            nta.print();\r\n     if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n            JSUtil.flag(\"<-- final applyTA\");*/\r\n        return nta;\r\n    }\r\n\r\n    public JSTaskAtom cloneTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.cloneT());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTaskAtom standarizerTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    JSJshopNode findInList(Vector list) {\r\n        JSJshopNode node;\r\n        for (int i = 0; i < list.size(); i++) {\r\n            node = (JSJshopNode) list.elementAt(i);\r\n            if (this.equals(node.atom())) {\r\n                return node;\r\n            }\r\n        }\r\n        return new JSJshopNode(this, new Vector());\r\n    }\r\n\r\n    public boolean isPrimitive() {\r\n        return isPrimitive;\r\n    }\r\n\r\n    public boolean isCompound() {\r\n        return isCompound;\r\n    }\r\n\r\n    public void makePrimitive() {\r\n        isPrimitive = true;\r\n        isCompound = false;\r\n    }\r\n\r\n    public void makeCompound() {\r\n        isPrimitive = false;\r\n        isCompound = true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTaskAtomTest5.java",
		"test_prompt": "// JSTaskAtomTest5.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTaskAtom}.\n* It contains ten unit test cases for the {@link JSTaskAtom#standarizerTA()} method.\n*/\nclass JSTaskAtomTest5 {"
	},
	{
		"original_code": "// JSTaskAtom.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSTaskAtom extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    boolean isPrimitive;\r\n\r\n    boolean isCompound;\r\n\r\n    public JSTaskAtom(String text) {\r\n        super(text);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    public JSTaskAtom(StreamTokenizer token) {\r\n        super(token);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    JSTaskAtom() {\r\n        super();\r\n    }\r\n\r\n    public JSPairPlanTState seekSimplePlan(JSPlanningDomain dom, JSTState ts) {\r\n        JSPairPlanTState pair;\r\n        JSSubstitution alpha;\r\n        JSOperator op;\r\n        JSListOperators list = dom.operators();\r\n        JSTaskAtom top;\r\n        JSState ns;\r\n        JSTState tState;\r\n        JSPlan pl = new JSPlan();\r\n        boolean thisIsGround = this.isGround();\r\n        for (short i = 0; i < list.size(); i++) {\r\n            op = (JSOperator) list.elementAt(i);\r\n            top = op.head();\r\n            if (!thisIsGround) {\r\n                top = top.standarizerTA();\r\n            }\r\n            alpha = top.matches(this);\r\n            if (!alpha.fail()) {\r\n                op = op.standarizerOp();\r\n                alpha = alpha.standarizerSubs();\r\n                JSJshopVars.VarCounter++;\r\n                JSListSubstitution satisfiers = dom.axioms().TheoremProver(op.precondition(), ts.state(), alpha, true);\r\n                if (!satisfiers.isEmpty()) {\r\n                    tState = ts.state().applyOp(op, alpha, ts.addList(), ts.deleteList());\r\n                    ns = tState.state();\r\n                    top = op.head();\r\n                    pl.addWithCost(top.applySubstitutionTA(alpha), op.cost());\r\n                    return new JSPairPlanTState(pl, tState);\r\n                }\r\n            }\r\n        }\r\n        pl.assignFailure();\r\n        return new JSPairPlanTState(pl, new JSTState());\r\n    }\r\n\r\n    public JSReduction reduce(JSPlanningDomain dom, JSState s, JSReduction red) {\r\n        //JSUtil.flag(\"reduce(PlanningDomain dom,State s,Reduction red)\");\r\n        JSListMethods mets = dom.methods();\r\n        return mets.findReduction(this, s, red, dom.axioms());\r\n    }\r\n\r\n    public JSTaskAtom applySubstitutionTA(JSSubstitution alpha) {\r\n        JSTaskAtom nta = new JSTaskAtom();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n    JSUtil.print(\"applyTA subst:\");\r\n    alpha.print();\r\n    JSUtil.print(\"to:\");\r\n    this.print();\r\n   }*/\r\n        /* if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"stop\");*/\r\n        if (this.isPrimitive()) {\r\n            nta.makePrimitive();\r\n        } else {\r\n            nta.makeCompound();\r\n        }\r\n        nta.addElement(this.elementAt(0));\r\n        JSTerm ti, te;\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n        nta.print();*/\r\n        /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"<--\");*/\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                 nta.print();*/\r\n            /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n                 JSUtil.flag(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            // nta.addElement(ti.applySubstitutionT(alpha));\r\n            // Added 11/29/2000\r\n            te = ti.applySubstitutionT(alpha);\r\n            nta.addElement(te.call());\r\n            // Additions ended\r\n        }\r\n        /*  if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n            nta.print();\r\n     if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n            JSUtil.flag(\"<-- final applyTA\");*/\r\n        return nta;\r\n    }\r\n\r\n    public JSTaskAtom cloneTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.cloneT());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTaskAtom standarizerTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    JSJshopNode findInList(Vector list) {\r\n        JSJshopNode node;\r\n        for (int i = 0; i < list.size(); i++) {\r\n            node = (JSJshopNode) list.elementAt(i);\r\n            if (this.equals(node.atom())) {\r\n                return node;\r\n            }\r\n        }\r\n        return new JSJshopNode(this, new Vector());\r\n    }\r\n\r\n    public boolean isPrimitive() {\r\n        return isPrimitive;\r\n    }\r\n\r\n    public boolean isCompound() {\r\n        return isCompound;\r\n    }\r\n\r\n    public void makePrimitive() {\r\n        isPrimitive = true;\r\n        isCompound = false;\r\n    }\r\n\r\n    public void makeCompound() {\r\n        isPrimitive = false;\r\n        isCompound = true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTaskAtomTest6.java",
		"test_prompt": "// JSTaskAtomTest6.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTaskAtom}.\n* It contains ten unit test cases for the {@link JSTaskAtom#isPrimitive()} method.\n*/\nclass JSTaskAtomTest6 {"
	},
	{
		"original_code": "// JSTaskAtom.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSTaskAtom extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    boolean isPrimitive;\r\n\r\n    boolean isCompound;\r\n\r\n    public JSTaskAtom(String text) {\r\n        super(text);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    public JSTaskAtom(StreamTokenizer token) {\r\n        super(token);\r\n        String taskName = (String) this.elementAt(0);\r\n        if (taskName.charAt(0) == '!') {\r\n            isPrimitive = true;\r\n            isCompound = false;\r\n        } else {\r\n            isPrimitive = false;\r\n            isCompound = true;\r\n        }\r\n    }\r\n\r\n    JSTaskAtom() {\r\n        super();\r\n    }\r\n\r\n    public JSPairPlanTState seekSimplePlan(JSPlanningDomain dom, JSTState ts) {\r\n        JSPairPlanTState pair;\r\n        JSSubstitution alpha;\r\n        JSOperator op;\r\n        JSListOperators list = dom.operators();\r\n        JSTaskAtom top;\r\n        JSState ns;\r\n        JSTState tState;\r\n        JSPlan pl = new JSPlan();\r\n        boolean thisIsGround = this.isGround();\r\n        for (short i = 0; i < list.size(); i++) {\r\n            op = (JSOperator) list.elementAt(i);\r\n            top = op.head();\r\n            if (!thisIsGround) {\r\n                top = top.standarizerTA();\r\n            }\r\n            alpha = top.matches(this);\r\n            if (!alpha.fail()) {\r\n                op = op.standarizerOp();\r\n                alpha = alpha.standarizerSubs();\r\n                JSJshopVars.VarCounter++;\r\n                JSListSubstitution satisfiers = dom.axioms().TheoremProver(op.precondition(), ts.state(), alpha, true);\r\n                if (!satisfiers.isEmpty()) {\r\n                    tState = ts.state().applyOp(op, alpha, ts.addList(), ts.deleteList());\r\n                    ns = tState.state();\r\n                    top = op.head();\r\n                    pl.addWithCost(top.applySubstitutionTA(alpha), op.cost());\r\n                    return new JSPairPlanTState(pl, tState);\r\n                }\r\n            }\r\n        }\r\n        pl.assignFailure();\r\n        return new JSPairPlanTState(pl, new JSTState());\r\n    }\r\n\r\n    public JSReduction reduce(JSPlanningDomain dom, JSState s, JSReduction red) {\r\n        //JSUtil.flag(\"reduce(PlanningDomain dom,State s,Reduction red)\");\r\n        JSListMethods mets = dom.methods();\r\n        return mets.findReduction(this, s, red, dom.axioms());\r\n    }\r\n\r\n    public JSTaskAtom applySubstitutionTA(JSSubstitution alpha) {\r\n        JSTaskAtom nta = new JSTaskAtom();\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning ){\r\n    JSUtil.print(\"applyTA subst:\");\r\n    alpha.print();\r\n    JSUtil.print(\"to:\");\r\n    this.print();\r\n   }*/\r\n        /* if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"stop\");*/\r\n        if (this.isPrimitive()) {\r\n            nta.makePrimitive();\r\n        } else {\r\n            nta.makeCompound();\r\n        }\r\n        nta.addElement(this.elementAt(0));\r\n        JSTerm ti, te;\r\n        /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n        nta.print();*/\r\n        /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n        JSUtil.flag(\"<--\");*/\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                 nta.print();*/\r\n            /*  if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n                 JSUtil.flag(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            // nta.addElement(ti.applySubstitutionT(alpha));\r\n            // Added 11/29/2000\r\n            te = ti.applySubstitutionT(alpha);\r\n            nta.addElement(te.call());\r\n            // Additions ended\r\n        }\r\n        /*  if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n            nta.print();\r\n     if (JSJshopVars.flagLevel > 9 && JSJshopVars.flagPlanning )\r\n            JSUtil.flag(\"<-- final applyTA\");*/\r\n        return nta;\r\n    }\r\n\r\n    public JSTaskAtom cloneTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.cloneT());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTaskAtom standarizerTA() {\r\n        JSTaskAtom nTA = new JSTaskAtom();\r\n        if (this.isPrimitive()) {\r\n            nTA.makePrimitive();\r\n        } else {\r\n            nTA.makeCompound();\r\n        }\r\n        nTA.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nTA.addElement(ti.standardizerTerm());\r\n        }\r\n        return nTA;\r\n    }\r\n\r\n    JSJshopNode findInList(Vector list) {\r\n        JSJshopNode node;\r\n        for (int i = 0; i < list.size(); i++) {\r\n            node = (JSJshopNode) list.elementAt(i);\r\n            if (this.equals(node.atom())) {\r\n                return node;\r\n            }\r\n        }\r\n        return new JSJshopNode(this, new Vector());\r\n    }\r\n\r\n    public boolean isPrimitive() {\r\n        return isPrimitive;\r\n    }\r\n\r\n    public boolean isCompound() {\r\n        return isCompound;\r\n    }\r\n\r\n    public void makePrimitive() {\r\n        isPrimitive = true;\r\n        isCompound = false;\r\n    }\r\n\r\n    public void makeCompound() {\r\n        isPrimitive = false;\r\n        isCompound = true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTaskAtomTest7.java",
		"test_prompt": "// JSTaskAtomTest7.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTaskAtom}.\n* It contains ten unit test cases for the {@link JSTaskAtom#isCompound()} method.\n*/\nclass JSTaskAtomTest7 {"
	},
	{
		"original_code": "// JSPlanningDomain.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSPlanningDomain {\r\n\r\n    /*==== instance variables ====*/\r\n    private String name;\r\n\r\n    private JSListAxioms axioms = new JSListAxioms();\r\n\r\n    private JSListOperators operators = new JSListOperators();\r\n\r\n    private JSListMethods methods = new JSListMethods();\r\n\r\n    /*==== constructor ====*/\r\n    public JSPlanningDomain() {\r\n    }\r\n\r\n    public JSPlanningDomain(StreamTokenizer tokenizer) {\r\n        String w = JSUtil.readWord(tokenizer, \"REading Domain Definition\");\r\n        if (w.equals(\"%%%\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        name = w;\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"Expecting '( ' for planning domain\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        parserOpsMethsAxs(tokenizer);\r\n        if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \" Expecting ')' for planning domain\"))\r\n            //return;\r\n            throw new JSParserError();\r\n    }\r\n\r\n    public void parserOpsMethsAxs(StreamTokenizer tokenizer) {\r\n        if (!JSUtil.readToken(tokenizer, \"Expacting domain definition, operators,methods,axioms\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar && tokenizer.ttype != JSJshopVars.rightPar) {\r\n            JSUtil.println(\"parserOpsMethsAxs: expected ( or )\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        String w;\r\n        JSOperator op;\r\n        JSMethod met;\r\n        JSAxiom ax;\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            if (!JSUtil.expectTokenType(JSJshopVars.colon, tokenizer, \"Expecting ':' for axiom,method or operator definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (!JSUtil.readToken(tokenizer, \"Method/axiom/operator definition expected\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.minus) {\r\n                ax = new JSAxiom(tokenizer);\r\n                ax.setName(\"Axiom_\" + (axioms.size() + 1) + \"_\");\r\n                axioms.addElement(ax);\r\n            } else {\r\n                if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                    JSUtil.println(\"Line : \" + tokenizer.lineno() + \" method/operator expected\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                } else {\r\n                    if (tokenizer.sval.equalsIgnoreCase(\"operator\")) {\r\n                        op = new JSOperator(tokenizer);\r\n                        operators.addElement(op);\r\n                    } else {\r\n                        if (tokenizer.sval.equalsIgnoreCase(\"method\")) {\r\n                            met = new JSMethod(tokenizer);\r\n                            met.setName(\"Method_\" + (methods.size() + 1) + \"_\");\r\n                            methods.addElement(met);\r\n                        } else {\r\n                            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting method or operator found text:\" + tokenizer.sval);\r\n                            //return;\r\n                            throw new JSParserError();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (//close op/meth/ax\r\n            !JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for Domain definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (!JSUtil.readToken(tokenizer, \"PlanningDomain\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public JSPairPlanTSListNodes solve(JSPlanningProblem prob, Vector listNodes) {\r\n        JSPairPlanTState pair = new JSPairPlanTState();\r\n        if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning) {\r\n            JSUtil.flag(\"====== SOLVING A NEW PROBLEM====\");\r\n            this.print();\r\n            JSUtil.flag(\"PROBLEM\");\r\n            prob.print();\r\n        }\r\n        JSTasks tasks = prob.tasks();\r\n        pair = tasks.seekPlan(new JSTState(prob.state(), new JSListLogicalAtoms(), new JSListLogicalAtoms()), this, new JSPlan(), listNodes);\r\n        return new JSPairPlanTSListNodes(pair, listNodes);\r\n    }\r\n\r\n    public JSListPairPlanTStateNodes solveAll(JSPlanningProblem prob, boolean All) {\r\n        JSListPairPlanTStateNodes allPlans;\r\n        JSTasks tasks = prob.tasks();\r\n        allPlans = tasks.seekPlanAll(new JSTState(prob.state(), new JSListLogicalAtoms(), new JSListLogicalAtoms()), this, All);\r\n        return allPlans;\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\"make-domain \");\r\n        JSUtil.println(name + \" \");\r\n        axioms.print();\r\n        operators.print();\r\n        methods.print();\r\n        JSUtil.println(\")\");\r\n    }\r\n\r\n    public JSListMethods methods() {\r\n        return methods;\r\n    }\r\n\r\n    public JSListAxioms axioms() {\r\n        return axioms;\r\n    }\r\n\r\n    public JSListOperators operators() {\r\n        return operators;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPlanningDomainTest0.java",
		"test_prompt": "// JSPlanningDomainTest0.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPlanningDomain}.\n* It contains ten unit test cases for the {@link JSPlanningDomain#solve(JSPlanningProblem, Vector)} method.\n*/\nclass JSPlanningDomainTest0 {"
	},
	{
		"original_code": "// JSPlanningDomain.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSPlanningDomain {\r\n\r\n    /*==== instance variables ====*/\r\n    private String name;\r\n\r\n    private JSListAxioms axioms = new JSListAxioms();\r\n\r\n    private JSListOperators operators = new JSListOperators();\r\n\r\n    private JSListMethods methods = new JSListMethods();\r\n\r\n    /*==== constructor ====*/\r\n    public JSPlanningDomain() {\r\n    }\r\n\r\n    public JSPlanningDomain(StreamTokenizer tokenizer) {\r\n        String w = JSUtil.readWord(tokenizer, \"REading Domain Definition\");\r\n        if (w.equals(\"%%%\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        name = w;\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"Expecting '( ' for planning domain\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        parserOpsMethsAxs(tokenizer);\r\n        if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \" Expecting ')' for planning domain\"))\r\n            //return;\r\n            throw new JSParserError();\r\n    }\r\n\r\n    public void parserOpsMethsAxs(StreamTokenizer tokenizer) {\r\n        if (!JSUtil.readToken(tokenizer, \"Expacting domain definition, operators,methods,axioms\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar && tokenizer.ttype != JSJshopVars.rightPar) {\r\n            JSUtil.println(\"parserOpsMethsAxs: expected ( or )\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        String w;\r\n        JSOperator op;\r\n        JSMethod met;\r\n        JSAxiom ax;\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            if (!JSUtil.expectTokenType(JSJshopVars.colon, tokenizer, \"Expecting ':' for axiom,method or operator definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (!JSUtil.readToken(tokenizer, \"Method/axiom/operator definition expected\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.minus) {\r\n                ax = new JSAxiom(tokenizer);\r\n                ax.setName(\"Axiom_\" + (axioms.size() + 1) + \"_\");\r\n                axioms.addElement(ax);\r\n            } else {\r\n                if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                    JSUtil.println(\"Line : \" + tokenizer.lineno() + \" method/operator expected\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                } else {\r\n                    if (tokenizer.sval.equalsIgnoreCase(\"operator\")) {\r\n                        op = new JSOperator(tokenizer);\r\n                        operators.addElement(op);\r\n                    } else {\r\n                        if (tokenizer.sval.equalsIgnoreCase(\"method\")) {\r\n                            met = new JSMethod(tokenizer);\r\n                            met.setName(\"Method_\" + (methods.size() + 1) + \"_\");\r\n                            methods.addElement(met);\r\n                        } else {\r\n                            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting method or operator found text:\" + tokenizer.sval);\r\n                            //return;\r\n                            throw new JSParserError();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (//close op/meth/ax\r\n            !JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for Domain definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (!JSUtil.readToken(tokenizer, \"PlanningDomain\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public JSPairPlanTSListNodes solve(JSPlanningProblem prob, Vector listNodes) {\r\n        JSPairPlanTState pair = new JSPairPlanTState();\r\n        if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning) {\r\n            JSUtil.flag(\"====== SOLVING A NEW PROBLEM====\");\r\n            this.print();\r\n            JSUtil.flag(\"PROBLEM\");\r\n            prob.print();\r\n        }\r\n        JSTasks tasks = prob.tasks();\r\n        pair = tasks.seekPlan(new JSTState(prob.state(), new JSListLogicalAtoms(), new JSListLogicalAtoms()), this, new JSPlan(), listNodes);\r\n        return new JSPairPlanTSListNodes(pair, listNodes);\r\n    }\r\n\r\n    public JSListPairPlanTStateNodes solveAll(JSPlanningProblem prob, boolean All) {\r\n        JSListPairPlanTStateNodes allPlans;\r\n        JSTasks tasks = prob.tasks();\r\n        allPlans = tasks.seekPlanAll(new JSTState(prob.state(), new JSListLogicalAtoms(), new JSListLogicalAtoms()), this, All);\r\n        return allPlans;\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\"make-domain \");\r\n        JSUtil.println(name + \" \");\r\n        axioms.print();\r\n        operators.print();\r\n        methods.print();\r\n        JSUtil.println(\")\");\r\n    }\r\n\r\n    public JSListMethods methods() {\r\n        return methods;\r\n    }\r\n\r\n    public JSListAxioms axioms() {\r\n        return axioms;\r\n    }\r\n\r\n    public JSListOperators operators() {\r\n        return operators;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPlanningDomainTest1.java",
		"test_prompt": "// JSPlanningDomainTest1.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPlanningDomain}.\n* It contains ten unit test cases for the {@link JSPlanningDomain#solveAll(JSPlanningProblem, boolean)} method.\n*/\nclass JSPlanningDomainTest1 {"
	},
	{
		"original_code": "// JSPlanningDomain.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSPlanningDomain {\r\n\r\n    /*==== instance variables ====*/\r\n    private String name;\r\n\r\n    private JSListAxioms axioms = new JSListAxioms();\r\n\r\n    private JSListOperators operators = new JSListOperators();\r\n\r\n    private JSListMethods methods = new JSListMethods();\r\n\r\n    /*==== constructor ====*/\r\n    public JSPlanningDomain() {\r\n    }\r\n\r\n    public JSPlanningDomain(StreamTokenizer tokenizer) {\r\n        String w = JSUtil.readWord(tokenizer, \"REading Domain Definition\");\r\n        if (w.equals(\"%%%\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        name = w;\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"Expecting '( ' for planning domain\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        parserOpsMethsAxs(tokenizer);\r\n        if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \" Expecting ')' for planning domain\"))\r\n            //return;\r\n            throw new JSParserError();\r\n    }\r\n\r\n    public void parserOpsMethsAxs(StreamTokenizer tokenizer) {\r\n        if (!JSUtil.readToken(tokenizer, \"Expacting domain definition, operators,methods,axioms\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar && tokenizer.ttype != JSJshopVars.rightPar) {\r\n            JSUtil.println(\"parserOpsMethsAxs: expected ( or )\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        String w;\r\n        JSOperator op;\r\n        JSMethod met;\r\n        JSAxiom ax;\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            if (!JSUtil.expectTokenType(JSJshopVars.colon, tokenizer, \"Expecting ':' for axiom,method or operator definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (!JSUtil.readToken(tokenizer, \"Method/axiom/operator definition expected\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.minus) {\r\n                ax = new JSAxiom(tokenizer);\r\n                ax.setName(\"Axiom_\" + (axioms.size() + 1) + \"_\");\r\n                axioms.addElement(ax);\r\n            } else {\r\n                if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                    JSUtil.println(\"Line : \" + tokenizer.lineno() + \" method/operator expected\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                } else {\r\n                    if (tokenizer.sval.equalsIgnoreCase(\"operator\")) {\r\n                        op = new JSOperator(tokenizer);\r\n                        operators.addElement(op);\r\n                    } else {\r\n                        if (tokenizer.sval.equalsIgnoreCase(\"method\")) {\r\n                            met = new JSMethod(tokenizer);\r\n                            met.setName(\"Method_\" + (methods.size() + 1) + \"_\");\r\n                            methods.addElement(met);\r\n                        } else {\r\n                            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting method or operator found text:\" + tokenizer.sval);\r\n                            //return;\r\n                            throw new JSParserError();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (//close op/meth/ax\r\n            !JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for Domain definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (!JSUtil.readToken(tokenizer, \"PlanningDomain\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public JSPairPlanTSListNodes solve(JSPlanningProblem prob, Vector listNodes) {\r\n        JSPairPlanTState pair = new JSPairPlanTState();\r\n        if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning) {\r\n            JSUtil.flag(\"====== SOLVING A NEW PROBLEM====\");\r\n            this.print();\r\n            JSUtil.flag(\"PROBLEM\");\r\n            prob.print();\r\n        }\r\n        JSTasks tasks = prob.tasks();\r\n        pair = tasks.seekPlan(new JSTState(prob.state(), new JSListLogicalAtoms(), new JSListLogicalAtoms()), this, new JSPlan(), listNodes);\r\n        return new JSPairPlanTSListNodes(pair, listNodes);\r\n    }\r\n\r\n    public JSListPairPlanTStateNodes solveAll(JSPlanningProblem prob, boolean All) {\r\n        JSListPairPlanTStateNodes allPlans;\r\n        JSTasks tasks = prob.tasks();\r\n        allPlans = tasks.seekPlanAll(new JSTState(prob.state(), new JSListLogicalAtoms(), new JSListLogicalAtoms()), this, All);\r\n        return allPlans;\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\"make-domain \");\r\n        JSUtil.println(name + \" \");\r\n        axioms.print();\r\n        operators.print();\r\n        methods.print();\r\n        JSUtil.println(\")\");\r\n    }\r\n\r\n    public JSListMethods methods() {\r\n        return methods;\r\n    }\r\n\r\n    public JSListAxioms axioms() {\r\n        return axioms;\r\n    }\r\n\r\n    public JSListOperators operators() {\r\n        return operators;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPlanningDomainTest2.java",
		"test_prompt": "// JSPlanningDomainTest2.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPlanningDomain}.\n* It contains ten unit test cases for the {@link JSPlanningDomain#methods()} method.\n*/\nclass JSPlanningDomainTest2 {"
	},
	{
		"original_code": "// JSPlanningDomain.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSPlanningDomain {\r\n\r\n    /*==== instance variables ====*/\r\n    private String name;\r\n\r\n    private JSListAxioms axioms = new JSListAxioms();\r\n\r\n    private JSListOperators operators = new JSListOperators();\r\n\r\n    private JSListMethods methods = new JSListMethods();\r\n\r\n    /*==== constructor ====*/\r\n    public JSPlanningDomain() {\r\n    }\r\n\r\n    public JSPlanningDomain(StreamTokenizer tokenizer) {\r\n        String w = JSUtil.readWord(tokenizer, \"REading Domain Definition\");\r\n        if (w.equals(\"%%%\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        name = w;\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"Expecting '( ' for planning domain\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        parserOpsMethsAxs(tokenizer);\r\n        if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \" Expecting ')' for planning domain\"))\r\n            //return;\r\n            throw new JSParserError();\r\n    }\r\n\r\n    public void parserOpsMethsAxs(StreamTokenizer tokenizer) {\r\n        if (!JSUtil.readToken(tokenizer, \"Expacting domain definition, operators,methods,axioms\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar && tokenizer.ttype != JSJshopVars.rightPar) {\r\n            JSUtil.println(\"parserOpsMethsAxs: expected ( or )\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        String w;\r\n        JSOperator op;\r\n        JSMethod met;\r\n        JSAxiom ax;\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            if (!JSUtil.expectTokenType(JSJshopVars.colon, tokenizer, \"Expecting ':' for axiom,method or operator definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (!JSUtil.readToken(tokenizer, \"Method/axiom/operator definition expected\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.minus) {\r\n                ax = new JSAxiom(tokenizer);\r\n                ax.setName(\"Axiom_\" + (axioms.size() + 1) + \"_\");\r\n                axioms.addElement(ax);\r\n            } else {\r\n                if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                    JSUtil.println(\"Line : \" + tokenizer.lineno() + \" method/operator expected\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                } else {\r\n                    if (tokenizer.sval.equalsIgnoreCase(\"operator\")) {\r\n                        op = new JSOperator(tokenizer);\r\n                        operators.addElement(op);\r\n                    } else {\r\n                        if (tokenizer.sval.equalsIgnoreCase(\"method\")) {\r\n                            met = new JSMethod(tokenizer);\r\n                            met.setName(\"Method_\" + (methods.size() + 1) + \"_\");\r\n                            methods.addElement(met);\r\n                        } else {\r\n                            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting method or operator found text:\" + tokenizer.sval);\r\n                            //return;\r\n                            throw new JSParserError();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (//close op/meth/ax\r\n            !JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for Domain definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (!JSUtil.readToken(tokenizer, \"PlanningDomain\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public JSPairPlanTSListNodes solve(JSPlanningProblem prob, Vector listNodes) {\r\n        JSPairPlanTState pair = new JSPairPlanTState();\r\n        if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning) {\r\n            JSUtil.flag(\"====== SOLVING A NEW PROBLEM====\");\r\n            this.print();\r\n            JSUtil.flag(\"PROBLEM\");\r\n            prob.print();\r\n        }\r\n        JSTasks tasks = prob.tasks();\r\n        pair = tasks.seekPlan(new JSTState(prob.state(), new JSListLogicalAtoms(), new JSListLogicalAtoms()), this, new JSPlan(), listNodes);\r\n        return new JSPairPlanTSListNodes(pair, listNodes);\r\n    }\r\n\r\n    public JSListPairPlanTStateNodes solveAll(JSPlanningProblem prob, boolean All) {\r\n        JSListPairPlanTStateNodes allPlans;\r\n        JSTasks tasks = prob.tasks();\r\n        allPlans = tasks.seekPlanAll(new JSTState(prob.state(), new JSListLogicalAtoms(), new JSListLogicalAtoms()), this, All);\r\n        return allPlans;\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\"make-domain \");\r\n        JSUtil.println(name + \" \");\r\n        axioms.print();\r\n        operators.print();\r\n        methods.print();\r\n        JSUtil.println(\")\");\r\n    }\r\n\r\n    public JSListMethods methods() {\r\n        return methods;\r\n    }\r\n\r\n    public JSListAxioms axioms() {\r\n        return axioms;\r\n    }\r\n\r\n    public JSListOperators operators() {\r\n        return operators;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPlanningDomainTest3.java",
		"test_prompt": "// JSPlanningDomainTest3.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPlanningDomain}.\n* It contains ten unit test cases for the {@link JSPlanningDomain#axioms()} method.\n*/\nclass JSPlanningDomainTest3 {"
	},
	{
		"original_code": "// JSPlanningDomain.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JSPlanningDomain {\r\n\r\n    /*==== instance variables ====*/\r\n    private String name;\r\n\r\n    private JSListAxioms axioms = new JSListAxioms();\r\n\r\n    private JSListOperators operators = new JSListOperators();\r\n\r\n    private JSListMethods methods = new JSListMethods();\r\n\r\n    /*==== constructor ====*/\r\n    public JSPlanningDomain() {\r\n    }\r\n\r\n    public JSPlanningDomain(StreamTokenizer tokenizer) {\r\n        String w = JSUtil.readWord(tokenizer, \"REading Domain Definition\");\r\n        if (w.equals(\"%%%\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        name = w;\r\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"Expecting '( ' for planning domain\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        parserOpsMethsAxs(tokenizer);\r\n        if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \" Expecting ')' for planning domain\"))\r\n            //return;\r\n            throw new JSParserError();\r\n    }\r\n\r\n    public void parserOpsMethsAxs(StreamTokenizer tokenizer) {\r\n        if (!JSUtil.readToken(tokenizer, \"Expacting domain definition, operators,methods,axioms\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar && tokenizer.ttype != JSJshopVars.rightPar) {\r\n            JSUtil.println(\"parserOpsMethsAxs: expected ( or )\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        String w;\r\n        JSOperator op;\r\n        JSMethod met;\r\n        JSAxiom ax;\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            if (!JSUtil.expectTokenType(JSJshopVars.colon, tokenizer, \"Expecting ':' for axiom,method or operator definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (!JSUtil.readToken(tokenizer, \"Method/axiom/operator definition expected\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.minus) {\r\n                ax = new JSAxiom(tokenizer);\r\n                ax.setName(\"Axiom_\" + (axioms.size() + 1) + \"_\");\r\n                axioms.addElement(ax);\r\n            } else {\r\n                if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                    JSUtil.println(\"Line : \" + tokenizer.lineno() + \" method/operator expected\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                } else {\r\n                    if (tokenizer.sval.equalsIgnoreCase(\"operator\")) {\r\n                        op = new JSOperator(tokenizer);\r\n                        operators.addElement(op);\r\n                    } else {\r\n                        if (tokenizer.sval.equalsIgnoreCase(\"method\")) {\r\n                            met = new JSMethod(tokenizer);\r\n                            met.setName(\"Method_\" + (methods.size() + 1) + \"_\");\r\n                            methods.addElement(met);\r\n                        } else {\r\n                            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting method or operator found text:\" + tokenizer.sval);\r\n                            //return;\r\n                            throw new JSParserError();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (//close op/meth/ax\r\n            !JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for Domain definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (!JSUtil.readToken(tokenizer, \"PlanningDomain\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public JSPairPlanTSListNodes solve(JSPlanningProblem prob, Vector listNodes) {\r\n        JSPairPlanTState pair = new JSPairPlanTState();\r\n        if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning) {\r\n            JSUtil.flag(\"====== SOLVING A NEW PROBLEM====\");\r\n            this.print();\r\n            JSUtil.flag(\"PROBLEM\");\r\n            prob.print();\r\n        }\r\n        JSTasks tasks = prob.tasks();\r\n        pair = tasks.seekPlan(new JSTState(prob.state(), new JSListLogicalAtoms(), new JSListLogicalAtoms()), this, new JSPlan(), listNodes);\r\n        return new JSPairPlanTSListNodes(pair, listNodes);\r\n    }\r\n\r\n    public JSListPairPlanTStateNodes solveAll(JSPlanningProblem prob, boolean All) {\r\n        JSListPairPlanTStateNodes allPlans;\r\n        JSTasks tasks = prob.tasks();\r\n        allPlans = tasks.seekPlanAll(new JSTState(prob.state(), new JSListLogicalAtoms(), new JSListLogicalAtoms()), this, All);\r\n        return allPlans;\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\"make-domain \");\r\n        JSUtil.println(name + \" \");\r\n        axioms.print();\r\n        operators.print();\r\n        methods.print();\r\n        JSUtil.println(\")\");\r\n    }\r\n\r\n    public JSListMethods methods() {\r\n        return methods;\r\n    }\r\n\r\n    public JSListAxioms axioms() {\r\n        return axioms;\r\n    }\r\n\r\n    public JSListOperators operators() {\r\n        return operators;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPlanningDomainTest4.java",
		"test_prompt": "// JSPlanningDomainTest4.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPlanningDomain}.\n* It contains ten unit test cases for the {@link JSPlanningDomain#operators()} method.\n*/\nclass JSPlanningDomainTest4 {"
	},
	{
		"original_code": "// JSPairPlanTState.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSPairPlanTState {\r\n\r\n    JSPlan plan;\r\n\r\n    JSTState tState;\r\n\r\n    JSPairPlanTState() {\r\n        super();\r\n    }\r\n\r\n    JSPairPlanTState(JSPlan pl, JSTState tst) {\r\n        super();\r\n        plan = pl;\r\n        tState = tst;\r\n    }\r\n\r\n    public JSPlan plan() {\r\n        return plan;\r\n    }\r\n\r\n    public JSTState tState() {\r\n        return tState;\r\n    }\r\n\r\n    public void print() {\r\n        JSPlan pl = this.plan();\r\n        JSTState tst = this.tState();\r\n        JSUtil.print(\"[\");\r\n        pl.print();\r\n        JSUtil.print(\"<->\");\r\n        tst.print();\r\n        JSUtil.print(\"]\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPairPlanTStateTest0.java",
		"test_prompt": "// JSPairPlanTStateTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPairPlanTState}.\n* It contains ten unit test cases for the {@link JSPairPlanTState#plan()} method.\n*/\nclass JSPairPlanTStateTest0 {"
	},
	{
		"original_code": "// JSPairPlanTState.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSPairPlanTState {\r\n\r\n    JSPlan plan;\r\n\r\n    JSTState tState;\r\n\r\n    JSPairPlanTState() {\r\n        super();\r\n    }\r\n\r\n    JSPairPlanTState(JSPlan pl, JSTState tst) {\r\n        super();\r\n        plan = pl;\r\n        tState = tst;\r\n    }\r\n\r\n    public JSPlan plan() {\r\n        return plan;\r\n    }\r\n\r\n    public JSTState tState() {\r\n        return tState;\r\n    }\r\n\r\n    public void print() {\r\n        JSPlan pl = this.plan();\r\n        JSTState tst = this.tState();\r\n        JSUtil.print(\"[\");\r\n        pl.print();\r\n        JSUtil.print(\"<->\");\r\n        tst.print();\r\n        JSUtil.print(\"]\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPairPlanTStateTest1.java",
		"test_prompt": "// JSPairPlanTStateTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPairPlanTState}.\n* It contains ten unit test cases for the {@link JSPairPlanTState#tState()} method.\n*/\nclass JSPairPlanTStateTest1 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest0.java",
		"test_prompt": "// JSEvaluateTest0.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#numericValue(JSTerm)} method.\n*/\nclass JSEvaluateTest0 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest1.java",
		"test_prompt": "// JSEvaluateTest1.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#addsub(float, float, int)} method.\n*/\nclass JSEvaluateTest1 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest2.java",
		"test_prompt": "// JSEvaluateTest2.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#mult(float, float)} method.\n*/\nclass JSEvaluateTest2 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest3.java",
		"test_prompt": "// JSEvaluateTest3.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#div(float, float)} method.\n*/\nclass JSEvaluateTest3 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest4.java",
		"test_prompt": "// JSEvaluateTest4.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#greater(float, float)} method.\n*/\nclass JSEvaluateTest4 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest5.java",
		"test_prompt": "// JSEvaluateTest5.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#greaterequal(float, float)} method.\n*/\nclass JSEvaluateTest5 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest6.java",
		"test_prompt": "// JSEvaluateTest6.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#equal(float, float)} method.\n*/\nclass JSEvaluateTest6 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest7.java",
		"test_prompt": "// JSEvaluateTest7.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#notequal(float, float)} method.\n*/\nclass JSEvaluateTest7 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest8.java",
		"test_prompt": "// JSEvaluateTest8.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#minOf(float, float)} method.\n*/\nclass JSEvaluateTest8 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest9.java",
		"test_prompt": "// JSEvaluateTest9.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#maxOf(float, float)} method.\n*/\nclass JSEvaluateTest9 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest10.java",
		"test_prompt": "// JSEvaluateTest10.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#floor(float)} method.\n*/\nclass JSEvaluateTest10 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest11.java",
		"test_prompt": "// JSEvaluateTest11.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#ceil(float)} method.\n*/\nclass JSEvaluateTest11 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest12.java",
		"test_prompt": "// JSEvaluateTest12.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#not(JSTerm)} method.\n*/\nclass JSEvaluateTest12 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest13.java",
		"test_prompt": "// JSEvaluateTest13.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#member(JSTerm, JSTerm)} method.\n*/\nclass JSEvaluateTest13 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest14.java",
		"test_prompt": "// JSEvaluateTest14.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#minElement(JSTerm)} method.\n*/\nclass JSEvaluateTest14 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest15.java",
		"test_prompt": "// JSEvaluateTest15.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#maxElement(JSTerm)} method.\n*/\nclass JSEvaluateTest15 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest16.java",
		"test_prompt": "// JSEvaluateTest16.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#OperantNum(String)} method.\n*/\nclass JSEvaluateTest16 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest17.java",
		"test_prompt": "// JSEvaluateTest17.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#applyOperator(String, JSTerm, JSTerm)} method.\n*/\nclass JSEvaluateTest17 {"
	},
	{
		"original_code": "// JSEvaluate.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.util.*;\r\n\r\npublic final class JSEvaluate {\r\n\r\n    /*==== instance variables ====*/\r\n    private static boolean fail;\r\n\r\n    // private static boolean BothInt;\r\n    public static float numericValue(JSTerm t) {\r\n        float floatVal;\r\n        fail = false;\r\n        if (t.size() > 1) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        String strVal = (String) t.elementAt(0);\r\n        try {\r\n            floatVal = Float.valueOf(strVal).floatValue();\r\n        } catch (NumberFormatException e) {\r\n            fail = true;\r\n            return 0;\r\n        }\r\n        /*   try{\r\n            Integer.valueOf(strVal).intValue();\r\n            BothInt=BothInt&true;\r\n        }catch (NumberFormatException e) {\r\n            BothInt=BothInt & false;\r\n        } */\r\n        return floatVal;\r\n    }\r\n\r\n    public static JSTerm addsub(float operant1, float operant2, int optype) {\r\n        float sum = operant1 + operant2 * optype;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm mult(float operant1, float operant2) {\r\n        float sum = operant1 * operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) sum));\r\n        else*/\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm div(float operant1, float operant2) {\r\n        if (operant2 == 0)\r\n            return new JSTerm();\r\n        float sum = operant1 / operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(sum));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greater(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 <= operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm greaterequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 < operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm equal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 != operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm notequal(float operant1, float operant2) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1 == operant2)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm minOf(float operant1, float operant2) {\r\n        float min;\r\n        if (operant1 < operant2)\r\n            min = operant1;\r\n        else\r\n            min = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxOf(float operant1, float operant2) {\r\n        float max;\r\n        if (operant1 > operant2)\r\n            max = operant1;\r\n        else\r\n            max = operant2;\r\n        JSTerm t = new JSTerm();\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n          t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm floor(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int floorVal = (int) operant1;\r\n        // Added in Apr 11\r\n        operant1 = floorVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm ceil(float operant1) {\r\n        JSTerm t = new JSTerm();\r\n        int ceilVal = (int) operant1;\r\n        if (ceilVal < operant1)\r\n            ceilVal++;\r\n        // Added in Apr 11\r\n        operant1 = ceilVal;\r\n        t.makeConstant();\r\n        t.addElement(String.valueOf(operant1));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm not(JSTerm operant1) {\r\n        JSTerm t = new JSTerm();\r\n        if (operant1.size() != 0)\r\n            return t;\r\n        t.makeConstant();\r\n        t.addElement(\"t\");\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm member(JSTerm operant1, JSTerm operant2) {\r\n        JSTerm t = (JSTerm) operant2.clone();\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                return new JSTerm();\r\n            if (operant1.equals((JSTerm) t.elementAt(1)))\r\n                return (JSTerm) operant1.clone();\r\n            t = (JSTerm) t.elementAt(2);\r\n        }\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm minElement(JSTerm operant1t) {\r\n        float element1;\r\n        float min = Float.MAX_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        // BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 < min)\r\n                min = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) min));\r\n        else*/\r\n        t.addElement(String.valueOf(min));\r\n        return t;\r\n    }\r\n\r\n    public static JSTerm maxElement(JSTerm operant1t) {\r\n        float element1;\r\n        float max = Float.MIN_VALUE;\r\n        boolean failed = true;\r\n        JSTerm t = (JSTerm) operant1t.clone();\r\n        //BothInt=true;\r\n        while (!t.isEmpty()) {\r\n            if (!((String) t.elementAt(0)).equals(\".\"))\r\n                break;\r\n            element1 = numericValue((JSTerm) t.elementAt(1));\r\n            if (fail)\r\n                return new JSTerm();\r\n            if (element1 > max)\r\n                max = element1;\r\n            t = (JSTerm) t.elementAt(2);\r\n            if (failed)\r\n                failed = false;\r\n        }\r\n        t = new JSTerm();\r\n        if (failed)\r\n            return t;\r\n        t.makeConstant();\r\n        /*if (BothInt)\r\n            t.addElement(String.valueOf((int) max));\r\n        else*/\r\n        t.addElement(String.valueOf(max));\r\n        return t;\r\n    }\r\n\r\n    public static int OperantNum(String op) {\r\n        if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\r\n            return 1;\r\n        else\r\n            return 2;\r\n    }\r\n\r\n    public static JSTerm applyOperator(String op, JSTerm operant1t, JSTerm operant2t) {\r\n        if (!operant1t.isGround() || !operant2t.isGround())\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"member\"))\r\n            return member(operant1t, operant2t);\r\n        //BothInt=true;\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        float operant2 = numericValue(operant2t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equals(\"+\"))\r\n            return addsub(operant1, operant2, 1);\r\n        if (op.equals(\"-\"))\r\n            return addsub(operant1, operant2, -1);\r\n        if (op.equals(\"*\"))\r\n            return mult(operant1, operant2);\r\n        if (op.equals(\"/\"))\r\n            return div(operant1, operant2);\r\n        if (op.equals(\">\"))\r\n            return greater(operant1, operant2);\r\n        if (op.equals(\">=\"))\r\n            return greaterequal(operant1, operant2);\r\n        if (op.equals(\"<\"))\r\n            return greaterequal(operant2, operant1);\r\n        if (op.equals(\"<=\"))\r\n            return greater(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"equal\"))\r\n            return equal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"notequal\"))\r\n            return notequal(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"min\"))\r\n            return minOf(operant2, operant1);\r\n        if (op.equalsIgnoreCase(\"max\"))\r\n            return maxOf(operant2, operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n\r\n    public static JSTerm applyOperatorUnary(String op, JSTerm operant1t) {\r\n        if (!operant1t.isGround())\r\n            return new JSTerm();\r\n        if (op.equals(\"not\"))\r\n            return not(operant1t);\r\n        /*\r\n        if (op.equals(\"Min\"))\r\n          return minElement(operant1t);\r\n        \r\n         if (op.equals(\"Max\"))\r\n          return maxElement(operant1t);\r\n      */\r\n        float operant1 = numericValue(operant1t);\r\n        if (fail)\r\n            return new JSTerm();\r\n        if (op.equalsIgnoreCase(\"floor\"))\r\n            return floor(operant1);\r\n        if (op.equalsIgnoreCase(\"ceil\"))\r\n            return ceil(operant1);\r\n        JSUtil.println(\"Undefined function to be evaluated  in Call statement\");\r\n        return new JSTerm();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSEvaluateTest18.java",
		"test_prompt": "// JSEvaluateTest18.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSEvaluate}.\n* It contains ten unit test cases for the {@link JSEvaluate#applyOperatorUnary(String, JSTerm)} method.\n*/\nclass JSEvaluateTest18 {"
	},
	{
		"original_code": "// JSMethod.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSMethod {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSTaskAtom head;\r\n\r\n    private JSListIfThenElse ifThenElseList;\r\n\r\n    private boolean notDummy;\r\n\r\n    JSMethod(StreamTokenizer tokenizer) {\r\n        head = new JSTaskAtom(tokenizer);\r\n        ifThenElseList = new JSListIfThenElse(tokenizer);\r\n        notDummy = true;\r\n    }\r\n\r\n    JSMethod() {\r\n        super();\r\n        notDummy = false;\r\n    }\r\n\r\n    public boolean notDummy() {\r\n        return notDummy;\r\n    }\r\n\r\n    public void setName(String mName) {\r\n        JSPairIfThen pair;\r\n        for (int i = 0; i < ifThenElseList.size(); i++) {\r\n            pair = (JSPairIfThen) ifThenElseList.elementAt(i);\r\n            pair.setName(mName + pair.Name());\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":Method \");\r\n        head.print();\r\n        ifThenElseList.print();\r\n        JSUtil.println(\")\");\r\n        //       JSUtil.flag(\"<-- method\");\r\n    }\r\n\r\n    public JSTaskAtom head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListIfThenElse ifThenElseList() {\r\n        return ifThenElseList;\r\n    }\r\n\r\n    public JSMethod standarizerMet() {\r\n        JSMethod newMet = new JSMethod();\r\n        JSTaskAtom ta = this.head();\r\n        JSListIfThenElse ifTEList = this.ifThenElseList();\r\n        newMet.notDummy = this.notDummy();\r\n        newMet.head = ta.standarizerTA();\r\n        newMet.ifThenElseList = ifTEList.standarizerListIfTE();\r\n        return newMet;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSMethodTest0.java",
		"test_prompt": "// JSMethodTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSMethod}.\n* It contains ten unit test cases for the {@link JSMethod#notDummy()} method.\n*/\nclass JSMethodTest0 {"
	},
	{
		"original_code": "// JSMethod.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSMethod {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSTaskAtom head;\r\n\r\n    private JSListIfThenElse ifThenElseList;\r\n\r\n    private boolean notDummy;\r\n\r\n    JSMethod(StreamTokenizer tokenizer) {\r\n        head = new JSTaskAtom(tokenizer);\r\n        ifThenElseList = new JSListIfThenElse(tokenizer);\r\n        notDummy = true;\r\n    }\r\n\r\n    JSMethod() {\r\n        super();\r\n        notDummy = false;\r\n    }\r\n\r\n    public boolean notDummy() {\r\n        return notDummy;\r\n    }\r\n\r\n    public void setName(String mName) {\r\n        JSPairIfThen pair;\r\n        for (int i = 0; i < ifThenElseList.size(); i++) {\r\n            pair = (JSPairIfThen) ifThenElseList.elementAt(i);\r\n            pair.setName(mName + pair.Name());\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":Method \");\r\n        head.print();\r\n        ifThenElseList.print();\r\n        JSUtil.println(\")\");\r\n        //       JSUtil.flag(\"<-- method\");\r\n    }\r\n\r\n    public JSTaskAtom head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListIfThenElse ifThenElseList() {\r\n        return ifThenElseList;\r\n    }\r\n\r\n    public JSMethod standarizerMet() {\r\n        JSMethod newMet = new JSMethod();\r\n        JSTaskAtom ta = this.head();\r\n        JSListIfThenElse ifTEList = this.ifThenElseList();\r\n        newMet.notDummy = this.notDummy();\r\n        newMet.head = ta.standarizerTA();\r\n        newMet.ifThenElseList = ifTEList.standarizerListIfTE();\r\n        return newMet;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSMethodTest1.java",
		"test_prompt": "// JSMethodTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSMethod}.\n* It contains ten unit test cases for the {@link JSMethod#head()} method.\n*/\nclass JSMethodTest1 {"
	},
	{
		"original_code": "// JSMethod.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSMethod {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSTaskAtom head;\r\n\r\n    private JSListIfThenElse ifThenElseList;\r\n\r\n    private boolean notDummy;\r\n\r\n    JSMethod(StreamTokenizer tokenizer) {\r\n        head = new JSTaskAtom(tokenizer);\r\n        ifThenElseList = new JSListIfThenElse(tokenizer);\r\n        notDummy = true;\r\n    }\r\n\r\n    JSMethod() {\r\n        super();\r\n        notDummy = false;\r\n    }\r\n\r\n    public boolean notDummy() {\r\n        return notDummy;\r\n    }\r\n\r\n    public void setName(String mName) {\r\n        JSPairIfThen pair;\r\n        for (int i = 0; i < ifThenElseList.size(); i++) {\r\n            pair = (JSPairIfThen) ifThenElseList.elementAt(i);\r\n            pair.setName(mName + pair.Name());\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":Method \");\r\n        head.print();\r\n        ifThenElseList.print();\r\n        JSUtil.println(\")\");\r\n        //       JSUtil.flag(\"<-- method\");\r\n    }\r\n\r\n    public JSTaskAtom head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListIfThenElse ifThenElseList() {\r\n        return ifThenElseList;\r\n    }\r\n\r\n    public JSMethod standarizerMet() {\r\n        JSMethod newMet = new JSMethod();\r\n        JSTaskAtom ta = this.head();\r\n        JSListIfThenElse ifTEList = this.ifThenElseList();\r\n        newMet.notDummy = this.notDummy();\r\n        newMet.head = ta.standarizerTA();\r\n        newMet.ifThenElseList = ifTEList.standarizerListIfTE();\r\n        return newMet;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSMethodTest2.java",
		"test_prompt": "// JSMethodTest2.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSMethod}.\n* It contains ten unit test cases for the {@link JSMethod#ifThenElseList()} method.\n*/\nclass JSMethodTest2 {"
	},
	{
		"original_code": "// JSMethod.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSMethod {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSTaskAtom head;\r\n\r\n    private JSListIfThenElse ifThenElseList;\r\n\r\n    private boolean notDummy;\r\n\r\n    JSMethod(StreamTokenizer tokenizer) {\r\n        head = new JSTaskAtom(tokenizer);\r\n        ifThenElseList = new JSListIfThenElse(tokenizer);\r\n        notDummy = true;\r\n    }\r\n\r\n    JSMethod() {\r\n        super();\r\n        notDummy = false;\r\n    }\r\n\r\n    public boolean notDummy() {\r\n        return notDummy;\r\n    }\r\n\r\n    public void setName(String mName) {\r\n        JSPairIfThen pair;\r\n        for (int i = 0; i < ifThenElseList.size(); i++) {\r\n            pair = (JSPairIfThen) ifThenElseList.elementAt(i);\r\n            pair.setName(mName + pair.Name());\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":Method \");\r\n        head.print();\r\n        ifThenElseList.print();\r\n        JSUtil.println(\")\");\r\n        //       JSUtil.flag(\"<-- method\");\r\n    }\r\n\r\n    public JSTaskAtom head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListIfThenElse ifThenElseList() {\r\n        return ifThenElseList;\r\n    }\r\n\r\n    public JSMethod standarizerMet() {\r\n        JSMethod newMet = new JSMethod();\r\n        JSTaskAtom ta = this.head();\r\n        JSListIfThenElse ifTEList = this.ifThenElseList();\r\n        newMet.notDummy = this.notDummy();\r\n        newMet.head = ta.standarizerTA();\r\n        newMet.ifThenElseList = ifTEList.standarizerListIfTE();\r\n        return newMet;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSMethodTest3.java",
		"test_prompt": "// JSMethodTest3.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSMethod}.\n* It contains ten unit test cases for the {@link JSMethod#standarizerMet()} method.\n*/\nclass JSMethodTest3 {"
	},
	{
		"original_code": "// JSListConjuncts.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSListConjuncts extends Vector {\r\n\r\n    JSListConjuncts() {\r\n        super();\r\n    }\r\n\r\n    JSListConjuncts(StreamTokenizer tokenizer) {\r\n        super();\r\n        JSListLogicalAtoms listAtoms;\r\n        String name;\r\n        int index = 1;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting list of conjuncts as tail of the axiom \"))\r\n            // return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting axiom tail definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                name = \"Part_\" + index;\r\n            } else {\r\n                tokenizer.pushBack();\r\n                name = JSUtil.readWord(tokenizer, \"Expecting name for the method if/then pair.\");\r\n                if (name.equals(\"%%%\")) {\r\n                    JSUtil.println(\"Invalid name for an axiom tail.\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n            }\r\n            listAtoms = new JSListLogicalAtoms(tokenizer);\r\n            listAtoms.setName(name);\r\n            this.addElement(listAtoms);\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting ) for axiom definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            index++;\r\n        }\r\n        tokenizer.pushBack();\r\n    }\r\n\r\n    public void print() {\r\n        JSListLogicalAtoms el;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            el = (JSListLogicalAtoms) this.elementAt(i);\r\n            JSUtil.println(el.Name());\r\n            el.print();\r\n        }\r\n    }\r\n\r\n    public JSListConjuncts standarizerListConjuncts() {\r\n        JSListConjuncts newList = new JSListConjuncts();\r\n        JSListLogicalAtoms listAtoms;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            listAtoms = (JSListLogicalAtoms) this.elementAt(i);\r\n            newList.addElement(listAtoms.standarizerListLogicalAtoms());\r\n        }\r\n        return newList;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSListConjunctsTest.java",
		"test_prompt": "// JSListConjunctsTest.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSListConjuncts}.\n* It contains ten unit test cases for the {@link JSListConjuncts#standarizerListConjuncts()} method.\n*/\nclass JSListConjunctsTest {"
	},
	{
		"original_code": "// JSTState.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSTState {\r\n\r\n    JSState state;\r\n\r\n    JSListLogicalAtoms addList;\r\n\r\n    JSListLogicalAtoms deleteList;\r\n\r\n    JSTState() {\r\n        super();\r\n    }\r\n\r\n    JSTState(JSState st, JSListLogicalAtoms al, JSListLogicalAtoms dl) {\r\n        super();\r\n        state = st;\r\n        addList = al;\r\n        deleteList = dl;\r\n    }\r\n\r\n    JSTState(JSTState st) {\r\n        super();\r\n        state = (JSState) st.state.clone();\r\n        addList = (JSListLogicalAtoms) st.addList.clone();\r\n        deleteList = (JSListLogicalAtoms) st.deleteList.clone();\r\n    }\r\n\r\n    public JSState state() {\r\n        return state;\r\n    }\r\n\r\n    public JSListLogicalAtoms addList() {\r\n        return addList;\r\n    }\r\n\r\n    public JSListLogicalAtoms deleteList() {\r\n        return deleteList;\r\n    }\r\n\r\n    public void print() {\r\n        JSState st = this.state();\r\n        JSListLogicalAtoms al = this.addList();\r\n        JSListLogicalAtoms dl = this.deleteList();\r\n        JSUtil.print(\"[state:\");\r\n        st.print();\r\n        JSUtil.println(\"+:\");\r\n        al.print();\r\n        JSUtil.println(\"-:\");\r\n        dl.print();\r\n        JSUtil.print(\"]\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTStateTest0.java",
		"test_prompt": "// JSTStateTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTState}.\n* It contains ten unit test cases for the {@link JSTState#state()} method.\n*/\nclass JSTStateTest0 {"
	},
	{
		"original_code": "// JSTState.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSTState {\r\n\r\n    JSState state;\r\n\r\n    JSListLogicalAtoms addList;\r\n\r\n    JSListLogicalAtoms deleteList;\r\n\r\n    JSTState() {\r\n        super();\r\n    }\r\n\r\n    JSTState(JSState st, JSListLogicalAtoms al, JSListLogicalAtoms dl) {\r\n        super();\r\n        state = st;\r\n        addList = al;\r\n        deleteList = dl;\r\n    }\r\n\r\n    JSTState(JSTState st) {\r\n        super();\r\n        state = (JSState) st.state.clone();\r\n        addList = (JSListLogicalAtoms) st.addList.clone();\r\n        deleteList = (JSListLogicalAtoms) st.deleteList.clone();\r\n    }\r\n\r\n    public JSState state() {\r\n        return state;\r\n    }\r\n\r\n    public JSListLogicalAtoms addList() {\r\n        return addList;\r\n    }\r\n\r\n    public JSListLogicalAtoms deleteList() {\r\n        return deleteList;\r\n    }\r\n\r\n    public void print() {\r\n        JSState st = this.state();\r\n        JSListLogicalAtoms al = this.addList();\r\n        JSListLogicalAtoms dl = this.deleteList();\r\n        JSUtil.print(\"[state:\");\r\n        st.print();\r\n        JSUtil.println(\"+:\");\r\n        al.print();\r\n        JSUtil.println(\"-:\");\r\n        dl.print();\r\n        JSUtil.print(\"]\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTStateTest1.java",
		"test_prompt": "// JSTStateTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTState}.\n* It contains ten unit test cases for the {@link JSTState#addList()} method.\n*/\nclass JSTStateTest1 {"
	},
	{
		"original_code": "// JSTState.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSTState {\r\n\r\n    JSState state;\r\n\r\n    JSListLogicalAtoms addList;\r\n\r\n    JSListLogicalAtoms deleteList;\r\n\r\n    JSTState() {\r\n        super();\r\n    }\r\n\r\n    JSTState(JSState st, JSListLogicalAtoms al, JSListLogicalAtoms dl) {\r\n        super();\r\n        state = st;\r\n        addList = al;\r\n        deleteList = dl;\r\n    }\r\n\r\n    JSTState(JSTState st) {\r\n        super();\r\n        state = (JSState) st.state.clone();\r\n        addList = (JSListLogicalAtoms) st.addList.clone();\r\n        deleteList = (JSListLogicalAtoms) st.deleteList.clone();\r\n    }\r\n\r\n    public JSState state() {\r\n        return state;\r\n    }\r\n\r\n    public JSListLogicalAtoms addList() {\r\n        return addList;\r\n    }\r\n\r\n    public JSListLogicalAtoms deleteList() {\r\n        return deleteList;\r\n    }\r\n\r\n    public void print() {\r\n        JSState st = this.state();\r\n        JSListLogicalAtoms al = this.addList();\r\n        JSListLogicalAtoms dl = this.deleteList();\r\n        JSUtil.print(\"[state:\");\r\n        st.print();\r\n        JSUtil.println(\"+:\");\r\n        al.print();\r\n        JSUtil.println(\"-:\");\r\n        dl.print();\r\n        JSUtil.print(\"]\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTStateTest2.java",
		"test_prompt": "// JSTStateTest2.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTState}.\n* It contains ten unit test cases for the {@link JSTState#deleteList()} method.\n*/\nclass JSTStateTest2 {"
	},
	{
		"original_code": "// JSPairIfThen.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\n\r\npublic class JSPairIfThen {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSListLogicalAtoms ifPart;\r\n\r\n    private JSTasks thenPart;\r\n\r\n    private String name;\r\n\r\n    JSPairIfThen() {\r\n        super();\r\n    }\r\n\r\n    JSPairIfThen(StreamTokenizer tokenizer) {\r\n        super();\r\n        ifPart = new JSListLogicalAtoms(tokenizer);\r\n        thenPart = new JSTasks(tokenizer);\r\n    }\r\n\r\n    public JSListLogicalAtoms ifPart() {\r\n        return ifPart;\r\n    }\r\n\r\n    public JSTasks thenPart() {\r\n        return thenPart;\r\n    }\r\n\r\n    public void setName(String newname) {\r\n        name = newname;\r\n    }\r\n\r\n    public String Name() {\r\n        return name;\r\n    }\r\n\r\n    public void print() {\r\n        JSListLogicalAtoms ip = this.ifPart();\r\n        JSTasks tp = this.thenPart();\r\n        JSUtil.println(\"Name : \" + name);\r\n        ip.print();\r\n        tp.print();\r\n    }\r\n\r\n    public JSPairIfThen standarizerPIT() {\r\n        JSListLogicalAtoms ifP = this.ifPart();\r\n        JSTasks thenP = this.thenPart();\r\n        JSPairIfThen newPIT = new JSPairIfThen();\r\n        newPIT.ifPart = ifP.standarizerListLogicalAtoms();\r\n        newPIT.thenPart = thenP.standarizerTasks();\r\n        return newPIT;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPairIfThenTest0.java",
		"test_prompt": "// JSPairIfThenTest0.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPairIfThen}.\n* It contains ten unit test cases for the {@link JSPairIfThen#ifPart()} method.\n*/\nclass JSPairIfThenTest0 {"
	},
	{
		"original_code": "// JSPairIfThen.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\n\r\npublic class JSPairIfThen {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSListLogicalAtoms ifPart;\r\n\r\n    private JSTasks thenPart;\r\n\r\n    private String name;\r\n\r\n    JSPairIfThen() {\r\n        super();\r\n    }\r\n\r\n    JSPairIfThen(StreamTokenizer tokenizer) {\r\n        super();\r\n        ifPart = new JSListLogicalAtoms(tokenizer);\r\n        thenPart = new JSTasks(tokenizer);\r\n    }\r\n\r\n    public JSListLogicalAtoms ifPart() {\r\n        return ifPart;\r\n    }\r\n\r\n    public JSTasks thenPart() {\r\n        return thenPart;\r\n    }\r\n\r\n    public void setName(String newname) {\r\n        name = newname;\r\n    }\r\n\r\n    public String Name() {\r\n        return name;\r\n    }\r\n\r\n    public void print() {\r\n        JSListLogicalAtoms ip = this.ifPart();\r\n        JSTasks tp = this.thenPart();\r\n        JSUtil.println(\"Name : \" + name);\r\n        ip.print();\r\n        tp.print();\r\n    }\r\n\r\n    public JSPairIfThen standarizerPIT() {\r\n        JSListLogicalAtoms ifP = this.ifPart();\r\n        JSTasks thenP = this.thenPart();\r\n        JSPairIfThen newPIT = new JSPairIfThen();\r\n        newPIT.ifPart = ifP.standarizerListLogicalAtoms();\r\n        newPIT.thenPart = thenP.standarizerTasks();\r\n        return newPIT;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPairIfThenTest1.java",
		"test_prompt": "// JSPairIfThenTest1.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPairIfThen}.\n* It contains ten unit test cases for the {@link JSPairIfThen#thenPart()} method.\n*/\nclass JSPairIfThenTest1 {"
	},
	{
		"original_code": "// JSPairIfThen.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\n\r\npublic class JSPairIfThen {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSListLogicalAtoms ifPart;\r\n\r\n    private JSTasks thenPart;\r\n\r\n    private String name;\r\n\r\n    JSPairIfThen() {\r\n        super();\r\n    }\r\n\r\n    JSPairIfThen(StreamTokenizer tokenizer) {\r\n        super();\r\n        ifPart = new JSListLogicalAtoms(tokenizer);\r\n        thenPart = new JSTasks(tokenizer);\r\n    }\r\n\r\n    public JSListLogicalAtoms ifPart() {\r\n        return ifPart;\r\n    }\r\n\r\n    public JSTasks thenPart() {\r\n        return thenPart;\r\n    }\r\n\r\n    public void setName(String newname) {\r\n        name = newname;\r\n    }\r\n\r\n    public String Name() {\r\n        return name;\r\n    }\r\n\r\n    public void print() {\r\n        JSListLogicalAtoms ip = this.ifPart();\r\n        JSTasks tp = this.thenPart();\r\n        JSUtil.println(\"Name : \" + name);\r\n        ip.print();\r\n        tp.print();\r\n    }\r\n\r\n    public JSPairIfThen standarizerPIT() {\r\n        JSListLogicalAtoms ifP = this.ifPart();\r\n        JSTasks thenP = this.thenPart();\r\n        JSPairIfThen newPIT = new JSPairIfThen();\r\n        newPIT.ifPart = ifP.standarizerListLogicalAtoms();\r\n        newPIT.thenPart = thenP.standarizerTasks();\r\n        return newPIT;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPairIfThenTest2.java",
		"test_prompt": "// JSPairIfThenTest2.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPairIfThen}.\n* It contains ten unit test cases for the {@link JSPairIfThen#Name()} method.\n*/\nclass JSPairIfThenTest2 {"
	},
	{
		"original_code": "// JSPairIfThen.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\n\r\npublic class JSPairIfThen {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSListLogicalAtoms ifPart;\r\n\r\n    private JSTasks thenPart;\r\n\r\n    private String name;\r\n\r\n    JSPairIfThen() {\r\n        super();\r\n    }\r\n\r\n    JSPairIfThen(StreamTokenizer tokenizer) {\r\n        super();\r\n        ifPart = new JSListLogicalAtoms(tokenizer);\r\n        thenPart = new JSTasks(tokenizer);\r\n    }\r\n\r\n    public JSListLogicalAtoms ifPart() {\r\n        return ifPart;\r\n    }\r\n\r\n    public JSTasks thenPart() {\r\n        return thenPart;\r\n    }\r\n\r\n    public void setName(String newname) {\r\n        name = newname;\r\n    }\r\n\r\n    public String Name() {\r\n        return name;\r\n    }\r\n\r\n    public void print() {\r\n        JSListLogicalAtoms ip = this.ifPart();\r\n        JSTasks tp = this.thenPart();\r\n        JSUtil.println(\"Name : \" + name);\r\n        ip.print();\r\n        tp.print();\r\n    }\r\n\r\n    public JSPairIfThen standarizerPIT() {\r\n        JSListLogicalAtoms ifP = this.ifPart();\r\n        JSTasks thenP = this.thenPart();\r\n        JSPairIfThen newPIT = new JSPairIfThen();\r\n        newPIT.ifPart = ifP.standarizerListLogicalAtoms();\r\n        newPIT.thenPart = thenP.standarizerTasks();\r\n        return newPIT;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPairIfThenTest3.java",
		"test_prompt": "// JSPairIfThenTest3.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPairIfThen}.\n* It contains ten unit test cases for the {@link JSPairIfThen#standarizerPIT()} method.\n*/\nclass JSPairIfThenTest3 {"
	},
	{
		"original_code": "// JSListMethods.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSListMethods extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    private String label;\r\n\r\n    JSListMethods() {\r\n        super();\r\n    }\r\n\r\n    public void print() {\r\n        JSMethod el;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            el = (JSMethod) this.elementAt(i);\r\n            el.print();\r\n        }\r\n    }\r\n\r\n    public JSReduction findReduction(JSTaskAtom task, JSState s, JSReduction red, JSListAxioms axioms) {\r\n        JSSubstitution alpha;\r\n        JSMethod met;\r\n        int base;\r\n        JSListIfThenElse list;\r\n        JSTasks newT;\r\n        JSTaskAtom tmet;\r\n        boolean taskIsGround = task.isGround();\r\n        //task.print();\r\n        //    JSUtil.flag(\"task being reduced\");\r\n        if (red.isDummy()) {\r\n            //JSUtil.flag(\"dummy\");\r\n            base = 0;\r\n        } else {\r\n            //JSUtil.flag(\"not dummy\");\r\n            base = this.indexOf(red.selectedMethod()) + 1;\r\n        }\r\n        for (int i = base; i < this.size(); i++) {\r\n            met = (JSMethod) this.elementAt(i);\r\n            //met.print();\r\n            //\t\tJSUtil.flag(\"<- evaluating method\");\r\n            tmet = met.head();\r\n            if (!taskIsGround) {\r\n                tmet = tmet.standarizerTA();\r\n            }\r\n            alpha = tmet.matches(task);\r\n            if (!alpha.fail()) {\r\n                //\t\t    JSUtil.flag(\"heads match\");\r\n                list = met.ifThenElseList();\r\n                if (!taskIsGround) {\r\n                    list = list.standarizerListIfTE();\r\n                }\r\n                newT = list.evalPrec(s, alpha, axioms);\r\n                if (!newT.fail()) {\r\n                    //JSUtil.flag(\"method appicable\");\r\n                    JSJshopVars.VarCounter++;\r\n                    return new JSReduction(met, newT);\r\n                }\r\n                // JSUtil.flag(\"method not appicable\");\r\n            }\r\n        }\r\n        return new JSReduction();\r\n    }\r\n\r\n    public JSAllReduction findAllReduction(JSTaskAtom task, JSState s, JSAllReduction red, JSListAxioms axioms) {\r\n        JSSubstitution alpha;\r\n        JSMethod met;\r\n        int base;\r\n        JSListIfThenElse list;\r\n        JSTasks newT;\r\n        JSTaskAtom tmet;\r\n        Vector allReductions;\r\n        boolean taskIsGround = task.isGround();\r\n        if (red.isDummy()) {\r\n            base = 0;\r\n        } else {\r\n            base = this.indexOf(red.selectedMethod()) + 1;\r\n        }\r\n        for (int i = base; i < this.size(); i++) {\r\n            met = (JSMethod) this.elementAt(i);\r\n            tmet = met.head();\r\n            if (!taskIsGround)\r\n                tmet = tmet.standarizerTA();\r\n            alpha = tmet.matches(task);\r\n            if (!alpha.fail()) {\r\n                list = met.ifThenElseList();\r\n                if (!taskIsGround) {\r\n                    list = list.standarizerListIfTE();\r\n                }\r\n                allReductions = list.evalPrecAll(s, alpha, axioms);\r\n                if (!allReductions.isEmpty()) {\r\n                    JSJshopVars.VarCounter++;\r\n                    return new JSAllReduction(met, allReductions);\r\n                }\r\n            }\r\n        }\r\n        return new JSAllReduction();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSListMethodsTest0.java",
		"test_prompt": "// JSListMethodsTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSListMethods}.\n* It contains ten unit test cases for the {@link JSListMethods#findReduction(JSTaskAtom, JSState, JSReduction, JSListAxioms)} method.\n*/\nclass JSListMethodsTest0 {"
	},
	{
		"original_code": "// JSListMethods.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSListMethods extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    private String label;\r\n\r\n    JSListMethods() {\r\n        super();\r\n    }\r\n\r\n    public void print() {\r\n        JSMethod el;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            el = (JSMethod) this.elementAt(i);\r\n            el.print();\r\n        }\r\n    }\r\n\r\n    public JSReduction findReduction(JSTaskAtom task, JSState s, JSReduction red, JSListAxioms axioms) {\r\n        JSSubstitution alpha;\r\n        JSMethod met;\r\n        int base;\r\n        JSListIfThenElse list;\r\n        JSTasks newT;\r\n        JSTaskAtom tmet;\r\n        boolean taskIsGround = task.isGround();\r\n        //task.print();\r\n        //    JSUtil.flag(\"task being reduced\");\r\n        if (red.isDummy()) {\r\n            //JSUtil.flag(\"dummy\");\r\n            base = 0;\r\n        } else {\r\n            //JSUtil.flag(\"not dummy\");\r\n            base = this.indexOf(red.selectedMethod()) + 1;\r\n        }\r\n        for (int i = base; i < this.size(); i++) {\r\n            met = (JSMethod) this.elementAt(i);\r\n            //met.print();\r\n            //\t\tJSUtil.flag(\"<- evaluating method\");\r\n            tmet = met.head();\r\n            if (!taskIsGround) {\r\n                tmet = tmet.standarizerTA();\r\n            }\r\n            alpha = tmet.matches(task);\r\n            if (!alpha.fail()) {\r\n                //\t\t    JSUtil.flag(\"heads match\");\r\n                list = met.ifThenElseList();\r\n                if (!taskIsGround) {\r\n                    list = list.standarizerListIfTE();\r\n                }\r\n                newT = list.evalPrec(s, alpha, axioms);\r\n                if (!newT.fail()) {\r\n                    //JSUtil.flag(\"method appicable\");\r\n                    JSJshopVars.VarCounter++;\r\n                    return new JSReduction(met, newT);\r\n                }\r\n                // JSUtil.flag(\"method not appicable\");\r\n            }\r\n        }\r\n        return new JSReduction();\r\n    }\r\n\r\n    public JSAllReduction findAllReduction(JSTaskAtom task, JSState s, JSAllReduction red, JSListAxioms axioms) {\r\n        JSSubstitution alpha;\r\n        JSMethod met;\r\n        int base;\r\n        JSListIfThenElse list;\r\n        JSTasks newT;\r\n        JSTaskAtom tmet;\r\n        Vector allReductions;\r\n        boolean taskIsGround = task.isGround();\r\n        if (red.isDummy()) {\r\n            base = 0;\r\n        } else {\r\n            base = this.indexOf(red.selectedMethod()) + 1;\r\n        }\r\n        for (int i = base; i < this.size(); i++) {\r\n            met = (JSMethod) this.elementAt(i);\r\n            tmet = met.head();\r\n            if (!taskIsGround)\r\n                tmet = tmet.standarizerTA();\r\n            alpha = tmet.matches(task);\r\n            if (!alpha.fail()) {\r\n                list = met.ifThenElseList();\r\n                if (!taskIsGround) {\r\n                    list = list.standarizerListIfTE();\r\n                }\r\n                allReductions = list.evalPrecAll(s, alpha, axioms);\r\n                if (!allReductions.isEmpty()) {\r\n                    JSJshopVars.VarCounter++;\r\n                    return new JSAllReduction(met, allReductions);\r\n                }\r\n            }\r\n        }\r\n        return new JSAllReduction();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSListMethodsTest1.java",
		"test_prompt": "// JSListMethodsTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSListMethods}.\n* It contains ten unit test cases for the {@link JSListMethods#findAllReduction(JSTaskAtom, JSState, JSAllReduction, JSListAxioms)} method.\n*/\nclass JSListMethodsTest1 {"
	},
	{
		"original_code": "// JSListIfThenElse.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSListIfThenElse extends Vector {\r\n\r\n    JSListIfThenElse() {\r\n        super();\r\n    }\r\n\r\n    JSListIfThenElse(StreamTokenizer tokenizer) {\r\n        super();\r\n        String name;\r\n        JSPairIfThen pair;\r\n        int index = 1;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting method's IfThenElse list\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n            tokenizer.pushBack();\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting method definition\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                name = \"Part_\" + index;\r\n            } else {\r\n                tokenizer.pushBack();\r\n                name = JSUtil.readWord(tokenizer, \"Expecting name for the method if/then pair.\");\r\n                if (name.equals(\"%%%\")) {\r\n                    JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Invalid name for a method if/then pair.\");\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n            }\r\n            pair = new JSPairIfThen(tokenizer);\r\n            pair.setName(name);\r\n            this.addElement(pair);\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')'\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            index++;\r\n        }\r\n        tokenizer.pushBack();\r\n    }\r\n\r\n    public void print() {\r\n        JSPairIfThen el;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            el = (JSPairIfThen) this.elementAt(i);\r\n            el.print();\r\n        }\r\n    }\r\n\r\n    JSTasks evalPrec(JSState s, JSSubstitution alpha, JSListAxioms axioms) {\r\n        JSPairIfThen pair;\r\n        JSTasks then;\r\n        JSSubstitution beta;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairIfThen) this.elementAt(i);\r\n            beta = s.satisfies(pair.ifPart(), alpha, axioms);\r\n            if (!beta.fail()) {\r\n                //JSUtil.flag(\"****Success*****\");\r\n                //beta.print();\r\n                then = pair.thenPart();\r\n                return then.applySubstitutionTasks(beta);\r\n            }\r\n        }\r\n        then = new JSTasks();\r\n        then.makeFail();\r\n        //JSUtil.flag(\"Failure\");\r\n        return then;\r\n    }\r\n\r\n    Vector evalPrecAll(JSState s, JSSubstitution alpha, JSListAxioms axioms) {\r\n        JSPairIfThen pair;\r\n        JSTasks then;\r\n        JSListSubstitution beta;\r\n        Vector allReductions = new Vector();\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairIfThen) this.elementAt(i);\r\n            beta = s.satisfiesAll(pair.ifPart(), alpha, axioms);\r\n            if (!beta.fail()) {\r\n                if (JSJshopVars.flagLevel > 4) {\r\n                    JSUtil.print(\"Found an applicable method : \");\r\n                    JSUtil.println(pair.Name());\r\n                }\r\n                then = (JSTasks) pair.thenPart().clone();\r\n                for (int k = 0; k < beta.size(); k++) allReductions.addElement(then.applySubstitutionTasks((JSSubstitution) beta.elementAt(k)));\r\n                return allReductions;\r\n            }\r\n        }\r\n        return allReductions;\r\n    }\r\n\r\n    public JSListIfThenElse standarizerListIfTE() {\r\n        JSListIfThenElse newList = new JSListIfThenElse();\r\n        JSPairIfThen pair;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            pair = (JSPairIfThen) this.elementAt(i);\r\n            newList.addElement(pair.standarizerPIT());\r\n        }\r\n        return newList;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSListIfThenElseTest.java",
		"test_prompt": "// JSListIfThenElseTest.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSListIfThenElse}.\n* It contains ten unit test cases for the {@link JSListIfThenElse#standarizerListIfTE()} method.\n*/\nclass JSListIfThenElseTest {"
	},
	{
		"original_code": "// JSListSubstitution.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSListSubstitution extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    private String label;\r\n\r\n    JSListSubstitution() {\r\n        super();\r\n    }\r\n\r\n    public boolean fail() {\r\n        return (this.size() == 0);\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSSubstitution s1;\r\n        Enumeration s = elements();\r\n        while (s.hasMoreElements()) {\r\n            s1 = (JSSubstitution) s.nextElement();\r\n            if (s1 != null)\r\n                s1.print();\r\n        }\r\n        JSUtil.println(\")\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSListSubstitutionTest.java",
		"test_prompt": "// JSListSubstitutionTest.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSListSubstitution}.\n* It contains ten unit test cases for the {@link JSListSubstitution#fail()} method.\n*/\nclass JSListSubstitutionTest {"
	},
	{
		"original_code": "// JSAxiom.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSAxiom {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSPredicateForm head;\r\n\r\n    private JSListConjuncts tail;\r\n\r\n    private boolean notDummy;\r\n\r\n    JSAxiom(StreamTokenizer tokenizer) {\r\n        head = new JSPredicateForm(tokenizer);\r\n        tail = new JSListConjuncts(tokenizer);\r\n        notDummy = true;\r\n    }\r\n\r\n    JSAxiom() {\r\n        super();\r\n        notDummy = false;\r\n    }\r\n\r\n    public boolean notDummy() {\r\n        return notDummy;\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":- \");\r\n        head.print();\r\n        tail.print();\r\n        JSUtil.println(\")\");\r\n    }\r\n\r\n    public JSPredicateForm head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListConjuncts tail() {\r\n        return tail;\r\n    }\r\n\r\n    public JSAxiom standarizerAxiom() {\r\n        JSAxiom newAx = new JSAxiom();\r\n        JSPredicateForm ta = this.head();\r\n        JSListConjuncts listPs = this.tail();\r\n        newAx.notDummy = this.notDummy();\r\n        newAx.head = ta.standarizerPredicateForm();\r\n        newAx.tail = listPs.standarizerListConjuncts();\r\n        return newAx;\r\n    }\r\n\r\n    public void setName(String mName) {\r\n        JSListLogicalAtoms listAtom;\r\n        for (int i = 0; i < tail.size(); i++) {\r\n            listAtom = (JSListLogicalAtoms) tail.elementAt(i);\r\n            listAtom.setName(mName + listAtom.Name());\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSAxiomTest0.java",
		"test_prompt": "// JSAxiomTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSAxiom}.\n* It contains ten unit test cases for the {@link JSAxiom#notDummy()} method.\n*/\nclass JSAxiomTest0 {"
	},
	{
		"original_code": "// JSAxiom.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSAxiom {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSPredicateForm head;\r\n\r\n    private JSListConjuncts tail;\r\n\r\n    private boolean notDummy;\r\n\r\n    JSAxiom(StreamTokenizer tokenizer) {\r\n        head = new JSPredicateForm(tokenizer);\r\n        tail = new JSListConjuncts(tokenizer);\r\n        notDummy = true;\r\n    }\r\n\r\n    JSAxiom() {\r\n        super();\r\n        notDummy = false;\r\n    }\r\n\r\n    public boolean notDummy() {\r\n        return notDummy;\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":- \");\r\n        head.print();\r\n        tail.print();\r\n        JSUtil.println(\")\");\r\n    }\r\n\r\n    public JSPredicateForm head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListConjuncts tail() {\r\n        return tail;\r\n    }\r\n\r\n    public JSAxiom standarizerAxiom() {\r\n        JSAxiom newAx = new JSAxiom();\r\n        JSPredicateForm ta = this.head();\r\n        JSListConjuncts listPs = this.tail();\r\n        newAx.notDummy = this.notDummy();\r\n        newAx.head = ta.standarizerPredicateForm();\r\n        newAx.tail = listPs.standarizerListConjuncts();\r\n        return newAx;\r\n    }\r\n\r\n    public void setName(String mName) {\r\n        JSListLogicalAtoms listAtom;\r\n        for (int i = 0; i < tail.size(); i++) {\r\n            listAtom = (JSListLogicalAtoms) tail.elementAt(i);\r\n            listAtom.setName(mName + listAtom.Name());\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSAxiomTest1.java",
		"test_prompt": "// JSAxiomTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSAxiom}.\n* It contains ten unit test cases for the {@link JSAxiom#head()} method.\n*/\nclass JSAxiomTest1 {"
	},
	{
		"original_code": "// JSAxiom.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSAxiom {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSPredicateForm head;\r\n\r\n    private JSListConjuncts tail;\r\n\r\n    private boolean notDummy;\r\n\r\n    JSAxiom(StreamTokenizer tokenizer) {\r\n        head = new JSPredicateForm(tokenizer);\r\n        tail = new JSListConjuncts(tokenizer);\r\n        notDummy = true;\r\n    }\r\n\r\n    JSAxiom() {\r\n        super();\r\n        notDummy = false;\r\n    }\r\n\r\n    public boolean notDummy() {\r\n        return notDummy;\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":- \");\r\n        head.print();\r\n        tail.print();\r\n        JSUtil.println(\")\");\r\n    }\r\n\r\n    public JSPredicateForm head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListConjuncts tail() {\r\n        return tail;\r\n    }\r\n\r\n    public JSAxiom standarizerAxiom() {\r\n        JSAxiom newAx = new JSAxiom();\r\n        JSPredicateForm ta = this.head();\r\n        JSListConjuncts listPs = this.tail();\r\n        newAx.notDummy = this.notDummy();\r\n        newAx.head = ta.standarizerPredicateForm();\r\n        newAx.tail = listPs.standarizerListConjuncts();\r\n        return newAx;\r\n    }\r\n\r\n    public void setName(String mName) {\r\n        JSListLogicalAtoms listAtom;\r\n        for (int i = 0; i < tail.size(); i++) {\r\n            listAtom = (JSListLogicalAtoms) tail.elementAt(i);\r\n            listAtom.setName(mName + listAtom.Name());\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSAxiomTest2.java",
		"test_prompt": "// JSAxiomTest2.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSAxiom}.\n* It contains ten unit test cases for the {@link JSAxiom#tail()} method.\n*/\nclass JSAxiomTest2 {"
	},
	{
		"original_code": "// JSAxiom.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSAxiom {\r\n\r\n    /*==== instance variables ====*/\r\n    private JSPredicateForm head;\r\n\r\n    private JSListConjuncts tail;\r\n\r\n    private boolean notDummy;\r\n\r\n    JSAxiom(StreamTokenizer tokenizer) {\r\n        head = new JSPredicateForm(tokenizer);\r\n        tail = new JSListConjuncts(tokenizer);\r\n        notDummy = true;\r\n    }\r\n\r\n    JSAxiom() {\r\n        super();\r\n        notDummy = false;\r\n    }\r\n\r\n    public boolean notDummy() {\r\n        return notDummy;\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\":- \");\r\n        head.print();\r\n        tail.print();\r\n        JSUtil.println(\")\");\r\n    }\r\n\r\n    public JSPredicateForm head() {\r\n        return head;\r\n    }\r\n\r\n    public JSListConjuncts tail() {\r\n        return tail;\r\n    }\r\n\r\n    public JSAxiom standarizerAxiom() {\r\n        JSAxiom newAx = new JSAxiom();\r\n        JSPredicateForm ta = this.head();\r\n        JSListConjuncts listPs = this.tail();\r\n        newAx.notDummy = this.notDummy();\r\n        newAx.head = ta.standarizerPredicateForm();\r\n        newAx.tail = listPs.standarizerListConjuncts();\r\n        return newAx;\r\n    }\r\n\r\n    public void setName(String mName) {\r\n        JSListLogicalAtoms listAtom;\r\n        for (int i = 0; i < tail.size(); i++) {\r\n            listAtom = (JSListLogicalAtoms) tail.elementAt(i);\r\n            listAtom.setName(mName + listAtom.Name());\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSAxiomTest3.java",
		"test_prompt": "// JSAxiomTest3.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSAxiom}.\n* It contains ten unit test cases for the {@link JSAxiom#standarizerAxiom()} method.\n*/\nclass JSAxiomTest3 {"
	},
	{
		"original_code": "// JSPairPlanTSListNodes.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSPairPlanTSListNodes {\r\n\r\n    JSPairPlanTState planS;\r\n\r\n    Vector listNodes;\r\n\r\n    JSPairPlanTSListNodes() {\r\n        super();\r\n    }\r\n\r\n    JSPairPlanTSListNodes(JSPairPlanTState pS, Vector l) {\r\n        super();\r\n        planS = pS;\r\n        listNodes = l;\r\n    }\r\n\r\n    public JSPairPlanTState planS() {\r\n        return planS;\r\n    }\r\n\r\n    public Vector listNodes() {\r\n        return listNodes;\r\n    }\r\n\r\n    public void print() {\r\n        JSPairPlanTState pS = this.planS();\r\n        Vector l = this.listNodes();\r\n        JSJshopNode n;\r\n        pS.print();\r\n        JSUtil.println(\" \");\r\n        JSUtil.println(\"Here starts the tree\");\r\n        for (short i = 0; i < l.size(); i++) {\r\n            n = (JSJshopNode) l.elementAt(i);\r\n            n.print();\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPairPlanTSListNodesTest0.java",
		"test_prompt": "// JSPairPlanTSListNodesTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPairPlanTSListNodes}.\n* It contains ten unit test cases for the {@link JSPairPlanTSListNodes#planS()} method.\n*/\nclass JSPairPlanTSListNodesTest0 {"
	},
	{
		"original_code": "// JSPairPlanTSListNodes.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSPairPlanTSListNodes {\r\n\r\n    JSPairPlanTState planS;\r\n\r\n    Vector listNodes;\r\n\r\n    JSPairPlanTSListNodes() {\r\n        super();\r\n    }\r\n\r\n    JSPairPlanTSListNodes(JSPairPlanTState pS, Vector l) {\r\n        super();\r\n        planS = pS;\r\n        listNodes = l;\r\n    }\r\n\r\n    public JSPairPlanTState planS() {\r\n        return planS;\r\n    }\r\n\r\n    public Vector listNodes() {\r\n        return listNodes;\r\n    }\r\n\r\n    public void print() {\r\n        JSPairPlanTState pS = this.planS();\r\n        Vector l = this.listNodes();\r\n        JSJshopNode n;\r\n        pS.print();\r\n        JSUtil.println(\" \");\r\n        JSUtil.println(\"Here starts the tree\");\r\n        for (short i = 0; i < l.size(); i++) {\r\n            n = (JSJshopNode) l.elementAt(i);\r\n            n.print();\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPairPlanTSListNodesTest1.java",
		"test_prompt": "// JSPairPlanTSListNodesTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPairPlanTSListNodes}.\n* It contains ten unit test cases for the {@link JSPairPlanTSListNodes#listNodes()} method.\n*/\nclass JSPairPlanTSListNodesTest1 {"
	},
	{
		"original_code": "// JSJshopNode.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic final class JSJshopNode {\r\n\r\n    JSTaskAtom atom;\r\n\r\n    // should have been JSTasks\r\n    Vector children;\r\n\r\n    JSJshopNode() {\r\n        super();\r\n    }\r\n\r\n    JSJshopNode(JSTaskAtom a, Vector c) {\r\n        super();\r\n        atom = a;\r\n        children = c;\r\n    }\r\n\r\n    JSJshopNode(JSJshopNode rootNode, Vector listNodes) {\r\n        /* rootNode has the form\r\n               (task <listTasks>) where task is the root task.\r\n            listNodes has the form \r\n               ((task <listTasks>) .... (task <list Tasks>))\r\n           \r\n        */\r\n        super();\r\n        atom = rootNode.atom();\r\n        Vector childs = rootNode.children();\r\n        if (childs.isEmpty()) {\r\n            children = childs;\r\n            return;\r\n        }\r\n        JSTaskAtom ta;\r\n        JSJshopNode newNode;\r\n        JSJshopNode node_ta;\r\n        children = new Vector();\r\n        for (int i = 0; i < childs.size(); i++) {\r\n            ta = (JSTaskAtom) childs.elementAt(i);\r\n            newNode = ta.findInList(listNodes);\r\n            if (//success in finding a node\r\n            !newNode.children().isEmpty()) {\r\n                listNodes.removeElement(newNode);\r\n                node_ta = new JSJshopNode(newNode, listNodes);\r\n                children.addElement(node_ta);\r\n            } else {\r\n                children.addElement(newNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        JSTaskAtom a = this.atom();\r\n        JSJshopNode child;\r\n        Vector c = this.children();\r\n        if (c.size() > 0) {\r\n            JSUtil.print(a.toStr() + \" [\");\r\n        } else {\r\n            a.print();\r\n            JSUtil.flag(\"\");\r\n        }\r\n        for (short i = 0; i < c.size(); i++) {\r\n            child = (JSJshopNode) c.elementAt(i);\r\n            child.print();\r\n        }\r\n        if (c.size() > 0) {\r\n            JSUtil.flag(\"] \" + a.toStr());\r\n        }\r\n    }\r\n\r\n    public void print2() {\r\n        JSTaskAtom a = this.atom();\r\n        JSTasks child;\r\n        if (this.children.size() > 0) {\r\n            child = (JSTasks) this.children();\r\n            JSUtil.print(a.toStr() + \" [ \");\r\n            child.print();\r\n            JSUtil.println(\" ]\");\r\n        } else {\r\n            a.print();\r\n            JSUtil.println(\"\");\r\n        }\r\n    }\r\n\r\n    public JSTaskAtom atom() {\r\n        return atom;\r\n    }\r\n\r\n    public Vector children() {\r\n        return children;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSJshopNodeTest0.java",
		"test_prompt": "// JSJshopNodeTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSJshopNode}.\n* It contains ten unit test cases for the {@link JSJshopNode#atom()} method.\n*/\nclass JSJshopNodeTest0 {"
	},
	{
		"original_code": "// JSJshopNode.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic final class JSJshopNode {\r\n\r\n    JSTaskAtom atom;\r\n\r\n    // should have been JSTasks\r\n    Vector children;\r\n\r\n    JSJshopNode() {\r\n        super();\r\n    }\r\n\r\n    JSJshopNode(JSTaskAtom a, Vector c) {\r\n        super();\r\n        atom = a;\r\n        children = c;\r\n    }\r\n\r\n    JSJshopNode(JSJshopNode rootNode, Vector listNodes) {\r\n        /* rootNode has the form\r\n               (task <listTasks>) where task is the root task.\r\n            listNodes has the form \r\n               ((task <listTasks>) .... (task <list Tasks>))\r\n           \r\n        */\r\n        super();\r\n        atom = rootNode.atom();\r\n        Vector childs = rootNode.children();\r\n        if (childs.isEmpty()) {\r\n            children = childs;\r\n            return;\r\n        }\r\n        JSTaskAtom ta;\r\n        JSJshopNode newNode;\r\n        JSJshopNode node_ta;\r\n        children = new Vector();\r\n        for (int i = 0; i < childs.size(); i++) {\r\n            ta = (JSTaskAtom) childs.elementAt(i);\r\n            newNode = ta.findInList(listNodes);\r\n            if (//success in finding a node\r\n            !newNode.children().isEmpty()) {\r\n                listNodes.removeElement(newNode);\r\n                node_ta = new JSJshopNode(newNode, listNodes);\r\n                children.addElement(node_ta);\r\n            } else {\r\n                children.addElement(newNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void print() {\r\n        JSTaskAtom a = this.atom();\r\n        JSJshopNode child;\r\n        Vector c = this.children();\r\n        if (c.size() > 0) {\r\n            JSUtil.print(a.toStr() + \" [\");\r\n        } else {\r\n            a.print();\r\n            JSUtil.flag(\"\");\r\n        }\r\n        for (short i = 0; i < c.size(); i++) {\r\n            child = (JSJshopNode) c.elementAt(i);\r\n            child.print();\r\n        }\r\n        if (c.size() > 0) {\r\n            JSUtil.flag(\"] \" + a.toStr());\r\n        }\r\n    }\r\n\r\n    public void print2() {\r\n        JSTaskAtom a = this.atom();\r\n        JSTasks child;\r\n        if (this.children.size() > 0) {\r\n            child = (JSTasks) this.children();\r\n            JSUtil.print(a.toStr() + \" [ \");\r\n            child.print();\r\n            JSUtil.println(\" ]\");\r\n        } else {\r\n            a.print();\r\n            JSUtil.println(\"\");\r\n        }\r\n    }\r\n\r\n    public JSTaskAtom atom() {\r\n        return atom;\r\n    }\r\n\r\n    public Vector children() {\r\n        return children;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSJshopNodeTest1.java",
		"test_prompt": "// JSJshopNodeTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSJshopNode}.\n* It contains ten unit test cases for the {@link JSJshopNode#children()} method.\n*/\nclass JSJshopNodeTest1 {"
	},
	{
		"original_code": "// JSListAxioms.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSListAxioms extends Vector {\r\n\r\n    /*==== instance variables ====*/\r\n    private String label;\r\n\r\n    JSListAxioms() {\r\n        super();\r\n    }\r\n\r\n    public void print() {\r\n        JSAxiom el;\r\n        for (short i = 0; i < this.size(); i++) {\r\n            el = (JSAxiom) this.elementAt(i);\r\n            el.print();\r\n        }\r\n    }\r\n\r\n    public JSListSubstitution TheoremProver(JSListLogicalAtoms conds, JSState S, JSSubstitution alpha, boolean findall) {\r\n        JSSubstitution gamma, tetha, kappa;\r\n        JSListSubstitution answers, subanswers1, subanswers2;\r\n        JSPredicateForm e1;\r\n        JSTerm p1;\r\n        JSListLogicalAtoms Rest, conjunct, one;\r\n        JSListConjuncts TailAxiom;\r\n        JSAxiom axiom;\r\n        String str;\r\n        answers = new JSListSubstitution();\r\n        if (conds.size() == 0) {\r\n            answers.addElement(new JSSubstitution());\r\n            if (JSJshopVars.flagLevel > 5)\r\n                JSUtil.println(\"Returning successfully from find-satisfiers : No more goals to satisfy\");\r\n            return answers;\r\n        }\r\n        e1 = (JSPredicateForm) conds.elementAt(0);\r\n        Rest = conds.Cdr();\r\n        str = (String) e1.elementAt(0);\r\n        if (JSJshopVars.flagLevel > 6) {\r\n            JSUtil.println(\" \");\r\n            JSUtil.print(\"Searching satisfiers for\");\r\n            e1.applySubstitutionPF(alpha).print();\r\n        }\r\n        /**\r\n         * *****************************************************\r\n         */\r\n        /* If the first word is 'not' do the following             */\r\n        /*                                                       */\r\n        /**\r\n         * *****************************************************\r\n         */\r\n        if (str.equalsIgnoreCase(\"not\")) {\r\n            e1 = (JSPredicateForm) e1.elementAt(1);\r\n            one = new JSListLogicalAtoms();\r\n            one.addElement(e1);\r\n            subanswers1 = TheoremProver(one, S, alpha, false);\r\n            if (!subanswers1.fail()) {\r\n                if (JSJshopVars.flagLevel > 5)\r\n                    JSUtil.println(\"Returning failure from find-satisfiers: Can not find a satisfier\");\r\n                return answers;\r\n            } else\r\n                return TheoremProver(Rest, S, alpha, findall);\r\n        } else /**\r\n         * *****************************************************\r\n         */\r\n        /* If the first word is 'eval' do the following           */\r\n        /*                                                       */\r\n        /**\r\n         * *****************************************************\r\n         */\r\n        if (str.equalsIgnoreCase(\"call\")) {\r\n            p1 = ((JSTerm) e1.elementAt(1)).applySubstitutionT(alpha);\r\n            if (!p1.isGround()) {\r\n                if (JSJshopVars.flagLevel > 5)\r\n                    JSUtil.println(\"Returning failure from find-satisfiers: Can not find a satisfier\");\r\n                return answers;\r\n            }\r\n            JSTerm t = p1.call();\r\n            if (t.size() == 0) {\r\n                if (JSJshopVars.flagLevel > 5)\r\n                    JSUtil.println(\"Returning failure from find-satisfiers: Can not find a satisfier\");\r\n                return answers;\r\n            } else\r\n                return TheoremProver(Rest, S, alpha, findall);\r\n        }\r\n        /**\r\n         * *****************************************************\r\n         */\r\n        /* Else do the following             */\r\n        /*                                                       */\r\n        /**\r\n         * *****************************************************\r\n         */\r\n        subanswers1 = S.satisfiesTAm(e1, alpha);\r\n        if (!subanswers1.fail()) {\r\n            for (int i = 0; i < subanswers1.size(); i++) {\r\n                /* tetha= (JSSubstitution)alpha.clone();\r\n            tetha.addElements((JSSubstitution)subanswers1.elementAt(i)); */\r\n                tetha = (JSSubstitution) ((JSSubstitution) subanswers1.elementAt(i)).clone();\r\n                tetha.addElements((JSSubstitution) alpha.clone());\r\n                subanswers2 = TheoremProver(Rest, S, tetha, findall);\r\n                if (!subanswers2.fail())\r\n                    for (int j = 0; j < subanswers2.size(); j++) {\r\n                        /*  kappa= (JSSubstitution)((JSSubstitution)subanswers1.elementAt(i)).clone();\r\n                   kappa.addElements((JSSubstitution)subanswers2.elementAt(j));*/\r\n                        kappa = (JSSubstitution) ((JSSubstitution) subanswers2.elementAt(j)).clone();\r\n                        kappa.addElements((JSSubstitution) subanswers1.elementAt(i));\r\n                        answers.addElement(kappa);\r\n                        if ((answers.size() == 1) && (!findall))\r\n                            return answers;\r\n                    }\r\n            }\r\n        }\r\n        for (int i = 0; i < this.size(); i++) {\r\n            axiom = ((JSAxiom) this.elementAt(i)).standarizerAxiom();\r\n            gamma = axiom.head().matches(e1, alpha);\r\n            if (!gamma.fail()) {\r\n                if (JSJshopVars.flagLevel > 8) {\r\n                    JSUtil.println(\"Goal matches axiom:\");\r\n                    axiom.print();\r\n                }\r\n                JSJshopVars.VarCounter++;\r\n                TailAxiom = (JSListConjuncts) axiom.tail().clone();\r\n                for (int k = 0; k < TailAxiom.size(); k++) {\r\n                    conjunct = (JSListLogicalAtoms) TailAxiom.elementAt(k);\r\n                    conjunct.addElements(Rest);\r\n                    /* tetha= (JSSubstitution)alpha.clone();\r\n                tetha.addElements(gamma);*/\r\n                    tetha = (JSSubstitution) gamma.clone();\r\n                    tetha.addElements(alpha);\r\n                    subanswers2 = TheoremProver(conjunct, S, tetha, findall);\r\n                    if (!subanswers2.fail()) {\r\n                        for (int j = 0; j < subanswers2.size(); j++) {\r\n                            /*  kappa= (JSSubstitution)gamma.clone();\r\n                     kappa.addElements((JSSubstitution)subanswers2.elementAt(j));*/\r\n                            kappa = (JSSubstitution) ((JSSubstitution) subanswers2.elementAt(j)).clone();\r\n                            kappa.addElements((JSSubstitution) gamma.clone());\r\n                            answers.addElement(kappa);\r\n                            if ((answers.size() == 0) && (!findall))\r\n                                return answers;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (JSJshopVars.flagLevel > 5)\r\n            JSUtil.println(\"Returning failure from find-satisfiers: Can not find a satisfier\");\r\n        return answers;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSListAxiomsTest.java",
		"test_prompt": "// JSListAxiomsTest.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSListAxioms}.\n* It contains ten unit test cases for the {@link JSListAxioms#TheoremProver(JSListLogicalAtoms, JSState, JSSubstitution, boolean)} method.\n*/\nclass JSListAxiomsTest {"
	},
	{
		"original_code": "// JSReduction.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSReduction {\r\n\r\n    private JSMethod selectedMethod;\r\n\r\n    private JSTasks reduction;\r\n\r\n    JSReduction() {\r\n        super();\r\n        selectedMethod = new JSMethod();\r\n        reduction = new JSTasks();\r\n    }\r\n\r\n    JSReduction(JSMethod met, JSTasks red) {\r\n        super();\r\n        selectedMethod = met;\r\n        reduction = red;\r\n    }\r\n\r\n    public JSMethod selectedMethod() {\r\n        return selectedMethod;\r\n    }\r\n\r\n    public JSTasks reduction() {\r\n        return reduction;\r\n    }\r\n\r\n    public boolean isDummy() {\r\n        JSMethod met = this.selectedMethod();\r\n        return !met.notDummy();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSReductionTest0.java",
		"test_prompt": "// JSReductionTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSReduction}.\n* It contains ten unit test cases for the {@link JSReduction#selectedMethod()} method.\n*/\nclass JSReductionTest0 {"
	},
	{
		"original_code": "// JSReduction.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSReduction {\r\n\r\n    private JSMethod selectedMethod;\r\n\r\n    private JSTasks reduction;\r\n\r\n    JSReduction() {\r\n        super();\r\n        selectedMethod = new JSMethod();\r\n        reduction = new JSTasks();\r\n    }\r\n\r\n    JSReduction(JSMethod met, JSTasks red) {\r\n        super();\r\n        selectedMethod = met;\r\n        reduction = red;\r\n    }\r\n\r\n    public JSMethod selectedMethod() {\r\n        return selectedMethod;\r\n    }\r\n\r\n    public JSTasks reduction() {\r\n        return reduction;\r\n    }\r\n\r\n    public boolean isDummy() {\r\n        JSMethod met = this.selectedMethod();\r\n        return !met.notDummy();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSReductionTest1.java",
		"test_prompt": "// JSReductionTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSReduction}.\n* It contains ten unit test cases for the {@link JSReduction#reduction()} method.\n*/\nclass JSReductionTest1 {"
	},
	{
		"original_code": "// JSReduction.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSReduction {\r\n\r\n    private JSMethod selectedMethod;\r\n\r\n    private JSTasks reduction;\r\n\r\n    JSReduction() {\r\n        super();\r\n        selectedMethod = new JSMethod();\r\n        reduction = new JSTasks();\r\n    }\r\n\r\n    JSReduction(JSMethod met, JSTasks red) {\r\n        super();\r\n        selectedMethod = met;\r\n        reduction = red;\r\n    }\r\n\r\n    public JSMethod selectedMethod() {\r\n        return selectedMethod;\r\n    }\r\n\r\n    public JSTasks reduction() {\r\n        return reduction;\r\n    }\r\n\r\n    public boolean isDummy() {\r\n        JSMethod met = this.selectedMethod();\r\n        return !met.notDummy();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSReductionTest2.java",
		"test_prompt": "// JSReductionTest2.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSReduction}.\n* It contains ten unit test cases for the {@link JSReduction#isDummy()} method.\n*/\nclass JSReductionTest2 {"
	},
	{
		"original_code": "// JSListLogicalAtoms.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\n\npublic class JSListLogicalAtoms extends Vector {\n\n    /*==== instance variables ====*/\n    private String label = new String();\n\n    private boolean varlist;\n\n    private String name = \"\";\n\n    JSListLogicalAtoms() {\n        super();\n        label = \"\";\n        varlist = false;\n    }\n\n    JSListLogicalAtoms(StreamTokenizer tokenizer) {\n        // (<PredicateForm>...<PredicateForm>)\n        // Example: ((has-money ?person ?old))\n        super();\n        JSPredicateForm ta;\n        label = \"\";\n        varlist = false;\n        if (!JSUtil.readToken(tokenizer, \"ListLogicalAtoms\"))\n            //return;\n            throw new JSParserError();\n        /*  If this is an empty list \"nil\"    */\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\n            return;\n        /*  If this is a variable list \" ?x\"    */\n        if (tokenizer.ttype == JSJshopVars.interrogation) {\n            tokenizer.pushBack();\n            JSTerm t = new JSTerm(tokenizer);\n            if (t.isEmpty())\n                //return;\n                throw new JSParserError();\n            this.addElement(t);\n            varlist = true;\n            return;\n        }\n        /* If this is a regular list of atoms */\n        tokenizer.pushBack();\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"ListLogicalAtoms expecting (\"))\n            //return;\n            throw new JSParserError();\n        if (!JSUtil.readToken(tokenizer, \"ListLogicalAtoms\"))\n            //return;\n            throw new JSParserError();\n        // Added 11/28/00\n        if (tokenizer.ttype == JSJshopVars.colon) {\n            if (!JSUtil.readToken(tokenizer, \" 'first' expected\"))\n                //return;  //Error:  There is nothing after :\n                throw new JSParserError();\n            if ((tokenizer.ttype != tokenizer.TT_WORD) || (!tokenizer.sval.equalsIgnoreCase(\"first\"))) {\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting 'first'\");\n                //return;  // Error: After colon there must be a word and it must be \"first\"\n                throw new JSParserError();\n            }\n            label = tokenizer.sval;\n            if (!JSUtil.readToken(tokenizer, \"Expecting list of logical atoms\"))\n                //return; // Error: There must be something after \"first\"\n                throw new JSParserError();\n        }\n        //End of additions\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\n            tokenizer.pushBack();\n            ta = new JSPredicateForm(tokenizer);\n            if (ta.size() != 0) {\n                this.addElement(ta);\n            } else {\n                JSUtil.flag(\"Line : \" + tokenizer.lineno() + \" ListLogicalAtoms: unexpected Atom\");\n                //return;\n                throw new JSParserError();\n            }\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')' \"))\n                //return;\n                throw new JSParserError();\n        }\n        //parsed successfully\n    }\n\n    public void addElements(JSListLogicalAtoms l) {\n        for (short i = 0; i < l.size(); i++) {\n            this.addElement(l.elementAt(i));\n        }\n    }\n\n    public void print() {\n        if (varlist) {\n            ((JSTerm) this.elementAt(0)).print();\n            return;\n        }\n        JSUtil.print(\"(\");\n        JSPredicateForm el;\n        Enumeration e = elements();\n        while (e.hasMoreElements()) {\n            el = (JSPredicateForm) e.nextElement();\n            if (el != null)\n                el.print();\n        }\n        JSUtil.println(\")  \");\n    }\n\n    public JSListLogicalAtoms standarizerListLogicalAtoms() {\n        JSListLogicalAtoms newTs = new JSListLogicalAtoms();\n        JSTerm vart;\n        if (varlist) {\n            vart = (JSTerm) this.elementAt(0);\n            newTs.addElement(vart.standardizerTerm());\n            newTs.varlist = true;\n            return newTs;\n        }\n        JSPredicateForm t;\n        for (short i = 0; i < this.size(); i++) {\n            t = (JSPredicateForm) this.elementAt(i);\n            newTs.addElement(t.standarizerPredicateForm());\n        }\n        return newTs;\n    }\n\n    public JSListLogicalAtoms applySubstitutionListLogicalAtoms(JSSubstitution alpha) {\n        JSListLogicalAtoms nt = new JSListLogicalAtoms();\n        JSPredicateForm ti;\n        JSPredicateForm nti;\n        JSTerm t, newt;\n        /* if (JSJshopVars.flagLevel > 8) {\n     JSUtil.print(\"apply subs:\");\n    alpha.print();\n    JSUtil.print(\"On JSListLogicalAtoms:\");\n    this.print();\n    JSUtil.flag(\"stop\");\n    }*/\n        if (varlist) {\n            t = (JSTerm) this.elementAt(0);\n            newt = alpha.instance(t);\n            while (!newt.isEmpty()) {\n                if (!((String) newt.elementAt(0)).equals(\".\"))\n                    break;\n                ///nti=(JSPredicateForm)newt.elementAt(1);\n                nt.addElement(newt.elementAt(1));\n                newt = (JSTerm) newt.elementAt(2);\n            }\n            return nt;\n        }\n        for (short i = 0; i < this.size(); i++) {\n            ti = (JSPredicateForm) this.elementAt(i);\n            //if (JSJshopVars.flagLevel > 8)\n            //    ti.print();\n            nti = ti.applySubstitutionPF(alpha);\n            //  if (JSJshopVars.flagLevel > 8)\n            //       nti.print();\n            nt.addElement(nti);\n            /*  if (JSJshopVars.flagLevel > 8){\n                  nt.print();\n                  JSUtil.flag(\"<-- applyJSListLogicalAtoms\");\n            }*/\n        }\n        /*if (JSJshopVars.flagLevel > 8){\n        nt.print();\n        JSUtil.flag(\"<-- final applyTasks\");\n    }*/\n        return nt;\n    }\n\n    public JSListLogicalAtoms Cdr() {\n        JSListLogicalAtoms newLA = new JSListLogicalAtoms();\n        JSPredicateForm t;\n        // added\n        newLA.varlist = this.varlist;\n        if (this.varlist)\n            return newLA;\n        // additions end\n        for (short i = 1; i < this.size(); i++) {\n            t = (JSPredicateForm) this.elementAt(i);\n            newLA.addElement(t);\n        }\n        return newLA;\n    }\n\n    public String Label() {\n        return label;\n    }\n\n    public String Name() {\n        return name;\n    }\n\n    public void setName(String val) {\n        name = new String(val);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSListLogicalAtomsTest0.java",
		"test_prompt": "// JSListLogicalAtomsTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSListLogicalAtoms}.\n* It contains ten unit test cases for the {@link JSListLogicalAtoms#standarizerListLogicalAtoms()} method.\n*/\nclass JSListLogicalAtomsTest0 {"
	},
	{
		"original_code": "// JSListLogicalAtoms.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\n\npublic class JSListLogicalAtoms extends Vector {\n\n    /*==== instance variables ====*/\n    private String label = new String();\n\n    private boolean varlist;\n\n    private String name = \"\";\n\n    JSListLogicalAtoms() {\n        super();\n        label = \"\";\n        varlist = false;\n    }\n\n    JSListLogicalAtoms(StreamTokenizer tokenizer) {\n        // (<PredicateForm>...<PredicateForm>)\n        // Example: ((has-money ?person ?old))\n        super();\n        JSPredicateForm ta;\n        label = \"\";\n        varlist = false;\n        if (!JSUtil.readToken(tokenizer, \"ListLogicalAtoms\"))\n            //return;\n            throw new JSParserError();\n        /*  If this is an empty list \"nil\"    */\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\n            return;\n        /*  If this is a variable list \" ?x\"    */\n        if (tokenizer.ttype == JSJshopVars.interrogation) {\n            tokenizer.pushBack();\n            JSTerm t = new JSTerm(tokenizer);\n            if (t.isEmpty())\n                //return;\n                throw new JSParserError();\n            this.addElement(t);\n            varlist = true;\n            return;\n        }\n        /* If this is a regular list of atoms */\n        tokenizer.pushBack();\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"ListLogicalAtoms expecting (\"))\n            //return;\n            throw new JSParserError();\n        if (!JSUtil.readToken(tokenizer, \"ListLogicalAtoms\"))\n            //return;\n            throw new JSParserError();\n        // Added 11/28/00\n        if (tokenizer.ttype == JSJshopVars.colon) {\n            if (!JSUtil.readToken(tokenizer, \" 'first' expected\"))\n                //return;  //Error:  There is nothing after :\n                throw new JSParserError();\n            if ((tokenizer.ttype != tokenizer.TT_WORD) || (!tokenizer.sval.equalsIgnoreCase(\"first\"))) {\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting 'first'\");\n                //return;  // Error: After colon there must be a word and it must be \"first\"\n                throw new JSParserError();\n            }\n            label = tokenizer.sval;\n            if (!JSUtil.readToken(tokenizer, \"Expecting list of logical atoms\"))\n                //return; // Error: There must be something after \"first\"\n                throw new JSParserError();\n        }\n        //End of additions\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\n            tokenizer.pushBack();\n            ta = new JSPredicateForm(tokenizer);\n            if (ta.size() != 0) {\n                this.addElement(ta);\n            } else {\n                JSUtil.flag(\"Line : \" + tokenizer.lineno() + \" ListLogicalAtoms: unexpected Atom\");\n                //return;\n                throw new JSParserError();\n            }\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')' \"))\n                //return;\n                throw new JSParserError();\n        }\n        //parsed successfully\n    }\n\n    public void addElements(JSListLogicalAtoms l) {\n        for (short i = 0; i < l.size(); i++) {\n            this.addElement(l.elementAt(i));\n        }\n    }\n\n    public void print() {\n        if (varlist) {\n            ((JSTerm) this.elementAt(0)).print();\n            return;\n        }\n        JSUtil.print(\"(\");\n        JSPredicateForm el;\n        Enumeration e = elements();\n        while (e.hasMoreElements()) {\n            el = (JSPredicateForm) e.nextElement();\n            if (el != null)\n                el.print();\n        }\n        JSUtil.println(\")  \");\n    }\n\n    public JSListLogicalAtoms standarizerListLogicalAtoms() {\n        JSListLogicalAtoms newTs = new JSListLogicalAtoms();\n        JSTerm vart;\n        if (varlist) {\n            vart = (JSTerm) this.elementAt(0);\n            newTs.addElement(vart.standardizerTerm());\n            newTs.varlist = true;\n            return newTs;\n        }\n        JSPredicateForm t;\n        for (short i = 0; i < this.size(); i++) {\n            t = (JSPredicateForm) this.elementAt(i);\n            newTs.addElement(t.standarizerPredicateForm());\n        }\n        return newTs;\n    }\n\n    public JSListLogicalAtoms applySubstitutionListLogicalAtoms(JSSubstitution alpha) {\n        JSListLogicalAtoms nt = new JSListLogicalAtoms();\n        JSPredicateForm ti;\n        JSPredicateForm nti;\n        JSTerm t, newt;\n        /* if (JSJshopVars.flagLevel > 8) {\n     JSUtil.print(\"apply subs:\");\n    alpha.print();\n    JSUtil.print(\"On JSListLogicalAtoms:\");\n    this.print();\n    JSUtil.flag(\"stop\");\n    }*/\n        if (varlist) {\n            t = (JSTerm) this.elementAt(0);\n            newt = alpha.instance(t);\n            while (!newt.isEmpty()) {\n                if (!((String) newt.elementAt(0)).equals(\".\"))\n                    break;\n                ///nti=(JSPredicateForm)newt.elementAt(1);\n                nt.addElement(newt.elementAt(1));\n                newt = (JSTerm) newt.elementAt(2);\n            }\n            return nt;\n        }\n        for (short i = 0; i < this.size(); i++) {\n            ti = (JSPredicateForm) this.elementAt(i);\n            //if (JSJshopVars.flagLevel > 8)\n            //    ti.print();\n            nti = ti.applySubstitutionPF(alpha);\n            //  if (JSJshopVars.flagLevel > 8)\n            //       nti.print();\n            nt.addElement(nti);\n            /*  if (JSJshopVars.flagLevel > 8){\n                  nt.print();\n                  JSUtil.flag(\"<-- applyJSListLogicalAtoms\");\n            }*/\n        }\n        /*if (JSJshopVars.flagLevel > 8){\n        nt.print();\n        JSUtil.flag(\"<-- final applyTasks\");\n    }*/\n        return nt;\n    }\n\n    public JSListLogicalAtoms Cdr() {\n        JSListLogicalAtoms newLA = new JSListLogicalAtoms();\n        JSPredicateForm t;\n        // added\n        newLA.varlist = this.varlist;\n        if (this.varlist)\n            return newLA;\n        // additions end\n        for (short i = 1; i < this.size(); i++) {\n            t = (JSPredicateForm) this.elementAt(i);\n            newLA.addElement(t);\n        }\n        return newLA;\n    }\n\n    public String Label() {\n        return label;\n    }\n\n    public String Name() {\n        return name;\n    }\n\n    public void setName(String val) {\n        name = new String(val);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSListLogicalAtomsTest1.java",
		"test_prompt": "// JSListLogicalAtomsTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSListLogicalAtoms}.\n* It contains ten unit test cases for the {@link JSListLogicalAtoms#applySubstitutionListLogicalAtoms(JSSubstitution)} method.\n*/\nclass JSListLogicalAtomsTest1 {"
	},
	{
		"original_code": "// JSListLogicalAtoms.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\n\npublic class JSListLogicalAtoms extends Vector {\n\n    /*==== instance variables ====*/\n    private String label = new String();\n\n    private boolean varlist;\n\n    private String name = \"\";\n\n    JSListLogicalAtoms() {\n        super();\n        label = \"\";\n        varlist = false;\n    }\n\n    JSListLogicalAtoms(StreamTokenizer tokenizer) {\n        // (<PredicateForm>...<PredicateForm>)\n        // Example: ((has-money ?person ?old))\n        super();\n        JSPredicateForm ta;\n        label = \"\";\n        varlist = false;\n        if (!JSUtil.readToken(tokenizer, \"ListLogicalAtoms\"))\n            //return;\n            throw new JSParserError();\n        /*  If this is an empty list \"nil\"    */\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\n            return;\n        /*  If this is a variable list \" ?x\"    */\n        if (tokenizer.ttype == JSJshopVars.interrogation) {\n            tokenizer.pushBack();\n            JSTerm t = new JSTerm(tokenizer);\n            if (t.isEmpty())\n                //return;\n                throw new JSParserError();\n            this.addElement(t);\n            varlist = true;\n            return;\n        }\n        /* If this is a regular list of atoms */\n        tokenizer.pushBack();\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"ListLogicalAtoms expecting (\"))\n            //return;\n            throw new JSParserError();\n        if (!JSUtil.readToken(tokenizer, \"ListLogicalAtoms\"))\n            //return;\n            throw new JSParserError();\n        // Added 11/28/00\n        if (tokenizer.ttype == JSJshopVars.colon) {\n            if (!JSUtil.readToken(tokenizer, \" 'first' expected\"))\n                //return;  //Error:  There is nothing after :\n                throw new JSParserError();\n            if ((tokenizer.ttype != tokenizer.TT_WORD) || (!tokenizer.sval.equalsIgnoreCase(\"first\"))) {\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting 'first'\");\n                //return;  // Error: After colon there must be a word and it must be \"first\"\n                throw new JSParserError();\n            }\n            label = tokenizer.sval;\n            if (!JSUtil.readToken(tokenizer, \"Expecting list of logical atoms\"))\n                //return; // Error: There must be something after \"first\"\n                throw new JSParserError();\n        }\n        //End of additions\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\n            tokenizer.pushBack();\n            ta = new JSPredicateForm(tokenizer);\n            if (ta.size() != 0) {\n                this.addElement(ta);\n            } else {\n                JSUtil.flag(\"Line : \" + tokenizer.lineno() + \" ListLogicalAtoms: unexpected Atom\");\n                //return;\n                throw new JSParserError();\n            }\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')' \"))\n                //return;\n                throw new JSParserError();\n        }\n        //parsed successfully\n    }\n\n    public void addElements(JSListLogicalAtoms l) {\n        for (short i = 0; i < l.size(); i++) {\n            this.addElement(l.elementAt(i));\n        }\n    }\n\n    public void print() {\n        if (varlist) {\n            ((JSTerm) this.elementAt(0)).print();\n            return;\n        }\n        JSUtil.print(\"(\");\n        JSPredicateForm el;\n        Enumeration e = elements();\n        while (e.hasMoreElements()) {\n            el = (JSPredicateForm) e.nextElement();\n            if (el != null)\n                el.print();\n        }\n        JSUtil.println(\")  \");\n    }\n\n    public JSListLogicalAtoms standarizerListLogicalAtoms() {\n        JSListLogicalAtoms newTs = new JSListLogicalAtoms();\n        JSTerm vart;\n        if (varlist) {\n            vart = (JSTerm) this.elementAt(0);\n            newTs.addElement(vart.standardizerTerm());\n            newTs.varlist = true;\n            return newTs;\n        }\n        JSPredicateForm t;\n        for (short i = 0; i < this.size(); i++) {\n            t = (JSPredicateForm) this.elementAt(i);\n            newTs.addElement(t.standarizerPredicateForm());\n        }\n        return newTs;\n    }\n\n    public JSListLogicalAtoms applySubstitutionListLogicalAtoms(JSSubstitution alpha) {\n        JSListLogicalAtoms nt = new JSListLogicalAtoms();\n        JSPredicateForm ti;\n        JSPredicateForm nti;\n        JSTerm t, newt;\n        /* if (JSJshopVars.flagLevel > 8) {\n     JSUtil.print(\"apply subs:\");\n    alpha.print();\n    JSUtil.print(\"On JSListLogicalAtoms:\");\n    this.print();\n    JSUtil.flag(\"stop\");\n    }*/\n        if (varlist) {\n            t = (JSTerm) this.elementAt(0);\n            newt = alpha.instance(t);\n            while (!newt.isEmpty()) {\n                if (!((String) newt.elementAt(0)).equals(\".\"))\n                    break;\n                ///nti=(JSPredicateForm)newt.elementAt(1);\n                nt.addElement(newt.elementAt(1));\n                newt = (JSTerm) newt.elementAt(2);\n            }\n            return nt;\n        }\n        for (short i = 0; i < this.size(); i++) {\n            ti = (JSPredicateForm) this.elementAt(i);\n            //if (JSJshopVars.flagLevel > 8)\n            //    ti.print();\n            nti = ti.applySubstitutionPF(alpha);\n            //  if (JSJshopVars.flagLevel > 8)\n            //       nti.print();\n            nt.addElement(nti);\n            /*  if (JSJshopVars.flagLevel > 8){\n                  nt.print();\n                  JSUtil.flag(\"<-- applyJSListLogicalAtoms\");\n            }*/\n        }\n        /*if (JSJshopVars.flagLevel > 8){\n        nt.print();\n        JSUtil.flag(\"<-- final applyTasks\");\n    }*/\n        return nt;\n    }\n\n    public JSListLogicalAtoms Cdr() {\n        JSListLogicalAtoms newLA = new JSListLogicalAtoms();\n        JSPredicateForm t;\n        // added\n        newLA.varlist = this.varlist;\n        if (this.varlist)\n            return newLA;\n        // additions end\n        for (short i = 1; i < this.size(); i++) {\n            t = (JSPredicateForm) this.elementAt(i);\n            newLA.addElement(t);\n        }\n        return newLA;\n    }\n\n    public String Label() {\n        return label;\n    }\n\n    public String Name() {\n        return name;\n    }\n\n    public void setName(String val) {\n        name = new String(val);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSListLogicalAtomsTest2.java",
		"test_prompt": "// JSListLogicalAtomsTest2.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSListLogicalAtoms}.\n* It contains ten unit test cases for the {@link JSListLogicalAtoms#Cdr()} method.\n*/\nclass JSListLogicalAtomsTest2 {"
	},
	{
		"original_code": "// JSListLogicalAtoms.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\n\npublic class JSListLogicalAtoms extends Vector {\n\n    /*==== instance variables ====*/\n    private String label = new String();\n\n    private boolean varlist;\n\n    private String name = \"\";\n\n    JSListLogicalAtoms() {\n        super();\n        label = \"\";\n        varlist = false;\n    }\n\n    JSListLogicalAtoms(StreamTokenizer tokenizer) {\n        // (<PredicateForm>...<PredicateForm>)\n        // Example: ((has-money ?person ?old))\n        super();\n        JSPredicateForm ta;\n        label = \"\";\n        varlist = false;\n        if (!JSUtil.readToken(tokenizer, \"ListLogicalAtoms\"))\n            //return;\n            throw new JSParserError();\n        /*  If this is an empty list \"nil\"    */\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\n            return;\n        /*  If this is a variable list \" ?x\"    */\n        if (tokenizer.ttype == JSJshopVars.interrogation) {\n            tokenizer.pushBack();\n            JSTerm t = new JSTerm(tokenizer);\n            if (t.isEmpty())\n                //return;\n                throw new JSParserError();\n            this.addElement(t);\n            varlist = true;\n            return;\n        }\n        /* If this is a regular list of atoms */\n        tokenizer.pushBack();\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"ListLogicalAtoms expecting (\"))\n            //return;\n            throw new JSParserError();\n        if (!JSUtil.readToken(tokenizer, \"ListLogicalAtoms\"))\n            //return;\n            throw new JSParserError();\n        // Added 11/28/00\n        if (tokenizer.ttype == JSJshopVars.colon) {\n            if (!JSUtil.readToken(tokenizer, \" 'first' expected\"))\n                //return;  //Error:  There is nothing after :\n                throw new JSParserError();\n            if ((tokenizer.ttype != tokenizer.TT_WORD) || (!tokenizer.sval.equalsIgnoreCase(\"first\"))) {\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting 'first'\");\n                //return;  // Error: After colon there must be a word and it must be \"first\"\n                throw new JSParserError();\n            }\n            label = tokenizer.sval;\n            if (!JSUtil.readToken(tokenizer, \"Expecting list of logical atoms\"))\n                //return; // Error: There must be something after \"first\"\n                throw new JSParserError();\n        }\n        //End of additions\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\n            tokenizer.pushBack();\n            ta = new JSPredicateForm(tokenizer);\n            if (ta.size() != 0) {\n                this.addElement(ta);\n            } else {\n                JSUtil.flag(\"Line : \" + tokenizer.lineno() + \" ListLogicalAtoms: unexpected Atom\");\n                //return;\n                throw new JSParserError();\n            }\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')' \"))\n                //return;\n                throw new JSParserError();\n        }\n        //parsed successfully\n    }\n\n    public void addElements(JSListLogicalAtoms l) {\n        for (short i = 0; i < l.size(); i++) {\n            this.addElement(l.elementAt(i));\n        }\n    }\n\n    public void print() {\n        if (varlist) {\n            ((JSTerm) this.elementAt(0)).print();\n            return;\n        }\n        JSUtil.print(\"(\");\n        JSPredicateForm el;\n        Enumeration e = elements();\n        while (e.hasMoreElements()) {\n            el = (JSPredicateForm) e.nextElement();\n            if (el != null)\n                el.print();\n        }\n        JSUtil.println(\")  \");\n    }\n\n    public JSListLogicalAtoms standarizerListLogicalAtoms() {\n        JSListLogicalAtoms newTs = new JSListLogicalAtoms();\n        JSTerm vart;\n        if (varlist) {\n            vart = (JSTerm) this.elementAt(0);\n            newTs.addElement(vart.standardizerTerm());\n            newTs.varlist = true;\n            return newTs;\n        }\n        JSPredicateForm t;\n        for (short i = 0; i < this.size(); i++) {\n            t = (JSPredicateForm) this.elementAt(i);\n            newTs.addElement(t.standarizerPredicateForm());\n        }\n        return newTs;\n    }\n\n    public JSListLogicalAtoms applySubstitutionListLogicalAtoms(JSSubstitution alpha) {\n        JSListLogicalAtoms nt = new JSListLogicalAtoms();\n        JSPredicateForm ti;\n        JSPredicateForm nti;\n        JSTerm t, newt;\n        /* if (JSJshopVars.flagLevel > 8) {\n     JSUtil.print(\"apply subs:\");\n    alpha.print();\n    JSUtil.print(\"On JSListLogicalAtoms:\");\n    this.print();\n    JSUtil.flag(\"stop\");\n    }*/\n        if (varlist) {\n            t = (JSTerm) this.elementAt(0);\n            newt = alpha.instance(t);\n            while (!newt.isEmpty()) {\n                if (!((String) newt.elementAt(0)).equals(\".\"))\n                    break;\n                ///nti=(JSPredicateForm)newt.elementAt(1);\n                nt.addElement(newt.elementAt(1));\n                newt = (JSTerm) newt.elementAt(2);\n            }\n            return nt;\n        }\n        for (short i = 0; i < this.size(); i++) {\n            ti = (JSPredicateForm) this.elementAt(i);\n            //if (JSJshopVars.flagLevel > 8)\n            //    ti.print();\n            nti = ti.applySubstitutionPF(alpha);\n            //  if (JSJshopVars.flagLevel > 8)\n            //       nti.print();\n            nt.addElement(nti);\n            /*  if (JSJshopVars.flagLevel > 8){\n                  nt.print();\n                  JSUtil.flag(\"<-- applyJSListLogicalAtoms\");\n            }*/\n        }\n        /*if (JSJshopVars.flagLevel > 8){\n        nt.print();\n        JSUtil.flag(\"<-- final applyTasks\");\n    }*/\n        return nt;\n    }\n\n    public JSListLogicalAtoms Cdr() {\n        JSListLogicalAtoms newLA = new JSListLogicalAtoms();\n        JSPredicateForm t;\n        // added\n        newLA.varlist = this.varlist;\n        if (this.varlist)\n            return newLA;\n        // additions end\n        for (short i = 1; i < this.size(); i++) {\n            t = (JSPredicateForm) this.elementAt(i);\n            newLA.addElement(t);\n        }\n        return newLA;\n    }\n\n    public String Label() {\n        return label;\n    }\n\n    public String Name() {\n        return name;\n    }\n\n    public void setName(String val) {\n        name = new String(val);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSListLogicalAtomsTest3.java",
		"test_prompt": "// JSListLogicalAtomsTest3.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSListLogicalAtoms}.\n* It contains ten unit test cases for the {@link JSListLogicalAtoms#Label()} method.\n*/\nclass JSListLogicalAtomsTest3 {"
	},
	{
		"original_code": "// JSListLogicalAtoms.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\n\npublic class JSListLogicalAtoms extends Vector {\n\n    /*==== instance variables ====*/\n    private String label = new String();\n\n    private boolean varlist;\n\n    private String name = \"\";\n\n    JSListLogicalAtoms() {\n        super();\n        label = \"\";\n        varlist = false;\n    }\n\n    JSListLogicalAtoms(StreamTokenizer tokenizer) {\n        // (<PredicateForm>...<PredicateForm>)\n        // Example: ((has-money ?person ?old))\n        super();\n        JSPredicateForm ta;\n        label = \"\";\n        varlist = false;\n        if (!JSUtil.readToken(tokenizer, \"ListLogicalAtoms\"))\n            //return;\n            throw new JSParserError();\n        /*  If this is an empty list \"nil\"    */\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"nil\")))\n            return;\n        /*  If this is a variable list \" ?x\"    */\n        if (tokenizer.ttype == JSJshopVars.interrogation) {\n            tokenizer.pushBack();\n            JSTerm t = new JSTerm(tokenizer);\n            if (t.isEmpty())\n                //return;\n                throw new JSParserError();\n            this.addElement(t);\n            varlist = true;\n            return;\n        }\n        /* If this is a regular list of atoms */\n        tokenizer.pushBack();\n        if (!JSUtil.expectTokenType(JSJshopVars.leftPar, tokenizer, \"ListLogicalAtoms expecting (\"))\n            //return;\n            throw new JSParserError();\n        if (!JSUtil.readToken(tokenizer, \"ListLogicalAtoms\"))\n            //return;\n            throw new JSParserError();\n        // Added 11/28/00\n        if (tokenizer.ttype == JSJshopVars.colon) {\n            if (!JSUtil.readToken(tokenizer, \" 'first' expected\"))\n                //return;  //Error:  There is nothing after :\n                throw new JSParserError();\n            if ((tokenizer.ttype != tokenizer.TT_WORD) || (!tokenizer.sval.equalsIgnoreCase(\"first\"))) {\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting 'first'\");\n                //return;  // Error: After colon there must be a word and it must be \"first\"\n                throw new JSParserError();\n            }\n            label = tokenizer.sval;\n            if (!JSUtil.readToken(tokenizer, \"Expecting list of logical atoms\"))\n                //return; // Error: There must be something after \"first\"\n                throw new JSParserError();\n        }\n        //End of additions\n        while (tokenizer.ttype != JSJshopVars.rightPar) {\n            tokenizer.pushBack();\n            ta = new JSPredicateForm(tokenizer);\n            if (ta.size() != 0) {\n                this.addElement(ta);\n            } else {\n                JSUtil.flag(\"Line : \" + tokenizer.lineno() + \" ListLogicalAtoms: unexpected Atom\");\n                //return;\n                throw new JSParserError();\n            }\n            if (!JSUtil.readToken(tokenizer, \"Expecting ')' \"))\n                //return;\n                throw new JSParserError();\n        }\n        //parsed successfully\n    }\n\n    public void addElements(JSListLogicalAtoms l) {\n        for (short i = 0; i < l.size(); i++) {\n            this.addElement(l.elementAt(i));\n        }\n    }\n\n    public void print() {\n        if (varlist) {\n            ((JSTerm) this.elementAt(0)).print();\n            return;\n        }\n        JSUtil.print(\"(\");\n        JSPredicateForm el;\n        Enumeration e = elements();\n        while (e.hasMoreElements()) {\n            el = (JSPredicateForm) e.nextElement();\n            if (el != null)\n                el.print();\n        }\n        JSUtil.println(\")  \");\n    }\n\n    public JSListLogicalAtoms standarizerListLogicalAtoms() {\n        JSListLogicalAtoms newTs = new JSListLogicalAtoms();\n        JSTerm vart;\n        if (varlist) {\n            vart = (JSTerm) this.elementAt(0);\n            newTs.addElement(vart.standardizerTerm());\n            newTs.varlist = true;\n            return newTs;\n        }\n        JSPredicateForm t;\n        for (short i = 0; i < this.size(); i++) {\n            t = (JSPredicateForm) this.elementAt(i);\n            newTs.addElement(t.standarizerPredicateForm());\n        }\n        return newTs;\n    }\n\n    public JSListLogicalAtoms applySubstitutionListLogicalAtoms(JSSubstitution alpha) {\n        JSListLogicalAtoms nt = new JSListLogicalAtoms();\n        JSPredicateForm ti;\n        JSPredicateForm nti;\n        JSTerm t, newt;\n        /* if (JSJshopVars.flagLevel > 8) {\n     JSUtil.print(\"apply subs:\");\n    alpha.print();\n    JSUtil.print(\"On JSListLogicalAtoms:\");\n    this.print();\n    JSUtil.flag(\"stop\");\n    }*/\n        if (varlist) {\n            t = (JSTerm) this.elementAt(0);\n            newt = alpha.instance(t);\n            while (!newt.isEmpty()) {\n                if (!((String) newt.elementAt(0)).equals(\".\"))\n                    break;\n                ///nti=(JSPredicateForm)newt.elementAt(1);\n                nt.addElement(newt.elementAt(1));\n                newt = (JSTerm) newt.elementAt(2);\n            }\n            return nt;\n        }\n        for (short i = 0; i < this.size(); i++) {\n            ti = (JSPredicateForm) this.elementAt(i);\n            //if (JSJshopVars.flagLevel > 8)\n            //    ti.print();\n            nti = ti.applySubstitutionPF(alpha);\n            //  if (JSJshopVars.flagLevel > 8)\n            //       nti.print();\n            nt.addElement(nti);\n            /*  if (JSJshopVars.flagLevel > 8){\n                  nt.print();\n                  JSUtil.flag(\"<-- applyJSListLogicalAtoms\");\n            }*/\n        }\n        /*if (JSJshopVars.flagLevel > 8){\n        nt.print();\n        JSUtil.flag(\"<-- final applyTasks\");\n    }*/\n        return nt;\n    }\n\n    public JSListLogicalAtoms Cdr() {\n        JSListLogicalAtoms newLA = new JSListLogicalAtoms();\n        JSPredicateForm t;\n        // added\n        newLA.varlist = this.varlist;\n        if (this.varlist)\n            return newLA;\n        // additions end\n        for (short i = 1; i < this.size(); i++) {\n            t = (JSPredicateForm) this.elementAt(i);\n            newLA.addElement(t);\n        }\n        return newLA;\n    }\n\n    public String Label() {\n        return label;\n    }\n\n    public String Name() {\n        return name;\n    }\n\n    public void setName(String val) {\n        name = new String(val);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSListLogicalAtomsTest4.java",
		"test_prompt": "// JSListLogicalAtomsTest4.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSListLogicalAtoms}.\n* It contains ten unit test cases for the {@link JSListLogicalAtoms#Name()} method.\n*/\nclass JSListLogicalAtomsTest4 {"
	},
	{
		"original_code": "// JSPlan.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSPlan extends JSTasks {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isFailure;\r\n\r\n    Vector costs;\r\n\r\n    JSPlan() {\r\n        super();\r\n        isFailure = false;\r\n        costs = new Vector();\r\n    }\r\n\r\n    public void assignFailure() {\r\n        isFailure = true;\r\n    }\r\n\r\n    public boolean isFailure() {\r\n        return isFailure;\r\n    }\r\n\r\n    public void addElements(JSPlan pl) {\r\n        for (short i = 0; i < pl.size(); i++) {\r\n            this.addElement(pl.elementAt(i));\r\n            // Added in May 2\r\n            costs.addElement(pl.costs.elementAt(i));\r\n        }\r\n    }\r\n\r\n    public void printPlan() {\r\n        JSTaskAtom t;\r\n        JSUtil.print(\" ( \");\r\n        for (short i = 0; i < size(); i++) {\r\n            t = (JSTaskAtom) elementAt(i);\r\n            t.print();\r\n            // Added in May 2\r\n            JSUtil.print(\" \" + (String) costs.elementAt(i) + \" \");\r\n        }\r\n        JSUtil.println(\" ) \");\r\n    }\r\n\r\n    public void addWithCost(JSTaskAtom t, double cost) {\r\n        addElement(t);\r\n        costs.addElement(String.valueOf(cost));\r\n    }\r\n\r\n    public void insertWithCost(int place, JSTaskAtom t, double cost) {\r\n        insertElementAt(t, place);\r\n        costs.insertElementAt(String.valueOf(cost), place);\r\n    }\r\n\r\n    public double elementCost(int i) {\r\n        return Double.parseDouble((String) costs.elementAt(i));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPlanTest0.java",
		"test_prompt": "// JSPlanTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPlan}.\n* It contains ten unit test cases for the {@link JSPlan#isFailure()} method.\n*/\nclass JSPlanTest0 {"
	},
	{
		"original_code": "// JSPlan.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSPlan extends JSTasks {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isFailure;\r\n\r\n    Vector costs;\r\n\r\n    JSPlan() {\r\n        super();\r\n        isFailure = false;\r\n        costs = new Vector();\r\n    }\r\n\r\n    public void assignFailure() {\r\n        isFailure = true;\r\n    }\r\n\r\n    public boolean isFailure() {\r\n        return isFailure;\r\n    }\r\n\r\n    public void addElements(JSPlan pl) {\r\n        for (short i = 0; i < pl.size(); i++) {\r\n            this.addElement(pl.elementAt(i));\r\n            // Added in May 2\r\n            costs.addElement(pl.costs.elementAt(i));\r\n        }\r\n    }\r\n\r\n    public void printPlan() {\r\n        JSTaskAtom t;\r\n        JSUtil.print(\" ( \");\r\n        for (short i = 0; i < size(); i++) {\r\n            t = (JSTaskAtom) elementAt(i);\r\n            t.print();\r\n            // Added in May 2\r\n            JSUtil.print(\" \" + (String) costs.elementAt(i) + \" \");\r\n        }\r\n        JSUtil.println(\" ) \");\r\n    }\r\n\r\n    public void addWithCost(JSTaskAtom t, double cost) {\r\n        addElement(t);\r\n        costs.addElement(String.valueOf(cost));\r\n    }\r\n\r\n    public void insertWithCost(int place, JSTaskAtom t, double cost) {\r\n        insertElementAt(t, place);\r\n        costs.insertElementAt(String.valueOf(cost), place);\r\n    }\r\n\r\n    public double elementCost(int i) {\r\n        return Double.parseDouble((String) costs.elementAt(i));\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPlanTest1.java",
		"test_prompt": "// JSPlanTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPlan}.\n* It contains ten unit test cases for the {@link JSPlan#elementCost(int)} method.\n*/\nclass JSPlanTest1 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest0.java",
		"test_prompt": "// JSTermTest0.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#parseList(StreamTokenizer)} method.\n*/\nclass JSTermTest0 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest1.java",
		"test_prompt": "// JSTermTest1.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#cloneT()} method.\n*/\nclass JSTermTest1 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest2.java",
		"test_prompt": "// JSTermTest2.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#applySubstitutionT(JSSubstitution)} method.\n*/\nclass JSTermTest2 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest3.java",
		"test_prompt": "// JSTermTest3.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#matches(JSTerm)} method.\n*/\nclass JSTermTest3 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest4.java",
		"test_prompt": "// JSTermTest4.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#matches(JSTerm, JSSubstitution)} method.\n*/\nclass JSTermTest4 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest5.java",
		"test_prompt": "// JSTermTest5.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#equals(JSTerm)} method.\n*/\nclass JSTermTest5 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest6.java",
		"test_prompt": "// JSTermTest6.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#isVariable()} method.\n*/\nclass JSTermTest6 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest7.java",
		"test_prompt": "// JSTermTest7.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#isConstant()} method.\n*/\nclass JSTermTest7 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest8.java",
		"test_prompt": "// JSTermTest8.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#isFunction()} method.\n*/\nclass JSTermTest8 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest9.java",
		"test_prompt": "// JSTermTest9.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#isEval()} method.\n*/\nclass JSTermTest9 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest10.java",
		"test_prompt": "// JSTermTest10.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#toStr()} method.\n*/\nclass JSTermTest10 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest11.java",
		"test_prompt": "// JSTermTest11.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#isGround()} method.\n*/\nclass JSTermTest11 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest12.java",
		"test_prompt": "// JSTermTest12.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#standardizerTerm()} method.\n*/\nclass JSTermTest12 {"
	},
	{
		"original_code": "// JSTerm.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class JSTerm extends JSPredicateForm {\r\n\r\n    /*==== instance variables ====*/\r\n    private boolean isVariable;\r\n\r\n    private boolean isConstant;\r\n\r\n    private boolean isFunction;\r\n\r\n    private boolean isEval;\r\n\r\n    //private boolean isNumber;//isNumber -> isConstant\r\n    JSTerm() {\r\n        super();\r\n    }\r\n\r\n    JSTerm(StreamTokenizer tokenizer) {\r\n        // (<task-name> <term1> ... <termN>)\r\n        super();\r\n        isEval = false;\r\n        int ival;\r\n        double dval;\r\n        String varname;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting variable name in term\"))\r\n                    // return;\r\n                    throw new JSParserError();\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting variable name in term\");\r\n                this.addElement(\"?\" + varname);\r\n                isVariable = true;\r\n                isConstant = false;\r\n                isFunction = false;\r\n                // success\r\n                return;\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.percent) {\r\n                if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \" Expecting word as term\"))\r\n                    //return;\r\n                    throw new JSParserError();\r\n                this.addElement(\"%\" + tokenizer.sval);\r\n            } else if (tokenizer.ttype == tokenizer.TT_NUMBER)\r\n                this.addElement(new Double(tokenizer.nval).toString());\r\n            else if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                tokenizer.pushBack();\r\n                varname = JSUtil.readWord(tokenizer, \"Expecting constant symbol as term\");\r\n                this.addElement(varname);\r\n            } else {\r\n                JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            isVariable = false;\r\n            isConstant = true;\r\n            isFunction = false;\r\n            // success\r\n            return;\r\n        }\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n        if (tokenizer.ttype != JSJshopVars.leftPar) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expected (\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"call\"))) {\r\n            isEval = true;\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n        }\r\n        if ((tokenizer.ttype == tokenizer.TT_WORD) && (tokenizer.sval.equalsIgnoreCase(\"list\"))) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                this.addElement(\"nil\");\r\n                makeConstant();\r\n                return;\r\n            }\r\n            tokenizer.pushBack();\r\n            this.addElement(\".\");\r\n            this.addElement(new JSTerm(tokenizer));\r\n            this.addElement(parseList(tokenizer));\r\n            return;\r\n        }\r\n        if (tokenizer.ttype == JSJshopVars.lessT) {\r\n            if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                //return;\r\n                throw new JSParserError();\r\n            }\r\n            if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                this.addElement(\"<=\");\r\n            } else {\r\n                this.addElement(\"<\");\r\n                tokenizer.pushBack();\r\n            }\r\n        } else {\r\n            if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                if (!JSUtil.readToken(tokenizer, \"Expecting Term\")) {\r\n                    //return;\r\n                    throw new JSParserError();\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    this.addElement(\">=\");\r\n                } else {\r\n                    this.addElement(\">\");\r\n                    tokenizer.pushBack();\r\n                }\r\n            } else {\r\n                if (tokenizer.ttype == JSJshopVars.plus || tokenizer.ttype == JSJshopVars.minus || tokenizer.ttype == JSJshopVars.slash || tokenizer.ttype == JSJshopVars.astherisk)\r\n                    this.addElement(JSUtil.stringTokenizer(tokenizer));\r\n                else {\r\n                    if (tokenizer.ttype != tokenizer.TT_WORD) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    tokenizer.pushBack();\r\n                    String w = JSUtil.readWord(tokenizer, \"JSTerm\");\r\n                    if (w.equals(\"%%%\")) {\r\n                        JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Term expected\");\r\n                        //return;\r\n                        throw new JSParserError();\r\n                    }\r\n                    this.addElement(w);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            tokenizer.nextToken();\r\n            while (tokenizer.ttype != JSJshopVars.rightPar) {\r\n                tokenizer.pushBack();\r\n                this.addElement(new JSTerm(tokenizer));\r\n                tokenizer.nextToken();\r\n            }\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"JSTerm: Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public JSTerm parseList(StreamTokenizer tokenizer) {\r\n        JSTerm t = new JSTerm();\r\n        JSTerm cdr, r;\r\n        if (!JSUtil.readToken(tokenizer, \"Expecting elements of the list\"))\r\n            //return new JSTerm();\r\n            throw new JSParserError();\r\n        if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n            t.addElement(\"nil\");\r\n            t.makeConstant();\r\n            return t;\r\n        }\r\n        //   if (tokenizer.ttype == tokenizer.TT_WORD && tokenizer.sval.equals(\".\")) {\r\n        if (tokenizer.ttype == JSJshopVars.dot) {\r\n            cdr = new JSTerm(tokenizer);\r\n            if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for term.\"))\r\n                //return new JSTerm();\r\n                throw new JSParserError();\r\n            if (cdr.isVariable || ((String) (cdr.elementAt(0))).equalsIgnoreCase(\"nil\") || ((String) (cdr.elementAt(0))).equals(\".\"))\r\n                return cdr;\r\n            t.addElement(\".\");\r\n            t.addElement(cdr);\r\n            r = new JSTerm();\r\n            r.addElement(\"nil\");\r\n            r.makeConstant();\r\n            t.addElement(r);\r\n            return t;\r\n        }\r\n        tokenizer.pushBack();\r\n        t.makeFunction();\r\n        t.addElement(\".\");\r\n        t.addElement(new JSTerm(tokenizer));\r\n        t.addElement(parseList(tokenizer));\r\n        return t;\r\n    }\r\n\r\n    private void printList(JSTerm t) {\r\n        String str = \"nil\";\r\n        JSTerm tt;\r\n        if (str.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        if (t.isVariable) {\r\n            JSUtil.print(\" . \");\r\n            t.print();\r\n            JSUtil.print(\") \");\r\n            return;\r\n        }\r\n        tt = (JSTerm) t.elementAt(1);\r\n        tt.print();\r\n        JSUtil.print(\" \");\r\n        tt = (JSTerm) t.elementAt(2);\r\n        printList(tt);\r\n    }\r\n\r\n    public void print() {\r\n        if (this.isVariable || this.isConstant) {\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n        } else {\r\n            JSUtil.print(\"(\");\r\n            if (this.elementAt(0).equals(\".\")) {\r\n                JSUtil.print(\"list \");\r\n                printList(this);\r\n                return;\r\n            }\r\n            if (this.isEval)\r\n                JSUtil.print(\"call \");\r\n            JSUtil.print(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                el.print();\r\n            }\r\n            JSUtil.print(\")\");\r\n        }\r\n    }\r\n\r\n    public JSTerm cloneT() {\r\n        JSTerm nt = new JSTerm();\r\n        // Added 11/29/2000\r\n        nt.isEval = this.isEval;\r\n        // Additions end\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.cloneT());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    public JSTerm applySubstitutionT(JSSubstitution alpha) {\r\n        if (this.isConstant()) {\r\n            return this.cloneT();\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            return nt.cloneT();\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n         this.print();*/\r\n        //JSUtil.flagPlanning(\"<-- applySubstitutionT\");\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        nt.makeFunction();\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            /* if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n                    nt.print();\r\n            JSUtil.flagPlanning(\"<--\");*/\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.applySubstitutionT(alpha));\r\n        }\r\n        /*if (JSJshopVars.flagLevel > 8 && JSJshopVars.flagPlanning )\r\n             nt.print();\r\n    JSUtil.flagPlanning(\"<-- final\");*/\r\n        return nt;\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t) /* t is a ground JSJSTerm*/\r\n    {\r\n        return matches(t, new JSSubstitution());\r\n    }\r\n\r\n    public JSSubstitution matches(JSTerm t, JSSubstitution alpha) /* t is a ground JSTerm*/\r\n    {\r\n        JSSubstitution beta = new JSSubstitution();\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                //modified 22/01\r\n                return t.matches(this, alpha);\r\n            }\r\n            if (!this.equals(t)) {\r\n                beta.assignFailure();\r\n            }\r\n            return beta;\r\n        }\r\n        if (this.isVariable()) {\r\n            JSTerm nt = alpha.instance(this);\r\n            if (!nt.equals(this)) {\r\n                return nt.matches(t, alpha);\r\n            }\r\n            beta.addElement(new JSPairVarTerm(this, t));\r\n            return beta;\r\n        }\r\n        // Added 22/01\r\n        if (t.isVariable)\r\n            return t.matches(this);\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        if (!functor.equalsIgnoreCase((String) t.elementAt(0))) {\r\n            beta.assignFailure();\r\n            return beta;\r\n        }\r\n        JSTerm ti;\r\n        JSSubstitution gama = new JSSubstitution();\r\n        JSSubstitution newAlpha = (JSSubstitution) alpha.clone();\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.equals(t.elementAt(i))) {\r\n                gama = ti.matches((JSTerm) t.elementAt(i), newAlpha);\r\n                if (gama.fail()) {\r\n                    gama.assignFailure();\r\n                    return gama;\r\n                }\r\n                beta.addElements(gama);\r\n                newAlpha.addElements(gama);\r\n            }\r\n        }\r\n        return beta;\r\n    }\r\n\r\n    public boolean equals(JSTerm t) /* t is not necessarily a ground JSTerm*/\r\n    {\r\n        /* if (JSJshopVars.flagLevel > 8 ){\r\n        JSUtil.print(\"JSTerm:\");\r\n        this.print();\r\n        JSUtil.print(\" equals: \");\r\n        t.print();\r\n    }*/\r\n        // JSUtil.flag10(\"?\");\r\n        if (this.isConstant()) {\r\n            if (!t.isConstant()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (this.isVariable()) {\r\n            if (!t.isVariable()) {\r\n                return false;\r\n            }\r\n            String name = (String) this.elementAt(0);\r\n            String name1 = (String) t.elementAt(0);\r\n            return name.equalsIgnoreCase(name1);\r\n        }\r\n        if (!t.isFunction()) {\r\n            // this is compound\r\n            return false;\r\n        }\r\n        if (this.size() != t.size()) {\r\n            return false;\r\n        }\r\n        String functor = (String) this.elementAt(0);\r\n        String functor1 = (String) t.elementAt(0);\r\n        if (!functor.equalsIgnoreCase(functor1)) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        JSTerm oti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            oti = (JSTerm) t.elementAt(i);\r\n            if (!ti.equals(oti)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean isVariable() {\r\n        return isVariable;\r\n    }\r\n\r\n    public boolean isConstant() {\r\n        return isConstant;\r\n    }\r\n\r\n    public boolean isFunction() {\r\n        return isFunction;\r\n    }\r\n\r\n    public boolean isEval() {\r\n        return isEval;\r\n    }\r\n\r\n    public void makeFunction() {\r\n        isVariable = false;\r\n        isConstant = false;\r\n        isFunction = true;\r\n    }\r\n\r\n    public void makeVariable() {\r\n        isVariable = true;\r\n        isConstant = false;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeConstant() {\r\n        isVariable = false;\r\n        isConstant = true;\r\n        isFunction = false;\r\n    }\r\n\r\n    public void makeEval(boolean evaluable) {\r\n        isEval = evaluable;\r\n    }\r\n\r\n    public StringBuffer toStr() {\r\n        StringBuffer res = new StringBuffer();\r\n        if (this.isVariable || this.isConstant) {\r\n            res.append(this.elementAt(0) + \" \");\r\n        } else {\r\n            res.append(\"(\");\r\n            res.append(this.elementAt(0) + \" \");\r\n            JSTerm el;\r\n            for (short i = 1; i < this.size(); i++) {\r\n                el = (JSTerm) this.elementAt(i);\r\n                res.append(el.toStr());\r\n            }\r\n            res.append(\")\");\r\n        }\r\n        //    JSUtil.flag10(\"Str. read:\"+res);\r\n        return res;\r\n    }\r\n\r\n    public boolean isGround() {\r\n        if (this.isConstant()) {\r\n            return true;\r\n        }\r\n        if (this.isVariable()) {\r\n            return false;\r\n        }\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            if (!ti.isGround()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public JSTerm standardizerTerm() {\r\n        JSTerm nt = new JSTerm();\r\n        nt.makeEval(this.isEval);\r\n        if (this.isConstant()) {\r\n            nt.addElement(this.elementAt(0));\r\n            nt.makeConstant();\r\n            return nt;\r\n        }\r\n        if (this.isVariable()) {\r\n            nt.addElement(this.elementAt(0) + String.valueOf(JSJshopVars.VarCounter));\r\n            nt.makeVariable();\r\n            return nt;\r\n        }\r\n        nt.addElement(this.elementAt(0));\r\n        JSTerm ti;\r\n        for (short i = 1; i < this.size(); i++) {\r\n            ti = (JSTerm) this.elementAt(i);\r\n            nt.addElement(ti.standardizerTerm());\r\n        }\r\n        nt.makeFunction();\r\n        return nt;\r\n    }\r\n\r\n    //Added 11/29/2000\r\n    public JSTerm call() {\r\n        JSTerm t, f;\r\n        if (this.isConstant())\r\n            return ((JSTerm) this.clone());\r\n        // Added on 12 Apr\r\n        if (!this.isEval() && this.isVariable())\r\n            return ((JSTerm) this.clone());\r\n        // Additions end\r\n        if (this.isVariable())\r\n            return new JSTerm();\r\n        // Added on 12 apr\r\n        f = new JSTerm();\r\n        f.makeFunction();\r\n        f.addElement(elementAt(0));\r\n        for (int i = 1; i < size(); i++) f.addElement(((JSTerm) elementAt(i)).call());\r\n        if (!this.isEval())\r\n            return f;\r\n        String op = new String((String) f.elementAt(0));\r\n        JSTerm operant1 = ((JSTerm) f.elementAt(1)).call();\r\n        if (operant1.size() == 0 && !(op.equalsIgnoreCase(\"not\"))) {\r\n            // JSUtil.println(\"operan1 failed for \" + op + \"the operand was :\");\r\n            // JSUtil.println(\"*******\");\r\n            // ((JSTerm)f.elementAt(1)).print();\r\n            // JSUtil.println(\"*******\");\r\n            return new JSTerm();\r\n        }\r\n        JSTerm operant2;\r\n        if (JSEvaluate.OperantNum(op) > 1) {\r\n            operant2 = ((JSTerm) f.elementAt(2)).call();\r\n            if (operant2.size() == 0) {\r\n                //   JSUtil.println(\"operan2 failed for \" + op + \"the operand was :\");\r\n                //   JSUtil.println(\"*******\");\r\n                //   ((JSTerm)f.elementAt(2)).print();\r\n                //   JSUtil.println(\"*******\");\r\n                return new JSTerm();\r\n            }\r\n            t = JSEvaluate.applyOperator(op, operant1, operant2);\r\n        } else\r\n            t = JSEvaluate.applyOperatorUnary(op, operant1);\r\n        //JSUtil.println(\"Operation for \" + op + \"succeded result is  :\");\r\n        // JSUtil.println(\"$$$$$$$$\");\r\n        //  if (t.size() > 0)t.print();\r\n        //  else JSUtil.print(\"nil\");\r\n        //  JSUtil.println(\"$$$$$$$$\");\r\n        return t;\r\n    }\r\n    // Additions ended\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSTermTest13.java",
		"test_prompt": "// JSTermTest13.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSTerm}.\n* It contains ten unit test cases for the {@link JSTerm#call()} method.\n*/\nclass JSTermTest13 {"
	},
	{
		"original_code": "// JSJshop.java\npackage umd.cs.shop;\r\n\r\n/*HICAP import nrl.aic.hicap.*;*/\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\nimport javax.swing.*;\r\nimport java.net.*;\r\n\r\n//The main constructor of this class is JSJshop(String nameFile). This\r\n//constructor will open and parse the <file> named nameFile and solves the\r\n//problem  stated in it. It assumes that the file contains a single problem\r\n// i.e., \"make-problem\" and a single domain, i.e., \"make-domain\". If several\r\n// domains and problems are given it will parse all of them and solve the\r\n// last problem for the last domain.\r\npublic final class JSJshop {\r\n\r\n    /*HICAP*/\r\n    /*==== class variables ====*/\r\n    /*HICAP*/\r\n    public static boolean corbaToHicap = false;\r\n\r\n    /*HICAP*/\r\n    public static JApplet applet;\r\n\r\n    /* instance variables */\r\n    private JSPlanningDomain dom;\r\n\r\n    private JSPlanningProblem prob;\r\n\r\n    private JSListPlanningProblem probSet = new JSListPlanningProblem();\r\n\r\n    private JSPlan sol;\r\n\r\n    private JSJshopNode tree = null;\r\n\r\n    private JSPairPlanTSListNodes solution;\r\n\r\n    /*HICAP:    private NeoEditor aNeoEditor;*/\r\n    /*====  main ====*/\r\n    public static void main(String[] args) {\r\n        if (args.length < 2 || args.length > 4) {\r\n            JSUtil.println(\"Usage :\");\r\n            // [verbose-level]\" );\r\n            JSUtil.println(\" java JSJshop <domainDef-file-name> <problemDef-file-name> [number-of-plans]\");\r\n            JSUtil.println(\"[number-of-plans] can be 'one' or 'all'. The default value is 'one'\");\r\n            //   JSUtil.println(\"[verbose-level] can be integer from  0 to 10. The default verbose value is 0\" );\r\n            return;\r\n        }\r\n        String one = \"one\";\r\n        String all = \"all\";\r\n        int level, i;\r\n        try {\r\n            for (i = 2; i < args.length; i++) if (one.equalsIgnoreCase(args[i]))\r\n                JSJshopVars.allPlans = false;\r\n            else if (all.equalsIgnoreCase(args[i]))\r\n                JSJshopVars.allPlans = true;\r\n            else {\r\n                level = Integer.valueOf(args[i]).intValue();\r\n                JSJshopVars.flagLevel = level;\r\n                /*    \r\n            JSUtil.println(\"Invalid parameter\" );\r\n            return;*/\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            JSUtil.println(\"Invalid parameter\");\r\n            return;\r\n        }\r\n        new JSJshop(args[0], args[1]);\r\n        /*HICAP:\r\n      else if( args.length==1 && args[0].indexOf(\".shp\") >= 0)\r\n      {\r\n        new JSJshop(args[0]);\r\n      }\r\n      else \r\n      {\r\n        System.err.println(\"USAGE: java JSJshop [<file-name>.shp]\");\r\n      }\r\n*/\r\n    }\r\n\r\n    // main\r\n    /* constructors */\r\n    public JSJshop() {\r\n    }\r\n\r\n    /**\r\n     * ***** main constructor *********\r\n     */\r\n    public JSJshop(String nameDomainFile, String nameProblemFile) {\r\n        JSPairPlanTSListNodes pair;\r\n        JSListPairPlanTStateNodes allPlans;\r\n        JSUtil.println(\"Reading file \" + nameDomainFile);\r\n        if (!parserFile(nameDomainFile))\r\n            if (JSJshopVars.flagExit)\r\n                System.exit(0);\r\n            else\r\n                return;\r\n        JSUtil.println(\"Domain file parsed successfully\");\r\n        JSUtil.println(\"Reading file \" + nameProblemFile);\r\n        if (!parserFile(nameProblemFile))\r\n            if (JSJshopVars.flagExit)\r\n                System.exit(0);\r\n            else\r\n                return;\r\n        JSUtil.println(\"Problem file parsed successfully\");\r\n        for (int k = 0; k < probSet.size(); k++) {\r\n            prob = (JSPlanningProblem) probSet.elementAt(k);\r\n            JSUtil.println(\"Solving Problem :\" + prob.Name());\r\n            allPlans = dom.solveAll(prob, JSJshopVars.allPlans);\r\n            if (allPlans.isEmpty()) {\r\n                // Return the failing solution to HICAP\r\n                sol = new JSPlan();\r\n                sol.assignFailure();\r\n                solution = new JSPairPlanTSListNodes(new JSPairPlanTState(sol, new JSTState()), new Vector());\r\n                JSUtil.println(\"0 plans found\");\r\n            } else {\r\n                // Return the first solution to HICAP\r\n                solution = (JSPairPlanTSListNodes) allPlans.elementAt(0);\r\n                sol = solution.planS().plan();\r\n                JSUtil.println(allPlans.size() + \" plans found.\");\r\n                if (JSJshopVars.flagLevel > 0) {\r\n                    JSUtil.println(\"********* PLANS *******\");\r\n                    for (int i = 0; i < allPlans.size(); i++) {\r\n                        JSUtil.println(\"Plan # \" + (i + 1));\r\n                        pair = (JSPairPlanTSListNodes) allPlans.elementAt(i);\r\n                        //.print();\r\n                        pair.planS().plan().printPlan();\r\n                        // pair.print();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    /*HICAP:   \r\n    public\r\n    JSJshop( String nameFile, NeoEditor aNE, JSTaskAtom pred)\r\n    {\r\n      this.aNeoEditor = aNE;\r\n      setFile( nameFile, pred);\r\n      \r\n    }\r\n*/\r\n    public JSJshop(String nameFile, JSTaskAtom pred) {\r\n        setFile(nameFile, pred);\r\n    }\r\n\r\n    public JSJshopNode getTree() {\r\n        return tree;\r\n    }\r\n\r\n    public JSPairPlanTSListNodes getSolution() {\r\n        return solution;\r\n    }\r\n\r\n    public JSListLogicalAtoms getAddList() {\r\n        if (tree == null)\r\n            return null;\r\n        return solution.planS().tState().addList();\r\n    }\r\n\r\n    public JSListLogicalAtoms getDeleteList() {\r\n        if (tree == null)\r\n            return null;\r\n        return solution.planS().tState().deleteList();\r\n    }\r\n\r\n    /*==== solves planning problem for input file ====*/\r\n    public JSPairPlanTSListNodes setFile(String nameFile, JSTaskAtom pred) {\r\n        JSPairPlanTSListNodes pair;\r\n        Vector listNodes = new Vector();\r\n        JSJshopVars.VarCounter = 0;\r\n        //JSUtil.flag2(nameFile+\" will be parsered\");\r\n        parserFile(nameFile);\r\n        /*HICAP: prob.assignState(aNeoEditor.translateState());*/\r\n        /*HICAP: prob.makeTask(pred);*/\r\n        JSUtil.flag(\"File parsed\");\r\n        dom.print();\r\n        JSUtil.flag(\"<- domain\");\r\n        prob.print();\r\n        JSUtil.flag(\"<- problem\");\r\n        JSJshopVars.allPlans = false;\r\n        JSListPairPlanTStateNodes listPairs = dom.solveAll(prob, JSJshopVars.allPlans);\r\n        if (listPairs.size() == 0)\r\n            return null;\r\n        else\r\n            pair = (JSPairPlanTSListNodes) listPairs.elementAt(0);\r\n        JSUtil.flag(\"**After planning\");\r\n        sol = pair.planS().plan();\r\n        if (sol.isFailure()) {\r\n            JSUtil.print(\"*NO* SOLUTION FOUND\");\r\n            return null;\r\n        } else {\r\n            JSUtil.print(\"SOLUTION FOUND\");\r\n            pair.planS().tState().print();\r\n            JSUtil.println(\"***************FINAL SOLUTION*******\");\r\n            sol.print();\r\n            JSUtil.println(\"********* list-tree FINAL SOLUTION*******\");\r\n            JSTaskAtom ta;\r\n            Vector listT;\r\n            JSJshopNode node;\r\n            listNodes = pair.listNodes();\r\n            for (int i = 0; i < listNodes.size(); i++) {\r\n                node = (JSJshopNode) listNodes.elementAt(i);\r\n                node.print2();\r\n            }\r\n            // we assume that there is only a single task\r\n            // at the top level. If more than 1 task\r\n            // must be reduced at the top level, listNodes\r\n            // contain the list of trees (one for each task).\r\n            // Whereas this does not affect SHOP, HICAP assumes\r\n            // that it receives a single task at the top level\r\n            //tree.print();\r\n            //listNodes = pair.listNodes();\r\n            //pair.print();\r\n            //JSJshopNode node;\r\n            node = (JSJshopNode) listNodes.elementAt(listNodes.size() - 1);\r\n            // last element must be the root\r\n            listNodes.removeElement(node);\r\n            tree = new JSJshopNode(node, listNodes);\r\n            JSUtil.println(\"********* tree FINAL SOLUTION*******\");\r\n            tree.print();\r\n            solution = pair;\r\n            return pair;\r\n        }\r\n        // solution found\r\n    }\r\n\r\n    // setFile\r\n    public void testParser() {\r\n        try {\r\n            FileReader fr = new FileReader(\"farp.shp\");\r\n            StreamTokenizer tokenizer = new StreamTokenizer(fr);\r\n            JSUtil.initParseTable(tokenizer);\r\n            while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {\r\n                if (tokenizer.ttype == StreamTokenizer.TT_NUMBER) {\r\n                    System.err.print(new Double(tokenizer.nval).toString() + \" \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.leftPar) {\r\n                    System.err.print(\"( \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                    System.err.print(\") \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.colon) {\r\n                    System.err.print(\": \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.semicolon) {\r\n                    System.err.print(\"; \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.apostrophe) {\r\n                    System.err.print(\"' \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.exclamation) {\r\n                    System.err.print(\"! \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                    System.err.print(\"? \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.minus) {\r\n                    System.err.print(\"- \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.lessT) {\r\n                    System.err.print(\"< \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    System.err.print(\"= \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                    System.err.print(\"> \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.plus) {\r\n                    System.err.print(\"+ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.backquote) {\r\n                    System.err.print(\"` \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.slash) {\r\n                    System.err.print(\"/ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.coma) {\r\n                    System.err.print(\", \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.astherisk) {\r\n                    System.err.print(\"* \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.rightBrac) {\r\n                    System.err.print(\"] \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.leftBrac) {\r\n                    System.err.print(\"[ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.verticalL) {\r\n                    System.err.print(\"| \");\r\n                }\r\n                if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                    System.err.print(tokenizer.sval + \" \");\r\n                }\r\n            }\r\n            fr.close();\r\n            //JSUtil.flag(\"End of parsing\");\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public boolean parserFile(String libraryFile) {\r\n        String libraryDirectory = \".\";\r\n        try {\r\n            FileReader fr = new FileReader(libraryFile);\r\n            StreamTokenizer tokenizer = new StreamTokenizer(fr);\r\n            tokenizer.lowerCaseMode(true);\r\n            JSUtil.initParseTable(tokenizer);\r\n            if (fr == null) {\r\n                JSUtil.println(\"Can not open file : \" + libraryFile);\r\n                return false;\r\n            }\r\n            while (tokenizer.nextToken() != tokenizer.TT_EOF) processToken(tokenizer);\r\n            fr.close();\r\n        } catch (IOException e) {\r\n            System.out.println(\"Error in readFile() : \" + e);\r\n            return false;\r\n        } catch (JSParserError parserError) {\r\n            System.out.println(\"Error in parsing file\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public BufferedReader getBufferedReader(String dir, String file) {\r\n        return getBufferedReader(dir, file);\r\n    }\r\n\r\n    public BufferedReader getBufferedReader(String dir, String file, JApplet applet) {\r\n        if (file == null)\r\n            return null;\r\n        BufferedReader br = null;\r\n        FileInputStream libraryFileInputStream = null;\r\n        InputStream conn = null;\r\n        String line;\r\n        try {\r\n            if (applet != null) {\r\n                URL url = getAppletURL(file, applet);\r\n                if (url == null) {\r\n                    System.err.println(\"Util.getBufferedReader() error: cannot get URL\");\r\n                    return null;\r\n                } else {\r\n                    conn = url.openStream();\r\n                    if (conn == null) {\r\n                        System.err.println(\"Util.getBufferedReader() error: cannot open URL\");\r\n                        return null;\r\n                    }\r\n                }\r\n            } else // is applet\r\n            // is application\r\n            {\r\n                libraryFileInputStream = new FileInputStream(dir + File.separator + file);\r\n            }\r\n        } catch (IOException e) {\r\n            System.err.println(\"Error 1 in Util.getBufferedReader : \" + e);\r\n            return null;\r\n        }\r\n        if (applet != null) {\r\n            br = new BufferedReader(new InputStreamReader(conn));\r\n        } else // application\r\n        {\r\n            try {\r\n                br = new BufferedReader(new InputStreamReader(libraryFileInputStream, System.getProperty(\"file.encoding\")));\r\n            } catch (UnsupportedEncodingException e) {\r\n                System.err.println(\"Error 2 in Util.getBufferedReader : \" + e);\r\n                return null;\r\n            }\r\n        }\r\n        return br;\r\n    }\r\n\r\n    // getBufferedReader\r\n    public URL getAppletURL(String file, JApplet applet) {\r\n        try {\r\n            return (new URL(applet.getCodeBase() + file));\r\n        } catch (MalformedURLException e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public void processToken(StreamTokenizer tokenizer) {\r\n        if (tokenizer.ttype == JSJshopVars.leftPar) {\r\n            if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \"Expected 'defdomain or defproblem' \"))\r\n                //return;\r\n                throw new JSParserError();\r\n            tokenizer.pushBack();\r\n            String w = JSUtil.readWord(tokenizer, \"JSJshop>>processToken\");\r\n            if (w.equals(\"%%%\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (w.equalsIgnoreCase(\"defdomain\")) {\r\n                dom = new JSPlanningDomain(tokenizer);\r\n                return;\r\n            } else {\r\n                if (w.equalsIgnoreCase(\"defproblem\")) {\r\n                    prob = new JSPlanningProblem(tokenizer);\r\n                    probSet.addElement(prob);\r\n                    return;\r\n                }\r\n            }\r\n            System.err.println(\"Line : \" + tokenizer.lineno() + \" Expecting defdomain or defproblem\");\r\n            //return;\r\n            throw new JSParserError();\r\n        } else {\r\n            System.err.println(\"Line : \" + tokenizer.lineno() + \" Expected '('\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public JSPlanningDomain dom() {\r\n        return dom;\r\n    }\r\n\r\n    public JSPlanningProblem prob() {\r\n        return prob;\r\n    }\r\n\r\n    public JSPlan sol() {\r\n        return sol;\r\n    }\r\n\r\n    public JSJshopNode tree() {\r\n        return tree;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSJshopTest0.java",
		"test_prompt": "// JSJshopTest0.java\npackage umd.cs.shop;\n\n/*HICAP import nrl.aic.hicap.*;*/\nimport java.util.*;\nimport java.io.*;\nimport java.lang.*;\nimport javax.swing.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSJshop}.\n* It contains ten unit test cases for the {@link JSJshop#parserFile(String)} method.\n*/\nclass JSJshopTest0 {"
	},
	{
		"original_code": "// JSJshop.java\npackage umd.cs.shop;\r\n\r\n/*HICAP import nrl.aic.hicap.*;*/\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\nimport javax.swing.*;\r\nimport java.net.*;\r\n\r\n//The main constructor of this class is JSJshop(String nameFile). This\r\n//constructor will open and parse the <file> named nameFile and solves the\r\n//problem  stated in it. It assumes that the file contains a single problem\r\n// i.e., \"make-problem\" and a single domain, i.e., \"make-domain\". If several\r\n// domains and problems are given it will parse all of them and solve the\r\n// last problem for the last domain.\r\npublic final class JSJshop {\r\n\r\n    /*HICAP*/\r\n    /*==== class variables ====*/\r\n    /*HICAP*/\r\n    public static boolean corbaToHicap = false;\r\n\r\n    /*HICAP*/\r\n    public static JApplet applet;\r\n\r\n    /* instance variables */\r\n    private JSPlanningDomain dom;\r\n\r\n    private JSPlanningProblem prob;\r\n\r\n    private JSListPlanningProblem probSet = new JSListPlanningProblem();\r\n\r\n    private JSPlan sol;\r\n\r\n    private JSJshopNode tree = null;\r\n\r\n    private JSPairPlanTSListNodes solution;\r\n\r\n    /*HICAP:    private NeoEditor aNeoEditor;*/\r\n    /*====  main ====*/\r\n    public static void main(String[] args) {\r\n        if (args.length < 2 || args.length > 4) {\r\n            JSUtil.println(\"Usage :\");\r\n            // [verbose-level]\" );\r\n            JSUtil.println(\" java JSJshop <domainDef-file-name> <problemDef-file-name> [number-of-plans]\");\r\n            JSUtil.println(\"[number-of-plans] can be 'one' or 'all'. The default value is 'one'\");\r\n            //   JSUtil.println(\"[verbose-level] can be integer from  0 to 10. The default verbose value is 0\" );\r\n            return;\r\n        }\r\n        String one = \"one\";\r\n        String all = \"all\";\r\n        int level, i;\r\n        try {\r\n            for (i = 2; i < args.length; i++) if (one.equalsIgnoreCase(args[i]))\r\n                JSJshopVars.allPlans = false;\r\n            else if (all.equalsIgnoreCase(args[i]))\r\n                JSJshopVars.allPlans = true;\r\n            else {\r\n                level = Integer.valueOf(args[i]).intValue();\r\n                JSJshopVars.flagLevel = level;\r\n                /*    \r\n            JSUtil.println(\"Invalid parameter\" );\r\n            return;*/\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            JSUtil.println(\"Invalid parameter\");\r\n            return;\r\n        }\r\n        new JSJshop(args[0], args[1]);\r\n        /*HICAP:\r\n      else if( args.length==1 && args[0].indexOf(\".shp\") >= 0)\r\n      {\r\n        new JSJshop(args[0]);\r\n      }\r\n      else \r\n      {\r\n        System.err.println(\"USAGE: java JSJshop [<file-name>.shp]\");\r\n      }\r\n*/\r\n    }\r\n\r\n    // main\r\n    /* constructors */\r\n    public JSJshop() {\r\n    }\r\n\r\n    /**\r\n     * ***** main constructor *********\r\n     */\r\n    public JSJshop(String nameDomainFile, String nameProblemFile) {\r\n        JSPairPlanTSListNodes pair;\r\n        JSListPairPlanTStateNodes allPlans;\r\n        JSUtil.println(\"Reading file \" + nameDomainFile);\r\n        if (!parserFile(nameDomainFile))\r\n            if (JSJshopVars.flagExit)\r\n                System.exit(0);\r\n            else\r\n                return;\r\n        JSUtil.println(\"Domain file parsed successfully\");\r\n        JSUtil.println(\"Reading file \" + nameProblemFile);\r\n        if (!parserFile(nameProblemFile))\r\n            if (JSJshopVars.flagExit)\r\n                System.exit(0);\r\n            else\r\n                return;\r\n        JSUtil.println(\"Problem file parsed successfully\");\r\n        for (int k = 0; k < probSet.size(); k++) {\r\n            prob = (JSPlanningProblem) probSet.elementAt(k);\r\n            JSUtil.println(\"Solving Problem :\" + prob.Name());\r\n            allPlans = dom.solveAll(prob, JSJshopVars.allPlans);\r\n            if (allPlans.isEmpty()) {\r\n                // Return the failing solution to HICAP\r\n                sol = new JSPlan();\r\n                sol.assignFailure();\r\n                solution = new JSPairPlanTSListNodes(new JSPairPlanTState(sol, new JSTState()), new Vector());\r\n                JSUtil.println(\"0 plans found\");\r\n            } else {\r\n                // Return the first solution to HICAP\r\n                solution = (JSPairPlanTSListNodes) allPlans.elementAt(0);\r\n                sol = solution.planS().plan();\r\n                JSUtil.println(allPlans.size() + \" plans found.\");\r\n                if (JSJshopVars.flagLevel > 0) {\r\n                    JSUtil.println(\"********* PLANS *******\");\r\n                    for (int i = 0; i < allPlans.size(); i++) {\r\n                        JSUtil.println(\"Plan # \" + (i + 1));\r\n                        pair = (JSPairPlanTSListNodes) allPlans.elementAt(i);\r\n                        //.print();\r\n                        pair.planS().plan().printPlan();\r\n                        // pair.print();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    /*HICAP:   \r\n    public\r\n    JSJshop( String nameFile, NeoEditor aNE, JSTaskAtom pred)\r\n    {\r\n      this.aNeoEditor = aNE;\r\n      setFile( nameFile, pred);\r\n      \r\n    }\r\n*/\r\n    public JSJshop(String nameFile, JSTaskAtom pred) {\r\n        setFile(nameFile, pred);\r\n    }\r\n\r\n    public JSJshopNode getTree() {\r\n        return tree;\r\n    }\r\n\r\n    public JSPairPlanTSListNodes getSolution() {\r\n        return solution;\r\n    }\r\n\r\n    public JSListLogicalAtoms getAddList() {\r\n        if (tree == null)\r\n            return null;\r\n        return solution.planS().tState().addList();\r\n    }\r\n\r\n    public JSListLogicalAtoms getDeleteList() {\r\n        if (tree == null)\r\n            return null;\r\n        return solution.planS().tState().deleteList();\r\n    }\r\n\r\n    /*==== solves planning problem for input file ====*/\r\n    public JSPairPlanTSListNodes setFile(String nameFile, JSTaskAtom pred) {\r\n        JSPairPlanTSListNodes pair;\r\n        Vector listNodes = new Vector();\r\n        JSJshopVars.VarCounter = 0;\r\n        //JSUtil.flag2(nameFile+\" will be parsered\");\r\n        parserFile(nameFile);\r\n        /*HICAP: prob.assignState(aNeoEditor.translateState());*/\r\n        /*HICAP: prob.makeTask(pred);*/\r\n        JSUtil.flag(\"File parsed\");\r\n        dom.print();\r\n        JSUtil.flag(\"<- domain\");\r\n        prob.print();\r\n        JSUtil.flag(\"<- problem\");\r\n        JSJshopVars.allPlans = false;\r\n        JSListPairPlanTStateNodes listPairs = dom.solveAll(prob, JSJshopVars.allPlans);\r\n        if (listPairs.size() == 0)\r\n            return null;\r\n        else\r\n            pair = (JSPairPlanTSListNodes) listPairs.elementAt(0);\r\n        JSUtil.flag(\"**After planning\");\r\n        sol = pair.planS().plan();\r\n        if (sol.isFailure()) {\r\n            JSUtil.print(\"*NO* SOLUTION FOUND\");\r\n            return null;\r\n        } else {\r\n            JSUtil.print(\"SOLUTION FOUND\");\r\n            pair.planS().tState().print();\r\n            JSUtil.println(\"***************FINAL SOLUTION*******\");\r\n            sol.print();\r\n            JSUtil.println(\"********* list-tree FINAL SOLUTION*******\");\r\n            JSTaskAtom ta;\r\n            Vector listT;\r\n            JSJshopNode node;\r\n            listNodes = pair.listNodes();\r\n            for (int i = 0; i < listNodes.size(); i++) {\r\n                node = (JSJshopNode) listNodes.elementAt(i);\r\n                node.print2();\r\n            }\r\n            // we assume that there is only a single task\r\n            // at the top level. If more than 1 task\r\n            // must be reduced at the top level, listNodes\r\n            // contain the list of trees (one for each task).\r\n            // Whereas this does not affect SHOP, HICAP assumes\r\n            // that it receives a single task at the top level\r\n            //tree.print();\r\n            //listNodes = pair.listNodes();\r\n            //pair.print();\r\n            //JSJshopNode node;\r\n            node = (JSJshopNode) listNodes.elementAt(listNodes.size() - 1);\r\n            // last element must be the root\r\n            listNodes.removeElement(node);\r\n            tree = new JSJshopNode(node, listNodes);\r\n            JSUtil.println(\"********* tree FINAL SOLUTION*******\");\r\n            tree.print();\r\n            solution = pair;\r\n            return pair;\r\n        }\r\n        // solution found\r\n    }\r\n\r\n    // setFile\r\n    public void testParser() {\r\n        try {\r\n            FileReader fr = new FileReader(\"farp.shp\");\r\n            StreamTokenizer tokenizer = new StreamTokenizer(fr);\r\n            JSUtil.initParseTable(tokenizer);\r\n            while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {\r\n                if (tokenizer.ttype == StreamTokenizer.TT_NUMBER) {\r\n                    System.err.print(new Double(tokenizer.nval).toString() + \" \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.leftPar) {\r\n                    System.err.print(\"( \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                    System.err.print(\") \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.colon) {\r\n                    System.err.print(\": \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.semicolon) {\r\n                    System.err.print(\"; \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.apostrophe) {\r\n                    System.err.print(\"' \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.exclamation) {\r\n                    System.err.print(\"! \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                    System.err.print(\"? \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.minus) {\r\n                    System.err.print(\"- \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.lessT) {\r\n                    System.err.print(\"< \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    System.err.print(\"= \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                    System.err.print(\"> \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.plus) {\r\n                    System.err.print(\"+ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.backquote) {\r\n                    System.err.print(\"` \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.slash) {\r\n                    System.err.print(\"/ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.coma) {\r\n                    System.err.print(\", \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.astherisk) {\r\n                    System.err.print(\"* \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.rightBrac) {\r\n                    System.err.print(\"] \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.leftBrac) {\r\n                    System.err.print(\"[ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.verticalL) {\r\n                    System.err.print(\"| \");\r\n                }\r\n                if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                    System.err.print(tokenizer.sval + \" \");\r\n                }\r\n            }\r\n            fr.close();\r\n            //JSUtil.flag(\"End of parsing\");\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public boolean parserFile(String libraryFile) {\r\n        String libraryDirectory = \".\";\r\n        try {\r\n            FileReader fr = new FileReader(libraryFile);\r\n            StreamTokenizer tokenizer = new StreamTokenizer(fr);\r\n            tokenizer.lowerCaseMode(true);\r\n            JSUtil.initParseTable(tokenizer);\r\n            if (fr == null) {\r\n                JSUtil.println(\"Can not open file : \" + libraryFile);\r\n                return false;\r\n            }\r\n            while (tokenizer.nextToken() != tokenizer.TT_EOF) processToken(tokenizer);\r\n            fr.close();\r\n        } catch (IOException e) {\r\n            System.out.println(\"Error in readFile() : \" + e);\r\n            return false;\r\n        } catch (JSParserError parserError) {\r\n            System.out.println(\"Error in parsing file\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public BufferedReader getBufferedReader(String dir, String file) {\r\n        return getBufferedReader(dir, file);\r\n    }\r\n\r\n    public BufferedReader getBufferedReader(String dir, String file, JApplet applet) {\r\n        if (file == null)\r\n            return null;\r\n        BufferedReader br = null;\r\n        FileInputStream libraryFileInputStream = null;\r\n        InputStream conn = null;\r\n        String line;\r\n        try {\r\n            if (applet != null) {\r\n                URL url = getAppletURL(file, applet);\r\n                if (url == null) {\r\n                    System.err.println(\"Util.getBufferedReader() error: cannot get URL\");\r\n                    return null;\r\n                } else {\r\n                    conn = url.openStream();\r\n                    if (conn == null) {\r\n                        System.err.println(\"Util.getBufferedReader() error: cannot open URL\");\r\n                        return null;\r\n                    }\r\n                }\r\n            } else // is applet\r\n            // is application\r\n            {\r\n                libraryFileInputStream = new FileInputStream(dir + File.separator + file);\r\n            }\r\n        } catch (IOException e) {\r\n            System.err.println(\"Error 1 in Util.getBufferedReader : \" + e);\r\n            return null;\r\n        }\r\n        if (applet != null) {\r\n            br = new BufferedReader(new InputStreamReader(conn));\r\n        } else // application\r\n        {\r\n            try {\r\n                br = new BufferedReader(new InputStreamReader(libraryFileInputStream, System.getProperty(\"file.encoding\")));\r\n            } catch (UnsupportedEncodingException e) {\r\n                System.err.println(\"Error 2 in Util.getBufferedReader : \" + e);\r\n                return null;\r\n            }\r\n        }\r\n        return br;\r\n    }\r\n\r\n    // getBufferedReader\r\n    public URL getAppletURL(String file, JApplet applet) {\r\n        try {\r\n            return (new URL(applet.getCodeBase() + file));\r\n        } catch (MalformedURLException e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public void processToken(StreamTokenizer tokenizer) {\r\n        if (tokenizer.ttype == JSJshopVars.leftPar) {\r\n            if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \"Expected 'defdomain or defproblem' \"))\r\n                //return;\r\n                throw new JSParserError();\r\n            tokenizer.pushBack();\r\n            String w = JSUtil.readWord(tokenizer, \"JSJshop>>processToken\");\r\n            if (w.equals(\"%%%\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (w.equalsIgnoreCase(\"defdomain\")) {\r\n                dom = new JSPlanningDomain(tokenizer);\r\n                return;\r\n            } else {\r\n                if (w.equalsIgnoreCase(\"defproblem\")) {\r\n                    prob = new JSPlanningProblem(tokenizer);\r\n                    probSet.addElement(prob);\r\n                    return;\r\n                }\r\n            }\r\n            System.err.println(\"Line : \" + tokenizer.lineno() + \" Expecting defdomain or defproblem\");\r\n            //return;\r\n            throw new JSParserError();\r\n        } else {\r\n            System.err.println(\"Line : \" + tokenizer.lineno() + \" Expected '('\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public JSPlanningDomain dom() {\r\n        return dom;\r\n    }\r\n\r\n    public JSPlanningProblem prob() {\r\n        return prob;\r\n    }\r\n\r\n    public JSPlan sol() {\r\n        return sol;\r\n    }\r\n\r\n    public JSJshopNode tree() {\r\n        return tree;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSJshopTest1.java",
		"test_prompt": "// JSJshopTest1.java\npackage umd.cs.shop;\n\n/*HICAP import nrl.aic.hicap.*;*/\r\nimport java.util.*;\nimport java.io.*;\nimport java.lang.*;\nimport javax.swing.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSJshop}.\n* It contains ten unit test cases for the {@link JSJshop#dom()} method.\n*/\nclass JSJshopTest1 {"
	},
	{
		"original_code": "// JSJshop.java\npackage umd.cs.shop;\r\n\r\n/*HICAP import nrl.aic.hicap.*;*/\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\nimport javax.swing.*;\r\nimport java.net.*;\r\n\r\n//The main constructor of this class is JSJshop(String nameFile). This\r\n//constructor will open and parse the <file> named nameFile and solves the\r\n//problem  stated in it. It assumes that the file contains a single problem\r\n// i.e., \"make-problem\" and a single domain, i.e., \"make-domain\". If several\r\n// domains and problems are given it will parse all of them and solve the\r\n// last problem for the last domain.\r\npublic final class JSJshop {\r\n\r\n    /*HICAP*/\r\n    /*==== class variables ====*/\r\n    /*HICAP*/\r\n    public static boolean corbaToHicap = false;\r\n\r\n    /*HICAP*/\r\n    public static JApplet applet;\r\n\r\n    /* instance variables */\r\n    private JSPlanningDomain dom;\r\n\r\n    private JSPlanningProblem prob;\r\n\r\n    private JSListPlanningProblem probSet = new JSListPlanningProblem();\r\n\r\n    private JSPlan sol;\r\n\r\n    private JSJshopNode tree = null;\r\n\r\n    private JSPairPlanTSListNodes solution;\r\n\r\n    /*HICAP:    private NeoEditor aNeoEditor;*/\r\n    /*====  main ====*/\r\n    public static void main(String[] args) {\r\n        if (args.length < 2 || args.length > 4) {\r\n            JSUtil.println(\"Usage :\");\r\n            // [verbose-level]\" );\r\n            JSUtil.println(\" java JSJshop <domainDef-file-name> <problemDef-file-name> [number-of-plans]\");\r\n            JSUtil.println(\"[number-of-plans] can be 'one' or 'all'. The default value is 'one'\");\r\n            //   JSUtil.println(\"[verbose-level] can be integer from  0 to 10. The default verbose value is 0\" );\r\n            return;\r\n        }\r\n        String one = \"one\";\r\n        String all = \"all\";\r\n        int level, i;\r\n        try {\r\n            for (i = 2; i < args.length; i++) if (one.equalsIgnoreCase(args[i]))\r\n                JSJshopVars.allPlans = false;\r\n            else if (all.equalsIgnoreCase(args[i]))\r\n                JSJshopVars.allPlans = true;\r\n            else {\r\n                level = Integer.valueOf(args[i]).intValue();\r\n                JSJshopVars.flagLevel = level;\r\n                /*    \r\n            JSUtil.println(\"Invalid parameter\" );\r\n            return;*/\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            JSUtil.println(\"Invalid parameter\");\r\n            return;\r\n        }\r\n        new JSJshop(args[0], args[1]);\r\n        /*HICAP:\r\n      else if( args.length==1 && args[0].indexOf(\".shp\") >= 0)\r\n      {\r\n        new JSJshop(args[0]);\r\n      }\r\n      else \r\n      {\r\n        System.err.println(\"USAGE: java JSJshop [<file-name>.shp]\");\r\n      }\r\n*/\r\n    }\r\n\r\n    // main\r\n    /* constructors */\r\n    public JSJshop() {\r\n    }\r\n\r\n    /**\r\n     * ***** main constructor *********\r\n     */\r\n    public JSJshop(String nameDomainFile, String nameProblemFile) {\r\n        JSPairPlanTSListNodes pair;\r\n        JSListPairPlanTStateNodes allPlans;\r\n        JSUtil.println(\"Reading file \" + nameDomainFile);\r\n        if (!parserFile(nameDomainFile))\r\n            if (JSJshopVars.flagExit)\r\n                System.exit(0);\r\n            else\r\n                return;\r\n        JSUtil.println(\"Domain file parsed successfully\");\r\n        JSUtil.println(\"Reading file \" + nameProblemFile);\r\n        if (!parserFile(nameProblemFile))\r\n            if (JSJshopVars.flagExit)\r\n                System.exit(0);\r\n            else\r\n                return;\r\n        JSUtil.println(\"Problem file parsed successfully\");\r\n        for (int k = 0; k < probSet.size(); k++) {\r\n            prob = (JSPlanningProblem) probSet.elementAt(k);\r\n            JSUtil.println(\"Solving Problem :\" + prob.Name());\r\n            allPlans = dom.solveAll(prob, JSJshopVars.allPlans);\r\n            if (allPlans.isEmpty()) {\r\n                // Return the failing solution to HICAP\r\n                sol = new JSPlan();\r\n                sol.assignFailure();\r\n                solution = new JSPairPlanTSListNodes(new JSPairPlanTState(sol, new JSTState()), new Vector());\r\n                JSUtil.println(\"0 plans found\");\r\n            } else {\r\n                // Return the first solution to HICAP\r\n                solution = (JSPairPlanTSListNodes) allPlans.elementAt(0);\r\n                sol = solution.planS().plan();\r\n                JSUtil.println(allPlans.size() + \" plans found.\");\r\n                if (JSJshopVars.flagLevel > 0) {\r\n                    JSUtil.println(\"********* PLANS *******\");\r\n                    for (int i = 0; i < allPlans.size(); i++) {\r\n                        JSUtil.println(\"Plan # \" + (i + 1));\r\n                        pair = (JSPairPlanTSListNodes) allPlans.elementAt(i);\r\n                        //.print();\r\n                        pair.planS().plan().printPlan();\r\n                        // pair.print();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    /*HICAP:   \r\n    public\r\n    JSJshop( String nameFile, NeoEditor aNE, JSTaskAtom pred)\r\n    {\r\n      this.aNeoEditor = aNE;\r\n      setFile( nameFile, pred);\r\n      \r\n    }\r\n*/\r\n    public JSJshop(String nameFile, JSTaskAtom pred) {\r\n        setFile(nameFile, pred);\r\n    }\r\n\r\n    public JSJshopNode getTree() {\r\n        return tree;\r\n    }\r\n\r\n    public JSPairPlanTSListNodes getSolution() {\r\n        return solution;\r\n    }\r\n\r\n    public JSListLogicalAtoms getAddList() {\r\n        if (tree == null)\r\n            return null;\r\n        return solution.planS().tState().addList();\r\n    }\r\n\r\n    public JSListLogicalAtoms getDeleteList() {\r\n        if (tree == null)\r\n            return null;\r\n        return solution.planS().tState().deleteList();\r\n    }\r\n\r\n    /*==== solves planning problem for input file ====*/\r\n    public JSPairPlanTSListNodes setFile(String nameFile, JSTaskAtom pred) {\r\n        JSPairPlanTSListNodes pair;\r\n        Vector listNodes = new Vector();\r\n        JSJshopVars.VarCounter = 0;\r\n        //JSUtil.flag2(nameFile+\" will be parsered\");\r\n        parserFile(nameFile);\r\n        /*HICAP: prob.assignState(aNeoEditor.translateState());*/\r\n        /*HICAP: prob.makeTask(pred);*/\r\n        JSUtil.flag(\"File parsed\");\r\n        dom.print();\r\n        JSUtil.flag(\"<- domain\");\r\n        prob.print();\r\n        JSUtil.flag(\"<- problem\");\r\n        JSJshopVars.allPlans = false;\r\n        JSListPairPlanTStateNodes listPairs = dom.solveAll(prob, JSJshopVars.allPlans);\r\n        if (listPairs.size() == 0)\r\n            return null;\r\n        else\r\n            pair = (JSPairPlanTSListNodes) listPairs.elementAt(0);\r\n        JSUtil.flag(\"**After planning\");\r\n        sol = pair.planS().plan();\r\n        if (sol.isFailure()) {\r\n            JSUtil.print(\"*NO* SOLUTION FOUND\");\r\n            return null;\r\n        } else {\r\n            JSUtil.print(\"SOLUTION FOUND\");\r\n            pair.planS().tState().print();\r\n            JSUtil.println(\"***************FINAL SOLUTION*******\");\r\n            sol.print();\r\n            JSUtil.println(\"********* list-tree FINAL SOLUTION*******\");\r\n            JSTaskAtom ta;\r\n            Vector listT;\r\n            JSJshopNode node;\r\n            listNodes = pair.listNodes();\r\n            for (int i = 0; i < listNodes.size(); i++) {\r\n                node = (JSJshopNode) listNodes.elementAt(i);\r\n                node.print2();\r\n            }\r\n            // we assume that there is only a single task\r\n            // at the top level. If more than 1 task\r\n            // must be reduced at the top level, listNodes\r\n            // contain the list of trees (one for each task).\r\n            // Whereas this does not affect SHOP, HICAP assumes\r\n            // that it receives a single task at the top level\r\n            //tree.print();\r\n            //listNodes = pair.listNodes();\r\n            //pair.print();\r\n            //JSJshopNode node;\r\n            node = (JSJshopNode) listNodes.elementAt(listNodes.size() - 1);\r\n            // last element must be the root\r\n            listNodes.removeElement(node);\r\n            tree = new JSJshopNode(node, listNodes);\r\n            JSUtil.println(\"********* tree FINAL SOLUTION*******\");\r\n            tree.print();\r\n            solution = pair;\r\n            return pair;\r\n        }\r\n        // solution found\r\n    }\r\n\r\n    // setFile\r\n    public void testParser() {\r\n        try {\r\n            FileReader fr = new FileReader(\"farp.shp\");\r\n            StreamTokenizer tokenizer = new StreamTokenizer(fr);\r\n            JSUtil.initParseTable(tokenizer);\r\n            while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {\r\n                if (tokenizer.ttype == StreamTokenizer.TT_NUMBER) {\r\n                    System.err.print(new Double(tokenizer.nval).toString() + \" \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.leftPar) {\r\n                    System.err.print(\"( \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                    System.err.print(\") \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.colon) {\r\n                    System.err.print(\": \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.semicolon) {\r\n                    System.err.print(\"; \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.apostrophe) {\r\n                    System.err.print(\"' \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.exclamation) {\r\n                    System.err.print(\"! \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                    System.err.print(\"? \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.minus) {\r\n                    System.err.print(\"- \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.lessT) {\r\n                    System.err.print(\"< \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    System.err.print(\"= \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                    System.err.print(\"> \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.plus) {\r\n                    System.err.print(\"+ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.backquote) {\r\n                    System.err.print(\"` \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.slash) {\r\n                    System.err.print(\"/ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.coma) {\r\n                    System.err.print(\", \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.astherisk) {\r\n                    System.err.print(\"* \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.rightBrac) {\r\n                    System.err.print(\"] \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.leftBrac) {\r\n                    System.err.print(\"[ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.verticalL) {\r\n                    System.err.print(\"| \");\r\n                }\r\n                if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                    System.err.print(tokenizer.sval + \" \");\r\n                }\r\n            }\r\n            fr.close();\r\n            //JSUtil.flag(\"End of parsing\");\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public boolean parserFile(String libraryFile) {\r\n        String libraryDirectory = \".\";\r\n        try {\r\n            FileReader fr = new FileReader(libraryFile);\r\n            StreamTokenizer tokenizer = new StreamTokenizer(fr);\r\n            tokenizer.lowerCaseMode(true);\r\n            JSUtil.initParseTable(tokenizer);\r\n            if (fr == null) {\r\n                JSUtil.println(\"Can not open file : \" + libraryFile);\r\n                return false;\r\n            }\r\n            while (tokenizer.nextToken() != tokenizer.TT_EOF) processToken(tokenizer);\r\n            fr.close();\r\n        } catch (IOException e) {\r\n            System.out.println(\"Error in readFile() : \" + e);\r\n            return false;\r\n        } catch (JSParserError parserError) {\r\n            System.out.println(\"Error in parsing file\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public BufferedReader getBufferedReader(String dir, String file) {\r\n        return getBufferedReader(dir, file);\r\n    }\r\n\r\n    public BufferedReader getBufferedReader(String dir, String file, JApplet applet) {\r\n        if (file == null)\r\n            return null;\r\n        BufferedReader br = null;\r\n        FileInputStream libraryFileInputStream = null;\r\n        InputStream conn = null;\r\n        String line;\r\n        try {\r\n            if (applet != null) {\r\n                URL url = getAppletURL(file, applet);\r\n                if (url == null) {\r\n                    System.err.println(\"Util.getBufferedReader() error: cannot get URL\");\r\n                    return null;\r\n                } else {\r\n                    conn = url.openStream();\r\n                    if (conn == null) {\r\n                        System.err.println(\"Util.getBufferedReader() error: cannot open URL\");\r\n                        return null;\r\n                    }\r\n                }\r\n            } else // is applet\r\n            // is application\r\n            {\r\n                libraryFileInputStream = new FileInputStream(dir + File.separator + file);\r\n            }\r\n        } catch (IOException e) {\r\n            System.err.println(\"Error 1 in Util.getBufferedReader : \" + e);\r\n            return null;\r\n        }\r\n        if (applet != null) {\r\n            br = new BufferedReader(new InputStreamReader(conn));\r\n        } else // application\r\n        {\r\n            try {\r\n                br = new BufferedReader(new InputStreamReader(libraryFileInputStream, System.getProperty(\"file.encoding\")));\r\n            } catch (UnsupportedEncodingException e) {\r\n                System.err.println(\"Error 2 in Util.getBufferedReader : \" + e);\r\n                return null;\r\n            }\r\n        }\r\n        return br;\r\n    }\r\n\r\n    // getBufferedReader\r\n    public URL getAppletURL(String file, JApplet applet) {\r\n        try {\r\n            return (new URL(applet.getCodeBase() + file));\r\n        } catch (MalformedURLException e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public void processToken(StreamTokenizer tokenizer) {\r\n        if (tokenizer.ttype == JSJshopVars.leftPar) {\r\n            if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \"Expected 'defdomain or defproblem' \"))\r\n                //return;\r\n                throw new JSParserError();\r\n            tokenizer.pushBack();\r\n            String w = JSUtil.readWord(tokenizer, \"JSJshop>>processToken\");\r\n            if (w.equals(\"%%%\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (w.equalsIgnoreCase(\"defdomain\")) {\r\n                dom = new JSPlanningDomain(tokenizer);\r\n                return;\r\n            } else {\r\n                if (w.equalsIgnoreCase(\"defproblem\")) {\r\n                    prob = new JSPlanningProblem(tokenizer);\r\n                    probSet.addElement(prob);\r\n                    return;\r\n                }\r\n            }\r\n            System.err.println(\"Line : \" + tokenizer.lineno() + \" Expecting defdomain or defproblem\");\r\n            //return;\r\n            throw new JSParserError();\r\n        } else {\r\n            System.err.println(\"Line : \" + tokenizer.lineno() + \" Expected '('\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public JSPlanningDomain dom() {\r\n        return dom;\r\n    }\r\n\r\n    public JSPlanningProblem prob() {\r\n        return prob;\r\n    }\r\n\r\n    public JSPlan sol() {\r\n        return sol;\r\n    }\r\n\r\n    public JSJshopNode tree() {\r\n        return tree;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSJshopTest2.java",
		"test_prompt": "// JSJshopTest2.java\npackage umd.cs.shop;\n\n/*HICAP import nrl.aic.hicap.*;*/\r\nimport java.util.*;\nimport java.io.*;\nimport java.lang.*;\nimport javax.swing.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSJshop}.\n* It contains ten unit test cases for the {@link JSJshop#prob()} method.\n*/\nclass JSJshopTest2 {"
	},
	{
		"original_code": "// JSJshop.java\npackage umd.cs.shop;\r\n\r\n/*HICAP import nrl.aic.hicap.*;*/\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\nimport javax.swing.*;\r\nimport java.net.*;\r\n\r\n//The main constructor of this class is JSJshop(String nameFile). This\r\n//constructor will open and parse the <file> named nameFile and solves the\r\n//problem  stated in it. It assumes that the file contains a single problem\r\n// i.e., \"make-problem\" and a single domain, i.e., \"make-domain\". If several\r\n// domains and problems are given it will parse all of them and solve the\r\n// last problem for the last domain.\r\npublic final class JSJshop {\r\n\r\n    /*HICAP*/\r\n    /*==== class variables ====*/\r\n    /*HICAP*/\r\n    public static boolean corbaToHicap = false;\r\n\r\n    /*HICAP*/\r\n    public static JApplet applet;\r\n\r\n    /* instance variables */\r\n    private JSPlanningDomain dom;\r\n\r\n    private JSPlanningProblem prob;\r\n\r\n    private JSListPlanningProblem probSet = new JSListPlanningProblem();\r\n\r\n    private JSPlan sol;\r\n\r\n    private JSJshopNode tree = null;\r\n\r\n    private JSPairPlanTSListNodes solution;\r\n\r\n    /*HICAP:    private NeoEditor aNeoEditor;*/\r\n    /*====  main ====*/\r\n    public static void main(String[] args) {\r\n        if (args.length < 2 || args.length > 4) {\r\n            JSUtil.println(\"Usage :\");\r\n            // [verbose-level]\" );\r\n            JSUtil.println(\" java JSJshop <domainDef-file-name> <problemDef-file-name> [number-of-plans]\");\r\n            JSUtil.println(\"[number-of-plans] can be 'one' or 'all'. The default value is 'one'\");\r\n            //   JSUtil.println(\"[verbose-level] can be integer from  0 to 10. The default verbose value is 0\" );\r\n            return;\r\n        }\r\n        String one = \"one\";\r\n        String all = \"all\";\r\n        int level, i;\r\n        try {\r\n            for (i = 2; i < args.length; i++) if (one.equalsIgnoreCase(args[i]))\r\n                JSJshopVars.allPlans = false;\r\n            else if (all.equalsIgnoreCase(args[i]))\r\n                JSJshopVars.allPlans = true;\r\n            else {\r\n                level = Integer.valueOf(args[i]).intValue();\r\n                JSJshopVars.flagLevel = level;\r\n                /*    \r\n            JSUtil.println(\"Invalid parameter\" );\r\n            return;*/\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            JSUtil.println(\"Invalid parameter\");\r\n            return;\r\n        }\r\n        new JSJshop(args[0], args[1]);\r\n        /*HICAP:\r\n      else if( args.length==1 && args[0].indexOf(\".shp\") >= 0)\r\n      {\r\n        new JSJshop(args[0]);\r\n      }\r\n      else \r\n      {\r\n        System.err.println(\"USAGE: java JSJshop [<file-name>.shp]\");\r\n      }\r\n*/\r\n    }\r\n\r\n    // main\r\n    /* constructors */\r\n    public JSJshop() {\r\n    }\r\n\r\n    /**\r\n     * ***** main constructor *********\r\n     */\r\n    public JSJshop(String nameDomainFile, String nameProblemFile) {\r\n        JSPairPlanTSListNodes pair;\r\n        JSListPairPlanTStateNodes allPlans;\r\n        JSUtil.println(\"Reading file \" + nameDomainFile);\r\n        if (!parserFile(nameDomainFile))\r\n            if (JSJshopVars.flagExit)\r\n                System.exit(0);\r\n            else\r\n                return;\r\n        JSUtil.println(\"Domain file parsed successfully\");\r\n        JSUtil.println(\"Reading file \" + nameProblemFile);\r\n        if (!parserFile(nameProblemFile))\r\n            if (JSJshopVars.flagExit)\r\n                System.exit(0);\r\n            else\r\n                return;\r\n        JSUtil.println(\"Problem file parsed successfully\");\r\n        for (int k = 0; k < probSet.size(); k++) {\r\n            prob = (JSPlanningProblem) probSet.elementAt(k);\r\n            JSUtil.println(\"Solving Problem :\" + prob.Name());\r\n            allPlans = dom.solveAll(prob, JSJshopVars.allPlans);\r\n            if (allPlans.isEmpty()) {\r\n                // Return the failing solution to HICAP\r\n                sol = new JSPlan();\r\n                sol.assignFailure();\r\n                solution = new JSPairPlanTSListNodes(new JSPairPlanTState(sol, new JSTState()), new Vector());\r\n                JSUtil.println(\"0 plans found\");\r\n            } else {\r\n                // Return the first solution to HICAP\r\n                solution = (JSPairPlanTSListNodes) allPlans.elementAt(0);\r\n                sol = solution.planS().plan();\r\n                JSUtil.println(allPlans.size() + \" plans found.\");\r\n                if (JSJshopVars.flagLevel > 0) {\r\n                    JSUtil.println(\"********* PLANS *******\");\r\n                    for (int i = 0; i < allPlans.size(); i++) {\r\n                        JSUtil.println(\"Plan # \" + (i + 1));\r\n                        pair = (JSPairPlanTSListNodes) allPlans.elementAt(i);\r\n                        //.print();\r\n                        pair.planS().plan().printPlan();\r\n                        // pair.print();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    /*HICAP:   \r\n    public\r\n    JSJshop( String nameFile, NeoEditor aNE, JSTaskAtom pred)\r\n    {\r\n      this.aNeoEditor = aNE;\r\n      setFile( nameFile, pred);\r\n      \r\n    }\r\n*/\r\n    public JSJshop(String nameFile, JSTaskAtom pred) {\r\n        setFile(nameFile, pred);\r\n    }\r\n\r\n    public JSJshopNode getTree() {\r\n        return tree;\r\n    }\r\n\r\n    public JSPairPlanTSListNodes getSolution() {\r\n        return solution;\r\n    }\r\n\r\n    public JSListLogicalAtoms getAddList() {\r\n        if (tree == null)\r\n            return null;\r\n        return solution.planS().tState().addList();\r\n    }\r\n\r\n    public JSListLogicalAtoms getDeleteList() {\r\n        if (tree == null)\r\n            return null;\r\n        return solution.planS().tState().deleteList();\r\n    }\r\n\r\n    /*==== solves planning problem for input file ====*/\r\n    public JSPairPlanTSListNodes setFile(String nameFile, JSTaskAtom pred) {\r\n        JSPairPlanTSListNodes pair;\r\n        Vector listNodes = new Vector();\r\n        JSJshopVars.VarCounter = 0;\r\n        //JSUtil.flag2(nameFile+\" will be parsered\");\r\n        parserFile(nameFile);\r\n        /*HICAP: prob.assignState(aNeoEditor.translateState());*/\r\n        /*HICAP: prob.makeTask(pred);*/\r\n        JSUtil.flag(\"File parsed\");\r\n        dom.print();\r\n        JSUtil.flag(\"<- domain\");\r\n        prob.print();\r\n        JSUtil.flag(\"<- problem\");\r\n        JSJshopVars.allPlans = false;\r\n        JSListPairPlanTStateNodes listPairs = dom.solveAll(prob, JSJshopVars.allPlans);\r\n        if (listPairs.size() == 0)\r\n            return null;\r\n        else\r\n            pair = (JSPairPlanTSListNodes) listPairs.elementAt(0);\r\n        JSUtil.flag(\"**After planning\");\r\n        sol = pair.planS().plan();\r\n        if (sol.isFailure()) {\r\n            JSUtil.print(\"*NO* SOLUTION FOUND\");\r\n            return null;\r\n        } else {\r\n            JSUtil.print(\"SOLUTION FOUND\");\r\n            pair.planS().tState().print();\r\n            JSUtil.println(\"***************FINAL SOLUTION*******\");\r\n            sol.print();\r\n            JSUtil.println(\"********* list-tree FINAL SOLUTION*******\");\r\n            JSTaskAtom ta;\r\n            Vector listT;\r\n            JSJshopNode node;\r\n            listNodes = pair.listNodes();\r\n            for (int i = 0; i < listNodes.size(); i++) {\r\n                node = (JSJshopNode) listNodes.elementAt(i);\r\n                node.print2();\r\n            }\r\n            // we assume that there is only a single task\r\n            // at the top level. If more than 1 task\r\n            // must be reduced at the top level, listNodes\r\n            // contain the list of trees (one for each task).\r\n            // Whereas this does not affect SHOP, HICAP assumes\r\n            // that it receives a single task at the top level\r\n            //tree.print();\r\n            //listNodes = pair.listNodes();\r\n            //pair.print();\r\n            //JSJshopNode node;\r\n            node = (JSJshopNode) listNodes.elementAt(listNodes.size() - 1);\r\n            // last element must be the root\r\n            listNodes.removeElement(node);\r\n            tree = new JSJshopNode(node, listNodes);\r\n            JSUtil.println(\"********* tree FINAL SOLUTION*******\");\r\n            tree.print();\r\n            solution = pair;\r\n            return pair;\r\n        }\r\n        // solution found\r\n    }\r\n\r\n    // setFile\r\n    public void testParser() {\r\n        try {\r\n            FileReader fr = new FileReader(\"farp.shp\");\r\n            StreamTokenizer tokenizer = new StreamTokenizer(fr);\r\n            JSUtil.initParseTable(tokenizer);\r\n            while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {\r\n                if (tokenizer.ttype == StreamTokenizer.TT_NUMBER) {\r\n                    System.err.print(new Double(tokenizer.nval).toString() + \" \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.leftPar) {\r\n                    System.err.print(\"( \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                    System.err.print(\") \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.colon) {\r\n                    System.err.print(\": \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.semicolon) {\r\n                    System.err.print(\"; \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.apostrophe) {\r\n                    System.err.print(\"' \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.exclamation) {\r\n                    System.err.print(\"! \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                    System.err.print(\"? \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.minus) {\r\n                    System.err.print(\"- \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.lessT) {\r\n                    System.err.print(\"< \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    System.err.print(\"= \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                    System.err.print(\"> \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.plus) {\r\n                    System.err.print(\"+ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.backquote) {\r\n                    System.err.print(\"` \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.slash) {\r\n                    System.err.print(\"/ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.coma) {\r\n                    System.err.print(\", \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.astherisk) {\r\n                    System.err.print(\"* \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.rightBrac) {\r\n                    System.err.print(\"] \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.leftBrac) {\r\n                    System.err.print(\"[ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.verticalL) {\r\n                    System.err.print(\"| \");\r\n                }\r\n                if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                    System.err.print(tokenizer.sval + \" \");\r\n                }\r\n            }\r\n            fr.close();\r\n            //JSUtil.flag(\"End of parsing\");\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public boolean parserFile(String libraryFile) {\r\n        String libraryDirectory = \".\";\r\n        try {\r\n            FileReader fr = new FileReader(libraryFile);\r\n            StreamTokenizer tokenizer = new StreamTokenizer(fr);\r\n            tokenizer.lowerCaseMode(true);\r\n            JSUtil.initParseTable(tokenizer);\r\n            if (fr == null) {\r\n                JSUtil.println(\"Can not open file : \" + libraryFile);\r\n                return false;\r\n            }\r\n            while (tokenizer.nextToken() != tokenizer.TT_EOF) processToken(tokenizer);\r\n            fr.close();\r\n        } catch (IOException e) {\r\n            System.out.println(\"Error in readFile() : \" + e);\r\n            return false;\r\n        } catch (JSParserError parserError) {\r\n            System.out.println(\"Error in parsing file\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public BufferedReader getBufferedReader(String dir, String file) {\r\n        return getBufferedReader(dir, file);\r\n    }\r\n\r\n    public BufferedReader getBufferedReader(String dir, String file, JApplet applet) {\r\n        if (file == null)\r\n            return null;\r\n        BufferedReader br = null;\r\n        FileInputStream libraryFileInputStream = null;\r\n        InputStream conn = null;\r\n        String line;\r\n        try {\r\n            if (applet != null) {\r\n                URL url = getAppletURL(file, applet);\r\n                if (url == null) {\r\n                    System.err.println(\"Util.getBufferedReader() error: cannot get URL\");\r\n                    return null;\r\n                } else {\r\n                    conn = url.openStream();\r\n                    if (conn == null) {\r\n                        System.err.println(\"Util.getBufferedReader() error: cannot open URL\");\r\n                        return null;\r\n                    }\r\n                }\r\n            } else // is applet\r\n            // is application\r\n            {\r\n                libraryFileInputStream = new FileInputStream(dir + File.separator + file);\r\n            }\r\n        } catch (IOException e) {\r\n            System.err.println(\"Error 1 in Util.getBufferedReader : \" + e);\r\n            return null;\r\n        }\r\n        if (applet != null) {\r\n            br = new BufferedReader(new InputStreamReader(conn));\r\n        } else // application\r\n        {\r\n            try {\r\n                br = new BufferedReader(new InputStreamReader(libraryFileInputStream, System.getProperty(\"file.encoding\")));\r\n            } catch (UnsupportedEncodingException e) {\r\n                System.err.println(\"Error 2 in Util.getBufferedReader : \" + e);\r\n                return null;\r\n            }\r\n        }\r\n        return br;\r\n    }\r\n\r\n    // getBufferedReader\r\n    public URL getAppletURL(String file, JApplet applet) {\r\n        try {\r\n            return (new URL(applet.getCodeBase() + file));\r\n        } catch (MalformedURLException e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public void processToken(StreamTokenizer tokenizer) {\r\n        if (tokenizer.ttype == JSJshopVars.leftPar) {\r\n            if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \"Expected 'defdomain or defproblem' \"))\r\n                //return;\r\n                throw new JSParserError();\r\n            tokenizer.pushBack();\r\n            String w = JSUtil.readWord(tokenizer, \"JSJshop>>processToken\");\r\n            if (w.equals(\"%%%\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (w.equalsIgnoreCase(\"defdomain\")) {\r\n                dom = new JSPlanningDomain(tokenizer);\r\n                return;\r\n            } else {\r\n                if (w.equalsIgnoreCase(\"defproblem\")) {\r\n                    prob = new JSPlanningProblem(tokenizer);\r\n                    probSet.addElement(prob);\r\n                    return;\r\n                }\r\n            }\r\n            System.err.println(\"Line : \" + tokenizer.lineno() + \" Expecting defdomain or defproblem\");\r\n            //return;\r\n            throw new JSParserError();\r\n        } else {\r\n            System.err.println(\"Line : \" + tokenizer.lineno() + \" Expected '('\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public JSPlanningDomain dom() {\r\n        return dom;\r\n    }\r\n\r\n    public JSPlanningProblem prob() {\r\n        return prob;\r\n    }\r\n\r\n    public JSPlan sol() {\r\n        return sol;\r\n    }\r\n\r\n    public JSJshopNode tree() {\r\n        return tree;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSJshopTest3.java",
		"test_prompt": "// JSJshopTest3.java\npackage umd.cs.shop;\n\n/*HICAP import nrl.aic.hicap.*;*/\r\nimport java.util.*;\nimport java.io.*;\nimport java.lang.*;\nimport javax.swing.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSJshop}.\n* It contains ten unit test cases for the {@link JSJshop#sol()} method.\n*/\nclass JSJshopTest3 {"
	},
	{
		"original_code": "// JSJshop.java\npackage umd.cs.shop;\r\n\r\n/*HICAP import nrl.aic.hicap.*;*/\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\nimport javax.swing.*;\r\nimport java.net.*;\r\n\r\n//The main constructor of this class is JSJshop(String nameFile). This\r\n//constructor will open and parse the <file> named nameFile and solves the\r\n//problem  stated in it. It assumes that the file contains a single problem\r\n// i.e., \"make-problem\" and a single domain, i.e., \"make-domain\". If several\r\n// domains and problems are given it will parse all of them and solve the\r\n// last problem for the last domain.\r\npublic final class JSJshop {\r\n\r\n    /*HICAP*/\r\n    /*==== class variables ====*/\r\n    /*HICAP*/\r\n    public static boolean corbaToHicap = false;\r\n\r\n    /*HICAP*/\r\n    public static JApplet applet;\r\n\r\n    /* instance variables */\r\n    private JSPlanningDomain dom;\r\n\r\n    private JSPlanningProblem prob;\r\n\r\n    private JSListPlanningProblem probSet = new JSListPlanningProblem();\r\n\r\n    private JSPlan sol;\r\n\r\n    private JSJshopNode tree = null;\r\n\r\n    private JSPairPlanTSListNodes solution;\r\n\r\n    /*HICAP:    private NeoEditor aNeoEditor;*/\r\n    /*====  main ====*/\r\n    public static void main(String[] args) {\r\n        if (args.length < 2 || args.length > 4) {\r\n            JSUtil.println(\"Usage :\");\r\n            // [verbose-level]\" );\r\n            JSUtil.println(\" java JSJshop <domainDef-file-name> <problemDef-file-name> [number-of-plans]\");\r\n            JSUtil.println(\"[number-of-plans] can be 'one' or 'all'. The default value is 'one'\");\r\n            //   JSUtil.println(\"[verbose-level] can be integer from  0 to 10. The default verbose value is 0\" );\r\n            return;\r\n        }\r\n        String one = \"one\";\r\n        String all = \"all\";\r\n        int level, i;\r\n        try {\r\n            for (i = 2; i < args.length; i++) if (one.equalsIgnoreCase(args[i]))\r\n                JSJshopVars.allPlans = false;\r\n            else if (all.equalsIgnoreCase(args[i]))\r\n                JSJshopVars.allPlans = true;\r\n            else {\r\n                level = Integer.valueOf(args[i]).intValue();\r\n                JSJshopVars.flagLevel = level;\r\n                /*    \r\n            JSUtil.println(\"Invalid parameter\" );\r\n            return;*/\r\n            }\r\n        } catch (NumberFormatException e) {\r\n            JSUtil.println(\"Invalid parameter\");\r\n            return;\r\n        }\r\n        new JSJshop(args[0], args[1]);\r\n        /*HICAP:\r\n      else if( args.length==1 && args[0].indexOf(\".shp\") >= 0)\r\n      {\r\n        new JSJshop(args[0]);\r\n      }\r\n      else \r\n      {\r\n        System.err.println(\"USAGE: java JSJshop [<file-name>.shp]\");\r\n      }\r\n*/\r\n    }\r\n\r\n    // main\r\n    /* constructors */\r\n    public JSJshop() {\r\n    }\r\n\r\n    /**\r\n     * ***** main constructor *********\r\n     */\r\n    public JSJshop(String nameDomainFile, String nameProblemFile) {\r\n        JSPairPlanTSListNodes pair;\r\n        JSListPairPlanTStateNodes allPlans;\r\n        JSUtil.println(\"Reading file \" + nameDomainFile);\r\n        if (!parserFile(nameDomainFile))\r\n            if (JSJshopVars.flagExit)\r\n                System.exit(0);\r\n            else\r\n                return;\r\n        JSUtil.println(\"Domain file parsed successfully\");\r\n        JSUtil.println(\"Reading file \" + nameProblemFile);\r\n        if (!parserFile(nameProblemFile))\r\n            if (JSJshopVars.flagExit)\r\n                System.exit(0);\r\n            else\r\n                return;\r\n        JSUtil.println(\"Problem file parsed successfully\");\r\n        for (int k = 0; k < probSet.size(); k++) {\r\n            prob = (JSPlanningProblem) probSet.elementAt(k);\r\n            JSUtil.println(\"Solving Problem :\" + prob.Name());\r\n            allPlans = dom.solveAll(prob, JSJshopVars.allPlans);\r\n            if (allPlans.isEmpty()) {\r\n                // Return the failing solution to HICAP\r\n                sol = new JSPlan();\r\n                sol.assignFailure();\r\n                solution = new JSPairPlanTSListNodes(new JSPairPlanTState(sol, new JSTState()), new Vector());\r\n                JSUtil.println(\"0 plans found\");\r\n            } else {\r\n                // Return the first solution to HICAP\r\n                solution = (JSPairPlanTSListNodes) allPlans.elementAt(0);\r\n                sol = solution.planS().plan();\r\n                JSUtil.println(allPlans.size() + \" plans found.\");\r\n                if (JSJshopVars.flagLevel > 0) {\r\n                    JSUtil.println(\"********* PLANS *******\");\r\n                    for (int i = 0; i < allPlans.size(); i++) {\r\n                        JSUtil.println(\"Plan # \" + (i + 1));\r\n                        pair = (JSPairPlanTSListNodes) allPlans.elementAt(i);\r\n                        //.print();\r\n                        pair.planS().plan().printPlan();\r\n                        // pair.print();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    /*HICAP:   \r\n    public\r\n    JSJshop( String nameFile, NeoEditor aNE, JSTaskAtom pred)\r\n    {\r\n      this.aNeoEditor = aNE;\r\n      setFile( nameFile, pred);\r\n      \r\n    }\r\n*/\r\n    public JSJshop(String nameFile, JSTaskAtom pred) {\r\n        setFile(nameFile, pred);\r\n    }\r\n\r\n    public JSJshopNode getTree() {\r\n        return tree;\r\n    }\r\n\r\n    public JSPairPlanTSListNodes getSolution() {\r\n        return solution;\r\n    }\r\n\r\n    public JSListLogicalAtoms getAddList() {\r\n        if (tree == null)\r\n            return null;\r\n        return solution.planS().tState().addList();\r\n    }\r\n\r\n    public JSListLogicalAtoms getDeleteList() {\r\n        if (tree == null)\r\n            return null;\r\n        return solution.planS().tState().deleteList();\r\n    }\r\n\r\n    /*==== solves planning problem for input file ====*/\r\n    public JSPairPlanTSListNodes setFile(String nameFile, JSTaskAtom pred) {\r\n        JSPairPlanTSListNodes pair;\r\n        Vector listNodes = new Vector();\r\n        JSJshopVars.VarCounter = 0;\r\n        //JSUtil.flag2(nameFile+\" will be parsered\");\r\n        parserFile(nameFile);\r\n        /*HICAP: prob.assignState(aNeoEditor.translateState());*/\r\n        /*HICAP: prob.makeTask(pred);*/\r\n        JSUtil.flag(\"File parsed\");\r\n        dom.print();\r\n        JSUtil.flag(\"<- domain\");\r\n        prob.print();\r\n        JSUtil.flag(\"<- problem\");\r\n        JSJshopVars.allPlans = false;\r\n        JSListPairPlanTStateNodes listPairs = dom.solveAll(prob, JSJshopVars.allPlans);\r\n        if (listPairs.size() == 0)\r\n            return null;\r\n        else\r\n            pair = (JSPairPlanTSListNodes) listPairs.elementAt(0);\r\n        JSUtil.flag(\"**After planning\");\r\n        sol = pair.planS().plan();\r\n        if (sol.isFailure()) {\r\n            JSUtil.print(\"*NO* SOLUTION FOUND\");\r\n            return null;\r\n        } else {\r\n            JSUtil.print(\"SOLUTION FOUND\");\r\n            pair.planS().tState().print();\r\n            JSUtil.println(\"***************FINAL SOLUTION*******\");\r\n            sol.print();\r\n            JSUtil.println(\"********* list-tree FINAL SOLUTION*******\");\r\n            JSTaskAtom ta;\r\n            Vector listT;\r\n            JSJshopNode node;\r\n            listNodes = pair.listNodes();\r\n            for (int i = 0; i < listNodes.size(); i++) {\r\n                node = (JSJshopNode) listNodes.elementAt(i);\r\n                node.print2();\r\n            }\r\n            // we assume that there is only a single task\r\n            // at the top level. If more than 1 task\r\n            // must be reduced at the top level, listNodes\r\n            // contain the list of trees (one for each task).\r\n            // Whereas this does not affect SHOP, HICAP assumes\r\n            // that it receives a single task at the top level\r\n            //tree.print();\r\n            //listNodes = pair.listNodes();\r\n            //pair.print();\r\n            //JSJshopNode node;\r\n            node = (JSJshopNode) listNodes.elementAt(listNodes.size() - 1);\r\n            // last element must be the root\r\n            listNodes.removeElement(node);\r\n            tree = new JSJshopNode(node, listNodes);\r\n            JSUtil.println(\"********* tree FINAL SOLUTION*******\");\r\n            tree.print();\r\n            solution = pair;\r\n            return pair;\r\n        }\r\n        // solution found\r\n    }\r\n\r\n    // setFile\r\n    public void testParser() {\r\n        try {\r\n            FileReader fr = new FileReader(\"farp.shp\");\r\n            StreamTokenizer tokenizer = new StreamTokenizer(fr);\r\n            JSUtil.initParseTable(tokenizer);\r\n            while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {\r\n                if (tokenizer.ttype == StreamTokenizer.TT_NUMBER) {\r\n                    System.err.print(new Double(tokenizer.nval).toString() + \" \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.leftPar) {\r\n                    System.err.print(\"( \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.rightPar) {\r\n                    System.err.print(\") \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.colon) {\r\n                    System.err.print(\": \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.semicolon) {\r\n                    System.err.print(\"; \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.apostrophe) {\r\n                    System.err.print(\"' \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.exclamation) {\r\n                    System.err.print(\"! \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.interrogation) {\r\n                    System.err.print(\"? \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.minus) {\r\n                    System.err.print(\"- \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.lessT) {\r\n                    System.err.print(\"< \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.equalT) {\r\n                    System.err.print(\"= \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.greaterT) {\r\n                    System.err.print(\"> \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.plus) {\r\n                    System.err.print(\"+ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.backquote) {\r\n                    System.err.print(\"` \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.slash) {\r\n                    System.err.print(\"/ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.coma) {\r\n                    System.err.print(\", \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.astherisk) {\r\n                    System.err.print(\"* \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.rightBrac) {\r\n                    System.err.print(\"] \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.leftBrac) {\r\n                    System.err.print(\"[ \");\r\n                }\r\n                if (tokenizer.ttype == JSJshopVars.verticalL) {\r\n                    System.err.print(\"| \");\r\n                }\r\n                if (tokenizer.ttype == tokenizer.TT_WORD) {\r\n                    System.err.print(tokenizer.sval + \" \");\r\n                }\r\n            }\r\n            fr.close();\r\n            //JSUtil.flag(\"End of parsing\");\r\n        } catch (Exception e) {\r\n            JSUtil.println(\"Error reading control parameters: \" + e);\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public boolean parserFile(String libraryFile) {\r\n        String libraryDirectory = \".\";\r\n        try {\r\n            FileReader fr = new FileReader(libraryFile);\r\n            StreamTokenizer tokenizer = new StreamTokenizer(fr);\r\n            tokenizer.lowerCaseMode(true);\r\n            JSUtil.initParseTable(tokenizer);\r\n            if (fr == null) {\r\n                JSUtil.println(\"Can not open file : \" + libraryFile);\r\n                return false;\r\n            }\r\n            while (tokenizer.nextToken() != tokenizer.TT_EOF) processToken(tokenizer);\r\n            fr.close();\r\n        } catch (IOException e) {\r\n            System.out.println(\"Error in readFile() : \" + e);\r\n            return false;\r\n        } catch (JSParserError parserError) {\r\n            System.out.println(\"Error in parsing file\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public BufferedReader getBufferedReader(String dir, String file) {\r\n        return getBufferedReader(dir, file);\r\n    }\r\n\r\n    public BufferedReader getBufferedReader(String dir, String file, JApplet applet) {\r\n        if (file == null)\r\n            return null;\r\n        BufferedReader br = null;\r\n        FileInputStream libraryFileInputStream = null;\r\n        InputStream conn = null;\r\n        String line;\r\n        try {\r\n            if (applet != null) {\r\n                URL url = getAppletURL(file, applet);\r\n                if (url == null) {\r\n                    System.err.println(\"Util.getBufferedReader() error: cannot get URL\");\r\n                    return null;\r\n                } else {\r\n                    conn = url.openStream();\r\n                    if (conn == null) {\r\n                        System.err.println(\"Util.getBufferedReader() error: cannot open URL\");\r\n                        return null;\r\n                    }\r\n                }\r\n            } else // is applet\r\n            // is application\r\n            {\r\n                libraryFileInputStream = new FileInputStream(dir + File.separator + file);\r\n            }\r\n        } catch (IOException e) {\r\n            System.err.println(\"Error 1 in Util.getBufferedReader : \" + e);\r\n            return null;\r\n        }\r\n        if (applet != null) {\r\n            br = new BufferedReader(new InputStreamReader(conn));\r\n        } else // application\r\n        {\r\n            try {\r\n                br = new BufferedReader(new InputStreamReader(libraryFileInputStream, System.getProperty(\"file.encoding\")));\r\n            } catch (UnsupportedEncodingException e) {\r\n                System.err.println(\"Error 2 in Util.getBufferedReader : \" + e);\r\n                return null;\r\n            }\r\n        }\r\n        return br;\r\n    }\r\n\r\n    // getBufferedReader\r\n    public URL getAppletURL(String file, JApplet applet) {\r\n        try {\r\n            return (new URL(applet.getCodeBase() + file));\r\n        } catch (MalformedURLException e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public void processToken(StreamTokenizer tokenizer) {\r\n        if (tokenizer.ttype == JSJshopVars.leftPar) {\r\n            if (!JSUtil.expectTokenType(tokenizer.TT_WORD, tokenizer, \"Expected 'defdomain or defproblem' \"))\r\n                //return;\r\n                throw new JSParserError();\r\n            tokenizer.pushBack();\r\n            String w = JSUtil.readWord(tokenizer, \"JSJshop>>processToken\");\r\n            if (w.equals(\"%%%\"))\r\n                //return;\r\n                throw new JSParserError();\r\n            if (w.equalsIgnoreCase(\"defdomain\")) {\r\n                dom = new JSPlanningDomain(tokenizer);\r\n                return;\r\n            } else {\r\n                if (w.equalsIgnoreCase(\"defproblem\")) {\r\n                    prob = new JSPlanningProblem(tokenizer);\r\n                    probSet.addElement(prob);\r\n                    return;\r\n                }\r\n            }\r\n            System.err.println(\"Line : \" + tokenizer.lineno() + \" Expecting defdomain or defproblem\");\r\n            //return;\r\n            throw new JSParserError();\r\n        } else {\r\n            System.err.println(\"Line : \" + tokenizer.lineno() + \" Expected '('\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n    }\r\n\r\n    public JSPlanningDomain dom() {\r\n        return dom;\r\n    }\r\n\r\n    public JSPlanningProblem prob() {\r\n        return prob;\r\n    }\r\n\r\n    public JSPlan sol() {\r\n        return sol;\r\n    }\r\n\r\n    public JSJshopNode tree() {\r\n        return tree;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSJshopTest4.java",
		"test_prompt": "// JSJshopTest4.java\npackage umd.cs.shop;\n\n/*HICAP import nrl.aic.hicap.*;*/\r\nimport java.util.*;\nimport java.io.*;\nimport java.lang.*;\nimport javax.swing.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSJshop}.\n* It contains ten unit test cases for the {@link JSJshop#tree()} method.\n*/\nclass JSJshopTest4 {"
	},
	{
		"original_code": "// JSAllReduction.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSAllReduction {\r\n\r\n    private JSMethod selectedMethod;\r\n\r\n    private Vector reduction;\r\n\r\n    JSAllReduction() {\r\n        super();\r\n        selectedMethod = new JSMethod();\r\n        reduction = new Vector();\r\n    }\r\n\r\n    JSAllReduction(JSMethod met, Vector red) {\r\n        super();\r\n        selectedMethod = met;\r\n        reduction = red;\r\n    }\r\n\r\n    public JSMethod selectedMethod() {\r\n        return selectedMethod;\r\n    }\r\n\r\n    public Vector reductions() {\r\n        return reduction;\r\n    }\r\n\r\n    public boolean isDummy() {\r\n        JSMethod met = this.selectedMethod();\r\n        return !met.notDummy();\r\n    }\r\n\r\n    public void print() {\r\n        selectedMethod.print();\r\n        for (int i = 0; i < reduction.size(); i++) ((JSTasks) reduction.elementAt(i)).print();\r\n    }\r\n\r\n    public void printReductions() {\r\n        for (int i = 0; i < reduction.size(); i++) {\r\n            JSUtil.print(\"#\" + (i + 1) + \"  \");\r\n            ((JSTasks) reduction.elementAt(i)).print();\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSAllReductionTest0.java",
		"test_prompt": "// JSAllReductionTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSAllReduction}.\n* It contains ten unit test cases for the {@link JSAllReduction#selectedMethod()} method.\n*/\nclass JSAllReductionTest0 {"
	},
	{
		"original_code": "// JSAllReduction.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSAllReduction {\r\n\r\n    private JSMethod selectedMethod;\r\n\r\n    private Vector reduction;\r\n\r\n    JSAllReduction() {\r\n        super();\r\n        selectedMethod = new JSMethod();\r\n        reduction = new Vector();\r\n    }\r\n\r\n    JSAllReduction(JSMethod met, Vector red) {\r\n        super();\r\n        selectedMethod = met;\r\n        reduction = red;\r\n    }\r\n\r\n    public JSMethod selectedMethod() {\r\n        return selectedMethod;\r\n    }\r\n\r\n    public Vector reductions() {\r\n        return reduction;\r\n    }\r\n\r\n    public boolean isDummy() {\r\n        JSMethod met = this.selectedMethod();\r\n        return !met.notDummy();\r\n    }\r\n\r\n    public void print() {\r\n        selectedMethod.print();\r\n        for (int i = 0; i < reduction.size(); i++) ((JSTasks) reduction.elementAt(i)).print();\r\n    }\r\n\r\n    public void printReductions() {\r\n        for (int i = 0; i < reduction.size(); i++) {\r\n            JSUtil.print(\"#\" + (i + 1) + \"  \");\r\n            ((JSTasks) reduction.elementAt(i)).print();\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSAllReductionTest1.java",
		"test_prompt": "// JSAllReductionTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSAllReduction}.\n* It contains ten unit test cases for the {@link JSAllReduction#reductions()} method.\n*/\nclass JSAllReductionTest1 {"
	},
	{
		"original_code": "// JSAllReduction.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\n\r\npublic class JSAllReduction {\r\n\r\n    private JSMethod selectedMethod;\r\n\r\n    private Vector reduction;\r\n\r\n    JSAllReduction() {\r\n        super();\r\n        selectedMethod = new JSMethod();\r\n        reduction = new Vector();\r\n    }\r\n\r\n    JSAllReduction(JSMethod met, Vector red) {\r\n        super();\r\n        selectedMethod = met;\r\n        reduction = red;\r\n    }\r\n\r\n    public JSMethod selectedMethod() {\r\n        return selectedMethod;\r\n    }\r\n\r\n    public Vector reductions() {\r\n        return reduction;\r\n    }\r\n\r\n    public boolean isDummy() {\r\n        JSMethod met = this.selectedMethod();\r\n        return !met.notDummy();\r\n    }\r\n\r\n    public void print() {\r\n        selectedMethod.print();\r\n        for (int i = 0; i < reduction.size(); i++) ((JSTasks) reduction.elementAt(i)).print();\r\n    }\r\n\r\n    public void printReductions() {\r\n        for (int i = 0; i < reduction.size(); i++) {\r\n            JSUtil.print(\"#\" + (i + 1) + \"  \");\r\n            ((JSTasks) reduction.elementAt(i)).print();\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSAllReductionTest2.java",
		"test_prompt": "// JSAllReductionTest2.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSAllReduction}.\n* It contains ten unit test cases for the {@link JSAllReduction#isDummy()} method.\n*/\nclass JSAllReductionTest2 {"
	},
	{
		"original_code": "// JSPlanningProblem.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\n\r\npublic class JSPlanningProblem {\r\n\r\n    /*==== instance variables ====*/\r\n    private String name;\r\n\r\n    private JSState state;\r\n\r\n    private JSTasks tasks;\r\n\r\n    private String domainName;\r\n\r\n    /*==== constructor ====*/\r\n    JSPlanningProblem(StreamTokenizer tokenizer) {\r\n        name = JSUtil.readWord(tokenizer, \"Expecting Planning Problem name\");\r\n        if (name.equals(\"%%%\")) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting Planning Problem name\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        domainName = JSUtil.readWord(tokenizer, \"Planning Problem\");\r\n        if (domainName.equals(\"%%%\")) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting Planning Domain name\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        state = new JSState(tokenizer);\r\n        tasks = new JSTasks(tokenizer);\r\n        if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for PlanningProblem\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        // JSUtil.flagParser(\"Planning problem parsed succesfully\");\r\n    }\r\n\r\n    public void assignState(JSState aState) {\r\n        state = aState;\r\n    }\r\n\r\n    public void makeTask(JSTaskAtom pred) {\r\n        tasks = new JSTasks();\r\n        tasks.addElement(pred);\r\n    }\r\n\r\n    public JSState state() {\r\n        return state;\r\n    }\r\n\r\n    public JSTasks tasks() {\r\n        return tasks;\r\n    }\r\n\r\n    public String Name() {\r\n        return name;\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\"make-problem \");\r\n        JSUtil.print(name);\r\n        JSUtil.println(domainName);\r\n        state.print();\r\n        tasks.print();\r\n        JSUtil.println(\")\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPlanningProblemTest0.java",
		"test_prompt": "// JSPlanningProblemTest0.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPlanningProblem}.\n* It contains ten unit test cases for the {@link JSPlanningProblem#state()} method.\n*/\nclass JSPlanningProblemTest0 {"
	},
	{
		"original_code": "// JSPlanningProblem.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\n\r\npublic class JSPlanningProblem {\r\n\r\n    /*==== instance variables ====*/\r\n    private String name;\r\n\r\n    private JSState state;\r\n\r\n    private JSTasks tasks;\r\n\r\n    private String domainName;\r\n\r\n    /*==== constructor ====*/\r\n    JSPlanningProblem(StreamTokenizer tokenizer) {\r\n        name = JSUtil.readWord(tokenizer, \"Expecting Planning Problem name\");\r\n        if (name.equals(\"%%%\")) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting Planning Problem name\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        domainName = JSUtil.readWord(tokenizer, \"Planning Problem\");\r\n        if (domainName.equals(\"%%%\")) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting Planning Domain name\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        state = new JSState(tokenizer);\r\n        tasks = new JSTasks(tokenizer);\r\n        if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for PlanningProblem\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        // JSUtil.flagParser(\"Planning problem parsed succesfully\");\r\n    }\r\n\r\n    public void assignState(JSState aState) {\r\n        state = aState;\r\n    }\r\n\r\n    public void makeTask(JSTaskAtom pred) {\r\n        tasks = new JSTasks();\r\n        tasks.addElement(pred);\r\n    }\r\n\r\n    public JSState state() {\r\n        return state;\r\n    }\r\n\r\n    public JSTasks tasks() {\r\n        return tasks;\r\n    }\r\n\r\n    public String Name() {\r\n        return name;\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\"make-problem \");\r\n        JSUtil.print(name);\r\n        JSUtil.println(domainName);\r\n        state.print();\r\n        tasks.print();\r\n        JSUtil.println(\")\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPlanningProblemTest1.java",
		"test_prompt": "// JSPlanningProblemTest1.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPlanningProblem}.\n* It contains ten unit test cases for the {@link JSPlanningProblem#tasks()} method.\n*/\nclass JSPlanningProblemTest1 {"
	},
	{
		"original_code": "// JSPlanningProblem.java\npackage umd.cs.shop;\r\n\r\nimport java.io.*;\r\n\r\npublic class JSPlanningProblem {\r\n\r\n    /*==== instance variables ====*/\r\n    private String name;\r\n\r\n    private JSState state;\r\n\r\n    private JSTasks tasks;\r\n\r\n    private String domainName;\r\n\r\n    /*==== constructor ====*/\r\n    JSPlanningProblem(StreamTokenizer tokenizer) {\r\n        name = JSUtil.readWord(tokenizer, \"Expecting Planning Problem name\");\r\n        if (name.equals(\"%%%\")) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting Planning Problem name\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        domainName = JSUtil.readWord(tokenizer, \"Planning Problem\");\r\n        if (domainName.equals(\"%%%\")) {\r\n            JSUtil.println(\"Line : \" + tokenizer.lineno() + \" Expecting Planning Domain name\");\r\n            //return;\r\n            throw new JSParserError();\r\n        }\r\n        state = new JSState(tokenizer);\r\n        tasks = new JSTasks(tokenizer);\r\n        if (!JSUtil.expectTokenType(JSJshopVars.rightPar, tokenizer, \"Expecting ')' for PlanningProblem\"))\r\n            //return;\r\n            throw new JSParserError();\r\n        // JSUtil.flagParser(\"Planning problem parsed succesfully\");\r\n    }\r\n\r\n    public void assignState(JSState aState) {\r\n        state = aState;\r\n    }\r\n\r\n    public void makeTask(JSTaskAtom pred) {\r\n        tasks = new JSTasks();\r\n        tasks.addElement(pred);\r\n    }\r\n\r\n    public JSState state() {\r\n        return state;\r\n    }\r\n\r\n    public JSTasks tasks() {\r\n        return tasks;\r\n    }\r\n\r\n    public String Name() {\r\n        return name;\r\n    }\r\n\r\n    public void print() {\r\n        JSUtil.print(\"(\");\r\n        JSUtil.print(\"make-problem \");\r\n        JSUtil.print(name);\r\n        JSUtil.println(domainName);\r\n        state.print();\r\n        tasks.print();\r\n        JSUtil.println(\")\");\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSPlanningProblemTest2.java",
		"test_prompt": "// JSPlanningProblemTest2.java\npackage umd.cs.shop;\n\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSPlanningProblem}.\n* It contains ten unit test cases for the {@link JSPlanningProblem#Name()} method.\n*/\nclass JSPlanningProblemTest2 {"
	},
	{
		"original_code": "// JSState.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSState extends JSListLogicalAtoms {\r\n\r\n    /*==== instance variables ====*/\r\n    private String label;\r\n\r\n    public JSState() {\r\n        super();\r\n    }\r\n\r\n    public JSState(StreamTokenizer tokenizer) {\r\n        super(tokenizer);\r\n        return;\r\n    }\r\n\r\n    // Added 25/01/2001\r\n    public void addElementsToState(JSListLogicalAtoms s) {\r\n        /* Appends the contents of this to the end of s */\r\n        /*for (int i =0; i<s.size(); i++)\r\n      {\r\n        this.insertElementAt(s.elementAt(i),i);\r\n      }*/\r\n        int j = 0;\r\n        for (int i = 0; i < s.size(); i++) {\r\n            if (this.contains(s.elementAt(i)))\r\n                continue;\r\n            this.insertElementAt(s.elementAt(i), j);\r\n            j++;\r\n        }\r\n    }\r\n\r\n    JSState apply(JSPlan pl) {\r\n        JSState ns = new JSState();\r\n        JSUtil.flag20(\"<STATE>.apply(<JSPlan>) not implemented yet\");\r\n        return ns;\r\n    }\r\n\r\n    JSTState applyOp(JSOperator op, JSSubstitution alpha, JSListLogicalAtoms addL, JSListLogicalAtoms delL) {\r\n        JSListLogicalAtoms add = op.addList();\r\n        JSListLogicalAtoms del = op.deleteList();\r\n        JSListLogicalAtoms opAddL = add.applySubstitutionListLogicalAtoms(alpha);\r\n        JSListLogicalAtoms opDelL = del.applySubstitutionListLogicalAtoms(alpha);\r\n        JSState ns = new JSState();\r\n        JSListLogicalAtoms nAddL = new JSListLogicalAtoms();\r\n        JSListLogicalAtoms nDelL = new JSListLogicalAtoms();\r\n        JSPredicateForm el;\r\n        if (JSJshopVars.flagLevel > 3) {\r\n            JSUtil.print(\" Matching Operator : (\");\r\n            JSUtil.print(\":Operator \");\r\n            op.head().applySubstitutionTA(alpha).print();\r\n            JSUtil.print(\"-: \");\r\n            opDelL.print();\r\n            JSUtil.print(\"+: \");\r\n            opAddL.print();\r\n            JSUtil.println(\")\");\r\n        }\r\n        //  JSUtil.flagPlanning(\"<-- ndelete list\");\r\n        for (//creates a new state\r\n        short i = 0; //creates a new state\r\n        i < this.size(); //creates a new state\r\n        i++) {\r\n            el = (JSPredicateForm) this.elementAt(i);\r\n            if (!opDelL.contains(el)) {\r\n                //   ns.insertElementAt(el, 0);// modified 22/01\r\n                ns.addElement(el);\r\n            }\r\n        }\r\n        // previously AddElements\r\n        ns.addElementsToState(opAddL);\r\n        for (//creates a new add list\r\n        short i = 0; //creates a new add list\r\n        i < addL.size(); //creates a new add list\r\n        i++) {\r\n            el = (JSPredicateForm) addL.elementAt(i);\r\n            if (!opDelL.contains(el)) {\r\n                nAddL.addElement(el);\r\n            }\r\n        }\r\n        nAddL.addElements(opAddL);\r\n        for (//creates a new del list\r\n        short i = 0; //creates a new del list\r\n        i < delL.size(); //creates a new del list\r\n        i++) {\r\n            el = (JSPredicateForm) delL.elementAt(i);\r\n            if (!opAddL.contains(el)) {\r\n                nDelL.addElement(el);\r\n            }\r\n        }\r\n        nDelL.addElements(opDelL);\r\n        if (JSJshopVars.flagLevel > 3) {\r\n            JSUtil.println(\"The resulting state :\");\r\n            ns.print();\r\n            JSUtil.println(\"-----------\");\r\n        }\r\n        return new JSTState(ns, nAddL, nDelL);\r\n    }\r\n\r\n    public JSSubstitution satisfies(JSListLogicalAtoms conds, JSSubstitution alpha, JSListAxioms axioms) //Tests if  conds can be infered from this (the current state) and axioms\r\n    //modulo the substitution alpha.\r\n    //\r\n    //If conds can be infered, it returns the first matching substitution\r\n    //\r\n    //else it returns the failure substitution (i.e., calling the method fail()\r\n    //to the returned substitution succeeds)\r\n    {\r\n        //Calls Fusun's inferencing method with parameter all set to \"false\"\r\n        JSListSubstitution satisfiers = axioms.TheoremProver(conds, this, alpha, false);\r\n        JSSubstitution answer;\r\n        if (satisfiers.fail()) {\r\n            answer = new JSSubstitution();\r\n            answer.assignFailure();\r\n        } else {\r\n            answer = (JSSubstitution) alpha.clone();\r\n            answer.addElements((JSSubstitution) satisfiers.elementAt(0));\r\n            /*  if (conds.size() >0){\r\n            this.print();\r\n             }*/\r\n        }\r\n        return answer;\r\n    }\r\n\r\n    public JSListSubstitution satisfiesAll(JSListLogicalAtoms conds, JSSubstitution alpha, JSListAxioms axioms) //Tests if  conds can be infered from this (the current state) and axioms\r\n    //modulo the substitution alpha.\r\n    //\r\n    //If conds can be infered, it returns all of the matching substitutions\r\n    //\r\n    //else it returns an empty list\r\n    {\r\n        //Calls Fusun's inferencing method with parameter all set to \"true\"\r\n        int i;\r\n        String first = conds.Label();\r\n        boolean findfirst = !first.equalsIgnoreCase(\"first\");\r\n        JSSubstitution beta;\r\n        JSListSubstitution answers = new JSListSubstitution();\r\n        JSListSubstitution satisfiers = axioms.TheoremProver(conds, this, alpha, findfirst);\r\n        for (i = 0; i < satisfiers.size(); i++) {\r\n            beta = (JSSubstitution) ((JSSubstitution) satisfiers.elementAt(i)).clone();\r\n            beta.addElements((JSSubstitution) alpha.clone());\r\n            answers.addElement(beta);\r\n        }\r\n        return answers;\r\n    }\r\n\r\n    public JSListSubstitution satisfiesTAm(JSPredicateForm t, JSSubstitution alpha) // It searches all atoms in this matching t modulo the substitution alpha.\r\n    //\r\n    // If such an atoms are found, the matching substitutions are returned.\r\n    //\r\n    // Otherwise: returns an empty list\r\n    {\r\n        JSPredicateForm el;\r\n        JSSubstitution subs;\r\n        JSListSubstitution answers = new JSListSubstitution();\r\n        if (JSJshopVars.flagLevel > 7)\r\n            System.out.println(\" \");\r\n        for (int i = 0; i < this.size(); i++) {\r\n            el = (JSPredicateForm) this.elementAt(i);\r\n            subs = t.matches(el, alpha);\r\n            if (!subs.fail()) {\r\n                if (JSJshopVars.flagLevel > 7) {\r\n                    JSUtil.println(\" Goal matches atom: \");\r\n                    el.print();\r\n                }\r\n                answers.addElement(subs);\r\n            }\r\n        }\r\n        //        JSUtil.flagPlanning(\" NO!\");\r\n        if (JSJshopVars.flagLevel > 7 && answers.isEmpty())\r\n            JSUtil.println(\" Goal does not match any atom.\");\r\n        return answers;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSStateTest0.java",
		"test_prompt": "// JSStateTest0.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSState}.\n* It contains ten unit test cases for the {@link JSState#satisfies(JSListLogicalAtoms, JSSubstitution, JSListAxioms)} method.\n*/\nclass JSStateTest0 {"
	},
	{
		"original_code": "// JSState.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSState extends JSListLogicalAtoms {\r\n\r\n    /*==== instance variables ====*/\r\n    private String label;\r\n\r\n    public JSState() {\r\n        super();\r\n    }\r\n\r\n    public JSState(StreamTokenizer tokenizer) {\r\n        super(tokenizer);\r\n        return;\r\n    }\r\n\r\n    // Added 25/01/2001\r\n    public void addElementsToState(JSListLogicalAtoms s) {\r\n        /* Appends the contents of this to the end of s */\r\n        /*for (int i =0; i<s.size(); i++)\r\n      {\r\n        this.insertElementAt(s.elementAt(i),i);\r\n      }*/\r\n        int j = 0;\r\n        for (int i = 0; i < s.size(); i++) {\r\n            if (this.contains(s.elementAt(i)))\r\n                continue;\r\n            this.insertElementAt(s.elementAt(i), j);\r\n            j++;\r\n        }\r\n    }\r\n\r\n    JSState apply(JSPlan pl) {\r\n        JSState ns = new JSState();\r\n        JSUtil.flag20(\"<STATE>.apply(<JSPlan>) not implemented yet\");\r\n        return ns;\r\n    }\r\n\r\n    JSTState applyOp(JSOperator op, JSSubstitution alpha, JSListLogicalAtoms addL, JSListLogicalAtoms delL) {\r\n        JSListLogicalAtoms add = op.addList();\r\n        JSListLogicalAtoms del = op.deleteList();\r\n        JSListLogicalAtoms opAddL = add.applySubstitutionListLogicalAtoms(alpha);\r\n        JSListLogicalAtoms opDelL = del.applySubstitutionListLogicalAtoms(alpha);\r\n        JSState ns = new JSState();\r\n        JSListLogicalAtoms nAddL = new JSListLogicalAtoms();\r\n        JSListLogicalAtoms nDelL = new JSListLogicalAtoms();\r\n        JSPredicateForm el;\r\n        if (JSJshopVars.flagLevel > 3) {\r\n            JSUtil.print(\" Matching Operator : (\");\r\n            JSUtil.print(\":Operator \");\r\n            op.head().applySubstitutionTA(alpha).print();\r\n            JSUtil.print(\"-: \");\r\n            opDelL.print();\r\n            JSUtil.print(\"+: \");\r\n            opAddL.print();\r\n            JSUtil.println(\")\");\r\n        }\r\n        //  JSUtil.flagPlanning(\"<-- ndelete list\");\r\n        for (//creates a new state\r\n        short i = 0; //creates a new state\r\n        i < this.size(); //creates a new state\r\n        i++) {\r\n            el = (JSPredicateForm) this.elementAt(i);\r\n            if (!opDelL.contains(el)) {\r\n                //   ns.insertElementAt(el, 0);// modified 22/01\r\n                ns.addElement(el);\r\n            }\r\n        }\r\n        // previously AddElements\r\n        ns.addElementsToState(opAddL);\r\n        for (//creates a new add list\r\n        short i = 0; //creates a new add list\r\n        i < addL.size(); //creates a new add list\r\n        i++) {\r\n            el = (JSPredicateForm) addL.elementAt(i);\r\n            if (!opDelL.contains(el)) {\r\n                nAddL.addElement(el);\r\n            }\r\n        }\r\n        nAddL.addElements(opAddL);\r\n        for (//creates a new del list\r\n        short i = 0; //creates a new del list\r\n        i < delL.size(); //creates a new del list\r\n        i++) {\r\n            el = (JSPredicateForm) delL.elementAt(i);\r\n            if (!opAddL.contains(el)) {\r\n                nDelL.addElement(el);\r\n            }\r\n        }\r\n        nDelL.addElements(opDelL);\r\n        if (JSJshopVars.flagLevel > 3) {\r\n            JSUtil.println(\"The resulting state :\");\r\n            ns.print();\r\n            JSUtil.println(\"-----------\");\r\n        }\r\n        return new JSTState(ns, nAddL, nDelL);\r\n    }\r\n\r\n    public JSSubstitution satisfies(JSListLogicalAtoms conds, JSSubstitution alpha, JSListAxioms axioms) //Tests if  conds can be infered from this (the current state) and axioms\r\n    //modulo the substitution alpha.\r\n    //\r\n    //If conds can be infered, it returns the first matching substitution\r\n    //\r\n    //else it returns the failure substitution (i.e., calling the method fail()\r\n    //to the returned substitution succeeds)\r\n    {\r\n        //Calls Fusun's inferencing method with parameter all set to \"false\"\r\n        JSListSubstitution satisfiers = axioms.TheoremProver(conds, this, alpha, false);\r\n        JSSubstitution answer;\r\n        if (satisfiers.fail()) {\r\n            answer = new JSSubstitution();\r\n            answer.assignFailure();\r\n        } else {\r\n            answer = (JSSubstitution) alpha.clone();\r\n            answer.addElements((JSSubstitution) satisfiers.elementAt(0));\r\n            /*  if (conds.size() >0){\r\n            this.print();\r\n             }*/\r\n        }\r\n        return answer;\r\n    }\r\n\r\n    public JSListSubstitution satisfiesAll(JSListLogicalAtoms conds, JSSubstitution alpha, JSListAxioms axioms) //Tests if  conds can be infered from this (the current state) and axioms\r\n    //modulo the substitution alpha.\r\n    //\r\n    //If conds can be infered, it returns all of the matching substitutions\r\n    //\r\n    //else it returns an empty list\r\n    {\r\n        //Calls Fusun's inferencing method with parameter all set to \"true\"\r\n        int i;\r\n        String first = conds.Label();\r\n        boolean findfirst = !first.equalsIgnoreCase(\"first\");\r\n        JSSubstitution beta;\r\n        JSListSubstitution answers = new JSListSubstitution();\r\n        JSListSubstitution satisfiers = axioms.TheoremProver(conds, this, alpha, findfirst);\r\n        for (i = 0; i < satisfiers.size(); i++) {\r\n            beta = (JSSubstitution) ((JSSubstitution) satisfiers.elementAt(i)).clone();\r\n            beta.addElements((JSSubstitution) alpha.clone());\r\n            answers.addElement(beta);\r\n        }\r\n        return answers;\r\n    }\r\n\r\n    public JSListSubstitution satisfiesTAm(JSPredicateForm t, JSSubstitution alpha) // It searches all atoms in this matching t modulo the substitution alpha.\r\n    //\r\n    // If such an atoms are found, the matching substitutions are returned.\r\n    //\r\n    // Otherwise: returns an empty list\r\n    {\r\n        JSPredicateForm el;\r\n        JSSubstitution subs;\r\n        JSListSubstitution answers = new JSListSubstitution();\r\n        if (JSJshopVars.flagLevel > 7)\r\n            System.out.println(\" \");\r\n        for (int i = 0; i < this.size(); i++) {\r\n            el = (JSPredicateForm) this.elementAt(i);\r\n            subs = t.matches(el, alpha);\r\n            if (!subs.fail()) {\r\n                if (JSJshopVars.flagLevel > 7) {\r\n                    JSUtil.println(\" Goal matches atom: \");\r\n                    el.print();\r\n                }\r\n                answers.addElement(subs);\r\n            }\r\n        }\r\n        //        JSUtil.flagPlanning(\" NO!\");\r\n        if (JSJshopVars.flagLevel > 7 && answers.isEmpty())\r\n            JSUtil.println(\" Goal does not match any atom.\");\r\n        return answers;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSStateTest1.java",
		"test_prompt": "// JSStateTest1.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSState}.\n* It contains ten unit test cases for the {@link JSState#satisfiesAll(JSListLogicalAtoms, JSSubstitution, JSListAxioms)} method.\n*/\nclass JSStateTest1 {"
	},
	{
		"original_code": "// JSState.java\npackage umd.cs.shop;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class JSState extends JSListLogicalAtoms {\r\n\r\n    /*==== instance variables ====*/\r\n    private String label;\r\n\r\n    public JSState() {\r\n        super();\r\n    }\r\n\r\n    public JSState(StreamTokenizer tokenizer) {\r\n        super(tokenizer);\r\n        return;\r\n    }\r\n\r\n    // Added 25/01/2001\r\n    public void addElementsToState(JSListLogicalAtoms s) {\r\n        /* Appends the contents of this to the end of s */\r\n        /*for (int i =0; i<s.size(); i++)\r\n      {\r\n        this.insertElementAt(s.elementAt(i),i);\r\n      }*/\r\n        int j = 0;\r\n        for (int i = 0; i < s.size(); i++) {\r\n            if (this.contains(s.elementAt(i)))\r\n                continue;\r\n            this.insertElementAt(s.elementAt(i), j);\r\n            j++;\r\n        }\r\n    }\r\n\r\n    JSState apply(JSPlan pl) {\r\n        JSState ns = new JSState();\r\n        JSUtil.flag20(\"<STATE>.apply(<JSPlan>) not implemented yet\");\r\n        return ns;\r\n    }\r\n\r\n    JSTState applyOp(JSOperator op, JSSubstitution alpha, JSListLogicalAtoms addL, JSListLogicalAtoms delL) {\r\n        JSListLogicalAtoms add = op.addList();\r\n        JSListLogicalAtoms del = op.deleteList();\r\n        JSListLogicalAtoms opAddL = add.applySubstitutionListLogicalAtoms(alpha);\r\n        JSListLogicalAtoms opDelL = del.applySubstitutionListLogicalAtoms(alpha);\r\n        JSState ns = new JSState();\r\n        JSListLogicalAtoms nAddL = new JSListLogicalAtoms();\r\n        JSListLogicalAtoms nDelL = new JSListLogicalAtoms();\r\n        JSPredicateForm el;\r\n        if (JSJshopVars.flagLevel > 3) {\r\n            JSUtil.print(\" Matching Operator : (\");\r\n            JSUtil.print(\":Operator \");\r\n            op.head().applySubstitutionTA(alpha).print();\r\n            JSUtil.print(\"-: \");\r\n            opDelL.print();\r\n            JSUtil.print(\"+: \");\r\n            opAddL.print();\r\n            JSUtil.println(\")\");\r\n        }\r\n        //  JSUtil.flagPlanning(\"<-- ndelete list\");\r\n        for (//creates a new state\r\n        short i = 0; //creates a new state\r\n        i < this.size(); //creates a new state\r\n        i++) {\r\n            el = (JSPredicateForm) this.elementAt(i);\r\n            if (!opDelL.contains(el)) {\r\n                //   ns.insertElementAt(el, 0);// modified 22/01\r\n                ns.addElement(el);\r\n            }\r\n        }\r\n        // previously AddElements\r\n        ns.addElementsToState(opAddL);\r\n        for (//creates a new add list\r\n        short i = 0; //creates a new add list\r\n        i < addL.size(); //creates a new add list\r\n        i++) {\r\n            el = (JSPredicateForm) addL.elementAt(i);\r\n            if (!opDelL.contains(el)) {\r\n                nAddL.addElement(el);\r\n            }\r\n        }\r\n        nAddL.addElements(opAddL);\r\n        for (//creates a new del list\r\n        short i = 0; //creates a new del list\r\n        i < delL.size(); //creates a new del list\r\n        i++) {\r\n            el = (JSPredicateForm) delL.elementAt(i);\r\n            if (!opAddL.contains(el)) {\r\n                nDelL.addElement(el);\r\n            }\r\n        }\r\n        nDelL.addElements(opDelL);\r\n        if (JSJshopVars.flagLevel > 3) {\r\n            JSUtil.println(\"The resulting state :\");\r\n            ns.print();\r\n            JSUtil.println(\"-----------\");\r\n        }\r\n        return new JSTState(ns, nAddL, nDelL);\r\n    }\r\n\r\n    public JSSubstitution satisfies(JSListLogicalAtoms conds, JSSubstitution alpha, JSListAxioms axioms) //Tests if  conds can be infered from this (the current state) and axioms\r\n    //modulo the substitution alpha.\r\n    //\r\n    //If conds can be infered, it returns the first matching substitution\r\n    //\r\n    //else it returns the failure substitution (i.e., calling the method fail()\r\n    //to the returned substitution succeeds)\r\n    {\r\n        //Calls Fusun's inferencing method with parameter all set to \"false\"\r\n        JSListSubstitution satisfiers = axioms.TheoremProver(conds, this, alpha, false);\r\n        JSSubstitution answer;\r\n        if (satisfiers.fail()) {\r\n            answer = new JSSubstitution();\r\n            answer.assignFailure();\r\n        } else {\r\n            answer = (JSSubstitution) alpha.clone();\r\n            answer.addElements((JSSubstitution) satisfiers.elementAt(0));\r\n            /*  if (conds.size() >0){\r\n            this.print();\r\n             }*/\r\n        }\r\n        return answer;\r\n    }\r\n\r\n    public JSListSubstitution satisfiesAll(JSListLogicalAtoms conds, JSSubstitution alpha, JSListAxioms axioms) //Tests if  conds can be infered from this (the current state) and axioms\r\n    //modulo the substitution alpha.\r\n    //\r\n    //If conds can be infered, it returns all of the matching substitutions\r\n    //\r\n    //else it returns an empty list\r\n    {\r\n        //Calls Fusun's inferencing method with parameter all set to \"true\"\r\n        int i;\r\n        String first = conds.Label();\r\n        boolean findfirst = !first.equalsIgnoreCase(\"first\");\r\n        JSSubstitution beta;\r\n        JSListSubstitution answers = new JSListSubstitution();\r\n        JSListSubstitution satisfiers = axioms.TheoremProver(conds, this, alpha, findfirst);\r\n        for (i = 0; i < satisfiers.size(); i++) {\r\n            beta = (JSSubstitution) ((JSSubstitution) satisfiers.elementAt(i)).clone();\r\n            beta.addElements((JSSubstitution) alpha.clone());\r\n            answers.addElement(beta);\r\n        }\r\n        return answers;\r\n    }\r\n\r\n    public JSListSubstitution satisfiesTAm(JSPredicateForm t, JSSubstitution alpha) // It searches all atoms in this matching t modulo the substitution alpha.\r\n    //\r\n    // If such an atoms are found, the matching substitutions are returned.\r\n    //\r\n    // Otherwise: returns an empty list\r\n    {\r\n        JSPredicateForm el;\r\n        JSSubstitution subs;\r\n        JSListSubstitution answers = new JSListSubstitution();\r\n        if (JSJshopVars.flagLevel > 7)\r\n            System.out.println(\" \");\r\n        for (int i = 0; i < this.size(); i++) {\r\n            el = (JSPredicateForm) this.elementAt(i);\r\n            subs = t.matches(el, alpha);\r\n            if (!subs.fail()) {\r\n                if (JSJshopVars.flagLevel > 7) {\r\n                    JSUtil.println(\" Goal matches atom: \");\r\n                    el.print();\r\n                }\r\n                answers.addElement(subs);\r\n            }\r\n        }\r\n        //        JSUtil.flagPlanning(\" NO!\");\r\n        if (JSJshopVars.flagLevel > 7 && answers.isEmpty())\r\n            JSUtil.println(\" Goal does not match any atom.\");\r\n        return answers;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/85_shop/src/main/java/umd/cs/shop/JSStateTest2.java",
		"test_prompt": "// JSStateTest2.java\npackage umd.cs.shop;\n\nimport java.util.*;\nimport java.io.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JSState}.\n* It contains ten unit test cases for the {@link JSState#satisfiesTAm(JSPredicateForm, JSSubstitution)} method.\n*/\nclass JSStateTest2 {"
	}
]