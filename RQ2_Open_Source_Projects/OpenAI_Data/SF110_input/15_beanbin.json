[
	{
		"original_code": "// BeanBin.java\npackage net.sourceforge.beanbin;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport net.sourceforge.beanbin.command.ActiveListCommand;\nimport net.sourceforge.beanbin.command.AddEntity;\nimport net.sourceforge.beanbin.command.RemoveEntity;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\n/**\n * BeanBin is a utility for persisting EJB 3.0 Entity beans.\n * It works without the need of any xml configuration (except for database connectivity)\n * and it generates all the nessessary JPA-QL.\n *\n * @author Brian Gorman\n *\n * @param <E> A bean that is an {@link java.persistence.Entity}\n */\npublic class BeanBin<E> extends BeanBinSearcher<E> implements Iterable<E> {\n\n    private BeanBinDAO dao;\n\n    private Class clazz;\n\n    private Transaction transaction;\n\n    public BeanBin(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.clazz = clazz;\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.transaction = new Transaction(dao, clazz);\n    }\n\n    public Transaction getTransaction() {\n        return transaction;\n    }\n\n    /**\n     * Returns the amount of beans stored in this BeanBin\n     * @return\n     * @throws BeanBinException\n     */\n    public int getSize() throws BeanBinException {\n        return dao.getSize(clazz, new Query());\n    }\n\n    /**\n     * Search the bin\n     * @param query\n     * @return ActiveList\n     * @throws BeanBinException\n     */\n    public ActiveList<E> search(Query query) throws BeanBinException {\n        ActiveList<E> list = new ActiveList<E>(clazz);\n        list.setQuery(query);\n        return list;\n    }\n\n    /**\n     * Persist an {@link java.persistence.Entity}\n     * @param entity\n     * @throws BeanBinException\n     */\n    public void putIn(E obj) throws BeanBinException {\n        addCommandToTransaction(new AddEntity(obj));\n    }\n\n    private void addCommandToTransaction(ActiveListCommand... cmds) throws BeanBinException {\n        if (getTransaction().hasNotBegun()) {\n            Transaction tx = new Transaction(dao, clazz);\n            for (ActiveListCommand cmd : cmds) {\n                tx.addCommand(cmd);\n            }\n            tx.commit();\n        } else {\n            for (ActiveListCommand cmd : cmds) {\n                getTransaction().addCommand(cmd);\n            }\n        }\n    }\n\n    /**\n     *  Remove an {@link java.persistence.Entity} from the bin\n     * @param entity\n     */\n    public void takeOut(E obj) throws BeanBinException {\n        addCommandToTransaction(new RemoveEntity(obj));\n    }\n\n    /**\n     * Persist a collection of {@link java.persistence.Entity}'s\n     * @param collection\n     * @throws BeanBinException\n     */\n    public void putIn(Collection<E> c) throws BeanBinException {\n        ActiveListCommand[] cmds = new AddEntity[c.size()];\n        Iterator iter = c.iterator();\n        for (int i = 0; iter.hasNext(); ++i) {\n            cmds[i] = new AddEntity(iter.next());\n        }\n        addCommandToTransaction(cmds);\n    }\n\n    /**\n     *  Remove a collection of {@link java.persistence.Entity}'s from the bin\n     * @param collection\n     * @throws BeanBinException\n     */\n    public void takeOut(Collection<E> c) throws BeanBinException {\n        ActiveListCommand[] cmds = new AddEntity[c.size()];\n        Iterator iter = c.iterator();\n        for (int i = 0; iter.hasNext(); ++i) {\n            cmds[i] = new RemoveEntity(iter.next());\n        }\n        addCommandToTransaction(cmds);\n    }\n\n    public Iterator<E> iterator() {\n        try {\n            return fetchSize(100).iterator();\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"BeanBin iterator failed: \" + e.getMessage(), e);\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/BeanBinTest0.java",
		"test_prompt": "// BeanBinTest0.java\npackage net.sourceforge.beanbin;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport net.sourceforge.beanbin.command.ActiveListCommand;\nimport net.sourceforge.beanbin.command.AddEntity;\nimport net.sourceforge.beanbin.command.RemoveEntity;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanBin}.\n* It contains ten unit test cases for the {@link BeanBin#search(Query)} method.\n*/\nclass BeanBinTest0 {"
	},
	{
		"original_code": "// BeanBin.java\npackage net.sourceforge.beanbin;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport net.sourceforge.beanbin.command.ActiveListCommand;\nimport net.sourceforge.beanbin.command.AddEntity;\nimport net.sourceforge.beanbin.command.RemoveEntity;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\n/**\n * BeanBin is a utility for persisting EJB 3.0 Entity beans.\n * It works without the need of any xml configuration (except for database connectivity)\n * and it generates all the nessessary JPA-QL.\n *\n * @author Brian Gorman\n *\n * @param <E> A bean that is an {@link java.persistence.Entity}\n */\npublic class BeanBin<E> extends BeanBinSearcher<E> implements Iterable<E> {\n\n    private BeanBinDAO dao;\n\n    private Class clazz;\n\n    private Transaction transaction;\n\n    public BeanBin(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.clazz = clazz;\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.transaction = new Transaction(dao, clazz);\n    }\n\n    public Transaction getTransaction() {\n        return transaction;\n    }\n\n    /**\n     * Returns the amount of beans stored in this BeanBin\n     * @return\n     * @throws BeanBinException\n     */\n    public int getSize() throws BeanBinException {\n        return dao.getSize(clazz, new Query());\n    }\n\n    /**\n     * Search the bin\n     * @param query\n     * @return ActiveList\n     * @throws BeanBinException\n     */\n    public ActiveList<E> search(Query query) throws BeanBinException {\n        ActiveList<E> list = new ActiveList<E>(clazz);\n        list.setQuery(query);\n        return list;\n    }\n\n    /**\n     * Persist an {@link java.persistence.Entity}\n     * @param entity\n     * @throws BeanBinException\n     */\n    public void putIn(E obj) throws BeanBinException {\n        addCommandToTransaction(new AddEntity(obj));\n    }\n\n    private void addCommandToTransaction(ActiveListCommand... cmds) throws BeanBinException {\n        if (getTransaction().hasNotBegun()) {\n            Transaction tx = new Transaction(dao, clazz);\n            for (ActiveListCommand cmd : cmds) {\n                tx.addCommand(cmd);\n            }\n            tx.commit();\n        } else {\n            for (ActiveListCommand cmd : cmds) {\n                getTransaction().addCommand(cmd);\n            }\n        }\n    }\n\n    /**\n     *  Remove an {@link java.persistence.Entity} from the bin\n     * @param entity\n     */\n    public void takeOut(E obj) throws BeanBinException {\n        addCommandToTransaction(new RemoveEntity(obj));\n    }\n\n    /**\n     * Persist a collection of {@link java.persistence.Entity}'s\n     * @param collection\n     * @throws BeanBinException\n     */\n    public void putIn(Collection<E> c) throws BeanBinException {\n        ActiveListCommand[] cmds = new AddEntity[c.size()];\n        Iterator iter = c.iterator();\n        for (int i = 0; iter.hasNext(); ++i) {\n            cmds[i] = new AddEntity(iter.next());\n        }\n        addCommandToTransaction(cmds);\n    }\n\n    /**\n     *  Remove a collection of {@link java.persistence.Entity}'s from the bin\n     * @param collection\n     * @throws BeanBinException\n     */\n    public void takeOut(Collection<E> c) throws BeanBinException {\n        ActiveListCommand[] cmds = new AddEntity[c.size()];\n        Iterator iter = c.iterator();\n        for (int i = 0; iter.hasNext(); ++i) {\n            cmds[i] = new RemoveEntity(iter.next());\n        }\n        addCommandToTransaction(cmds);\n    }\n\n    public Iterator<E> iterator() {\n        try {\n            return fetchSize(100).iterator();\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"BeanBin iterator failed: \" + e.getMessage(), e);\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/BeanBinTest1.java",
		"test_prompt": "// BeanBinTest1.java\npackage net.sourceforge.beanbin;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport net.sourceforge.beanbin.command.ActiveListCommand;\nimport net.sourceforge.beanbin.command.AddEntity;\nimport net.sourceforge.beanbin.command.RemoveEntity;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanBin}.\n* It contains ten unit test cases for the {@link BeanBin#iterator()} method.\n*/\nclass BeanBinTest1 {"
	},
	{
		"original_code": "// Resolver.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.resolve.GetImplementationsFromDir;\nimport net.sourceforge.beanbin.reflect.resolve.GetImplementationsFromJar;\n\npublic class Resolver {\n\n    private ClassLoader classloader;\n\n    public Resolver() {\n        this.classloader = Thread.currentThread().getContextClassLoader();\n    }\n\n    public List<Class> findImplementations(Class parent) throws BeanBinException {\n        List<Class> list = new ArrayList<Class>();\n        // right now this is limited to implementations that are found within the scope\n        // of your first package directory.. for instance com.company.stuff.BaseClass will search\n        // for implementations within the com package and no where else\n        String pkgname = parent.getPackage().getName();\n        pkgname = pkgname.substring(0, pkgname.indexOf(\".\"));\n        System.out.println(\"finding implementations in package \" + pkgname);\n        Enumeration<URL> urls;\n        try {\n            urls = classloader.getResources(pkgname);\n        } catch (IOException e1) {\n            throw new BeanBinException(\"IOException: \" + e1.getMessage(), e1);\n        }\n        while (urls.hasMoreElements()) {\n            try {\n                String path = getPath(urls.nextElement());\n                System.out.println(path);\n                File file = new File(path);\n                if (file.isDirectory()) {\n                    list.addAll(new GetImplementationsFromDir(parent, file).getImplementations());\n                } else {\n                    list.addAll(new GetImplementationsFromJar(parent, file).getImplementations());\n                }\n            } catch (IOException e) {\n                System.out.println(\"IOException while scanning: \" + e.getMessage());\n            }\n        }\n        return list;\n    }\n\n    private String getPath(URL url) throws UnsupportedEncodingException {\n        String path = url.getFile();\n        path = URLDecoder.decode(path, \"UTF-8\");\n        path = removeFilePrefix(path);\n        path = removeJarInfo(path);\n        return path;\n    }\n\n    private String removeJarInfo(String path) {\n        if (path.indexOf('!') != -1) {\n            path = path.substring(0, path.indexOf('!'));\n        }\n        return path;\n    }\n\n    private String removeFilePrefix(String path) {\n        if (path.startsWith(\"file:\")) {\n            path = path.substring(5);\n        }\n        return path;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/reflect/ResolverTest.java",
		"test_prompt": "// ResolverTest.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.resolve.GetImplementationsFromDir;\nimport net.sourceforge.beanbin.reflect.resolve.GetImplementationsFromJar;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Resolver}.\n* It contains ten unit test cases for the {@link Resolver#findImplementations(Class)} method.\n*/\nclass ResolverTest {"
	},
	{
		"original_code": "// ReflectionSearch.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.search.WildcardSearch;\n\n/**\n * ReflectionSearch is meant to work as an arguement accumulator in order to\n * build up criteria then when getMethods() or getProperties() is called the\n * built up {@link Query} is executed.\n * <br><br>\n * For example:\n * <blockquote>\n * \t<code> ReflectionSearch search = new ReflectionSearch(SomeClass.class).methodsThatHave(\"@SomeAnno\").and().methodsThatDontHave(\"set*\");<br>\n * \t\t// no search as occured yet...<br>\n * \tList&lt;Method&gt; props = search.getMethods(); // query is executed..</code><br>\n * </blockquote>\n *\n * The exception to this is the hasAnnotation(term) method.  That method is meant to act on the Class iteself\n * and well create the {@link Query} and execute it immediately.\n * <br><br>\n * To improve performance a cacheing system will be used.  The class is {@link ReflectionShelf} and is a singleton.\n * @author Brian Gorman\n */\npublic class ReflectionSearch {\n\n    private Class clazz;\n\n    private Query query;\n\n    public ReflectionSearch(Class clazz) {\n        this.clazz = clazz;\n        this.query = new Query();\n    }\n\n    /**\n     * Searches the annotations assossiated with the clazz\n     * @param term\n     * @return\n     */\n    public boolean hasAnnotation(String term) {\n        for (Annotation anno : clazz.getAnnotations()) {\n            String name = anno.annotationType().getName();\n            String className = name.substring(name.lastIndexOf(\".\") + 1);\n            String termName = term.toString().substring(1);\n            if (hasWildcard(termName)) {\n                WildcardSearch wild = new WildcardSearch(termName);\n                if (wild.doesMatch(name)) {\n                    return true;\n                } else if (wild.doesMatch(className)) {\n                    return true;\n                }\n            } else {\n                if (name.equals(termName)) {\n                    return true;\n                } else if (className.equals(termName)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private boolean hasWildcard(String term) {\n        return term.indexOf(\"*\") != -1;\n    }\n\n    /**\n     * @param term\n     * @return\n     * @throws BeanBinException\n     */\n    public ReflectionSearch methodsThatHave(String term) throws BeanBinException {\n        query.add(new MethodReflectionCriteria(clazz, term, SearchType.EQUALS));\n        return this;\n    }\n\n    public ReflectionSearch methodsThatDontHave(String term) throws BeanBinException {\n        query.add(new MethodReflectionCriteria(clazz, term, SearchType.DOESNOTEQUAL));\n        return this;\n    }\n\n    public ReflectionSearch and() {\n        query.setNextConditional(Conditional.AND);\n        return this;\n    }\n\n    public ReflectionSearch or() {\n        query.setNextConditional(Conditional.OR);\n        return this;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<Method> getMethods() throws BeanBinException {\n        List<Method> list = (List<Method>) ReflectionShelf.getInstance().get(query);\n        if (list == null) {\n            list = new ArrayList<Method>();\n            for (Criteria criteria : query.getCriterias()) {\n                if (criteria instanceof ReflectionCriteria) {\n                    ReflectionCriteria crit = (ReflectionCriteria) criteria;\n                    Conditional cond = crit.getPreviousCondition();\n                    if (cond != null) {\n                        if (cond == Conditional.AND) {\n                            intersect(list, crit.getResults());\n                        } else {\n                            union(list, crit.getResults());\n                        }\n                    } else {\n                        list = crit.getResults();\n                    }\n                }\n            }\n            ReflectionShelf.getInstance().put(query, list);\n        }\n        return list;\n    }\n\n    protected void intersect(List<Method> master, List<Method> toadd) {\n        for (int i = 0; i < master.size(); ++i) {\n            if (!toadd.contains(master.get(i))) {\n                master.remove(i--);\n            }\n        }\n    }\n\n    protected void union(List<Method> master, List<Method> toadd) {\n        for (Method method : toadd) {\n            if (!master.contains(method)) {\n                master.add(method);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/reflect/ReflectionSearchTest0.java",
		"test_prompt": "// ReflectionSearchTest0.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.search.WildcardSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReflectionSearch}.\n* It contains ten unit test cases for the {@link ReflectionSearch#hasAnnotation(String)} method.\n*/\nclass ReflectionSearchTest0 {"
	},
	{
		"original_code": "// ReflectionSearch.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.search.WildcardSearch;\n\n/**\n * ReflectionSearch is meant to work as an arguement accumulator in order to\n * build up criteria then when getMethods() or getProperties() is called the\n * built up {@link Query} is executed.\n * <br><br>\n * For example:\n * <blockquote>\n * \t<code> ReflectionSearch search = new ReflectionSearch(SomeClass.class).methodsThatHave(\"@SomeAnno\").and().methodsThatDontHave(\"set*\");<br>\n * \t\t// no search as occured yet...<br>\n * \tList&lt;Method&gt; props = search.getMethods(); // query is executed..</code><br>\n * </blockquote>\n *\n * The exception to this is the hasAnnotation(term) method.  That method is meant to act on the Class iteself\n * and well create the {@link Query} and execute it immediately.\n * <br><br>\n * To improve performance a cacheing system will be used.  The class is {@link ReflectionShelf} and is a singleton.\n * @author Brian Gorman\n */\npublic class ReflectionSearch {\n\n    private Class clazz;\n\n    private Query query;\n\n    public ReflectionSearch(Class clazz) {\n        this.clazz = clazz;\n        this.query = new Query();\n    }\n\n    /**\n     * Searches the annotations assossiated with the clazz\n     * @param term\n     * @return\n     */\n    public boolean hasAnnotation(String term) {\n        for (Annotation anno : clazz.getAnnotations()) {\n            String name = anno.annotationType().getName();\n            String className = name.substring(name.lastIndexOf(\".\") + 1);\n            String termName = term.toString().substring(1);\n            if (hasWildcard(termName)) {\n                WildcardSearch wild = new WildcardSearch(termName);\n                if (wild.doesMatch(name)) {\n                    return true;\n                } else if (wild.doesMatch(className)) {\n                    return true;\n                }\n            } else {\n                if (name.equals(termName)) {\n                    return true;\n                } else if (className.equals(termName)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private boolean hasWildcard(String term) {\n        return term.indexOf(\"*\") != -1;\n    }\n\n    /**\n     * @param term\n     * @return\n     * @throws BeanBinException\n     */\n    public ReflectionSearch methodsThatHave(String term) throws BeanBinException {\n        query.add(new MethodReflectionCriteria(clazz, term, SearchType.EQUALS));\n        return this;\n    }\n\n    public ReflectionSearch methodsThatDontHave(String term) throws BeanBinException {\n        query.add(new MethodReflectionCriteria(clazz, term, SearchType.DOESNOTEQUAL));\n        return this;\n    }\n\n    public ReflectionSearch and() {\n        query.setNextConditional(Conditional.AND);\n        return this;\n    }\n\n    public ReflectionSearch or() {\n        query.setNextConditional(Conditional.OR);\n        return this;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<Method> getMethods() throws BeanBinException {\n        List<Method> list = (List<Method>) ReflectionShelf.getInstance().get(query);\n        if (list == null) {\n            list = new ArrayList<Method>();\n            for (Criteria criteria : query.getCriterias()) {\n                if (criteria instanceof ReflectionCriteria) {\n                    ReflectionCriteria crit = (ReflectionCriteria) criteria;\n                    Conditional cond = crit.getPreviousCondition();\n                    if (cond != null) {\n                        if (cond == Conditional.AND) {\n                            intersect(list, crit.getResults());\n                        } else {\n                            union(list, crit.getResults());\n                        }\n                    } else {\n                        list = crit.getResults();\n                    }\n                }\n            }\n            ReflectionShelf.getInstance().put(query, list);\n        }\n        return list;\n    }\n\n    protected void intersect(List<Method> master, List<Method> toadd) {\n        for (int i = 0; i < master.size(); ++i) {\n            if (!toadd.contains(master.get(i))) {\n                master.remove(i--);\n            }\n        }\n    }\n\n    protected void union(List<Method> master, List<Method> toadd) {\n        for (Method method : toadd) {\n            if (!master.contains(method)) {\n                master.add(method);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/reflect/ReflectionSearchTest1.java",
		"test_prompt": "// ReflectionSearchTest1.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.search.WildcardSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReflectionSearch}.\n* It contains ten unit test cases for the {@link ReflectionSearch#methodsThatHave(String)} method.\n*/\nclass ReflectionSearchTest1 {"
	},
	{
		"original_code": "// ReflectionSearch.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.search.WildcardSearch;\n\n/**\n * ReflectionSearch is meant to work as an arguement accumulator in order to\n * build up criteria then when getMethods() or getProperties() is called the\n * built up {@link Query} is executed.\n * <br><br>\n * For example:\n * <blockquote>\n * \t<code> ReflectionSearch search = new ReflectionSearch(SomeClass.class).methodsThatHave(\"@SomeAnno\").and().methodsThatDontHave(\"set*\");<br>\n * \t\t// no search as occured yet...<br>\n * \tList&lt;Method&gt; props = search.getMethods(); // query is executed..</code><br>\n * </blockquote>\n *\n * The exception to this is the hasAnnotation(term) method.  That method is meant to act on the Class iteself\n * and well create the {@link Query} and execute it immediately.\n * <br><br>\n * To improve performance a cacheing system will be used.  The class is {@link ReflectionShelf} and is a singleton.\n * @author Brian Gorman\n */\npublic class ReflectionSearch {\n\n    private Class clazz;\n\n    private Query query;\n\n    public ReflectionSearch(Class clazz) {\n        this.clazz = clazz;\n        this.query = new Query();\n    }\n\n    /**\n     * Searches the annotations assossiated with the clazz\n     * @param term\n     * @return\n     */\n    public boolean hasAnnotation(String term) {\n        for (Annotation anno : clazz.getAnnotations()) {\n            String name = anno.annotationType().getName();\n            String className = name.substring(name.lastIndexOf(\".\") + 1);\n            String termName = term.toString().substring(1);\n            if (hasWildcard(termName)) {\n                WildcardSearch wild = new WildcardSearch(termName);\n                if (wild.doesMatch(name)) {\n                    return true;\n                } else if (wild.doesMatch(className)) {\n                    return true;\n                }\n            } else {\n                if (name.equals(termName)) {\n                    return true;\n                } else if (className.equals(termName)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private boolean hasWildcard(String term) {\n        return term.indexOf(\"*\") != -1;\n    }\n\n    /**\n     * @param term\n     * @return\n     * @throws BeanBinException\n     */\n    public ReflectionSearch methodsThatHave(String term) throws BeanBinException {\n        query.add(new MethodReflectionCriteria(clazz, term, SearchType.EQUALS));\n        return this;\n    }\n\n    public ReflectionSearch methodsThatDontHave(String term) throws BeanBinException {\n        query.add(new MethodReflectionCriteria(clazz, term, SearchType.DOESNOTEQUAL));\n        return this;\n    }\n\n    public ReflectionSearch and() {\n        query.setNextConditional(Conditional.AND);\n        return this;\n    }\n\n    public ReflectionSearch or() {\n        query.setNextConditional(Conditional.OR);\n        return this;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<Method> getMethods() throws BeanBinException {\n        List<Method> list = (List<Method>) ReflectionShelf.getInstance().get(query);\n        if (list == null) {\n            list = new ArrayList<Method>();\n            for (Criteria criteria : query.getCriterias()) {\n                if (criteria instanceof ReflectionCriteria) {\n                    ReflectionCriteria crit = (ReflectionCriteria) criteria;\n                    Conditional cond = crit.getPreviousCondition();\n                    if (cond != null) {\n                        if (cond == Conditional.AND) {\n                            intersect(list, crit.getResults());\n                        } else {\n                            union(list, crit.getResults());\n                        }\n                    } else {\n                        list = crit.getResults();\n                    }\n                }\n            }\n            ReflectionShelf.getInstance().put(query, list);\n        }\n        return list;\n    }\n\n    protected void intersect(List<Method> master, List<Method> toadd) {\n        for (int i = 0; i < master.size(); ++i) {\n            if (!toadd.contains(master.get(i))) {\n                master.remove(i--);\n            }\n        }\n    }\n\n    protected void union(List<Method> master, List<Method> toadd) {\n        for (Method method : toadd) {\n            if (!master.contains(method)) {\n                master.add(method);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/reflect/ReflectionSearchTest2.java",
		"test_prompt": "// ReflectionSearchTest2.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.search.WildcardSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReflectionSearch}.\n* It contains ten unit test cases for the {@link ReflectionSearch#methodsThatDontHave(String)} method.\n*/\nclass ReflectionSearchTest2 {"
	},
	{
		"original_code": "// ReflectionSearch.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.search.WildcardSearch;\n\n/**\n * ReflectionSearch is meant to work as an arguement accumulator in order to\n * build up criteria then when getMethods() or getProperties() is called the\n * built up {@link Query} is executed.\n * <br><br>\n * For example:\n * <blockquote>\n * \t<code> ReflectionSearch search = new ReflectionSearch(SomeClass.class).methodsThatHave(\"@SomeAnno\").and().methodsThatDontHave(\"set*\");<br>\n * \t\t// no search as occured yet...<br>\n * \tList&lt;Method&gt; props = search.getMethods(); // query is executed..</code><br>\n * </blockquote>\n *\n * The exception to this is the hasAnnotation(term) method.  That method is meant to act on the Class iteself\n * and well create the {@link Query} and execute it immediately.\n * <br><br>\n * To improve performance a cacheing system will be used.  The class is {@link ReflectionShelf} and is a singleton.\n * @author Brian Gorman\n */\npublic class ReflectionSearch {\n\n    private Class clazz;\n\n    private Query query;\n\n    public ReflectionSearch(Class clazz) {\n        this.clazz = clazz;\n        this.query = new Query();\n    }\n\n    /**\n     * Searches the annotations assossiated with the clazz\n     * @param term\n     * @return\n     */\n    public boolean hasAnnotation(String term) {\n        for (Annotation anno : clazz.getAnnotations()) {\n            String name = anno.annotationType().getName();\n            String className = name.substring(name.lastIndexOf(\".\") + 1);\n            String termName = term.toString().substring(1);\n            if (hasWildcard(termName)) {\n                WildcardSearch wild = new WildcardSearch(termName);\n                if (wild.doesMatch(name)) {\n                    return true;\n                } else if (wild.doesMatch(className)) {\n                    return true;\n                }\n            } else {\n                if (name.equals(termName)) {\n                    return true;\n                } else if (className.equals(termName)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private boolean hasWildcard(String term) {\n        return term.indexOf(\"*\") != -1;\n    }\n\n    /**\n     * @param term\n     * @return\n     * @throws BeanBinException\n     */\n    public ReflectionSearch methodsThatHave(String term) throws BeanBinException {\n        query.add(new MethodReflectionCriteria(clazz, term, SearchType.EQUALS));\n        return this;\n    }\n\n    public ReflectionSearch methodsThatDontHave(String term) throws BeanBinException {\n        query.add(new MethodReflectionCriteria(clazz, term, SearchType.DOESNOTEQUAL));\n        return this;\n    }\n\n    public ReflectionSearch and() {\n        query.setNextConditional(Conditional.AND);\n        return this;\n    }\n\n    public ReflectionSearch or() {\n        query.setNextConditional(Conditional.OR);\n        return this;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<Method> getMethods() throws BeanBinException {\n        List<Method> list = (List<Method>) ReflectionShelf.getInstance().get(query);\n        if (list == null) {\n            list = new ArrayList<Method>();\n            for (Criteria criteria : query.getCriterias()) {\n                if (criteria instanceof ReflectionCriteria) {\n                    ReflectionCriteria crit = (ReflectionCriteria) criteria;\n                    Conditional cond = crit.getPreviousCondition();\n                    if (cond != null) {\n                        if (cond == Conditional.AND) {\n                            intersect(list, crit.getResults());\n                        } else {\n                            union(list, crit.getResults());\n                        }\n                    } else {\n                        list = crit.getResults();\n                    }\n                }\n            }\n            ReflectionShelf.getInstance().put(query, list);\n        }\n        return list;\n    }\n\n    protected void intersect(List<Method> master, List<Method> toadd) {\n        for (int i = 0; i < master.size(); ++i) {\n            if (!toadd.contains(master.get(i))) {\n                master.remove(i--);\n            }\n        }\n    }\n\n    protected void union(List<Method> master, List<Method> toadd) {\n        for (Method method : toadd) {\n            if (!master.contains(method)) {\n                master.add(method);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/reflect/ReflectionSearchTest3.java",
		"test_prompt": "// ReflectionSearchTest3.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.search.WildcardSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReflectionSearch}.\n* It contains ten unit test cases for the {@link ReflectionSearch#and()} method.\n*/\nclass ReflectionSearchTest3 {"
	},
	{
		"original_code": "// ReflectionSearch.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.search.WildcardSearch;\n\n/**\n * ReflectionSearch is meant to work as an arguement accumulator in order to\n * build up criteria then when getMethods() or getProperties() is called the\n * built up {@link Query} is executed.\n * <br><br>\n * For example:\n * <blockquote>\n * \t<code> ReflectionSearch search = new ReflectionSearch(SomeClass.class).methodsThatHave(\"@SomeAnno\").and().methodsThatDontHave(\"set*\");<br>\n * \t\t// no search as occured yet...<br>\n * \tList&lt;Method&gt; props = search.getMethods(); // query is executed..</code><br>\n * </blockquote>\n *\n * The exception to this is the hasAnnotation(term) method.  That method is meant to act on the Class iteself\n * and well create the {@link Query} and execute it immediately.\n * <br><br>\n * To improve performance a cacheing system will be used.  The class is {@link ReflectionShelf} and is a singleton.\n * @author Brian Gorman\n */\npublic class ReflectionSearch {\n\n    private Class clazz;\n\n    private Query query;\n\n    public ReflectionSearch(Class clazz) {\n        this.clazz = clazz;\n        this.query = new Query();\n    }\n\n    /**\n     * Searches the annotations assossiated with the clazz\n     * @param term\n     * @return\n     */\n    public boolean hasAnnotation(String term) {\n        for (Annotation anno : clazz.getAnnotations()) {\n            String name = anno.annotationType().getName();\n            String className = name.substring(name.lastIndexOf(\".\") + 1);\n            String termName = term.toString().substring(1);\n            if (hasWildcard(termName)) {\n                WildcardSearch wild = new WildcardSearch(termName);\n                if (wild.doesMatch(name)) {\n                    return true;\n                } else if (wild.doesMatch(className)) {\n                    return true;\n                }\n            } else {\n                if (name.equals(termName)) {\n                    return true;\n                } else if (className.equals(termName)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private boolean hasWildcard(String term) {\n        return term.indexOf(\"*\") != -1;\n    }\n\n    /**\n     * @param term\n     * @return\n     * @throws BeanBinException\n     */\n    public ReflectionSearch methodsThatHave(String term) throws BeanBinException {\n        query.add(new MethodReflectionCriteria(clazz, term, SearchType.EQUALS));\n        return this;\n    }\n\n    public ReflectionSearch methodsThatDontHave(String term) throws BeanBinException {\n        query.add(new MethodReflectionCriteria(clazz, term, SearchType.DOESNOTEQUAL));\n        return this;\n    }\n\n    public ReflectionSearch and() {\n        query.setNextConditional(Conditional.AND);\n        return this;\n    }\n\n    public ReflectionSearch or() {\n        query.setNextConditional(Conditional.OR);\n        return this;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<Method> getMethods() throws BeanBinException {\n        List<Method> list = (List<Method>) ReflectionShelf.getInstance().get(query);\n        if (list == null) {\n            list = new ArrayList<Method>();\n            for (Criteria criteria : query.getCriterias()) {\n                if (criteria instanceof ReflectionCriteria) {\n                    ReflectionCriteria crit = (ReflectionCriteria) criteria;\n                    Conditional cond = crit.getPreviousCondition();\n                    if (cond != null) {\n                        if (cond == Conditional.AND) {\n                            intersect(list, crit.getResults());\n                        } else {\n                            union(list, crit.getResults());\n                        }\n                    } else {\n                        list = crit.getResults();\n                    }\n                }\n            }\n            ReflectionShelf.getInstance().put(query, list);\n        }\n        return list;\n    }\n\n    protected void intersect(List<Method> master, List<Method> toadd) {\n        for (int i = 0; i < master.size(); ++i) {\n            if (!toadd.contains(master.get(i))) {\n                master.remove(i--);\n            }\n        }\n    }\n\n    protected void union(List<Method> master, List<Method> toadd) {\n        for (Method method : toadd) {\n            if (!master.contains(method)) {\n                master.add(method);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/reflect/ReflectionSearchTest4.java",
		"test_prompt": "// ReflectionSearchTest4.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.search.WildcardSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReflectionSearch}.\n* It contains ten unit test cases for the {@link ReflectionSearch#or()} method.\n*/\nclass ReflectionSearchTest4 {"
	},
	{
		"original_code": "// ReflectionShelf.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ReflectionShelf {\n\n    private static ReflectionShelf shelf;\n\n    private Map<Query, Object> results;\n\n    private ReflectionShelf() {\n        this.results = new HashMap<Query, Object>();\n    }\n\n    public Object get(Query query) {\n        return results.get(query);\n    }\n\n    public void put(Query query, Object obj) {\n        results.put(query, obj);\n    }\n\n    public static ReflectionShelf getInstance() {\n        if (shelf == null) {\n            shelf = new ReflectionShelf();\n        }\n        return shelf;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/reflect/ReflectionShelfTest.java",
		"test_prompt": "// ReflectionShelfTest.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReflectionShelf}.\n* It contains ten unit test cases for the {@link ReflectionShelf#getInstance()} method.\n*/\nclass ReflectionShelfTest {"
	},
	{
		"original_code": "// ReflectUtils.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\n\npublic class ReflectUtils {\n\n    public static boolean hasAnnotation(Class clazz, Class annoClass) {\n        ReflectionSearch search = new ReflectionSearch(clazz);\n        return search.hasAnnotation(\"@\" + annoClass.getName());\n    }\n\n    public static List<Method> getGetters(Class clazz) throws BeanBinException {\n        return getGetterSearch(clazz).getMethods();\n    }\n\n    public static ReflectionSearch getGetterSearch(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").or().methodsThatHave(\"is*\").and().methodsThatDontHave(\"@Transient\").and().methodsThatDontHave(\"getClass\");\n        return search;\n    }\n\n    public static Class extractGenericType(Type type) throws BeanBinException {\n        if (type != null && type instanceof ParameterizedType) {\n            ParameterizedType ptype = (ParameterizedType) type;\n            Type[] generics = ptype.getActualTypeArguments();\n            if (generics.length == 1 && generics[0] instanceof Class) {\n                return (Class) generics[0];\n            } else if (generics.length > 1) {\n                throw new BeanBinException(\"extractGenericType does not support 2 generic parameters\");\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/reflect/ReflectUtilsTest0.java",
		"test_prompt": "// ReflectUtilsTest0.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReflectUtils}.\n* It contains ten unit test cases for the {@link ReflectUtils#hasAnnotation(Class, Class)} method.\n*/\nclass ReflectUtilsTest0 {"
	},
	{
		"original_code": "// ReflectUtils.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\n\npublic class ReflectUtils {\n\n    public static boolean hasAnnotation(Class clazz, Class annoClass) {\n        ReflectionSearch search = new ReflectionSearch(clazz);\n        return search.hasAnnotation(\"@\" + annoClass.getName());\n    }\n\n    public static List<Method> getGetters(Class clazz) throws BeanBinException {\n        return getGetterSearch(clazz).getMethods();\n    }\n\n    public static ReflectionSearch getGetterSearch(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").or().methodsThatHave(\"is*\").and().methodsThatDontHave(\"@Transient\").and().methodsThatDontHave(\"getClass\");\n        return search;\n    }\n\n    public static Class extractGenericType(Type type) throws BeanBinException {\n        if (type != null && type instanceof ParameterizedType) {\n            ParameterizedType ptype = (ParameterizedType) type;\n            Type[] generics = ptype.getActualTypeArguments();\n            if (generics.length == 1 && generics[0] instanceof Class) {\n                return (Class) generics[0];\n            } else if (generics.length > 1) {\n                throw new BeanBinException(\"extractGenericType does not support 2 generic parameters\");\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/reflect/ReflectUtilsTest1.java",
		"test_prompt": "// ReflectUtilsTest1.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReflectUtils}.\n* It contains ten unit test cases for the {@link ReflectUtils#getGetters(Class)} method.\n*/\nclass ReflectUtilsTest1 {"
	},
	{
		"original_code": "// ReflectUtils.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\n\npublic class ReflectUtils {\n\n    public static boolean hasAnnotation(Class clazz, Class annoClass) {\n        ReflectionSearch search = new ReflectionSearch(clazz);\n        return search.hasAnnotation(\"@\" + annoClass.getName());\n    }\n\n    public static List<Method> getGetters(Class clazz) throws BeanBinException {\n        return getGetterSearch(clazz).getMethods();\n    }\n\n    public static ReflectionSearch getGetterSearch(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").or().methodsThatHave(\"is*\").and().methodsThatDontHave(\"@Transient\").and().methodsThatDontHave(\"getClass\");\n        return search;\n    }\n\n    public static Class extractGenericType(Type type) throws BeanBinException {\n        if (type != null && type instanceof ParameterizedType) {\n            ParameterizedType ptype = (ParameterizedType) type;\n            Type[] generics = ptype.getActualTypeArguments();\n            if (generics.length == 1 && generics[0] instanceof Class) {\n                return (Class) generics[0];\n            } else if (generics.length > 1) {\n                throw new BeanBinException(\"extractGenericType does not support 2 generic parameters\");\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/reflect/ReflectUtilsTest2.java",
		"test_prompt": "// ReflectUtilsTest2.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReflectUtils}.\n* It contains ten unit test cases for the {@link ReflectUtils#getGetterSearch(Class)} method.\n*/\nclass ReflectUtilsTest2 {"
	},
	{
		"original_code": "// ReflectUtils.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\n\npublic class ReflectUtils {\n\n    public static boolean hasAnnotation(Class clazz, Class annoClass) {\n        ReflectionSearch search = new ReflectionSearch(clazz);\n        return search.hasAnnotation(\"@\" + annoClass.getName());\n    }\n\n    public static List<Method> getGetters(Class clazz) throws BeanBinException {\n        return getGetterSearch(clazz).getMethods();\n    }\n\n    public static ReflectionSearch getGetterSearch(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").or().methodsThatHave(\"is*\").and().methodsThatDontHave(\"@Transient\").and().methodsThatDontHave(\"getClass\");\n        return search;\n    }\n\n    public static Class extractGenericType(Type type) throws BeanBinException {\n        if (type != null && type instanceof ParameterizedType) {\n            ParameterizedType ptype = (ParameterizedType) type;\n            Type[] generics = ptype.getActualTypeArguments();\n            if (generics.length == 1 && generics[0] instanceof Class) {\n                return (Class) generics[0];\n            } else if (generics.length > 1) {\n                throw new BeanBinException(\"extractGenericType does not support 2 generic parameters\");\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/reflect/ReflectUtilsTest3.java",
		"test_prompt": "// ReflectUtilsTest3.java\npackage net.sourceforge.beanbin.reflect;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReflectUtils}.\n* It contains ten unit test cases for the {@link ReflectUtils#extractGenericType(Type)} method.\n*/\nclass ReflectUtilsTest3 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest0.java",
		"test_prompt": "// ActiveListTest0.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#add(E)} method.\n*/\nclass ActiveListTest0 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest1.java",
		"test_prompt": "// ActiveListTest1.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#addAll(Collection)} method.\n*/\nclass ActiveListTest1 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest2.java",
		"test_prompt": "// ActiveListTest2.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#addAll(int, Collection)} method.\n*/\nclass ActiveListTest2 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest3.java",
		"test_prompt": "// ActiveListTest3.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#contains(Object)} method.\n*/\nclass ActiveListTest3 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest4.java",
		"test_prompt": "// ActiveListTest4.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#containsAll(Collection)} method.\n*/\nclass ActiveListTest4 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest5.java",
		"test_prompt": "// ActiveListTest5.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#indexOf(Object)} method.\n*/\nclass ActiveListTest5 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest6.java",
		"test_prompt": "// ActiveListTest6.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#isEmpty()} method.\n*/\nclass ActiveListTest6 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest7.java",
		"test_prompt": "// ActiveListTest7.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#iterator()} method.\n*/\nclass ActiveListTest7 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest8.java",
		"test_prompt": "// ActiveListTest8.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#lastIndexOf(Object)} method.\n*/\nclass ActiveListTest8 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest9.java",
		"test_prompt": "// ActiveListTest9.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#listIterator()} method.\n*/\nclass ActiveListTest9 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest10.java",
		"test_prompt": "// ActiveListTest10.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#listIterator(int)} method.\n*/\nclass ActiveListTest10 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest11.java",
		"test_prompt": "// ActiveListTest11.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#remove(Object)} method.\n*/\nclass ActiveListTest11 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest12.java",
		"test_prompt": "// ActiveListTest12.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#remove(int)} method.\n*/\nclass ActiveListTest12 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest13.java",
		"test_prompt": "// ActiveListTest13.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#removeAll(Collection)} method.\n*/\nclass ActiveListTest13 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest14.java",
		"test_prompt": "// ActiveListTest14.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#retainAll(Collection)} method.\n*/\nclass ActiveListTest14 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest15.java",
		"test_prompt": "// ActiveListTest15.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#size()} method.\n*/\nclass ActiveListTest15 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest16.java",
		"test_prompt": "// ActiveListTest16.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#subList(int, int)} method.\n*/\nclass ActiveListTest16 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest17.java",
		"test_prompt": "// ActiveListTest17.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#toArray()} method.\n*/\nclass ActiveListTest17 {"
	},
	{
		"original_code": "// ActiveList.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\n\npublic class ActiveList<E> extends ActiveListSearcher<E> implements List<E>, Serializable {\n\n    private static final long serialVersionUID = -2452810520138406493L;\n\n    private Query query;\n\n    private BeanBinDAO dao;\n\n    private List<Object> data;\n\n    public ActiveList() {\n        super();\n    }\n\n    public ActiveList(Class clazz) throws BeanBinException {\n        super(clazz);\n        this.query = new Query();\n        this.dao = BeanBinDAOFactory.getDAO();\n        this.data = null;\n        setList(this);\n    }\n\n    protected BeanBinDAO getDAO() {\n        return this.dao;\n    }\n\n    public Query getQuery() {\n        return query;\n    }\n\n    protected void setQuery(Query query) {\n        this.query = query;\n        this.data = null;\n    }\n\n    protected void init() {\n        if (data == null) {\n            try {\n                this.data = sendQuery();\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.sendQuery() : \" + e.getMessage(), e);\n            }\n        }\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        return dao.search(getClazz(), getQuery());\n    }\n\n    public boolean add(E o) {\n        init();\n        return data.add(o);\n    }\n\n    public void add(int index, E element) {\n        init();\n        data.add(index, element);\n    }\n\n    public boolean addAll(Collection<? extends E> c) {\n        init();\n        return data.addAll(c);\n    }\n\n    public boolean addAll(int index, Collection<? extends E> c) {\n        init();\n        return data.addAll(index, c);\n    }\n\n    public void clear() {\n        init();\n        data.clear();\n    }\n\n    public boolean contains(Object o) {\n        init();\n        return data.contains(o);\n    }\n\n    public boolean containsAll(Collection<?> c) {\n        init();\n        return data.containsAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E get(int index) {\n        init();\n        if (getQuery().getFetchSize() != -1 && index >= (getQuery().getPosition() + getQuery().getFetchSize())) {\n            getQuery().setPosition(getQuery().getPosition() + getQuery().getFetchSize());\n            try {\n                data.addAll(sendQuery());\n            } catch (BeanBinException e) {\n                throw new RuntimeException(\"ActiveList.get(i) : \" + e.getMessage(), e);\n            }\n        }\n        return (E) data.get(index);\n    }\n\n    public int indexOf(Object o) {\n        init();\n        return data.indexOf(o);\n    }\n\n    public boolean isEmpty() {\n        init();\n        return data.isEmpty();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<E> iterator() {\n        init();\n        //\t\treturn null;\n        return new ActiveIterator<E>(this);\n    }\n\n    public int lastIndexOf(Object o) {\n        init();\n        return data.lastIndexOf(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator() {\n        init();\n        return (ListIterator<E>) data.listIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public ListIterator<E> listIterator(int index) {\n        init();\n        return (ListIterator<E>) data.listIterator(index);\n    }\n\n    public boolean remove(Object o) {\n        init();\n        return data.remove(o);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E remove(int index) {\n        init();\n        return (E) data.remove(index);\n    }\n\n    public boolean removeAll(Collection<?> c) {\n        init();\n        return data.removeAll(c);\n    }\n\n    public boolean retainAll(Collection<?> c) {\n        init();\n        return data.retainAll(c);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public E set(int index, E element) {\n        init();\n        return (E) data.set(index, element);\n    }\n\n    public int size() {\n        try {\n            return dao.getSize(getClazz(), getQuery());\n        } catch (BeanBinException e) {\n            throw new RuntimeException(\"Invalid Query: \" + e.getMessage(), e);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public List<E> subList(int fromIndex, int toIndex) {\n        init();\n        List<Object> subList = data.subList(fromIndex, toIndex);\n        List<E> list = new ArrayList<E>();\n        for (Object o : subList) {\n            list.add((E) o);\n        }\n        return list;\n    }\n\n    public Object[] toArray() {\n        init();\n        return data.toArray();\n    }\n\n    public <T> T[] toArray(T[] a) {\n        init();\n        return data.toArray(a);\n    }\n\n    public String toString() {\n        return data.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveListTest18.java",
		"test_prompt": "// ActiveListTest18.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveList}.\n* It contains ten unit test cases for the {@link ActiveList#toArray(T[])} method.\n*/\nclass ActiveListTest18 {"
	},
	{
		"original_code": "// WildcardSearch.java\npackage net.sourceforge.beanbin.search;\n\npublic class WildcardSearch {\n\n    private String term;\n\n    public WildcardSearch(String searchTerm) {\n        this.term = searchTerm;\n    }\n\n    public boolean doesMatch(String value) {\n        if (term.equals(\"\") || value.equals(\"\")) {\n            return false;\n        }\n        int pos = 0;\n        for (int i = 0; i < term.length(); ++i) {\n            if (term.charAt(i) == '*') {\n                if (i + 1 == term.length()) {\n                    return true;\n                }\n                int nextWildcard = term.indexOf(\"*\", i + 1);\n                String subterm;\n                if (nextWildcard == -1) {\n                    subterm = term.substring(i + 1);\n                } else {\n                    subterm = term.substring(i + 1, nextWildcard);\n                }\n                pos = value.indexOf(subterm, pos);\n                if (pos == -1) {\n                    return false;\n                }\n            } else {\n                if (term.charAt(i) != value.charAt(pos++)) {\n                    return false;\n                }\n            }\n        }\n        int lastIndex = term.lastIndexOf(\"*\");\n        if (lastIndex != -1) {\n            String lastTerm = term.substring(lastIndex + 1);\n            return value.lastIndexOf(lastTerm) + lastTerm.length() == value.length();\n        }\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/search/WildcardSearchTest.java",
		"test_prompt": "// WildcardSearchTest.java\npackage net.sourceforge.beanbin.search;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WildcardSearch}.\n* It contains ten unit test cases for the {@link WildcardSearch#doesMatch(String)} method.\n*/\nclass WildcardSearchTest {"
	},
	{
		"original_code": "// Index.java\npackage net.sourceforge.beanbin.search.index;\n\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.configuration.PropertyManager;\n\npublic class Index {\n\n    public static IndexManager getManager() throws BeanBinException {\n        PropertyManager manager = new PropertyManager();\n        String className = manager.getProperty(\"indexmanager\").getValue();\n        if (className == null) {\n            throw new BeanBinException(\"Set beanbin.indexmanager property in beanbin.properties.\");\n        } else {\n            try {\n                Class clazz = Thread.currentThread().getContextClassLoader().loadClass(className);\n                return (IndexManager) clazz.newInstance();\n            } catch (Exception e) {\n                throw new BeanBinException(\"IndexManager error: \" + e.getMessage(), e);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/search/index/IndexTest.java",
		"test_prompt": "// IndexTest.java\npackage net.sourceforge.beanbin.search.index;\n\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.configuration.PropertyManager;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Index}.\n* It contains ten unit test cases for the {@link Index#getManager()} method.\n*/\nclass IndexTest {"
	},
	{
		"original_code": "// LuceneIndexManager.java\npackage net.sourceforge.beanbin.search.index.lucene;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.reflect.Constructor;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.configuration.PropertyManager;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.search.index.IndexEntry;\nimport net.sourceforge.beanbin.search.index.IndexField;\nimport net.sourceforge.beanbin.search.index.IndexManager;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport net.sourceforge.beanbin.search.index.cache.Properties;\nimport net.sourceforge.beanbin.search.index.cache.Results;\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.document.Field.Index;\nimport org.apache.lucene.document.Field.Store;\nimport org.apache.lucene.index.CorruptIndexException;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.queryParser.ParseException;\nimport org.apache.lucene.queryParser.QueryParser;\nimport org.apache.lucene.search.Hits;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.store.FSDirectory;\n\npublic class LuceneIndexManager implements IndexManager {\n\n    private String dirPath;\n\n    public LuceneIndexManager() throws BeanBinException {\n        this.dirPath = new PropertyManager().getProperty(\"lucenedir\").getValue();\n        if (dirPath == null) {\n            throw new BeanBinException(\"Please set the beanbin.lucenedir property in beanbin.properties.\");\n        }\n        if (dirPath.endsWith(\"/\")) {\n            dirPath = dirPath.substring(0, dirPath.length());\n        }\n        File dir = new File(dirPath);\n        makeIfDoesntExist(dir);\n    }\n\n    public void save(List<IndexEntry> entries) throws BeanBinException {\n        try {\n            for (IndexEntry entry : entries) {\n                save(entry);\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"LuceneIndexManager error: \" + e.getMessage(), e);\n        }\n    }\n\n    private void save(IndexEntry entry) throws IOException, BeanBinException {\n        remove(entry.getTargetClass(), entry.getKey());\n        for (IndexField field : entry.getFields()) {\n            save(entry.getTargetClass(), entry.getKey(), field);\n        }\n    }\n\n    private void save(Class clazz, Object key, IndexField field) throws IOException {\n        IndexWriter writer = null;\n        try {\n            releaseLock(clazz, field.getProperty());\n            writer = getWriter(clazz, field.getProperty());\n            for (String value : field.getValues()) {\n                Document doc = new Document();\n                doc.add(new Field(\"id\", key.toString(), Store.YES, Index.UN_TOKENIZED));\n                if (value == null) {\n                    value = \"\";\n                }\n                doc.add(new Field(\"value\", value, Store.YES, Index.TOKENIZED));\n                writer.addDocument(doc);\n            }\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n        }\n    }\n\n    private Class getIdType(Class clazz) throws BeanBinException {\n        Class keyClass = EntityUtils.getIdGetter(clazz).getReturnType();\n        if (keyClass.isPrimitive()) {\n            if (keyClass == long.class) {\n                keyClass = Long.class;\n            } else if (keyClass == int.class) {\n                keyClass = Integer.class;\n            } else if (keyClass == float.class) {\n                keyClass = Float.class;\n            } else if (keyClass == double.class) {\n                keyClass = Double.class;\n            } else if (keyClass == short.class) {\n                keyClass = Short.class;\n            } else if (keyClass == byte.class) {\n                keyClass = Byte.class;\n            } else if (keyClass == char.class) {\n                keyClass = Character.class;\n            } else if (keyClass == boolean.class) {\n                keyClass = Boolean.class;\n            }\n        }\n        return keyClass;\n    }\n\n    public Set<Object> search(Class clazz, String property, String term) throws BeanBinException {\n        Set<Object> keys = new HashSet<Object>();\n        IndexSearcher searcher = null;\n        try {\n            searcher = getSearcher(clazz, property);\n            Class keyType = getIdType(clazz);\n            Hits hits = getHits(term, searcher);\n            for (int i = 0; i < hits.length(); ++i) {\n                Document doc = hits.doc(i);\n                String id = doc.get(\"id\");\n                keys.add(makeKey(keyType, id));\n            }\n            return keys;\n        } catch (Exception e) {\n            throw new BeanBinException(\"Lucene Search: \" + e.getMessage(), e);\n        } finally {\n            if (searcher != null) {\n                try {\n                    searcher.close();\n                } catch (IOException e) {\n                    throw new BeanBinException(\"Lucene Search: \" + e.getMessage(), e);\n                }\n            }\n        }\n    }\n\n    private Object makeKey(Class keyType, String key) throws NoSuchMethodException, BeanBinException {\n        Class[] ptypes = new Class[1];\n        ptypes[0] = String.class;\n        Constructor construct = keyType.getConstructor(ptypes);\n        Object[] params = { key };\n        try {\n            return construct.newInstance(params);\n        } catch (Exception e) {\n            throw new BeanBinException(\"Lucene makeKey: \" + e.getMessage(), e);\n        }\n    }\n\n    public void remove(Class clazz, Object key) throws BeanBinException {\n        try {\n            for (String property : IndexUtils.getIndexProperties(clazz)) {\n                remove(clazz, property, key);\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"Lucene Remove: \" + e.getMessage(), e);\n        }\n    }\n\n    public void removeAll(Class clazz) throws BeanBinException {\n        try {\n            for (String property : IndexUtils.getIndexProperties(clazz)) {\n                removeAll(clazz, property);\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"Lucene Remove: \" + e.getMessage(), e);\n        }\n    }\n\n    private void removeAll(Class clazz, String property) throws IOException {\n        if (needsCreation(makePath(clazz, property))) {\n            return;\n        }\n        IndexReader reader = null;\n        try {\n            releaseLock(clazz, property);\n            reader = getReader(clazz, property);\n            reader.deleteDocuments(new Term(\"id\", \"*\"));\n        } finally {\n            if (reader != null) {\n                reader.close();\n            }\n        }\n    }\n\n    private void remove(Class clazz, String property, Object key) throws IOException {\n        if (needsCreation(makePath(clazz, property))) {\n            return;\n        }\n        IndexReader reader = null;\n        try {\n            releaseLock(clazz, property);\n            reader = getReader(clazz, property);\n            reader.deleteDocuments(new Term(\"id\", \"\" + key));\n        } finally {\n            if (reader != null) {\n                reader.close();\n            }\n        }\n    }\n\n    private void releaseLock(Class clazz, String property) throws IOException {\n        String path = makePath(clazz, property);\n        FSDirectory directory = FSDirectory.getDirectory(path);\n        while (IndexReader.isLocked(directory)) {\n            IndexReader.unlock(directory);\n        }\n    }\n\n    private Hits getHits(String term, IndexSearcher searcher) throws ParseException, IOException {\n        QueryParser parser = new QueryParser(\"value\", new StandardAnalyzer());\n        Query query = parser.parse(escape(term));\n        Hits hits = searcher.search(query);\n        return hits;\n    }\n\n    private Hits getIdHits(String term, IndexSearcher searcher) throws ParseException, IOException {\n        QueryParser parser = new QueryParser(\"id\", new StandardAnalyzer());\n        Query query = parser.parse(term);\n        Hits hits = searcher.search(query);\n        return hits;\n    }\n\n    private IndexSearcher getSearcher(Class clazz, String property) throws CorruptIndexException, IOException {\n        return new IndexSearcher(makePath(clazz, property));\n    }\n\n    private IndexReader getReader(Class clazz, String property) throws IOException {\n        return IndexReader.open(makePath(clazz, property));\n    }\n\n    private IndexWriter getWriter(Class clazz, String property) throws IOException {\n        String path = makePath(clazz, property);\n        return new IndexWriter(path, new StandardAnalyzer(), needsCreation(path));\n    }\n\n    private String makePath(Class clazz, String property) {\n        return dirPath + \"/\" + clazz.getName() + \"/\" + property;\n    }\n\n    private boolean needsCreation(String path) {\n        File dir = new File(path);\n        makeIfDoesntExist(dir);\n        for (File file : dir.listFiles()) {\n            if (file.getName().equalsIgnoreCase(\"segments.gen\")) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private void makeIfDoesntExist(File dir) {\n        if (!dir.exists()) {\n            dir.mkdirs();\n        }\n    }\n\n    private static String escape(String term) {\n        String[] escapeChars = { \"\\\\+\", \"-\", \"\\\\&\\\\&\", \"\\\\|\\\\|\", \"!\", \"\\\\(\", \"\\\\)\", \"\\\\{\", \"\\\\}\", \"\\\\[\", \"\\\\]\", \"\\\\^\", \"\\\\\\\\\", \"~\", \"\\\\?\", \":\" };\n        for (String value : escapeChars) {\n            String string = \"\\\\\\\\\" + value;\n            term = term.replaceAll(value, string);\n            term = term.replaceAll(\"\\\\\\\\\\\\\\\\\", \"\\\\\\\\\");\n        }\n        if (term.indexOf(\"*\") == 0) {\n            term = term.substring(1);\n        }\n        return term;\n    }\n\n    public Results getResults(Class clazz, List<Object> keys) throws BeanBinException {\n        try {\n            List<String> props = IndexUtils.getSettableIndexProperties(clazz);\n            Class idtype = getIdType(clazz);\n            String term = \"\";\n            for (Object key : keys) {\n                term += key + \" OR \";\n            }\n            term = term.substring(0, term.length() - 4);\n            Map<String, IndexEntry> entries = new HashMap<String, IndexEntry>();\n            for (String prop : props) {\n                IndexSearcher searcher = getSearcher(clazz, prop);\n                Hits hits = getIdHits(term, searcher);\n                for (int i = 0; i < hits.length(); ++i) {\n                    Document doc = hits.doc(i);\n                    String id = doc.get(\"id\");\n                    String value = doc.get(\"value\");\n                    IndexEntry entry = entries.get(id);\n                    if (entry == null) {\n                        entry = new IndexEntry(clazz, id);\n                        entries.put(id, entry);\n                    }\n                    IndexField field = entry.getField(prop);\n                    if (field == null) {\n                        field = new IndexField(prop);\n                        entry.addField(field);\n                    }\n                    field.addValue(value);\n                }\n            }\n            Results results = new Results();\n            for (String key : entries.keySet()) {\n                IndexEntry entry = entries.get(key);\n                Properties properties = new Properties();\n                for (IndexField field : entry.getFields()) {\n                    properties.add(field.getProperty(), field.getValues());\n                }\n                results.add(makeKey(idtype, key), properties);\n            }\n            return results;\n        } catch (Exception e) {\n            throw new BeanBinException(\"LuceneIndexManager.getResults: \" + e.getMessage(), e);\n        }\n    }\n\n    public List<String> getValues(Class clazz, String property, Object key) throws BeanBinException {\n        try {\n            List<String> values = new ArrayList<String>();\n            IndexSearcher searcher = getSearcher(clazz, property);\n            Hits hits = getIdHits(key.toString(), searcher);\n            for (int i = 0; i < hits.length(); ++i) {\n                Document doc = hits.doc(i);\n                values.add(doc.get(\"value\"));\n            }\n            return values;\n        } catch (Exception e) {\n            throw new BeanBinException(\"LuceneIndexManager.getValues: \" + e.getMessage(), e);\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/search/index/lucene/LuceneIndexManagerTest.java",
		"test_prompt": "// LuceneIndexManagerTest.java\npackage net.sourceforge.beanbin.search.index.lucene;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.reflect.Constructor;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.configuration.PropertyManager;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.search.index.IndexEntry;\nimport net.sourceforge.beanbin.search.index.IndexField;\nimport net.sourceforge.beanbin.search.index.IndexManager;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport net.sourceforge.beanbin.search.index.cache.Properties;\nimport net.sourceforge.beanbin.search.index.cache.Results;\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.document.Field.Index;\nimport org.apache.lucene.document.Field.Store;\nimport org.apache.lucene.index.CorruptIndexException;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.queryParser.ParseException;\nimport org.apache.lucene.queryParser.QueryParser;\nimport org.apache.lucene.search.Hits;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.store.FSDirectory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LuceneIndexManager}.\n* It contains ten unit test cases for the {@link LuceneIndexManager#search(Class, String, String)} method.\n*/\nclass LuceneIndexManagerTest {"
	},
	{
		"original_code": "// IndexCacheSingleton.java\npackage net.sourceforge.beanbin.search.index.cache;\n\npublic class IndexCacheSingleton {\n\n    private static IndexCache cache;\n\n    public static IndexCache getInstance() {\n        if (cache == null) {\n            cache = new IndexCache();\n        }\n        return cache;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/search/index/cache/IndexCacheSingletonTest.java",
		"test_prompt": "// IndexCacheSingletonTest.java\npackage net.sourceforge.beanbin.search.index.cache;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IndexCacheSingleton}.\n* It contains ten unit test cases for the {@link IndexCacheSingleton#getInstance()} method.\n*/\nclass IndexCacheSingletonTest {"
	},
	{
		"original_code": "// IndexUtils.java\npackage net.sourceforge.beanbin.search.index;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class IndexUtils {\n\n    public static List<String> getIndexProperties(Class clazz) throws BeanBinException {\n        List<String> list = new ArrayList<String>();\n        for (Method getter : getIndexGetters(clazz)) {\n            list.add(EntityUtils.getProperty(getter));\n        }\n        return list;\n    }\n\n    public static boolean hasSettableIndexes(Class clazz) throws BeanBinException {\n        return !getSettableIndexSetters(clazz).isEmpty();\n    }\n\n    public static List<String> getSettableIndexProperties(Class clazz) throws BeanBinException {\n        List<String> indexProperties = new ArrayList<String>();\n        for (Method setter : getSettableIndexSetters(clazz)) {\n            indexProperties.add(EntityUtils.getProperty(setter));\n        }\n        return indexProperties;\n    }\n\n    public static List<Method> getSettableIndexSetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : IndexUtils.getIndexGetters(clazz)) {\n            Method setter = EntityUtils.getSetter(getter);\n            if (getter.getReturnType() == List.class && setter != null) {\n                list.add(setter);\n            }\n        }\n        return list;\n    }\n\n    public static List<Method> getIndexGetters(Class clazz) throws BeanBinException {\n        return new ReflectionSearch(clazz).methodsThatHave(\"@net.sourceforge.beanbin.annotations.IndexSearch\").getMethods();\n    }\n\n    public static boolean hasAnIndexSearch(Class clazz) throws BeanBinException {\n        return !getIndexGetters(clazz).isEmpty();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/search/index/IndexUtilsTest0.java",
		"test_prompt": "// IndexUtilsTest0.java\npackage net.sourceforge.beanbin.search.index;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IndexUtils}.\n* It contains ten unit test cases for the {@link IndexUtils#getIndexProperties(Class)} method.\n*/\nclass IndexUtilsTest0 {"
	},
	{
		"original_code": "// IndexUtils.java\npackage net.sourceforge.beanbin.search.index;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class IndexUtils {\n\n    public static List<String> getIndexProperties(Class clazz) throws BeanBinException {\n        List<String> list = new ArrayList<String>();\n        for (Method getter : getIndexGetters(clazz)) {\n            list.add(EntityUtils.getProperty(getter));\n        }\n        return list;\n    }\n\n    public static boolean hasSettableIndexes(Class clazz) throws BeanBinException {\n        return !getSettableIndexSetters(clazz).isEmpty();\n    }\n\n    public static List<String> getSettableIndexProperties(Class clazz) throws BeanBinException {\n        List<String> indexProperties = new ArrayList<String>();\n        for (Method setter : getSettableIndexSetters(clazz)) {\n            indexProperties.add(EntityUtils.getProperty(setter));\n        }\n        return indexProperties;\n    }\n\n    public static List<Method> getSettableIndexSetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : IndexUtils.getIndexGetters(clazz)) {\n            Method setter = EntityUtils.getSetter(getter);\n            if (getter.getReturnType() == List.class && setter != null) {\n                list.add(setter);\n            }\n        }\n        return list;\n    }\n\n    public static List<Method> getIndexGetters(Class clazz) throws BeanBinException {\n        return new ReflectionSearch(clazz).methodsThatHave(\"@net.sourceforge.beanbin.annotations.IndexSearch\").getMethods();\n    }\n\n    public static boolean hasAnIndexSearch(Class clazz) throws BeanBinException {\n        return !getIndexGetters(clazz).isEmpty();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/search/index/IndexUtilsTest1.java",
		"test_prompt": "// IndexUtilsTest1.java\npackage net.sourceforge.beanbin.search.index;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IndexUtils}.\n* It contains ten unit test cases for the {@link IndexUtils#hasSettableIndexes(Class)} method.\n*/\nclass IndexUtilsTest1 {"
	},
	{
		"original_code": "// IndexUtils.java\npackage net.sourceforge.beanbin.search.index;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class IndexUtils {\n\n    public static List<String> getIndexProperties(Class clazz) throws BeanBinException {\n        List<String> list = new ArrayList<String>();\n        for (Method getter : getIndexGetters(clazz)) {\n            list.add(EntityUtils.getProperty(getter));\n        }\n        return list;\n    }\n\n    public static boolean hasSettableIndexes(Class clazz) throws BeanBinException {\n        return !getSettableIndexSetters(clazz).isEmpty();\n    }\n\n    public static List<String> getSettableIndexProperties(Class clazz) throws BeanBinException {\n        List<String> indexProperties = new ArrayList<String>();\n        for (Method setter : getSettableIndexSetters(clazz)) {\n            indexProperties.add(EntityUtils.getProperty(setter));\n        }\n        return indexProperties;\n    }\n\n    public static List<Method> getSettableIndexSetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : IndexUtils.getIndexGetters(clazz)) {\n            Method setter = EntityUtils.getSetter(getter);\n            if (getter.getReturnType() == List.class && setter != null) {\n                list.add(setter);\n            }\n        }\n        return list;\n    }\n\n    public static List<Method> getIndexGetters(Class clazz) throws BeanBinException {\n        return new ReflectionSearch(clazz).methodsThatHave(\"@net.sourceforge.beanbin.annotations.IndexSearch\").getMethods();\n    }\n\n    public static boolean hasAnIndexSearch(Class clazz) throws BeanBinException {\n        return !getIndexGetters(clazz).isEmpty();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/search/index/IndexUtilsTest2.java",
		"test_prompt": "// IndexUtilsTest2.java\npackage net.sourceforge.beanbin.search.index;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IndexUtils}.\n* It contains ten unit test cases for the {@link IndexUtils#getSettableIndexProperties(Class)} method.\n*/\nclass IndexUtilsTest2 {"
	},
	{
		"original_code": "// IndexUtils.java\npackage net.sourceforge.beanbin.search.index;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class IndexUtils {\n\n    public static List<String> getIndexProperties(Class clazz) throws BeanBinException {\n        List<String> list = new ArrayList<String>();\n        for (Method getter : getIndexGetters(clazz)) {\n            list.add(EntityUtils.getProperty(getter));\n        }\n        return list;\n    }\n\n    public static boolean hasSettableIndexes(Class clazz) throws BeanBinException {\n        return !getSettableIndexSetters(clazz).isEmpty();\n    }\n\n    public static List<String> getSettableIndexProperties(Class clazz) throws BeanBinException {\n        List<String> indexProperties = new ArrayList<String>();\n        for (Method setter : getSettableIndexSetters(clazz)) {\n            indexProperties.add(EntityUtils.getProperty(setter));\n        }\n        return indexProperties;\n    }\n\n    public static List<Method> getSettableIndexSetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : IndexUtils.getIndexGetters(clazz)) {\n            Method setter = EntityUtils.getSetter(getter);\n            if (getter.getReturnType() == List.class && setter != null) {\n                list.add(setter);\n            }\n        }\n        return list;\n    }\n\n    public static List<Method> getIndexGetters(Class clazz) throws BeanBinException {\n        return new ReflectionSearch(clazz).methodsThatHave(\"@net.sourceforge.beanbin.annotations.IndexSearch\").getMethods();\n    }\n\n    public static boolean hasAnIndexSearch(Class clazz) throws BeanBinException {\n        return !getIndexGetters(clazz).isEmpty();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/search/index/IndexUtilsTest3.java",
		"test_prompt": "// IndexUtilsTest3.java\npackage net.sourceforge.beanbin.search.index;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IndexUtils}.\n* It contains ten unit test cases for the {@link IndexUtils#getSettableIndexSetters(Class)} method.\n*/\nclass IndexUtilsTest3 {"
	},
	{
		"original_code": "// IndexUtils.java\npackage net.sourceforge.beanbin.search.index;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class IndexUtils {\n\n    public static List<String> getIndexProperties(Class clazz) throws BeanBinException {\n        List<String> list = new ArrayList<String>();\n        for (Method getter : getIndexGetters(clazz)) {\n            list.add(EntityUtils.getProperty(getter));\n        }\n        return list;\n    }\n\n    public static boolean hasSettableIndexes(Class clazz) throws BeanBinException {\n        return !getSettableIndexSetters(clazz).isEmpty();\n    }\n\n    public static List<String> getSettableIndexProperties(Class clazz) throws BeanBinException {\n        List<String> indexProperties = new ArrayList<String>();\n        for (Method setter : getSettableIndexSetters(clazz)) {\n            indexProperties.add(EntityUtils.getProperty(setter));\n        }\n        return indexProperties;\n    }\n\n    public static List<Method> getSettableIndexSetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : IndexUtils.getIndexGetters(clazz)) {\n            Method setter = EntityUtils.getSetter(getter);\n            if (getter.getReturnType() == List.class && setter != null) {\n                list.add(setter);\n            }\n        }\n        return list;\n    }\n\n    public static List<Method> getIndexGetters(Class clazz) throws BeanBinException {\n        return new ReflectionSearch(clazz).methodsThatHave(\"@net.sourceforge.beanbin.annotations.IndexSearch\").getMethods();\n    }\n\n    public static boolean hasAnIndexSearch(Class clazz) throws BeanBinException {\n        return !getIndexGetters(clazz).isEmpty();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/search/index/IndexUtilsTest4.java",
		"test_prompt": "// IndexUtilsTest4.java\npackage net.sourceforge.beanbin.search.index;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IndexUtils}.\n* It contains ten unit test cases for the {@link IndexUtils#getIndexGetters(Class)} method.\n*/\nclass IndexUtilsTest4 {"
	},
	{
		"original_code": "// IndexUtils.java\npackage net.sourceforge.beanbin.search.index;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class IndexUtils {\n\n    public static List<String> getIndexProperties(Class clazz) throws BeanBinException {\n        List<String> list = new ArrayList<String>();\n        for (Method getter : getIndexGetters(clazz)) {\n            list.add(EntityUtils.getProperty(getter));\n        }\n        return list;\n    }\n\n    public static boolean hasSettableIndexes(Class clazz) throws BeanBinException {\n        return !getSettableIndexSetters(clazz).isEmpty();\n    }\n\n    public static List<String> getSettableIndexProperties(Class clazz) throws BeanBinException {\n        List<String> indexProperties = new ArrayList<String>();\n        for (Method setter : getSettableIndexSetters(clazz)) {\n            indexProperties.add(EntityUtils.getProperty(setter));\n        }\n        return indexProperties;\n    }\n\n    public static List<Method> getSettableIndexSetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : IndexUtils.getIndexGetters(clazz)) {\n            Method setter = EntityUtils.getSetter(getter);\n            if (getter.getReturnType() == List.class && setter != null) {\n                list.add(setter);\n            }\n        }\n        return list;\n    }\n\n    public static List<Method> getIndexGetters(Class clazz) throws BeanBinException {\n        return new ReflectionSearch(clazz).methodsThatHave(\"@net.sourceforge.beanbin.annotations.IndexSearch\").getMethods();\n    }\n\n    public static boolean hasAnIndexSearch(Class clazz) throws BeanBinException {\n        return !getIndexGetters(clazz).isEmpty();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/search/index/IndexUtilsTest5.java",
		"test_prompt": "// IndexUtilsTest5.java\npackage net.sourceforge.beanbin.search.index;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IndexUtils}.\n* It contains ten unit test cases for the {@link IndexUtils#hasAnIndexSearch(Class)} method.\n*/\nclass IndexUtilsTest5 {"
	},
	{
		"original_code": "// BeanBinDAOFactory.java\npackage net.sourceforge.beanbin;\n\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.data.IndexDAO;\n\npublic class BeanBinDAOFactory {\n\n    private static InitialContext initialContext;\n\n    public static BeanBinDAO getDAO() throws BeanBinException {\n        try {\n            return (BeanBinDAO) getInitialContext().lookup(\"EJB3BeanBinDAO/remote\");\n        } catch (NamingException e) {\n            throw new BeanBinException(\"BeanBinDAOFactory: \" + e.getMessage(), e);\n        }\n    }\n\n    public static IndexDAO getIndexDAORemote() throws BeanBinException {\n        try {\n            return (IndexDAO) getInitialContext().lookup(\"EJB3IndexDAO/remote\");\n        } catch (NamingException e) {\n            throw new BeanBinException(\"BeanBinDAOFactory: \" + e.getMessage(), e);\n        }\n    }\n\n    public static IndexDAO getIndexDAOLocal() throws BeanBinException {\n        try {\n            return (IndexDAO) getInitialContext().lookup(\"EJB3IndexDAO/local\");\n        } catch (NamingException e) {\n            throw new BeanBinException(\"BeanBinDAOFactory: \" + e.getMessage(), e);\n        }\n    }\n\n    public static void setInitialContext(InitialContext ic) {\n        initialContext = ic;\n    }\n\n    public static InitialContext getInitialContext() throws NamingException {\n        if (initialContext == null) {\n            initialContext = new InitialContext();\n        }\n        return initialContext;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/BeanBinDAOFactoryTest0.java",
		"test_prompt": "// BeanBinDAOFactoryTest0.java\npackage net.sourceforge.beanbin;\n\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.data.IndexDAO;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanBinDAOFactory}.\n* It contains ten unit test cases for the {@link BeanBinDAOFactory#getDAO()} method.\n*/\nclass BeanBinDAOFactoryTest0 {"
	},
	{
		"original_code": "// BeanBinDAOFactory.java\npackage net.sourceforge.beanbin;\n\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.data.IndexDAO;\n\npublic class BeanBinDAOFactory {\n\n    private static InitialContext initialContext;\n\n    public static BeanBinDAO getDAO() throws BeanBinException {\n        try {\n            return (BeanBinDAO) getInitialContext().lookup(\"EJB3BeanBinDAO/remote\");\n        } catch (NamingException e) {\n            throw new BeanBinException(\"BeanBinDAOFactory: \" + e.getMessage(), e);\n        }\n    }\n\n    public static IndexDAO getIndexDAORemote() throws BeanBinException {\n        try {\n            return (IndexDAO) getInitialContext().lookup(\"EJB3IndexDAO/remote\");\n        } catch (NamingException e) {\n            throw new BeanBinException(\"BeanBinDAOFactory: \" + e.getMessage(), e);\n        }\n    }\n\n    public static IndexDAO getIndexDAOLocal() throws BeanBinException {\n        try {\n            return (IndexDAO) getInitialContext().lookup(\"EJB3IndexDAO/local\");\n        } catch (NamingException e) {\n            throw new BeanBinException(\"BeanBinDAOFactory: \" + e.getMessage(), e);\n        }\n    }\n\n    public static void setInitialContext(InitialContext ic) {\n        initialContext = ic;\n    }\n\n    public static InitialContext getInitialContext() throws NamingException {\n        if (initialContext == null) {\n            initialContext = new InitialContext();\n        }\n        return initialContext;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/BeanBinDAOFactoryTest1.java",
		"test_prompt": "// BeanBinDAOFactoryTest1.java\npackage net.sourceforge.beanbin;\n\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.data.IndexDAO;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanBinDAOFactory}.\n* It contains ten unit test cases for the {@link BeanBinDAOFactory#getIndexDAORemote()} method.\n*/\nclass BeanBinDAOFactoryTest1 {"
	},
	{
		"original_code": "// BeanBinDAOFactory.java\npackage net.sourceforge.beanbin;\n\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.data.IndexDAO;\n\npublic class BeanBinDAOFactory {\n\n    private static InitialContext initialContext;\n\n    public static BeanBinDAO getDAO() throws BeanBinException {\n        try {\n            return (BeanBinDAO) getInitialContext().lookup(\"EJB3BeanBinDAO/remote\");\n        } catch (NamingException e) {\n            throw new BeanBinException(\"BeanBinDAOFactory: \" + e.getMessage(), e);\n        }\n    }\n\n    public static IndexDAO getIndexDAORemote() throws BeanBinException {\n        try {\n            return (IndexDAO) getInitialContext().lookup(\"EJB3IndexDAO/remote\");\n        } catch (NamingException e) {\n            throw new BeanBinException(\"BeanBinDAOFactory: \" + e.getMessage(), e);\n        }\n    }\n\n    public static IndexDAO getIndexDAOLocal() throws BeanBinException {\n        try {\n            return (IndexDAO) getInitialContext().lookup(\"EJB3IndexDAO/local\");\n        } catch (NamingException e) {\n            throw new BeanBinException(\"BeanBinDAOFactory: \" + e.getMessage(), e);\n        }\n    }\n\n    public static void setInitialContext(InitialContext ic) {\n        initialContext = ic;\n    }\n\n    public static InitialContext getInitialContext() throws NamingException {\n        if (initialContext == null) {\n            initialContext = new InitialContext();\n        }\n        return initialContext;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/BeanBinDAOFactoryTest2.java",
		"test_prompt": "// BeanBinDAOFactoryTest2.java\npackage net.sourceforge.beanbin;\n\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.data.IndexDAO;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanBinDAOFactory}.\n* It contains ten unit test cases for the {@link BeanBinDAOFactory#getIndexDAOLocal()} method.\n*/\nclass BeanBinDAOFactoryTest2 {"
	},
	{
		"original_code": "// BeanBinDAOFactory.java\npackage net.sourceforge.beanbin;\n\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.data.IndexDAO;\n\npublic class BeanBinDAOFactory {\n\n    private static InitialContext initialContext;\n\n    public static BeanBinDAO getDAO() throws BeanBinException {\n        try {\n            return (BeanBinDAO) getInitialContext().lookup(\"EJB3BeanBinDAO/remote\");\n        } catch (NamingException e) {\n            throw new BeanBinException(\"BeanBinDAOFactory: \" + e.getMessage(), e);\n        }\n    }\n\n    public static IndexDAO getIndexDAORemote() throws BeanBinException {\n        try {\n            return (IndexDAO) getInitialContext().lookup(\"EJB3IndexDAO/remote\");\n        } catch (NamingException e) {\n            throw new BeanBinException(\"BeanBinDAOFactory: \" + e.getMessage(), e);\n        }\n    }\n\n    public static IndexDAO getIndexDAOLocal() throws BeanBinException {\n        try {\n            return (IndexDAO) getInitialContext().lookup(\"EJB3IndexDAO/local\");\n        } catch (NamingException e) {\n            throw new BeanBinException(\"BeanBinDAOFactory: \" + e.getMessage(), e);\n        }\n    }\n\n    public static void setInitialContext(InitialContext ic) {\n        initialContext = ic;\n    }\n\n    public static InitialContext getInitialContext() throws NamingException {\n        if (initialContext == null) {\n            initialContext = new InitialContext();\n        }\n        return initialContext;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/BeanBinDAOFactoryTest3.java",
		"test_prompt": "// BeanBinDAOFactoryTest3.java\npackage net.sourceforge.beanbin;\n\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.data.IndexDAO;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BeanBinDAOFactory}.\n* It contains ten unit test cases for the {@link BeanBinDAOFactory#getInitialContext()} method.\n*/\nclass BeanBinDAOFactoryTest3 {"
	},
	{
		"original_code": "// ActiveIterator.java\npackage net.sourceforge.beanbin;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\npublic class ActiveIterator<E> implements Iterator<E> {\n\n    int cursor = 0;\n\n    private ActiveList<E> list;\n\n    public ActiveIterator(ActiveList<E> list) {\n        this.list = list;\n    }\n\n    public boolean hasNext() {\n        return cursor != list.size();\n    }\n\n    public E next() {\n        try {\n            E next = list.get(cursor++);\n            return next;\n        } catch (IndexOutOfBoundsException e) {\n            throw new NoSuchElementException();\n        }\n    }\n\n    public void remove() {\n        list.remove(cursor);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveIteratorTest0.java",
		"test_prompt": "// ActiveIteratorTest0.java\npackage net.sourceforge.beanbin;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveIterator}.\n* It contains ten unit test cases for the {@link ActiveIterator#hasNext()} method.\n*/\nclass ActiveIteratorTest0 {"
	},
	{
		"original_code": "// ActiveIterator.java\npackage net.sourceforge.beanbin;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\npublic class ActiveIterator<E> implements Iterator<E> {\n\n    int cursor = 0;\n\n    private ActiveList<E> list;\n\n    public ActiveIterator(ActiveList<E> list) {\n        this.list = list;\n    }\n\n    public boolean hasNext() {\n        return cursor != list.size();\n    }\n\n    public E next() {\n        try {\n            E next = list.get(cursor++);\n            return next;\n        } catch (IndexOutOfBoundsException e) {\n            throw new NoSuchElementException();\n        }\n    }\n\n    public void remove() {\n        list.remove(cursor);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ActiveIteratorTest1.java",
		"test_prompt": "// ActiveIteratorTest1.java\npackage net.sourceforge.beanbin;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ActiveIterator}.\n* It contains ten unit test cases for the {@link ActiveIterator#next()} method.\n*/\nclass ActiveIteratorTest1 {"
	},
	{
		"original_code": "// AbstractSearcher.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\npublic abstract class AbstractSearcher<E> implements Searcher<E> {\n\n    private List<String> indexProperties;\n\n    public AbstractSearcher() {\n        this.indexProperties = new ArrayList<String>();\n    }\n\n    public AbstractSearcher(Class clazz) throws BeanBinException {\n        this.indexProperties = IndexUtils.getIndexProperties(clazz);\n    }\n\n    public ActiveList<E> and() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.AND);\n        return list;\n    }\n\n    public ActiveList<E> fetchSize(int fetchSize) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setFetchSize(fetchSize);\n        return list;\n    }\n\n    public ActiveList<E> or() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.OR);\n        return list;\n    }\n\n    public ActiveList<E> contains(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.CONTAINS));\n        return list;\n    }\n\n    public ActiveList<E> greaterThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHAN));\n        return list;\n    }\n\n    public ActiveList<E> greaterThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lessThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHAN));\n        return list;\n    }\n\n    public ActiveList<E> lessThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lookup(Query query) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(query);\n        return list;\n    }\n\n    public ActiveList<E> matches(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.EQUALS));\n        return list;\n    }\n\n    private Criteria makeCriteria(String property, Object term, SearchType searchType) throws BeanBinException {\n        if (indexProperties.contains(property)) {\n            if (searchType == SearchType.LESSTHAN || searchType == SearchType.LESSTHANOREQUALTO || searchType == SearchType.GREATERTHAN || searchType == SearchType.GREATERTHANOREQUALTO) {\n                throw new BeanBinException(\"You cannot search a string index with the search type \" + searchType);\n            } else if (searchType == SearchType.DOESNOTEQUAL) {\n                term = \"NOT \\\"\" + term + \"\\\"\";\n            } else if (searchType == SearchType.CONTAINS) {\n                term = \"*\" + term + \"*\";\n            }\n            return new IndexCriteria(property, term.toString());\n        } else {\n            return new Criteria(property, term, searchType);\n        }\n    }\n\n    public ActiveList<E> sortBy(String property) throws BeanBinException {\n        return sortBy(property, SortBy.ASCENDING);\n    }\n\n    public ActiveList<E> sortBy(String property, SortBy sort) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setSortBy(property, sort);\n        return list;\n    }\n\n    protected abstract ActiveList<E> getList() throws BeanBinException;\n\n    public List<String> getIndexProperties() {\n        return indexProperties;\n    }\n\n    public void setIndexProperties(List<String> indexProperties) {\n        this.indexProperties = indexProperties;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/AbstractSearcherTest0.java",
		"test_prompt": "// AbstractSearcherTest0.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractSearcher}.\n* It contains ten unit test cases for the {@link AbstractSearcher#and()} method.\n*/\nclass AbstractSearcherTest0 {"
	},
	{
		"original_code": "// AbstractSearcher.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\npublic abstract class AbstractSearcher<E> implements Searcher<E> {\n\n    private List<String> indexProperties;\n\n    public AbstractSearcher() {\n        this.indexProperties = new ArrayList<String>();\n    }\n\n    public AbstractSearcher(Class clazz) throws BeanBinException {\n        this.indexProperties = IndexUtils.getIndexProperties(clazz);\n    }\n\n    public ActiveList<E> and() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.AND);\n        return list;\n    }\n\n    public ActiveList<E> fetchSize(int fetchSize) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setFetchSize(fetchSize);\n        return list;\n    }\n\n    public ActiveList<E> or() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.OR);\n        return list;\n    }\n\n    public ActiveList<E> contains(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.CONTAINS));\n        return list;\n    }\n\n    public ActiveList<E> greaterThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHAN));\n        return list;\n    }\n\n    public ActiveList<E> greaterThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lessThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHAN));\n        return list;\n    }\n\n    public ActiveList<E> lessThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lookup(Query query) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(query);\n        return list;\n    }\n\n    public ActiveList<E> matches(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.EQUALS));\n        return list;\n    }\n\n    private Criteria makeCriteria(String property, Object term, SearchType searchType) throws BeanBinException {\n        if (indexProperties.contains(property)) {\n            if (searchType == SearchType.LESSTHAN || searchType == SearchType.LESSTHANOREQUALTO || searchType == SearchType.GREATERTHAN || searchType == SearchType.GREATERTHANOREQUALTO) {\n                throw new BeanBinException(\"You cannot search a string index with the search type \" + searchType);\n            } else if (searchType == SearchType.DOESNOTEQUAL) {\n                term = \"NOT \\\"\" + term + \"\\\"\";\n            } else if (searchType == SearchType.CONTAINS) {\n                term = \"*\" + term + \"*\";\n            }\n            return new IndexCriteria(property, term.toString());\n        } else {\n            return new Criteria(property, term, searchType);\n        }\n    }\n\n    public ActiveList<E> sortBy(String property) throws BeanBinException {\n        return sortBy(property, SortBy.ASCENDING);\n    }\n\n    public ActiveList<E> sortBy(String property, SortBy sort) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setSortBy(property, sort);\n        return list;\n    }\n\n    protected abstract ActiveList<E> getList() throws BeanBinException;\n\n    public List<String> getIndexProperties() {\n        return indexProperties;\n    }\n\n    public void setIndexProperties(List<String> indexProperties) {\n        this.indexProperties = indexProperties;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/AbstractSearcherTest1.java",
		"test_prompt": "// AbstractSearcherTest1.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractSearcher}.\n* It contains ten unit test cases for the {@link AbstractSearcher#fetchSize(int)} method.\n*/\nclass AbstractSearcherTest1 {"
	},
	{
		"original_code": "// AbstractSearcher.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\npublic abstract class AbstractSearcher<E> implements Searcher<E> {\n\n    private List<String> indexProperties;\n\n    public AbstractSearcher() {\n        this.indexProperties = new ArrayList<String>();\n    }\n\n    public AbstractSearcher(Class clazz) throws BeanBinException {\n        this.indexProperties = IndexUtils.getIndexProperties(clazz);\n    }\n\n    public ActiveList<E> and() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.AND);\n        return list;\n    }\n\n    public ActiveList<E> fetchSize(int fetchSize) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setFetchSize(fetchSize);\n        return list;\n    }\n\n    public ActiveList<E> or() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.OR);\n        return list;\n    }\n\n    public ActiveList<E> contains(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.CONTAINS));\n        return list;\n    }\n\n    public ActiveList<E> greaterThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHAN));\n        return list;\n    }\n\n    public ActiveList<E> greaterThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lessThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHAN));\n        return list;\n    }\n\n    public ActiveList<E> lessThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lookup(Query query) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(query);\n        return list;\n    }\n\n    public ActiveList<E> matches(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.EQUALS));\n        return list;\n    }\n\n    private Criteria makeCriteria(String property, Object term, SearchType searchType) throws BeanBinException {\n        if (indexProperties.contains(property)) {\n            if (searchType == SearchType.LESSTHAN || searchType == SearchType.LESSTHANOREQUALTO || searchType == SearchType.GREATERTHAN || searchType == SearchType.GREATERTHANOREQUALTO) {\n                throw new BeanBinException(\"You cannot search a string index with the search type \" + searchType);\n            } else if (searchType == SearchType.DOESNOTEQUAL) {\n                term = \"NOT \\\"\" + term + \"\\\"\";\n            } else if (searchType == SearchType.CONTAINS) {\n                term = \"*\" + term + \"*\";\n            }\n            return new IndexCriteria(property, term.toString());\n        } else {\n            return new Criteria(property, term, searchType);\n        }\n    }\n\n    public ActiveList<E> sortBy(String property) throws BeanBinException {\n        return sortBy(property, SortBy.ASCENDING);\n    }\n\n    public ActiveList<E> sortBy(String property, SortBy sort) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setSortBy(property, sort);\n        return list;\n    }\n\n    protected abstract ActiveList<E> getList() throws BeanBinException;\n\n    public List<String> getIndexProperties() {\n        return indexProperties;\n    }\n\n    public void setIndexProperties(List<String> indexProperties) {\n        this.indexProperties = indexProperties;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/AbstractSearcherTest2.java",
		"test_prompt": "// AbstractSearcherTest2.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractSearcher}.\n* It contains ten unit test cases for the {@link AbstractSearcher#or()} method.\n*/\nclass AbstractSearcherTest2 {"
	},
	{
		"original_code": "// AbstractSearcher.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\npublic abstract class AbstractSearcher<E> implements Searcher<E> {\n\n    private List<String> indexProperties;\n\n    public AbstractSearcher() {\n        this.indexProperties = new ArrayList<String>();\n    }\n\n    public AbstractSearcher(Class clazz) throws BeanBinException {\n        this.indexProperties = IndexUtils.getIndexProperties(clazz);\n    }\n\n    public ActiveList<E> and() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.AND);\n        return list;\n    }\n\n    public ActiveList<E> fetchSize(int fetchSize) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setFetchSize(fetchSize);\n        return list;\n    }\n\n    public ActiveList<E> or() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.OR);\n        return list;\n    }\n\n    public ActiveList<E> contains(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.CONTAINS));\n        return list;\n    }\n\n    public ActiveList<E> greaterThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHAN));\n        return list;\n    }\n\n    public ActiveList<E> greaterThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lessThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHAN));\n        return list;\n    }\n\n    public ActiveList<E> lessThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lookup(Query query) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(query);\n        return list;\n    }\n\n    public ActiveList<E> matches(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.EQUALS));\n        return list;\n    }\n\n    private Criteria makeCriteria(String property, Object term, SearchType searchType) throws BeanBinException {\n        if (indexProperties.contains(property)) {\n            if (searchType == SearchType.LESSTHAN || searchType == SearchType.LESSTHANOREQUALTO || searchType == SearchType.GREATERTHAN || searchType == SearchType.GREATERTHANOREQUALTO) {\n                throw new BeanBinException(\"You cannot search a string index with the search type \" + searchType);\n            } else if (searchType == SearchType.DOESNOTEQUAL) {\n                term = \"NOT \\\"\" + term + \"\\\"\";\n            } else if (searchType == SearchType.CONTAINS) {\n                term = \"*\" + term + \"*\";\n            }\n            return new IndexCriteria(property, term.toString());\n        } else {\n            return new Criteria(property, term, searchType);\n        }\n    }\n\n    public ActiveList<E> sortBy(String property) throws BeanBinException {\n        return sortBy(property, SortBy.ASCENDING);\n    }\n\n    public ActiveList<E> sortBy(String property, SortBy sort) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setSortBy(property, sort);\n        return list;\n    }\n\n    protected abstract ActiveList<E> getList() throws BeanBinException;\n\n    public List<String> getIndexProperties() {\n        return indexProperties;\n    }\n\n    public void setIndexProperties(List<String> indexProperties) {\n        this.indexProperties = indexProperties;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/AbstractSearcherTest3.java",
		"test_prompt": "// AbstractSearcherTest3.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractSearcher}.\n* It contains ten unit test cases for the {@link AbstractSearcher#contains(String, Object)} method.\n*/\nclass AbstractSearcherTest3 {"
	},
	{
		"original_code": "// AbstractSearcher.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\npublic abstract class AbstractSearcher<E> implements Searcher<E> {\n\n    private List<String> indexProperties;\n\n    public AbstractSearcher() {\n        this.indexProperties = new ArrayList<String>();\n    }\n\n    public AbstractSearcher(Class clazz) throws BeanBinException {\n        this.indexProperties = IndexUtils.getIndexProperties(clazz);\n    }\n\n    public ActiveList<E> and() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.AND);\n        return list;\n    }\n\n    public ActiveList<E> fetchSize(int fetchSize) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setFetchSize(fetchSize);\n        return list;\n    }\n\n    public ActiveList<E> or() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.OR);\n        return list;\n    }\n\n    public ActiveList<E> contains(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.CONTAINS));\n        return list;\n    }\n\n    public ActiveList<E> greaterThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHAN));\n        return list;\n    }\n\n    public ActiveList<E> greaterThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lessThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHAN));\n        return list;\n    }\n\n    public ActiveList<E> lessThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lookup(Query query) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(query);\n        return list;\n    }\n\n    public ActiveList<E> matches(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.EQUALS));\n        return list;\n    }\n\n    private Criteria makeCriteria(String property, Object term, SearchType searchType) throws BeanBinException {\n        if (indexProperties.contains(property)) {\n            if (searchType == SearchType.LESSTHAN || searchType == SearchType.LESSTHANOREQUALTO || searchType == SearchType.GREATERTHAN || searchType == SearchType.GREATERTHANOREQUALTO) {\n                throw new BeanBinException(\"You cannot search a string index with the search type \" + searchType);\n            } else if (searchType == SearchType.DOESNOTEQUAL) {\n                term = \"NOT \\\"\" + term + \"\\\"\";\n            } else if (searchType == SearchType.CONTAINS) {\n                term = \"*\" + term + \"*\";\n            }\n            return new IndexCriteria(property, term.toString());\n        } else {\n            return new Criteria(property, term, searchType);\n        }\n    }\n\n    public ActiveList<E> sortBy(String property) throws BeanBinException {\n        return sortBy(property, SortBy.ASCENDING);\n    }\n\n    public ActiveList<E> sortBy(String property, SortBy sort) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setSortBy(property, sort);\n        return list;\n    }\n\n    protected abstract ActiveList<E> getList() throws BeanBinException;\n\n    public List<String> getIndexProperties() {\n        return indexProperties;\n    }\n\n    public void setIndexProperties(List<String> indexProperties) {\n        this.indexProperties = indexProperties;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/AbstractSearcherTest4.java",
		"test_prompt": "// AbstractSearcherTest4.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractSearcher}.\n* It contains ten unit test cases for the {@link AbstractSearcher#greaterThan(String, Number)} method.\n*/\nclass AbstractSearcherTest4 {"
	},
	{
		"original_code": "// AbstractSearcher.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\npublic abstract class AbstractSearcher<E> implements Searcher<E> {\n\n    private List<String> indexProperties;\n\n    public AbstractSearcher() {\n        this.indexProperties = new ArrayList<String>();\n    }\n\n    public AbstractSearcher(Class clazz) throws BeanBinException {\n        this.indexProperties = IndexUtils.getIndexProperties(clazz);\n    }\n\n    public ActiveList<E> and() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.AND);\n        return list;\n    }\n\n    public ActiveList<E> fetchSize(int fetchSize) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setFetchSize(fetchSize);\n        return list;\n    }\n\n    public ActiveList<E> or() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.OR);\n        return list;\n    }\n\n    public ActiveList<E> contains(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.CONTAINS));\n        return list;\n    }\n\n    public ActiveList<E> greaterThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHAN));\n        return list;\n    }\n\n    public ActiveList<E> greaterThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lessThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHAN));\n        return list;\n    }\n\n    public ActiveList<E> lessThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lookup(Query query) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(query);\n        return list;\n    }\n\n    public ActiveList<E> matches(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.EQUALS));\n        return list;\n    }\n\n    private Criteria makeCriteria(String property, Object term, SearchType searchType) throws BeanBinException {\n        if (indexProperties.contains(property)) {\n            if (searchType == SearchType.LESSTHAN || searchType == SearchType.LESSTHANOREQUALTO || searchType == SearchType.GREATERTHAN || searchType == SearchType.GREATERTHANOREQUALTO) {\n                throw new BeanBinException(\"You cannot search a string index with the search type \" + searchType);\n            } else if (searchType == SearchType.DOESNOTEQUAL) {\n                term = \"NOT \\\"\" + term + \"\\\"\";\n            } else if (searchType == SearchType.CONTAINS) {\n                term = \"*\" + term + \"*\";\n            }\n            return new IndexCriteria(property, term.toString());\n        } else {\n            return new Criteria(property, term, searchType);\n        }\n    }\n\n    public ActiveList<E> sortBy(String property) throws BeanBinException {\n        return sortBy(property, SortBy.ASCENDING);\n    }\n\n    public ActiveList<E> sortBy(String property, SortBy sort) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setSortBy(property, sort);\n        return list;\n    }\n\n    protected abstract ActiveList<E> getList() throws BeanBinException;\n\n    public List<String> getIndexProperties() {\n        return indexProperties;\n    }\n\n    public void setIndexProperties(List<String> indexProperties) {\n        this.indexProperties = indexProperties;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/AbstractSearcherTest5.java",
		"test_prompt": "// AbstractSearcherTest5.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractSearcher}.\n* It contains ten unit test cases for the {@link AbstractSearcher#greaterThanOrEqualTo(String, Number)} method.\n*/\nclass AbstractSearcherTest5 {"
	},
	{
		"original_code": "// AbstractSearcher.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\npublic abstract class AbstractSearcher<E> implements Searcher<E> {\n\n    private List<String> indexProperties;\n\n    public AbstractSearcher() {\n        this.indexProperties = new ArrayList<String>();\n    }\n\n    public AbstractSearcher(Class clazz) throws BeanBinException {\n        this.indexProperties = IndexUtils.getIndexProperties(clazz);\n    }\n\n    public ActiveList<E> and() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.AND);\n        return list;\n    }\n\n    public ActiveList<E> fetchSize(int fetchSize) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setFetchSize(fetchSize);\n        return list;\n    }\n\n    public ActiveList<E> or() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.OR);\n        return list;\n    }\n\n    public ActiveList<E> contains(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.CONTAINS));\n        return list;\n    }\n\n    public ActiveList<E> greaterThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHAN));\n        return list;\n    }\n\n    public ActiveList<E> greaterThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lessThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHAN));\n        return list;\n    }\n\n    public ActiveList<E> lessThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lookup(Query query) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(query);\n        return list;\n    }\n\n    public ActiveList<E> matches(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.EQUALS));\n        return list;\n    }\n\n    private Criteria makeCriteria(String property, Object term, SearchType searchType) throws BeanBinException {\n        if (indexProperties.contains(property)) {\n            if (searchType == SearchType.LESSTHAN || searchType == SearchType.LESSTHANOREQUALTO || searchType == SearchType.GREATERTHAN || searchType == SearchType.GREATERTHANOREQUALTO) {\n                throw new BeanBinException(\"You cannot search a string index with the search type \" + searchType);\n            } else if (searchType == SearchType.DOESNOTEQUAL) {\n                term = \"NOT \\\"\" + term + \"\\\"\";\n            } else if (searchType == SearchType.CONTAINS) {\n                term = \"*\" + term + \"*\";\n            }\n            return new IndexCriteria(property, term.toString());\n        } else {\n            return new Criteria(property, term, searchType);\n        }\n    }\n\n    public ActiveList<E> sortBy(String property) throws BeanBinException {\n        return sortBy(property, SortBy.ASCENDING);\n    }\n\n    public ActiveList<E> sortBy(String property, SortBy sort) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setSortBy(property, sort);\n        return list;\n    }\n\n    protected abstract ActiveList<E> getList() throws BeanBinException;\n\n    public List<String> getIndexProperties() {\n        return indexProperties;\n    }\n\n    public void setIndexProperties(List<String> indexProperties) {\n        this.indexProperties = indexProperties;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/AbstractSearcherTest6.java",
		"test_prompt": "// AbstractSearcherTest6.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractSearcher}.\n* It contains ten unit test cases for the {@link AbstractSearcher#lessThan(String, Number)} method.\n*/\nclass AbstractSearcherTest6 {"
	},
	{
		"original_code": "// AbstractSearcher.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\npublic abstract class AbstractSearcher<E> implements Searcher<E> {\n\n    private List<String> indexProperties;\n\n    public AbstractSearcher() {\n        this.indexProperties = new ArrayList<String>();\n    }\n\n    public AbstractSearcher(Class clazz) throws BeanBinException {\n        this.indexProperties = IndexUtils.getIndexProperties(clazz);\n    }\n\n    public ActiveList<E> and() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.AND);\n        return list;\n    }\n\n    public ActiveList<E> fetchSize(int fetchSize) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setFetchSize(fetchSize);\n        return list;\n    }\n\n    public ActiveList<E> or() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.OR);\n        return list;\n    }\n\n    public ActiveList<E> contains(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.CONTAINS));\n        return list;\n    }\n\n    public ActiveList<E> greaterThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHAN));\n        return list;\n    }\n\n    public ActiveList<E> greaterThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lessThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHAN));\n        return list;\n    }\n\n    public ActiveList<E> lessThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lookup(Query query) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(query);\n        return list;\n    }\n\n    public ActiveList<E> matches(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.EQUALS));\n        return list;\n    }\n\n    private Criteria makeCriteria(String property, Object term, SearchType searchType) throws BeanBinException {\n        if (indexProperties.contains(property)) {\n            if (searchType == SearchType.LESSTHAN || searchType == SearchType.LESSTHANOREQUALTO || searchType == SearchType.GREATERTHAN || searchType == SearchType.GREATERTHANOREQUALTO) {\n                throw new BeanBinException(\"You cannot search a string index with the search type \" + searchType);\n            } else if (searchType == SearchType.DOESNOTEQUAL) {\n                term = \"NOT \\\"\" + term + \"\\\"\";\n            } else if (searchType == SearchType.CONTAINS) {\n                term = \"*\" + term + \"*\";\n            }\n            return new IndexCriteria(property, term.toString());\n        } else {\n            return new Criteria(property, term, searchType);\n        }\n    }\n\n    public ActiveList<E> sortBy(String property) throws BeanBinException {\n        return sortBy(property, SortBy.ASCENDING);\n    }\n\n    public ActiveList<E> sortBy(String property, SortBy sort) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setSortBy(property, sort);\n        return list;\n    }\n\n    protected abstract ActiveList<E> getList() throws BeanBinException;\n\n    public List<String> getIndexProperties() {\n        return indexProperties;\n    }\n\n    public void setIndexProperties(List<String> indexProperties) {\n        this.indexProperties = indexProperties;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/AbstractSearcherTest7.java",
		"test_prompt": "// AbstractSearcherTest7.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractSearcher}.\n* It contains ten unit test cases for the {@link AbstractSearcher#lessThanOrEqualTo(String, Number)} method.\n*/\nclass AbstractSearcherTest7 {"
	},
	{
		"original_code": "// AbstractSearcher.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\npublic abstract class AbstractSearcher<E> implements Searcher<E> {\n\n    private List<String> indexProperties;\n\n    public AbstractSearcher() {\n        this.indexProperties = new ArrayList<String>();\n    }\n\n    public AbstractSearcher(Class clazz) throws BeanBinException {\n        this.indexProperties = IndexUtils.getIndexProperties(clazz);\n    }\n\n    public ActiveList<E> and() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.AND);\n        return list;\n    }\n\n    public ActiveList<E> fetchSize(int fetchSize) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setFetchSize(fetchSize);\n        return list;\n    }\n\n    public ActiveList<E> or() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.OR);\n        return list;\n    }\n\n    public ActiveList<E> contains(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.CONTAINS));\n        return list;\n    }\n\n    public ActiveList<E> greaterThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHAN));\n        return list;\n    }\n\n    public ActiveList<E> greaterThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lessThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHAN));\n        return list;\n    }\n\n    public ActiveList<E> lessThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lookup(Query query) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(query);\n        return list;\n    }\n\n    public ActiveList<E> matches(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.EQUALS));\n        return list;\n    }\n\n    private Criteria makeCriteria(String property, Object term, SearchType searchType) throws BeanBinException {\n        if (indexProperties.contains(property)) {\n            if (searchType == SearchType.LESSTHAN || searchType == SearchType.LESSTHANOREQUALTO || searchType == SearchType.GREATERTHAN || searchType == SearchType.GREATERTHANOREQUALTO) {\n                throw new BeanBinException(\"You cannot search a string index with the search type \" + searchType);\n            } else if (searchType == SearchType.DOESNOTEQUAL) {\n                term = \"NOT \\\"\" + term + \"\\\"\";\n            } else if (searchType == SearchType.CONTAINS) {\n                term = \"*\" + term + \"*\";\n            }\n            return new IndexCriteria(property, term.toString());\n        } else {\n            return new Criteria(property, term, searchType);\n        }\n    }\n\n    public ActiveList<E> sortBy(String property) throws BeanBinException {\n        return sortBy(property, SortBy.ASCENDING);\n    }\n\n    public ActiveList<E> sortBy(String property, SortBy sort) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setSortBy(property, sort);\n        return list;\n    }\n\n    protected abstract ActiveList<E> getList() throws BeanBinException;\n\n    public List<String> getIndexProperties() {\n        return indexProperties;\n    }\n\n    public void setIndexProperties(List<String> indexProperties) {\n        this.indexProperties = indexProperties;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/AbstractSearcherTest8.java",
		"test_prompt": "// AbstractSearcherTest8.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractSearcher}.\n* It contains ten unit test cases for the {@link AbstractSearcher#lookup(Query)} method.\n*/\nclass AbstractSearcherTest8 {"
	},
	{
		"original_code": "// AbstractSearcher.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\npublic abstract class AbstractSearcher<E> implements Searcher<E> {\n\n    private List<String> indexProperties;\n\n    public AbstractSearcher() {\n        this.indexProperties = new ArrayList<String>();\n    }\n\n    public AbstractSearcher(Class clazz) throws BeanBinException {\n        this.indexProperties = IndexUtils.getIndexProperties(clazz);\n    }\n\n    public ActiveList<E> and() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.AND);\n        return list;\n    }\n\n    public ActiveList<E> fetchSize(int fetchSize) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setFetchSize(fetchSize);\n        return list;\n    }\n\n    public ActiveList<E> or() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.OR);\n        return list;\n    }\n\n    public ActiveList<E> contains(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.CONTAINS));\n        return list;\n    }\n\n    public ActiveList<E> greaterThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHAN));\n        return list;\n    }\n\n    public ActiveList<E> greaterThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lessThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHAN));\n        return list;\n    }\n\n    public ActiveList<E> lessThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lookup(Query query) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(query);\n        return list;\n    }\n\n    public ActiveList<E> matches(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.EQUALS));\n        return list;\n    }\n\n    private Criteria makeCriteria(String property, Object term, SearchType searchType) throws BeanBinException {\n        if (indexProperties.contains(property)) {\n            if (searchType == SearchType.LESSTHAN || searchType == SearchType.LESSTHANOREQUALTO || searchType == SearchType.GREATERTHAN || searchType == SearchType.GREATERTHANOREQUALTO) {\n                throw new BeanBinException(\"You cannot search a string index with the search type \" + searchType);\n            } else if (searchType == SearchType.DOESNOTEQUAL) {\n                term = \"NOT \\\"\" + term + \"\\\"\";\n            } else if (searchType == SearchType.CONTAINS) {\n                term = \"*\" + term + \"*\";\n            }\n            return new IndexCriteria(property, term.toString());\n        } else {\n            return new Criteria(property, term, searchType);\n        }\n    }\n\n    public ActiveList<E> sortBy(String property) throws BeanBinException {\n        return sortBy(property, SortBy.ASCENDING);\n    }\n\n    public ActiveList<E> sortBy(String property, SortBy sort) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setSortBy(property, sort);\n        return list;\n    }\n\n    protected abstract ActiveList<E> getList() throws BeanBinException;\n\n    public List<String> getIndexProperties() {\n        return indexProperties;\n    }\n\n    public void setIndexProperties(List<String> indexProperties) {\n        this.indexProperties = indexProperties;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/AbstractSearcherTest9.java",
		"test_prompt": "// AbstractSearcherTest9.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractSearcher}.\n* It contains ten unit test cases for the {@link AbstractSearcher#matches(String, Object)} method.\n*/\nclass AbstractSearcherTest9 {"
	},
	{
		"original_code": "// AbstractSearcher.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\npublic abstract class AbstractSearcher<E> implements Searcher<E> {\n\n    private List<String> indexProperties;\n\n    public AbstractSearcher() {\n        this.indexProperties = new ArrayList<String>();\n    }\n\n    public AbstractSearcher(Class clazz) throws BeanBinException {\n        this.indexProperties = IndexUtils.getIndexProperties(clazz);\n    }\n\n    public ActiveList<E> and() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.AND);\n        return list;\n    }\n\n    public ActiveList<E> fetchSize(int fetchSize) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setFetchSize(fetchSize);\n        return list;\n    }\n\n    public ActiveList<E> or() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.OR);\n        return list;\n    }\n\n    public ActiveList<E> contains(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.CONTAINS));\n        return list;\n    }\n\n    public ActiveList<E> greaterThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHAN));\n        return list;\n    }\n\n    public ActiveList<E> greaterThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lessThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHAN));\n        return list;\n    }\n\n    public ActiveList<E> lessThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lookup(Query query) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(query);\n        return list;\n    }\n\n    public ActiveList<E> matches(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.EQUALS));\n        return list;\n    }\n\n    private Criteria makeCriteria(String property, Object term, SearchType searchType) throws BeanBinException {\n        if (indexProperties.contains(property)) {\n            if (searchType == SearchType.LESSTHAN || searchType == SearchType.LESSTHANOREQUALTO || searchType == SearchType.GREATERTHAN || searchType == SearchType.GREATERTHANOREQUALTO) {\n                throw new BeanBinException(\"You cannot search a string index with the search type \" + searchType);\n            } else if (searchType == SearchType.DOESNOTEQUAL) {\n                term = \"NOT \\\"\" + term + \"\\\"\";\n            } else if (searchType == SearchType.CONTAINS) {\n                term = \"*\" + term + \"*\";\n            }\n            return new IndexCriteria(property, term.toString());\n        } else {\n            return new Criteria(property, term, searchType);\n        }\n    }\n\n    public ActiveList<E> sortBy(String property) throws BeanBinException {\n        return sortBy(property, SortBy.ASCENDING);\n    }\n\n    public ActiveList<E> sortBy(String property, SortBy sort) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setSortBy(property, sort);\n        return list;\n    }\n\n    protected abstract ActiveList<E> getList() throws BeanBinException;\n\n    public List<String> getIndexProperties() {\n        return indexProperties;\n    }\n\n    public void setIndexProperties(List<String> indexProperties) {\n        this.indexProperties = indexProperties;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/AbstractSearcherTest10.java",
		"test_prompt": "// AbstractSearcherTest10.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractSearcher}.\n* It contains ten unit test cases for the {@link AbstractSearcher#sortBy(String)} method.\n*/\nclass AbstractSearcherTest10 {"
	},
	{
		"original_code": "// AbstractSearcher.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\npublic abstract class AbstractSearcher<E> implements Searcher<E> {\n\n    private List<String> indexProperties;\n\n    public AbstractSearcher() {\n        this.indexProperties = new ArrayList<String>();\n    }\n\n    public AbstractSearcher(Class clazz) throws BeanBinException {\n        this.indexProperties = IndexUtils.getIndexProperties(clazz);\n    }\n\n    public ActiveList<E> and() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.AND);\n        return list;\n    }\n\n    public ActiveList<E> fetchSize(int fetchSize) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setFetchSize(fetchSize);\n        return list;\n    }\n\n    public ActiveList<E> or() throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setNextConditional(Conditional.OR);\n        return list;\n    }\n\n    public ActiveList<E> contains(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.CONTAINS));\n        return list;\n    }\n\n    public ActiveList<E> greaterThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHAN));\n        return list;\n    }\n\n    public ActiveList<E> greaterThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.GREATERTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lessThan(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHAN));\n        return list;\n    }\n\n    public ActiveList<E> lessThanOrEqualTo(String property, Number number) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, number, SearchType.LESSTHANOREQUALTO));\n        return list;\n    }\n\n    public ActiveList<E> lookup(Query query) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(query);\n        return list;\n    }\n\n    public ActiveList<E> matches(String property, Object term) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().add(makeCriteria(property, term, SearchType.EQUALS));\n        return list;\n    }\n\n    private Criteria makeCriteria(String property, Object term, SearchType searchType) throws BeanBinException {\n        if (indexProperties.contains(property)) {\n            if (searchType == SearchType.LESSTHAN || searchType == SearchType.LESSTHANOREQUALTO || searchType == SearchType.GREATERTHAN || searchType == SearchType.GREATERTHANOREQUALTO) {\n                throw new BeanBinException(\"You cannot search a string index with the search type \" + searchType);\n            } else if (searchType == SearchType.DOESNOTEQUAL) {\n                term = \"NOT \\\"\" + term + \"\\\"\";\n            } else if (searchType == SearchType.CONTAINS) {\n                term = \"*\" + term + \"*\";\n            }\n            return new IndexCriteria(property, term.toString());\n        } else {\n            return new Criteria(property, term, searchType);\n        }\n    }\n\n    public ActiveList<E> sortBy(String property) throws BeanBinException {\n        return sortBy(property, SortBy.ASCENDING);\n    }\n\n    public ActiveList<E> sortBy(String property, SortBy sort) throws BeanBinException {\n        ActiveList<E> list = getList();\n        list.getQuery().setSortBy(property, sort);\n        return list;\n    }\n\n    protected abstract ActiveList<E> getList() throws BeanBinException;\n\n    public List<String> getIndexProperties() {\n        return indexProperties;\n    }\n\n    public void setIndexProperties(List<String> indexProperties) {\n        this.indexProperties = indexProperties;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/AbstractSearcherTest11.java",
		"test_prompt": "// AbstractSearcherTest11.java\npackage net.sourceforge.beanbin;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.query.Conditional;\nimport net.sourceforge.beanbin.query.Criteria;\nimport net.sourceforge.beanbin.query.IndexCriteria;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.query.SearchType;\nimport net.sourceforge.beanbin.query.SortBy;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AbstractSearcher}.\n* It contains ten unit test cases for the {@link AbstractSearcher#sortBy(String, SortBy)} method.\n*/\nclass AbstractSearcherTest11 {"
	},
	{
		"original_code": "// Query.java\npackage net.sourceforge.beanbin.query;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * This is the class that contains all of the query information\n * for a given search.\n *\n * @author Brian Gorman\n */\npublic class Query implements Serializable {\n\n    private static final long serialVersionUID = -599887042334939313L;\n\n    private List<Criteria> criterias;\n\n    private Conditional nextAdd;\n\n    private int position;\n\n    private int fetchSize;\n\n    private String sortBy;\n\n    private SortBy sort;\n\n    public Query() {\n        this.criterias = new ArrayList<Criteria>();\n        this.position = -1;\n        this.fetchSize = -1;\n    }\n\n    public Query(Criteria criteria) {\n        this.criterias = new ArrayList<Criteria>();\n        this.criterias.add(criteria);\n        this.position = -1;\n        this.fetchSize = -1;\n    }\n\n    /**\n     * The is an implied 'and' and is just there to make the\n     * interface nice for those of you that created query\n     * with the default constructor...\n     *\n     * @param criteria\n     */\n    public void add(Criteria criteria) {\n        if (nextAdd != null && nextAdd == Conditional.OR) {\n            or(criteria);\n        } else {\n            and(criteria);\n        }\n    }\n\n    /**\n     * Adds all criteria from this query to ours\n     * @param query\n     */\n    public void add(Query query) {\n        for (Criteria criteria : query.getCriterias()) {\n            add(criteria);\n        }\n    }\n\n    /**\n     * next time something is added to the query this conditional\n     * is attributed as its \"previous condition\"\n     * @param condition\n     */\n    public void setNextConditional(Conditional condition) {\n        this.nextAdd = condition;\n    }\n\n    /**\n     * Adds a {@link Criteria} to this Query \"anded\" together with the\n     * previous {@link Criteria}\n     * @param criteria\n     */\n    public void and(Criteria criteria) {\n        if (!criterias.isEmpty()) {\n            criteria.setPreviousCondition(Conditional.AND);\n        }\n        this.criterias.add(criteria);\n    }\n\n    /**\n     * Adds a {@link Criteria} to this Query \"ored\" together with the\n     * previous {@link Criteria}\n     * @param criteria\n     */\n    public void or(Criteria criteria) {\n        if (!criterias.isEmpty()) {\n            criteria.setPreviousCondition(Conditional.OR);\n        }\n        this.criterias.add(criteria);\n    }\n\n    /**\n     * Returns a list of the built up criterias bound together\n     * with conditionals.\n     * @return criterias\n     */\n    public List<Criteria> getCriterias() {\n        return criterias;\n    }\n\n    public boolean equals(Object obj) {\n        if (obj instanceof Query) {\n            return toString().equals(obj.toString());\n        } else {\n            return false;\n        }\n    }\n\n    public int hashCode() {\n        return toString().hashCode();\n    }\n\n    public String toString() {\n        String string = \"\";\n        for (Criteria criteria : getCriterias()) {\n            if (criteria.getPreviousCondition() != null) {\n                string += \" \" + criteria.getPreviousCondition() + \" \";\n            }\n            string += criteria.toString();\n        }\n        return string;\n    }\n\n    public int getFetchSize() {\n        return fetchSize;\n    }\n\n    public void setFetchSize(int fetchSize) {\n        setPosition(0);\n        this.fetchSize = fetchSize;\n    }\n\n    public int getPosition() {\n        return position;\n    }\n\n    public void setPosition(int position) {\n        this.position = position;\n    }\n\n    public String getSortByProperty() {\n        return sortBy;\n    }\n\n    public SortBy getSortType() {\n        return sort;\n    }\n\n    public void setSortBy(String sortBy, SortBy sort) {\n        this.sortBy = sortBy;\n        this.sort = sort;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/query/QueryTest0.java",
		"test_prompt": "// QueryTest0.java\npackage net.sourceforge.beanbin.query;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Query}.\n* It contains ten unit test cases for the {@link Query#equals(Object)} method.\n*/\nclass QueryTest0 {"
	},
	{
		"original_code": "// Query.java\npackage net.sourceforge.beanbin.query;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * This is the class that contains all of the query information\n * for a given search.\n *\n * @author Brian Gorman\n */\npublic class Query implements Serializable {\n\n    private static final long serialVersionUID = -599887042334939313L;\n\n    private List<Criteria> criterias;\n\n    private Conditional nextAdd;\n\n    private int position;\n\n    private int fetchSize;\n\n    private String sortBy;\n\n    private SortBy sort;\n\n    public Query() {\n        this.criterias = new ArrayList<Criteria>();\n        this.position = -1;\n        this.fetchSize = -1;\n    }\n\n    public Query(Criteria criteria) {\n        this.criterias = new ArrayList<Criteria>();\n        this.criterias.add(criteria);\n        this.position = -1;\n        this.fetchSize = -1;\n    }\n\n    /**\n     * The is an implied 'and' and is just there to make the\n     * interface nice for those of you that created query\n     * with the default constructor...\n     *\n     * @param criteria\n     */\n    public void add(Criteria criteria) {\n        if (nextAdd != null && nextAdd == Conditional.OR) {\n            or(criteria);\n        } else {\n            and(criteria);\n        }\n    }\n\n    /**\n     * Adds all criteria from this query to ours\n     * @param query\n     */\n    public void add(Query query) {\n        for (Criteria criteria : query.getCriterias()) {\n            add(criteria);\n        }\n    }\n\n    /**\n     * next time something is added to the query this conditional\n     * is attributed as its \"previous condition\"\n     * @param condition\n     */\n    public void setNextConditional(Conditional condition) {\n        this.nextAdd = condition;\n    }\n\n    /**\n     * Adds a {@link Criteria} to this Query \"anded\" together with the\n     * previous {@link Criteria}\n     * @param criteria\n     */\n    public void and(Criteria criteria) {\n        if (!criterias.isEmpty()) {\n            criteria.setPreviousCondition(Conditional.AND);\n        }\n        this.criterias.add(criteria);\n    }\n\n    /**\n     * Adds a {@link Criteria} to this Query \"ored\" together with the\n     * previous {@link Criteria}\n     * @param criteria\n     */\n    public void or(Criteria criteria) {\n        if (!criterias.isEmpty()) {\n            criteria.setPreviousCondition(Conditional.OR);\n        }\n        this.criterias.add(criteria);\n    }\n\n    /**\n     * Returns a list of the built up criterias bound together\n     * with conditionals.\n     * @return criterias\n     */\n    public List<Criteria> getCriterias() {\n        return criterias;\n    }\n\n    public boolean equals(Object obj) {\n        if (obj instanceof Query) {\n            return toString().equals(obj.toString());\n        } else {\n            return false;\n        }\n    }\n\n    public int hashCode() {\n        return toString().hashCode();\n    }\n\n    public String toString() {\n        String string = \"\";\n        for (Criteria criteria : getCriterias()) {\n            if (criteria.getPreviousCondition() != null) {\n                string += \" \" + criteria.getPreviousCondition() + \" \";\n            }\n            string += criteria.toString();\n        }\n        return string;\n    }\n\n    public int getFetchSize() {\n        return fetchSize;\n    }\n\n    public void setFetchSize(int fetchSize) {\n        setPosition(0);\n        this.fetchSize = fetchSize;\n    }\n\n    public int getPosition() {\n        return position;\n    }\n\n    public void setPosition(int position) {\n        this.position = position;\n    }\n\n    public String getSortByProperty() {\n        return sortBy;\n    }\n\n    public SortBy getSortType() {\n        return sort;\n    }\n\n    public void setSortBy(String sortBy, SortBy sort) {\n        this.sortBy = sortBy;\n        this.sort = sort;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/query/QueryTest1.java",
		"test_prompt": "// QueryTest1.java\npackage net.sourceforge.beanbin.query;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Query}.\n* It contains ten unit test cases for the {@link Query#hashCode()} method.\n*/\nclass QueryTest1 {"
	},
	{
		"original_code": "// Criteria.java\npackage net.sourceforge.beanbin.query;\n\nimport java.io.Serializable;\n\n/**\n * A single form of criteria to add to a search {@link Query}\n * @author Brian Gorman\n */\npublic class Criteria implements Serializable {\n\n    private static final long serialVersionUID = 1249321323400263260L;\n\n    private String property;\n\n    private Object term;\n\n    private SearchType type;\n\n    private Conditional previousCondition;\n\n    /**\n     * @param property Property of bean being searched\n     * @param term\tSearch term\n     * @param type\toperation....\n     */\n    public Criteria(String property, Object term, SearchType type) {\n        this.property = property;\n        this.term = term;\n        this.type = type;\n        this.previousCondition = null;\n    }\n\n    /**\n     * @return Returns null if the first criteria otherwise see {@link Conditional}\n     */\n    public Conditional getPreviousCondition() {\n        return previousCondition;\n    }\n\n    /**\n     * This gets set by {@link Query}\n     * @param condition\n     */\n    protected void setPreviousCondition(Conditional condition) {\n        this.previousCondition = condition;\n    }\n\n    public String getProperty() {\n        return property;\n    }\n\n    public void setProperty(String property) {\n        this.property = property;\n    }\n\n    public Object getTerm() {\n        return term;\n    }\n\n    public void setTerm(Object term) {\n        this.term = term;\n    }\n\n    public SearchType getType() {\n        return type;\n    }\n\n    public void setType(SearchType type) {\n        this.type = type;\n    }\n\n    public boolean equals(Object obj) {\n        if (obj instanceof Criteria) {\n            return toString().equals(obj.toString());\n        } else {\n            return false;\n        }\n    }\n\n    public int hashCode() {\n        return toString().hashCode();\n    }\n\n    public String toString() {\n        return getProperty() + \" \" + getType() + \" \" + getTerm();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/query/CriteriaTest0.java",
		"test_prompt": "// CriteriaTest0.java\npackage net.sourceforge.beanbin.query;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Criteria}.\n* It contains ten unit test cases for the {@link Criteria#equals(Object)} method.\n*/\nclass CriteriaTest0 {"
	},
	{
		"original_code": "// Criteria.java\npackage net.sourceforge.beanbin.query;\n\nimport java.io.Serializable;\n\n/**\n * A single form of criteria to add to a search {@link Query}\n * @author Brian Gorman\n */\npublic class Criteria implements Serializable {\n\n    private static final long serialVersionUID = 1249321323400263260L;\n\n    private String property;\n\n    private Object term;\n\n    private SearchType type;\n\n    private Conditional previousCondition;\n\n    /**\n     * @param property Property of bean being searched\n     * @param term\tSearch term\n     * @param type\toperation....\n     */\n    public Criteria(String property, Object term, SearchType type) {\n        this.property = property;\n        this.term = term;\n        this.type = type;\n        this.previousCondition = null;\n    }\n\n    /**\n     * @return Returns null if the first criteria otherwise see {@link Conditional}\n     */\n    public Conditional getPreviousCondition() {\n        return previousCondition;\n    }\n\n    /**\n     * This gets set by {@link Query}\n     * @param condition\n     */\n    protected void setPreviousCondition(Conditional condition) {\n        this.previousCondition = condition;\n    }\n\n    public String getProperty() {\n        return property;\n    }\n\n    public void setProperty(String property) {\n        this.property = property;\n    }\n\n    public Object getTerm() {\n        return term;\n    }\n\n    public void setTerm(Object term) {\n        this.term = term;\n    }\n\n    public SearchType getType() {\n        return type;\n    }\n\n    public void setType(SearchType type) {\n        this.type = type;\n    }\n\n    public boolean equals(Object obj) {\n        if (obj instanceof Criteria) {\n            return toString().equals(obj.toString());\n        } else {\n            return false;\n        }\n    }\n\n    public int hashCode() {\n        return toString().hashCode();\n    }\n\n    public String toString() {\n        return getProperty() + \" \" + getType() + \" \" + getTerm();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/query/CriteriaTest1.java",
		"test_prompt": "// CriteriaTest1.java\npackage net.sourceforge.beanbin.query;\n\nimport java.io.Serializable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Criteria}.\n* It contains ten unit test cases for the {@link Criteria#hashCode()} method.\n*/\nclass CriteriaTest1 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest0.java",
		"test_prompt": "// EntityUtilsTest0.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#getId(Object)} method.\n*/\nclass EntityUtilsTest0 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest1.java",
		"test_prompt": "// EntityUtilsTest1.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#getIdProperty(Class)} method.\n*/\nclass EntityUtilsTest1 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest2.java",
		"test_prompt": "// EntityUtilsTest2.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#getProperty(Method)} method.\n*/\nclass EntityUtilsTest2 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest3.java",
		"test_prompt": "// EntityUtilsTest3.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#getMethod(Class, String)} method.\n*/\nclass EntityUtilsTest3 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest4.java",
		"test_prompt": "// EntityUtilsTest4.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#getBlobGetters(Class)} method.\n*/\nclass EntityUtilsTest4 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest5.java",
		"test_prompt": "// EntityUtilsTest5.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#hasBlobs(Class)} method.\n*/\nclass EntityUtilsTest5 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest6.java",
		"test_prompt": "// EntityUtilsTest6.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#isBlob(Class)} method.\n*/\nclass EntityUtilsTest6 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest7.java",
		"test_prompt": "// EntityUtilsTest7.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#getSubEntityMethods(Class)} method.\n*/\nclass EntityUtilsTest7 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest8.java",
		"test_prompt": "// EntityUtilsTest8.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#getIdGetter(Class)} method.\n*/\nclass EntityUtilsTest8 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest9.java",
		"test_prompt": "// EntityUtilsTest9.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#isEntity(Class)} method.\n*/\nclass EntityUtilsTest9 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest10.java",
		"test_prompt": "// EntityUtilsTest10.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#isAbstract(Class)} method.\n*/\nclass EntityUtilsTest10 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest11.java",
		"test_prompt": "// EntityUtilsTest11.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#isCollection(Class)} method.\n*/\nclass EntityUtilsTest11 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest12.java",
		"test_prompt": "// EntityUtilsTest12.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#getSetter(Method)} method.\n*/\nclass EntityUtilsTest12 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest13.java",
		"test_prompt": "// EntityUtilsTest13.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#getSetterName(Method)} method.\n*/\nclass EntityUtilsTest13 {"
	},
	{
		"original_code": "// EntityUtils.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\n\npublic class EntityUtils {\n\n    public static Object getId(Object entity) throws BeanBinException {\n        try {\n            return getIdGetter(entity.getClass()).invoke(entity, new Object[0]);\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils exception: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getIdProperty(Class clazz) throws BeanBinException {\n        return getProperty(getIdGetter(clazz));\n    }\n\n    public static String getProperty(Method method) {\n        String prop = method.getName();\n        if (prop.startsWith(\"get\") || prop.startsWith(\"set\") || prop.startsWith(\"has\")) {\n            prop = prop.substring(3);\n        } else if (prop.startsWith(\"is\")) {\n            prop = prop.substring(2);\n        }\n        prop = prop.substring(0, 1).toLowerCase() + prop.substring(1);\n        return prop;\n    }\n\n    public static Method getMethod(Class clazz, String property) throws BeanBinException {\n        property = property.substring(0, 1).toUpperCase() + property.substring(1);\n        List<Method> list = ReflectUtils.getGetterSearch(clazz).and().methodsThatHave(\"get\" + property).getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"Could not determine getter Method from the property: \" + property);\n        }\n        return list.get(0);\n    }\n\n    public static List<Method> getBlobGetters(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"get*\").and().methodsThatDontHave(\"getClass\");\n        for (Method getter : search.getMethods()) {\n            if (isBlob(getter.getReturnType())) {\n                list.add(getter);\n            }\n        }\n        return list;\n    }\n\n    public static boolean hasBlobs(Class clazz) throws BeanBinException {\n        return !getBlobGetters(clazz).isEmpty();\n    }\n\n    public static boolean isBlob(Class clazz) {\n        return new ReflectionSearch(clazz).hasAnnotation(\"@net.sourceforge.beanbin.annotations.blob.Blob\");\n    }\n\n    public static List<Method> getSubEntityMethods(Class clazz) throws BeanBinException {\n        List<Method> list = new ArrayList<Method>();\n        for (Method getter : ReflectUtils.getGetters(clazz)) {\n            Class returnType = getter.getReturnType();\n            if (!returnType.isPrimitive()) {\n                if (EntityUtils.isEntity(returnType)) {\n                    list.add(getter);\n                } else if (EntityUtils.isCollection(returnType)) {\n                    returnType = ReflectUtils.extractGenericType(getter.getGenericReturnType());\n                    if (returnType != null && EntityUtils.isEntity(returnType)) {\n                        list.add(getter);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n\n    public static Method getIdGetter(Class clazz) throws BeanBinException {\n        ReflectionSearch search = new ReflectionSearch(clazz).methodsThatHave(\"@Id\");\n        List<Method> list = search.getMethods();\n        if (list.size() != 1) {\n            throw new BeanBinException(\"You can only have one method with the @Id annotation\");\n        }\n        Method method = list.get(0);\n        return method;\n    }\n\n    public static boolean isEntity(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Entity.class);\n    }\n\n    public static boolean isAbstract(Class clazz) {\n        return ReflectUtils.hasAnnotation(clazz, Inheritance.class);\n    }\n\n    public static boolean isCollection(Class<?> clazz) {\n        try {\n            clazz.asSubclass(Collection.class);\n            return true;\n        } catch (ClassCastException e) {\n            return false;\n        }\n    }\n\n    public static void mergeEntities(Object master, Object tomerge) throws BeanBinException {\n        try {\n            for (Method getter : getGettersWithoutId(master.getClass())) {\n                Object masterobj = getter.invoke(master, new Object[0]);\n                Object tomergeobj = getter.invoke(tomerge, new Object[0]);\n                if (masterobj != null && !isEntity(masterobj.getClass())) {\n                    if (!masterobj.equals(tomergeobj)) {\n                        merge(master, getter, tomergeobj);\n                    }\n                } else if (masterobj == null && tomergeobj != null && !isEntity(tomergeobj.getClass())) {\n                    merge(master, getter, tomergeobj);\n                }\n            }\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtls.mergeEntities: \" + e.getMessage(), e);\n        }\n    }\n\n    private static void merge(Object master, Method getter, Object tomergeobj) throws BeanBinException, IllegalAccessException, InvocationTargetException {\n        Method setter = getSetter(getter);\n        Object[] args = { tomergeobj };\n        setter.invoke(master, args);\n    }\n\n    public static Method getSetter(Method getter) throws BeanBinException {\n        String setterName = getSetterName(getter);\n        Class[] params = { getter.getReturnType() };\n        try {\n            return getter.getDeclaringClass().getMethod(setterName, params);\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (Exception e) {\n            throw new BeanBinException(\"EntityUtils.getSetter: \" + e.getMessage(), e);\n        }\n    }\n\n    public static String getSetterName(Method getter) {\n        String prop = getProperty(getter);\n        String setterName = \"set\" + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n        return setterName;\n    }\n\n    public static List<Method> getGettersWithoutId(Class clazz) throws BeanBinException {\n        return ReflectUtils.getGetterSearch(clazz).and().methodsThatDontHave(\"@Id\").getMethods();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/EntityUtilsTest14.java",
		"test_prompt": "// EntityUtilsTest14.java\npackage net.sourceforge.beanbin.data;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.persistence.Entity;\nimport javax.persistence.Inheritance;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.reflect.ReflectUtils;\nimport net.sourceforge.beanbin.reflect.ReflectionSearch;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityUtils}.\n* It contains ten unit test cases for the {@link EntityUtils#getGettersWithoutId(Class)} method.\n*/\nclass EntityUtilsTest14 {"
	},
	{
		"original_code": "// EntityManagerFactoryShelf.java\npackage net.sourceforge.beanbin.data.ejb3;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Query;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.configuration.PropertyManager;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.data.ejb3.config.SchemaFinder;\n\npublic class EntityManagerFactoryShelf {\n\n    private Map<Class, EntityManagerFactory> factories;\n\n    private EntityManagerFactoryBuilder builder;\n\n    private static EntityManagerFactoryShelf shelf;\n\n    private EntityManagerFactoryShelf() throws Exception {\n        this.factories = new HashMap<Class, EntityManagerFactory>();\n        this.builder = getBuilder();\n    }\n\n    private EntityManagerFactoryBuilder getBuilder() throws Exception {\n        PropertyManager manager = new PropertyManager();\n        String className = manager.getProperty(\"entitymanagerfactorybuilder\").getValue();\n        if (className == null) {\n            throw new BeanBinException(\"Set beanbin.entitymanagerfactorybuilder property in beanbin.properties.\");\n        } else {\n            Class clazz = Thread.currentThread().getContextClassLoader().loadClass(className);\n            return (EntityManagerFactoryBuilder) clazz.newInstance();\n        }\n    }\n\n    public boolean contains(Class clazz) {\n        return factories.containsKey(clazz);\n    }\n\n    public EntityManagerFactory get(Class clazz) throws BeanBinException {\n        EntityManagerFactory fact = factories.get(clazz);\n        if (fact == null) {\n            fact = buildFactory(clazz);\n        }\n        return fact;\n    }\n\n    private EntityManagerFactory buildFactory(Class clazz) throws BeanBinException {\n        SchemaFinder finder = new SchemaFinder(clazz);\n        List<Class> schema = finder.getSchema();\n        EntityManagerFactory fact = builder.getFactory(schema, false);\n        EntityManager em = fact.createEntityManager();\n        Query query = em.createQuery(\"select \" + EntityUtils.getIdProperty(clazz) + \" from \" + clazz.getName());\n        query.setMaxResults(1);\n        try {\n            query.getResultList();\n        } catch (Exception e) {\n            // TODO: change this exception to check and make sure that it is a need\n            // to create exception\n            fact = builder.getFactory(schema, true);\n        }\n        for (Class c : schema) {\n            factories.put(c, fact);\n        }\n        return fact;\n    }\n\n    public static EntityManagerFactoryShelf getInstance() throws BeanBinException {\n        if (shelf == null) {\n            try {\n                shelf = new EntityManagerFactoryShelf();\n            } catch (Exception e) {\n                throw new BeanBinException(\"Please provide a correct EntitymanagerFactoryBuilder in beanbin.properties. cause: \" + e.getMessage(), e);\n            }\n        }\n        return shelf;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/ejb3/EntityManagerFactoryShelfTest0.java",
		"test_prompt": "// EntityManagerFactoryShelfTest0.java\npackage net.sourceforge.beanbin.data.ejb3;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Query;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.configuration.PropertyManager;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.data.ejb3.config.SchemaFinder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityManagerFactoryShelf}.\n* It contains ten unit test cases for the {@link EntityManagerFactoryShelf#contains(Class)} method.\n*/\nclass EntityManagerFactoryShelfTest0 {"
	},
	{
		"original_code": "// EntityManagerFactoryShelf.java\npackage net.sourceforge.beanbin.data.ejb3;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Query;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.configuration.PropertyManager;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.data.ejb3.config.SchemaFinder;\n\npublic class EntityManagerFactoryShelf {\n\n    private Map<Class, EntityManagerFactory> factories;\n\n    private EntityManagerFactoryBuilder builder;\n\n    private static EntityManagerFactoryShelf shelf;\n\n    private EntityManagerFactoryShelf() throws Exception {\n        this.factories = new HashMap<Class, EntityManagerFactory>();\n        this.builder = getBuilder();\n    }\n\n    private EntityManagerFactoryBuilder getBuilder() throws Exception {\n        PropertyManager manager = new PropertyManager();\n        String className = manager.getProperty(\"entitymanagerfactorybuilder\").getValue();\n        if (className == null) {\n            throw new BeanBinException(\"Set beanbin.entitymanagerfactorybuilder property in beanbin.properties.\");\n        } else {\n            Class clazz = Thread.currentThread().getContextClassLoader().loadClass(className);\n            return (EntityManagerFactoryBuilder) clazz.newInstance();\n        }\n    }\n\n    public boolean contains(Class clazz) {\n        return factories.containsKey(clazz);\n    }\n\n    public EntityManagerFactory get(Class clazz) throws BeanBinException {\n        EntityManagerFactory fact = factories.get(clazz);\n        if (fact == null) {\n            fact = buildFactory(clazz);\n        }\n        return fact;\n    }\n\n    private EntityManagerFactory buildFactory(Class clazz) throws BeanBinException {\n        SchemaFinder finder = new SchemaFinder(clazz);\n        List<Class> schema = finder.getSchema();\n        EntityManagerFactory fact = builder.getFactory(schema, false);\n        EntityManager em = fact.createEntityManager();\n        Query query = em.createQuery(\"select \" + EntityUtils.getIdProperty(clazz) + \" from \" + clazz.getName());\n        query.setMaxResults(1);\n        try {\n            query.getResultList();\n        } catch (Exception e) {\n            // TODO: change this exception to check and make sure that it is a need\n            // to create exception\n            fact = builder.getFactory(schema, true);\n        }\n        for (Class c : schema) {\n            factories.put(c, fact);\n        }\n        return fact;\n    }\n\n    public static EntityManagerFactoryShelf getInstance() throws BeanBinException {\n        if (shelf == null) {\n            try {\n                shelf = new EntityManagerFactoryShelf();\n            } catch (Exception e) {\n                throw new BeanBinException(\"Please provide a correct EntitymanagerFactoryBuilder in beanbin.properties. cause: \" + e.getMessage(), e);\n            }\n        }\n        return shelf;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/ejb3/EntityManagerFactoryShelfTest1.java",
		"test_prompt": "// EntityManagerFactoryShelfTest1.java\npackage net.sourceforge.beanbin.data.ejb3;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Query;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.configuration.PropertyManager;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.data.ejb3.config.SchemaFinder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EntityManagerFactoryShelf}.\n* It contains ten unit test cases for the {@link EntityManagerFactoryShelf#getInstance()} method.\n*/\nclass EntityManagerFactoryShelfTest1 {"
	},
	{
		"original_code": "// LazyActiveList.java\npackage net.sourceforge.beanbin.data.ejb3;\n\nimport java.util.List;\nimport java.util.Set;\nimport net.sourceforge.beanbin.ActiveList;\nimport net.sourceforge.beanbin.BeanBinException;\n\n@SuppressWarnings(\"unchecked\")\npublic class LazyActiveList<E> extends ActiveList<E> implements Set<E> {\n\n    private static final long serialVersionUID = -3338772142481683544L;\n\n    private String property;\n\n    private Object key;\n\n    private boolean initialized;\n\n    public LazyActiveList() {\n        super();\n    }\n\n    public LazyActiveList(Class clazz, Object key, String property) throws BeanBinException {\n        super(clazz);\n        this.key = key;\n        this.property = property;\n        this.initialized = false;\n    }\n\n    protected List<Object> sendQuery() throws BeanBinException {\n        List<Object> list = getDAO().initializeLazy(getClazz(), key, property);\n        setInitialized(true);\n        return list;\n    }\n\n    public Object getKey() {\n        return key;\n    }\n\n    public void setKey(Object key) {\n        this.key = key;\n    }\n\n    public String getProperty() {\n        return property;\n    }\n\n    public void setProperty(String property) {\n        this.property = property;\n    }\n\n    public boolean isInitialized() {\n        return initialized;\n    }\n\n    public void setInitialized(boolean initialized) {\n        this.initialized = initialized;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/ejb3/LazyActiveListTest.java",
		"test_prompt": "// LazyActiveListTest.java\npackage net.sourceforge.beanbin.data.ejb3;\n\nimport java.util.List;\nimport java.util.Set;\nimport net.sourceforge.beanbin.ActiveList;\nimport net.sourceforge.beanbin.BeanBinException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LazyActiveList}.\n* It contains ten unit test cases for the {@link LazyActiveList#isInitialized()} method.\n*/\nclass LazyActiveListTest {"
	},
	{
		"original_code": "// Parameters.java\npackage net.sourceforge.beanbin.data.ejb3.dao;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\n\npublic class Parameters {\n\n    private List<Object> params;\n\n    public Parameters() {\n        this.params = new ArrayList<Object>();\n    }\n\n    public int addTerm(Object term) {\n        params.add(term);\n        return params.size() - 1;\n    }\n\n    public Object getTerm(int i) throws BeanBinException {\n        if (i < 0 || i > getSize()) {\n            throw new BeanBinException(\"The index \" + i + \" is invalid becuase I only have \" + getSize() + \" parameters.\");\n        }\n        return params.get(i);\n    }\n\n    public int getSize() {\n        return params.size();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/ejb3/dao/ParametersTest.java",
		"test_prompt": "// ParametersTest.java\npackage net.sourceforge.beanbin.data.ejb3.dao;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.BeanBinException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Parameters}.\n* It contains ten unit test cases for the {@link Parameters#addTerm(Object)} method.\n*/\nclass ParametersTest {"
	},
	{
		"original_code": "// EJB3BeanBinDAO.java\npackage net.sourceforge.beanbin.data.ejb3;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.ejb.Local;\nimport javax.ejb.Remote;\nimport javax.ejb.Stateless;\nimport javax.ejb.TransactionManagement;\nimport javax.ejb.TransactionManagementType;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityTransaction;\nimport javax.persistence.PersistenceUnit;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.Transaction;\nimport net.sourceforge.beanbin.command.ActiveListCommand;\nimport net.sourceforge.beanbin.command.AddEntity;\nimport net.sourceforge.beanbin.command.RemoveAll;\nimport net.sourceforge.beanbin.command.RemoveEntity;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.data.ejb3.dao.EJB3Searcher;\nimport net.sourceforge.beanbin.data.ejb3.dao.IndexEJB3Searcher;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.AddAction;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.RemoveAction;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.RemoveAllAction;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.TransactionAction;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\n@Stateless\n@TransactionManagement(value = TransactionManagementType.BEAN)\n@Local(BeanBinDAO.class)\n@Remote(BeanBinDAO.class)\npublic class EJB3BeanBinDAO implements BeanBinDAO {\n\n    private static final long serialVersionUID = 8260245986951942429L;\n\n    @PersistenceUnit(name = \"beanbin\")\n    EntityManagerFactory emff;\n\n    public List<Object> initializeLazy(Class<?> clazz, Object key, String property) throws BeanBinException {\n        List<Object> list = new ArrayList<Object>();\n        EntityManager em = getEntityManager(clazz);\n        EntityTransaction tx = em.getTransaction();\n        tx.begin();\n        Object entity = em.find(clazz, key);\n        Method getter = EntityUtils.getMethod(clazz, property);\n        try {\n            Collection c = (Collection) getter.invoke(entity, new Object[0]);\n            c.size();\n            list.addAll(c);\n        } catch (Exception e) {\n            throw new BeanBinException(\"Initialize Lazy Exception: \" + e.getMessage(), e);\n        }\n        tx.commit();\n        // inject lazy entities after the commit becuase if you\n        // set anything inside of the transaction it'll think\n        // it should update when commits...\n        Lazifier lazy = new Lazifier();\n        for (Object obj : list) {\n            lazy.execute(obj);\n        }\n        return list;\n    }\n\n    public void execute(Transaction transaction) throws BeanBinException {\n        EntityManager em = getEntityManager(transaction.getTargetClass());\n        EntityTransaction realTx = em.getTransaction();\n        realTx.begin();\n        for (ActiveListCommand cmd : transaction.getCommands()) {\n            TransactionAction action = getTransactionAction(cmd);\n            action.execute(em);\n        }\n        realTx.commit();\n    }\n\n    private TransactionAction getTransactionAction(ActiveListCommand cmd) throws BeanBinException {\n        if (cmd instanceof AddEntity) {\n            return new AddAction((AddEntity) cmd);\n        } else if (cmd instanceof RemoveEntity) {\n            return new RemoveAction((RemoveEntity) cmd);\n        } else if (cmd instanceof RemoveAll) {\n            return new RemoveAllAction((RemoveAll) cmd);\n        } else {\n            throw new BeanBinException(\"Unsupported ActiveListCommand sent to getTransactionAction(\" + cmd.getClass().getName() + \")\");\n        }\n    }\n\n    public List<Object> search(Class clazz, Query query) throws BeanBinException {\n        EJB3Searcher searcher = null;\n        if (IndexUtils.hasSettableIndexes(clazz)) {\n            searcher = new IndexEJB3Searcher(clazz, query, getEntityManager(clazz));\n        } else {\n            searcher = new EJB3Searcher(clazz, query, getEntityManager(clazz));\n        }\n        return searcher.getResults();\n    }\n\n    private EntityManager getEntityManager(Class clazz) throws BeanBinException {\n        EntityManagerFactory factory = EntityManagerFactoryShelf.getInstance().get(clazz);\n        return factory.createEntityManager();\n    }\n\n    public int getSize(Class clazz, Query query) throws BeanBinException {\n        return new EJB3Searcher(clazz, query, getEntityManager(clazz)).getSize();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/ejb3/EJB3BeanBinDAOTest0.java",
		"test_prompt": "// EJB3BeanBinDAOTest0.java\npackage net.sourceforge.beanbin.data.ejb3;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.ejb.Local;\nimport javax.ejb.Remote;\nimport javax.ejb.Stateless;\nimport javax.ejb.TransactionManagement;\nimport javax.ejb.TransactionManagementType;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityTransaction;\nimport javax.persistence.PersistenceUnit;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.Transaction;\nimport net.sourceforge.beanbin.command.ActiveListCommand;\nimport net.sourceforge.beanbin.command.AddEntity;\nimport net.sourceforge.beanbin.command.RemoveAll;\nimport net.sourceforge.beanbin.command.RemoveEntity;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.data.ejb3.dao.EJB3Searcher;\nimport net.sourceforge.beanbin.data.ejb3.dao.IndexEJB3Searcher;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.AddAction;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.RemoveAction;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.RemoveAllAction;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.TransactionAction;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EJB3BeanBinDAO}.\n* It contains ten unit test cases for the {@link EJB3BeanBinDAO#initializeLazy(Class, Object, String)} method.\n*/\nclass EJB3BeanBinDAOTest0 {"
	},
	{
		"original_code": "// EJB3BeanBinDAO.java\npackage net.sourceforge.beanbin.data.ejb3;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.ejb.Local;\nimport javax.ejb.Remote;\nimport javax.ejb.Stateless;\nimport javax.ejb.TransactionManagement;\nimport javax.ejb.TransactionManagementType;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityTransaction;\nimport javax.persistence.PersistenceUnit;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.Transaction;\nimport net.sourceforge.beanbin.command.ActiveListCommand;\nimport net.sourceforge.beanbin.command.AddEntity;\nimport net.sourceforge.beanbin.command.RemoveAll;\nimport net.sourceforge.beanbin.command.RemoveEntity;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.data.ejb3.dao.EJB3Searcher;\nimport net.sourceforge.beanbin.data.ejb3.dao.IndexEJB3Searcher;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.AddAction;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.RemoveAction;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.RemoveAllAction;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.TransactionAction;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\n\n@Stateless\n@TransactionManagement(value = TransactionManagementType.BEAN)\n@Local(BeanBinDAO.class)\n@Remote(BeanBinDAO.class)\npublic class EJB3BeanBinDAO implements BeanBinDAO {\n\n    private static final long serialVersionUID = 8260245986951942429L;\n\n    @PersistenceUnit(name = \"beanbin\")\n    EntityManagerFactory emff;\n\n    public List<Object> initializeLazy(Class<?> clazz, Object key, String property) throws BeanBinException {\n        List<Object> list = new ArrayList<Object>();\n        EntityManager em = getEntityManager(clazz);\n        EntityTransaction tx = em.getTransaction();\n        tx.begin();\n        Object entity = em.find(clazz, key);\n        Method getter = EntityUtils.getMethod(clazz, property);\n        try {\n            Collection c = (Collection) getter.invoke(entity, new Object[0]);\n            c.size();\n            list.addAll(c);\n        } catch (Exception e) {\n            throw new BeanBinException(\"Initialize Lazy Exception: \" + e.getMessage(), e);\n        }\n        tx.commit();\n        // inject lazy entities after the commit becuase if you\n        // set anything inside of the transaction it'll think\n        // it should update when commits...\n        Lazifier lazy = new Lazifier();\n        for (Object obj : list) {\n            lazy.execute(obj);\n        }\n        return list;\n    }\n\n    public void execute(Transaction transaction) throws BeanBinException {\n        EntityManager em = getEntityManager(transaction.getTargetClass());\n        EntityTransaction realTx = em.getTransaction();\n        realTx.begin();\n        for (ActiveListCommand cmd : transaction.getCommands()) {\n            TransactionAction action = getTransactionAction(cmd);\n            action.execute(em);\n        }\n        realTx.commit();\n    }\n\n    private TransactionAction getTransactionAction(ActiveListCommand cmd) throws BeanBinException {\n        if (cmd instanceof AddEntity) {\n            return new AddAction((AddEntity) cmd);\n        } else if (cmd instanceof RemoveEntity) {\n            return new RemoveAction((RemoveEntity) cmd);\n        } else if (cmd instanceof RemoveAll) {\n            return new RemoveAllAction((RemoveAll) cmd);\n        } else {\n            throw new BeanBinException(\"Unsupported ActiveListCommand sent to getTransactionAction(\" + cmd.getClass().getName() + \")\");\n        }\n    }\n\n    public List<Object> search(Class clazz, Query query) throws BeanBinException {\n        EJB3Searcher searcher = null;\n        if (IndexUtils.hasSettableIndexes(clazz)) {\n            searcher = new IndexEJB3Searcher(clazz, query, getEntityManager(clazz));\n        } else {\n            searcher = new EJB3Searcher(clazz, query, getEntityManager(clazz));\n        }\n        return searcher.getResults();\n    }\n\n    private EntityManager getEntityManager(Class clazz) throws BeanBinException {\n        EntityManagerFactory factory = EntityManagerFactoryShelf.getInstance().get(clazz);\n        return factory.createEntityManager();\n    }\n\n    public int getSize(Class clazz, Query query) throws BeanBinException {\n        return new EJB3Searcher(clazz, query, getEntityManager(clazz)).getSize();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/ejb3/EJB3BeanBinDAOTest1.java",
		"test_prompt": "// EJB3BeanBinDAOTest1.java\npackage net.sourceforge.beanbin.data.ejb3;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.ejb.Local;\nimport javax.ejb.Remote;\nimport javax.ejb.Stateless;\nimport javax.ejb.TransactionManagement;\nimport javax.ejb.TransactionManagementType;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityTransaction;\nimport javax.persistence.PersistenceUnit;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.Transaction;\nimport net.sourceforge.beanbin.command.ActiveListCommand;\nimport net.sourceforge.beanbin.command.AddEntity;\nimport net.sourceforge.beanbin.command.RemoveAll;\nimport net.sourceforge.beanbin.command.RemoveEntity;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport net.sourceforge.beanbin.data.EntityUtils;\nimport net.sourceforge.beanbin.data.ejb3.dao.EJB3Searcher;\nimport net.sourceforge.beanbin.data.ejb3.dao.IndexEJB3Searcher;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.AddAction;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.RemoveAction;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.RemoveAllAction;\nimport net.sourceforge.beanbin.data.ejb3.dao.transaction.TransactionAction;\nimport net.sourceforge.beanbin.query.Query;\nimport net.sourceforge.beanbin.search.index.IndexUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EJB3BeanBinDAO}.\n* It contains ten unit test cases for the {@link EJB3BeanBinDAO#search(Class, Query)} method.\n*/\nclass EJB3BeanBinDAOTest1 {"
	},
	{
		"original_code": "// EJB3IndexDAO.java\npackage net.sourceforge.beanbin.data.ejb3;\n\nimport java.util.List;\nimport java.util.Set;\nimport javax.ejb.Local;\nimport javax.ejb.Remote;\nimport javax.ejb.Stateful;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.IndexDAO;\nimport net.sourceforge.beanbin.search.index.Index;\nimport net.sourceforge.beanbin.search.index.IndexManager;\nimport net.sourceforge.beanbin.search.index.IndexSaver;\nimport net.sourceforge.beanbin.search.index.RemoveAllFromIndex;\nimport net.sourceforge.beanbin.search.index.RemoveFromIndex;\nimport net.sourceforge.beanbin.search.index.cache.IndexCache;\nimport net.sourceforge.beanbin.search.index.cache.IndexCacheSingleton;\nimport net.sourceforge.beanbin.search.index.cache.Results;\n\n@Stateful\n@Local(IndexDAO.class)\n@Remote(IndexDAO.class)\npublic class EJB3IndexDAO implements IndexDAO {\n\n    private IndexManager manager;\n\n    private IndexSaver saver;\n\n    private IndexCache cache;\n\n    public EJB3IndexDAO() throws BeanBinException {\n        this.manager = Index.getManager();\n        this.saver = new IndexSaver();\n        this.cache = IndexCacheSingleton.getInstance();\n    }\n\n    public Set<Object> search(Class clazz, String property, String term) throws BeanBinException {\n        return manager.search(clazz, property, term);\n    }\n\n    public void remove(Class clazz, Object key) throws BeanBinException {\n        try {\n            saver.sendMessage(new RemoveFromIndex(clazz, key));\n        } catch (Exception e) {\n            throw new BeanBinException(\"EJB3IndexDAO remove: \" + e.getMessage(), e);\n        }\n    }\n\n    public void removeAll(Class clazz) throws BeanBinException {\n        try {\n            saver.sendMessage(new RemoveAllFromIndex(clazz));\n        } catch (Exception e) {\n            throw new BeanBinException(\"EJB3IndexDAO remove: \" + e.getMessage(), e);\n        }\n    }\n\n    public List<String> getValues(Class clazz, String property, Object key) throws BeanBinException {\n        List<String> values = cache.getValues(clazz, key, property);\n        if (values == null) {\n            values = manager.getValues(clazz, property, key);\n        }\n        return values;\n    }\n\n    public void addToCache(Class clazz, Results toadd) throws BeanBinException {\n        Results results = this.cache.get(clazz);\n        if (results == null) {\n            cache.add(clazz, toadd);\n        } else {\n            results.add(toadd);\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/data/ejb3/EJB3IndexDAOTest.java",
		"test_prompt": "// EJB3IndexDAOTest.java\npackage net.sourceforge.beanbin.data.ejb3;\n\nimport java.util.List;\nimport java.util.Set;\nimport javax.ejb.Local;\nimport javax.ejb.Remote;\nimport javax.ejb.Stateful;\nimport net.sourceforge.beanbin.BeanBinException;\nimport net.sourceforge.beanbin.data.IndexDAO;\nimport net.sourceforge.beanbin.search.index.Index;\nimport net.sourceforge.beanbin.search.index.IndexManager;\nimport net.sourceforge.beanbin.search.index.IndexSaver;\nimport net.sourceforge.beanbin.search.index.RemoveAllFromIndex;\nimport net.sourceforge.beanbin.search.index.RemoveFromIndex;\nimport net.sourceforge.beanbin.search.index.cache.IndexCache;\nimport net.sourceforge.beanbin.search.index.cache.IndexCacheSingleton;\nimport net.sourceforge.beanbin.search.index.cache.Results;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EJB3IndexDAO}.\n* It contains ten unit test cases for the {@link EJB3IndexDAO#search(Class, String, String)} method.\n*/\nclass EJB3IndexDAOTest {"
	},
	{
		"original_code": "// TheCrammer.java\npackage net.sourceforge.beanbin.ramcram;\n\nimport net.sourceforge.beanbin.ActiveList;\nimport net.sourceforge.beanbin.query.Query;\n\n/**\n * This class is responsible for saving, removing and searching\n * objects that are stored within it.\n *\n * @author Brian Gorman\n */\npublic class TheCrammer<E> {\n\n    /**\n     * @param obj The object to be saved.\n     */\n    public void save(Object obj) {\n    }\n\n    /**\n     * @param obj This can be either an Entity or a primary key\n     */\n    public void remove(Object obj) {\n    }\n\n    /**\n     * Searches internally against the specified {@link Query}\n     * @param query\n     * @return\n     */\n    public ActiveList<E> search(Query query) {\n        return null;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/ramcram/TheCrammerTest.java",
		"test_prompt": "// TheCrammerTest.java\npackage net.sourceforge.beanbin.ramcram;\n\nimport net.sourceforge.beanbin.ActiveList;\nimport net.sourceforge.beanbin.query.Query;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TheCrammer}.\n* It contains ten unit test cases for the {@link TheCrammer#search(Query)} method.\n*/\nclass TheCrammerTest {"
	},
	{
		"original_code": "// Transaction.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.command.ActiveListCommand;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\n\npublic class Transaction implements Serializable {\n\n    private static final long serialVersionUID = -1268043668769698463L;\n\n    private List<ActiveListCommand> commands;\n\n    private BeanBinDAO dao;\n\n    private Class clazz;\n\n    public Transaction(BeanBinDAO dao, Class clazz) {\n        this.dao = dao;\n        this.clazz = clazz;\n    }\n\n    public Class getTargetClass() {\n        return clazz;\n    }\n\n    public void begin() throws BeanBinException {\n        this.setCommands(new ArrayList<ActiveListCommand>());\n    }\n\n    public void addCommand(ActiveListCommand command) throws BeanBinException {\n        if (this.getCommands() == null) {\n            begin();\n        }\n        this.getCommands().add(command);\n    }\n\n    public void commit() throws BeanBinException {\n        if (this.getCommands() == null) {\n            throw new BeanBinException(\"You must begin a transaction before you can commit.\");\n        }\n        this.dao.execute(this);\n        this.setCommands(null);\n    }\n\n    private void setCommands(List<ActiveListCommand> commands) {\n        this.commands = commands;\n    }\n\n    public List<ActiveListCommand> getCommands() {\n        return commands;\n    }\n\n    public boolean hasNotBegun() {\n        return getCommands() == null;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/15_beanbin/src/main/java/net/sourceforge/beanbin/TransactionTest.java",
		"test_prompt": "// TransactionTest.java\npackage net.sourceforge.beanbin;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.sourceforge.beanbin.command.ActiveListCommand;\nimport net.sourceforge.beanbin.data.BeanBinDAO;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Transaction}.\n* It contains ten unit test cases for the {@link Transaction#hasNotBegun()} method.\n*/\nclass TransactionTest {"
	}
]