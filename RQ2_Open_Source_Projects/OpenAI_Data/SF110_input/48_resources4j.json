[
	{
		"original_code": "// FileResourcesBundleLoader.java\n/*\n * FileResourcesBundleLoader.java\n *\n *  Copyright 2010 Yann D'Isanto.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *  under the License.\n */\npackage com.mytdev.resources4j.impl;\n\nimport com.mytdev.resources4j.interfaces.Resources;\nimport com.mytdev.resources4j.interfaces.ResourcesBundle;\nimport com.mytdev.resources4j.interfaces.ResourcesBundleLoader;\nimport com.mytdev.resources4j.ResourcesException;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FilenameFilter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.text.DateFormat;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.regex.Pattern;\nimport javax.imageio.ImageIO;\n\n/**\n * A File based ResourcesBundleLoader.\n * @author Yann D'Isanto\n */\npublic class FileResourcesBundleLoader implements ResourcesBundleLoader {\n\n    private static final Charset DEFAULT_CHARSET = Charset.forName(\"ISO-8859-1\");\n\n    private File directory;\n\n    private String fileBasename;\n\n    private int dateFormatStyle = DateFormat.MEDIUM;\n\n    private DateFormat dateFormat = null;\n\n    private Charset charset = DEFAULT_CHARSET;\n\n    public FileResourcesBundleLoader(String directoryPath, String fileBasename) {\n        this(new File(directoryPath), fileBasename);\n    }\n\n    public FileResourcesBundleLoader(Class<?> c, String fileBasename) {\n        this(c.getPackage().getName().replace(\".\", \"/\"), fileBasename);\n    }\n\n    public FileResourcesBundleLoader(File directory, String fileBasename) {\n        this.directory = directory;\n        this.fileBasename = fileBasename;\n    }\n\n    @Override\n    public ResourcesBundle loadBundle() throws ResourcesException {\n        if (!directory.isDirectory()) {\n            throw new IllegalArgumentException(\"not a directory: \" + directory);\n        }\n        Map<Locale, Resources> bundle = new HashMap<Locale, Resources>();\n        try {\n            // load root locale file\n            Resources rootResources = new AbstractResources(loadProperties(new File(directory, fileBasename + \".properties\")), dateFormat == null ? DateFormat.getDateInstance(dateFormatStyle) : dateFormat) {\n\n                @Override\n                protected BufferedImage loadImage(String key) throws IOException {\n                    return ImageIO.read(new File(directory, key));\n                }\n            };\n            bundle.put(Locale.ROOT, rootResources);\n            // load languages file\n            Map<String, Resources> languagesBunble = new HashMap<String, Resources>();\n            File[] files = directory.listFiles(new FilenameFilter() {\n\n                private Pattern filenamePattern = Pattern.compile(Pattern.quote(getFileBasename() + \"_\") + \"[a-zA-Z]{2}\" + Pattern.quote(\".properties\"));\n\n                @Override\n                public boolean accept(File dir, String name) {\n                    return filenamePattern.matcher(name).matches();\n                }\n            });\n            for (File file : files) {\n                String language = file.getName().replaceAll(\"(^\" + Pattern.quote(fileBasename + \"_\") + \")|(\\\\.properties$)\", \"\");\n                Locale locale = new Locale(language);\n                Resources resources = new ChildResources(loadProperties(file), rootResources, dateFormat == null ? DateFormat.getDateInstance(dateFormatStyle) : dateFormat) {\n\n                    @Override\n                    protected BufferedImage loadImage(String key) throws IOException {\n                        return ImageIO.read(new File(directory, key));\n                    }\n                };\n                bundle.put(locale, resources);\n                languagesBunble.put(language, resources);\n            }\n            // load countries file\n            files = directory.listFiles(new FilenameFilter() {\n\n                private Pattern filenamePattern = Pattern.compile(Pattern.quote(getFileBasename() + \"_\") + \"[a-zA-Z]{2}_[a-zA-Z]{2}\" + Pattern.quote(\".properties\"));\n\n                @Override\n                public boolean accept(File dir, String name) {\n                    return filenamePattern.matcher(name).matches();\n                }\n            });\n            for (File file : files) {\n                String[] localeStr = file.getName().replaceAll(\"(^\" + Pattern.quote(fileBasename + \"_\") + \")|(\\\\.properties$)\", \"\").split(\"_\");\n                String language = localeStr[0];\n                String country = localeStr[1];\n                Locale locale = new Locale(language, country);\n                Resources languageResources = languagesBunble.get(language);\n                Resources resources = new ChildResources(loadProperties(file), languageResources, dateFormat == null ? DateFormat.getDateInstance(dateFormatStyle) : dateFormat) {\n\n                    @Override\n                    protected BufferedImage loadImage(String key) throws IOException {\n                        return ImageIO.read(new File(directory, key));\n                    }\n                };\n                bundle.put(locale, resources);\n            }\n        } catch (IOException ex) {\n            throw new ResourcesException(ex);\n        }\n        return new MapResourcesBunble(bundle);\n    }\n\n    private Map<String, String> loadProperties(File file) throws IOException {\n        Properties properties = new Properties();\n        FileInputStream fis = new FileInputStream(file);\n        try {\n            properties.load(new InputStreamReader(fis, charset));\n        } finally {\n            fis.close();\n        }\n        Map<String, String> propertiesMap = new HashMap<String, String>();\n        for (String key : properties.stringPropertyNames()) {\n            propertiesMap.put(key, properties.getProperty(key));\n        }\n        return propertiesMap;\n    }\n\n    /**\n     * @return the directory\n     */\n    public File getDirectory() {\n        return directory;\n    }\n\n    /**\n     * @param directory the directory to set\n     */\n    public void setDirectory(File directory) {\n        this.directory = directory;\n    }\n\n    /**\n     * @return the fileBasename\n     */\n    public String getFileBasename() {\n        return fileBasename;\n    }\n\n    /**\n     * @param fileBasename the fileBasename to set\n     */\n    public void setFileBasename(String fileBasename) {\n        this.fileBasename = fileBasename;\n    }\n\n    /**\n     * @return the dateFormatStyle\n     */\n    public int getDateFormatStyle() {\n        return dateFormatStyle;\n    }\n\n    /**\n     * @param dateFormatStyle the dateFormatStyle to set\n     */\n    public void setDateFormatStyle(int dateFormatStyle) {\n        this.dateFormatStyle = dateFormatStyle;\n    }\n\n    /**\n     * @return the dateFormatPattern\n     */\n    public DateFormat getDateFormat() {\n        return dateFormat;\n    }\n\n    /**\n     * @param dateFormatPattern the dateFormatPattern to set\n     */\n    public void setDateFormat(DateFormat dateFormat) {\n        this.dateFormat = dateFormat;\n    }\n\n    /**\n     * @return the charset\n     */\n    public Charset getCharset() {\n        return charset;\n    }\n\n    /**\n     * @param charset the charset to set\n     */\n    public void setCharset(Charset charset) {\n        this.charset = charset;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/48_resources4j/src/main/java/com/mytdev/resources4j/impl/FileResourcesBundleLoaderTest.java",
		"test_prompt": "// FileResourcesBundleLoaderTest.java\npackage com.mytdev.resources4j.impl;\n\nimport com.mytdev.resources4j.interfaces.Resources;\nimport com.mytdev.resources4j.interfaces.ResourcesBundle;\nimport com.mytdev.resources4j.interfaces.ResourcesBundleLoader;\nimport com.mytdev.resources4j.ResourcesException;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FilenameFilter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.text.DateFormat;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.regex.Pattern;\nimport javax.imageio.ImageIO;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileResourcesBundleLoader}.\n* It contains ten unit test cases for the {@link FileResourcesBundleLoader#loadBundle()} method.\n*/\nclass FileResourcesBundleLoaderTest {"
	}
]