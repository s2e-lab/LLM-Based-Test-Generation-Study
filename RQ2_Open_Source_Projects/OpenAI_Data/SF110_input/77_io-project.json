[
	{
		"original_code": "// Client.java\n/*\n\tCopyright (c) 2007, 2008 Hanno Braun <hannob@users.sourceforge.net>\n\t\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\npackage ioproject.server.network;\n\nimport ioproject.common.network.Node;\nimport org.apache.mina.common.IoSession;\n\n/**\n * Represents a client connection.\n */\npublic class Client implements Node {\n\n    private IoSession session;\n\n    /**\n     * Creates a new client which wraps the given session.\n     */\n    Client(IoSession theSession) {\n        session = theSession;\n    }\n\n    /**\n     * Implements Node.send(). Sends a message to the client.\n     * If the client has been disconnected before, this method will just do nothing and the message will not\n     * be sent. If it is important for you to know if a message has been sent or not, please use\n     * ClientHandler.messageSent().\n     *\n     * @param message An arbitrary object. Must implement java.io.Serializable.\n     */\n    public void send(Object message) {\n        session.write(message);\n    }\n\n    /**\n     * Implements Node.disconncet(). Disconnects the client.\n     */\n    public void disconnect() {\n        session.close();\n    }\n\n    /**\n     * Stores an attribute using the given key.\n     */\n    public Object attribute(String key, Object attribute) {\n        return session.setAttribute(key, attribute);\n    }\n\n    /**\n     * Retrieves the attribute that was stored using the given key.\n     */\n    public Object attribute(String key) {\n        return session.getAttribute(key);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/77_io-project/src/main/java/ioproject/server/network/ClientTest0.java",
		"test_prompt": "// ClientTest0.java\npackage ioproject.server.network;\n\nimport ioproject.common.network.Node;\nimport org.apache.mina.common.IoSession;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Client}.\n* It contains ten unit test cases for the {@link Client#attribute(String, Object)} method.\n*/\nclass ClientTest0 {"
	},
	{
		"original_code": "// Client.java\n/*\n\tCopyright (c) 2007, 2008 Hanno Braun <hannob@users.sourceforge.net>\n\t\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\npackage ioproject.server.network;\n\nimport ioproject.common.network.Node;\nimport org.apache.mina.common.IoSession;\n\n/**\n * Represents a client connection.\n */\npublic class Client implements Node {\n\n    private IoSession session;\n\n    /**\n     * Creates a new client which wraps the given session.\n     */\n    Client(IoSession theSession) {\n        session = theSession;\n    }\n\n    /**\n     * Implements Node.send(). Sends a message to the client.\n     * If the client has been disconnected before, this method will just do nothing and the message will not\n     * be sent. If it is important for you to know if a message has been sent or not, please use\n     * ClientHandler.messageSent().\n     *\n     * @param message An arbitrary object. Must implement java.io.Serializable.\n     */\n    public void send(Object message) {\n        session.write(message);\n    }\n\n    /**\n     * Implements Node.disconncet(). Disconnects the client.\n     */\n    public void disconnect() {\n        session.close();\n    }\n\n    /**\n     * Stores an attribute using the given key.\n     */\n    public Object attribute(String key, Object attribute) {\n        return session.setAttribute(key, attribute);\n    }\n\n    /**\n     * Retrieves the attribute that was stored using the given key.\n     */\n    public Object attribute(String key) {\n        return session.getAttribute(key);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/77_io-project/src/main/java/ioproject/server/network/ClientTest1.java",
		"test_prompt": "// ClientTest1.java\npackage ioproject.server.network;\n\nimport ioproject.common.network.Node;\nimport org.apache.mina.common.IoSession;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Client}.\n* It contains ten unit test cases for the {@link Client#attribute(String)} method.\n*/\nclass ClientTest1 {"
	},
	{
		"original_code": "// NetworkService.java\n/*\n\tCopyright (c) 2007, 2008 Hanno Braun <hannob@users.sourceforge.net>\n\t\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\npackage ioproject.server.network;\n\nimport java.io.IOException;\nimport java.net.SocketAddress;\nimport org.apache.mina.common.IoAcceptor;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport org.apache.mina.filter.codec.serialization.ObjectSerializationDecoder;\nimport org.apache.mina.filter.codec.serialization.ObjectSerializationEncoder;\nimport org.apache.mina.transport.socket.nio.SocketAcceptor;\nimport org.apache.mina.transport.socket.nio.SocketAcceptorConfig;\n\n/**\n * The network service. Responsible for network connectivity.\n */\npublic class NetworkService {\n\n    private IoAcceptor acceptor;\n\n    private boolean connected;\n\n    private GlobalClientGroup globalClientGroup;\n\n    /**\n     * Public constructor.\n     * Calls the protected constructor, providing it with an IoAcceptor implementation.\n     */\n    public NetworkService() {\n        this(new SocketAcceptor());\n    }\n\n    /**\n     * Constructs a new network service using a predefined IoAcceptor. This can be used for testing this\n     * class using a mock object.\n     */\n    NetworkService(IoAcceptor anAcceptor) {\n        acceptor = anAcceptor;\n        connected = false;\n        globalClientGroup = new GlobalClientGroup();\n    }\n\n    /**\n     * Returns the global client group. The global client group always contains all currently connected\n     * clients.\n     *\n     * @return The global client group.\n     */\n    public ClientGroup globalClientGroup() {\n        return globalClientGroup;\n    }\n\n    /**\n     * Opens a server connection.\n     * This method must be called before the network service can accept connections.\n     *\n     * @param address Specifies the address and port to listen on.\n     *\n     * @throws IOException if a connection can't be established.\n     * @throws IllegalStateException if the service is already connected.\n     * @throws NullPointerException if one of the parameters is null.\n     */\n    public synchronized void connect(SocketAddress address) throws IOException {\n        // Check the parameter. It must not be null.\n        if (address == null) {\n            throw new NullPointerException(\"Parameters must not be null.\");\n        }\n        // Check the connection status. If connect has already been called, an exception must be thrown.\n        if (connected) {\n            throw new IllegalStateException(\"Already connected.\");\n        }\n        // Configure the acceptor and bind it to the specified address. Configuration consists of adding the\n        // protocol codec filter with our custom codecs into the filter chain.\n        SocketAcceptorConfig config = new SocketAcceptorConfig();\n        config.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new ObjectSerializationEncoder(), new ObjectSerializationDecoder()));\n        acceptor.bind(address, new ClientGroupHandlerAdapter(globalClientGroup), config);\n        connected = true;\n    }\n\n    /**\n     * Disconnects the network service.\n     *\n     * @throws IllegalStateException if the service is not connected.\n     */\n    public synchronized void disconnect() {\n        if (!connected) {\n            throw new IllegalStateException(\"Not connected.\");\n        }\n        acceptor.unbindAll();\n        connected = false;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/77_io-project/src/main/java/ioproject/server/network/NetworkServiceTest.java",
		"test_prompt": "// NetworkServiceTest.java\npackage ioproject.server.network;\n\nimport java.io.IOException;\nimport java.net.SocketAddress;\nimport org.apache.mina.common.IoAcceptor;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport org.apache.mina.filter.codec.serialization.ObjectSerializationDecoder;\nimport org.apache.mina.filter.codec.serialization.ObjectSerializationEncoder;\nimport org.apache.mina.transport.socket.nio.SocketAcceptor;\nimport org.apache.mina.transport.socket.nio.SocketAcceptorConfig;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NetworkService}.\n* It contains ten unit test cases for the {@link NetworkService#globalClientGroup()} method.\n*/\nclass NetworkServiceTest {"
	},
	{
		"original_code": "// ClientGroup.java\n/*\n\tCopyright (c) 2007, 2008 Hanno Braun <hannob@users.sourceforge.net>\n\t\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\npackage ioproject.server.network;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\n/**\n * A group of clients.\n *\n * Each client group, except the global client group, has a parent group. Each group can have several\n * sub-groups. The semantics of groups are as follows:\n * * Only clients can added to a group that are in this group's parent group.\n * * Clients removed from a group are also removed from all of this group's sub-groups.\n *\n * The global client group contains all connected clients and all groups are, directly or indirectly,\n * sub-groups of the global client group.\n */\npublic class ClientGroup implements Iterable<Client> {\n\n    private ClientGroup parentGroup;\n\n    private Set<WeakReference<ClientGroup>> subGroups;\n\n    private Set<Client> clients;\n\n    private ClientHandler handler;\n\n    /**\n     * Creates a new client group. This is a package-scoped constructor. Users are supposed to get client\n     * groups by creating children of existing groups.\n     */\n    ClientGroup(ClientGroup theParentGroup) {\n        parentGroup = theParentGroup;\n        subGroups = new LinkedHashSet<WeakReference<ClientGroup>>();\n        clients = new LinkedHashSet<Client>();\n        handler = null;\n    }\n\n    /**\n     * Returns this groups parent group.\n     */\n    ClientGroup parentGroup() {\n        return parentGroup;\n    }\n\n    /**\n     * Notifies the client group of a sent message. This method is package-scoped and is only called by the\n     * parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyMessageSent(Client client, Object message) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyMessageSent(client, message) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.messageSent(client, message);\n        }\n        return true;\n    }\n\n    /**\n     * Notifies the client group of a received message. This method is package-scoped and is only called by\n     * the parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyMessageReceived(Client client, Object message) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyMessageReceived(client, message) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.messageReceived(client, message);\n        }\n        return true;\n    }\n\n    /**\n     * Notifies the client group of a caught exception. This method is package-scoped and is only called by\n     * the parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyExceptionCaught(Client client, Throwable cause) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyExceptionCaught(client, cause) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.exceptionCaught(client, cause);\n        }\n        return true;\n    }\n\n    /**\n     * Implements Iterable.iterator(). Returns the iterator of the wrapped Set.\n     */\n    public Iterator<Client> iterator() {\n        return Collections.unmodifiableSet(clients).iterator();\n    }\n\n    /**\n     * Returns true if the group contains the client, false otherwise.\n     *\n     * @param client The client that is checked for group membership.\n     *\n     * @return True if the client is a member of this group, false otherwise.\n     */\n    public synchronized boolean contains(Client client) {\n        return clients.contains(client);\n    }\n\n    /**\n     * Returns the number of clients that are member of this group.\n     */\n    public synchronized int size() {\n        return clients.size();\n    }\n\n    /**\n     * Attempts to add a client to this group. This will only succeed if the client is a member of this\n     * group's parent group.\n     *\n     * @param client The client to add to this group.\n     *\n     * @return True if the client was added to the group, false otherwise.\n     */\n    public synchronized boolean add(Client client) {\n        boolean parentContainsClient = parentGroup == null || parentGroup.contains(client);\n        if (parentContainsClient) {\n            clients.add(client);\n        }\n        if (handler != null) {\n            handler.clientAdded(client);\n        }\n        return parentContainsClient;\n    }\n\n    /**\n     * Removes a client from this group. The client will also be removed from all sub-groups that this client\n     * is a member of.\n     *\n     * @return True, if the client was a member of this group and was removed. False if the client was not a\n     *         member of this group and nothing happened.\n     */\n    public synchronized boolean remove(Client client) {\n        boolean clientIsMember = clients.contains(client);\n        if (clientIsMember) {\n            clients.remove(client);\n            for (WeakReference<ClientGroup> subGroupReference : subGroups) {\n                subGroupReference.get().remove(client);\n            }\n        }\n        if (handler != null) {\n            handler.clientRemoved(client);\n        }\n        return clientIsMember;\n    }\n\n    /**\n     * Creates a sub-group of this group.\n     * Please note that sub-groups are weakly referenced by their parent group and will automatically be\n     * garbage-collected once no other reference outside of their parent group exist.\n     *\n     * @return The newly created sub-group.\n     */\n    public synchronized ClientGroup createSubGroup() {\n        ClientGroup subGroup = new ClientGroup(this);\n        subGroups.add(new WeakReference<ClientGroup>(subGroup));\n        return subGroup;\n    }\n\n    /**\n     * Adds a client handler.\n     * The handler will be notified if a client is added to or removed from the group.\n     * If a client causes another event (message sent, message received or exception caught), the handler is\n     * only notified if the client is not a member of one or several sub-groups. If the client is a member of\n     * one or several sub-groups, only the sub-groups are notified of the event.\n     *\n     * @param aHandler The client handler to add.\n     */\n    public synchronized void addClientHandler(ClientHandler aHandler) {\n        handler = aHandler;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/77_io-project/src/main/java/ioproject/server/network/ClientGroupTest0.java",
		"test_prompt": "// ClientGroupTest0.java\npackage ioproject.server.network;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientGroup}.\n* It contains ten unit test cases for the {@link ClientGroup#iterator()} method.\n*/\nclass ClientGroupTest0 {"
	},
	{
		"original_code": "// ClientGroup.java\n/*\n\tCopyright (c) 2007, 2008 Hanno Braun <hannob@users.sourceforge.net>\n\t\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\npackage ioproject.server.network;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\n/**\n * A group of clients.\n *\n * Each client group, except the global client group, has a parent group. Each group can have several\n * sub-groups. The semantics of groups are as follows:\n * * Only clients can added to a group that are in this group's parent group.\n * * Clients removed from a group are also removed from all of this group's sub-groups.\n *\n * The global client group contains all connected clients and all groups are, directly or indirectly,\n * sub-groups of the global client group.\n */\npublic class ClientGroup implements Iterable<Client> {\n\n    private ClientGroup parentGroup;\n\n    private Set<WeakReference<ClientGroup>> subGroups;\n\n    private Set<Client> clients;\n\n    private ClientHandler handler;\n\n    /**\n     * Creates a new client group. This is a package-scoped constructor. Users are supposed to get client\n     * groups by creating children of existing groups.\n     */\n    ClientGroup(ClientGroup theParentGroup) {\n        parentGroup = theParentGroup;\n        subGroups = new LinkedHashSet<WeakReference<ClientGroup>>();\n        clients = new LinkedHashSet<Client>();\n        handler = null;\n    }\n\n    /**\n     * Returns this groups parent group.\n     */\n    ClientGroup parentGroup() {\n        return parentGroup;\n    }\n\n    /**\n     * Notifies the client group of a sent message. This method is package-scoped and is only called by the\n     * parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyMessageSent(Client client, Object message) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyMessageSent(client, message) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.messageSent(client, message);\n        }\n        return true;\n    }\n\n    /**\n     * Notifies the client group of a received message. This method is package-scoped and is only called by\n     * the parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyMessageReceived(Client client, Object message) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyMessageReceived(client, message) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.messageReceived(client, message);\n        }\n        return true;\n    }\n\n    /**\n     * Notifies the client group of a caught exception. This method is package-scoped and is only called by\n     * the parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyExceptionCaught(Client client, Throwable cause) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyExceptionCaught(client, cause) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.exceptionCaught(client, cause);\n        }\n        return true;\n    }\n\n    /**\n     * Implements Iterable.iterator(). Returns the iterator of the wrapped Set.\n     */\n    public Iterator<Client> iterator() {\n        return Collections.unmodifiableSet(clients).iterator();\n    }\n\n    /**\n     * Returns true if the group contains the client, false otherwise.\n     *\n     * @param client The client that is checked for group membership.\n     *\n     * @return True if the client is a member of this group, false otherwise.\n     */\n    public synchronized boolean contains(Client client) {\n        return clients.contains(client);\n    }\n\n    /**\n     * Returns the number of clients that are member of this group.\n     */\n    public synchronized int size() {\n        return clients.size();\n    }\n\n    /**\n     * Attempts to add a client to this group. This will only succeed if the client is a member of this\n     * group's parent group.\n     *\n     * @param client The client to add to this group.\n     *\n     * @return True if the client was added to the group, false otherwise.\n     */\n    public synchronized boolean add(Client client) {\n        boolean parentContainsClient = parentGroup == null || parentGroup.contains(client);\n        if (parentContainsClient) {\n            clients.add(client);\n        }\n        if (handler != null) {\n            handler.clientAdded(client);\n        }\n        return parentContainsClient;\n    }\n\n    /**\n     * Removes a client from this group. The client will also be removed from all sub-groups that this client\n     * is a member of.\n     *\n     * @return True, if the client was a member of this group and was removed. False if the client was not a\n     *         member of this group and nothing happened.\n     */\n    public synchronized boolean remove(Client client) {\n        boolean clientIsMember = clients.contains(client);\n        if (clientIsMember) {\n            clients.remove(client);\n            for (WeakReference<ClientGroup> subGroupReference : subGroups) {\n                subGroupReference.get().remove(client);\n            }\n        }\n        if (handler != null) {\n            handler.clientRemoved(client);\n        }\n        return clientIsMember;\n    }\n\n    /**\n     * Creates a sub-group of this group.\n     * Please note that sub-groups are weakly referenced by their parent group and will automatically be\n     * garbage-collected once no other reference outside of their parent group exist.\n     *\n     * @return The newly created sub-group.\n     */\n    public synchronized ClientGroup createSubGroup() {\n        ClientGroup subGroup = new ClientGroup(this);\n        subGroups.add(new WeakReference<ClientGroup>(subGroup));\n        return subGroup;\n    }\n\n    /**\n     * Adds a client handler.\n     * The handler will be notified if a client is added to or removed from the group.\n     * If a client causes another event (message sent, message received or exception caught), the handler is\n     * only notified if the client is not a member of one or several sub-groups. If the client is a member of\n     * one or several sub-groups, only the sub-groups are notified of the event.\n     *\n     * @param aHandler The client handler to add.\n     */\n    public synchronized void addClientHandler(ClientHandler aHandler) {\n        handler = aHandler;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/77_io-project/src/main/java/ioproject/server/network/ClientGroupTest1.java",
		"test_prompt": "// ClientGroupTest1.java\npackage ioproject.server.network;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientGroup}.\n* It contains ten unit test cases for the {@link ClientGroup#contains(Client)} method.\n*/\nclass ClientGroupTest1 {"
	},
	{
		"original_code": "// ClientGroup.java\n/*\n\tCopyright (c) 2007, 2008 Hanno Braun <hannob@users.sourceforge.net>\n\t\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\npackage ioproject.server.network;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\n/**\n * A group of clients.\n *\n * Each client group, except the global client group, has a parent group. Each group can have several\n * sub-groups. The semantics of groups are as follows:\n * * Only clients can added to a group that are in this group's parent group.\n * * Clients removed from a group are also removed from all of this group's sub-groups.\n *\n * The global client group contains all connected clients and all groups are, directly or indirectly,\n * sub-groups of the global client group.\n */\npublic class ClientGroup implements Iterable<Client> {\n\n    private ClientGroup parentGroup;\n\n    private Set<WeakReference<ClientGroup>> subGroups;\n\n    private Set<Client> clients;\n\n    private ClientHandler handler;\n\n    /**\n     * Creates a new client group. This is a package-scoped constructor. Users are supposed to get client\n     * groups by creating children of existing groups.\n     */\n    ClientGroup(ClientGroup theParentGroup) {\n        parentGroup = theParentGroup;\n        subGroups = new LinkedHashSet<WeakReference<ClientGroup>>();\n        clients = new LinkedHashSet<Client>();\n        handler = null;\n    }\n\n    /**\n     * Returns this groups parent group.\n     */\n    ClientGroup parentGroup() {\n        return parentGroup;\n    }\n\n    /**\n     * Notifies the client group of a sent message. This method is package-scoped and is only called by the\n     * parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyMessageSent(Client client, Object message) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyMessageSent(client, message) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.messageSent(client, message);\n        }\n        return true;\n    }\n\n    /**\n     * Notifies the client group of a received message. This method is package-scoped and is only called by\n     * the parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyMessageReceived(Client client, Object message) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyMessageReceived(client, message) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.messageReceived(client, message);\n        }\n        return true;\n    }\n\n    /**\n     * Notifies the client group of a caught exception. This method is package-scoped and is only called by\n     * the parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyExceptionCaught(Client client, Throwable cause) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyExceptionCaught(client, cause) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.exceptionCaught(client, cause);\n        }\n        return true;\n    }\n\n    /**\n     * Implements Iterable.iterator(). Returns the iterator of the wrapped Set.\n     */\n    public Iterator<Client> iterator() {\n        return Collections.unmodifiableSet(clients).iterator();\n    }\n\n    /**\n     * Returns true if the group contains the client, false otherwise.\n     *\n     * @param client The client that is checked for group membership.\n     *\n     * @return True if the client is a member of this group, false otherwise.\n     */\n    public synchronized boolean contains(Client client) {\n        return clients.contains(client);\n    }\n\n    /**\n     * Returns the number of clients that are member of this group.\n     */\n    public synchronized int size() {\n        return clients.size();\n    }\n\n    /**\n     * Attempts to add a client to this group. This will only succeed if the client is a member of this\n     * group's parent group.\n     *\n     * @param client The client to add to this group.\n     *\n     * @return True if the client was added to the group, false otherwise.\n     */\n    public synchronized boolean add(Client client) {\n        boolean parentContainsClient = parentGroup == null || parentGroup.contains(client);\n        if (parentContainsClient) {\n            clients.add(client);\n        }\n        if (handler != null) {\n            handler.clientAdded(client);\n        }\n        return parentContainsClient;\n    }\n\n    /**\n     * Removes a client from this group. The client will also be removed from all sub-groups that this client\n     * is a member of.\n     *\n     * @return True, if the client was a member of this group and was removed. False if the client was not a\n     *         member of this group and nothing happened.\n     */\n    public synchronized boolean remove(Client client) {\n        boolean clientIsMember = clients.contains(client);\n        if (clientIsMember) {\n            clients.remove(client);\n            for (WeakReference<ClientGroup> subGroupReference : subGroups) {\n                subGroupReference.get().remove(client);\n            }\n        }\n        if (handler != null) {\n            handler.clientRemoved(client);\n        }\n        return clientIsMember;\n    }\n\n    /**\n     * Creates a sub-group of this group.\n     * Please note that sub-groups are weakly referenced by their parent group and will automatically be\n     * garbage-collected once no other reference outside of their parent group exist.\n     *\n     * @return The newly created sub-group.\n     */\n    public synchronized ClientGroup createSubGroup() {\n        ClientGroup subGroup = new ClientGroup(this);\n        subGroups.add(new WeakReference<ClientGroup>(subGroup));\n        return subGroup;\n    }\n\n    /**\n     * Adds a client handler.\n     * The handler will be notified if a client is added to or removed from the group.\n     * If a client causes another event (message sent, message received or exception caught), the handler is\n     * only notified if the client is not a member of one or several sub-groups. If the client is a member of\n     * one or several sub-groups, only the sub-groups are notified of the event.\n     *\n     * @param aHandler The client handler to add.\n     */\n    public synchronized void addClientHandler(ClientHandler aHandler) {\n        handler = aHandler;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/77_io-project/src/main/java/ioproject/server/network/ClientGroupTest2.java",
		"test_prompt": "// ClientGroupTest2.java\npackage ioproject.server.network;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientGroup}.\n* It contains ten unit test cases for the {@link ClientGroup#size()} method.\n*/\nclass ClientGroupTest2 {"
	},
	{
		"original_code": "// ClientGroup.java\n/*\n\tCopyright (c) 2007, 2008 Hanno Braun <hannob@users.sourceforge.net>\n\t\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\npackage ioproject.server.network;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\n/**\n * A group of clients.\n *\n * Each client group, except the global client group, has a parent group. Each group can have several\n * sub-groups. The semantics of groups are as follows:\n * * Only clients can added to a group that are in this group's parent group.\n * * Clients removed from a group are also removed from all of this group's sub-groups.\n *\n * The global client group contains all connected clients and all groups are, directly or indirectly,\n * sub-groups of the global client group.\n */\npublic class ClientGroup implements Iterable<Client> {\n\n    private ClientGroup parentGroup;\n\n    private Set<WeakReference<ClientGroup>> subGroups;\n\n    private Set<Client> clients;\n\n    private ClientHandler handler;\n\n    /**\n     * Creates a new client group. This is a package-scoped constructor. Users are supposed to get client\n     * groups by creating children of existing groups.\n     */\n    ClientGroup(ClientGroup theParentGroup) {\n        parentGroup = theParentGroup;\n        subGroups = new LinkedHashSet<WeakReference<ClientGroup>>();\n        clients = new LinkedHashSet<Client>();\n        handler = null;\n    }\n\n    /**\n     * Returns this groups parent group.\n     */\n    ClientGroup parentGroup() {\n        return parentGroup;\n    }\n\n    /**\n     * Notifies the client group of a sent message. This method is package-scoped and is only called by the\n     * parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyMessageSent(Client client, Object message) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyMessageSent(client, message) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.messageSent(client, message);\n        }\n        return true;\n    }\n\n    /**\n     * Notifies the client group of a received message. This method is package-scoped and is only called by\n     * the parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyMessageReceived(Client client, Object message) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyMessageReceived(client, message) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.messageReceived(client, message);\n        }\n        return true;\n    }\n\n    /**\n     * Notifies the client group of a caught exception. This method is package-scoped and is only called by\n     * the parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyExceptionCaught(Client client, Throwable cause) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyExceptionCaught(client, cause) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.exceptionCaught(client, cause);\n        }\n        return true;\n    }\n\n    /**\n     * Implements Iterable.iterator(). Returns the iterator of the wrapped Set.\n     */\n    public Iterator<Client> iterator() {\n        return Collections.unmodifiableSet(clients).iterator();\n    }\n\n    /**\n     * Returns true if the group contains the client, false otherwise.\n     *\n     * @param client The client that is checked for group membership.\n     *\n     * @return True if the client is a member of this group, false otherwise.\n     */\n    public synchronized boolean contains(Client client) {\n        return clients.contains(client);\n    }\n\n    /**\n     * Returns the number of clients that are member of this group.\n     */\n    public synchronized int size() {\n        return clients.size();\n    }\n\n    /**\n     * Attempts to add a client to this group. This will only succeed if the client is a member of this\n     * group's parent group.\n     *\n     * @param client The client to add to this group.\n     *\n     * @return True if the client was added to the group, false otherwise.\n     */\n    public synchronized boolean add(Client client) {\n        boolean parentContainsClient = parentGroup == null || parentGroup.contains(client);\n        if (parentContainsClient) {\n            clients.add(client);\n        }\n        if (handler != null) {\n            handler.clientAdded(client);\n        }\n        return parentContainsClient;\n    }\n\n    /**\n     * Removes a client from this group. The client will also be removed from all sub-groups that this client\n     * is a member of.\n     *\n     * @return True, if the client was a member of this group and was removed. False if the client was not a\n     *         member of this group and nothing happened.\n     */\n    public synchronized boolean remove(Client client) {\n        boolean clientIsMember = clients.contains(client);\n        if (clientIsMember) {\n            clients.remove(client);\n            for (WeakReference<ClientGroup> subGroupReference : subGroups) {\n                subGroupReference.get().remove(client);\n            }\n        }\n        if (handler != null) {\n            handler.clientRemoved(client);\n        }\n        return clientIsMember;\n    }\n\n    /**\n     * Creates a sub-group of this group.\n     * Please note that sub-groups are weakly referenced by their parent group and will automatically be\n     * garbage-collected once no other reference outside of their parent group exist.\n     *\n     * @return The newly created sub-group.\n     */\n    public synchronized ClientGroup createSubGroup() {\n        ClientGroup subGroup = new ClientGroup(this);\n        subGroups.add(new WeakReference<ClientGroup>(subGroup));\n        return subGroup;\n    }\n\n    /**\n     * Adds a client handler.\n     * The handler will be notified if a client is added to or removed from the group.\n     * If a client causes another event (message sent, message received or exception caught), the handler is\n     * only notified if the client is not a member of one or several sub-groups. If the client is a member of\n     * one or several sub-groups, only the sub-groups are notified of the event.\n     *\n     * @param aHandler The client handler to add.\n     */\n    public synchronized void addClientHandler(ClientHandler aHandler) {\n        handler = aHandler;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/77_io-project/src/main/java/ioproject/server/network/ClientGroupTest3.java",
		"test_prompt": "// ClientGroupTest3.java\npackage ioproject.server.network;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientGroup}.\n* It contains ten unit test cases for the {@link ClientGroup#add(Client)} method.\n*/\nclass ClientGroupTest3 {"
	},
	{
		"original_code": "// ClientGroup.java\n/*\n\tCopyright (c) 2007, 2008 Hanno Braun <hannob@users.sourceforge.net>\n\t\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\npackage ioproject.server.network;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\n/**\n * A group of clients.\n *\n * Each client group, except the global client group, has a parent group. Each group can have several\n * sub-groups. The semantics of groups are as follows:\n * * Only clients can added to a group that are in this group's parent group.\n * * Clients removed from a group are also removed from all of this group's sub-groups.\n *\n * The global client group contains all connected clients and all groups are, directly or indirectly,\n * sub-groups of the global client group.\n */\npublic class ClientGroup implements Iterable<Client> {\n\n    private ClientGroup parentGroup;\n\n    private Set<WeakReference<ClientGroup>> subGroups;\n\n    private Set<Client> clients;\n\n    private ClientHandler handler;\n\n    /**\n     * Creates a new client group. This is a package-scoped constructor. Users are supposed to get client\n     * groups by creating children of existing groups.\n     */\n    ClientGroup(ClientGroup theParentGroup) {\n        parentGroup = theParentGroup;\n        subGroups = new LinkedHashSet<WeakReference<ClientGroup>>();\n        clients = new LinkedHashSet<Client>();\n        handler = null;\n    }\n\n    /**\n     * Returns this groups parent group.\n     */\n    ClientGroup parentGroup() {\n        return parentGroup;\n    }\n\n    /**\n     * Notifies the client group of a sent message. This method is package-scoped and is only called by the\n     * parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyMessageSent(Client client, Object message) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyMessageSent(client, message) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.messageSent(client, message);\n        }\n        return true;\n    }\n\n    /**\n     * Notifies the client group of a received message. This method is package-scoped and is only called by\n     * the parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyMessageReceived(Client client, Object message) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyMessageReceived(client, message) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.messageReceived(client, message);\n        }\n        return true;\n    }\n\n    /**\n     * Notifies the client group of a caught exception. This method is package-scoped and is only called by\n     * the parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyExceptionCaught(Client client, Throwable cause) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyExceptionCaught(client, cause) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.exceptionCaught(client, cause);\n        }\n        return true;\n    }\n\n    /**\n     * Implements Iterable.iterator(). Returns the iterator of the wrapped Set.\n     */\n    public Iterator<Client> iterator() {\n        return Collections.unmodifiableSet(clients).iterator();\n    }\n\n    /**\n     * Returns true if the group contains the client, false otherwise.\n     *\n     * @param client The client that is checked for group membership.\n     *\n     * @return True if the client is a member of this group, false otherwise.\n     */\n    public synchronized boolean contains(Client client) {\n        return clients.contains(client);\n    }\n\n    /**\n     * Returns the number of clients that are member of this group.\n     */\n    public synchronized int size() {\n        return clients.size();\n    }\n\n    /**\n     * Attempts to add a client to this group. This will only succeed if the client is a member of this\n     * group's parent group.\n     *\n     * @param client The client to add to this group.\n     *\n     * @return True if the client was added to the group, false otherwise.\n     */\n    public synchronized boolean add(Client client) {\n        boolean parentContainsClient = parentGroup == null || parentGroup.contains(client);\n        if (parentContainsClient) {\n            clients.add(client);\n        }\n        if (handler != null) {\n            handler.clientAdded(client);\n        }\n        return parentContainsClient;\n    }\n\n    /**\n     * Removes a client from this group. The client will also be removed from all sub-groups that this client\n     * is a member of.\n     *\n     * @return True, if the client was a member of this group and was removed. False if the client was not a\n     *         member of this group and nothing happened.\n     */\n    public synchronized boolean remove(Client client) {\n        boolean clientIsMember = clients.contains(client);\n        if (clientIsMember) {\n            clients.remove(client);\n            for (WeakReference<ClientGroup> subGroupReference : subGroups) {\n                subGroupReference.get().remove(client);\n            }\n        }\n        if (handler != null) {\n            handler.clientRemoved(client);\n        }\n        return clientIsMember;\n    }\n\n    /**\n     * Creates a sub-group of this group.\n     * Please note that sub-groups are weakly referenced by their parent group and will automatically be\n     * garbage-collected once no other reference outside of their parent group exist.\n     *\n     * @return The newly created sub-group.\n     */\n    public synchronized ClientGroup createSubGroup() {\n        ClientGroup subGroup = new ClientGroup(this);\n        subGroups.add(new WeakReference<ClientGroup>(subGroup));\n        return subGroup;\n    }\n\n    /**\n     * Adds a client handler.\n     * The handler will be notified if a client is added to or removed from the group.\n     * If a client causes another event (message sent, message received or exception caught), the handler is\n     * only notified if the client is not a member of one or several sub-groups. If the client is a member of\n     * one or several sub-groups, only the sub-groups are notified of the event.\n     *\n     * @param aHandler The client handler to add.\n     */\n    public synchronized void addClientHandler(ClientHandler aHandler) {\n        handler = aHandler;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/77_io-project/src/main/java/ioproject/server/network/ClientGroupTest4.java",
		"test_prompt": "// ClientGroupTest4.java\npackage ioproject.server.network;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientGroup}.\n* It contains ten unit test cases for the {@link ClientGroup#remove(Client)} method.\n*/\nclass ClientGroupTest4 {"
	},
	{
		"original_code": "// ClientGroup.java\n/*\n\tCopyright (c) 2007, 2008 Hanno Braun <hannob@users.sourceforge.net>\n\t\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\npackage ioproject.server.network;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\n/**\n * A group of clients.\n *\n * Each client group, except the global client group, has a parent group. Each group can have several\n * sub-groups. The semantics of groups are as follows:\n * * Only clients can added to a group that are in this group's parent group.\n * * Clients removed from a group are also removed from all of this group's sub-groups.\n *\n * The global client group contains all connected clients and all groups are, directly or indirectly,\n * sub-groups of the global client group.\n */\npublic class ClientGroup implements Iterable<Client> {\n\n    private ClientGroup parentGroup;\n\n    private Set<WeakReference<ClientGroup>> subGroups;\n\n    private Set<Client> clients;\n\n    private ClientHandler handler;\n\n    /**\n     * Creates a new client group. This is a package-scoped constructor. Users are supposed to get client\n     * groups by creating children of existing groups.\n     */\n    ClientGroup(ClientGroup theParentGroup) {\n        parentGroup = theParentGroup;\n        subGroups = new LinkedHashSet<WeakReference<ClientGroup>>();\n        clients = new LinkedHashSet<Client>();\n        handler = null;\n    }\n\n    /**\n     * Returns this groups parent group.\n     */\n    ClientGroup parentGroup() {\n        return parentGroup;\n    }\n\n    /**\n     * Notifies the client group of a sent message. This method is package-scoped and is only called by the\n     * parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyMessageSent(Client client, Object message) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyMessageSent(client, message) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.messageSent(client, message);\n        }\n        return true;\n    }\n\n    /**\n     * Notifies the client group of a received message. This method is package-scoped and is only called by\n     * the parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyMessageReceived(Client client, Object message) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyMessageReceived(client, message) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.messageReceived(client, message);\n        }\n        return true;\n    }\n\n    /**\n     * Notifies the client group of a caught exception. This method is package-scoped and is only called by\n     * the parent group.\n     *\n     * @return True, if the client is member of this group, false otherwise.\n     */\n    synchronized boolean notifyExceptionCaught(Client client, Throwable cause) {\n        if (!clients.contains(client)) {\n            return false;\n        }\n        boolean inSubGroup = false;\n        for (WeakReference<ClientGroup> groupReference : subGroups) {\n            inSubGroup = groupReference.get().notifyExceptionCaught(client, cause) || inSubGroup;\n        }\n        if (!inSubGroup && handler != null) {\n            handler.exceptionCaught(client, cause);\n        }\n        return true;\n    }\n\n    /**\n     * Implements Iterable.iterator(). Returns the iterator of the wrapped Set.\n     */\n    public Iterator<Client> iterator() {\n        return Collections.unmodifiableSet(clients).iterator();\n    }\n\n    /**\n     * Returns true if the group contains the client, false otherwise.\n     *\n     * @param client The client that is checked for group membership.\n     *\n     * @return True if the client is a member of this group, false otherwise.\n     */\n    public synchronized boolean contains(Client client) {\n        return clients.contains(client);\n    }\n\n    /**\n     * Returns the number of clients that are member of this group.\n     */\n    public synchronized int size() {\n        return clients.size();\n    }\n\n    /**\n     * Attempts to add a client to this group. This will only succeed if the client is a member of this\n     * group's parent group.\n     *\n     * @param client The client to add to this group.\n     *\n     * @return True if the client was added to the group, false otherwise.\n     */\n    public synchronized boolean add(Client client) {\n        boolean parentContainsClient = parentGroup == null || parentGroup.contains(client);\n        if (parentContainsClient) {\n            clients.add(client);\n        }\n        if (handler != null) {\n            handler.clientAdded(client);\n        }\n        return parentContainsClient;\n    }\n\n    /**\n     * Removes a client from this group. The client will also be removed from all sub-groups that this client\n     * is a member of.\n     *\n     * @return True, if the client was a member of this group and was removed. False if the client was not a\n     *         member of this group and nothing happened.\n     */\n    public synchronized boolean remove(Client client) {\n        boolean clientIsMember = clients.contains(client);\n        if (clientIsMember) {\n            clients.remove(client);\n            for (WeakReference<ClientGroup> subGroupReference : subGroups) {\n                subGroupReference.get().remove(client);\n            }\n        }\n        if (handler != null) {\n            handler.clientRemoved(client);\n        }\n        return clientIsMember;\n    }\n\n    /**\n     * Creates a sub-group of this group.\n     * Please note that sub-groups are weakly referenced by their parent group and will automatically be\n     * garbage-collected once no other reference outside of their parent group exist.\n     *\n     * @return The newly created sub-group.\n     */\n    public synchronized ClientGroup createSubGroup() {\n        ClientGroup subGroup = new ClientGroup(this);\n        subGroups.add(new WeakReference<ClientGroup>(subGroup));\n        return subGroup;\n    }\n\n    /**\n     * Adds a client handler.\n     * The handler will be notified if a client is added to or removed from the group.\n     * If a client causes another event (message sent, message received or exception caught), the handler is\n     * only notified if the client is not a member of one or several sub-groups. If the client is a member of\n     * one or several sub-groups, only the sub-groups are notified of the event.\n     *\n     * @param aHandler The client handler to add.\n     */\n    public synchronized void addClientHandler(ClientHandler aHandler) {\n        handler = aHandler;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/77_io-project/src/main/java/ioproject/server/network/ClientGroupTest5.java",
		"test_prompt": "// ClientGroupTest5.java\npackage ioproject.server.network;\n\nimport java.lang.ref.WeakReference;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientGroup}.\n* It contains ten unit test cases for the {@link ClientGroup#createSubGroup()} method.\n*/\nclass ClientGroupTest5 {"
	},
	{
		"original_code": "// GlobalClientGroup.java\n/*\n\tCopyright (c) 2007, 2008 Hanno Braun <hannob@users.sourceforge.net>\n\t\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\npackage ioproject.server.network;\n\n/**\n * The global client group that contains all connected clients.\n */\nclass GlobalClientGroup extends ClientGroup {\n\n    /**\n     * Constructor.\n     */\n    GlobalClientGroup() {\n        super(null);\n    }\n\n    /**\n     * Overrides ClientGroup.add(). Throws an exception.\n     */\n    @Override\n    public boolean add(Client client) {\n        throw new UnsupportedOperationException(\"Adding clients to the global client group is not allowed.\");\n    }\n\n    /**\n     * Overrides ClientGroup.remove(). Throws an exception.\n     */\n    @Override\n    public boolean remove(Client client) {\n        throw new UnsupportedOperationException(\"Removing clients from the global client group is not\" + \" allowed. If you want to close a client connection use Client.disconnect() instead.\");\n    }\n\n    /**\n     * Notifies the group of a newly connected client.\n     */\n    void notifyClientConnected(Client client) {\n        super.add(client);\n    }\n\n    /**\n     * Notifies the group that a client has been disconnected.\n     */\n    void notifyClientDisconnected(Client client) {\n        super.remove(client);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/77_io-project/src/main/java/ioproject/server/network/GlobalClientGroupTest0.java",
		"test_prompt": "// GlobalClientGroupTest0.java\npackage ioproject.server.network;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GlobalClientGroup}.\n* It contains ten unit test cases for the {@link GlobalClientGroup#add(Client)} method.\n*/\nclass GlobalClientGroupTest0 {"
	},
	{
		"original_code": "// GlobalClientGroup.java\n/*\n\tCopyright (c) 2007, 2008 Hanno Braun <hannob@users.sourceforge.net>\n\t\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\npackage ioproject.server.network;\n\n/**\n * The global client group that contains all connected clients.\n */\nclass GlobalClientGroup extends ClientGroup {\n\n    /**\n     * Constructor.\n     */\n    GlobalClientGroup() {\n        super(null);\n    }\n\n    /**\n     * Overrides ClientGroup.add(). Throws an exception.\n     */\n    @Override\n    public boolean add(Client client) {\n        throw new UnsupportedOperationException(\"Adding clients to the global client group is not allowed.\");\n    }\n\n    /**\n     * Overrides ClientGroup.remove(). Throws an exception.\n     */\n    @Override\n    public boolean remove(Client client) {\n        throw new UnsupportedOperationException(\"Removing clients from the global client group is not\" + \" allowed. If you want to close a client connection use Client.disconnect() instead.\");\n    }\n\n    /**\n     * Notifies the group of a newly connected client.\n     */\n    void notifyClientConnected(Client client) {\n        super.add(client);\n    }\n\n    /**\n     * Notifies the group that a client has been disconnected.\n     */\n    void notifyClientDisconnected(Client client) {\n        super.remove(client);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/77_io-project/src/main/java/ioproject/server/network/GlobalClientGroupTest1.java",
		"test_prompt": "// GlobalClientGroupTest1.java\npackage ioproject.server.network;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GlobalClientGroup}.\n* It contains ten unit test cases for the {@link GlobalClientGroup#remove(Client)} method.\n*/\nclass GlobalClientGroupTest1 {"
	}
]