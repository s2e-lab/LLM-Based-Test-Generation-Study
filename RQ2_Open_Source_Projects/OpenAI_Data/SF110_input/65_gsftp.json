[
	{
		"original_code": "// SSHSCPGUIThread.java\n/**\n * ***************************************************************************\n *\n *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.\n *                  www.mindbright.se, info@mindbright.se\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * ****************************************************************************\n *  $Author: webjabber $\n *  $Date: 2006/06/13 18:43:42 $\n *  $Name:  $\n * ***************************************************************************\n */\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.File;\nimport com.gotoservers.ftp.RemoteFileBrowser;\nimport com.isnetworks.ssh.FileDisplay;\nimport mindbright.gui.ProgressBar;\nimport mindbright.util.AWTConvenience;\n\npublic final class SSHSCPGUIThread implements Runnable, SSHSCPIndicator {\n\n    //String curDir, localFile, remoteFile;\n    String curDir = \"/\";\n\n    //String remoteHost;\n    //int remotePort;\n    // //SSHAuthenticator authenticator;\n    // //SSHClientUser mainUser;\n    // //SSHInteractor interactor;\n    boolean recursive, background, toRemote;\n\n    Frame parent;\n\n    SSHSCPPanel mRefreshDialog;\n\n    //String[] localFileList;\n    Dialog copyIndicator;\n\n    ProgressBar progress;\n\n    // //SSHSCP scp;\n    Thread copyThread;\n\n    Label srcLbl, dstLbl, sizeLbl, nameLbl, speedLbl;\n\n    Button cancB;\n\n    long startTime;\n\n    long lastTime;\n\n    long totTransSize;\n\n    long fileTransSize;\n\n    long curFileSize;\n\n    long lastSize;\n\n    int fileCnt;\n\n    boolean isBinary;\n\n    boolean doneCopying;\n\n    RemoteFileBrowser mRemoteFileBrowser;\n\n    FileDisplay mLocalFileDisplay;\n\n    FileDisplay mRemoteFileDisplay;\n\n    public SSHSCPGUIThread(// //String remoteHost, int remotePort,\n    // //SSHAuthenticator authenticator,\n    // //SSHClientUser mainUser, SSHInteractor interactor,\n    //Frame parent, String curDir, String localFile, String remoteFile,\n    Frame parent, FileDisplay localFileDisplay, FileDisplay remoteFileDisplay, RemoteFileBrowser remoteFileBrowser, boolean recursive, boolean background, boolean toRemote, boolean isBinary, SSHSCPPanel dialog) throws Exception {\n        // super(SSH.getThreadGroup(), SSH.createThreadName()); // JH_Mod\n        this.mLocalFileDisplay = localFileDisplay;\n        this.mRemoteFileDisplay = remoteFileDisplay;\n        this.mRemoteFileBrowser = remoteFileBrowser;\n        this.isBinary = isBinary;\n        this.parent = parent;\n        this.recursive = recursive;\n        this.background = background;\n        this.toRemote = toRemote;\n        this.fileCnt = 0;\n        this.doneCopying = false;\n        this.startTime = 0;\n        this.lastTime = 0;\n        this.totTransSize = 0;\n        this.fileTransSize = 0;\n        this.lastSize = 0;\n        this.mRefreshDialog = dialog;\n        // this.start();\n    }\n\n    private void setupDialog() {\n        String sourceFile = \"Local:\";\n        String destFile = \"Remote:\";\n        if (!toRemote) {\n            String tmp;\n            tmp = sourceFile;\n            sourceFile = destFile;\n            destFile = tmp;\n        }\n        copyIndicator = new Dialog(parent, \"GoToServers - File Transfer\", false);\n        GridBagLayout grid = new GridBagLayout();\n        GridBagConstraints gridc = new GridBagConstraints();\n        Label lbl;\n        Button b;\n        copyIndicator.setLayout(grid);\n        gridc.fill = GridBagConstraints.HORIZONTAL;\n        gridc.anchor = GridBagConstraints.WEST;\n        gridc.gridy = 0;\n        gridc.gridwidth = 1;\n        gridc.insets = new Insets(4, 4, 4, 4);\n        lbl = new Label(\"Source:\");\n        grid.setConstraints(lbl, gridc);\n        copyIndicator.add(lbl);\n        gridc.gridwidth = 4;\n        srcLbl = new Label(cutName(sourceFile, 32));\n        grid.setConstraints(srcLbl, gridc);\n        copyIndicator.add(srcLbl);\n        gridc.gridy = 1;\n        gridc.gridwidth = 1;\n        lbl = new Label(\"Destination:\");\n        grid.setConstraints(lbl, gridc);\n        copyIndicator.add(lbl);\n        gridc.gridwidth = 4;\n        dstLbl = new Label(cutName(destFile, 32));\n        grid.setConstraints(dstLbl, gridc);\n        copyIndicator.add(dstLbl);\n        gridc.gridy = 2;\n        gridc.gridwidth = 1;\n        lbl = new Label(\"Current:\");\n        grid.setConstraints(lbl, gridc);\n        copyIndicator.add(lbl);\n        gridc.gridwidth = 3;\n        nameLbl = new Label(\"connecting...\");\n        grid.setConstraints(nameLbl, gridc);\n        copyIndicator.add(nameLbl);\n        gridc.gridwidth = 1;\n        sizeLbl = new Label(\"\");\n        grid.setConstraints(sizeLbl, gridc);\n        copyIndicator.add(sizeLbl);\n        gridc.gridy = 3;\n        gridc.gridwidth = 3;\n        gridc.fill = GridBagConstraints.NONE;\n        gridc.anchor = GridBagConstraints.CENTER;\n        gridc.insets = new Insets(4, 12, 4, 4);\n        progress = new ProgressBar(512, 160, 20);\n        grid.setConstraints(progress, gridc);\n        copyIndicator.add(progress);\n        gridc.gridwidth = GridBagConstraints.REMAINDER;\n        gridc.insets = new Insets(4, 4, 4, 4);\n        gridc.fill = GridBagConstraints.HORIZONTAL;\n        speedLbl = new Label(\"0.0 kB/sec\", Label.CENTER);\n        grid.setConstraints(speedLbl, gridc);\n        copyIndicator.add(speedLbl);\n        gridc.gridy = 4;\n        cancB = new Button(\"Cancel\");\n        cancB.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                if (!doneCopying) {\n                    if (copyThread != null)\n                        copyThread.stop();\n                    if (mRemoteFileBrowser != null)\n                        mRemoteFileBrowser.abort();\n                }\n                copyIndicator.setVisible(false);\n            }\n        });\n        gridc.fill = GridBagConstraints.NONE;\n        gridc.gridwidth = GridBagConstraints.REMAINDER;\n        gridc.anchor = GridBagConstraints.CENTER;\n        gridc.ipady = 2;\n        gridc.ipadx = 2;\n        grid.setConstraints(cancB, gridc);\n        copyIndicator.add(cancB);\n        AWTConvenience.setBackgroundOfChildren(copyIndicator);\n        Dimension d = speedLbl.getSize();\n        d.width += d.width * 2;\n        speedLbl.setSize(d);\n        sizeLbl.setSize(d);\n        copyIndicator.setResizable(true);\n        copyIndicator.pack();\n        AWTConvenience.placeDialog(copyIndicator);\n    }\n\n    public void run() {\n        setupDialog();\n        // copyThread = new Thread(new Runnable() {\n        copyThread = new Thread(SSHSCPPanel.getThreadGroup(), new // JH_Mod\n        Runnable() {\n\n            public void run() {\n                try {\n                    if (toRemote) {\n                        mRemoteFileBrowser.putFiles(SSHSCPGUIThread.this, mRemoteFileDisplay, mLocalFileDisplay, isBinary);\n                    } else {\n                        mRemoteFileBrowser.getFiles(SSHSCPGUIThread.this, mRemoteFileDisplay, mLocalFileDisplay, isBinary);\n                    }\n                    ////scp = new SSHSCP(remoteHost, remotePort,\n                    ////\t\tauthenticator, new File(curDir), recursive,\n                    ////\t\tfalse);\n                    ////scp.setClientUser(mainUser);\n                    ////scp.setInteractor(interactor);\n                    ////scp.setIndicator(SSHSCPGUIThread.this);\n                    ////if (toRemote) {\n                    ////\tscp.copyToRemote(localFileList, remoteFile);\n                    ////} else {\n                    ////\tscp.copyToLocal(localFileList, remoteFile);\n                    ///}\n                    copyThread.setPriority(Thread.NORM_PRIORITY);\n                    Toolkit.getDefaultToolkit().beep();\n                } catch (Exception e) {\n                    //TODO:\n                    ////interactor.alert(\"SCP Error: \" + e.getMessage());\n                    System.out.println(\"SCP Error:\");\n                    e.printStackTrace();\n                }\n                nameLbl.setText(\"Copied \" + fileCnt + \" file\" + (fileCnt != 1 ? \"s\" : \"\") + \".\");\n                double kSize = (double) totTransSize / 1024;\n                sizeLbl.setText(round(kSize) + \" kB\");\n                doneCopying = true;\n                cancB.setLabel(\"Done\");\n                mRefreshDialog.refresh();\n                AWTConvenience.setKeyListenerOfChildren(copyIndicator, new AWTConvenience.OKCancelAdapter(cancB, cancB), null);\n            }\n        });\n        if (background) {\n            copyThread.setPriority(Thread.MIN_PRIORITY);\n        }\n        copyThread.start();\n        copyIndicator.setVisible(true);\n    }\n\n    public static String[] spaceSplit(String str) {\n        if (str == null || str.length() <= 0)\n            return null;\n        int l = 0, r, cnt = 0;\n        String[] list = new String[str.length() / 2];\n        boolean lastIsQuoted = false;\n        str = str.trim();\n        while ((r = str.indexOf(' ', l)) >= 0) {\n            if (str.charAt(l) == '\"') {\n                l += 1;\n                r = str.indexOf('\"', l);\n                if (r == -1)\n                    return null;\n            }\n            String name = str.substring(l, r);\n            if (name.endsWith(File.separator))\n                name = name.substring(0, name.length() - 1);\n            list[cnt++] = name;\n            l = r;\n            do {\n                l++;\n                if (l == str.length()) {\n                    lastIsQuoted = true;\n                    break;\n                }\n            } while (str.charAt(l) == ' ');\n        }\n        if (!lastIsQuoted) {\n            if (str.charAt(l) == '\"') {\n                l += 1;\n                r = str.indexOf('\"', l);\n                if (r == -1)\n                    return null;\n            }\n            String name = str.substring(l);\n            if (name.endsWith(File.separator))\n                name = name.substring(0, name.length() - 1);\n            list[cnt++] = name;\n        }\n        for (int i = 0; i < cnt; i++) {\n            if (list[i].endsWith(\"\\\"\")) {\n                list[i] = list[i].substring(0, list[i].length() - 1);\n            }\n        }\n        String[] tmp = list;\n        list = new String[cnt];\n        System.arraycopy(tmp, 0, list, 0, cnt);\n        return list;\n    }\n\n    public static String[] starExpand(String[] fileList, String curDir) {\n        int i, j, n, cnt = 0;\n        // !!! Ouch...\n        String[] newList = new String[4096];\n        String[] curDirList = (new File(curDir)).list();\n        String path, curFile;\n        for (i = 0; i < fileList.length; i++) {\n            curFile = fileList[i];\n            path = \"\";\n            n = curFile.indexOf('*');\n            if (n == -1) {\n                cnt = addUnique(newList, curFile, cnt);\n                continue;\n            }\n            String[] dirList;\n            File f = new File(curFile);\n            if (!f.isAbsolute()) {\n                dirList = curDirList;\n            } else {\n                String dir = f.getParent();\n                if (dir == null)\n                    // !!! Ouch...\n                    dir = new String(File.separator);\n                dirList = (new File(dir)).list();\n                curFile = f.getName();\n                path = dir + File.separator;\n                n = curFile.indexOf('*');\n            }\n            String pre = curFile.substring(0, n);\n            String post = curFile.substring(n + 1);\n            for (j = 0; j < dirList.length; j++) {\n                String name = dirList[j];\n                if (name.startsWith(pre) && name.endsWith(post)) {\n                    cnt = addUnique(newList, path + name, cnt);\n                }\n            }\n        }\n        String[] tmp = newList;\n        newList = new String[cnt];\n        System.arraycopy(tmp, 0, newList, 0, cnt);\n        return newList;\n    }\n\n    static int addUnique(String[] list, String str, int last) {\n        int i;\n        for (i = 0; i < last; i++) if (list[i].equals(str))\n            break;\n        if (i == last)\n            list[last++] = str;\n        return last;\n    }\n\n    public void connected(String server) {\n        nameLbl.setText(\"...connected\");\n    }\n\n    public void startFile(String file, long size) {\n        double kSize = (double) size / 1024;\n        sizeLbl.setText(round(kSize) + \" kB\");\n        nameLbl.setText(file);\n        if (toRemote) {\n            srcLbl.setText(cutName(\"localhost:\" + file, 32));\n        } else {\n            dstLbl.setText(cutName(\"localhost:\" + file, 32));\n        }\n        progress.setMax(size, true);\n        if (startTime == 0)\n            startTime = System.currentTimeMillis();\n        curFileSize = size;\n        fileTransSize = 0;\n        fileCnt++;\n    }\n\n    public void startDir(String file) {\n        if (startTime == 0)\n            startTime = System.currentTimeMillis();\n        if (file.length() > curDir.length())\n            file = file.substring(curDir.length());\n        if (toRemote) {\n            srcLbl.setText(cutName(\"localhost:\" + file, 32));\n        } else {\n            dstLbl.setText(cutName(\"localhost:\" + file, 32));\n        }\n    }\n\n    public void endFile() {\n        progress.setValue(curFileSize, true);\n    }\n\n    public void endDir() {\n    }\n\n    public void progress(long size) {\n        totTransSize += size;\n        fileTransSize += size;\n        if ((curFileSize > 0) && ((((totTransSize - lastSize) * 100) / curFileSize) >= 1)) {\n            progress.setValue(fileTransSize, !background);\n            long now = System.currentTimeMillis();\n            long totSec = ((now - startTime) / 1000);\n            double rate = (totSec != 0 ? (((double) totTransSize / 1024) / totSec) : 0.0);\n            totSec = (now - lastTime);\n            if (totSec != 0) {\n                double rate2 = ((double) (totTransSize - lastSize) / 1024) / totSec;\n                rate = (rate + rate2) / 2.0;\n            }\n            speedLbl.setText(\"\" + round(rate) + \" kB/sec\");\n            lastSize = totTransSize;\n            lastTime = now;\n        }\n    }\n\n    double round(double val) {\n        val = val * 10.0;\n        val = Math.floor(val);\n        val = val / 10.0;\n        return val;\n    }\n\n    String cutName(String name, int len) {\n        if (name.length() > len) {\n            len -= 3;\n            String pre = name.substring(0, len / 2);\n            String suf = name.substring(name.length() - (len / 2));\n            name = pre + \"...\" + suf;\n        }\n        return name;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHSCPGUIThreadTest0.java",
		"test_prompt": "// SSHSCPGUIThreadTest0.java\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.File;\nimport com.gotoservers.ftp.RemoteFileBrowser;\nimport com.isnetworks.ssh.FileDisplay;\nimport mindbright.gui.ProgressBar;\nimport mindbright.util.AWTConvenience;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SSHSCPGUIThread}.\n* It contains ten unit test cases for the {@link SSHSCPGUIThread#spaceSplit(String)} method.\n*/\nclass SSHSCPGUIThreadTest0 {"
	},
	{
		"original_code": "// SSHSCPGUIThread.java\n/**\n * ***************************************************************************\n *\n *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.\n *                  www.mindbright.se, info@mindbright.se\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * ****************************************************************************\n *  $Author: webjabber $\n *  $Date: 2006/06/13 18:43:42 $\n *  $Name:  $\n * ***************************************************************************\n */\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.File;\nimport com.gotoservers.ftp.RemoteFileBrowser;\nimport com.isnetworks.ssh.FileDisplay;\nimport mindbright.gui.ProgressBar;\nimport mindbright.util.AWTConvenience;\n\npublic final class SSHSCPGUIThread implements Runnable, SSHSCPIndicator {\n\n    //String curDir, localFile, remoteFile;\n    String curDir = \"/\";\n\n    //String remoteHost;\n    //int remotePort;\n    // //SSHAuthenticator authenticator;\n    // //SSHClientUser mainUser;\n    // //SSHInteractor interactor;\n    boolean recursive, background, toRemote;\n\n    Frame parent;\n\n    SSHSCPPanel mRefreshDialog;\n\n    //String[] localFileList;\n    Dialog copyIndicator;\n\n    ProgressBar progress;\n\n    // //SSHSCP scp;\n    Thread copyThread;\n\n    Label srcLbl, dstLbl, sizeLbl, nameLbl, speedLbl;\n\n    Button cancB;\n\n    long startTime;\n\n    long lastTime;\n\n    long totTransSize;\n\n    long fileTransSize;\n\n    long curFileSize;\n\n    long lastSize;\n\n    int fileCnt;\n\n    boolean isBinary;\n\n    boolean doneCopying;\n\n    RemoteFileBrowser mRemoteFileBrowser;\n\n    FileDisplay mLocalFileDisplay;\n\n    FileDisplay mRemoteFileDisplay;\n\n    public SSHSCPGUIThread(// //String remoteHost, int remotePort,\n    // //SSHAuthenticator authenticator,\n    // //SSHClientUser mainUser, SSHInteractor interactor,\n    //Frame parent, String curDir, String localFile, String remoteFile,\n    Frame parent, FileDisplay localFileDisplay, FileDisplay remoteFileDisplay, RemoteFileBrowser remoteFileBrowser, boolean recursive, boolean background, boolean toRemote, boolean isBinary, SSHSCPPanel dialog) throws Exception {\n        // super(SSH.getThreadGroup(), SSH.createThreadName()); // JH_Mod\n        this.mLocalFileDisplay = localFileDisplay;\n        this.mRemoteFileDisplay = remoteFileDisplay;\n        this.mRemoteFileBrowser = remoteFileBrowser;\n        this.isBinary = isBinary;\n        this.parent = parent;\n        this.recursive = recursive;\n        this.background = background;\n        this.toRemote = toRemote;\n        this.fileCnt = 0;\n        this.doneCopying = false;\n        this.startTime = 0;\n        this.lastTime = 0;\n        this.totTransSize = 0;\n        this.fileTransSize = 0;\n        this.lastSize = 0;\n        this.mRefreshDialog = dialog;\n        // this.start();\n    }\n\n    private void setupDialog() {\n        String sourceFile = \"Local:\";\n        String destFile = \"Remote:\";\n        if (!toRemote) {\n            String tmp;\n            tmp = sourceFile;\n            sourceFile = destFile;\n            destFile = tmp;\n        }\n        copyIndicator = new Dialog(parent, \"GoToServers - File Transfer\", false);\n        GridBagLayout grid = new GridBagLayout();\n        GridBagConstraints gridc = new GridBagConstraints();\n        Label lbl;\n        Button b;\n        copyIndicator.setLayout(grid);\n        gridc.fill = GridBagConstraints.HORIZONTAL;\n        gridc.anchor = GridBagConstraints.WEST;\n        gridc.gridy = 0;\n        gridc.gridwidth = 1;\n        gridc.insets = new Insets(4, 4, 4, 4);\n        lbl = new Label(\"Source:\");\n        grid.setConstraints(lbl, gridc);\n        copyIndicator.add(lbl);\n        gridc.gridwidth = 4;\n        srcLbl = new Label(cutName(sourceFile, 32));\n        grid.setConstraints(srcLbl, gridc);\n        copyIndicator.add(srcLbl);\n        gridc.gridy = 1;\n        gridc.gridwidth = 1;\n        lbl = new Label(\"Destination:\");\n        grid.setConstraints(lbl, gridc);\n        copyIndicator.add(lbl);\n        gridc.gridwidth = 4;\n        dstLbl = new Label(cutName(destFile, 32));\n        grid.setConstraints(dstLbl, gridc);\n        copyIndicator.add(dstLbl);\n        gridc.gridy = 2;\n        gridc.gridwidth = 1;\n        lbl = new Label(\"Current:\");\n        grid.setConstraints(lbl, gridc);\n        copyIndicator.add(lbl);\n        gridc.gridwidth = 3;\n        nameLbl = new Label(\"connecting...\");\n        grid.setConstraints(nameLbl, gridc);\n        copyIndicator.add(nameLbl);\n        gridc.gridwidth = 1;\n        sizeLbl = new Label(\"\");\n        grid.setConstraints(sizeLbl, gridc);\n        copyIndicator.add(sizeLbl);\n        gridc.gridy = 3;\n        gridc.gridwidth = 3;\n        gridc.fill = GridBagConstraints.NONE;\n        gridc.anchor = GridBagConstraints.CENTER;\n        gridc.insets = new Insets(4, 12, 4, 4);\n        progress = new ProgressBar(512, 160, 20);\n        grid.setConstraints(progress, gridc);\n        copyIndicator.add(progress);\n        gridc.gridwidth = GridBagConstraints.REMAINDER;\n        gridc.insets = new Insets(4, 4, 4, 4);\n        gridc.fill = GridBagConstraints.HORIZONTAL;\n        speedLbl = new Label(\"0.0 kB/sec\", Label.CENTER);\n        grid.setConstraints(speedLbl, gridc);\n        copyIndicator.add(speedLbl);\n        gridc.gridy = 4;\n        cancB = new Button(\"Cancel\");\n        cancB.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                if (!doneCopying) {\n                    if (copyThread != null)\n                        copyThread.stop();\n                    if (mRemoteFileBrowser != null)\n                        mRemoteFileBrowser.abort();\n                }\n                copyIndicator.setVisible(false);\n            }\n        });\n        gridc.fill = GridBagConstraints.NONE;\n        gridc.gridwidth = GridBagConstraints.REMAINDER;\n        gridc.anchor = GridBagConstraints.CENTER;\n        gridc.ipady = 2;\n        gridc.ipadx = 2;\n        grid.setConstraints(cancB, gridc);\n        copyIndicator.add(cancB);\n        AWTConvenience.setBackgroundOfChildren(copyIndicator);\n        Dimension d = speedLbl.getSize();\n        d.width += d.width * 2;\n        speedLbl.setSize(d);\n        sizeLbl.setSize(d);\n        copyIndicator.setResizable(true);\n        copyIndicator.pack();\n        AWTConvenience.placeDialog(copyIndicator);\n    }\n\n    public void run() {\n        setupDialog();\n        // copyThread = new Thread(new Runnable() {\n        copyThread = new Thread(SSHSCPPanel.getThreadGroup(), new // JH_Mod\n        Runnable() {\n\n            public void run() {\n                try {\n                    if (toRemote) {\n                        mRemoteFileBrowser.putFiles(SSHSCPGUIThread.this, mRemoteFileDisplay, mLocalFileDisplay, isBinary);\n                    } else {\n                        mRemoteFileBrowser.getFiles(SSHSCPGUIThread.this, mRemoteFileDisplay, mLocalFileDisplay, isBinary);\n                    }\n                    ////scp = new SSHSCP(remoteHost, remotePort,\n                    ////\t\tauthenticator, new File(curDir), recursive,\n                    ////\t\tfalse);\n                    ////scp.setClientUser(mainUser);\n                    ////scp.setInteractor(interactor);\n                    ////scp.setIndicator(SSHSCPGUIThread.this);\n                    ////if (toRemote) {\n                    ////\tscp.copyToRemote(localFileList, remoteFile);\n                    ////} else {\n                    ////\tscp.copyToLocal(localFileList, remoteFile);\n                    ///}\n                    copyThread.setPriority(Thread.NORM_PRIORITY);\n                    Toolkit.getDefaultToolkit().beep();\n                } catch (Exception e) {\n                    //TODO:\n                    ////interactor.alert(\"SCP Error: \" + e.getMessage());\n                    System.out.println(\"SCP Error:\");\n                    e.printStackTrace();\n                }\n                nameLbl.setText(\"Copied \" + fileCnt + \" file\" + (fileCnt != 1 ? \"s\" : \"\") + \".\");\n                double kSize = (double) totTransSize / 1024;\n                sizeLbl.setText(round(kSize) + \" kB\");\n                doneCopying = true;\n                cancB.setLabel(\"Done\");\n                mRefreshDialog.refresh();\n                AWTConvenience.setKeyListenerOfChildren(copyIndicator, new AWTConvenience.OKCancelAdapter(cancB, cancB), null);\n            }\n        });\n        if (background) {\n            copyThread.setPriority(Thread.MIN_PRIORITY);\n        }\n        copyThread.start();\n        copyIndicator.setVisible(true);\n    }\n\n    public static String[] spaceSplit(String str) {\n        if (str == null || str.length() <= 0)\n            return null;\n        int l = 0, r, cnt = 0;\n        String[] list = new String[str.length() / 2];\n        boolean lastIsQuoted = false;\n        str = str.trim();\n        while ((r = str.indexOf(' ', l)) >= 0) {\n            if (str.charAt(l) == '\"') {\n                l += 1;\n                r = str.indexOf('\"', l);\n                if (r == -1)\n                    return null;\n            }\n            String name = str.substring(l, r);\n            if (name.endsWith(File.separator))\n                name = name.substring(0, name.length() - 1);\n            list[cnt++] = name;\n            l = r;\n            do {\n                l++;\n                if (l == str.length()) {\n                    lastIsQuoted = true;\n                    break;\n                }\n            } while (str.charAt(l) == ' ');\n        }\n        if (!lastIsQuoted) {\n            if (str.charAt(l) == '\"') {\n                l += 1;\n                r = str.indexOf('\"', l);\n                if (r == -1)\n                    return null;\n            }\n            String name = str.substring(l);\n            if (name.endsWith(File.separator))\n                name = name.substring(0, name.length() - 1);\n            list[cnt++] = name;\n        }\n        for (int i = 0; i < cnt; i++) {\n            if (list[i].endsWith(\"\\\"\")) {\n                list[i] = list[i].substring(0, list[i].length() - 1);\n            }\n        }\n        String[] tmp = list;\n        list = new String[cnt];\n        System.arraycopy(tmp, 0, list, 0, cnt);\n        return list;\n    }\n\n    public static String[] starExpand(String[] fileList, String curDir) {\n        int i, j, n, cnt = 0;\n        // !!! Ouch...\n        String[] newList = new String[4096];\n        String[] curDirList = (new File(curDir)).list();\n        String path, curFile;\n        for (i = 0; i < fileList.length; i++) {\n            curFile = fileList[i];\n            path = \"\";\n            n = curFile.indexOf('*');\n            if (n == -1) {\n                cnt = addUnique(newList, curFile, cnt);\n                continue;\n            }\n            String[] dirList;\n            File f = new File(curFile);\n            if (!f.isAbsolute()) {\n                dirList = curDirList;\n            } else {\n                String dir = f.getParent();\n                if (dir == null)\n                    // !!! Ouch...\n                    dir = new String(File.separator);\n                dirList = (new File(dir)).list();\n                curFile = f.getName();\n                path = dir + File.separator;\n                n = curFile.indexOf('*');\n            }\n            String pre = curFile.substring(0, n);\n            String post = curFile.substring(n + 1);\n            for (j = 0; j < dirList.length; j++) {\n                String name = dirList[j];\n                if (name.startsWith(pre) && name.endsWith(post)) {\n                    cnt = addUnique(newList, path + name, cnt);\n                }\n            }\n        }\n        String[] tmp = newList;\n        newList = new String[cnt];\n        System.arraycopy(tmp, 0, newList, 0, cnt);\n        return newList;\n    }\n\n    static int addUnique(String[] list, String str, int last) {\n        int i;\n        for (i = 0; i < last; i++) if (list[i].equals(str))\n            break;\n        if (i == last)\n            list[last++] = str;\n        return last;\n    }\n\n    public void connected(String server) {\n        nameLbl.setText(\"...connected\");\n    }\n\n    public void startFile(String file, long size) {\n        double kSize = (double) size / 1024;\n        sizeLbl.setText(round(kSize) + \" kB\");\n        nameLbl.setText(file);\n        if (toRemote) {\n            srcLbl.setText(cutName(\"localhost:\" + file, 32));\n        } else {\n            dstLbl.setText(cutName(\"localhost:\" + file, 32));\n        }\n        progress.setMax(size, true);\n        if (startTime == 0)\n            startTime = System.currentTimeMillis();\n        curFileSize = size;\n        fileTransSize = 0;\n        fileCnt++;\n    }\n\n    public void startDir(String file) {\n        if (startTime == 0)\n            startTime = System.currentTimeMillis();\n        if (file.length() > curDir.length())\n            file = file.substring(curDir.length());\n        if (toRemote) {\n            srcLbl.setText(cutName(\"localhost:\" + file, 32));\n        } else {\n            dstLbl.setText(cutName(\"localhost:\" + file, 32));\n        }\n    }\n\n    public void endFile() {\n        progress.setValue(curFileSize, true);\n    }\n\n    public void endDir() {\n    }\n\n    public void progress(long size) {\n        totTransSize += size;\n        fileTransSize += size;\n        if ((curFileSize > 0) && ((((totTransSize - lastSize) * 100) / curFileSize) >= 1)) {\n            progress.setValue(fileTransSize, !background);\n            long now = System.currentTimeMillis();\n            long totSec = ((now - startTime) / 1000);\n            double rate = (totSec != 0 ? (((double) totTransSize / 1024) / totSec) : 0.0);\n            totSec = (now - lastTime);\n            if (totSec != 0) {\n                double rate2 = ((double) (totTransSize - lastSize) / 1024) / totSec;\n                rate = (rate + rate2) / 2.0;\n            }\n            speedLbl.setText(\"\" + round(rate) + \" kB/sec\");\n            lastSize = totTransSize;\n            lastTime = now;\n        }\n    }\n\n    double round(double val) {\n        val = val * 10.0;\n        val = Math.floor(val);\n        val = val / 10.0;\n        return val;\n    }\n\n    String cutName(String name, int len) {\n        if (name.length() > len) {\n            len -= 3;\n            String pre = name.substring(0, len / 2);\n            String suf = name.substring(name.length() - (len / 2));\n            name = pre + \"...\" + suf;\n        }\n        return name;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHSCPGUIThreadTest1.java",
		"test_prompt": "// SSHSCPGUIThreadTest1.java\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.File;\nimport com.gotoservers.ftp.RemoteFileBrowser;\nimport com.isnetworks.ssh.FileDisplay;\nimport mindbright.gui.ProgressBar;\nimport mindbright.util.AWTConvenience;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SSHSCPGUIThread}.\n* It contains ten unit test cases for the {@link SSHSCPGUIThread#starExpand(String[], String)} method.\n*/\nclass SSHSCPGUIThreadTest1 {"
	},
	{
		"original_code": "// SSHMiscDialogs.java\n/**\n * ***************************************************************************\n *\n *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.\n *                  www.mindbright.se, info@mindbright.se\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * ****************************************************************************\n *  $Author: webjabber $\n *  $Date: 2006/06/13 18:43:42 $\n *  $Name:  $\n * ****************************************************************************\n *\n *  Modified by ISNetworks\n *\n * ***************************************************************************\n */\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport mindbright.util.AWTConvenience;\n\npublic final class SSHMiscDialogs {\n\n    private static Dialog alertDialog = null;\n\n    private static Label alertLabel;\n\n    private static Button okAlertBut;\n\n    public static void alert(String title, String message, Frame parent) {\n        if (alertDialog == null) {\n            alertDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            alertDialog.setLayout(grid);\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.weightx = 1.0;\n            gridc.weighty = 1.0;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            alertLabel = new Label();\n            grid.setConstraints(alertLabel, gridc);\n            alertDialog.add(alertLabel);\n            okAlertBut = new Button(\"OK\");\n            okAlertBut.addActionListener(new AWTConvenience.CloseAction(alertDialog));\n            gridc.fill = GridBagConstraints.NONE;\n            gridc.gridy = 1;\n            grid.setConstraints(okAlertBut, gridc);\n            alertDialog.add(okAlertBut);\n            alertDialog.addWindowListener(new AWTConvenience.CloseAdapter(okAlertBut));\n            AWTConvenience.setBackgroundOfChildren(alertDialog);\n            alertDialog.setResizable(true);\n        }\n        alertDialog.setTitle(title);\n        alertDialog.remove(alertLabel);\n        alertLabel.setText(message);\n        alertDialog.add(alertLabel);\n        alertDialog.pack();\n        AWTConvenience.placeDialog(alertDialog);\n        okAlertBut.requestFocus();\n        alertDialog.setVisible(true);\n    }\n\n    /**\n     * Original method\n     */\n    public static String password(String title, String message, Frame parent) {\n        return password(title, message, parent, '*', \"\", \"Password:\");\n    }\n\n    /**\n     * Create a dialog box with a title, a text field, and label for the text field\n     */\n    public static String textfield(String title, String message, Frame parent) {\n        return password(title, \"\", parent, (char) 0, \"\", message);\n    }\n\n    /**\n     * Create a dialog box with a title, a text field with a default value, and label for the text field\n     */\n    public static String textfield(String title, String message, Frame parent, String defaultValue) {\n        return password(title, \"\", parent, (char) 0, defaultValue, message);\n    }\n\n    private static Dialog passwordDialog = null;\n\n    private static Label pwdMsgLabel;\n\n    private static Label pwdTextBoxLabel;\n\n    private static String pwdAnswer;\n\n    private static TextField pwdPassword;\n\n    public static String password(String title, String message, Frame parent, char echo, String defaultValue, String textBoxLabel) {\n        if (passwordDialog == null) {\n            passwordDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            passwordDialog.setLayout(grid);\n            Label lbl;\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            pwdMsgLabel = new Label();\n            grid.setConstraints(pwdMsgLabel, gridc);\n            passwordDialog.add(pwdMsgLabel);\n            gridc.gridy = 1;\n            gridc.gridwidth = 1;\n            gridc.anchor = GridBagConstraints.WEST;\n            pwdTextBoxLabel = new Label(\"Password:\");\n            grid.setConstraints(pwdTextBoxLabel, gridc);\n            passwordDialog.add(pwdTextBoxLabel);\n            pwdPassword = new TextField();\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(pwdPassword, gridc);\n            passwordDialog.add(pwdPassword);\n            Panel bp = new Panel(new FlowLayout());\n            Button okBut, cancBut;\n            bp.add(okBut = new Button(\"OK\"));\n            okBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"OK\")) {\n                        pwdAnswer = pwdPassword.getText();\n                    } else {\n                        pwdAnswer = null;\n                    }\n                    passwordDialog.setVisible(false);\n                }\n            });\n            bp.add(cancBut = new Button(\"Cancel\"));\n            cancBut.addActionListener(al);\n            gridc.gridy = 2;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            passwordDialog.add(bp);\n            passwordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));\n            AWTConvenience.setKeyListenerOfChildren(passwordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);\n            AWTConvenience.setBackgroundOfChildren(passwordDialog);\n            passwordDialog.setResizable(true);\n        }\n        passwordDialog.setTitle(title);\n        passwordDialog.remove(pwdMsgLabel);\n        pwdMsgLabel.setText(message);\n        pwdPassword.setText(defaultValue);\n        pwdPassword.setEchoChar(echo);\n        pwdPassword.setColumns(40);\n        passwordDialog.add(pwdMsgLabel);\n        passwordDialog.pack();\n        pwdTextBoxLabel.setText(textBoxLabel);\n        passwordDialog.setSize(450, 150);\n        AWTConvenience.placeDialog(passwordDialog);\n        passwordDialog.setVisible(true);\n        return pwdAnswer;\n    }\n\n    private static Dialog setPasswordDialog = null;\n\n    private static Label setPwdMsgLabel;\n\n    private static String setPwdAnswer;\n\n    private static TextField setPwdText, setPwdText2;\n\n    public static String setPassword(String title, String message, Frame parent) {\n        if (setPasswordDialog == null) {\n            setPasswordDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            setPasswordDialog.setLayout(grid);\n            Label lbl;\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            setPwdMsgLabel = new Label();\n            grid.setConstraints(setPwdMsgLabel, gridc);\n            setPasswordDialog.add(setPwdMsgLabel);\n            gridc.gridy = 1;\n            gridc.gridwidth = 1;\n            gridc.anchor = GridBagConstraints.WEST;\n            lbl = new Label(\"Password:\");\n            grid.setConstraints(lbl, gridc);\n            setPasswordDialog.add(lbl);\n            setPwdText = new TextField(\"\", 12);\n            grid.setConstraints(setPwdText, gridc);\n            setPwdText.setEchoChar('*');\n            setPasswordDialog.add(setPwdText);\n            gridc.gridy = 2;\n            lbl = new Label(\"Password again:\");\n            grid.setConstraints(lbl, gridc);\n            setPasswordDialog.add(lbl);\n            setPwdText2 = new TextField(\"\", 12);\n            grid.setConstraints(setPwdText2, gridc);\n            setPwdText2.setEchoChar('*');\n            setPasswordDialog.add(setPwdText2);\n            Panel bp = new Panel(new FlowLayout());\n            Button okBut, cancBut;\n            bp.add(okBut = new Button(\"OK\"));\n            okBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"OK\")) {\n                        setPwdAnswer = setPwdText.getText();\n                        if (!setPwdAnswer.equals(setPwdText2.getText())) {\n                            setPwdText.setText(\"\");\n                            setPwdText2.setText(\"\");\n                            return;\n                        }\n                    } else {\n                        setPwdAnswer = null;\n                    }\n                    setPasswordDialog.setVisible(false);\n                }\n            });\n            bp.add(cancBut = new Button(\"Cancel\"));\n            cancBut.addActionListener(al);\n            gridc.gridy = 3;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            setPasswordDialog.add(bp);\n            setPasswordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));\n            AWTConvenience.setKeyListenerOfChildren(setPasswordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);\n            AWTConvenience.setBackgroundOfChildren(setPasswordDialog);\n            setPasswordDialog.setResizable(true);\n        }\n        setPasswordDialog.setTitle(title);\n        setPasswordDialog.remove(setPwdMsgLabel);\n        setPwdMsgLabel.setText(message);\n        setPwdText.setText(\"\");\n        setPwdText2.setText(\"\");\n        setPasswordDialog.add(setPwdMsgLabel);\n        setPasswordDialog.pack();\n        AWTConvenience.placeDialog(setPasswordDialog);\n        setPasswordDialog.setVisible(true);\n        return setPwdAnswer;\n    }\n\n    private static Dialog confirmDialog = null;\n\n    private static Label confirmLabel;\n\n    private static boolean confirmRet;\n\n    private static Button yesBut, noBut;\n\n    public static boolean confirm(String title, String message, boolean defAnswer, Frame parent) {\n        if (confirmDialog == null) {\n            confirmDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            confirmDialog.setLayout(grid);\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            confirmLabel = new Label();\n            grid.setConstraints(confirmLabel, gridc);\n            confirmDialog.add(confirmLabel);\n            Panel bp = new Panel(new FlowLayout());\n            bp.add(yesBut = new Button(\"Yes\"));\n            yesBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"Yes\"))\n                        confirmRet = true;\n                    else\n                        confirmRet = false;\n                    confirmDialog.setVisible(false);\n                }\n            });\n            bp.add(noBut = new Button(\"No\"));\n            noBut.addActionListener(al);\n            gridc.gridy = 1;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            confirmDialog.add(bp);\n            confirmDialog.addWindowListener(new AWTConvenience.CloseAdapter(noBut));\n            AWTConvenience.setBackgroundOfChildren(confirmDialog);\n            confirmDialog.setResizable(true);\n        }\n        confirmDialog.remove(confirmLabel);\n        confirmLabel.setText(message);\n        confirmDialog.add(confirmLabel);\n        confirmDialog.pack();\n        AWTConvenience.placeDialog(confirmDialog);\n        if (defAnswer)\n            yesBut.requestFocus();\n        else\n            noBut.requestFocus();\n        confirmDialog.setVisible(true);\n        return confirmRet;\n    }\n\n    public static void notice(String title, String text, int rows, int cols, boolean scrollbar, Frame parent) {\n        Dialog textDialog = null;\n        TextArea textArea;\n        Button okTextBut;\n        textDialog = new Dialog(parent, title, true);\n        GridBagLayout grid = new GridBagLayout();\n        GridBagConstraints gridc = new GridBagConstraints();\n        textDialog.setLayout(grid);\n        gridc.fill = GridBagConstraints.NONE;\n        gridc.gridwidth = GridBagConstraints.REMAINDER;\n        gridc.anchor = GridBagConstraints.CENTER;\n        gridc.insets = new Insets(4, 4, 4, 4);\n        textArea = new TextArea(text, rows, cols, scrollbar ? TextArea.SCROLLBARS_VERTICAL_ONLY : TextArea.SCROLLBARS_NONE);\n        grid.setConstraints(textArea, gridc);\n        textDialog.add(textArea);\n        textArea.setEditable(false);\n        okTextBut = new Button(\"OK\");\n        okTextBut.addActionListener(new AWTConvenience.CloseAction(textDialog));\n        gridc.fill = GridBagConstraints.NONE;\n        grid.setConstraints(okTextBut, gridc);\n        textDialog.add(okTextBut);\n        textDialog.addWindowListener(new AWTConvenience.CloseAdapter(okTextBut));\n        AWTConvenience.setBackgroundOfChildren(textDialog);\n        textDialog.setResizable(true);\n        textDialog.pack();\n        AWTConvenience.placeDialog(textDialog);\n        okTextBut.requestFocus();\n        textDialog.setVisible(true);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHMiscDialogsTest0.java",
		"test_prompt": "// SSHMiscDialogsTest0.java\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport mindbright.util.AWTConvenience;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SSHMiscDialogs}.\n* It contains ten unit test cases for the {@link SSHMiscDialogs#password(String, String, Frame)} method.\n*/\nclass SSHMiscDialogsTest0 {"
	},
	{
		"original_code": "// SSHMiscDialogs.java\n/**\n * ***************************************************************************\n *\n *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.\n *                  www.mindbright.se, info@mindbright.se\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * ****************************************************************************\n *  $Author: webjabber $\n *  $Date: 2006/06/13 18:43:42 $\n *  $Name:  $\n * ****************************************************************************\n *\n *  Modified by ISNetworks\n *\n * ***************************************************************************\n */\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport mindbright.util.AWTConvenience;\n\npublic final class SSHMiscDialogs {\n\n    private static Dialog alertDialog = null;\n\n    private static Label alertLabel;\n\n    private static Button okAlertBut;\n\n    public static void alert(String title, String message, Frame parent) {\n        if (alertDialog == null) {\n            alertDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            alertDialog.setLayout(grid);\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.weightx = 1.0;\n            gridc.weighty = 1.0;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            alertLabel = new Label();\n            grid.setConstraints(alertLabel, gridc);\n            alertDialog.add(alertLabel);\n            okAlertBut = new Button(\"OK\");\n            okAlertBut.addActionListener(new AWTConvenience.CloseAction(alertDialog));\n            gridc.fill = GridBagConstraints.NONE;\n            gridc.gridy = 1;\n            grid.setConstraints(okAlertBut, gridc);\n            alertDialog.add(okAlertBut);\n            alertDialog.addWindowListener(new AWTConvenience.CloseAdapter(okAlertBut));\n            AWTConvenience.setBackgroundOfChildren(alertDialog);\n            alertDialog.setResizable(true);\n        }\n        alertDialog.setTitle(title);\n        alertDialog.remove(alertLabel);\n        alertLabel.setText(message);\n        alertDialog.add(alertLabel);\n        alertDialog.pack();\n        AWTConvenience.placeDialog(alertDialog);\n        okAlertBut.requestFocus();\n        alertDialog.setVisible(true);\n    }\n\n    /**\n     * Original method\n     */\n    public static String password(String title, String message, Frame parent) {\n        return password(title, message, parent, '*', \"\", \"Password:\");\n    }\n\n    /**\n     * Create a dialog box with a title, a text field, and label for the text field\n     */\n    public static String textfield(String title, String message, Frame parent) {\n        return password(title, \"\", parent, (char) 0, \"\", message);\n    }\n\n    /**\n     * Create a dialog box with a title, a text field with a default value, and label for the text field\n     */\n    public static String textfield(String title, String message, Frame parent, String defaultValue) {\n        return password(title, \"\", parent, (char) 0, defaultValue, message);\n    }\n\n    private static Dialog passwordDialog = null;\n\n    private static Label pwdMsgLabel;\n\n    private static Label pwdTextBoxLabel;\n\n    private static String pwdAnswer;\n\n    private static TextField pwdPassword;\n\n    public static String password(String title, String message, Frame parent, char echo, String defaultValue, String textBoxLabel) {\n        if (passwordDialog == null) {\n            passwordDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            passwordDialog.setLayout(grid);\n            Label lbl;\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            pwdMsgLabel = new Label();\n            grid.setConstraints(pwdMsgLabel, gridc);\n            passwordDialog.add(pwdMsgLabel);\n            gridc.gridy = 1;\n            gridc.gridwidth = 1;\n            gridc.anchor = GridBagConstraints.WEST;\n            pwdTextBoxLabel = new Label(\"Password:\");\n            grid.setConstraints(pwdTextBoxLabel, gridc);\n            passwordDialog.add(pwdTextBoxLabel);\n            pwdPassword = new TextField();\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(pwdPassword, gridc);\n            passwordDialog.add(pwdPassword);\n            Panel bp = new Panel(new FlowLayout());\n            Button okBut, cancBut;\n            bp.add(okBut = new Button(\"OK\"));\n            okBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"OK\")) {\n                        pwdAnswer = pwdPassword.getText();\n                    } else {\n                        pwdAnswer = null;\n                    }\n                    passwordDialog.setVisible(false);\n                }\n            });\n            bp.add(cancBut = new Button(\"Cancel\"));\n            cancBut.addActionListener(al);\n            gridc.gridy = 2;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            passwordDialog.add(bp);\n            passwordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));\n            AWTConvenience.setKeyListenerOfChildren(passwordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);\n            AWTConvenience.setBackgroundOfChildren(passwordDialog);\n            passwordDialog.setResizable(true);\n        }\n        passwordDialog.setTitle(title);\n        passwordDialog.remove(pwdMsgLabel);\n        pwdMsgLabel.setText(message);\n        pwdPassword.setText(defaultValue);\n        pwdPassword.setEchoChar(echo);\n        pwdPassword.setColumns(40);\n        passwordDialog.add(pwdMsgLabel);\n        passwordDialog.pack();\n        pwdTextBoxLabel.setText(textBoxLabel);\n        passwordDialog.setSize(450, 150);\n        AWTConvenience.placeDialog(passwordDialog);\n        passwordDialog.setVisible(true);\n        return pwdAnswer;\n    }\n\n    private static Dialog setPasswordDialog = null;\n\n    private static Label setPwdMsgLabel;\n\n    private static String setPwdAnswer;\n\n    private static TextField setPwdText, setPwdText2;\n\n    public static String setPassword(String title, String message, Frame parent) {\n        if (setPasswordDialog == null) {\n            setPasswordDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            setPasswordDialog.setLayout(grid);\n            Label lbl;\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            setPwdMsgLabel = new Label();\n            grid.setConstraints(setPwdMsgLabel, gridc);\n            setPasswordDialog.add(setPwdMsgLabel);\n            gridc.gridy = 1;\n            gridc.gridwidth = 1;\n            gridc.anchor = GridBagConstraints.WEST;\n            lbl = new Label(\"Password:\");\n            grid.setConstraints(lbl, gridc);\n            setPasswordDialog.add(lbl);\n            setPwdText = new TextField(\"\", 12);\n            grid.setConstraints(setPwdText, gridc);\n            setPwdText.setEchoChar('*');\n            setPasswordDialog.add(setPwdText);\n            gridc.gridy = 2;\n            lbl = new Label(\"Password again:\");\n            grid.setConstraints(lbl, gridc);\n            setPasswordDialog.add(lbl);\n            setPwdText2 = new TextField(\"\", 12);\n            grid.setConstraints(setPwdText2, gridc);\n            setPwdText2.setEchoChar('*');\n            setPasswordDialog.add(setPwdText2);\n            Panel bp = new Panel(new FlowLayout());\n            Button okBut, cancBut;\n            bp.add(okBut = new Button(\"OK\"));\n            okBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"OK\")) {\n                        setPwdAnswer = setPwdText.getText();\n                        if (!setPwdAnswer.equals(setPwdText2.getText())) {\n                            setPwdText.setText(\"\");\n                            setPwdText2.setText(\"\");\n                            return;\n                        }\n                    } else {\n                        setPwdAnswer = null;\n                    }\n                    setPasswordDialog.setVisible(false);\n                }\n            });\n            bp.add(cancBut = new Button(\"Cancel\"));\n            cancBut.addActionListener(al);\n            gridc.gridy = 3;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            setPasswordDialog.add(bp);\n            setPasswordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));\n            AWTConvenience.setKeyListenerOfChildren(setPasswordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);\n            AWTConvenience.setBackgroundOfChildren(setPasswordDialog);\n            setPasswordDialog.setResizable(true);\n        }\n        setPasswordDialog.setTitle(title);\n        setPasswordDialog.remove(setPwdMsgLabel);\n        setPwdMsgLabel.setText(message);\n        setPwdText.setText(\"\");\n        setPwdText2.setText(\"\");\n        setPasswordDialog.add(setPwdMsgLabel);\n        setPasswordDialog.pack();\n        AWTConvenience.placeDialog(setPasswordDialog);\n        setPasswordDialog.setVisible(true);\n        return setPwdAnswer;\n    }\n\n    private static Dialog confirmDialog = null;\n\n    private static Label confirmLabel;\n\n    private static boolean confirmRet;\n\n    private static Button yesBut, noBut;\n\n    public static boolean confirm(String title, String message, boolean defAnswer, Frame parent) {\n        if (confirmDialog == null) {\n            confirmDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            confirmDialog.setLayout(grid);\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            confirmLabel = new Label();\n            grid.setConstraints(confirmLabel, gridc);\n            confirmDialog.add(confirmLabel);\n            Panel bp = new Panel(new FlowLayout());\n            bp.add(yesBut = new Button(\"Yes\"));\n            yesBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"Yes\"))\n                        confirmRet = true;\n                    else\n                        confirmRet = false;\n                    confirmDialog.setVisible(false);\n                }\n            });\n            bp.add(noBut = new Button(\"No\"));\n            noBut.addActionListener(al);\n            gridc.gridy = 1;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            confirmDialog.add(bp);\n            confirmDialog.addWindowListener(new AWTConvenience.CloseAdapter(noBut));\n            AWTConvenience.setBackgroundOfChildren(confirmDialog);\n            confirmDialog.setResizable(true);\n        }\n        confirmDialog.remove(confirmLabel);\n        confirmLabel.setText(message);\n        confirmDialog.add(confirmLabel);\n        confirmDialog.pack();\n        AWTConvenience.placeDialog(confirmDialog);\n        if (defAnswer)\n            yesBut.requestFocus();\n        else\n            noBut.requestFocus();\n        confirmDialog.setVisible(true);\n        return confirmRet;\n    }\n\n    public static void notice(String title, String text, int rows, int cols, boolean scrollbar, Frame parent) {\n        Dialog textDialog = null;\n        TextArea textArea;\n        Button okTextBut;\n        textDialog = new Dialog(parent, title, true);\n        GridBagLayout grid = new GridBagLayout();\n        GridBagConstraints gridc = new GridBagConstraints();\n        textDialog.setLayout(grid);\n        gridc.fill = GridBagConstraints.NONE;\n        gridc.gridwidth = GridBagConstraints.REMAINDER;\n        gridc.anchor = GridBagConstraints.CENTER;\n        gridc.insets = new Insets(4, 4, 4, 4);\n        textArea = new TextArea(text, rows, cols, scrollbar ? TextArea.SCROLLBARS_VERTICAL_ONLY : TextArea.SCROLLBARS_NONE);\n        grid.setConstraints(textArea, gridc);\n        textDialog.add(textArea);\n        textArea.setEditable(false);\n        okTextBut = new Button(\"OK\");\n        okTextBut.addActionListener(new AWTConvenience.CloseAction(textDialog));\n        gridc.fill = GridBagConstraints.NONE;\n        grid.setConstraints(okTextBut, gridc);\n        textDialog.add(okTextBut);\n        textDialog.addWindowListener(new AWTConvenience.CloseAdapter(okTextBut));\n        AWTConvenience.setBackgroundOfChildren(textDialog);\n        textDialog.setResizable(true);\n        textDialog.pack();\n        AWTConvenience.placeDialog(textDialog);\n        okTextBut.requestFocus();\n        textDialog.setVisible(true);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHMiscDialogsTest1.java",
		"test_prompt": "// SSHMiscDialogsTest1.java\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport mindbright.util.AWTConvenience;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SSHMiscDialogs}.\n* It contains ten unit test cases for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.\n*/\nclass SSHMiscDialogsTest1 {"
	},
	{
		"original_code": "// SSHMiscDialogs.java\n/**\n * ***************************************************************************\n *\n *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.\n *                  www.mindbright.se, info@mindbright.se\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * ****************************************************************************\n *  $Author: webjabber $\n *  $Date: 2006/06/13 18:43:42 $\n *  $Name:  $\n * ****************************************************************************\n *\n *  Modified by ISNetworks\n *\n * ***************************************************************************\n */\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport mindbright.util.AWTConvenience;\n\npublic final class SSHMiscDialogs {\n\n    private static Dialog alertDialog = null;\n\n    private static Label alertLabel;\n\n    private static Button okAlertBut;\n\n    public static void alert(String title, String message, Frame parent) {\n        if (alertDialog == null) {\n            alertDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            alertDialog.setLayout(grid);\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.weightx = 1.0;\n            gridc.weighty = 1.0;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            alertLabel = new Label();\n            grid.setConstraints(alertLabel, gridc);\n            alertDialog.add(alertLabel);\n            okAlertBut = new Button(\"OK\");\n            okAlertBut.addActionListener(new AWTConvenience.CloseAction(alertDialog));\n            gridc.fill = GridBagConstraints.NONE;\n            gridc.gridy = 1;\n            grid.setConstraints(okAlertBut, gridc);\n            alertDialog.add(okAlertBut);\n            alertDialog.addWindowListener(new AWTConvenience.CloseAdapter(okAlertBut));\n            AWTConvenience.setBackgroundOfChildren(alertDialog);\n            alertDialog.setResizable(true);\n        }\n        alertDialog.setTitle(title);\n        alertDialog.remove(alertLabel);\n        alertLabel.setText(message);\n        alertDialog.add(alertLabel);\n        alertDialog.pack();\n        AWTConvenience.placeDialog(alertDialog);\n        okAlertBut.requestFocus();\n        alertDialog.setVisible(true);\n    }\n\n    /**\n     * Original method\n     */\n    public static String password(String title, String message, Frame parent) {\n        return password(title, message, parent, '*', \"\", \"Password:\");\n    }\n\n    /**\n     * Create a dialog box with a title, a text field, and label for the text field\n     */\n    public static String textfield(String title, String message, Frame parent) {\n        return password(title, \"\", parent, (char) 0, \"\", message);\n    }\n\n    /**\n     * Create a dialog box with a title, a text field with a default value, and label for the text field\n     */\n    public static String textfield(String title, String message, Frame parent, String defaultValue) {\n        return password(title, \"\", parent, (char) 0, defaultValue, message);\n    }\n\n    private static Dialog passwordDialog = null;\n\n    private static Label pwdMsgLabel;\n\n    private static Label pwdTextBoxLabel;\n\n    private static String pwdAnswer;\n\n    private static TextField pwdPassword;\n\n    public static String password(String title, String message, Frame parent, char echo, String defaultValue, String textBoxLabel) {\n        if (passwordDialog == null) {\n            passwordDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            passwordDialog.setLayout(grid);\n            Label lbl;\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            pwdMsgLabel = new Label();\n            grid.setConstraints(pwdMsgLabel, gridc);\n            passwordDialog.add(pwdMsgLabel);\n            gridc.gridy = 1;\n            gridc.gridwidth = 1;\n            gridc.anchor = GridBagConstraints.WEST;\n            pwdTextBoxLabel = new Label(\"Password:\");\n            grid.setConstraints(pwdTextBoxLabel, gridc);\n            passwordDialog.add(pwdTextBoxLabel);\n            pwdPassword = new TextField();\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(pwdPassword, gridc);\n            passwordDialog.add(pwdPassword);\n            Panel bp = new Panel(new FlowLayout());\n            Button okBut, cancBut;\n            bp.add(okBut = new Button(\"OK\"));\n            okBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"OK\")) {\n                        pwdAnswer = pwdPassword.getText();\n                    } else {\n                        pwdAnswer = null;\n                    }\n                    passwordDialog.setVisible(false);\n                }\n            });\n            bp.add(cancBut = new Button(\"Cancel\"));\n            cancBut.addActionListener(al);\n            gridc.gridy = 2;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            passwordDialog.add(bp);\n            passwordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));\n            AWTConvenience.setKeyListenerOfChildren(passwordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);\n            AWTConvenience.setBackgroundOfChildren(passwordDialog);\n            passwordDialog.setResizable(true);\n        }\n        passwordDialog.setTitle(title);\n        passwordDialog.remove(pwdMsgLabel);\n        pwdMsgLabel.setText(message);\n        pwdPassword.setText(defaultValue);\n        pwdPassword.setEchoChar(echo);\n        pwdPassword.setColumns(40);\n        passwordDialog.add(pwdMsgLabel);\n        passwordDialog.pack();\n        pwdTextBoxLabel.setText(textBoxLabel);\n        passwordDialog.setSize(450, 150);\n        AWTConvenience.placeDialog(passwordDialog);\n        passwordDialog.setVisible(true);\n        return pwdAnswer;\n    }\n\n    private static Dialog setPasswordDialog = null;\n\n    private static Label setPwdMsgLabel;\n\n    private static String setPwdAnswer;\n\n    private static TextField setPwdText, setPwdText2;\n\n    public static String setPassword(String title, String message, Frame parent) {\n        if (setPasswordDialog == null) {\n            setPasswordDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            setPasswordDialog.setLayout(grid);\n            Label lbl;\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            setPwdMsgLabel = new Label();\n            grid.setConstraints(setPwdMsgLabel, gridc);\n            setPasswordDialog.add(setPwdMsgLabel);\n            gridc.gridy = 1;\n            gridc.gridwidth = 1;\n            gridc.anchor = GridBagConstraints.WEST;\n            lbl = new Label(\"Password:\");\n            grid.setConstraints(lbl, gridc);\n            setPasswordDialog.add(lbl);\n            setPwdText = new TextField(\"\", 12);\n            grid.setConstraints(setPwdText, gridc);\n            setPwdText.setEchoChar('*');\n            setPasswordDialog.add(setPwdText);\n            gridc.gridy = 2;\n            lbl = new Label(\"Password again:\");\n            grid.setConstraints(lbl, gridc);\n            setPasswordDialog.add(lbl);\n            setPwdText2 = new TextField(\"\", 12);\n            grid.setConstraints(setPwdText2, gridc);\n            setPwdText2.setEchoChar('*');\n            setPasswordDialog.add(setPwdText2);\n            Panel bp = new Panel(new FlowLayout());\n            Button okBut, cancBut;\n            bp.add(okBut = new Button(\"OK\"));\n            okBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"OK\")) {\n                        setPwdAnswer = setPwdText.getText();\n                        if (!setPwdAnswer.equals(setPwdText2.getText())) {\n                            setPwdText.setText(\"\");\n                            setPwdText2.setText(\"\");\n                            return;\n                        }\n                    } else {\n                        setPwdAnswer = null;\n                    }\n                    setPasswordDialog.setVisible(false);\n                }\n            });\n            bp.add(cancBut = new Button(\"Cancel\"));\n            cancBut.addActionListener(al);\n            gridc.gridy = 3;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            setPasswordDialog.add(bp);\n            setPasswordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));\n            AWTConvenience.setKeyListenerOfChildren(setPasswordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);\n            AWTConvenience.setBackgroundOfChildren(setPasswordDialog);\n            setPasswordDialog.setResizable(true);\n        }\n        setPasswordDialog.setTitle(title);\n        setPasswordDialog.remove(setPwdMsgLabel);\n        setPwdMsgLabel.setText(message);\n        setPwdText.setText(\"\");\n        setPwdText2.setText(\"\");\n        setPasswordDialog.add(setPwdMsgLabel);\n        setPasswordDialog.pack();\n        AWTConvenience.placeDialog(setPasswordDialog);\n        setPasswordDialog.setVisible(true);\n        return setPwdAnswer;\n    }\n\n    private static Dialog confirmDialog = null;\n\n    private static Label confirmLabel;\n\n    private static boolean confirmRet;\n\n    private static Button yesBut, noBut;\n\n    public static boolean confirm(String title, String message, boolean defAnswer, Frame parent) {\n        if (confirmDialog == null) {\n            confirmDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            confirmDialog.setLayout(grid);\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            confirmLabel = new Label();\n            grid.setConstraints(confirmLabel, gridc);\n            confirmDialog.add(confirmLabel);\n            Panel bp = new Panel(new FlowLayout());\n            bp.add(yesBut = new Button(\"Yes\"));\n            yesBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"Yes\"))\n                        confirmRet = true;\n                    else\n                        confirmRet = false;\n                    confirmDialog.setVisible(false);\n                }\n            });\n            bp.add(noBut = new Button(\"No\"));\n            noBut.addActionListener(al);\n            gridc.gridy = 1;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            confirmDialog.add(bp);\n            confirmDialog.addWindowListener(new AWTConvenience.CloseAdapter(noBut));\n            AWTConvenience.setBackgroundOfChildren(confirmDialog);\n            confirmDialog.setResizable(true);\n        }\n        confirmDialog.remove(confirmLabel);\n        confirmLabel.setText(message);\n        confirmDialog.add(confirmLabel);\n        confirmDialog.pack();\n        AWTConvenience.placeDialog(confirmDialog);\n        if (defAnswer)\n            yesBut.requestFocus();\n        else\n            noBut.requestFocus();\n        confirmDialog.setVisible(true);\n        return confirmRet;\n    }\n\n    public static void notice(String title, String text, int rows, int cols, boolean scrollbar, Frame parent) {\n        Dialog textDialog = null;\n        TextArea textArea;\n        Button okTextBut;\n        textDialog = new Dialog(parent, title, true);\n        GridBagLayout grid = new GridBagLayout();\n        GridBagConstraints gridc = new GridBagConstraints();\n        textDialog.setLayout(grid);\n        gridc.fill = GridBagConstraints.NONE;\n        gridc.gridwidth = GridBagConstraints.REMAINDER;\n        gridc.anchor = GridBagConstraints.CENTER;\n        gridc.insets = new Insets(4, 4, 4, 4);\n        textArea = new TextArea(text, rows, cols, scrollbar ? TextArea.SCROLLBARS_VERTICAL_ONLY : TextArea.SCROLLBARS_NONE);\n        grid.setConstraints(textArea, gridc);\n        textDialog.add(textArea);\n        textArea.setEditable(false);\n        okTextBut = new Button(\"OK\");\n        okTextBut.addActionListener(new AWTConvenience.CloseAction(textDialog));\n        gridc.fill = GridBagConstraints.NONE;\n        grid.setConstraints(okTextBut, gridc);\n        textDialog.add(okTextBut);\n        textDialog.addWindowListener(new AWTConvenience.CloseAdapter(okTextBut));\n        AWTConvenience.setBackgroundOfChildren(textDialog);\n        textDialog.setResizable(true);\n        textDialog.pack();\n        AWTConvenience.placeDialog(textDialog);\n        okTextBut.requestFocus();\n        textDialog.setVisible(true);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHMiscDialogsTest2.java",
		"test_prompt": "// SSHMiscDialogsTest2.java\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport mindbright.util.AWTConvenience;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SSHMiscDialogs}.\n* It contains ten unit test cases for the {@link SSHMiscDialogs#textfield(String, String, Frame, String)} method.\n*/\nclass SSHMiscDialogsTest2 {"
	},
	{
		"original_code": "// SSHMiscDialogs.java\n/**\n * ***************************************************************************\n *\n *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.\n *                  www.mindbright.se, info@mindbright.se\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * ****************************************************************************\n *  $Author: webjabber $\n *  $Date: 2006/06/13 18:43:42 $\n *  $Name:  $\n * ****************************************************************************\n *\n *  Modified by ISNetworks\n *\n * ***************************************************************************\n */\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport mindbright.util.AWTConvenience;\n\npublic final class SSHMiscDialogs {\n\n    private static Dialog alertDialog = null;\n\n    private static Label alertLabel;\n\n    private static Button okAlertBut;\n\n    public static void alert(String title, String message, Frame parent) {\n        if (alertDialog == null) {\n            alertDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            alertDialog.setLayout(grid);\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.weightx = 1.0;\n            gridc.weighty = 1.0;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            alertLabel = new Label();\n            grid.setConstraints(alertLabel, gridc);\n            alertDialog.add(alertLabel);\n            okAlertBut = new Button(\"OK\");\n            okAlertBut.addActionListener(new AWTConvenience.CloseAction(alertDialog));\n            gridc.fill = GridBagConstraints.NONE;\n            gridc.gridy = 1;\n            grid.setConstraints(okAlertBut, gridc);\n            alertDialog.add(okAlertBut);\n            alertDialog.addWindowListener(new AWTConvenience.CloseAdapter(okAlertBut));\n            AWTConvenience.setBackgroundOfChildren(alertDialog);\n            alertDialog.setResizable(true);\n        }\n        alertDialog.setTitle(title);\n        alertDialog.remove(alertLabel);\n        alertLabel.setText(message);\n        alertDialog.add(alertLabel);\n        alertDialog.pack();\n        AWTConvenience.placeDialog(alertDialog);\n        okAlertBut.requestFocus();\n        alertDialog.setVisible(true);\n    }\n\n    /**\n     * Original method\n     */\n    public static String password(String title, String message, Frame parent) {\n        return password(title, message, parent, '*', \"\", \"Password:\");\n    }\n\n    /**\n     * Create a dialog box with a title, a text field, and label for the text field\n     */\n    public static String textfield(String title, String message, Frame parent) {\n        return password(title, \"\", parent, (char) 0, \"\", message);\n    }\n\n    /**\n     * Create a dialog box with a title, a text field with a default value, and label for the text field\n     */\n    public static String textfield(String title, String message, Frame parent, String defaultValue) {\n        return password(title, \"\", parent, (char) 0, defaultValue, message);\n    }\n\n    private static Dialog passwordDialog = null;\n\n    private static Label pwdMsgLabel;\n\n    private static Label pwdTextBoxLabel;\n\n    private static String pwdAnswer;\n\n    private static TextField pwdPassword;\n\n    public static String password(String title, String message, Frame parent, char echo, String defaultValue, String textBoxLabel) {\n        if (passwordDialog == null) {\n            passwordDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            passwordDialog.setLayout(grid);\n            Label lbl;\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            pwdMsgLabel = new Label();\n            grid.setConstraints(pwdMsgLabel, gridc);\n            passwordDialog.add(pwdMsgLabel);\n            gridc.gridy = 1;\n            gridc.gridwidth = 1;\n            gridc.anchor = GridBagConstraints.WEST;\n            pwdTextBoxLabel = new Label(\"Password:\");\n            grid.setConstraints(pwdTextBoxLabel, gridc);\n            passwordDialog.add(pwdTextBoxLabel);\n            pwdPassword = new TextField();\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(pwdPassword, gridc);\n            passwordDialog.add(pwdPassword);\n            Panel bp = new Panel(new FlowLayout());\n            Button okBut, cancBut;\n            bp.add(okBut = new Button(\"OK\"));\n            okBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"OK\")) {\n                        pwdAnswer = pwdPassword.getText();\n                    } else {\n                        pwdAnswer = null;\n                    }\n                    passwordDialog.setVisible(false);\n                }\n            });\n            bp.add(cancBut = new Button(\"Cancel\"));\n            cancBut.addActionListener(al);\n            gridc.gridy = 2;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            passwordDialog.add(bp);\n            passwordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));\n            AWTConvenience.setKeyListenerOfChildren(passwordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);\n            AWTConvenience.setBackgroundOfChildren(passwordDialog);\n            passwordDialog.setResizable(true);\n        }\n        passwordDialog.setTitle(title);\n        passwordDialog.remove(pwdMsgLabel);\n        pwdMsgLabel.setText(message);\n        pwdPassword.setText(defaultValue);\n        pwdPassword.setEchoChar(echo);\n        pwdPassword.setColumns(40);\n        passwordDialog.add(pwdMsgLabel);\n        passwordDialog.pack();\n        pwdTextBoxLabel.setText(textBoxLabel);\n        passwordDialog.setSize(450, 150);\n        AWTConvenience.placeDialog(passwordDialog);\n        passwordDialog.setVisible(true);\n        return pwdAnswer;\n    }\n\n    private static Dialog setPasswordDialog = null;\n\n    private static Label setPwdMsgLabel;\n\n    private static String setPwdAnswer;\n\n    private static TextField setPwdText, setPwdText2;\n\n    public static String setPassword(String title, String message, Frame parent) {\n        if (setPasswordDialog == null) {\n            setPasswordDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            setPasswordDialog.setLayout(grid);\n            Label lbl;\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            setPwdMsgLabel = new Label();\n            grid.setConstraints(setPwdMsgLabel, gridc);\n            setPasswordDialog.add(setPwdMsgLabel);\n            gridc.gridy = 1;\n            gridc.gridwidth = 1;\n            gridc.anchor = GridBagConstraints.WEST;\n            lbl = new Label(\"Password:\");\n            grid.setConstraints(lbl, gridc);\n            setPasswordDialog.add(lbl);\n            setPwdText = new TextField(\"\", 12);\n            grid.setConstraints(setPwdText, gridc);\n            setPwdText.setEchoChar('*');\n            setPasswordDialog.add(setPwdText);\n            gridc.gridy = 2;\n            lbl = new Label(\"Password again:\");\n            grid.setConstraints(lbl, gridc);\n            setPasswordDialog.add(lbl);\n            setPwdText2 = new TextField(\"\", 12);\n            grid.setConstraints(setPwdText2, gridc);\n            setPwdText2.setEchoChar('*');\n            setPasswordDialog.add(setPwdText2);\n            Panel bp = new Panel(new FlowLayout());\n            Button okBut, cancBut;\n            bp.add(okBut = new Button(\"OK\"));\n            okBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"OK\")) {\n                        setPwdAnswer = setPwdText.getText();\n                        if (!setPwdAnswer.equals(setPwdText2.getText())) {\n                            setPwdText.setText(\"\");\n                            setPwdText2.setText(\"\");\n                            return;\n                        }\n                    } else {\n                        setPwdAnswer = null;\n                    }\n                    setPasswordDialog.setVisible(false);\n                }\n            });\n            bp.add(cancBut = new Button(\"Cancel\"));\n            cancBut.addActionListener(al);\n            gridc.gridy = 3;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            setPasswordDialog.add(bp);\n            setPasswordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));\n            AWTConvenience.setKeyListenerOfChildren(setPasswordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);\n            AWTConvenience.setBackgroundOfChildren(setPasswordDialog);\n            setPasswordDialog.setResizable(true);\n        }\n        setPasswordDialog.setTitle(title);\n        setPasswordDialog.remove(setPwdMsgLabel);\n        setPwdMsgLabel.setText(message);\n        setPwdText.setText(\"\");\n        setPwdText2.setText(\"\");\n        setPasswordDialog.add(setPwdMsgLabel);\n        setPasswordDialog.pack();\n        AWTConvenience.placeDialog(setPasswordDialog);\n        setPasswordDialog.setVisible(true);\n        return setPwdAnswer;\n    }\n\n    private static Dialog confirmDialog = null;\n\n    private static Label confirmLabel;\n\n    private static boolean confirmRet;\n\n    private static Button yesBut, noBut;\n\n    public static boolean confirm(String title, String message, boolean defAnswer, Frame parent) {\n        if (confirmDialog == null) {\n            confirmDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            confirmDialog.setLayout(grid);\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            confirmLabel = new Label();\n            grid.setConstraints(confirmLabel, gridc);\n            confirmDialog.add(confirmLabel);\n            Panel bp = new Panel(new FlowLayout());\n            bp.add(yesBut = new Button(\"Yes\"));\n            yesBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"Yes\"))\n                        confirmRet = true;\n                    else\n                        confirmRet = false;\n                    confirmDialog.setVisible(false);\n                }\n            });\n            bp.add(noBut = new Button(\"No\"));\n            noBut.addActionListener(al);\n            gridc.gridy = 1;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            confirmDialog.add(bp);\n            confirmDialog.addWindowListener(new AWTConvenience.CloseAdapter(noBut));\n            AWTConvenience.setBackgroundOfChildren(confirmDialog);\n            confirmDialog.setResizable(true);\n        }\n        confirmDialog.remove(confirmLabel);\n        confirmLabel.setText(message);\n        confirmDialog.add(confirmLabel);\n        confirmDialog.pack();\n        AWTConvenience.placeDialog(confirmDialog);\n        if (defAnswer)\n            yesBut.requestFocus();\n        else\n            noBut.requestFocus();\n        confirmDialog.setVisible(true);\n        return confirmRet;\n    }\n\n    public static void notice(String title, String text, int rows, int cols, boolean scrollbar, Frame parent) {\n        Dialog textDialog = null;\n        TextArea textArea;\n        Button okTextBut;\n        textDialog = new Dialog(parent, title, true);\n        GridBagLayout grid = new GridBagLayout();\n        GridBagConstraints gridc = new GridBagConstraints();\n        textDialog.setLayout(grid);\n        gridc.fill = GridBagConstraints.NONE;\n        gridc.gridwidth = GridBagConstraints.REMAINDER;\n        gridc.anchor = GridBagConstraints.CENTER;\n        gridc.insets = new Insets(4, 4, 4, 4);\n        textArea = new TextArea(text, rows, cols, scrollbar ? TextArea.SCROLLBARS_VERTICAL_ONLY : TextArea.SCROLLBARS_NONE);\n        grid.setConstraints(textArea, gridc);\n        textDialog.add(textArea);\n        textArea.setEditable(false);\n        okTextBut = new Button(\"OK\");\n        okTextBut.addActionListener(new AWTConvenience.CloseAction(textDialog));\n        gridc.fill = GridBagConstraints.NONE;\n        grid.setConstraints(okTextBut, gridc);\n        textDialog.add(okTextBut);\n        textDialog.addWindowListener(new AWTConvenience.CloseAdapter(okTextBut));\n        AWTConvenience.setBackgroundOfChildren(textDialog);\n        textDialog.setResizable(true);\n        textDialog.pack();\n        AWTConvenience.placeDialog(textDialog);\n        okTextBut.requestFocus();\n        textDialog.setVisible(true);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHMiscDialogsTest3.java",
		"test_prompt": "// SSHMiscDialogsTest3.java\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport mindbright.util.AWTConvenience;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SSHMiscDialogs}.\n* It contains ten unit test cases for the {@link SSHMiscDialogs#password(String, String, Frame, char, String, String)} method.\n*/\nclass SSHMiscDialogsTest3 {"
	},
	{
		"original_code": "// SSHMiscDialogs.java\n/**\n * ***************************************************************************\n *\n *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.\n *                  www.mindbright.se, info@mindbright.se\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * ****************************************************************************\n *  $Author: webjabber $\n *  $Date: 2006/06/13 18:43:42 $\n *  $Name:  $\n * ****************************************************************************\n *\n *  Modified by ISNetworks\n *\n * ***************************************************************************\n */\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport mindbright.util.AWTConvenience;\n\npublic final class SSHMiscDialogs {\n\n    private static Dialog alertDialog = null;\n\n    private static Label alertLabel;\n\n    private static Button okAlertBut;\n\n    public static void alert(String title, String message, Frame parent) {\n        if (alertDialog == null) {\n            alertDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            alertDialog.setLayout(grid);\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.weightx = 1.0;\n            gridc.weighty = 1.0;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            alertLabel = new Label();\n            grid.setConstraints(alertLabel, gridc);\n            alertDialog.add(alertLabel);\n            okAlertBut = new Button(\"OK\");\n            okAlertBut.addActionListener(new AWTConvenience.CloseAction(alertDialog));\n            gridc.fill = GridBagConstraints.NONE;\n            gridc.gridy = 1;\n            grid.setConstraints(okAlertBut, gridc);\n            alertDialog.add(okAlertBut);\n            alertDialog.addWindowListener(new AWTConvenience.CloseAdapter(okAlertBut));\n            AWTConvenience.setBackgroundOfChildren(alertDialog);\n            alertDialog.setResizable(true);\n        }\n        alertDialog.setTitle(title);\n        alertDialog.remove(alertLabel);\n        alertLabel.setText(message);\n        alertDialog.add(alertLabel);\n        alertDialog.pack();\n        AWTConvenience.placeDialog(alertDialog);\n        okAlertBut.requestFocus();\n        alertDialog.setVisible(true);\n    }\n\n    /**\n     * Original method\n     */\n    public static String password(String title, String message, Frame parent) {\n        return password(title, message, parent, '*', \"\", \"Password:\");\n    }\n\n    /**\n     * Create a dialog box with a title, a text field, and label for the text field\n     */\n    public static String textfield(String title, String message, Frame parent) {\n        return password(title, \"\", parent, (char) 0, \"\", message);\n    }\n\n    /**\n     * Create a dialog box with a title, a text field with a default value, and label for the text field\n     */\n    public static String textfield(String title, String message, Frame parent, String defaultValue) {\n        return password(title, \"\", parent, (char) 0, defaultValue, message);\n    }\n\n    private static Dialog passwordDialog = null;\n\n    private static Label pwdMsgLabel;\n\n    private static Label pwdTextBoxLabel;\n\n    private static String pwdAnswer;\n\n    private static TextField pwdPassword;\n\n    public static String password(String title, String message, Frame parent, char echo, String defaultValue, String textBoxLabel) {\n        if (passwordDialog == null) {\n            passwordDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            passwordDialog.setLayout(grid);\n            Label lbl;\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            pwdMsgLabel = new Label();\n            grid.setConstraints(pwdMsgLabel, gridc);\n            passwordDialog.add(pwdMsgLabel);\n            gridc.gridy = 1;\n            gridc.gridwidth = 1;\n            gridc.anchor = GridBagConstraints.WEST;\n            pwdTextBoxLabel = new Label(\"Password:\");\n            grid.setConstraints(pwdTextBoxLabel, gridc);\n            passwordDialog.add(pwdTextBoxLabel);\n            pwdPassword = new TextField();\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(pwdPassword, gridc);\n            passwordDialog.add(pwdPassword);\n            Panel bp = new Panel(new FlowLayout());\n            Button okBut, cancBut;\n            bp.add(okBut = new Button(\"OK\"));\n            okBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"OK\")) {\n                        pwdAnswer = pwdPassword.getText();\n                    } else {\n                        pwdAnswer = null;\n                    }\n                    passwordDialog.setVisible(false);\n                }\n            });\n            bp.add(cancBut = new Button(\"Cancel\"));\n            cancBut.addActionListener(al);\n            gridc.gridy = 2;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            passwordDialog.add(bp);\n            passwordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));\n            AWTConvenience.setKeyListenerOfChildren(passwordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);\n            AWTConvenience.setBackgroundOfChildren(passwordDialog);\n            passwordDialog.setResizable(true);\n        }\n        passwordDialog.setTitle(title);\n        passwordDialog.remove(pwdMsgLabel);\n        pwdMsgLabel.setText(message);\n        pwdPassword.setText(defaultValue);\n        pwdPassword.setEchoChar(echo);\n        pwdPassword.setColumns(40);\n        passwordDialog.add(pwdMsgLabel);\n        passwordDialog.pack();\n        pwdTextBoxLabel.setText(textBoxLabel);\n        passwordDialog.setSize(450, 150);\n        AWTConvenience.placeDialog(passwordDialog);\n        passwordDialog.setVisible(true);\n        return pwdAnswer;\n    }\n\n    private static Dialog setPasswordDialog = null;\n\n    private static Label setPwdMsgLabel;\n\n    private static String setPwdAnswer;\n\n    private static TextField setPwdText, setPwdText2;\n\n    public static String setPassword(String title, String message, Frame parent) {\n        if (setPasswordDialog == null) {\n            setPasswordDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            setPasswordDialog.setLayout(grid);\n            Label lbl;\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            setPwdMsgLabel = new Label();\n            grid.setConstraints(setPwdMsgLabel, gridc);\n            setPasswordDialog.add(setPwdMsgLabel);\n            gridc.gridy = 1;\n            gridc.gridwidth = 1;\n            gridc.anchor = GridBagConstraints.WEST;\n            lbl = new Label(\"Password:\");\n            grid.setConstraints(lbl, gridc);\n            setPasswordDialog.add(lbl);\n            setPwdText = new TextField(\"\", 12);\n            grid.setConstraints(setPwdText, gridc);\n            setPwdText.setEchoChar('*');\n            setPasswordDialog.add(setPwdText);\n            gridc.gridy = 2;\n            lbl = new Label(\"Password again:\");\n            grid.setConstraints(lbl, gridc);\n            setPasswordDialog.add(lbl);\n            setPwdText2 = new TextField(\"\", 12);\n            grid.setConstraints(setPwdText2, gridc);\n            setPwdText2.setEchoChar('*');\n            setPasswordDialog.add(setPwdText2);\n            Panel bp = new Panel(new FlowLayout());\n            Button okBut, cancBut;\n            bp.add(okBut = new Button(\"OK\"));\n            okBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"OK\")) {\n                        setPwdAnswer = setPwdText.getText();\n                        if (!setPwdAnswer.equals(setPwdText2.getText())) {\n                            setPwdText.setText(\"\");\n                            setPwdText2.setText(\"\");\n                            return;\n                        }\n                    } else {\n                        setPwdAnswer = null;\n                    }\n                    setPasswordDialog.setVisible(false);\n                }\n            });\n            bp.add(cancBut = new Button(\"Cancel\"));\n            cancBut.addActionListener(al);\n            gridc.gridy = 3;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            setPasswordDialog.add(bp);\n            setPasswordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));\n            AWTConvenience.setKeyListenerOfChildren(setPasswordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);\n            AWTConvenience.setBackgroundOfChildren(setPasswordDialog);\n            setPasswordDialog.setResizable(true);\n        }\n        setPasswordDialog.setTitle(title);\n        setPasswordDialog.remove(setPwdMsgLabel);\n        setPwdMsgLabel.setText(message);\n        setPwdText.setText(\"\");\n        setPwdText2.setText(\"\");\n        setPasswordDialog.add(setPwdMsgLabel);\n        setPasswordDialog.pack();\n        AWTConvenience.placeDialog(setPasswordDialog);\n        setPasswordDialog.setVisible(true);\n        return setPwdAnswer;\n    }\n\n    private static Dialog confirmDialog = null;\n\n    private static Label confirmLabel;\n\n    private static boolean confirmRet;\n\n    private static Button yesBut, noBut;\n\n    public static boolean confirm(String title, String message, boolean defAnswer, Frame parent) {\n        if (confirmDialog == null) {\n            confirmDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            confirmDialog.setLayout(grid);\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            confirmLabel = new Label();\n            grid.setConstraints(confirmLabel, gridc);\n            confirmDialog.add(confirmLabel);\n            Panel bp = new Panel(new FlowLayout());\n            bp.add(yesBut = new Button(\"Yes\"));\n            yesBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"Yes\"))\n                        confirmRet = true;\n                    else\n                        confirmRet = false;\n                    confirmDialog.setVisible(false);\n                }\n            });\n            bp.add(noBut = new Button(\"No\"));\n            noBut.addActionListener(al);\n            gridc.gridy = 1;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            confirmDialog.add(bp);\n            confirmDialog.addWindowListener(new AWTConvenience.CloseAdapter(noBut));\n            AWTConvenience.setBackgroundOfChildren(confirmDialog);\n            confirmDialog.setResizable(true);\n        }\n        confirmDialog.remove(confirmLabel);\n        confirmLabel.setText(message);\n        confirmDialog.add(confirmLabel);\n        confirmDialog.pack();\n        AWTConvenience.placeDialog(confirmDialog);\n        if (defAnswer)\n            yesBut.requestFocus();\n        else\n            noBut.requestFocus();\n        confirmDialog.setVisible(true);\n        return confirmRet;\n    }\n\n    public static void notice(String title, String text, int rows, int cols, boolean scrollbar, Frame parent) {\n        Dialog textDialog = null;\n        TextArea textArea;\n        Button okTextBut;\n        textDialog = new Dialog(parent, title, true);\n        GridBagLayout grid = new GridBagLayout();\n        GridBagConstraints gridc = new GridBagConstraints();\n        textDialog.setLayout(grid);\n        gridc.fill = GridBagConstraints.NONE;\n        gridc.gridwidth = GridBagConstraints.REMAINDER;\n        gridc.anchor = GridBagConstraints.CENTER;\n        gridc.insets = new Insets(4, 4, 4, 4);\n        textArea = new TextArea(text, rows, cols, scrollbar ? TextArea.SCROLLBARS_VERTICAL_ONLY : TextArea.SCROLLBARS_NONE);\n        grid.setConstraints(textArea, gridc);\n        textDialog.add(textArea);\n        textArea.setEditable(false);\n        okTextBut = new Button(\"OK\");\n        okTextBut.addActionListener(new AWTConvenience.CloseAction(textDialog));\n        gridc.fill = GridBagConstraints.NONE;\n        grid.setConstraints(okTextBut, gridc);\n        textDialog.add(okTextBut);\n        textDialog.addWindowListener(new AWTConvenience.CloseAdapter(okTextBut));\n        AWTConvenience.setBackgroundOfChildren(textDialog);\n        textDialog.setResizable(true);\n        textDialog.pack();\n        AWTConvenience.placeDialog(textDialog);\n        okTextBut.requestFocus();\n        textDialog.setVisible(true);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHMiscDialogsTest4.java",
		"test_prompt": "// SSHMiscDialogsTest4.java\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport mindbright.util.AWTConvenience;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SSHMiscDialogs}.\n* It contains ten unit test cases for the {@link SSHMiscDialogs#setPassword(String, String, Frame)} method.\n*/\nclass SSHMiscDialogsTest4 {"
	},
	{
		"original_code": "// SSHMiscDialogs.java\n/**\n * ***************************************************************************\n *\n *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.\n *                  www.mindbright.se, info@mindbright.se\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * ****************************************************************************\n *  $Author: webjabber $\n *  $Date: 2006/06/13 18:43:42 $\n *  $Name:  $\n * ****************************************************************************\n *\n *  Modified by ISNetworks\n *\n * ***************************************************************************\n */\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport mindbright.util.AWTConvenience;\n\npublic final class SSHMiscDialogs {\n\n    private static Dialog alertDialog = null;\n\n    private static Label alertLabel;\n\n    private static Button okAlertBut;\n\n    public static void alert(String title, String message, Frame parent) {\n        if (alertDialog == null) {\n            alertDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            alertDialog.setLayout(grid);\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.weightx = 1.0;\n            gridc.weighty = 1.0;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            alertLabel = new Label();\n            grid.setConstraints(alertLabel, gridc);\n            alertDialog.add(alertLabel);\n            okAlertBut = new Button(\"OK\");\n            okAlertBut.addActionListener(new AWTConvenience.CloseAction(alertDialog));\n            gridc.fill = GridBagConstraints.NONE;\n            gridc.gridy = 1;\n            grid.setConstraints(okAlertBut, gridc);\n            alertDialog.add(okAlertBut);\n            alertDialog.addWindowListener(new AWTConvenience.CloseAdapter(okAlertBut));\n            AWTConvenience.setBackgroundOfChildren(alertDialog);\n            alertDialog.setResizable(true);\n        }\n        alertDialog.setTitle(title);\n        alertDialog.remove(alertLabel);\n        alertLabel.setText(message);\n        alertDialog.add(alertLabel);\n        alertDialog.pack();\n        AWTConvenience.placeDialog(alertDialog);\n        okAlertBut.requestFocus();\n        alertDialog.setVisible(true);\n    }\n\n    /**\n     * Original method\n     */\n    public static String password(String title, String message, Frame parent) {\n        return password(title, message, parent, '*', \"\", \"Password:\");\n    }\n\n    /**\n     * Create a dialog box with a title, a text field, and label for the text field\n     */\n    public static String textfield(String title, String message, Frame parent) {\n        return password(title, \"\", parent, (char) 0, \"\", message);\n    }\n\n    /**\n     * Create a dialog box with a title, a text field with a default value, and label for the text field\n     */\n    public static String textfield(String title, String message, Frame parent, String defaultValue) {\n        return password(title, \"\", parent, (char) 0, defaultValue, message);\n    }\n\n    private static Dialog passwordDialog = null;\n\n    private static Label pwdMsgLabel;\n\n    private static Label pwdTextBoxLabel;\n\n    private static String pwdAnswer;\n\n    private static TextField pwdPassword;\n\n    public static String password(String title, String message, Frame parent, char echo, String defaultValue, String textBoxLabel) {\n        if (passwordDialog == null) {\n            passwordDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            passwordDialog.setLayout(grid);\n            Label lbl;\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            pwdMsgLabel = new Label();\n            grid.setConstraints(pwdMsgLabel, gridc);\n            passwordDialog.add(pwdMsgLabel);\n            gridc.gridy = 1;\n            gridc.gridwidth = 1;\n            gridc.anchor = GridBagConstraints.WEST;\n            pwdTextBoxLabel = new Label(\"Password:\");\n            grid.setConstraints(pwdTextBoxLabel, gridc);\n            passwordDialog.add(pwdTextBoxLabel);\n            pwdPassword = new TextField();\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(pwdPassword, gridc);\n            passwordDialog.add(pwdPassword);\n            Panel bp = new Panel(new FlowLayout());\n            Button okBut, cancBut;\n            bp.add(okBut = new Button(\"OK\"));\n            okBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"OK\")) {\n                        pwdAnswer = pwdPassword.getText();\n                    } else {\n                        pwdAnswer = null;\n                    }\n                    passwordDialog.setVisible(false);\n                }\n            });\n            bp.add(cancBut = new Button(\"Cancel\"));\n            cancBut.addActionListener(al);\n            gridc.gridy = 2;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            passwordDialog.add(bp);\n            passwordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));\n            AWTConvenience.setKeyListenerOfChildren(passwordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);\n            AWTConvenience.setBackgroundOfChildren(passwordDialog);\n            passwordDialog.setResizable(true);\n        }\n        passwordDialog.setTitle(title);\n        passwordDialog.remove(pwdMsgLabel);\n        pwdMsgLabel.setText(message);\n        pwdPassword.setText(defaultValue);\n        pwdPassword.setEchoChar(echo);\n        pwdPassword.setColumns(40);\n        passwordDialog.add(pwdMsgLabel);\n        passwordDialog.pack();\n        pwdTextBoxLabel.setText(textBoxLabel);\n        passwordDialog.setSize(450, 150);\n        AWTConvenience.placeDialog(passwordDialog);\n        passwordDialog.setVisible(true);\n        return pwdAnswer;\n    }\n\n    private static Dialog setPasswordDialog = null;\n\n    private static Label setPwdMsgLabel;\n\n    private static String setPwdAnswer;\n\n    private static TextField setPwdText, setPwdText2;\n\n    public static String setPassword(String title, String message, Frame parent) {\n        if (setPasswordDialog == null) {\n            setPasswordDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            setPasswordDialog.setLayout(grid);\n            Label lbl;\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            setPwdMsgLabel = new Label();\n            grid.setConstraints(setPwdMsgLabel, gridc);\n            setPasswordDialog.add(setPwdMsgLabel);\n            gridc.gridy = 1;\n            gridc.gridwidth = 1;\n            gridc.anchor = GridBagConstraints.WEST;\n            lbl = new Label(\"Password:\");\n            grid.setConstraints(lbl, gridc);\n            setPasswordDialog.add(lbl);\n            setPwdText = new TextField(\"\", 12);\n            grid.setConstraints(setPwdText, gridc);\n            setPwdText.setEchoChar('*');\n            setPasswordDialog.add(setPwdText);\n            gridc.gridy = 2;\n            lbl = new Label(\"Password again:\");\n            grid.setConstraints(lbl, gridc);\n            setPasswordDialog.add(lbl);\n            setPwdText2 = new TextField(\"\", 12);\n            grid.setConstraints(setPwdText2, gridc);\n            setPwdText2.setEchoChar('*');\n            setPasswordDialog.add(setPwdText2);\n            Panel bp = new Panel(new FlowLayout());\n            Button okBut, cancBut;\n            bp.add(okBut = new Button(\"OK\"));\n            okBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"OK\")) {\n                        setPwdAnswer = setPwdText.getText();\n                        if (!setPwdAnswer.equals(setPwdText2.getText())) {\n                            setPwdText.setText(\"\");\n                            setPwdText2.setText(\"\");\n                            return;\n                        }\n                    } else {\n                        setPwdAnswer = null;\n                    }\n                    setPasswordDialog.setVisible(false);\n                }\n            });\n            bp.add(cancBut = new Button(\"Cancel\"));\n            cancBut.addActionListener(al);\n            gridc.gridy = 3;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            setPasswordDialog.add(bp);\n            setPasswordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));\n            AWTConvenience.setKeyListenerOfChildren(setPasswordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);\n            AWTConvenience.setBackgroundOfChildren(setPasswordDialog);\n            setPasswordDialog.setResizable(true);\n        }\n        setPasswordDialog.setTitle(title);\n        setPasswordDialog.remove(setPwdMsgLabel);\n        setPwdMsgLabel.setText(message);\n        setPwdText.setText(\"\");\n        setPwdText2.setText(\"\");\n        setPasswordDialog.add(setPwdMsgLabel);\n        setPasswordDialog.pack();\n        AWTConvenience.placeDialog(setPasswordDialog);\n        setPasswordDialog.setVisible(true);\n        return setPwdAnswer;\n    }\n\n    private static Dialog confirmDialog = null;\n\n    private static Label confirmLabel;\n\n    private static boolean confirmRet;\n\n    private static Button yesBut, noBut;\n\n    public static boolean confirm(String title, String message, boolean defAnswer, Frame parent) {\n        if (confirmDialog == null) {\n            confirmDialog = new Dialog(parent, title, true);\n            GridBagLayout grid = new GridBagLayout();\n            GridBagConstraints gridc = new GridBagConstraints();\n            ActionListener al;\n            confirmDialog.setLayout(grid);\n            gridc.fill = GridBagConstraints.HORIZONTAL;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            gridc.anchor = GridBagConstraints.CENTER;\n            gridc.insets = new Insets(8, 4, 4, 8);\n            gridc.gridy = 0;\n            confirmLabel = new Label();\n            grid.setConstraints(confirmLabel, gridc);\n            confirmDialog.add(confirmLabel);\n            Panel bp = new Panel(new FlowLayout());\n            bp.add(yesBut = new Button(\"Yes\"));\n            yesBut.addActionListener(al = new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    if (e.getActionCommand().equals(\"Yes\"))\n                        confirmRet = true;\n                    else\n                        confirmRet = false;\n                    confirmDialog.setVisible(false);\n                }\n            });\n            bp.add(noBut = new Button(\"No\"));\n            noBut.addActionListener(al);\n            gridc.gridy = 1;\n            gridc.gridwidth = GridBagConstraints.REMAINDER;\n            grid.setConstraints(bp, gridc);\n            confirmDialog.add(bp);\n            confirmDialog.addWindowListener(new AWTConvenience.CloseAdapter(noBut));\n            AWTConvenience.setBackgroundOfChildren(confirmDialog);\n            confirmDialog.setResizable(true);\n        }\n        confirmDialog.remove(confirmLabel);\n        confirmLabel.setText(message);\n        confirmDialog.add(confirmLabel);\n        confirmDialog.pack();\n        AWTConvenience.placeDialog(confirmDialog);\n        if (defAnswer)\n            yesBut.requestFocus();\n        else\n            noBut.requestFocus();\n        confirmDialog.setVisible(true);\n        return confirmRet;\n    }\n\n    public static void notice(String title, String text, int rows, int cols, boolean scrollbar, Frame parent) {\n        Dialog textDialog = null;\n        TextArea textArea;\n        Button okTextBut;\n        textDialog = new Dialog(parent, title, true);\n        GridBagLayout grid = new GridBagLayout();\n        GridBagConstraints gridc = new GridBagConstraints();\n        textDialog.setLayout(grid);\n        gridc.fill = GridBagConstraints.NONE;\n        gridc.gridwidth = GridBagConstraints.REMAINDER;\n        gridc.anchor = GridBagConstraints.CENTER;\n        gridc.insets = new Insets(4, 4, 4, 4);\n        textArea = new TextArea(text, rows, cols, scrollbar ? TextArea.SCROLLBARS_VERTICAL_ONLY : TextArea.SCROLLBARS_NONE);\n        grid.setConstraints(textArea, gridc);\n        textDialog.add(textArea);\n        textArea.setEditable(false);\n        okTextBut = new Button(\"OK\");\n        okTextBut.addActionListener(new AWTConvenience.CloseAction(textDialog));\n        gridc.fill = GridBagConstraints.NONE;\n        grid.setConstraints(okTextBut, gridc);\n        textDialog.add(okTextBut);\n        textDialog.addWindowListener(new AWTConvenience.CloseAdapter(okTextBut));\n        AWTConvenience.setBackgroundOfChildren(textDialog);\n        textDialog.setResizable(true);\n        textDialog.pack();\n        AWTConvenience.placeDialog(textDialog);\n        okTextBut.requestFocus();\n        textDialog.setVisible(true);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHMiscDialogsTest5.java",
		"test_prompt": "// SSHMiscDialogsTest5.java\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport mindbright.util.AWTConvenience;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SSHMiscDialogs}.\n* It contains ten unit test cases for the {@link SSHMiscDialogs#confirm(String, String, boolean, Frame)} method.\n*/\nclass SSHMiscDialogsTest5 {"
	},
	{
		"original_code": "// SSHSCPPanel.java\n/**\n * ***************************************************************************\n *  Modified by Zhong Li. removed main and set ownerFrame\n *\n *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.\n *                  www.mindbright.se, info@mindbright.se\n *  HEAVILY modified by ISNetworks, Seattle, WA.\n *                      www.isnetworks.com, info@isnetworks.com\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * ****************************************************************************\n *  $Author: webjabber $\n *  $Date: 2006/11/06 00:21:55 $\n *  $Name:  $\n * ***************************************************************************\n */\n/**\n * This class has been completely rewritten from the original.  Its design\n * is based on the LayoutManager tutorial at Sun's Java web site available at\n * http://developer.java.sun.com/developer/onlineTraining/GUI/AWTLayoutMgr/shortcourse.html\n *\n * It implements a WS-FTP-like interface for browsing, manipulating, and transferring\n * files in a secure way over SSH.  It logs into the remote machine using the same\n * account and authentication method as the user used to log in.\n * Unfortunately, that means if you need root file access you'll need to log in as\n * root through SSH\n */\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport com.gotoservers.ftp.LoginParam;\nimport com.gotoservers.ftp.RemoteFileBrowser;\nimport com.isnetworks.ssh.*;\n\npublic class //Dialog {\nSSHSCPPanel extends //Dialog {\nPanel {\n\n    private static ThreadGroup threadGroup;\n\n    // JH_Mod\n    private static int thrdPart = 1;\n\n    public static ThreadGroup getThreadGroup() {\n        if (threadGroup == null) {\n            // JH_Mod\n            threadGroup = new ThreadGroup(\"Mindbright SSH\");\n        }\n        return threadGroup;\n    }\n\n    public static synchronized String createThreadName() {\n        return \"SSH-\" + (thrdPart++);\n    }\n\n    // JH_Mod\n    private Button mUploadButton;\n\n    private Button mDownloadButton;\n\n    private Checkbox mTypeCheckbox;\n\n    private Panel mFileDisplayPanel;\n\n    private Panel mMainBottomSectionPanel;\n\n    /**\n     * Text area for error message display\n     */\n    private TextArea mMessageTextArea;\n\n    /**\n     * GUI for browsing file systems\n     */\n    private FileDisplay mLocalFileDisplay;\n\n    private FileDisplay mRemoteFileDisplay;\n\n    /**\n     * Back end for browsing file systems\n     */\n    private RemoteFileBrowser mRemoteFileBrowser;\n\n    private LocalFileBrowser mLocalFileBrowser;\n\n    /**\n     * Frame to attach new dialog boxes to\n     */\n    private Frame mOwnerFrame;\n\n    private SSHPropertyHandler mPropertyHandler;\n\n    // //private SSHInteractor mInterator;\n    /**\n     * Constructor Overall, the GUI is composed of two parts: the bottom section\n     * (buttons, messages) the file-display section (two file displays & arrow\n     * buttons)\n     */\n    public SSHSCPPanel(SSHPropertyHandler propHandler) {\n        // ,\n        // SSHInteractor\n        // interactor\n        // ) {\n        //super(owner, \"SCP Files\", false);\n        mOwnerFrame = propHandler.getParent();\n        if (mOwnerFrame == null) {\n            mOwnerFrame = new Frame();\n        }\n        mPropertyHandler = propHandler;\n        // //mInterator = interactor;\n        setLayout(new BorderLayout());\n        setBackground(Color.lightGray);\n        add(\"South\", getMainBottomSectionPanel());\n        add(\"Center\", getFileDisplayPanel());\n        //pack();\n        mLocalFileBrowser = new LocalFileBrowser(getLocalFileDisplay(), mPropertyHandler);\n        mRemoteFileBrowser = new RemoteFileBrowser(getRemoteFileDisplay(), mPropertyHandler, this);\n        //addWindowListener(new WindowAdapter() {\n        //\tpublic void windowClosing(WindowEvent e) {\n        //\t\tsetVisible(false);\n        //\t\tmOwnerFrame.dispose();\n        //\t\tmRemoteFileBrowser.disconnect();\n        //\t}\n        //});\n        try {\n            mLocalFileBrowser.initialize();\n        } catch (Exception e) {\n            logError(e);\n        }\n    }\n\n    /**\n     * The main bottom part of the GUI. Now just contains the error text area\n     */\n    private Panel getMainBottomSectionPanel() {\n        if (mMainBottomSectionPanel == null) {\n            mMainBottomSectionPanel = new Panel(new BorderLayout());\n            getMainBottomSectionPanel().add(\"Center\", getMessageTextArea());\n        }\n        return mMainBottomSectionPanel;\n    }\n\n    /**\n     * This is the message text area in the bottom part of the GUI. It is sized\n     * to 3 rows, 30 columns, which drives its preferred size (the preferred\n     * height is respected due to its position in the GUI.\n     */\n    private TextArea getMessageTextArea() {\n        if (mMessageTextArea == null) {\n            mMessageTextArea = new TextArea(\"\", 3, 30, TextArea.SCROLLBARS_VERTICAL_ONLY);\n            mMessageTextArea.setEditable(false);\n            mMessageTextArea.setFont(new Font(\"Monospaced\", Font.PLAIN, 11));\n            mMessageTextArea.setBackground(Color.white);\n        }\n        return mMessageTextArea;\n    }\n\n    /**\n     * This is the upper section of the GUI, containing the local & remote file\n     * displays and the direction buttons It is a big-bad-evil GridBagLayout\n     * (tm) The general idea is that the file displays expand horizontally to\n     * fill the remaining space equally and the arrow buttons float in the\n     * center between the two file displays.\n     */\n    private Panel getFileDisplayPanel() {\n        if (mFileDisplayPanel == null) {\n            mFileDisplayPanel = new Panel(new GridBagLayout());\n            GridBagConstraints gbc = new GridBagConstraints();\n            gbc.gridx = 0;\n            gbc.gridy = 0;\n            gbc.gridwidth = 1;\n            gbc.gridheight = 3;\n            gbc.fill = GridBagConstraints.BOTH;\n            gbc.anchor = GridBagConstraints.CENTER;\n            gbc.weightx = 0.5;\n            gbc.weighty = 1.0;\n            mFileDisplayPanel.add(getLocalFileDisplay(), gbc);\n            gbc.gridx = 2;\n            gbc.gridy = 0;\n            gbc.gridwidth = 1;\n            gbc.gridheight = 3;\n            gbc.fill = GridBagConstraints.BOTH;\n            gbc.anchor = GridBagConstraints.CENTER;\n            gbc.weightx = 0.5;\n            gbc.weighty = 1.0;\n            mFileDisplayPanel.add(getRemoteFileDisplay(), gbc);\n            gbc.gridx = 1;\n            gbc.gridy = 0;\n            gbc.gridwidth = 1;\n            gbc.gridheight = 1;\n            gbc.fill = GridBagConstraints.NONE;\n            gbc.anchor = GridBagConstraints.SOUTH;\n            gbc.weightx = 0.0;\n            gbc.weighty = 0.5;\n            gbc.insets = new Insets(0, 4, 2, 4);\n            mFileDisplayPanel.add(getDownloadButton(), gbc);\n            gbc.gridx = 1;\n            gbc.gridy = 1;\n            gbc.gridwidth = 1;\n            gbc.gridheight = 1;\n            gbc.fill = GridBagConstraints.NONE;\n            gbc.anchor = GridBagConstraints.NORTH;\n            gbc.weightx = 0.0;\n            gbc.weighty = 0.5;\n            gbc.insets = new Insets(2, 4, 0, 4);\n            mFileDisplayPanel.add(getUploadButton(), gbc);\n            gbc.gridx = 1;\n            gbc.gridy = 2;\n            gbc.gridwidth = 1;\n            gbc.gridheight = 1;\n            gbc.fill = GridBagConstraints.NONE;\n            gbc.anchor = GridBagConstraints.NORTH;\n            gbc.weightx = 0.0;\n            gbc.weighty = 0.5;\n            gbc.insets = new Insets(2, 4, 0, 4);\n            mFileDisplayPanel.add(getTypeCheckbox(), gbc);\n        }\n        return mFileDisplayPanel;\n    }\n\n    /**\n     * An instance of FileDisplay for the local system\n     */\n    private FileDisplay getLocalFileDisplay() {\n        if (mLocalFileDisplay == null) {\n            mLocalFileDisplay = new FileDisplay(mOwnerFrame, \"Local\", this);\n        }\n        return mLocalFileDisplay;\n    }\n\n    /**\n     * An instance of FileDisplay for the remote system\n     */\n    private FileDisplay getRemoteFileDisplay() {\n        if (mRemoteFileDisplay == null) {\n            mRemoteFileDisplay = new FileDisplay(mOwnerFrame, \"Remote\", this);\n        }\n        return mRemoteFileDisplay;\n    }\n\n    /**\n     * A direction button pointing right\n     */\n    private Checkbox getTypeCheckbox() {\n        if (mTypeCheckbox == null) {\n            mTypeCheckbox = new Checkbox(\"BInary\", true);\n            if (!mPropertyHandler.hasBinay()) {\n                mTypeCheckbox.setEnabled(false);\n            }\n        }\n        return mTypeCheckbox;\n    }\n\n    /**\n     * A direction button pointing left\n     */\n    private Button getDownloadButton() {\n        if (mDownloadButton == null) {\n            mDownloadButton = new Button(\"<--\");\n            mDownloadButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        boolean recursive = true;\n                        boolean background = false;\n                        boolean isBinary = mTypeCheckbox.getState();\n                        SSHSCPGUIThread progress = new SSHSCPGUIThread(mOwnerFrame, mLocalFileDisplay, mRemoteFileDisplay, mRemoteFileBrowser, recursive, background, false, isBinary, SSHSCPPanel.this);\n                        Thread thread = new Thread(getThreadGroup(), progress, createThreadName());\n                        thread.start();\n                    } catch (Exception ee) {\n                        ee.printStackTrace();\n                        logError(ee);\n                    }\n                }\n            });\n        }\n        return mDownloadButton;\n    }\n\n    /**\n     * A direction button pointing right\n     */\n    private Button getUploadButton() {\n        if (mUploadButton == null) {\n            mUploadButton = new Button(\"-->\");\n            mUploadButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        boolean recursive = true;\n                        boolean background = false;\n                        boolean isBinary = mTypeCheckbox.getState();\n                        SSHSCPGUIThread progress = new SSHSCPGUIThread(mOwnerFrame, mLocalFileDisplay, mRemoteFileDisplay, mRemoteFileBrowser, recursive, background, true, isBinary, SSHSCPPanel.this);\n                        Thread thread = new Thread(getThreadGroup(), progress, createThreadName());\n                        thread.start();\n                    } catch (Exception ee) {\n                        logError(ee);\n                    }\n                }\n            });\n        }\n        return mUploadButton;\n    }\n\n    public void refresh() {\n        try {\n            mLocalFileBrowser.refresh();\n            mRemoteFileBrowser.refresh();\n        } catch (SSHException e) {\n            logError(e);\n        }\n    }\n\n    /**\n     * Initialize the connection to the remote system and start in the SSH home\n     * directory on the local system\n     */\n    public void show(SSHPropertyHandler propsHandler) {\n        setSize(600, 500);\n        try {\n            mRemoteFileBrowser.initialize();\n        } catch (SSHException e) {\n            logError(e);\n        }\n        setVisible(true);\n    }\n\n    /**\n     * An exception happened, so show the user the message in the text area\n     */\n    public void logError(Exception e) {\n        mMessageTextArea.append(e.getMessage() + \"\\n\");\n    }\n\n    public void close() {\n        this.mRemoteFileBrowser.disconnect();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHSCPPanelTest0.java",
		"test_prompt": "// SSHSCPPanelTest0.java\n/**\n * This class has been completely rewritten from the original.  Its design\n * is based on the LayoutManager tutorial at Sun's Java web site available at\n * http://developer.java.sun.com/developer/onlineTraining/GUI/AWTLayoutMgr/shortcourse.html\n *\n * It implements a WS-FTP-like interface for browsing, manipulating, and transferring\n * files in a secure way over SSH.  It logs into the remote machine using the same\n * account and authentication method as the user used to log in.\n * Unfortunately, that means if you need root file access you'll need to log in as\n * root through SSH\n */\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport com.gotoservers.ftp.LoginParam;\nimport com.gotoservers.ftp.RemoteFileBrowser;\nimport com.isnetworks.ssh.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SSHSCPPanel}.\n* It contains ten unit test cases for the {@link SSHSCPPanel#getThreadGroup()} method.\n*/\nclass SSHSCPPanelTest0 {"
	},
	{
		"original_code": "// SSHSCPPanel.java\n/**\n * ***************************************************************************\n *  Modified by Zhong Li. removed main and set ownerFrame\n *\n *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.\n *                  www.mindbright.se, info@mindbright.se\n *  HEAVILY modified by ISNetworks, Seattle, WA.\n *                      www.isnetworks.com, info@isnetworks.com\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * ****************************************************************************\n *  $Author: webjabber $\n *  $Date: 2006/11/06 00:21:55 $\n *  $Name:  $\n * ***************************************************************************\n */\n/**\n * This class has been completely rewritten from the original.  Its design\n * is based on the LayoutManager tutorial at Sun's Java web site available at\n * http://developer.java.sun.com/developer/onlineTraining/GUI/AWTLayoutMgr/shortcourse.html\n *\n * It implements a WS-FTP-like interface for browsing, manipulating, and transferring\n * files in a secure way over SSH.  It logs into the remote machine using the same\n * account and authentication method as the user used to log in.\n * Unfortunately, that means if you need root file access you'll need to log in as\n * root through SSH\n */\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport com.gotoservers.ftp.LoginParam;\nimport com.gotoservers.ftp.RemoteFileBrowser;\nimport com.isnetworks.ssh.*;\n\npublic class //Dialog {\nSSHSCPPanel extends //Dialog {\nPanel {\n\n    private static ThreadGroup threadGroup;\n\n    // JH_Mod\n    private static int thrdPart = 1;\n\n    public static ThreadGroup getThreadGroup() {\n        if (threadGroup == null) {\n            // JH_Mod\n            threadGroup = new ThreadGroup(\"Mindbright SSH\");\n        }\n        return threadGroup;\n    }\n\n    public static synchronized String createThreadName() {\n        return \"SSH-\" + (thrdPart++);\n    }\n\n    // JH_Mod\n    private Button mUploadButton;\n\n    private Button mDownloadButton;\n\n    private Checkbox mTypeCheckbox;\n\n    private Panel mFileDisplayPanel;\n\n    private Panel mMainBottomSectionPanel;\n\n    /**\n     * Text area for error message display\n     */\n    private TextArea mMessageTextArea;\n\n    /**\n     * GUI for browsing file systems\n     */\n    private FileDisplay mLocalFileDisplay;\n\n    private FileDisplay mRemoteFileDisplay;\n\n    /**\n     * Back end for browsing file systems\n     */\n    private RemoteFileBrowser mRemoteFileBrowser;\n\n    private LocalFileBrowser mLocalFileBrowser;\n\n    /**\n     * Frame to attach new dialog boxes to\n     */\n    private Frame mOwnerFrame;\n\n    private SSHPropertyHandler mPropertyHandler;\n\n    // //private SSHInteractor mInterator;\n    /**\n     * Constructor Overall, the GUI is composed of two parts: the bottom section\n     * (buttons, messages) the file-display section (two file displays & arrow\n     * buttons)\n     */\n    public SSHSCPPanel(SSHPropertyHandler propHandler) {\n        // ,\n        // SSHInteractor\n        // interactor\n        // ) {\n        //super(owner, \"SCP Files\", false);\n        mOwnerFrame = propHandler.getParent();\n        if (mOwnerFrame == null) {\n            mOwnerFrame = new Frame();\n        }\n        mPropertyHandler = propHandler;\n        // //mInterator = interactor;\n        setLayout(new BorderLayout());\n        setBackground(Color.lightGray);\n        add(\"South\", getMainBottomSectionPanel());\n        add(\"Center\", getFileDisplayPanel());\n        //pack();\n        mLocalFileBrowser = new LocalFileBrowser(getLocalFileDisplay(), mPropertyHandler);\n        mRemoteFileBrowser = new RemoteFileBrowser(getRemoteFileDisplay(), mPropertyHandler, this);\n        //addWindowListener(new WindowAdapter() {\n        //\tpublic void windowClosing(WindowEvent e) {\n        //\t\tsetVisible(false);\n        //\t\tmOwnerFrame.dispose();\n        //\t\tmRemoteFileBrowser.disconnect();\n        //\t}\n        //});\n        try {\n            mLocalFileBrowser.initialize();\n        } catch (Exception e) {\n            logError(e);\n        }\n    }\n\n    /**\n     * The main bottom part of the GUI. Now just contains the error text area\n     */\n    private Panel getMainBottomSectionPanel() {\n        if (mMainBottomSectionPanel == null) {\n            mMainBottomSectionPanel = new Panel(new BorderLayout());\n            getMainBottomSectionPanel().add(\"Center\", getMessageTextArea());\n        }\n        return mMainBottomSectionPanel;\n    }\n\n    /**\n     * This is the message text area in the bottom part of the GUI. It is sized\n     * to 3 rows, 30 columns, which drives its preferred size (the preferred\n     * height is respected due to its position in the GUI.\n     */\n    private TextArea getMessageTextArea() {\n        if (mMessageTextArea == null) {\n            mMessageTextArea = new TextArea(\"\", 3, 30, TextArea.SCROLLBARS_VERTICAL_ONLY);\n            mMessageTextArea.setEditable(false);\n            mMessageTextArea.setFont(new Font(\"Monospaced\", Font.PLAIN, 11));\n            mMessageTextArea.setBackground(Color.white);\n        }\n        return mMessageTextArea;\n    }\n\n    /**\n     * This is the upper section of the GUI, containing the local & remote file\n     * displays and the direction buttons It is a big-bad-evil GridBagLayout\n     * (tm) The general idea is that the file displays expand horizontally to\n     * fill the remaining space equally and the arrow buttons float in the\n     * center between the two file displays.\n     */\n    private Panel getFileDisplayPanel() {\n        if (mFileDisplayPanel == null) {\n            mFileDisplayPanel = new Panel(new GridBagLayout());\n            GridBagConstraints gbc = new GridBagConstraints();\n            gbc.gridx = 0;\n            gbc.gridy = 0;\n            gbc.gridwidth = 1;\n            gbc.gridheight = 3;\n            gbc.fill = GridBagConstraints.BOTH;\n            gbc.anchor = GridBagConstraints.CENTER;\n            gbc.weightx = 0.5;\n            gbc.weighty = 1.0;\n            mFileDisplayPanel.add(getLocalFileDisplay(), gbc);\n            gbc.gridx = 2;\n            gbc.gridy = 0;\n            gbc.gridwidth = 1;\n            gbc.gridheight = 3;\n            gbc.fill = GridBagConstraints.BOTH;\n            gbc.anchor = GridBagConstraints.CENTER;\n            gbc.weightx = 0.5;\n            gbc.weighty = 1.0;\n            mFileDisplayPanel.add(getRemoteFileDisplay(), gbc);\n            gbc.gridx = 1;\n            gbc.gridy = 0;\n            gbc.gridwidth = 1;\n            gbc.gridheight = 1;\n            gbc.fill = GridBagConstraints.NONE;\n            gbc.anchor = GridBagConstraints.SOUTH;\n            gbc.weightx = 0.0;\n            gbc.weighty = 0.5;\n            gbc.insets = new Insets(0, 4, 2, 4);\n            mFileDisplayPanel.add(getDownloadButton(), gbc);\n            gbc.gridx = 1;\n            gbc.gridy = 1;\n            gbc.gridwidth = 1;\n            gbc.gridheight = 1;\n            gbc.fill = GridBagConstraints.NONE;\n            gbc.anchor = GridBagConstraints.NORTH;\n            gbc.weightx = 0.0;\n            gbc.weighty = 0.5;\n            gbc.insets = new Insets(2, 4, 0, 4);\n            mFileDisplayPanel.add(getUploadButton(), gbc);\n            gbc.gridx = 1;\n            gbc.gridy = 2;\n            gbc.gridwidth = 1;\n            gbc.gridheight = 1;\n            gbc.fill = GridBagConstraints.NONE;\n            gbc.anchor = GridBagConstraints.NORTH;\n            gbc.weightx = 0.0;\n            gbc.weighty = 0.5;\n            gbc.insets = new Insets(2, 4, 0, 4);\n            mFileDisplayPanel.add(getTypeCheckbox(), gbc);\n        }\n        return mFileDisplayPanel;\n    }\n\n    /**\n     * An instance of FileDisplay for the local system\n     */\n    private FileDisplay getLocalFileDisplay() {\n        if (mLocalFileDisplay == null) {\n            mLocalFileDisplay = new FileDisplay(mOwnerFrame, \"Local\", this);\n        }\n        return mLocalFileDisplay;\n    }\n\n    /**\n     * An instance of FileDisplay for the remote system\n     */\n    private FileDisplay getRemoteFileDisplay() {\n        if (mRemoteFileDisplay == null) {\n            mRemoteFileDisplay = new FileDisplay(mOwnerFrame, \"Remote\", this);\n        }\n        return mRemoteFileDisplay;\n    }\n\n    /**\n     * A direction button pointing right\n     */\n    private Checkbox getTypeCheckbox() {\n        if (mTypeCheckbox == null) {\n            mTypeCheckbox = new Checkbox(\"BInary\", true);\n            if (!mPropertyHandler.hasBinay()) {\n                mTypeCheckbox.setEnabled(false);\n            }\n        }\n        return mTypeCheckbox;\n    }\n\n    /**\n     * A direction button pointing left\n     */\n    private Button getDownloadButton() {\n        if (mDownloadButton == null) {\n            mDownloadButton = new Button(\"<--\");\n            mDownloadButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        boolean recursive = true;\n                        boolean background = false;\n                        boolean isBinary = mTypeCheckbox.getState();\n                        SSHSCPGUIThread progress = new SSHSCPGUIThread(mOwnerFrame, mLocalFileDisplay, mRemoteFileDisplay, mRemoteFileBrowser, recursive, background, false, isBinary, SSHSCPPanel.this);\n                        Thread thread = new Thread(getThreadGroup(), progress, createThreadName());\n                        thread.start();\n                    } catch (Exception ee) {\n                        ee.printStackTrace();\n                        logError(ee);\n                    }\n                }\n            });\n        }\n        return mDownloadButton;\n    }\n\n    /**\n     * A direction button pointing right\n     */\n    private Button getUploadButton() {\n        if (mUploadButton == null) {\n            mUploadButton = new Button(\"-->\");\n            mUploadButton.addActionListener(new ActionListener() {\n\n                public void actionPerformed(ActionEvent e) {\n                    try {\n                        boolean recursive = true;\n                        boolean background = false;\n                        boolean isBinary = mTypeCheckbox.getState();\n                        SSHSCPGUIThread progress = new SSHSCPGUIThread(mOwnerFrame, mLocalFileDisplay, mRemoteFileDisplay, mRemoteFileBrowser, recursive, background, true, isBinary, SSHSCPPanel.this);\n                        Thread thread = new Thread(getThreadGroup(), progress, createThreadName());\n                        thread.start();\n                    } catch (Exception ee) {\n                        logError(ee);\n                    }\n                }\n            });\n        }\n        return mUploadButton;\n    }\n\n    public void refresh() {\n        try {\n            mLocalFileBrowser.refresh();\n            mRemoteFileBrowser.refresh();\n        } catch (SSHException e) {\n            logError(e);\n        }\n    }\n\n    /**\n     * Initialize the connection to the remote system and start in the SSH home\n     * directory on the local system\n     */\n    public void show(SSHPropertyHandler propsHandler) {\n        setSize(600, 500);\n        try {\n            mRemoteFileBrowser.initialize();\n        } catch (SSHException e) {\n            logError(e);\n        }\n        setVisible(true);\n    }\n\n    /**\n     * An exception happened, so show the user the message in the text area\n     */\n    public void logError(Exception e) {\n        mMessageTextArea.append(e.getMessage() + \"\\n\");\n    }\n\n    public void close() {\n        this.mRemoteFileBrowser.disconnect();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHSCPPanelTest1.java",
		"test_prompt": "// SSHSCPPanelTest1.java\n/**\n * This class has been completely rewritten from the original.  Its design\n * is based on the LayoutManager tutorial at Sun's Java web site available at\n * http://developer.java.sun.com/developer/onlineTraining/GUI/AWTLayoutMgr/shortcourse.html\n *\n * It implements a WS-FTP-like interface for browsing, manipulating, and transferring\n * files in a secure way over SSH.  It logs into the remote machine using the same\n * account and authentication method as the user used to log in.\n * Unfortunately, that means if you need root file access you'll need to log in as\n * root through SSH\n */\npackage mindbright.ssh;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport com.gotoservers.ftp.LoginParam;\nimport com.gotoservers.ftp.RemoteFileBrowser;\nimport com.isnetworks.ssh.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SSHSCPPanel}.\n* It contains ten unit test cases for the {@link SSHSCPPanel#createThreadName()} method.\n*/\nclass SSHSCPPanelTest1 {"
	},
	{
		"original_code": "// SSHPropertyHandler.java\n/**\n * ***************************************************************************\n *\n *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.\n *                  www.mindbright.se, info@mindbright.se\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n * ****************************************************************************\n *  $Author: webjabber $\n *  $Date: 2006/11/06 00:21:55 $\n *  $Name:  $\n * ***************************************************************************\n */\npackage mindbright.ssh;\n\nimport java.awt.Frame;\n\npublic final class //implements SSHClientUser, SSHAuthenticator, ProxyAuthenticator {\nSSHPropertyHandler {\n\n    //\"192.168.1.2\";\n    String remoteServer = \"localhost\";\n\n    int remotePort = 21;\n\n    //\"test\";\n    String remoteUser;\n\n    //\"123456\";\n    String remotePassword;\n\n    String sshHomeDir;\n\n    Frame parent;\n\n    boolean hasBinay = true;\n\n    public String getSSHHomeDir() {\n        if (sshHomeDir == null)\n            sshHomeDir = \"/\";\n        return sshHomeDir;\n    }\n\n    public void setSSHHomeDir(String homeDir) {\n        sshHomeDir = homeDir;\n    }\n\n    public String getRemotePassword() {\n        return remotePassword;\n    }\n\n    public void setRemotePassword(String remotePassword) {\n        this.remotePassword = remotePassword;\n    }\n\n    public int getRemotePort() {\n        return remotePort;\n    }\n\n    public void setRemotePort(int remotePort) {\n        this.remotePort = remotePort;\n    }\n\n    public String getRemoteServer() {\n        return remoteServer;\n    }\n\n    public void setRemoteServer(String remoteServer) {\n        this.remoteServer = remoteServer;\n    }\n\n    public String getRemoteUser() {\n        return remoteUser;\n    }\n\n    public void setRemoteUser(String remoteUser) {\n        this.remoteUser = remoteUser;\n    }\n\n    public String getSshHomeDir() {\n        return sshHomeDir;\n    }\n\n    public void setSshHomeDir(String sshHomeDir) {\n        this.sshHomeDir = sshHomeDir;\n    }\n\n    public Frame getParent() {\n        return parent;\n    }\n\n    public void setParent(Frame parent) {\n        this.parent = parent;\n    }\n\n    public boolean hasBinay() {\n        return hasBinay;\n    }\n\n    public void setHasBinay(boolean hasBinay) {\n        this.hasBinay = hasBinay;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHPropertyHandlerTest.java",
		"test_prompt": "// SSHPropertyHandlerTest.java\npackage mindbright.ssh;\n\nimport java.awt.Frame;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SSHPropertyHandler}.\n* It contains ten unit test cases for the {@link SSHPropertyHandler#hasBinay()} method.\n*/\nclass SSHPropertyHandlerTest {"
	},
	{
		"original_code": "// FileListItem.java\n/**\n * ***************************************************************************\n *\n *  Modified by Zhong Li, added modify time\n *\n *  Copyright (c) 2001 by ISNetworks, Seattle, WA.\n *                        www.isnetworks.com, info@isnetworks.com\n *  Based on MindTerm from Mindbright Technology AB, Stockholm, Sweden.\n *                         www.mindbright.se, info@mindbright.se\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n * ***************************************************************************\n */\n/**\n * Representation of a file on either the local or remote file systems.\n * Knows whether it's a directory as well as its name and path.\n */\npackage com.isnetworks.ssh;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class FileListItem {\n\n    /**\n     * Name of the file or directory\n     */\n    private String mName;\n\n    /**\n     * Full path of directory which contains this file\n     */\n    private String mParent;\n\n    /**\n     * Whether this file is a directory\n     */\n    private boolean mDirectory;\n\n    private long mSize;\n\n    private long mLastModify;\n\n    /**\n     * Construct from a file on the local file system\n     */\n    public FileListItem(File file) {\n        this(file.getName(), file.getParent(), file.isDirectory(), file.length(), file.lastModified());\n    }\n\n    public FileListItem(String name, String parent, boolean directory, long size, long lastModify) {\n        mName = name;\n        mParent = parent;\n        mDirectory = directory;\n        mSize = size;\n        mLastModify = lastModify;\n    }\n\n    /**\n     * Get fully qualified name\n     */\n    public String getAbsolutePath() {\n        return mParent + mName;\n    }\n\n    /**\n     * Get name of file relative to its parent directory\n     */\n    public String getName() {\n        return mName;\n    }\n\n    /**\n     * Get full path of directory this file lives in\n     */\n    public String getParent() {\n        return mParent;\n    }\n\n    public boolean isDirectory() {\n        return mDirectory;\n    }\n\n    public long getSize() {\n        return mSize;\n    }\n\n    public long getLastModify() {\n        return mLastModify;\n    }\n\n    /**\n     * Used to sort files first by directory/non-directory and then by name\n     */\n    private boolean earlierThan(FileListItem fileListing) {\n        // Always put parent directory at the top of the list\n        if (mName.equals(\"..\")) {\n            return true;\n        }\n        if (fileListing.mName.equals(\"..\")) {\n            return false;\n        }\n        if (isDirectory() && !fileListing.isDirectory()) {\n            return true;\n        }\n        if (!isDirectory() && fileListing.isDirectory()) {\n            return false;\n        }\n        return mName.toUpperCase().compareTo(fileListing.mName.toUpperCase()) < 0;\n    }\n\n    /**\n     * Simple, inefficient bubble sort for array of FileListItems.\n     * Only here because java.util.Arrays class does not exist\n     * in Java 1.1 so it wouldn't work in an applet.  Should be\n     * acceptable since directories typically contain a relatively\n     * small number of files.\n     */\n    public static void sort(Vector files) {\n        for (int i = 0; i < files.size(); i++) {\n            for (int j = i; j < files.size(); j++) {\n                if (!((FileListItem) files.elementAt(i)).earlierThan((FileListItem) files.elementAt(j))) {\n                    FileListItem temp = (FileListItem) files.elementAt(j);\n                    files.setElementAt((FileListItem) files.elementAt(i), j);\n                    files.setElementAt(temp, i);\n                }\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/65_gsftp/src/main/java/com/isnetworks/ssh/FileListItemTest.java",
		"test_prompt": "// FileListItemTest.java\n/**\n * Representation of a file on either the local or remote file systems.\n * Knows whether it's a directory as well as its name and path.\n */\npackage com.isnetworks.ssh;\n\nimport java.io.*;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileListItem}.\n* It contains ten unit test cases for the {@link FileListItem#isDirectory()} method.\n*/\nclass FileListItemTest {"
	}
]