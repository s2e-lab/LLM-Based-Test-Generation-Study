[
	{
		"original_code": "// Conversor.java\npackage jaw.util;\n\npublic class Conversor {\n\n    /**\n     * Creates a new instance of Conversor\n     */\n    public Conversor() {\n    }\n\n    public static String toClasse(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (i == 0) {\n                nome = nome.substring(0, i + 1).toUpperCase() + nome.substring(1, nome.length());\n            }\n            if (nome.charAt(i) == '_') {\n                if (i == nome.length() - 1) {\n                    nome = nome.substring(0, i);\n                } else {\n                    nome = nome.substring(0, i) + nome.substring(i + 1, i + 2).toUpperCase() + nome.substring(i + 2, nome.length());\n                    i--;\n                }\n            }\n        }\n        return nome;\n    }\n\n    public static String toAtributo(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (nome.charAt(i) == '_') {\n                if (i == nome.length() - 1) {\n                    nome = nome.substring(0, i);\n                } else {\n                    nome = nome.substring(0, i) + nome.substring(i + 1, i + 2).toUpperCase() + nome.substring(i + 2, nome.length());\n                    i--;\n                }\n            }\n        }\n        return nome;\n    }\n\n    public static String toTabela(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (!nome.substring(i, i + 1).equals(nome.substring(i, i + 1).toUpperCase())) {\n                continue;\n            }\n            if (nome.substring(i, i + 1).equals(\"_\")) {\n                continue;\n            }\n            nome = nome.substring(0, i) + \"_\" + nome.substring(i, i + 1).toLowerCase() + nome.substring(i + 1, nome.length());\n            i++;\n        }\n        return nome;\n    }\n\n    public static String toTexto(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (!nome.substring(i, i + 1).equals(\"_\")) {\n                continue;\n            }\n            nome = nome.substring(0, i) + \" \" + nome.substring(i + 1, nome.length()).toLowerCase();\n            i++;\n        }\n        return nome;\n    }\n\n    public static void main(String[] args) {\n        String texto = \"Texto_para_teste_de_conversao_a_toa\";\n        System.out.println(texto + \" - \" + Conversor.toTexto(texto));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/util/ConversorTest0.java",
		"test_prompt": "// ConversorTest0.java\npackage jaw.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Conversor}.\n* It contains ten unit test cases for the {@link Conversor#toClasse(String)} method.\n*/\nclass ConversorTest0 {"
	},
	{
		"original_code": "// Conversor.java\npackage jaw.util;\n\npublic class Conversor {\n\n    /**\n     * Creates a new instance of Conversor\n     */\n    public Conversor() {\n    }\n\n    public static String toClasse(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (i == 0) {\n                nome = nome.substring(0, i + 1).toUpperCase() + nome.substring(1, nome.length());\n            }\n            if (nome.charAt(i) == '_') {\n                if (i == nome.length() - 1) {\n                    nome = nome.substring(0, i);\n                } else {\n                    nome = nome.substring(0, i) + nome.substring(i + 1, i + 2).toUpperCase() + nome.substring(i + 2, nome.length());\n                    i--;\n                }\n            }\n        }\n        return nome;\n    }\n\n    public static String toAtributo(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (nome.charAt(i) == '_') {\n                if (i == nome.length() - 1) {\n                    nome = nome.substring(0, i);\n                } else {\n                    nome = nome.substring(0, i) + nome.substring(i + 1, i + 2).toUpperCase() + nome.substring(i + 2, nome.length());\n                    i--;\n                }\n            }\n        }\n        return nome;\n    }\n\n    public static String toTabela(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (!nome.substring(i, i + 1).equals(nome.substring(i, i + 1).toUpperCase())) {\n                continue;\n            }\n            if (nome.substring(i, i + 1).equals(\"_\")) {\n                continue;\n            }\n            nome = nome.substring(0, i) + \"_\" + nome.substring(i, i + 1).toLowerCase() + nome.substring(i + 1, nome.length());\n            i++;\n        }\n        return nome;\n    }\n\n    public static String toTexto(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (!nome.substring(i, i + 1).equals(\"_\")) {\n                continue;\n            }\n            nome = nome.substring(0, i) + \" \" + nome.substring(i + 1, nome.length()).toLowerCase();\n            i++;\n        }\n        return nome;\n    }\n\n    public static void main(String[] args) {\n        String texto = \"Texto_para_teste_de_conversao_a_toa\";\n        System.out.println(texto + \" - \" + Conversor.toTexto(texto));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/util/ConversorTest1.java",
		"test_prompt": "// ConversorTest1.java\npackage jaw.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Conversor}.\n* It contains ten unit test cases for the {@link Conversor#toAtributo(String)} method.\n*/\nclass ConversorTest1 {"
	},
	{
		"original_code": "// Conversor.java\npackage jaw.util;\n\npublic class Conversor {\n\n    /**\n     * Creates a new instance of Conversor\n     */\n    public Conversor() {\n    }\n\n    public static String toClasse(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (i == 0) {\n                nome = nome.substring(0, i + 1).toUpperCase() + nome.substring(1, nome.length());\n            }\n            if (nome.charAt(i) == '_') {\n                if (i == nome.length() - 1) {\n                    nome = nome.substring(0, i);\n                } else {\n                    nome = nome.substring(0, i) + nome.substring(i + 1, i + 2).toUpperCase() + nome.substring(i + 2, nome.length());\n                    i--;\n                }\n            }\n        }\n        return nome;\n    }\n\n    public static String toAtributo(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (nome.charAt(i) == '_') {\n                if (i == nome.length() - 1) {\n                    nome = nome.substring(0, i);\n                } else {\n                    nome = nome.substring(0, i) + nome.substring(i + 1, i + 2).toUpperCase() + nome.substring(i + 2, nome.length());\n                    i--;\n                }\n            }\n        }\n        return nome;\n    }\n\n    public static String toTabela(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (!nome.substring(i, i + 1).equals(nome.substring(i, i + 1).toUpperCase())) {\n                continue;\n            }\n            if (nome.substring(i, i + 1).equals(\"_\")) {\n                continue;\n            }\n            nome = nome.substring(0, i) + \"_\" + nome.substring(i, i + 1).toLowerCase() + nome.substring(i + 1, nome.length());\n            i++;\n        }\n        return nome;\n    }\n\n    public static String toTexto(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (!nome.substring(i, i + 1).equals(\"_\")) {\n                continue;\n            }\n            nome = nome.substring(0, i) + \" \" + nome.substring(i + 1, nome.length()).toLowerCase();\n            i++;\n        }\n        return nome;\n    }\n\n    public static void main(String[] args) {\n        String texto = \"Texto_para_teste_de_conversao_a_toa\";\n        System.out.println(texto + \" - \" + Conversor.toTexto(texto));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/util/ConversorTest2.java",
		"test_prompt": "// ConversorTest2.java\npackage jaw.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Conversor}.\n* It contains ten unit test cases for the {@link Conversor#toTabela(String)} method.\n*/\nclass ConversorTest2 {"
	},
	{
		"original_code": "// Conversor.java\npackage jaw.util;\n\npublic class Conversor {\n\n    /**\n     * Creates a new instance of Conversor\n     */\n    public Conversor() {\n    }\n\n    public static String toClasse(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (i == 0) {\n                nome = nome.substring(0, i + 1).toUpperCase() + nome.substring(1, nome.length());\n            }\n            if (nome.charAt(i) == '_') {\n                if (i == nome.length() - 1) {\n                    nome = nome.substring(0, i);\n                } else {\n                    nome = nome.substring(0, i) + nome.substring(i + 1, i + 2).toUpperCase() + nome.substring(i + 2, nome.length());\n                    i--;\n                }\n            }\n        }\n        return nome;\n    }\n\n    public static String toAtributo(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (nome.charAt(i) == '_') {\n                if (i == nome.length() - 1) {\n                    nome = nome.substring(0, i);\n                } else {\n                    nome = nome.substring(0, i) + nome.substring(i + 1, i + 2).toUpperCase() + nome.substring(i + 2, nome.length());\n                    i--;\n                }\n            }\n        }\n        return nome;\n    }\n\n    public static String toTabela(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (!nome.substring(i, i + 1).equals(nome.substring(i, i + 1).toUpperCase())) {\n                continue;\n            }\n            if (nome.substring(i, i + 1).equals(\"_\")) {\n                continue;\n            }\n            nome = nome.substring(0, i) + \"_\" + nome.substring(i, i + 1).toLowerCase() + nome.substring(i + 1, nome.length());\n            i++;\n        }\n        return nome;\n    }\n\n    public static String toTexto(String nome) {\n        for (int i = 0; i < nome.length(); i++) {\n            if (!nome.substring(i, i + 1).equals(\"_\")) {\n                continue;\n            }\n            nome = nome.substring(0, i) + \" \" + nome.substring(i + 1, nome.length()).toLowerCase();\n            i++;\n        }\n        return nome;\n    }\n\n    public static void main(String[] args) {\n        String texto = \"Texto_para_teste_de_conversao_a_toa\";\n        System.out.println(texto + \" - \" + Conversor.toTexto(texto));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/util/ConversorTest3.java",
		"test_prompt": "// ConversorTest3.java\npackage jaw.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Conversor}.\n* It contains ten unit test cases for the {@link Conversor#toTexto(String)} method.\n*/\nclass ConversorTest3 {"
	},
	{
		"original_code": "// Atributo.java\npackage jaw.metamodelo;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Vector;\nimport jaw.util.Conversor;\n\npublic class Atributo implements Comparable, Serializable {\n\n    private String nome = \"\";\n\n    private String tipo = \"\";\n\n    private int tamanho = 0;\n\n    private Properties tipos = new Properties();\n\n    private boolean chavePrimaria = false;\n\n    private Entidade entidade = new Entidade();\n\n    private Atributo atributoImportado = null;\n\n    private List<Atributo> atributosExportados = new Vector();\n\n    public Atributo() {\n    }\n\n    @Override\n    public String toString() {\n        return this.nome;\n    }\n\n    public int compareTo(Object at) {\n        if (at instanceof Atributo) {\n            return this.nome.compareTo(((Atributo) at).getNome());\n        } else {\n            return -1;\n        }\n    }\n\n    public Entidade getEntidadeImportada() {\n        if (this.atributoImportado != null) {\n            return atributoImportado.getEntidade();\n        } else {\n            return null;\n        }\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getTipo() {\n        return tipo;\n    }\n\n    public void setTipo(String tipo) {\n        this.tipo = tipo;\n    }\n\n    public String getNomeAsClasse() {\n        return Conversor.toClasse(this.nome);\n    }\n\n    public String getNomeAsAtributo() {\n        return Conversor.toAtributo(this.nome);\n    }\n\n    public String getNomeAsTabela() {\n        return Conversor.toTabela(this.nome);\n    }\n\n    public String getNomeAsTexto() {\n        return Conversor.toTexto(this.nome);\n    }\n\n    public int getTamanho() {\n        return tamanho;\n    }\n\n    public void setTamanho(int tamanho) {\n        this.tamanho = tamanho;\n    }\n\n    public Properties getTipos() {\n        return tipos;\n    }\n\n    public void setTipos(Properties tipos) {\n        this.tipos = tipos;\n    }\n\n    public boolean isChavePrimaria() {\n        return chavePrimaria;\n    }\n\n    public boolean getChavePrimaria() {\n        return chavePrimaria;\n    }\n\n    public void setChavePrimaria(boolean chavePrimaria) {\n        this.chavePrimaria = chavePrimaria;\n    }\n\n    public Entidade getEntidade() {\n        return entidade;\n    }\n\n    public void setEntidade(Entidade entidade) {\n        this.entidade = entidade;\n    }\n\n    public Atributo getAtributoImportado() {\n        return atributoImportado;\n    }\n\n    public void setAtributoImportado(Atributo atributoImportado) {\n        this.atributoImportado = atributoImportado;\n    }\n\n    public List<Atributo> getAtributosExportados() {\n        return atributosExportados;\n    }\n\n    public void setAtributosExportados(List<Atributo> atributosExportados) {\n        this.atributosExportados = atributosExportados;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/metamodelo/AtributoTest0.java",
		"test_prompt": "// AtributoTest0.java\npackage jaw.metamodelo;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Vector;\nimport jaw.util.Conversor;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Atributo}.\n* It contains ten unit test cases for the {@link Atributo#compareTo(Object)} method.\n*/\nclass AtributoTest0 {"
	},
	{
		"original_code": "// Atributo.java\npackage jaw.metamodelo;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Vector;\nimport jaw.util.Conversor;\n\npublic class Atributo implements Comparable, Serializable {\n\n    private String nome = \"\";\n\n    private String tipo = \"\";\n\n    private int tamanho = 0;\n\n    private Properties tipos = new Properties();\n\n    private boolean chavePrimaria = false;\n\n    private Entidade entidade = new Entidade();\n\n    private Atributo atributoImportado = null;\n\n    private List<Atributo> atributosExportados = new Vector();\n\n    public Atributo() {\n    }\n\n    @Override\n    public String toString() {\n        return this.nome;\n    }\n\n    public int compareTo(Object at) {\n        if (at instanceof Atributo) {\n            return this.nome.compareTo(((Atributo) at).getNome());\n        } else {\n            return -1;\n        }\n    }\n\n    public Entidade getEntidadeImportada() {\n        if (this.atributoImportado != null) {\n            return atributoImportado.getEntidade();\n        } else {\n            return null;\n        }\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getTipo() {\n        return tipo;\n    }\n\n    public void setTipo(String tipo) {\n        this.tipo = tipo;\n    }\n\n    public String getNomeAsClasse() {\n        return Conversor.toClasse(this.nome);\n    }\n\n    public String getNomeAsAtributo() {\n        return Conversor.toAtributo(this.nome);\n    }\n\n    public String getNomeAsTabela() {\n        return Conversor.toTabela(this.nome);\n    }\n\n    public String getNomeAsTexto() {\n        return Conversor.toTexto(this.nome);\n    }\n\n    public int getTamanho() {\n        return tamanho;\n    }\n\n    public void setTamanho(int tamanho) {\n        this.tamanho = tamanho;\n    }\n\n    public Properties getTipos() {\n        return tipos;\n    }\n\n    public void setTipos(Properties tipos) {\n        this.tipos = tipos;\n    }\n\n    public boolean isChavePrimaria() {\n        return chavePrimaria;\n    }\n\n    public boolean getChavePrimaria() {\n        return chavePrimaria;\n    }\n\n    public void setChavePrimaria(boolean chavePrimaria) {\n        this.chavePrimaria = chavePrimaria;\n    }\n\n    public Entidade getEntidade() {\n        return entidade;\n    }\n\n    public void setEntidade(Entidade entidade) {\n        this.entidade = entidade;\n    }\n\n    public Atributo getAtributoImportado() {\n        return atributoImportado;\n    }\n\n    public void setAtributoImportado(Atributo atributoImportado) {\n        this.atributoImportado = atributoImportado;\n    }\n\n    public List<Atributo> getAtributosExportados() {\n        return atributosExportados;\n    }\n\n    public void setAtributosExportados(List<Atributo> atributosExportados) {\n        this.atributosExportados = atributosExportados;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/metamodelo/AtributoTest1.java",
		"test_prompt": "// AtributoTest1.java\npackage jaw.metamodelo;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Vector;\nimport jaw.util.Conversor;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Atributo}.\n* It contains ten unit test cases for the {@link Atributo#isChavePrimaria()} method.\n*/\nclass AtributoTest1 {"
	},
	{
		"original_code": "// Entidade.java\npackage jaw.metamodelo;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport jaw.util.Conversor;\n\npublic class Entidade implements Comparable, Serializable {\n\n    private String nome = \"\";\n\n    private java.util.List<Atributo> atributos = new java.util.Vector();\n\n    private String pacote = \"\";\n\n    private List<Atributo> chavesPrimarias = new ArrayList();\n\n    public Entidade(String nome) {\n        this.nome = nome;\n    }\n\n    public Entidade() {\n    }\n\n    public int compareTo(Object ent) {\n        if (ent instanceof Entidade) {\n            String comp = ((Entidade) ent).getPacote() + \".\" + ent.toString();\n            return (this.pacote + \".\" + this.nome).compareTo(comp);\n        } else {\n            return this.nome.compareTo(ent.toString());\n        }\n    }\n\n    public String getNome() {\n        return this.nome;\n    }\n\n    public String getNomeAsClasse() {\n        return Conversor.toClasse(this.nome);\n    }\n\n    public String getNomeAsTabela() {\n        return Conversor.toTabela(this.nome);\n    }\n\n    public String getNomeAsAtributo() {\n        return Conversor.toAtributo(this.nome);\n    }\n\n    public String getNomeAsTexto() {\n        return Conversor.toTexto(this.nome);\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public java.util.List<Atributo> getAtributos() {\n        return this.atributos;\n    }\n\n    public void setAtributos(java.util.List<Atributo> atributos) {\n        this.atributos = atributos;\n    }\n\n    public String toString() {\n        return this.nome;\n    }\n\n    public String getPacote() {\n        return pacote;\n    }\n\n    public void setPacote(String pacote) {\n        this.pacote = pacote;\n    }\n\n    public List<Atributo> getChavesPrimarias() {\n        return chavesPrimarias;\n    }\n\n    public void setChavesPrimarias(List<Atributo> chavesPrimarias) {\n        this.chavesPrimarias = chavesPrimarias;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/metamodelo/EntidadeTest.java",
		"test_prompt": "// EntidadeTest.java\npackage jaw.metamodelo;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport jaw.util.Conversor;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Entidade}.\n* It contains ten unit test cases for the {@link Entidade#compareTo(Object)} method.\n*/\nclass EntidadeTest {"
	},
	{
		"original_code": "// Serializacao.java\npackage jaw.entrada;\n\n/**\n * @author robson\n */\nimport java.io.FileInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.configuracoes.ConexaoBD;\nimport jaw.metamodelo.Entidade;\n\npublic class Serializacao {\n\n    private FileInputStream fis = null;\n\n    private ObjectInputStream in = null;\n\n    public FileOutputStream fos = null;\n\n    public ObjectOutputStream out = null;\n\n    public boolean salvar(List<jaw.metamodelo.Entidade> entidades, String arquivo) throws Exception {\n        fos = new FileOutputStream(arquivo);\n        out = new ObjectOutputStream(fos);\n        out.writeObject(entidades);\n        out.close();\n        return true;\n    }\n\n    public boolean salvarConexoes(List<ConexaoBD> entidades, String arquivo) throws Exception {\n        fos = new FileOutputStream(arquivo);\n        out = new ObjectOutputStream(fos);\n        out.writeObject(entidades);\n        out.close();\n        return true;\n    }\n\n    public List<jaw.metamodelo.Entidade> abrir(String caminho) throws Exception {\n        List<Entidade> entidades = new Vector();\n        fis = new FileInputStream(caminho);\n        in = new ObjectInputStream(fis);\n        entidades = (Vector<Entidade>) in.readObject();\n        in.close();\n        return entidades;\n    }\n\n    public List<ConexaoBD> abrirConexoes(String caminho) throws Exception {\n        List<ConexaoBD> entidades = new Vector();\n        fis = new FileInputStream(caminho);\n        in = new ObjectInputStream(fis);\n        entidades = (Vector<ConexaoBD>) in.readObject();\n        in.close();\n        return entidades;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/entrada/SerializacaoTest0.java",
		"test_prompt": "// SerializacaoTest0.java\npackage jaw.entrada;\n\n/**\n * @author robson\n */\nimport java.io.FileInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.configuracoes.ConexaoBD;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Serializacao}.\n* It contains ten unit test cases for the {@link Serializacao#salvar(List, String)} method.\n*/\nclass SerializacaoTest0 {"
	},
	{
		"original_code": "// Serializacao.java\npackage jaw.entrada;\n\n/**\n * @author robson\n */\nimport java.io.FileInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.configuracoes.ConexaoBD;\nimport jaw.metamodelo.Entidade;\n\npublic class Serializacao {\n\n    private FileInputStream fis = null;\n\n    private ObjectInputStream in = null;\n\n    public FileOutputStream fos = null;\n\n    public ObjectOutputStream out = null;\n\n    public boolean salvar(List<jaw.metamodelo.Entidade> entidades, String arquivo) throws Exception {\n        fos = new FileOutputStream(arquivo);\n        out = new ObjectOutputStream(fos);\n        out.writeObject(entidades);\n        out.close();\n        return true;\n    }\n\n    public boolean salvarConexoes(List<ConexaoBD> entidades, String arquivo) throws Exception {\n        fos = new FileOutputStream(arquivo);\n        out = new ObjectOutputStream(fos);\n        out.writeObject(entidades);\n        out.close();\n        return true;\n    }\n\n    public List<jaw.metamodelo.Entidade> abrir(String caminho) throws Exception {\n        List<Entidade> entidades = new Vector();\n        fis = new FileInputStream(caminho);\n        in = new ObjectInputStream(fis);\n        entidades = (Vector<Entidade>) in.readObject();\n        in.close();\n        return entidades;\n    }\n\n    public List<ConexaoBD> abrirConexoes(String caminho) throws Exception {\n        List<ConexaoBD> entidades = new Vector();\n        fis = new FileInputStream(caminho);\n        in = new ObjectInputStream(fis);\n        entidades = (Vector<ConexaoBD>) in.readObject();\n        in.close();\n        return entidades;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/entrada/SerializacaoTest1.java",
		"test_prompt": "// SerializacaoTest1.java\npackage jaw.entrada;\n\n/**\n * @author robson\n */\nimport java.io.FileInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.configuracoes.ConexaoBD;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Serializacao}.\n* It contains ten unit test cases for the {@link Serializacao#salvarConexoes(List, String)} method.\n*/\nclass SerializacaoTest1 {"
	},
	{
		"original_code": "// Serializacao.java\npackage jaw.entrada;\n\n/**\n * @author robson\n */\nimport java.io.FileInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.configuracoes.ConexaoBD;\nimport jaw.metamodelo.Entidade;\n\npublic class Serializacao {\n\n    private FileInputStream fis = null;\n\n    private ObjectInputStream in = null;\n\n    public FileOutputStream fos = null;\n\n    public ObjectOutputStream out = null;\n\n    public boolean salvar(List<jaw.metamodelo.Entidade> entidades, String arquivo) throws Exception {\n        fos = new FileOutputStream(arquivo);\n        out = new ObjectOutputStream(fos);\n        out.writeObject(entidades);\n        out.close();\n        return true;\n    }\n\n    public boolean salvarConexoes(List<ConexaoBD> entidades, String arquivo) throws Exception {\n        fos = new FileOutputStream(arquivo);\n        out = new ObjectOutputStream(fos);\n        out.writeObject(entidades);\n        out.close();\n        return true;\n    }\n\n    public List<jaw.metamodelo.Entidade> abrir(String caminho) throws Exception {\n        List<Entidade> entidades = new Vector();\n        fis = new FileInputStream(caminho);\n        in = new ObjectInputStream(fis);\n        entidades = (Vector<Entidade>) in.readObject();\n        in.close();\n        return entidades;\n    }\n\n    public List<ConexaoBD> abrirConexoes(String caminho) throws Exception {\n        List<ConexaoBD> entidades = new Vector();\n        fis = new FileInputStream(caminho);\n        in = new ObjectInputStream(fis);\n        entidades = (Vector<ConexaoBD>) in.readObject();\n        in.close();\n        return entidades;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/entrada/SerializacaoTest2.java",
		"test_prompt": "// SerializacaoTest2.java\npackage jaw.entrada;\n\n/**\n * @author robson\n */\nimport java.io.FileInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.configuracoes.ConexaoBD;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Serializacao}.\n* It contains ten unit test cases for the {@link Serializacao#abrir(String)} method.\n*/\nclass SerializacaoTest2 {"
	},
	{
		"original_code": "// Serializacao.java\npackage jaw.entrada;\n\n/**\n * @author robson\n */\nimport java.io.FileInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.configuracoes.ConexaoBD;\nimport jaw.metamodelo.Entidade;\n\npublic class Serializacao {\n\n    private FileInputStream fis = null;\n\n    private ObjectInputStream in = null;\n\n    public FileOutputStream fos = null;\n\n    public ObjectOutputStream out = null;\n\n    public boolean salvar(List<jaw.metamodelo.Entidade> entidades, String arquivo) throws Exception {\n        fos = new FileOutputStream(arquivo);\n        out = new ObjectOutputStream(fos);\n        out.writeObject(entidades);\n        out.close();\n        return true;\n    }\n\n    public boolean salvarConexoes(List<ConexaoBD> entidades, String arquivo) throws Exception {\n        fos = new FileOutputStream(arquivo);\n        out = new ObjectOutputStream(fos);\n        out.writeObject(entidades);\n        out.close();\n        return true;\n    }\n\n    public List<jaw.metamodelo.Entidade> abrir(String caminho) throws Exception {\n        List<Entidade> entidades = new Vector();\n        fis = new FileInputStream(caminho);\n        in = new ObjectInputStream(fis);\n        entidades = (Vector<Entidade>) in.readObject();\n        in.close();\n        return entidades;\n    }\n\n    public List<ConexaoBD> abrirConexoes(String caminho) throws Exception {\n        List<ConexaoBD> entidades = new Vector();\n        fis = new FileInputStream(caminho);\n        in = new ObjectInputStream(fis);\n        entidades = (Vector<ConexaoBD>) in.readObject();\n        in.close();\n        return entidades;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/entrada/SerializacaoTest3.java",
		"test_prompt": "// SerializacaoTest3.java\npackage jaw.entrada;\n\n/**\n * @author robson\n */\nimport java.io.FileInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.configuracoes.ConexaoBD;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Serializacao}.\n* It contains ten unit test cases for the {@link Serializacao#abrirConexoes(String)} method.\n*/\nclass SerializacaoTest3 {"
	},
	{
		"original_code": "// SerializacaoXML.java\npackage jaw.entrada;\n\nimport com.thoughtworks.xstream.XStream;\nimport java.io.Reader;\nimport java.util.List;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\n\npublic class SerializacaoXML {\n\n    public SerializacaoXML() {\n    }\n\n    public String entidades2XML(List<jaw.metamodelo.Entidade> entidades) {\n        XStream xStream = new XStream();\n        xStream.alias(\"entidade\", Entidade.class);\n        xStream.useAttributeFor(Entidade.class, \"nome\");\n        xStream.useAttributeFor(Entidade.class, \"pacote\");\n        xStream.alias(\"atributo\", Atributo.class);\n        xStream.useAttributeFor(Atributo.class, \"nome\");\n        xStream.useAttributeFor(Atributo.class, \"tipo\");\n        xStream.useAttributeFor(Atributo.class, \"tamanho\");\n        xStream.useAttributeFor(Atributo.class, \"chavePrimaria\");\n        String xml = xStream.toXML(entidades);\n        return xml;\n    }\n\n    public List<Entidade> xml2Entidades(Reader arquivo) {\n        XStream xStream = new XStream();\n        xStream.alias(\"entidade\", Entidade.class);\n        xStream.useAttributeFor(Entidade.class, \"nome\");\n        xStream.useAttributeFor(Entidade.class, \"pacote\");\n        xStream.alias(\"atributo\", Atributo.class);\n        xStream.useAttributeFor(Atributo.class, \"nome\");\n        xStream.useAttributeFor(Atributo.class, \"tipo\");\n        xStream.useAttributeFor(Atributo.class, \"tamanho\");\n        xStream.useAttributeFor(Atributo.class, \"chavePrimaria\");\n        java.util.Vector<jaw.metamodelo.Entidade> entidades = (java.util.Vector<jaw.metamodelo.Entidade>) xStream.fromXML(arquivo);\n        return entidades;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/entrada/SerializacaoXMLTest0.java",
		"test_prompt": "// SerializacaoXMLTest0.java\npackage jaw.entrada;\n\nimport com.thoughtworks.xstream.XStream;\nimport java.io.Reader;\nimport java.util.List;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SerializacaoXML}.\n* It contains ten unit test cases for the {@link SerializacaoXML#entidades2XML(List)} method.\n*/\nclass SerializacaoXMLTest0 {"
	},
	{
		"original_code": "// SerializacaoXML.java\npackage jaw.entrada;\n\nimport com.thoughtworks.xstream.XStream;\nimport java.io.Reader;\nimport java.util.List;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\n\npublic class SerializacaoXML {\n\n    public SerializacaoXML() {\n    }\n\n    public String entidades2XML(List<jaw.metamodelo.Entidade> entidades) {\n        XStream xStream = new XStream();\n        xStream.alias(\"entidade\", Entidade.class);\n        xStream.useAttributeFor(Entidade.class, \"nome\");\n        xStream.useAttributeFor(Entidade.class, \"pacote\");\n        xStream.alias(\"atributo\", Atributo.class);\n        xStream.useAttributeFor(Atributo.class, \"nome\");\n        xStream.useAttributeFor(Atributo.class, \"tipo\");\n        xStream.useAttributeFor(Atributo.class, \"tamanho\");\n        xStream.useAttributeFor(Atributo.class, \"chavePrimaria\");\n        String xml = xStream.toXML(entidades);\n        return xml;\n    }\n\n    public List<Entidade> xml2Entidades(Reader arquivo) {\n        XStream xStream = new XStream();\n        xStream.alias(\"entidade\", Entidade.class);\n        xStream.useAttributeFor(Entidade.class, \"nome\");\n        xStream.useAttributeFor(Entidade.class, \"pacote\");\n        xStream.alias(\"atributo\", Atributo.class);\n        xStream.useAttributeFor(Atributo.class, \"nome\");\n        xStream.useAttributeFor(Atributo.class, \"tipo\");\n        xStream.useAttributeFor(Atributo.class, \"tamanho\");\n        xStream.useAttributeFor(Atributo.class, \"chavePrimaria\");\n        java.util.Vector<jaw.metamodelo.Entidade> entidades = (java.util.Vector<jaw.metamodelo.Entidade>) xStream.fromXML(arquivo);\n        return entidades;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/entrada/SerializacaoXMLTest1.java",
		"test_prompt": "// SerializacaoXMLTest1.java\npackage jaw.entrada;\n\nimport com.thoughtworks.xstream.XStream;\nimport java.io.Reader;\nimport java.util.List;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SerializacaoXML}.\n* It contains ten unit test cases for the {@link SerializacaoXML#xml2Entidades(Reader)} method.\n*/\nclass SerializacaoXMLTest1 {"
	},
	{
		"original_code": "// Conexao.java\npackage jaw.entrada;\n\nimport java.sql.*;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.configuracoes.Mapeamento;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\n\npublic class Conexao {\n\n    private Connection dbConn = null;\n\n    private String driver = \"\";\n\n    private String url = \"\";\n\n    private String banco = \"\";\n\n    private String usuario = \"\";\n\n    private String senha = \"\";\n\n    private boolean alteracao;\n\n    private Collection<String> tiposDeAtributos = new HashSet();\n\n    private List<Entidade> entidades = new Vector();\n\n    public Conexao(String driver, String url, String banco, String usuario, String senha) {\n        this.driver = driver;\n        this.url = url;\n        this.banco = banco;\n        this.usuario = usuario;\n        this.senha = senha;\n    }\n\n    public Conexao() {\n    }\n\n    public void output(String mensagem) {\n        final String msg = mensagem;\n        Thread t = new Thread() {\n\n            @Override\n            public void run() {\n                jaw.Main.janelaPrincipal.log(msg);\n                System.out.println(msg);\n            }\n        };\n        t.start();\n    }\n\n    public void buscarChavesPrimarias() {\n        output(\"Buscando chaves primárias...\");\n        for (Entidade entidade : entidades) {\n            try {\n                ResultSet rr = dbConn.getMetaData().getPrimaryKeys(null, null, entidade.getNome());\n                while (rr.next()) {\n                    /* 1 = Catalogo\n                     * 2 = Esquema\n                     * 3 = Tabela\n                     * 4 = Chave Primaria\n                     * 5 = indice\n                     * 6 = Nome da chave primaria\n                     */\n                    String nomeDaChavePrimaria = rr.getString(4);\n                    for (Atributo atributo : entidade.getAtributos()) {\n                        if (atributo.getNome().equals(nomeDaChavePrimaria)) {\n                            atributo.setChavePrimaria(true);\n                            entidade.getChavesPrimarias().add(atributo);\n                        }\n                    }\n                }\n            } catch (SQLException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n    }\n\n    public void buscarChavesImportadas() {\n        this.output(\"Buscando Chaves importadas...\");\n        Atributo atributo = new Atributo();\n        for (Entidade entidade : entidades) {\n            try {\n                ResultSet rr = dbConn.getMetaData().getImportedKeys(null, null, entidade.getNome());\n                while (rr.next()) {\n                    // Primeiramente, encontrar o atributo que possui a referencia\n                    String nomeDoAtributoQueReferencia = rr.getString(8);\n                    for (Atributo attr : entidade.getAtributos()) {\n                        if (nomeDoAtributoQueReferencia.equals(attr.getNome())) {\n                            atributo = attr;\n                        }\n                    }\n                    // Agora encontrar a entidade referenciada e seu atributo referenciado\n                    String nomeDaEntidadeReferenciada = rr.getString(3);\n                    String nomeDoAtributoReferenciado = rr.getString(4);\n                    for (Entidade ent : entidades) {\n                        if (nomeDaEntidadeReferenciada.equals(ent.getNome())) {\n                            for (Atributo attr : ent.getAtributos()) {\n                                if (nomeDoAtributoReferenciado.equals(attr.getNome())) {\n                                    atributo.setAtributoImportado(attr);\n                                    attr.getAtributosExportados().add(atributo);\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (SQLException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n    }\n\n    private final int ESTAGIO_0 = 0;\n\n    private final int ESTAGIO_1 = 1;\n\n    private final int ESTAGIO_2 = 2;\n\n    private final int ESTAGIO_3 = 3;\n\n    private final int ESTAGIO_4 = 4;\n\n    private final int ESTAGIO_5 = 5;\n\n    private int estagio = 0;\n\n    public List<Entidade> listarEntidades() {\n        this.popular();\n        return entidades;\n    }\n\n    public void popular() {\n        switch(estagio) {\n            case ESTAGIO_0:\n                estagio = -1;\n                this.buscarEntidades();\n                estagio = 1;\n                break;\n            case ESTAGIO_1:\n                estagio = -1;\n                this.buscarAtributos();\n                estagio = 2;\n                break;\n            case ESTAGIO_2:\n                estagio = -1;\n                this.buscarChavesPrimarias();\n                estagio = 3;\n                break;\n            case ESTAGIO_3:\n                estagio = -1;\n                this.buscarChavesImportadas();\n                estagio = 4;\n                break;\n            case ESTAGIO_4:\n                estagio = -1;\n                this.buscarMapeamento();\n                estagio = 5;\n                break;\n            case ESTAGIO_5:\n                estagio = -1;\n                this.desconectar();\n                estagio = 6;\n                break;\n            default:\n                break;\n        }\n    }\n\n    public void buscarMapeamento() {\n        alteracao = Mapeamento.adicionarChaves(tiposDeAtributos);\n        Mapeamento.mapear(entidades);\n    }\n\n    public void buscarEntidades() {\n        this.output(\"Buscando Entidades...\");\n        try {\n            ResultSet rs1;\n            String[] types = { \"TABLE\", \"VIEW\" };\n            rs1 = dbConn.getMetaData().getTables(null, null, \"%\", types);\n            while (rs1.next()) {\n                jaw.metamodelo.Entidade entidade = new jaw.metamodelo.Entidade(rs1.getString(3));\n                entidades.add(entidade);\n            }\n        } catch (Exception ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        }\n    }\n\n    public void buscarAtributos() {\n        this.output(\"Buscando Atributos...\");\n        for (Entidade entidade : entidades) {\n            int colCount = 0;\n            try {\n                Statement stmt = dbConn.createStatement();\n                ResultSet rset = stmt.executeQuery(\"SELECT * from \" + entidade.getNome() + \" WHERE false\");\n                ResultSetMetaData rsmd = rset.getMetaData();\n                colCount = rsmd.getColumnCount();\n                int i = 0;\n                java.util.Vector<jaw.metamodelo.Atributo> vetor = new java.util.Vector();\n                for (i = 0; i < colCount; i++) {\n                    Atributo atributo = new Atributo();\n                    atributo.setEntidade(entidade);\n                    atributo.setNome(rsmd.getColumnName(i + 1));\n                    //jaw.Main.janelaPrincipal.log(\"          \" + atributo.toString());\n                    atributo.setTamanho(rsmd.getColumnDisplaySize(i + 1));\n                    String tipo = rsmd.getColumnTypeName(i + 1);\n                    atributo.setTipo(tipo);\n                    // Todos os tipos são relacionados para\n                    // que possam ser adicionados aos mapeamentos\n                    tiposDeAtributos.add(tipo);\n                    vetor.add(atributo);\n                }\n                entidade.setAtributos(vetor);\n            } catch (Exception e) {\n                jaw.Main.janelaPrincipal.log(e.toString());\n            }\n        }\n    }\n\n    public void conectar() {\n        try {\n            Class.forName(driver);\n        } catch (ClassNotFoundException cnfe) {\n            javax.swing.JOptionPane.showMessageDialog(null, \"Driver não encontrado!  \" + this.driver);\n            jaw.Main.janelaPrincipal.log(cnfe.toString());\n        }\n        try {\n            dbConn = DriverManager.getConnection(this.url + this.banco, this.usuario, this.senha);\n            javax.swing.JOptionPane.showMessageDialog(null, \"Conexão Realizada com Sucesso!\");\n        } catch (SQLException se) {\n            javax.swing.JOptionPane.showMessageDialog(null, \"Não foi possivel conectar ao Banco especificado !  \" + this.url + \",\" + this.banco + \",\" + this.usuario + \",\" + this.senha);\n            jaw.Main.janelaPrincipal.log(se.toString());\n        }\n    }\n\n    public void desconectar() {\n        try {\n            dbConn.close();\n        } catch (SQLException ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        }\n    }\n\n    public boolean getAlteracao() {\n        return this.alteracao;\n    }\n\n    public boolean isConectado() {\n        try {\n            if (dbConn != null) {\n                return !dbConn.isClosed();\n            } else {\n                return false;\n            }\n        } catch (SQLException se) {\n            jaw.Main.janelaPrincipal.log(se.toString());\n        }\n        return false;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/entrada/ConexaoTest0.java",
		"test_prompt": "// ConexaoTest0.java\npackage jaw.entrada;\n\nimport java.sql.*;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.configuracoes.Mapeamento;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Conexao}.\n* It contains ten unit test cases for the {@link Conexao#listarEntidades()} method.\n*/\nclass ConexaoTest0 {"
	},
	{
		"original_code": "// Conexao.java\npackage jaw.entrada;\n\nimport java.sql.*;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.configuracoes.Mapeamento;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\n\npublic class Conexao {\n\n    private Connection dbConn = null;\n\n    private String driver = \"\";\n\n    private String url = \"\";\n\n    private String banco = \"\";\n\n    private String usuario = \"\";\n\n    private String senha = \"\";\n\n    private boolean alteracao;\n\n    private Collection<String> tiposDeAtributos = new HashSet();\n\n    private List<Entidade> entidades = new Vector();\n\n    public Conexao(String driver, String url, String banco, String usuario, String senha) {\n        this.driver = driver;\n        this.url = url;\n        this.banco = banco;\n        this.usuario = usuario;\n        this.senha = senha;\n    }\n\n    public Conexao() {\n    }\n\n    public void output(String mensagem) {\n        final String msg = mensagem;\n        Thread t = new Thread() {\n\n            @Override\n            public void run() {\n                jaw.Main.janelaPrincipal.log(msg);\n                System.out.println(msg);\n            }\n        };\n        t.start();\n    }\n\n    public void buscarChavesPrimarias() {\n        output(\"Buscando chaves primárias...\");\n        for (Entidade entidade : entidades) {\n            try {\n                ResultSet rr = dbConn.getMetaData().getPrimaryKeys(null, null, entidade.getNome());\n                while (rr.next()) {\n                    /* 1 = Catalogo\n                     * 2 = Esquema\n                     * 3 = Tabela\n                     * 4 = Chave Primaria\n                     * 5 = indice\n                     * 6 = Nome da chave primaria\n                     */\n                    String nomeDaChavePrimaria = rr.getString(4);\n                    for (Atributo atributo : entidade.getAtributos()) {\n                        if (atributo.getNome().equals(nomeDaChavePrimaria)) {\n                            atributo.setChavePrimaria(true);\n                            entidade.getChavesPrimarias().add(atributo);\n                        }\n                    }\n                }\n            } catch (SQLException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n    }\n\n    public void buscarChavesImportadas() {\n        this.output(\"Buscando Chaves importadas...\");\n        Atributo atributo = new Atributo();\n        for (Entidade entidade : entidades) {\n            try {\n                ResultSet rr = dbConn.getMetaData().getImportedKeys(null, null, entidade.getNome());\n                while (rr.next()) {\n                    // Primeiramente, encontrar o atributo que possui a referencia\n                    String nomeDoAtributoQueReferencia = rr.getString(8);\n                    for (Atributo attr : entidade.getAtributos()) {\n                        if (nomeDoAtributoQueReferencia.equals(attr.getNome())) {\n                            atributo = attr;\n                        }\n                    }\n                    // Agora encontrar a entidade referenciada e seu atributo referenciado\n                    String nomeDaEntidadeReferenciada = rr.getString(3);\n                    String nomeDoAtributoReferenciado = rr.getString(4);\n                    for (Entidade ent : entidades) {\n                        if (nomeDaEntidadeReferenciada.equals(ent.getNome())) {\n                            for (Atributo attr : ent.getAtributos()) {\n                                if (nomeDoAtributoReferenciado.equals(attr.getNome())) {\n                                    atributo.setAtributoImportado(attr);\n                                    attr.getAtributosExportados().add(atributo);\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (SQLException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n    }\n\n    private final int ESTAGIO_0 = 0;\n\n    private final int ESTAGIO_1 = 1;\n\n    private final int ESTAGIO_2 = 2;\n\n    private final int ESTAGIO_3 = 3;\n\n    private final int ESTAGIO_4 = 4;\n\n    private final int ESTAGIO_5 = 5;\n\n    private int estagio = 0;\n\n    public List<Entidade> listarEntidades() {\n        this.popular();\n        return entidades;\n    }\n\n    public void popular() {\n        switch(estagio) {\n            case ESTAGIO_0:\n                estagio = -1;\n                this.buscarEntidades();\n                estagio = 1;\n                break;\n            case ESTAGIO_1:\n                estagio = -1;\n                this.buscarAtributos();\n                estagio = 2;\n                break;\n            case ESTAGIO_2:\n                estagio = -1;\n                this.buscarChavesPrimarias();\n                estagio = 3;\n                break;\n            case ESTAGIO_3:\n                estagio = -1;\n                this.buscarChavesImportadas();\n                estagio = 4;\n                break;\n            case ESTAGIO_4:\n                estagio = -1;\n                this.buscarMapeamento();\n                estagio = 5;\n                break;\n            case ESTAGIO_5:\n                estagio = -1;\n                this.desconectar();\n                estagio = 6;\n                break;\n            default:\n                break;\n        }\n    }\n\n    public void buscarMapeamento() {\n        alteracao = Mapeamento.adicionarChaves(tiposDeAtributos);\n        Mapeamento.mapear(entidades);\n    }\n\n    public void buscarEntidades() {\n        this.output(\"Buscando Entidades...\");\n        try {\n            ResultSet rs1;\n            String[] types = { \"TABLE\", \"VIEW\" };\n            rs1 = dbConn.getMetaData().getTables(null, null, \"%\", types);\n            while (rs1.next()) {\n                jaw.metamodelo.Entidade entidade = new jaw.metamodelo.Entidade(rs1.getString(3));\n                entidades.add(entidade);\n            }\n        } catch (Exception ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        }\n    }\n\n    public void buscarAtributos() {\n        this.output(\"Buscando Atributos...\");\n        for (Entidade entidade : entidades) {\n            int colCount = 0;\n            try {\n                Statement stmt = dbConn.createStatement();\n                ResultSet rset = stmt.executeQuery(\"SELECT * from \" + entidade.getNome() + \" WHERE false\");\n                ResultSetMetaData rsmd = rset.getMetaData();\n                colCount = rsmd.getColumnCount();\n                int i = 0;\n                java.util.Vector<jaw.metamodelo.Atributo> vetor = new java.util.Vector();\n                for (i = 0; i < colCount; i++) {\n                    Atributo atributo = new Atributo();\n                    atributo.setEntidade(entidade);\n                    atributo.setNome(rsmd.getColumnName(i + 1));\n                    //jaw.Main.janelaPrincipal.log(\"          \" + atributo.toString());\n                    atributo.setTamanho(rsmd.getColumnDisplaySize(i + 1));\n                    String tipo = rsmd.getColumnTypeName(i + 1);\n                    atributo.setTipo(tipo);\n                    // Todos os tipos são relacionados para\n                    // que possam ser adicionados aos mapeamentos\n                    tiposDeAtributos.add(tipo);\n                    vetor.add(atributo);\n                }\n                entidade.setAtributos(vetor);\n            } catch (Exception e) {\n                jaw.Main.janelaPrincipal.log(e.toString());\n            }\n        }\n    }\n\n    public void conectar() {\n        try {\n            Class.forName(driver);\n        } catch (ClassNotFoundException cnfe) {\n            javax.swing.JOptionPane.showMessageDialog(null, \"Driver não encontrado!  \" + this.driver);\n            jaw.Main.janelaPrincipal.log(cnfe.toString());\n        }\n        try {\n            dbConn = DriverManager.getConnection(this.url + this.banco, this.usuario, this.senha);\n            javax.swing.JOptionPane.showMessageDialog(null, \"Conexão Realizada com Sucesso!\");\n        } catch (SQLException se) {\n            javax.swing.JOptionPane.showMessageDialog(null, \"Não foi possivel conectar ao Banco especificado !  \" + this.url + \",\" + this.banco + \",\" + this.usuario + \",\" + this.senha);\n            jaw.Main.janelaPrincipal.log(se.toString());\n        }\n    }\n\n    public void desconectar() {\n        try {\n            dbConn.close();\n        } catch (SQLException ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        }\n    }\n\n    public boolean getAlteracao() {\n        return this.alteracao;\n    }\n\n    public boolean isConectado() {\n        try {\n            if (dbConn != null) {\n                return !dbConn.isClosed();\n            } else {\n                return false;\n            }\n        } catch (SQLException se) {\n            jaw.Main.janelaPrincipal.log(se.toString());\n        }\n        return false;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/entrada/ConexaoTest1.java",
		"test_prompt": "// ConexaoTest1.java\npackage jaw.entrada;\n\nimport java.sql.*;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.configuracoes.Mapeamento;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Conexao}.\n* It contains ten unit test cases for the {@link Conexao#isConectado()} method.\n*/\nclass ConexaoTest1 {"
	},
	{
		"original_code": "// ModeloDeAplicacao.java\npackage jaw.template;\n\nimport com.thoughtworks.xstream.XStream;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Vector;\n\n/**\n * @author flavio\n */\npublic class ModeloDeAplicacao implements Comparable, Serializable {\n\n    private String nome = new String();\n\n    private String descricao = new String();\n\n    private List<TemplateJaw> templates = new Vector();\n\n    private String autor = new String();\n\n    private Date data = new Date();\n\n    public static List<ModeloDeAplicacao> listar() {\n        Vector<ModeloDeAplicacao> vetor = new Vector();\n        File[] lista = new File(jaw.Main.configuracao.getCaminhoDosModelos()).listFiles();\n        for (int i = 0; i < lista.length; i++) {\n            if (!lista[i].getName().endsWith(\"modelo.xml\")) {\n                continue;\n            }\n            try {\n                XStream xStream = new XStream();\n                xStream.alias(\"templateJaw\", TemplateJaw.class);\n                xStream.useAttributeFor(TemplateJaw.class, \"nome\");\n                xStream.useAttributeFor(TemplateJaw.class, \"destino\");\n                xStream.useAttributeFor(TemplateJaw.class, \"nomeDoArquivo\");\n                xStream.useAttributeFor(TemplateJaw.class, \"tipo\");\n                xStream.alias(\"modelo\", ModeloDeAplicacao.class);\n                xStream.useAttributeFor(ModeloDeAplicacao.class, \"nome\");\n                xStream.useAttributeFor(ModeloDeAplicacao.class, \"autor\");\n                xStream.useAttributeFor(ModeloDeAplicacao.class, \"data\");\n                ModeloDeAplicacao m = (ModeloDeAplicacao) xStream.fromXML(new FileReader(lista[i]));\n                vetor.add(m);\n            } catch (Exception e) {\n                jaw.Main.janelaPrincipal.log(e.toString());\n            }\n        }\n        java.util.Collections.sort((List) vetor);\n        return vetor;\n    }\n\n    public void remover() {\n        File arquivo = new File(jaw.Main.configuracao.getCaminhoDosModelos() + this.getNome() + \".modelo.xml\");\n        arquivo.delete();\n    }\n\n    public void salvar() {\n        try {\n            java.io.FileWriter escrevedor = new java.io.FileWriter(jaw.Main.configuracao.getCaminhoDosModelos() + this.getNome() + \".modelo.xml\");\n            XStream xStream = new XStream();\n            xStream.alias(\"templateJaw\", TemplateJaw.class);\n            xStream.useAttributeFor(TemplateJaw.class, \"nome\");\n            xStream.useAttributeFor(TemplateJaw.class, \"destino\");\n            xStream.useAttributeFor(TemplateJaw.class, \"nomeDoArquivo\");\n            xStream.useAttributeFor(TemplateJaw.class, \"tipo\");\n            xStream.alias(\"modelo\", ModeloDeAplicacao.class);\n            xStream.useAttributeFor(ModeloDeAplicacao.class, \"nome\");\n            xStream.useAttributeFor(ModeloDeAplicacao.class, \"autor\");\n            xStream.useAttributeFor(ModeloDeAplicacao.class, \"data\");\n            xStream.toXML(this, escrevedor);\n        } catch (Exception e) {\n            jaw.Main.janelaPrincipal.log(e.toString());\n        }\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getDescricao() {\n        return descricao;\n    }\n\n    public void setDescricao(String descricao) {\n        this.descricao = descricao;\n    }\n\n    public List<TemplateJaw> getTemplates() {\n        return templates;\n    }\n\n    public void setTemplates(List<TemplateJaw> templates) {\n        this.templates = templates;\n    }\n\n    public int compareTo(Object o) {\n        if (o instanceof ModeloDeAplicacao) {\n            return this.getNome().compareTo(((ModeloDeAplicacao) o).getNome());\n        } else {\n            return -1;\n        }\n    }\n\n    public String getAutor() {\n        return autor;\n    }\n\n    public void setAutor(String autor) {\n        this.autor = autor;\n    }\n\n    public Date getData() {\n        return data;\n    }\n\n    public void setData(Date data) {\n        this.data = data;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/template/ModeloDeAplicacaoTest0.java",
		"test_prompt": "// ModeloDeAplicacaoTest0.java\npackage jaw.template;\n\nimport com.thoughtworks.xstream.XStream;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModeloDeAplicacao}.\n* It contains ten unit test cases for the {@link ModeloDeAplicacao#listar()} method.\n*/\nclass ModeloDeAplicacaoTest0 {"
	},
	{
		"original_code": "// ModeloDeAplicacao.java\npackage jaw.template;\n\nimport com.thoughtworks.xstream.XStream;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Vector;\n\n/**\n * @author flavio\n */\npublic class ModeloDeAplicacao implements Comparable, Serializable {\n\n    private String nome = new String();\n\n    private String descricao = new String();\n\n    private List<TemplateJaw> templates = new Vector();\n\n    private String autor = new String();\n\n    private Date data = new Date();\n\n    public static List<ModeloDeAplicacao> listar() {\n        Vector<ModeloDeAplicacao> vetor = new Vector();\n        File[] lista = new File(jaw.Main.configuracao.getCaminhoDosModelos()).listFiles();\n        for (int i = 0; i < lista.length; i++) {\n            if (!lista[i].getName().endsWith(\"modelo.xml\")) {\n                continue;\n            }\n            try {\n                XStream xStream = new XStream();\n                xStream.alias(\"templateJaw\", TemplateJaw.class);\n                xStream.useAttributeFor(TemplateJaw.class, \"nome\");\n                xStream.useAttributeFor(TemplateJaw.class, \"destino\");\n                xStream.useAttributeFor(TemplateJaw.class, \"nomeDoArquivo\");\n                xStream.useAttributeFor(TemplateJaw.class, \"tipo\");\n                xStream.alias(\"modelo\", ModeloDeAplicacao.class);\n                xStream.useAttributeFor(ModeloDeAplicacao.class, \"nome\");\n                xStream.useAttributeFor(ModeloDeAplicacao.class, \"autor\");\n                xStream.useAttributeFor(ModeloDeAplicacao.class, \"data\");\n                ModeloDeAplicacao m = (ModeloDeAplicacao) xStream.fromXML(new FileReader(lista[i]));\n                vetor.add(m);\n            } catch (Exception e) {\n                jaw.Main.janelaPrincipal.log(e.toString());\n            }\n        }\n        java.util.Collections.sort((List) vetor);\n        return vetor;\n    }\n\n    public void remover() {\n        File arquivo = new File(jaw.Main.configuracao.getCaminhoDosModelos() + this.getNome() + \".modelo.xml\");\n        arquivo.delete();\n    }\n\n    public void salvar() {\n        try {\n            java.io.FileWriter escrevedor = new java.io.FileWriter(jaw.Main.configuracao.getCaminhoDosModelos() + this.getNome() + \".modelo.xml\");\n            XStream xStream = new XStream();\n            xStream.alias(\"templateJaw\", TemplateJaw.class);\n            xStream.useAttributeFor(TemplateJaw.class, \"nome\");\n            xStream.useAttributeFor(TemplateJaw.class, \"destino\");\n            xStream.useAttributeFor(TemplateJaw.class, \"nomeDoArquivo\");\n            xStream.useAttributeFor(TemplateJaw.class, \"tipo\");\n            xStream.alias(\"modelo\", ModeloDeAplicacao.class);\n            xStream.useAttributeFor(ModeloDeAplicacao.class, \"nome\");\n            xStream.useAttributeFor(ModeloDeAplicacao.class, \"autor\");\n            xStream.useAttributeFor(ModeloDeAplicacao.class, \"data\");\n            xStream.toXML(this, escrevedor);\n        } catch (Exception e) {\n            jaw.Main.janelaPrincipal.log(e.toString());\n        }\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getDescricao() {\n        return descricao;\n    }\n\n    public void setDescricao(String descricao) {\n        this.descricao = descricao;\n    }\n\n    public List<TemplateJaw> getTemplates() {\n        return templates;\n    }\n\n    public void setTemplates(List<TemplateJaw> templates) {\n        this.templates = templates;\n    }\n\n    public int compareTo(Object o) {\n        if (o instanceof ModeloDeAplicacao) {\n            return this.getNome().compareTo(((ModeloDeAplicacao) o).getNome());\n        } else {\n            return -1;\n        }\n    }\n\n    public String getAutor() {\n        return autor;\n    }\n\n    public void setAutor(String autor) {\n        this.autor = autor;\n    }\n\n    public Date getData() {\n        return data;\n    }\n\n    public void setData(Date data) {\n        this.data = data;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/template/ModeloDeAplicacaoTest1.java",
		"test_prompt": "// ModeloDeAplicacaoTest1.java\npackage jaw.template;\n\nimport com.thoughtworks.xstream.XStream;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModeloDeAplicacao}.\n* It contains ten unit test cases for the {@link ModeloDeAplicacao#compareTo(Object)} method.\n*/\nclass ModeloDeAplicacaoTest1 {"
	},
	{
		"original_code": "// TemplateJaw.java\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage jaw.template;\n\nimport java.io.Serializable;\nimport jaw.util.Conversor;\nimport jaw.metamodelo.Entidade;\n\n/**\n * @author flavio\n */\npublic class TemplateJaw implements Comparable, Serializable {\n\n    private String nome;\n\n    private String velocityTemplate;\n\n    private String destino;\n\n    private String nomeDoArquivo;\n\n    private String descricao;\n\n    private int tipo = 0;\n\n    public static final int INDIVIDUAL = 0;\n\n    public static final int CONJUNTA = 1;\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getVelocityTemplate() {\n        return this.velocityTemplate;\n    }\n\n    public void setVelocityTemplate(String velocityTemplate) {\n        this.velocityTemplate = velocityTemplate;\n    }\n\n    public String getDestino() {\n        return destino.replaceAll(\"\\\\$gerado\\\\$\", jaw.Main.configuracao.getCaminhoDosGerados());\n    }\n\n    public String getDestino(Entidade entidade) {\n        return getDestino().replaceAll(\"\\\\$Entidade\\\\$\", Conversor.toClasse(entidade.getNome())).replaceAll(\"\\\\$entidade\\\\$\", Conversor.toAtributo(entidade.getNome())).replaceAll(\"\\\\$pacote\\\\$\", Conversor.toAtributo(entidade.getPacote()).replaceAll(\"\\\\.\", \"/\"));\n    }\n\n    public void setDestino(String destino) {\n        this.destino = destino.replaceAll(jaw.Main.configuracao.getCaminhoDosGerados(), \"\\\\$gerado\\\\$\");\n    }\n\n    public String getNomeDoArquivo() {\n        return nomeDoArquivo;\n    }\n\n    public String getNomeDoArquivo(Entidade entidade) {\n        return nomeDoArquivo.replaceAll(\"\\\\$Entidade\\\\$\", Conversor.toClasse(entidade.getNome())).replaceAll(\"\\\\$entidade\\\\$\", Conversor.toAtributo(entidade.getNome()));\n    }\n\n    public void setNomeDoArquivo(String nomeDoArquivo) {\n        this.nomeDoArquivo = nomeDoArquivo;\n    }\n\n    public String getDescricao() {\n        return descricao;\n    }\n\n    public void setDescricao(String descricao) {\n        this.descricao = descricao;\n    }\n\n    public int getTipo() {\n        return tipo;\n    }\n\n    public void setTipo(int tipo) {\n        this.tipo = tipo;\n    }\n\n    public int compareTo(Object at) {\n        if (at instanceof TemplateJaw) {\n            return this.getNome().compareTo(((TemplateJaw) at).getNome());\n        } else {\n            return -1;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/template/TemplateJawTest.java",
		"test_prompt": "// TemplateJawTest.java\npackage jaw.template;\n\nimport java.io.Serializable;\nimport jaw.util.Conversor;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TemplateJaw}.\n* It contains ten unit test cases for the {@link TemplateJaw#compareTo(Object)} method.\n*/\nclass TemplateJawTest {"
	},
	{
		"original_code": "// JanelaPrincipal.java\n/*\n * JanelaPrincipal.java\n *\n * Created on 28 de Janeiro de 2008, 00:12\n */\npackage jaw.gui;\n\nimport jaw.gui.GeradorGUI;\nimport java.util.List;\nimport java.util.Vector;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport jaw.configuracoes.ArquivoRecente;\nimport jaw.entrada.Abrir;\nimport jaw.entrada.Salvar;\nimport jaw.gui.templates.GerenciarModelosDeAplicacao;\nimport jaw.metamodelo.Entidade;\n\n/**\n * @author  flavio\n */\npublic class JanelaPrincipal extends javax.swing.JFrame {\n\n    private List<Entidade> entidadesSelecionadas = new Vector();\n\n    private static JanelaPrincipal instance = null;\n\n    /**\n     * Creates new form JanelaPrincipal\n     */\n    private JanelaPrincipal() {\n        initComponents();\n        this.setLocation(420, 200);\n        carregarArquivosRecentes();\n        for (int i = 0; i < 10; i++) {\n            JMenuItem menuItem = new JMenuItem(\"Recente - \" + i);\n        }\n    }\n\n    public ProcessarEntidades getFormAtual() {\n        return (ProcessarEntidadesTabela) jTabbedPane1.getSelectedComponent();\n    }\n\n    public static JanelaPrincipal getInstance() {\n        if (instance == null) {\n            instance = new JanelaPrincipal();\n        }\n        return instance;\n    }\n\n    private void carregarArquivosRecentes() {\n        menuRecentes.removeAll();\n        List<String> arquivos = ArquivoRecente.getArquivos();\n        for (int i = 0; i < arquivos.size(); i++) {\n            JMenuItem menuItem = new JMenuItem(arquivos.get(i));\n            menuItem.addActionListener(new java.awt.event.ActionListener() {\n\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                    abrirRecente(evt);\n                }\n            });\n            menuRecentes.add(menuItem);\n        }\n        menuRecentes.add(jMenuItem5);\n    }\n\n    private void abrirRecente(java.awt.event.ActionEvent evt) {\n        ProcessarEntidadesTabela processar = new ProcessarEntidadesTabela();\n        int pos = jTabbedPane1.getTabCount();\n        jTabbedPane1.add(processar, pos);\n        new Abrir(processar, ((JMenuItem) evt.getSource()).getText());\n        jTabbedPane1.setTitleAt(pos, processar.getNomeArquivoSalvo());\n        jTabbedPane1.setSelectedIndex(pos);\n    }\n\n    public void log(String texto) {\n        this.jTextArea1.setText(jTextArea1.getText() + \"\\n\" + texto);\n    }\n\n    /**\n     * This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n        jTabbedPane1 = new javax.swing.JTabbedPane();\n        jPanel1 = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jTextArea1 = new javax.swing.JTextArea();\n        jPanel2 = new javax.swing.JPanel();\n        jPanel3 = new javax.swing.JPanel();\n        jButton1 = new javax.swing.JButton();\n        jPanel4 = new javax.swing.JPanel();\n        jPanel5 = new javax.swing.JPanel();\n        jToolBar1 = new javax.swing.JToolBar();\n        jPanel6 = new javax.swing.JPanel();\n        jButton2 = new javax.swing.JButton();\n        jButton3 = new javax.swing.JButton();\n        jButton6 = new javax.swing.JButton();\n        jButton7 = new javax.swing.JButton();\n        jPanel7 = new javax.swing.JPanel();\n        jButton4 = new javax.swing.JButton();\n        jButton5 = new javax.swing.JButton();\n        jPanel8 = new javax.swing.JPanel();\n        jButton8 = new javax.swing.JButton();\n        jMenuBar2 = new javax.swing.JMenuBar();\n        jMenu2 = new javax.swing.JMenu();\n        novo = new javax.swing.JMenuItem();\n        abrir = new javax.swing.JMenuItem();\n        salvar = new javax.swing.JMenuItem();\n        salvarComo = new javax.swing.JMenuItem();\n        fechar = new javax.swing.JMenuItem();\n        menuRecentes = new javax.swing.JMenu();\n        jMenuItem5 = new javax.swing.JMenuItem();\n        jSeparator3 = new javax.swing.JSeparator();\n        importarXML = new javax.swing.JMenuItem();\n        exportarXML = new javax.swing.JMenuItem();\n        jSeparator4 = new javax.swing.JSeparator();\n        conexaoBD = new javax.swing.JMenuItem();\n        jSeparator1 = new javax.swing.JSeparator();\n        sair = new javax.swing.JMenuItem();\n        jMenu4 = new javax.swing.JMenu();\n        recortar = new javax.swing.JMenuItem();\n        copiar = new javax.swing.JMenuItem();\n        colar = new javax.swing.JMenuItem();\n        jMenu5 = new javax.swing.JMenu();\n        jMenuItem2 = new javax.swing.JMenuItem();\n        jMenuItem4 = new javax.swing.JMenuItem();\n        jMenu3 = new javax.swing.JMenu();\n        configuracao = new javax.swing.JMenuItem();\n        mapeamentos = new javax.swing.JMenuItem();\n        templatesDeSaida = new javax.swing.JMenuItem();\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n        jTabbedPane1.setPreferredSize(new java.awt.Dimension(800, 600));\n        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);\n        jPanel1.setLayout(new java.awt.BorderLayout());\n        jTextArea1.setColumns(20);\n        jTextArea1.setRows(5);\n        jScrollPane1.setViewportView(jTextArea1);\n        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);\n        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);\n        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));\n        jButton1.setText(\"Limpar\");\n        jButton1.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton1ActionPerformed(evt);\n            }\n        });\n        jPanel3.add(jButton1);\n        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_END);\n        jPanel1.add(jPanel4, java.awt.BorderLayout.LINE_END);\n        jPanel1.add(jPanel5, java.awt.BorderLayout.LINE_START);\n        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);\n        jToolBar1.setRollover(true);\n        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Controle das Entidades\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Dialog\", 0, 11), new java.awt.Color(0, 70, 123)));\n        jPanel6.setPreferredSize(new java.awt.Dimension(986, 60));\n        // NOI18N\n        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/development/BeanAdd16.gif\")));\n        jButton2.setMnemonic('A');\n        jButton2.setText(\"Adicionar\");\n        jButton2.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton2ActionPerformed(evt);\n            }\n        });\n        // NOI18N\n        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/general/Delete16.gif\")));\n        jButton3.setMnemonic('R');\n        jButton3.setText(\"Remover\");\n        jButton3.setPreferredSize(new java.awt.Dimension(113, 26));\n        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                jButton3MouseClicked(evt);\n            }\n        });\n        jButton3.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton3ActionPerformed(evt);\n            }\n        });\n        // NOI18N\n        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/general/Properties24.gif\")));\n        jButton6.setMnemonic('e');\n        jButton6.setText(\"Reset\");\n        jButton6.setPreferredSize(new java.awt.Dimension(113, 26));\n        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                jButton6MouseClicked(evt);\n            }\n        });\n        jButton6.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton6ActionPerformed(evt);\n            }\n        });\n        // NOI18N\n        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/general/Edit16.gif\")));\n        jButton7.setText(\"Alterar\");\n        jButton7.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton7ActionPerformed(evt);\n            }\n        });\n        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);\n        jPanel6.setLayout(jPanel6Layout);\n        jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel6Layout.createSequentialGroup().addContainerGap().addComponent(jButton2).addGap(14, 14, 14).addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(16, 16, 16).addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(16, Short.MAX_VALUE)));\n        jPanel6Layout.setVerticalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel6Layout.createSequentialGroup().addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jButton2).addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))).addContainerGap(20, Short.MAX_VALUE)));\n        jToolBar1.add(jPanel6);\n        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Controle dos Atributos\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Dialog\", 0, 11), new java.awt.Color(0, 7, 123)));\n        jPanel7.setPreferredSize(new java.awt.Dimension(986, 60));\n        jButton4.setMnemonic('d');\n        jButton4.setText(\"Adicionar\");\n        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                jButton4MouseClicked(evt);\n            }\n        });\n        jButton5.setMnemonic('e');\n        jButton5.setText(\"Remover\");\n        jButton5.setPreferredSize(new java.awt.Dimension(113, 26));\n        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);\n        jPanel7.setLayout(jPanel7Layout);\n        jPanel7Layout.setHorizontalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel7Layout.createSequentialGroup().addContainerGap().addComponent(jButton4).addGap(14, 14, 14).addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(19, Short.MAX_VALUE)));\n        jPanel7Layout.setVerticalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel7Layout.createSequentialGroup().addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jButton4).addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(22, Short.MAX_VALUE)));\n        jToolBar1.add(jPanel7);\n        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Gerar código\"));\n        jButton8.setMnemonic('G');\n        jButton8.setText(\"Gerar\");\n        jButton8.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton8ActionPerformed(evt);\n            }\n        });\n        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);\n        jPanel8.setLayout(jPanel8Layout);\n        jPanel8Layout.setHorizontalGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel8Layout.createSequentialGroup().addComponent(jButton8).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));\n        jPanel8Layout.setVerticalGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel8Layout.createSequentialGroup().addComponent(jButton8).addContainerGap(24, Short.MAX_VALUE)));\n        jToolBar1.add(jPanel8);\n        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);\n        jMenu2.setMnemonic('M');\n        jMenu2.setText(\"Menu\");\n        novo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));\n        novo.setText(\"Novo Projeto\");\n        novo.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                novoActionPerformed(evt);\n            }\n        });\n        jMenu2.add(novo);\n        abrir.setMnemonic('A');\n        abrir.setText(\"Abrir Projeto...\");\n        abrir.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                abrirMousePressed(evt);\n            }\n        });\n        abrir.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                abrirActionPerformed(evt);\n            }\n        });\n        jMenu2.add(abrir);\n        salvar.setMnemonic('S');\n        salvar.setText(\"Salvar Projeto...\");\n        salvar.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                salvarMousePressed(evt);\n            }\n        });\n        jMenu2.add(salvar);\n        salvarComo.setMnemonic('a');\n        salvarComo.setText(\"Salvar Como...\");\n        salvarComo.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                salvarComoMousePressed(evt);\n            }\n        });\n        jMenu2.add(salvarComo);\n        fechar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));\n        fechar.setText(\"Fechar projeto atual\");\n        fechar.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                fecharActionPerformed(evt);\n            }\n        });\n        jMenu2.add(fechar);\n        menuRecentes.setText(\"Abrir Recente\");\n        // NOI18N\n        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/general/Delete16.gif\")));\n        jMenuItem5.setText(\"Limpar\");\n        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItem5ActionPerformed(evt);\n            }\n        });\n        menuRecentes.add(jMenuItem5);\n        jMenu2.add(menuRecentes);\n        jMenu2.add(jSeparator3);\n        importarXML.setMnemonic('I');\n        importarXML.setText(\"Importar XML ...\");\n        importarXML.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                importarXMLMousePressed(evt);\n            }\n        });\n        jMenu2.add(importarXML);\n        exportarXML.setMnemonic('E');\n        exportarXML.setText(\"Exportar XML ...\");\n        exportarXML.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                exportarXMLMousePressed(evt);\n            }\n        });\n        jMenu2.add(exportarXML);\n        jMenu2.add(jSeparator4);\n        conexaoBD.setMnemonic('C');\n        conexaoBD.setText(\"Conexão DB...\");\n        conexaoBD.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                conexaoBDActionPerformed(evt);\n            }\n        });\n        jMenu2.add(conexaoBD);\n        jMenu2.add(jSeparator1);\n        sair.setMnemonic('S');\n        sair.setText(\"Sair\");\n        sair.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                sairMouseClicked(evt);\n            }\n\n            public void mousePressed(java.awt.event.MouseEvent evt) {\n                sairMousePressed(evt);\n            }\n        });\n        sair.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                sairActionPerformed(evt);\n            }\n        });\n        jMenu2.add(sair);\n        jMenuBar2.add(jMenu2);\n        jMenu4.setText(\"Editar\");\n        recortar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));\n        // NOI18N\n        recortar.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/general/Cut16.gif\")));\n        recortar.setText(\"Recortar\");\n        recortar.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                recortarActionPerformed(evt);\n            }\n        });\n        jMenu4.add(recortar);\n        copiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));\n        // NOI18N\n        copiar.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/general/Copy16.gif\")));\n        copiar.setText(\"Copiar\");\n        copiar.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                copiarActionPerformed(evt);\n            }\n        });\n        jMenu4.add(copiar);\n        colar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));\n        // NOI18N\n        colar.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/general/Paste16.gif\")));\n        colar.setText(\"Colar\");\n        colar.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                colarActionPerformed(evt);\n            }\n        });\n        jMenu4.add(colar);\n        jMenuBar2.add(jMenu4);\n        jMenu5.setText(\"Visualizar\");\n        jMenuItem2.setText(\"Tabela\");\n        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItem2ActionPerformed(evt);\n            }\n        });\n        jMenu5.add(jMenuItem2);\n        jMenuItem4.setText(\"Árvore\");\n        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jMenuItem4ActionPerformed(evt);\n            }\n        });\n        jMenu5.add(jMenuItem4);\n        jMenuBar2.add(jMenu5);\n        jMenu3.setText(\"Configurações\");\n        configuracao.setText(\"Configuração\");\n        configuracao.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                configuracaoActionPerformed(evt);\n            }\n        });\n        jMenu3.add(configuracao);\n        mapeamentos.setText(\"Mapeamentos\");\n        mapeamentos.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                mapeamentosActionPerformed(evt);\n            }\n        });\n        jMenu3.add(mapeamentos);\n        templatesDeSaida.setText(\"Modelos\");\n        templatesDeSaida.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                templatesDeSaidaActionPerformed(evt);\n            }\n        });\n        jMenu3.add(templatesDeSaida);\n        jMenuBar2.add(jMenu3);\n        setJMenuBar(jMenuBar2);\n        pack();\n    }\n\n    // </editor-fold>//GEN-END:initComponents\n    private void abrirMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_abrirMousePressed\n        this.abrir(Abrir.ABRIR);\n    }\n\n    //GEN-LAST:event_abrirMousePressed\n    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_abrirActionPerformed\n        this.abrir(Abrir.ABRIR_XML);\n    }\n\n    //GEN-LAST:event_abrirActionPerformed\n    private void salvarMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_salvarMousePressed\n        if (jTabbedPane1.getSelectedComponent() != null) {\n            new jaw.entrada.Salvar(((ProcessarEntidadesTabela) jTabbedPane1.getSelectedComponent()), Salvar.SALVAR);\n        }\n    }\n\n    //GEN-LAST:event_salvarMousePressed\n    private void salvarComoMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_salvarComoMousePressed\n        if (jTabbedPane1.getSelectedComponent() != null) {\n            new jaw.entrada.Salvar(((ProcessarEntidadesTabela) jTabbedPane1.getSelectedComponent()), Salvar.SALVAR_COMO);\n        }\n    }\n\n    //GEN-LAST:event_salvarComoMousePressed\n    private void importarXMLMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_importarXMLMousePressed\n        this.abrir(Abrir.ABRIR_XML);\n    }\n\n    //GEN-LAST:event_importarXMLMousePressed\n    private void abrir(int opcao) {\n        ProcessarEntidadesTabela processar = new ProcessarEntidadesTabela();\n        int pos = jTabbedPane1.getTabCount();\n        jTabbedPane1.add(processar, pos);\n        new Abrir(processar, opcao);\n        jTabbedPane1.setTitleAt(pos, processar.getNomeArquivoSalvo());\n        jTabbedPane1.setSelectedIndex(pos);\n        ArquivoRecente.adicionarArquivo(processar.getNomeArquivoSalvo());\n        carregarArquivosRecentes();\n    }\n\n    private void exportarXMLMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_exportarXMLMousePressed\n        new jaw.entrada.Salvar(((ProcessarEntidadesTabela) jTabbedPane1.getSelectedComponent()), Salvar.SALVAR_XML);\n    }\n\n    //GEN-LAST:event_exportarXMLMousePressed\n    private void conexaoBDActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_conexaoBDActionPerformed\n        // Conexao bd\n        final ProcessarEntidades processar = new ProcessarEntidadesTabela();\n        Thread t = new Thread() {\n\n            @Override\n            public void run() {\n                ConexaoBD con = new jaw.gui.ConexaoBD(processar);\n                con.setVisible(true);\n                jTabbedPane1.add(\"Novo Projeto\", processar);\n            }\n        };\n        t.start();\n    }\n\n    //GEN-LAST:event_conexaoBDActionPerformed\n    private void sairMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_sairMouseClicked\n    }\n\n    //GEN-LAST:event_sairMouseClicked\n    private void sairMousePressed(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_sairMousePressed\n        int opc = javax.swing.JOptionPane.showConfirmDialog(null, \"Realmente deseja encerrar a Jaw?\", \"Jaw - Sair\", JOptionPane.YES_NO_OPTION);\n        if (opc == 0 && jTabbedPane1.getTabCount() > 0) {\n            //JOptionPane.YES_NO_OPTION) {\n            if (((ProcessarEntidadesTabela) jTabbedPane1.getSelectedComponent()).getNomeArquivoSalvo().equals(\"\") && ((ProcessarEntidadesTabela) jTabbedPane1.getSelectedComponent()).getEntidades().size() == 0) {\n                System.exit(0);\n            } else {\n                int opc2 = javax.swing.JOptionPane.showConfirmDialog(null, \"Se você não salvar o documento\\n suas alterações serão inválidas.\\n Deseja Salvar as Alterações?\", \"Jaw - Sair\", JOptionPane.YES_NO_CANCEL_OPTION);\n                if (opc2 == 0) {\n                    new jaw.entrada.Salvar(((ProcessarEntidadesTabela) jTabbedPane1.getSelectedComponent()), 30);\n                    System.exit(0);\n                } else {\n                    System.exit(0);\n                }\n            }\n        } else {\n            return;\n        }\n    }\n\n    //GEN-LAST:event_sairMousePressed\n    private void sairActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_sairActionPerformed\n        // TODO adicione seu código de manipulação aqui:\n    }\n\n    //GEN-LAST:event_sairActionPerformed\n    private void configuracaoActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_configuracaoActionPerformed\n        new Configuracoes().setVisible(true);\n    }\n\n    //GEN-LAST:event_configuracaoActionPerformed\n    private void mapeamentosActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_mapeamentosActionPerformed\n        new MapeamentoGUI().setVisible(true);\n    }\n\n    //GEN-LAST:event_mapeamentosActionPerformed\n    private void templatesDeSaidaActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_templatesDeSaidaActionPerformed\n        new GerenciarModelosDeAplicacao(this, true).setVisible(true);\n    }\n\n    //GEN-LAST:event_templatesDeSaidaActionPerformed\n    private void novoActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_novoActionPerformed\n        ProcessarEntidadesTabela processar = new ProcessarEntidadesTabela();\n        int pos = jTabbedPane1.getTabCount();\n        jTabbedPane1.add(processar, pos);\n        jTabbedPane1.setTitleAt(pos, processar.getNomeArquivoSalvo());\n        jTabbedPane1.setSelectedIndex(pos);\n    }\n\n    //GEN-LAST:event_novoActionPerformed\n    private void fecharActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_fecharActionPerformed\n        jTabbedPane1.remove(jTabbedPane1.getSelectedIndex());\n    }\n\n    //GEN-LAST:event_fecharActionPerformed\n    private void recortarActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_recortarActionPerformed\n        if (jTabbedPane1.getTabCount() < 1) {\n            return;\n        }\n        ProcessarEntidadesTabela processar = (ProcessarEntidadesTabela) jTabbedPane1.getSelectedComponent();\n        this.entidadesSelecionadas = processar.selecionarEntidades();\n        processar.removerEntidades();\n    }\n\n    //GEN-LAST:event_recortarActionPerformed\n    private void copiarActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_copiarActionPerformed\n        System.out.println(\"copiar\");\n        if (jTabbedPane1.getTabCount() < 1) {\n            return;\n        }\n        ProcessarEntidadesTabela processar = (ProcessarEntidadesTabela) jTabbedPane1.getSelectedComponent();\n        this.entidadesSelecionadas = processar.selecionarEntidades();\n    }\n\n    //GEN-LAST:event_copiarActionPerformed\n    private void colarActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_colarActionPerformed\n        if (jTabbedPane1.getTabCount() < 1) {\n            return;\n        }\n        ProcessarEntidadesTabela processar = (ProcessarEntidadesTabela) jTabbedPane1.getSelectedComponent();\n        processar.getEntidades().addAll(this.entidadesSelecionadas);\n        processar.atualizarEntidades();\n    }\n\n    //GEN-LAST:event_colarActionPerformed\n    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_jButton1ActionPerformed\n        jTextArea1.setText(\"\");\n    }\n\n    //GEN-LAST:event_jButton1ActionPerformed\n    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_jMenuItem2ActionPerformed\n        // Visualizar Tabela\n        ProcessarEntidades processar = new ProcessarEntidadesTabela();\n        List<Entidade> entidades = new Vector();\n        int selecionado = jTabbedPane1.getSelectedIndex();\n        if (selecionado < 0) {\n            return;\n        }\n        try {\n            entidades = ((ProcessarEntidades) jTabbedPane1.getTabComponentAt(selecionado)).getEntidades();\n        } catch (Exception e) {\n            jaw.Main.janelaPrincipal.log(e.toString());\n            entidades = new Vector();\n        }\n        processar.setEntidades(entidades);\n        int pos = jTabbedPane1.getTabCount();\n        jTabbedPane1.add(processar, pos);\n        jTabbedPane1.setTitleAt(pos, processar.getNomeArquivoSalvo());\n        jTabbedPane1.setSelectedIndex(pos);\n    }\n\n    //GEN-LAST:event_jMenuItem2ActionPerformed\n    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_jMenuItem4ActionPerformed\n        // Visualizar Arvore\n        ProcessarEntidades processar = new ProcessarEntidadesTree();\n        List<Entidade> entidades = new Vector();\n        int selecionado = jTabbedPane1.getSelectedIndex();\n        if (selecionado < 0) {\n            return;\n        }\n        try {\n            ProcessarEntidades temp = this.getFormAtual();\n        } catch (Exception e) {\n            jaw.Main.janelaPrincipal.log(e.toString());\n            entidades = new Vector();\n        }\n        processar.setEntidades(entidades);\n        int pos = jTabbedPane1.getTabCount();\n        jTabbedPane1.add(processar, pos);\n        jTabbedPane1.setTitleAt(pos, processar.getNomeArquivoSalvo());\n        jTabbedPane1.setSelectedIndex(pos);\n    }\n\n    //GEN-LAST:event_jMenuItem4ActionPerformed\n    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_jButton2ActionPerformed\n        try {\n            new AddEntidade(getFormAtual(), -1).setVisible(true);\n            this.getFormAtual().atualizarEntidades();\n        } catch (Exception ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        }\n    }\n\n    //GEN-LAST:event_jButton2ActionPerformed\n    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_jButton3MouseClicked\n    }\n\n    //GEN-LAST:event_jButton3MouseClicked\n    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_jButton3ActionPerformed\n        try {\n            if (getFormAtual().getEntidadeSelecionada() < 0) {\n                javax.swing.JOptionPane.showMessageDialog(null, \"Selecione uma linha ou Carregue as Entidades!\", \"Jaw - Entidades\", JOptionPane.WARNING_MESSAGE);\n                return;\n            } else {\n                int opcao = javax.swing.JOptionPane.showConfirmDialog(null, \"Tem certeza que você deseja remover esta Entidade!\", \"Exclusão de Entidades\", JOptionPane.YES_NO_OPTION);\n                if (opcao == JOptionPane.YES_OPTION) {\n                    getFormAtual().getEntidades().remove(getFormAtual().getEntidadeSelecionada());\n                    getFormAtual().atualizarEntidades();\n                }\n            }\n        } catch (Exception ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        }\n    }\n\n    //GEN-LAST:event_jButton3ActionPerformed\n    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_jButton6MouseClicked\n        // TODO adicione seu código de manipulação aqui:\n    }\n\n    //GEN-LAST:event_jButton6MouseClicked\n    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_jButton6ActionPerformed\n        try {\n            if (javax.swing.JOptionPane.showConfirmDialog(null, \"Realmente deseja resetar a ferramenta?\\nTudo que foi processado e não está salvo será perdido\\nDeseja Continuar?\", \"Jaw - Atenção\", JOptionPane.YES_NO_OPTION) == 0) {\n                this.getFormAtual().getEntidades().clear();\n                this.getFormAtual().atualizarEntidades();\n                this.getFormAtual().resetAtributos();\n            }\n        } catch (Exception ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        }\n    }\n\n    //GEN-LAST:event_jButton6ActionPerformed\n    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_jButton7ActionPerformed\n        //alterar entidade\n        try {\n            int linha = getFormAtual().getEntidadeSelecionada();\n            new AddEntidade(getFormAtual(), linha).setVisible(true);\n            this.getFormAtual().atualizarEntidades();\n        } catch (Exception e) {\n            jaw.Main.janelaPrincipal.log(e.toString());\n        }\n    }\n\n    //GEN-LAST:event_jButton7ActionPerformed\n    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_jButton4MouseClicked\n        try {\n            if (this.getFormAtual().getEntidadeSelecionada() == -1) {\n                javax.swing.JOptionPane.showMessageDialog(null, \"Por Favor Selecione Uma Entidade!\", \"Jaw - Entidades\", JOptionPane.WARNING_MESSAGE);\n                return;\n            }\n            new AddAtributos(getFormAtual()).setVisible(true);\n        } catch (Exception ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        }\n    }\n\n    //GEN-LAST:event_jButton4MouseClicked\n    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_jButton8ActionPerformed\n        try {\n            new GeradorGUI(this.getFormAtual().getEntidades()).setVisible(true);\n        } catch (Exception ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        }\n    }\n\n    //GEN-LAST:event_jButton8ActionPerformed\n    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_jMenuItem5ActionPerformed\n        // Limpar arquivos Recentes\n        ArquivoRecente.limpar();\n        ArquivoRecente.salvarArquivos();\n        this.carregarArquivosRecentes();\n    }\n\n    //GEN-LAST:event_jMenuItem5ActionPerformed\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    private javax.swing.JMenuItem abrir;\n\n    private javax.swing.JMenuItem colar;\n\n    private javax.swing.JMenuItem conexaoBD;\n\n    private javax.swing.JMenuItem configuracao;\n\n    private javax.swing.JMenuItem copiar;\n\n    private javax.swing.JMenuItem exportarXML;\n\n    private javax.swing.JMenuItem fechar;\n\n    private javax.swing.JMenuItem importarXML;\n\n    private javax.swing.JButton jButton1;\n\n    private javax.swing.JButton jButton2;\n\n    private javax.swing.JButton jButton3;\n\n    private javax.swing.JButton jButton4;\n\n    private javax.swing.JButton jButton5;\n\n    private javax.swing.JButton jButton6;\n\n    private javax.swing.JButton jButton7;\n\n    private javax.swing.JButton jButton8;\n\n    private javax.swing.JMenu jMenu2;\n\n    private javax.swing.JMenu jMenu3;\n\n    private javax.swing.JMenu jMenu4;\n\n    private javax.swing.JMenu jMenu5;\n\n    private javax.swing.JMenuBar jMenuBar2;\n\n    private javax.swing.JMenuItem jMenuItem2;\n\n    private javax.swing.JMenuItem jMenuItem4;\n\n    private javax.swing.JMenuItem jMenuItem5;\n\n    private javax.swing.JPanel jPanel1;\n\n    private javax.swing.JPanel jPanel2;\n\n    private javax.swing.JPanel jPanel3;\n\n    private javax.swing.JPanel jPanel4;\n\n    private javax.swing.JPanel jPanel5;\n\n    private javax.swing.JPanel jPanel6;\n\n    private javax.swing.JPanel jPanel7;\n\n    private javax.swing.JPanel jPanel8;\n\n    private javax.swing.JScrollPane jScrollPane1;\n\n    private javax.swing.JSeparator jSeparator1;\n\n    private javax.swing.JSeparator jSeparator3;\n\n    private javax.swing.JSeparator jSeparator4;\n\n    private javax.swing.JTabbedPane jTabbedPane1;\n\n    private javax.swing.JTextArea jTextArea1;\n\n    private javax.swing.JToolBar jToolBar1;\n\n    private javax.swing.JMenuItem mapeamentos;\n\n    private javax.swing.JMenu menuRecentes;\n\n    private javax.swing.JMenuItem novo;\n\n    private javax.swing.JMenuItem recortar;\n\n    private javax.swing.JMenuItem sair;\n\n    private javax.swing.JMenuItem salvar;\n\n    private javax.swing.JMenuItem salvarComo;\n\n    private javax.swing.JMenuItem templatesDeSaida;\n    // End of variables declaration//GEN-END:variables\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/gui/JanelaPrincipalTest.java",
		"test_prompt": "// JanelaPrincipalTest.java\npackage jaw.gui;\n\nimport jaw.gui.GeradorGUI;\nimport java.util.List;\nimport java.util.Vector;\nimport javax.swing.JMenuItem;\nimport javax.swing.JOptionPane;\nimport jaw.configuracoes.ArquivoRecente;\nimport jaw.entrada.Abrir;\nimport jaw.entrada.Salvar;\nimport jaw.gui.templates.GerenciarModelosDeAplicacao;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JanelaPrincipal}.\n* It contains ten unit test cases for the {@link JanelaPrincipal#getInstance()} method.\n*/\nclass JanelaPrincipalTest {"
	},
	{
		"original_code": "// ProcessarEntidadesTree.java\n/*\n * ProcessarEntidadesTree.java\n *\n * Created on 20 de Fevereiro de 2008, 14:43\n */\npackage jaw.gui;\n\nimport java.util.List;\nimport java.util.Vector;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JTree;\nimport javax.swing.tree.DefaultMutableTreeNode;\nimport javax.swing.tree.DefaultTreeCellRenderer;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\n\n/**\n * @author  flavio\n */\npublic class ProcessarEntidadesTree extends ProcessarEntidades {\n\n    private Icon customOpenIcon = new ImageIcon(getClass().getResource(\"/images/development/Bean16.gif\"));\n\n    private Icon customClosedIcon = new ImageIcon(getClass().getResource(\"/images/development/Jar16.gif\"));\n\n    private Icon customLeafIcon = new ImageIcon(getClass().getResource(\"/images/development/Jar16.gif\"));\n\n    private List<Entidade> entidades = new Vector();\n\n    public ProcessarEntidadesTree(List<Entidade> entidades) {\n        this.entidades = entidades;\n        initComponents();\n        construirArvore();\n    }\n\n    public ProcessarEntidadesTree() {\n    }\n\n    public void construirArvore() {\n        DefaultMutableTreeNode root = popularArvore(entidades);\n        jTree1 = new JTree(root);\n        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {\n\n            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {\n                tabelaSelecionada(evt);\n            }\n        });\n        DefaultTreeCellRenderer renderer3 = new DefaultTreeCellRenderer();\n        renderer3.setOpenIcon(customOpenIcon);\n        renderer3.setClosedIcon(customClosedIcon);\n        renderer3.setLeafIcon(customLeafIcon);\n        jTree1.setCellRenderer(renderer3);\n        jScrollPane1.setViewportView(jTree1);\n    }\n\n    private DefaultMutableTreeNode popularArvore(List<Entidade> entidades) {\n        DefaultMutableTreeNode node = new DefaultMutableTreeNode(\"\");\n        DefaultMutableTreeNode entidade;\n        DefaultMutableTreeNode atributo;\n        for (int i = 0; i < entidades.size(); i++) {\n            entidade = new DefaultMutableTreeNode(entidades.get(i).getNome());\n            for (int j = 0; j < entidades.get(i).getAtributos().size(); j++) {\n                atributo = new DefaultMutableTreeNode(entidades.get(i).getAtributos().get(j).getNome());\n                entidade.add(atributo);\n            }\n            node.add(entidade);\n        }\n        return (node);\n    }\n\n    private void tabelaSelecionada(javax.swing.event.TreeSelectionEvent evt) {\n        jTextField1.setText(jTree1.getLastSelectedPathComponent().toString());\n    }\n\n    /**\n     * This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jTree1 = new javax.swing.JTree();\n        jLabel1 = new javax.swing.JLabel();\n        jTextField1 = new javax.swing.JTextField();\n        jTextField2 = new javax.swing.JTextField();\n        jLabel2 = new javax.swing.JLabel();\n        jPanel2 = new javax.swing.JPanel();\n        jScrollPane1.setViewportView(jTree1);\n        jLabel1.setText(\"pacote\");\n        jLabel2.setText(\"nome\");\n        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(\"Atributos\"));\n        jPanel2.setAutoscrolls(true);\n        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\n        jPanel2.setLayout(jPanel2Layout);\n        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 300, Short.MAX_VALUE));\n        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 204, Short.MAX_VALUE));\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(layout.createSequentialGroup().addComponent(jLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));\n        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel1).addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE).addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))).addGroup(layout.createSequentialGroup().addGap(38, 38, 38).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel2).addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));\n    }\n\n    // </editor-fold>//GEN-END:initComponents\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    private javax.swing.JLabel jLabel1;\n\n    private javax.swing.JLabel jLabel2;\n\n    private javax.swing.JPanel jPanel2;\n\n    private javax.swing.JScrollPane jScrollPane1;\n\n    private javax.swing.JTextField jTextField1;\n\n    private javax.swing.JTextField jTextField2;\n\n    private javax.swing.JTree jTree1;\n\n    // End of variables declaration//GEN-END:variables\n    public List<Entidade> selecionarEntidades() {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public void removerEntidades() {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public void carregarEntidades(List<Entidade> vetor) {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public void atualizarEntidades() {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public void listarAtributos() {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public void resetAtributos() {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public List<Entidade> getEntidades() {\n        return new Vector();\n    }\n\n    public void setEntidades(List<Entidade> entidades) {\n        this.entidades = entidades;\n        initComponents();\n        construirArvore();\n    }\n\n    public int getEntidadeSelecionada() {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public void setEntidadeSelecionada(int entidadeSelecionada) {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public int getAtributoSelecionado() {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public void setAtributoSelecionado(int atributoSelecionado) {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public String getNomeArquivoSalvo() {\n        return \"Novo\";\n    }\n\n    public void setNomeArquivoSalvo(String nomeArquivoSalvo) {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public Atributo getAtributo() {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public void setAtributo(Atributo atributo) {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/gui/ProcessarEntidadesTreeTest.java",
		"test_prompt": "// ProcessarEntidadesTreeTest.java\npackage jaw.gui;\n\nimport java.util.List;\nimport java.util.Vector;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JTree;\nimport javax.swing.tree.DefaultMutableTreeNode;\nimport javax.swing.tree.DefaultTreeCellRenderer;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProcessarEntidadesTree}.\n* It contains ten unit test cases for the {@link ProcessarEntidadesTree#selecionarEntidades()} method.\n*/\nclass ProcessarEntidadesTreeTest {"
	},
	{
		"original_code": "// ConexaoBD.java\n/*\n * ConexaoBD.java\n *\n * Created on 12 de Maio de 2007, 19:00\n */\npackage jaw.gui;\n\nimport java.util.List;\nimport javax.swing.JOptionPane;\n\npublic class ConexaoBD extends javax.swing.JFrame {\n\n    private ProcessarEntidades processarEntidade;\n\n    private boolean conectado;\n\n    private List<jaw.configuracoes.ConexaoBD> lista = jaw.configuracoes.ConexaoBD.listar();\n\n    public ConexaoBD(ProcessarEntidades processarEntidade) {\n        initComponents();\n        this.setLocation(450, 200);\n        this.processarEntidade = processarEntidade;\n        this.carregarConexoes();\n    }\n\n    /**\n     * This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n        java.awt.GridBagConstraints gridBagConstraints;\n        jMensagemAlerta = new javax.swing.JOptionPane();\n        jPanel1 = new javax.swing.JPanel();\n        jLabel3 = new javax.swing.JLabel();\n        driver = new javax.swing.JComboBox();\n        jLabel4 = new javax.swing.JLabel();\n        caminho = new javax.swing.JTextField();\n        jLabel5 = new javax.swing.JLabel();\n        base = new javax.swing.JTextField();\n        jLabel6 = new javax.swing.JLabel();\n        usuario = new javax.swing.JTextField();\n        jLabel7 = new javax.swing.JLabel();\n        senha = new javax.swing.JPasswordField();\n        jLabel2 = new javax.swing.JLabel();\n        conexoes = new javax.swing.JComboBox();\n        jPanel2 = new javax.swing.JPanel();\n        jPanel6 = new javax.swing.JPanel();\n        jPanel7 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jPanel3 = new javax.swing.JPanel();\n        conectar = new javax.swing.JButton();\n        cancelar = new javax.swing.JButton();\n        jButton1 = new javax.swing.JButton();\n        jButton2 = new javax.swing.JButton();\n        jPanel4 = new javax.swing.JPanel();\n        jPanel5 = new javax.swing.JPanel();\n        setTitle(\"JAW - Conexao JDBC\");\n        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));\n        setMinimumSize(new java.awt.Dimension(100, 150));\n        setResizable(false);\n        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, \"Dados da Conexão\", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font(\"Dialog\", 0, 11), new java.awt.Color(0, 70, 123)));\n        jPanel1.setPreferredSize(new java.awt.Dimension(100, 150));\n        jPanel1.setLayout(new java.awt.GridBagLayout());\n        jLabel3.setText(\"Driver JDBC\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 6);\n        jPanel1.add(jLabel3, gridBagConstraints);\n        driver.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"Selecione o Driver\", \"org.postgresql.Driver\", \"com.mysql.jdbc.Driver\" }));\n        driver.addFocusListener(new java.awt.event.FocusAdapter() {\n\n            public void focusLost(java.awt.event.FocusEvent evt) {\n                driverFocusLost(evt);\n            }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 1;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 5);\n        jPanel1.add(driver, gridBagConstraints);\n        jLabel4.setText(\"Caminho Banco\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 6);\n        jPanel1.add(jLabel4, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 2;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.ipadx = 67;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;\n        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 5);\n        jPanel1.add(caminho, gridBagConstraints);\n        jLabel5.setText(\"Banco\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 6);\n        jPanel1.add(jLabel5, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 3;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n        gridBagConstraints.ipadx = 67;\n        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 5);\n        jPanel1.add(base, gridBagConstraints);\n        jLabel6.setText(\"Usuário\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 6);\n        jPanel1.add(jLabel6, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 4;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 5);\n        jPanel1.add(usuario, gridBagConstraints);\n        jLabel7.setText(\"Senha\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 5;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 6);\n        jPanel1.add(jLabel7, gridBagConstraints);\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 5;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;\n        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 5);\n        jPanel1.add(senha, gridBagConstraints);\n        jLabel2.setText(\"Selecione uma conexão\");\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 0;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.insets = new java.awt.Insets(3, 6, 3, 6);\n        jPanel1.add(jLabel2, gridBagConstraints);\n        conexoes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\" }));\n        conexoes.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                conexoesActionPerformed(evt);\n            }\n        });\n        gridBagConstraints = new java.awt.GridBagConstraints();\n        gridBagConstraints.gridx = 1;\n        gridBagConstraints.gridy = 0;\n        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 5);\n        jPanel1.add(conexoes, gridBagConstraints);\n        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);\n        jPanel2.setPreferredSize(new java.awt.Dimension(100, 60));\n        jPanel2.setLayout(new java.awt.BorderLayout());\n        jPanel6.setLayout(new java.awt.GridBagLayout());\n        jPanel2.add(jPanel6, java.awt.BorderLayout.NORTH);\n        jPanel7.setLayout(new java.awt.GridBagLayout());\n        jLabel1.setText(\"Conexão JDBC com o Banco de Dados.\");\n        jPanel7.add(jLabel1, new java.awt.GridBagConstraints());\n        jPanel2.add(jPanel7, java.awt.BorderLayout.CENTER);\n        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);\n        jPanel3.setPreferredSize(new java.awt.Dimension(100, 50));\n        // NOI18N\n        conectar.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/general/Import16.gif\")));\n        conectar.setMnemonic('C');\n        conectar.setText(\"Conectar\");\n        conectar.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                conectarActionPerformed(evt);\n            }\n        });\n        jPanel3.add(conectar);\n        // NOI18N\n        cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/general/Stop16.gif\")));\n        cancelar.setMnemonic('a');\n        cancelar.setText(\"Cancelar\");\n        cancelar.setPreferredSize(new java.awt.Dimension(109, 26));\n        cancelar.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                cancelarMouseClicked(evt);\n            }\n        });\n        cancelar.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cancelarActionPerformed(evt);\n            }\n        });\n        cancelar.addKeyListener(new java.awt.event.KeyAdapter() {\n\n            public void keyPressed(java.awt.event.KeyEvent evt) {\n                cancelarKeyPressed(evt);\n            }\n        });\n        jPanel3.add(cancelar);\n        // NOI18N\n        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/general/Save16.gif\")));\n        jButton1.setText(\"Salvar\");\n        jButton1.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton1ActionPerformed(evt);\n            }\n        });\n        jPanel3.add(jButton1);\n        // NOI18N\n        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/images/general/Delete16.gif\")));\n        jButton2.setText(\"Remover\");\n        jButton2.addActionListener(new java.awt.event.ActionListener() {\n\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                jButton2ActionPerformed(evt);\n            }\n        });\n        jPanel3.add(jButton2);\n        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);\n        jPanel4.setPreferredSize(new java.awt.Dimension(3, 150));\n        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);\n        jPanel4.setLayout(jPanel4Layout);\n        jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 3, Short.MAX_VALUE));\n        jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 261, Short.MAX_VALUE));\n        getContentPane().add(jPanel4, java.awt.BorderLayout.EAST);\n        jPanel5.setPreferredSize(new java.awt.Dimension(3, 150));\n        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);\n        jPanel5.setLayout(jPanel5Layout);\n        jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 3, Short.MAX_VALUE));\n        jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 261, Short.MAX_VALUE));\n        getContentPane().add(jPanel5, java.awt.BorderLayout.WEST);\n        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();\n        setBounds((screenSize.width - 468) / 2, (screenSize.height - 400) / 2, 468, 400);\n    }\n\n    // </editor-fold>//GEN-END:initComponents\n    private void driverFocusLost(java.awt.event.FocusEvent evt) {\n        //GEN-FIRST:event_driverFocusLost\n        try {\n            if (this.driver.getModel().getSelectedItem().toString().equals(\"org.postgresql.Driver\")) {\n                this.caminho.setText(\"jdbc:postgresql://localhost:5432/\");\n            } else if (this.driver.getModel().getSelectedItem().toString().equals(\"com.mysql.jdbc.Driver\")) {\n                this.caminho.setText(\"jdbc:mysql://localhost/\");\n            }\n        } catch (Exception e) {\n            jaw.Main.janelaPrincipal.log(e.toString());\n        }\n    }\n\n    //GEN-LAST:event_driverFocusLost\n    private void cancelarKeyPressed(java.awt.event.KeyEvent evt) {\n        //GEN-FIRST:event_cancelarKeyPressed\n        this.setVisible(false);\n        conectado = false;\n    }\n\n    //GEN-LAST:event_cancelarKeyPressed\n    private void cancelarMouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_cancelarMouseClicked\n        this.setVisible(false);\n        conectado = false;\n    }\n\n    //GEN-LAST:event_cancelarMouseClicked\n    private void conectarActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_conectarActionPerformed\n        // TODO add your handling code here:\n        if (!this.driver.getSelectedItem().toString().equals(\"Selecione o Driver\")) {\n            jaw.entrada.Conexao conexao = new jaw.entrada.Conexao(this.driver.getSelectedItem().toString(), this.caminho.getText(), this.base.getText(), this.usuario.getText(), this.senha.getText());\n            conexao.conectar();\n            conectado = true;\n            this.setVisible(false);\n            this.processarEntidade.setNomeArquivoSalvo(\"\");\n            while (conexao.isConectado()) {\n                this.processarEntidade.carregarEntidades(conexao.listarEntidades());\n            }\n            if (conexao.getAlteracao()) {\n                JOptionPane.showMessageDialog(this, \"A conexão detectou tipos desconhecidos pela ferramenta.\\n\" + \"É recomendável ajustar os mapeamentos e reimpotar os dados.\\n\" + \"Clique em Configurações -> Mapeamento para ajustar os mapeamentos.\");\n            }\n        } else {\n            JOptionPane.showMessageDialog(null, \"Por Favor Selecione Um Driver!\");\n            return;\n        }\n    }\n\n    //GEN-LAST:event_conectarActionPerformed\n    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_cancelarActionPerformed\n        // TODO add your handling code here:\n        this.setVisible(false);\n        conectado = false;\n    }\n\n    //GEN-LAST:event_cancelarActionPerformed\n    private void conexoesActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_conexoesActionPerformed\n        //Conexoes\n        if (this.conexoes.getSelectedIndex() < 0) {\n            return;\n        }\n        jaw.configuracoes.ConexaoBD con = lista.get(this.conexoes.getSelectedIndex());\n        caminho.setText(con.getUrl());\n        usuario.setText(con.getUsuario());\n        senha.setText(con.getSenha());\n        driver.getModel().setSelectedItem(con.getDriver());\n        base.setText(con.getBase());\n    }\n\n    //GEN-LAST:event_conexoesActionPerformed\n    private void carregarConexoes() {\n        lista = jaw.configuracoes.ConexaoBD.listar();\n        this.conexoes.removeAllItems();\n        for (jaw.configuracoes.ConexaoBD con : lista) {\n            this.conexoes.addItem(con);\n        }\n    }\n\n    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_jButton1ActionPerformed\n        //Salvar\n        String nome = JOptionPane.showInputDialog(this, \"Entre com um nome para esta conexão\");\n        jaw.configuracoes.ConexaoBD con = new jaw.configuracoes.ConexaoBD();\n        con.setUrl(caminho.getText());\n        con.setUsuario(usuario.getText());\n        con.setSenha(senha.getText());\n        con.setDriver(driver.getModel().getSelectedItem().toString());\n        con.setBase(base.getText());\n        con.setNome(nome);\n        con.adicionar();\n        this.carregarConexoes();\n    }\n\n    //GEN-LAST:event_jButton1ActionPerformed\n    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {\n        //GEN-FIRST:event_jButton2ActionPerformed\n        //Remover\n        lista.get(this.conexoes.getSelectedIndex()).remover();\n        this.carregarConexoes();\n    }\n\n    //GEN-LAST:event_jButton2ActionPerformed\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    private javax.swing.JTextField base;\n\n    private javax.swing.JTextField caminho;\n\n    private javax.swing.JButton cancelar;\n\n    private javax.swing.JButton conectar;\n\n    private javax.swing.JComboBox conexoes;\n\n    private javax.swing.JComboBox driver;\n\n    private javax.swing.JButton jButton1;\n\n    private javax.swing.JButton jButton2;\n\n    private javax.swing.JLabel jLabel1;\n\n    private javax.swing.JLabel jLabel2;\n\n    private javax.swing.JLabel jLabel3;\n\n    private javax.swing.JLabel jLabel4;\n\n    private javax.swing.JLabel jLabel5;\n\n    private javax.swing.JLabel jLabel6;\n\n    private javax.swing.JLabel jLabel7;\n\n    private javax.swing.JOptionPane jMensagemAlerta;\n\n    private javax.swing.JPanel jPanel1;\n\n    private javax.swing.JPanel jPanel2;\n\n    private javax.swing.JPanel jPanel3;\n\n    private javax.swing.JPanel jPanel4;\n\n    private javax.swing.JPanel jPanel5;\n\n    private javax.swing.JPanel jPanel6;\n\n    private javax.swing.JPanel jPanel7;\n\n    private javax.swing.JPasswordField senha;\n\n    private javax.swing.JTextField usuario;\n\n    // End of variables declaration//GEN-END:variables\n    public boolean isConectado() {\n        return conectado;\n    }\n\n    public void setConectado(boolean conectado) {\n        this.conectado = conectado;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/gui/ConexaoBDTest.java",
		"test_prompt": "// ConexaoBDTest.java\npackage jaw.gui;\n\nimport java.util.List;\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConexaoBD}.\n* It contains ten unit test cases for the {@link ConexaoBD#isConectado()} method.\n*/\nclass ConexaoBDTest {"
	},
	{
		"original_code": "// ProcessarEntidadesTabela.java\n/*\n * ProcessarEntidadesTabela.java\n *\n * Created on 13 de Maio de 2007, 12:59\n */\npackage jaw.gui;\n\nimport java.util.List;\nimport java.util.Vector;\nimport javax.swing.JOptionPane;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\n\n/**\n * @author  robson\n */\npublic class ProcessarEntidadesTabela extends ProcessarEntidades {\n\n    /**\n     * Creates new form ProcessarEntidadesTabela\n     */\n    private List<Entidade> entidades = new Vector();\n\n    private Atributo atributo = new Atributo();\n\n    private int entidadeSelecionada = -1;\n\n    private int atributoSelecionado = -1;\n\n    private String nomeArquivoSalvo = \"Novo Projeto\";\n\n    public ProcessarEntidadesTabela() {\n        this.setLocation(420, 200);\n        initComponents();\n    }\n\n    public List<Entidade> selecionarEntidades() {\n        int[] linhas = jTable1.getSelectedRows();\n        Vector<Entidade> lista = new Vector();\n        for (int i = 0; i < linhas.length; i++) {\n            lista.add((Entidade) jTable1.getValueAt(linhas[i], 0));\n        }\n        return lista;\n    }\n\n    public void removerEntidades() {\n        int[] linhas = jTable1.getSelectedRows();\n        for (int i = 0; i < linhas.length; i++) {\n            this.getEntidades().remove(linhas[i]);\n        }\n        this.atualizarEntidades();\n    }\n\n    public void carregarEntidades(List<Entidade> entidades) {\n        this.setEntidades(entidades);\n        ((javax.swing.table.DefaultTableModel) jTable1.getModel()).setRowCount(0);\n        java.util.Collections.sort(this.getEntidades());\n        for (int i = 0; i < entidades.size(); i++) {\n            ((javax.swing.table.DefaultTableModel) jTable1.getModel()).addRow(new Object[] { this.getEntidades().get(i), this.getEntidades().get(i).getPacote() });\n        }\n    }\n\n    public void atualizarEntidades() {\n        ((javax.swing.table.DefaultTableModel) jTable1.getModel()).setRowCount(0);\n        java.util.Collections.sort(this.getEntidades());\n        for (int i = 0; i < this.getEntidades().size(); i++) {\n            ((javax.swing.table.DefaultTableModel) jTable1.getModel()).addRow(new Object[] { this.getEntidades().get(i), this.getEntidades().get(i).getPacote() });\n        }\n    }\n\n    public void listarAtributos() {\n        ((javax.swing.table.DefaultTableModel) jTable2.getModel()).setRowCount(0);\n        int linhaSelecionada = this.jTable1.getSelectedRow();\n        java.util.Collections.sort(this.getEntidades().get(linhaSelecionada).getAtributos());\n        for (int i = 0; i < this.getEntidades().get(linhaSelecionada).getAtributos().size(); i++) {\n            ((javax.swing.table.DefaultTableModel) jTable2.getModel()).addRow(new Object[] { this.getEntidades().get(linhaSelecionada).getAtributos().get(i).getNome(), this.getEntidades().get(linhaSelecionada).getAtributos().get(i).getTipo(), Boolean.FALSE });\n        }\n    }\n\n    public void resetAtributos() {\n        ((javax.swing.table.DefaultTableModel) jTable2.getModel()).setRowCount(0);\n    }\n\n    private void popularEntidades() {\n        if (jTable1.getSelectedRow() == -1) {\n            javax.swing.JOptionPane.showMessageDialog(null, \"Por Favor Selecione Uma Entidade!\", \"Jaw - Entidades\", JOptionPane.WARNING_MESSAGE);\n            return;\n        }\n        this.listarAtributos();\n    }\n\n    public List<Entidade> getEntidades() {\n        return this.entidades;\n    }\n\n    public void setEntidades(List<Entidade> entidades) {\n        this.entidades = entidades;\n        this.atualizarEntidades();\n    }\n\n    public int getEntidadeSelecionada() {\n        return entidadeSelecionada;\n    }\n\n    public void setEntidadeSelecionada(int entidadeSelecionada) {\n        this.entidadeSelecionada = entidadeSelecionada;\n    }\n\n    public int getAtributoSelecionado() {\n        return atributoSelecionado;\n    }\n\n    public void setAtributoSelecionado(int atributoSelecionado) {\n        this.atributoSelecionado = atributoSelecionado;\n    }\n\n    public String getNomeArquivoSalvo() {\n        return nomeArquivoSalvo;\n    }\n\n    public void setNomeArquivoSalvo(String nomeArquivoSalvo) {\n        this.nomeArquivoSalvo = nomeArquivoSalvo;\n    }\n\n    public Atributo getAtributo() {\n        return atributo;\n    }\n\n    public void setAtributo(Atributo atributo) {\n        this.entidades.get(this.entidadeSelecionada).getAtributos().add(atributo);\n        this.listarAtributos();\n    }\n\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n        jPanel1 = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jTable1 = new javax.swing.JTable();\n        jSeparator2 = new javax.swing.JSeparator();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        jTable2 = new javax.swing.JTable();\n        jPanel2 = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n        jPanel4 = new javax.swing.JPanel();\n        jPanel5 = new javax.swing.JPanel();\n        // NOI18N\n        setName(\"FF\");\n        addComponentListener(new java.awt.event.ComponentAdapter() {\n\n            public void componentShown(java.awt.event.ComponentEvent evt) {\n                formComponentShown(evt);\n            }\n        });\n        setLayout(new java.awt.BorderLayout());\n        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));\n        jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] { \"Entidades\", \"Pacote\" }) {\n\n            Class[] types = new Class[] { java.lang.Object.class, java.lang.String.class };\n\n            boolean[] canEdit = new boolean[] { false, false };\n\n            public Class getColumnClass(int columnIndex) {\n                return types[columnIndex];\n            }\n\n            public boolean isCellEditable(int rowIndex, int columnIndex) {\n                return canEdit[columnIndex];\n            }\n        });\n        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {\n\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                jTable1MouseClicked(evt);\n            }\n        });\n        jScrollPane1.setViewportView(jTable1);\n        jPanel1.add(jScrollPane1);\n        jSeparator2.setPreferredSize(new java.awt.Dimension(100, 5));\n        jPanel1.add(jSeparator2);\n        jTable2.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] { \"Nome\", \"Tipo\", \"Selecione\" }) {\n\n            Class[] types = new Class[] { java.lang.String.class, java.lang.String.class, java.lang.Boolean.class };\n\n            boolean[] canEdit = new boolean[] { false, false, true };\n\n            public Class getColumnClass(int columnIndex) {\n                return types[columnIndex];\n            }\n\n            public boolean isCellEditable(int rowIndex, int columnIndex) {\n                return canEdit[columnIndex];\n            }\n        });\n        jScrollPane2.setViewportView(jTable2);\n        jPanel1.add(jScrollPane2);\n        add(jPanel1, java.awt.BorderLayout.CENTER);\n        jPanel2.setPreferredSize(new java.awt.Dimension(100, 40));\n        jPanel2.setLayout(new java.awt.GridBagLayout());\n        jLabel1.setText(\"Extração dos Dados\");\n        jPanel2.add(jLabel1, new java.awt.GridBagConstraints());\n        add(jPanel2, java.awt.BorderLayout.NORTH);\n        jPanel4.setPreferredSize(new java.awt.Dimension(2, 100));\n        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);\n        jPanel4.setLayout(jPanel4Layout);\n        jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 2, Short.MAX_VALUE));\n        jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 690, Short.MAX_VALUE));\n        add(jPanel4, java.awt.BorderLayout.EAST);\n        jPanel5.setPreferredSize(new java.awt.Dimension(2, 100));\n        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);\n        jPanel5.setLayout(jPanel5Layout);\n        jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 2, Short.MAX_VALUE));\n        jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 690, Short.MAX_VALUE));\n        add(jPanel5, java.awt.BorderLayout.WEST);\n    }\n\n    // </editor-fold>//GEN-END:initComponents\n    private void formWindowOpened(java.awt.event.WindowEvent evt) {\n        //GEN-FIRST:event_formWindowOpened\n    }\n\n    //GEN-LAST:event_formWindowOpened\n    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {\n        //GEN-FIRST:event_jTable1MouseClicked\n        this.setEntidadeSelecionada(this.jTable1.getSelectedRow());\n        if (evt.getClickCount() == 2) {\n            this.popularEntidades();\n        }\n    }\n\n    //GEN-LAST:event_jTable1MouseClicked\n    private void formComponentShown(java.awt.event.ComponentEvent evt) {\n        //GEN-FIRST:event_formComponentShown\n    }\n\n    //GEN-LAST:event_formComponentShown\n    /**\n     * @param args the command line arguments\n     */\n    // Variables declaration - do not modify//GEN-BEGIN:variables\n    private javax.swing.JLabel jLabel1;\n\n    private javax.swing.JPanel jPanel1;\n\n    private javax.swing.JPanel jPanel2;\n\n    private javax.swing.JPanel jPanel4;\n\n    private javax.swing.JPanel jPanel5;\n\n    private javax.swing.JScrollPane jScrollPane1;\n\n    private javax.swing.JScrollPane jScrollPane2;\n\n    private javax.swing.JSeparator jSeparator2;\n\n    private javax.swing.JTable jTable1;\n\n    private javax.swing.JTable jTable2;\n    // End of variables declaration//GEN-END:variables\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/gui/ProcessarEntidadesTabelaTest.java",
		"test_prompt": "// ProcessarEntidadesTabelaTest.java\npackage jaw.gui;\n\nimport java.util.List;\nimport java.util.Vector;\nimport javax.swing.JOptionPane;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProcessarEntidadesTabela}.\n* It contains ten unit test cases for the {@link ProcessarEntidadesTabela#selecionarEntidades()} method.\n*/\nclass ProcessarEntidadesTabelaTest {"
	},
	{
		"original_code": "// Configuracao.java\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Vector;\n\n/**\n * @author flavio\n */\npublic class Configuracao extends java.util.Properties {\n\n    private static Configuracao instance = null;\n\n    private String caminhoDosModelos = new String();\n\n    private String caminhoDosProjetos = new String();\n\n    private String caminhoDosGerados = new String();\n\n    private List<Mapeamento> mapeamentos = new Vector();\n\n    private String caminho = \"\";\n\n    protected Configuracao() {\n    }\n\n    public static Configuracao getInstance() {\n        if (instance == null) {\n            instance = new Configuracao();\n        }\n        instance.carregar();\n        return instance;\n    }\n\n    private void carregarCaminho() {\n        setCaminho(new File(\"\").getAbsolutePath() + \"..\");\n        if (!new File(caminho).exists()) {\n            setCaminho(System.getProperty(\"user.home\") + \"/jaw\");\n        }\n    }\n\n    public void carregar() {\n        // se nao houver o diteorio, cria tudo\n        carregarCaminho();\n        try {\n            java.io.FileInputStream in = new java.io.FileInputStream(new java.io.File(getCaminho() + \"/conf/config\"));\n            this.load(in);\n            if (this.getProperty(\"caminhoDosGerados\") != null) {\n                this.setCaminhoDosGerados(this.getProperty(\"caminhoDosGerados\"));\n            }\n            if (this.getProperty(\"caminhoDosProjetos\") != null) {\n                this.setCaminhoDosProjetos(this.getProperty(\"caminhoDosProjetos\"));\n            }\n            if (this.getProperty(\"caminhoDosModelos\") != null) {\n                this.setCaminhoDosModelos(this.getProperty(\"caminhoDosModelos\"));\n            }\n        } catch (Exception e) {\n            jaw.Main.janelaPrincipal.log(e.toString());\n        }\n    }\n\n    public void salvar() {\n        this.setProperty(\"caminhoDosProjetos\", this.getCaminhoDosProjetos());\n        this.setProperty(\"caminhoDosGerados\", this.getCaminhoDosGerados());\n        this.setProperty(\"caminhoDosModelos\", this.getCaminhoDosModelos());\n        try {\n            java.io.OutputStream os = new java.io.FileOutputStream(new java.io.File(System.getProperty(\"user.home\") + \"/jaw/conf/config\"));\n            this.store(os, \"\" + new Date());\n        } catch (Exception e) {\n            jaw.Main.janelaPrincipal.log(e.toString());\n        }\n    }\n\n    public String getCaminhoDosModelos() {\n        if (!this.caminhoDosModelos.endsWith(\"/\")) {\n            this.caminhoDosModelos += \"/\";\n        }\n        return caminhoDosModelos;\n    }\n\n    public void setCaminhoDosModelos(String caminhoDosModelos) {\n        this.caminhoDosModelos = caminhoDosModelos;\n    }\n\n    public String getCaminhoDosProjetos() {\n        if (!this.caminhoDosProjetos.endsWith(\"/\")) {\n            this.caminhoDosProjetos += \"/\";\n        }\n        return caminhoDosProjetos;\n    }\n\n    public void setCaminhoDosProjetos(String caminhoDosProjetos) {\n        this.caminhoDosProjetos = caminhoDosProjetos;\n    }\n\n    public String getCaminhoDosGerados() {\n        if (!this.caminhoDosGerados.endsWith(\"/\")) {\n            this.caminhoDosGerados += \"/\";\n        }\n        return caminhoDosGerados;\n    }\n\n    public void setCaminhoDosGerados(String caminhoDosGerados) {\n        this.caminhoDosGerados = caminhoDosGerados;\n    }\n\n    public List<Mapeamento> getMapeamentos() {\n        return mapeamentos;\n    }\n\n    public String getCaminho() {\n        return caminho;\n    }\n\n    public void setCaminho(String caminho) {\n        this.caminho = caminho;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/configuracoes/ConfiguracaoTest.java",
		"test_prompt": "// ConfiguracaoTest.java\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Configuracao}.\n* It contains ten unit test cases for the {@link Configuracao#getInstance()} method.\n*/\nclass ConfiguracaoTest {"
	},
	{
		"original_code": "// Mapeamento.java\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\n\n/**\n * @author flavio\n */\npublic class Mapeamento {\n\n    private String nome = \"\";\n\n    private Properties mapeamento = new Properties();\n\n    private static final TreeSet<String> chaves = new TreeSet();\n\n    public Mapeamento() {\n    }\n\n    public String toString() {\n        return this.nome;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public Properties getMapeamento() {\n        return mapeamento;\n    }\n\n    public void setMapeamento(Properties mapeamento) {\n        this.mapeamento = mapeamento;\n    }\n\n    public static TreeSet<String> getChaves() {\n        return chaves;\n    }\n\n    public void salvar() {\n        salvar(this);\n    }\n\n    public void remover() {\n        File arquivo = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento/\" + this.getNome() + \".properties\");\n        arquivo.delete();\n    }\n\n    public static void carregarMapeamentos() {\n        jaw.Main.configuracao.getMapeamentos().clear();\n        File[] arquivosDeMapeamento = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento\").listFiles();\n        for (int i = 0; i < arquivosDeMapeamento.length; i++) {\n            try {\n                Properties propriedades = new Properties();\n                java.io.FileInputStream in = null;\n                in = new java.io.FileInputStream(arquivosDeMapeamento[i]);\n                propriedades.load(in);\n                Mapeamento mapeamento = new Mapeamento();\n                mapeamento.setMapeamento(propriedades);\n                mapeamento.setNome(arquivosDeMapeamento[i].getName().replace(\".properties\", \"\"));\n                jaw.Main.configuracao.getMapeamentos().add(mapeamento);\n            } catch (IOException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n        carregarChaves();\n    }\n\n    public static void salvar(List<Mapeamento> mapeamentos) {\n        for (Mapeamento mapeamento : mapeamentos) {\n            salvarIndividual(mapeamento);\n        }\n    }\n\n    private static void salvarIndividual(Mapeamento mapeamento) {\n        java.io.OutputStream os = null;\n        try {\n            File arquivo = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento/\" + mapeamento.getNome() + \".properties\");\n            os = new java.io.FileOutputStream(arquivo);\n            mapeamento.getMapeamento().store(os, new java.util.Date() + \"\");\n        } catch (IOException ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        } finally {\n            try {\n                os.close();\n            } catch (IOException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n    }\n\n    public static void salvar(Mapeamento mapeamento) {\n        salvarIndividual(mapeamento);\n        carregarMapeamentos();\n    }\n\n    public static boolean removerChave(String chave) {\n        System.out.println(chaves.size());\n        chaves.remove(chave);\n        System.out.println(chaves.size());\n        List<Mapeamento> lista = new Vector();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            mapeamento.getMapeamento().remove(chave);\n            lista.add(mapeamento);\n        }\n        salvar(lista);\n        return true;\n    }\n\n    public static boolean adicionarChave(String chave) {\n        boolean alteracao = false;\n        chaves.add(chave);\n        List<Mapeamento> lista = new Vector();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            if (!mapeamento.getMapeamento().containsKey(chave)) {\n                mapeamento.getMapeamento().setProperty(chave, chave);\n                alteracao = true;\n            } else {\n                alteracao = false;\n            }\n            if (alteracao) {\n                lista.add(mapeamento);\n            }\n        }\n        salvar(lista);\n        return alteracao;\n    }\n\n    public static boolean adicionarChaves(Collection<String> chaves) {\n        boolean alteracao = false;\n        for (String chave : chaves) {\n            alteracao = alteracao && adicionarChave(chave);\n        }\n        return alteracao;\n    }\n\n    public static Mapeamento createMapeamento(String nome) {\n        Mapeamento mapeamento = new Mapeamento();\n        mapeamento.setNome(nome);\n        Properties propriedades = mapeamento.getMapeamento();\n        java.util.Enumeration lista = propriedades.propertyNames();\n        while (lista.hasMoreElements()) {\n            String prop = lista.nextElement().toString();\n            propriedades.setProperty(prop, \"\");\n        }\n        return mapeamento;\n    }\n\n    public static void mapear(Atributo atributo) {\n        String chave = atributo.getTipo();\n        Properties propriedades = atributo.getTipos();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            String valor = (mapeamento.getMapeamento().getProperty(chave) == null) ? chave : mapeamento.getMapeamento().getProperty(chave);\n            propriedades.setProperty(mapeamento.getNome(), valor);\n        }\n        atributo.setTipos(propriedades);\n    }\n\n    public static void mapear(Entidade entidade) {\n        for (Atributo atributo : entidade.getAtributos()) {\n            mapear(atributo);\n        }\n    }\n\n    public static void mapear(Collection<Entidade> entidades) {\n        for (Entidade entidade : entidades) {\n            mapear(entidade);\n        }\n    }\n\n    public static void carregarChaves() {\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            java.util.Enumeration lista = mapeamento.getMapeamento().propertyNames();\n            while (lista.hasMoreElements()) {\n                chaves.add(lista.nextElement().toString());\n            }\n        }\n        normalizarMapeamentos();\n    }\n\n    public static void normalizarMapeamentos() {\n        boolean alteracao = false;\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            Properties propriedades = mapeamento.getMapeamento();\n            for (String chave : chaves) {\n                if (!propriedades.containsKey(chave)) {\n                    propriedades.setProperty(chave, chave);\n                    alteracao = true;\n                }\n            }\n            if (alteracao) {\n                salvar(mapeamento);\n                break;\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/configuracoes/MapeamentoTest0.java",
		"test_prompt": "// MapeamentoTest0.java\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Mapeamento}.\n* It contains ten unit test cases for the {@link Mapeamento#getChaves()} method.\n*/\nclass MapeamentoTest0 {"
	},
	{
		"original_code": "// Mapeamento.java\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\n\n/**\n * @author flavio\n */\npublic class Mapeamento {\n\n    private String nome = \"\";\n\n    private Properties mapeamento = new Properties();\n\n    private static final TreeSet<String> chaves = new TreeSet();\n\n    public Mapeamento() {\n    }\n\n    public String toString() {\n        return this.nome;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public Properties getMapeamento() {\n        return mapeamento;\n    }\n\n    public void setMapeamento(Properties mapeamento) {\n        this.mapeamento = mapeamento;\n    }\n\n    public static TreeSet<String> getChaves() {\n        return chaves;\n    }\n\n    public void salvar() {\n        salvar(this);\n    }\n\n    public void remover() {\n        File arquivo = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento/\" + this.getNome() + \".properties\");\n        arquivo.delete();\n    }\n\n    public static void carregarMapeamentos() {\n        jaw.Main.configuracao.getMapeamentos().clear();\n        File[] arquivosDeMapeamento = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento\").listFiles();\n        for (int i = 0; i < arquivosDeMapeamento.length; i++) {\n            try {\n                Properties propriedades = new Properties();\n                java.io.FileInputStream in = null;\n                in = new java.io.FileInputStream(arquivosDeMapeamento[i]);\n                propriedades.load(in);\n                Mapeamento mapeamento = new Mapeamento();\n                mapeamento.setMapeamento(propriedades);\n                mapeamento.setNome(arquivosDeMapeamento[i].getName().replace(\".properties\", \"\"));\n                jaw.Main.configuracao.getMapeamentos().add(mapeamento);\n            } catch (IOException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n        carregarChaves();\n    }\n\n    public static void salvar(List<Mapeamento> mapeamentos) {\n        for (Mapeamento mapeamento : mapeamentos) {\n            salvarIndividual(mapeamento);\n        }\n    }\n\n    private static void salvarIndividual(Mapeamento mapeamento) {\n        java.io.OutputStream os = null;\n        try {\n            File arquivo = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento/\" + mapeamento.getNome() + \".properties\");\n            os = new java.io.FileOutputStream(arquivo);\n            mapeamento.getMapeamento().store(os, new java.util.Date() + \"\");\n        } catch (IOException ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        } finally {\n            try {\n                os.close();\n            } catch (IOException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n    }\n\n    public static void salvar(Mapeamento mapeamento) {\n        salvarIndividual(mapeamento);\n        carregarMapeamentos();\n    }\n\n    public static boolean removerChave(String chave) {\n        System.out.println(chaves.size());\n        chaves.remove(chave);\n        System.out.println(chaves.size());\n        List<Mapeamento> lista = new Vector();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            mapeamento.getMapeamento().remove(chave);\n            lista.add(mapeamento);\n        }\n        salvar(lista);\n        return true;\n    }\n\n    public static boolean adicionarChave(String chave) {\n        boolean alteracao = false;\n        chaves.add(chave);\n        List<Mapeamento> lista = new Vector();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            if (!mapeamento.getMapeamento().containsKey(chave)) {\n                mapeamento.getMapeamento().setProperty(chave, chave);\n                alteracao = true;\n            } else {\n                alteracao = false;\n            }\n            if (alteracao) {\n                lista.add(mapeamento);\n            }\n        }\n        salvar(lista);\n        return alteracao;\n    }\n\n    public static boolean adicionarChaves(Collection<String> chaves) {\n        boolean alteracao = false;\n        for (String chave : chaves) {\n            alteracao = alteracao && adicionarChave(chave);\n        }\n        return alteracao;\n    }\n\n    public static Mapeamento createMapeamento(String nome) {\n        Mapeamento mapeamento = new Mapeamento();\n        mapeamento.setNome(nome);\n        Properties propriedades = mapeamento.getMapeamento();\n        java.util.Enumeration lista = propriedades.propertyNames();\n        while (lista.hasMoreElements()) {\n            String prop = lista.nextElement().toString();\n            propriedades.setProperty(prop, \"\");\n        }\n        return mapeamento;\n    }\n\n    public static void mapear(Atributo atributo) {\n        String chave = atributo.getTipo();\n        Properties propriedades = atributo.getTipos();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            String valor = (mapeamento.getMapeamento().getProperty(chave) == null) ? chave : mapeamento.getMapeamento().getProperty(chave);\n            propriedades.setProperty(mapeamento.getNome(), valor);\n        }\n        atributo.setTipos(propriedades);\n    }\n\n    public static void mapear(Entidade entidade) {\n        for (Atributo atributo : entidade.getAtributos()) {\n            mapear(atributo);\n        }\n    }\n\n    public static void mapear(Collection<Entidade> entidades) {\n        for (Entidade entidade : entidades) {\n            mapear(entidade);\n        }\n    }\n\n    public static void carregarChaves() {\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            java.util.Enumeration lista = mapeamento.getMapeamento().propertyNames();\n            while (lista.hasMoreElements()) {\n                chaves.add(lista.nextElement().toString());\n            }\n        }\n        normalizarMapeamentos();\n    }\n\n    public static void normalizarMapeamentos() {\n        boolean alteracao = false;\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            Properties propriedades = mapeamento.getMapeamento();\n            for (String chave : chaves) {\n                if (!propriedades.containsKey(chave)) {\n                    propriedades.setProperty(chave, chave);\n                    alteracao = true;\n                }\n            }\n            if (alteracao) {\n                salvar(mapeamento);\n                break;\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/configuracoes/MapeamentoTest1.java",
		"test_prompt": "// MapeamentoTest1.java\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Mapeamento}.\n* It contains ten unit test cases for the {@link Mapeamento#removerChave(String)} method.\n*/\nclass MapeamentoTest1 {"
	},
	{
		"original_code": "// Mapeamento.java\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\n\n/**\n * @author flavio\n */\npublic class Mapeamento {\n\n    private String nome = \"\";\n\n    private Properties mapeamento = new Properties();\n\n    private static final TreeSet<String> chaves = new TreeSet();\n\n    public Mapeamento() {\n    }\n\n    public String toString() {\n        return this.nome;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public Properties getMapeamento() {\n        return mapeamento;\n    }\n\n    public void setMapeamento(Properties mapeamento) {\n        this.mapeamento = mapeamento;\n    }\n\n    public static TreeSet<String> getChaves() {\n        return chaves;\n    }\n\n    public void salvar() {\n        salvar(this);\n    }\n\n    public void remover() {\n        File arquivo = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento/\" + this.getNome() + \".properties\");\n        arquivo.delete();\n    }\n\n    public static void carregarMapeamentos() {\n        jaw.Main.configuracao.getMapeamentos().clear();\n        File[] arquivosDeMapeamento = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento\").listFiles();\n        for (int i = 0; i < arquivosDeMapeamento.length; i++) {\n            try {\n                Properties propriedades = new Properties();\n                java.io.FileInputStream in = null;\n                in = new java.io.FileInputStream(arquivosDeMapeamento[i]);\n                propriedades.load(in);\n                Mapeamento mapeamento = new Mapeamento();\n                mapeamento.setMapeamento(propriedades);\n                mapeamento.setNome(arquivosDeMapeamento[i].getName().replace(\".properties\", \"\"));\n                jaw.Main.configuracao.getMapeamentos().add(mapeamento);\n            } catch (IOException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n        carregarChaves();\n    }\n\n    public static void salvar(List<Mapeamento> mapeamentos) {\n        for (Mapeamento mapeamento : mapeamentos) {\n            salvarIndividual(mapeamento);\n        }\n    }\n\n    private static void salvarIndividual(Mapeamento mapeamento) {\n        java.io.OutputStream os = null;\n        try {\n            File arquivo = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento/\" + mapeamento.getNome() + \".properties\");\n            os = new java.io.FileOutputStream(arquivo);\n            mapeamento.getMapeamento().store(os, new java.util.Date() + \"\");\n        } catch (IOException ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        } finally {\n            try {\n                os.close();\n            } catch (IOException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n    }\n\n    public static void salvar(Mapeamento mapeamento) {\n        salvarIndividual(mapeamento);\n        carregarMapeamentos();\n    }\n\n    public static boolean removerChave(String chave) {\n        System.out.println(chaves.size());\n        chaves.remove(chave);\n        System.out.println(chaves.size());\n        List<Mapeamento> lista = new Vector();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            mapeamento.getMapeamento().remove(chave);\n            lista.add(mapeamento);\n        }\n        salvar(lista);\n        return true;\n    }\n\n    public static boolean adicionarChave(String chave) {\n        boolean alteracao = false;\n        chaves.add(chave);\n        List<Mapeamento> lista = new Vector();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            if (!mapeamento.getMapeamento().containsKey(chave)) {\n                mapeamento.getMapeamento().setProperty(chave, chave);\n                alteracao = true;\n            } else {\n                alteracao = false;\n            }\n            if (alteracao) {\n                lista.add(mapeamento);\n            }\n        }\n        salvar(lista);\n        return alteracao;\n    }\n\n    public static boolean adicionarChaves(Collection<String> chaves) {\n        boolean alteracao = false;\n        for (String chave : chaves) {\n            alteracao = alteracao && adicionarChave(chave);\n        }\n        return alteracao;\n    }\n\n    public static Mapeamento createMapeamento(String nome) {\n        Mapeamento mapeamento = new Mapeamento();\n        mapeamento.setNome(nome);\n        Properties propriedades = mapeamento.getMapeamento();\n        java.util.Enumeration lista = propriedades.propertyNames();\n        while (lista.hasMoreElements()) {\n            String prop = lista.nextElement().toString();\n            propriedades.setProperty(prop, \"\");\n        }\n        return mapeamento;\n    }\n\n    public static void mapear(Atributo atributo) {\n        String chave = atributo.getTipo();\n        Properties propriedades = atributo.getTipos();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            String valor = (mapeamento.getMapeamento().getProperty(chave) == null) ? chave : mapeamento.getMapeamento().getProperty(chave);\n            propriedades.setProperty(mapeamento.getNome(), valor);\n        }\n        atributo.setTipos(propriedades);\n    }\n\n    public static void mapear(Entidade entidade) {\n        for (Atributo atributo : entidade.getAtributos()) {\n            mapear(atributo);\n        }\n    }\n\n    public static void mapear(Collection<Entidade> entidades) {\n        for (Entidade entidade : entidades) {\n            mapear(entidade);\n        }\n    }\n\n    public static void carregarChaves() {\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            java.util.Enumeration lista = mapeamento.getMapeamento().propertyNames();\n            while (lista.hasMoreElements()) {\n                chaves.add(lista.nextElement().toString());\n            }\n        }\n        normalizarMapeamentos();\n    }\n\n    public static void normalizarMapeamentos() {\n        boolean alteracao = false;\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            Properties propriedades = mapeamento.getMapeamento();\n            for (String chave : chaves) {\n                if (!propriedades.containsKey(chave)) {\n                    propriedades.setProperty(chave, chave);\n                    alteracao = true;\n                }\n            }\n            if (alteracao) {\n                salvar(mapeamento);\n                break;\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/configuracoes/MapeamentoTest2.java",
		"test_prompt": "// MapeamentoTest2.java\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Mapeamento}.\n* It contains ten unit test cases for the {@link Mapeamento#adicionarChave(String)} method.\n*/\nclass MapeamentoTest2 {"
	},
	{
		"original_code": "// Mapeamento.java\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\n\n/**\n * @author flavio\n */\npublic class Mapeamento {\n\n    private String nome = \"\";\n\n    private Properties mapeamento = new Properties();\n\n    private static final TreeSet<String> chaves = new TreeSet();\n\n    public Mapeamento() {\n    }\n\n    public String toString() {\n        return this.nome;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public Properties getMapeamento() {\n        return mapeamento;\n    }\n\n    public void setMapeamento(Properties mapeamento) {\n        this.mapeamento = mapeamento;\n    }\n\n    public static TreeSet<String> getChaves() {\n        return chaves;\n    }\n\n    public void salvar() {\n        salvar(this);\n    }\n\n    public void remover() {\n        File arquivo = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento/\" + this.getNome() + \".properties\");\n        arquivo.delete();\n    }\n\n    public static void carregarMapeamentos() {\n        jaw.Main.configuracao.getMapeamentos().clear();\n        File[] arquivosDeMapeamento = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento\").listFiles();\n        for (int i = 0; i < arquivosDeMapeamento.length; i++) {\n            try {\n                Properties propriedades = new Properties();\n                java.io.FileInputStream in = null;\n                in = new java.io.FileInputStream(arquivosDeMapeamento[i]);\n                propriedades.load(in);\n                Mapeamento mapeamento = new Mapeamento();\n                mapeamento.setMapeamento(propriedades);\n                mapeamento.setNome(arquivosDeMapeamento[i].getName().replace(\".properties\", \"\"));\n                jaw.Main.configuracao.getMapeamentos().add(mapeamento);\n            } catch (IOException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n        carregarChaves();\n    }\n\n    public static void salvar(List<Mapeamento> mapeamentos) {\n        for (Mapeamento mapeamento : mapeamentos) {\n            salvarIndividual(mapeamento);\n        }\n    }\n\n    private static void salvarIndividual(Mapeamento mapeamento) {\n        java.io.OutputStream os = null;\n        try {\n            File arquivo = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento/\" + mapeamento.getNome() + \".properties\");\n            os = new java.io.FileOutputStream(arquivo);\n            mapeamento.getMapeamento().store(os, new java.util.Date() + \"\");\n        } catch (IOException ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        } finally {\n            try {\n                os.close();\n            } catch (IOException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n    }\n\n    public static void salvar(Mapeamento mapeamento) {\n        salvarIndividual(mapeamento);\n        carregarMapeamentos();\n    }\n\n    public static boolean removerChave(String chave) {\n        System.out.println(chaves.size());\n        chaves.remove(chave);\n        System.out.println(chaves.size());\n        List<Mapeamento> lista = new Vector();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            mapeamento.getMapeamento().remove(chave);\n            lista.add(mapeamento);\n        }\n        salvar(lista);\n        return true;\n    }\n\n    public static boolean adicionarChave(String chave) {\n        boolean alteracao = false;\n        chaves.add(chave);\n        List<Mapeamento> lista = new Vector();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            if (!mapeamento.getMapeamento().containsKey(chave)) {\n                mapeamento.getMapeamento().setProperty(chave, chave);\n                alteracao = true;\n            } else {\n                alteracao = false;\n            }\n            if (alteracao) {\n                lista.add(mapeamento);\n            }\n        }\n        salvar(lista);\n        return alteracao;\n    }\n\n    public static boolean adicionarChaves(Collection<String> chaves) {\n        boolean alteracao = false;\n        for (String chave : chaves) {\n            alteracao = alteracao && adicionarChave(chave);\n        }\n        return alteracao;\n    }\n\n    public static Mapeamento createMapeamento(String nome) {\n        Mapeamento mapeamento = new Mapeamento();\n        mapeamento.setNome(nome);\n        Properties propriedades = mapeamento.getMapeamento();\n        java.util.Enumeration lista = propriedades.propertyNames();\n        while (lista.hasMoreElements()) {\n            String prop = lista.nextElement().toString();\n            propriedades.setProperty(prop, \"\");\n        }\n        return mapeamento;\n    }\n\n    public static void mapear(Atributo atributo) {\n        String chave = atributo.getTipo();\n        Properties propriedades = atributo.getTipos();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            String valor = (mapeamento.getMapeamento().getProperty(chave) == null) ? chave : mapeamento.getMapeamento().getProperty(chave);\n            propriedades.setProperty(mapeamento.getNome(), valor);\n        }\n        atributo.setTipos(propriedades);\n    }\n\n    public static void mapear(Entidade entidade) {\n        for (Atributo atributo : entidade.getAtributos()) {\n            mapear(atributo);\n        }\n    }\n\n    public static void mapear(Collection<Entidade> entidades) {\n        for (Entidade entidade : entidades) {\n            mapear(entidade);\n        }\n    }\n\n    public static void carregarChaves() {\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            java.util.Enumeration lista = mapeamento.getMapeamento().propertyNames();\n            while (lista.hasMoreElements()) {\n                chaves.add(lista.nextElement().toString());\n            }\n        }\n        normalizarMapeamentos();\n    }\n\n    public static void normalizarMapeamentos() {\n        boolean alteracao = false;\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            Properties propriedades = mapeamento.getMapeamento();\n            for (String chave : chaves) {\n                if (!propriedades.containsKey(chave)) {\n                    propriedades.setProperty(chave, chave);\n                    alteracao = true;\n                }\n            }\n            if (alteracao) {\n                salvar(mapeamento);\n                break;\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/configuracoes/MapeamentoTest3.java",
		"test_prompt": "// MapeamentoTest3.java\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Mapeamento}.\n* It contains ten unit test cases for the {@link Mapeamento#adicionarChaves(Collection)} method.\n*/\nclass MapeamentoTest3 {"
	},
	{
		"original_code": "// Mapeamento.java\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\n\n/**\n * @author flavio\n */\npublic class Mapeamento {\n\n    private String nome = \"\";\n\n    private Properties mapeamento = new Properties();\n\n    private static final TreeSet<String> chaves = new TreeSet();\n\n    public Mapeamento() {\n    }\n\n    public String toString() {\n        return this.nome;\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public Properties getMapeamento() {\n        return mapeamento;\n    }\n\n    public void setMapeamento(Properties mapeamento) {\n        this.mapeamento = mapeamento;\n    }\n\n    public static TreeSet<String> getChaves() {\n        return chaves;\n    }\n\n    public void salvar() {\n        salvar(this);\n    }\n\n    public void remover() {\n        File arquivo = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento/\" + this.getNome() + \".properties\");\n        arquivo.delete();\n    }\n\n    public static void carregarMapeamentos() {\n        jaw.Main.configuracao.getMapeamentos().clear();\n        File[] arquivosDeMapeamento = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento\").listFiles();\n        for (int i = 0; i < arquivosDeMapeamento.length; i++) {\n            try {\n                Properties propriedades = new Properties();\n                java.io.FileInputStream in = null;\n                in = new java.io.FileInputStream(arquivosDeMapeamento[i]);\n                propriedades.load(in);\n                Mapeamento mapeamento = new Mapeamento();\n                mapeamento.setMapeamento(propriedades);\n                mapeamento.setNome(arquivosDeMapeamento[i].getName().replace(\".properties\", \"\"));\n                jaw.Main.configuracao.getMapeamentos().add(mapeamento);\n            } catch (IOException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n        carregarChaves();\n    }\n\n    public static void salvar(List<Mapeamento> mapeamentos) {\n        for (Mapeamento mapeamento : mapeamentos) {\n            salvarIndividual(mapeamento);\n        }\n    }\n\n    private static void salvarIndividual(Mapeamento mapeamento) {\n        java.io.OutputStream os = null;\n        try {\n            File arquivo = new File(jaw.Main.configuracao.getCaminho() + \"/mapeamento/\" + mapeamento.getNome() + \".properties\");\n            os = new java.io.FileOutputStream(arquivo);\n            mapeamento.getMapeamento().store(os, new java.util.Date() + \"\");\n        } catch (IOException ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        } finally {\n            try {\n                os.close();\n            } catch (IOException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n    }\n\n    public static void salvar(Mapeamento mapeamento) {\n        salvarIndividual(mapeamento);\n        carregarMapeamentos();\n    }\n\n    public static boolean removerChave(String chave) {\n        System.out.println(chaves.size());\n        chaves.remove(chave);\n        System.out.println(chaves.size());\n        List<Mapeamento> lista = new Vector();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            mapeamento.getMapeamento().remove(chave);\n            lista.add(mapeamento);\n        }\n        salvar(lista);\n        return true;\n    }\n\n    public static boolean adicionarChave(String chave) {\n        boolean alteracao = false;\n        chaves.add(chave);\n        List<Mapeamento> lista = new Vector();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            if (!mapeamento.getMapeamento().containsKey(chave)) {\n                mapeamento.getMapeamento().setProperty(chave, chave);\n                alteracao = true;\n            } else {\n                alteracao = false;\n            }\n            if (alteracao) {\n                lista.add(mapeamento);\n            }\n        }\n        salvar(lista);\n        return alteracao;\n    }\n\n    public static boolean adicionarChaves(Collection<String> chaves) {\n        boolean alteracao = false;\n        for (String chave : chaves) {\n            alteracao = alteracao && adicionarChave(chave);\n        }\n        return alteracao;\n    }\n\n    public static Mapeamento createMapeamento(String nome) {\n        Mapeamento mapeamento = new Mapeamento();\n        mapeamento.setNome(nome);\n        Properties propriedades = mapeamento.getMapeamento();\n        java.util.Enumeration lista = propriedades.propertyNames();\n        while (lista.hasMoreElements()) {\n            String prop = lista.nextElement().toString();\n            propriedades.setProperty(prop, \"\");\n        }\n        return mapeamento;\n    }\n\n    public static void mapear(Atributo atributo) {\n        String chave = atributo.getTipo();\n        Properties propriedades = atributo.getTipos();\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            String valor = (mapeamento.getMapeamento().getProperty(chave) == null) ? chave : mapeamento.getMapeamento().getProperty(chave);\n            propriedades.setProperty(mapeamento.getNome(), valor);\n        }\n        atributo.setTipos(propriedades);\n    }\n\n    public static void mapear(Entidade entidade) {\n        for (Atributo atributo : entidade.getAtributos()) {\n            mapear(atributo);\n        }\n    }\n\n    public static void mapear(Collection<Entidade> entidades) {\n        for (Entidade entidade : entidades) {\n            mapear(entidade);\n        }\n    }\n\n    public static void carregarChaves() {\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            java.util.Enumeration lista = mapeamento.getMapeamento().propertyNames();\n            while (lista.hasMoreElements()) {\n                chaves.add(lista.nextElement().toString());\n            }\n        }\n        normalizarMapeamentos();\n    }\n\n    public static void normalizarMapeamentos() {\n        boolean alteracao = false;\n        for (Mapeamento mapeamento : jaw.Main.configuracao.getMapeamentos()) {\n            Properties propriedades = mapeamento.getMapeamento();\n            for (String chave : chaves) {\n                if (!propriedades.containsKey(chave)) {\n                    propriedades.setProperty(chave, chave);\n                    alteracao = true;\n                }\n            }\n            if (alteracao) {\n                salvar(mapeamento);\n                break;\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/configuracoes/MapeamentoTest4.java",
		"test_prompt": "// MapeamentoTest4.java\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.TreeSet;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport jaw.metamodelo.Atributo;\nimport jaw.metamodelo.Entidade;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Mapeamento}.\n* It contains ten unit test cases for the {@link Mapeamento#createMapeamento(String)} method.\n*/\nclass MapeamentoTest4 {"
	},
	{
		"original_code": "// ArquivoRecente.java\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * @author flavio\n */\npublic class ArquivoRecente {\n\n    private static Properties arquivos = new Properties();\n\n    public static List<String> getArquivos() {\n        Vector<String> lista = new Vector();\n        String caminho = jaw.Main.configuracao.getCaminho();\n        arquivos = new Properties();\n        File arquivo = new java.io.File(caminho + \"/conf/arquivosRecentes.properties\");\n        if (!arquivo.exists()) {\n            try {\n                arquivo.createNewFile();\n            } catch (IOException ex) {\n                jaw.Main.janelaPrincipal.log(ex.toString());\n            }\n        }\n        try {\n            java.io.FileInputStream in = new java.io.FileInputStream(arquivo);\n            arquivos.load(in);\n        } catch (Exception e) {\n            jaw.Main.janelaPrincipal.log(e.toString());\n        }\n        Enumeration nomes = arquivos.propertyNames();\n        while (nomes.hasMoreElements()) {\n            lista.add(nomes.nextElement().toString());\n        }\n        return lista;\n    }\n\n    public static void adicionarArquivo(String arquivo) {\n        arquivos.setProperty(arquivo, new Date().toString());\n        salvarArquivos();\n    }\n\n    public static void salvarArquivos() {\n        String caminho = jaw.Main.configuracao.getCaminho();\n        File arquivo = new java.io.File(caminho + \"/conf/arquivosRecentes.properties\");\n        try {\n            arquivo.createNewFile();\n            java.io.OutputStream os = new java.io.FileOutputStream(arquivo);\n            arquivos.store(os, \"\" + new Date());\n        } catch (Exception e) {\n            jaw.Main.janelaPrincipal.log(e.toString());\n        }\n    }\n\n    public static void limpar() {\n        arquivos.clear();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/configuracoes/ArquivoRecenteTest.java",
		"test_prompt": "// ArquivoRecenteTest.java\npackage jaw.configuracoes;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ArquivoRecente}.\n* It contains ten unit test cases for the {@link ArquivoRecente#getArquivos()} method.\n*/\nclass ArquivoRecenteTest {"
	},
	{
		"original_code": "// ConexaoBD.java\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage jaw.configuracoes;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.entrada.Serializacao;\n\n/**\n * @author flavio\n */\npublic class ConexaoBD implements Serializable, Comparable {\n\n    private String nome = new String();\n\n    private String usuario = new String();\n\n    private String senha = new String();\n\n    private String url = new String();\n\n    private String driver = new String();\n\n    private String base = new String();\n\n    private static List<ConexaoBD> lista = new Vector();\n\n    private static String caminho = jaw.Main.configuracao.getCaminho() + \"/conf/conexaoBD.ser.jaw\";\n\n    @Override\n    public String toString() {\n        return this.nome;\n    }\n\n    public static List<ConexaoBD> listar() {\n        try {\n            Serializacao ser = new Serializacao();\n            lista = ser.abrirConexoes(caminho);\n        } catch (Exception ex) {\n            jaw.Main.janelaPrincipal.log(\"Erro ao listar conexões BD \" + ex.toString());\n        }\n        Collections.sort(lista);\n        return lista;\n    }\n\n    public static void adicionar(ConexaoBD conexao) {\n        if (lista.contains(conexao)) {\n            return;\n        }\n        lista.add(conexao);\n        ConexaoBD.salvar(lista);\n    }\n\n    public void adicionar() {\n        ConexaoBD.adicionar(this);\n    }\n\n    public static void remover(ConexaoBD conexao) {\n        lista.remove(conexao);\n        ConexaoBD.salvar(lista);\n    }\n\n    public void remover() {\n        ConexaoBD.remover(this);\n    }\n\n    private static void salvar(List<ConexaoBD> lista) {\n        try {\n            Serializacao ser = new Serializacao();\n            ser.salvarConexoes(lista, caminho);\n        } catch (Exception ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        }\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getUsuario() {\n        return usuario;\n    }\n\n    public void setUsuario(String usuario) {\n        this.usuario = usuario;\n    }\n\n    public String getSenha() {\n        return senha;\n    }\n\n    public void setSenha(String senha) {\n        this.senha = senha;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public String getDriver() {\n        return driver;\n    }\n\n    public void setDriver(String driver) {\n        this.driver = driver;\n    }\n\n    public int compareTo(Object o) {\n        return ((ConexaoBD) o).getNome().compareTo(this.getNome());\n    }\n\n    public String getBase() {\n        return base;\n    }\n\n    public void setBase(String base) {\n        this.base = base;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/configuracoes/ConexaoBDTest0.java",
		"test_prompt": "// ConexaoBDTest0.java\npackage jaw.configuracoes;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.entrada.Serializacao;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConexaoBD}.\n* It contains ten unit test cases for the {@link ConexaoBD#listar()} method.\n*/\nclass ConexaoBDTest0 {"
	},
	{
		"original_code": "// ConexaoBD.java\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage jaw.configuracoes;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.entrada.Serializacao;\n\n/**\n * @author flavio\n */\npublic class ConexaoBD implements Serializable, Comparable {\n\n    private String nome = new String();\n\n    private String usuario = new String();\n\n    private String senha = new String();\n\n    private String url = new String();\n\n    private String driver = new String();\n\n    private String base = new String();\n\n    private static List<ConexaoBD> lista = new Vector();\n\n    private static String caminho = jaw.Main.configuracao.getCaminho() + \"/conf/conexaoBD.ser.jaw\";\n\n    @Override\n    public String toString() {\n        return this.nome;\n    }\n\n    public static List<ConexaoBD> listar() {\n        try {\n            Serializacao ser = new Serializacao();\n            lista = ser.abrirConexoes(caminho);\n        } catch (Exception ex) {\n            jaw.Main.janelaPrincipal.log(\"Erro ao listar conexões BD \" + ex.toString());\n        }\n        Collections.sort(lista);\n        return lista;\n    }\n\n    public static void adicionar(ConexaoBD conexao) {\n        if (lista.contains(conexao)) {\n            return;\n        }\n        lista.add(conexao);\n        ConexaoBD.salvar(lista);\n    }\n\n    public void adicionar() {\n        ConexaoBD.adicionar(this);\n    }\n\n    public static void remover(ConexaoBD conexao) {\n        lista.remove(conexao);\n        ConexaoBD.salvar(lista);\n    }\n\n    public void remover() {\n        ConexaoBD.remover(this);\n    }\n\n    private static void salvar(List<ConexaoBD> lista) {\n        try {\n            Serializacao ser = new Serializacao();\n            ser.salvarConexoes(lista, caminho);\n        } catch (Exception ex) {\n            jaw.Main.janelaPrincipal.log(ex.toString());\n        }\n    }\n\n    public String getNome() {\n        return nome;\n    }\n\n    public void setNome(String nome) {\n        this.nome = nome;\n    }\n\n    public String getUsuario() {\n        return usuario;\n    }\n\n    public void setUsuario(String usuario) {\n        this.usuario = usuario;\n    }\n\n    public String getSenha() {\n        return senha;\n    }\n\n    public void setSenha(String senha) {\n        this.senha = senha;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public String getDriver() {\n        return driver;\n    }\n\n    public void setDriver(String driver) {\n        this.driver = driver;\n    }\n\n    public int compareTo(Object o) {\n        return ((ConexaoBD) o).getNome().compareTo(this.getNome());\n    }\n\n    public String getBase() {\n        return base;\n    }\n\n    public void setBase(String base) {\n        this.base = base;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/87_jaw-br/src/main/java/jaw/configuracoes/ConexaoBDTest1.java",
		"test_prompt": "// ConexaoBDTest1.java\npackage jaw.configuracoes;\n\nimport java.io.Serializable;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Vector;\nimport jaw.entrada.Serializacao;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConexaoBD}.\n* It contains ten unit test cases for the {@link ConexaoBD#compareTo(Object)} method.\n*/\nclass ConexaoBDTest1 {"
	}
]