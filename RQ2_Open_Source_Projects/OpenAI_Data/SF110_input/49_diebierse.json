[
	{
		"original_code": "// Drink.java\n/**\r\n */\r\npackage bierse.model;\r\n\r\nimport java.awt.event.KeyEvent;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileWriter;\r\nimport org.jdom.Document;\r\nimport org.jdom.Element;\r\nimport org.jdom.input.SAXBuilder;\r\nimport org.jdom.output.XMLOutputter;\r\nimport bierse.view.MyKeyMap;\r\n\r\n/**\r\n * @author Rainer Friesen\r\n */\r\npublic class Drink {\r\n\r\n    public static final String DRINKS_FOLDER = Model.CONFIG_FOLDER + \"drinks/\";\r\n\r\n    public static final String NEW_DRINK_NAME = \"Neues Getrï¿½nk\";\r\n\r\n    /**\r\n     * Name of the drink\r\n     */\r\n    private String name;\r\n\r\n    /**\r\n     * Minimum price(Cent) for what the drink is sold.\r\n     */\r\n    private int minPrice = 70;\r\n\r\n    /**\r\n     * Maximum price(Cent) for what the drink is sold,\r\n     */\r\n    private int maxPrice = 130;\r\n\r\n    /**\r\n     * Current price(Cent) of the drink.\r\n     */\r\n    private int currentPrice = 0;\r\n\r\n    /**\r\n     * Start price for this drink\r\n     */\r\n    private int startPrice = 100;\r\n\r\n    /**\r\n     * Amount of drinks sold in the last iteration\r\n     */\r\n    private int lastSold = 0;\r\n\r\n    /**\r\n     * The total amount of drinks sold\r\n     */\r\n    private int totalSold = 0;\r\n\r\n    /**\r\n     * The average amount of drinks sold in an iteration. Used to calculate the new price.\r\n     */\r\n    private float averageAmount = 0;\r\n\r\n    /**\r\n     * The average price in cent\r\n     */\r\n    private float averagePrice = 0;\r\n\r\n    /**\r\n     * The average price (Cent) for what the drink is sold\r\n     */\r\n    private float averageSoldPrice = 0;\r\n\r\n    /**\r\n     * The maximum difference between two prices in one iteration\r\n     */\r\n    private int maxStep = 20;\r\n\r\n    /**\r\n     * The target amount of drinks to keep the price stable\r\n     */\r\n    private int targetAmount = 20;\r\n\r\n    /**\r\n     * The delta to calculate the step width. If the targetAmount - delta is not reached\r\n     * the price is decreased by the maximum step. If the targetAmount + delta is reached\r\n     * the price is increased by the maximum step.\r\n     */\r\n    private int deltaAmount = 15;\r\n\r\n    /**\r\n     * Show if the drink is used currently\r\n     */\r\n    private boolean used = true;\r\n\r\n    /**\r\n     * Key used to indicate the sell of a drink\r\n     */\r\n    private int key = KeyEvent.VK_F1;\r\n\r\n    /**\r\n     * Show if the price is lower (-1), equal(0) or higher(1) than during the last iteration\r\n     */\r\n    private int trend = 0;\r\n\r\n    /**\r\n     * Keep the price and do no new calculation\r\n     */\r\n    private boolean keepPrice = false;\r\n\r\n    /**\r\n     * Set the new price directly without calculating\r\n     */\r\n    private int directPrice = 0;\r\n\r\n    /**\r\n     * Model that uses the drink\r\n     */\r\n    Model model;\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Constructor\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    public Drink(String name, Model model) {\r\n        this.name = name;\r\n        this.model = model;\r\n        load();\r\n        currentPrice = startPrice;\r\n    }\r\n\r\n    public Drink(String name, Model model, int startPrice) {\r\n        this(name, model);\r\n        currentPrice = startPrice;\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Methods\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    /**\r\n     * Sell the amount of drinks\r\n     *\r\n     * @param amount Amount of drinks sold\r\n     */\r\n    public synchronized void sell(int amount) {\r\n        lastSold += amount;\r\n        model.informModelChangedListeners(Model.EVENT_DRINK_SOLD);\r\n    }\r\n\r\n    public void setDirectPrice(int directPrice) {\r\n        this.directPrice = directPrice;\r\n        model.informModelChangedListeners(Model.EVENT_DRINK_LIST_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Recalculate the current price for this drink\r\n     */\r\n    public int recalculate() {\r\n        //Calculate new average values\r\n        totalSold += lastSold;\r\n        averageAmount = (float) totalSold / model.getIteration();\r\n        averagePrice = ((averagePrice * (model.getIteration() - 1)) + currentPrice) / model.getIteration();\r\n        if (totalSold > 0) {\r\n            averageSoldPrice = ((averageSoldPrice * (totalSold - lastSold)) + (currentPrice * lastSold)) / totalSold;\r\n        }\r\n        int newPrice;\r\n        if (directPrice != 0) {\r\n            // If a direct price was set, use it\r\n            newPrice = directPrice;\r\n            directPrice = 0;\r\n        } else if (keepPrice) {\r\n            // Keep the price\r\n            newPrice = currentPrice;\r\n        } else {\r\n            // Calculate the new price\r\n            double diffSold = lastSold - targetAmount;\r\n            double factor = diffSold / deltaAmount;\r\n            double change = factor * maxStep;\r\n            int priceSteps = model.getSettings().getPriceSteps();\r\n            double rest = Math.floor(Math.abs(change % priceSteps));\r\n            double full = Math.floor(Math.abs(change / priceSteps));\r\n            int priceChange = 0;\r\n            if (rest >= priceSteps / 2) {\r\n                priceChange = priceSteps;\r\n            }\r\n            priceChange += full * priceSteps;\r\n            // Check that the change of the price is not more than the max step\r\n            if (priceChange > maxStep) {\r\n                priceChange = maxStep;\r\n            }\r\n            if (model.getSettings().isStandardLogic()) {\r\n                if (factor >= 0) {\r\n                    newPrice = currentPrice + priceChange;\r\n                } else {\r\n                    newPrice = currentPrice - priceChange;\r\n                }\r\n            } else {\r\n                // Inverse logic\r\n                if (factor >= 0) {\r\n                    newPrice = currentPrice - priceChange;\r\n                } else {\r\n                    newPrice = currentPrice + priceChange;\r\n                }\r\n            }\r\n        }\r\n        // Check that the new price is not above the max price or below the min price\r\n        if (newPrice > maxPrice) {\r\n            newPrice = maxPrice;\r\n        } else if (newPrice < minPrice) {\r\n            newPrice = minPrice;\r\n        }\r\n        // Calculate the trend\r\n        if (newPrice > currentPrice) {\r\n            trend = 1;\r\n        } else if (newPrice < currentPrice) {\r\n            trend = -1;\r\n        } else {\r\n            trend = 0;\r\n        }\r\n        currentPrice = newPrice;\r\n        //Debug output\r\n        model.getLog().debug(\"Recalculating drink: \" + name + \" for iteration: \" + model.getIteration());\r\n        model.getLog().debug(\"Last sold: \" + lastSold);\r\n        model.getLog().debug(\"Total sold:\" + totalSold);\r\n        model.getLog().debug(\"Average sold: \" + averageAmount);\r\n        model.getLog().debug(\"Average price: \" + averagePrice);\r\n        model.getLog().debug(\"Average sold price: \" + averageSoldPrice);\r\n        model.getLog().debug(\"New price: \" + currentPrice);\r\n        // Reset values for the next iteration\r\n        lastSold = 0;\r\n        return currentPrice;\r\n    }\r\n\r\n    /**\r\n     * Save the drink description to a XML file\r\n     */\r\n    public File save() {\r\n        if (!NEW_DRINK_NAME.equals(name)) {\r\n            model.getLog().debug(\"Save drink: \" + name);\r\n            // Build JDOM document representing the settings\r\n            Element root = new Element(\"drink\");\r\n            Element minPriceElem = new Element(\"minPrice\");\r\n            minPriceElem.setText(String.valueOf(minPrice));\r\n            root.addContent(minPriceElem);\r\n            Element maxPriceElem = new Element(\"maxPrice\");\r\n            maxPriceElem.setText(String.valueOf(maxPrice));\r\n            root.addContent(maxPriceElem);\r\n            Element startPriceElem = new Element(\"startPrice\");\r\n            startPriceElem.setText(String.valueOf(startPrice));\r\n            root.addContent(startPriceElem);\r\n            Element targetAmountElem = new Element(\"targetAmount\");\r\n            targetAmountElem.setText(String.valueOf(targetAmount));\r\n            root.addContent(targetAmountElem);\r\n            Element deltaAmountElem = new Element(\"deltaAmount\");\r\n            deltaAmountElem.setText(String.valueOf(deltaAmount));\r\n            root.addContent(deltaAmountElem);\r\n            Element maxStepElem = new Element(\"maxStep\");\r\n            maxStepElem.setText(String.valueOf(maxStep));\r\n            root.addContent(maxStepElem);\r\n            Element usedElem = new Element(\"used\");\r\n            usedElem.setText(String.valueOf(used));\r\n            root.addContent(usedElem);\r\n            Element keyElem = new Element(\"key\");\r\n            keyElem.setText(String.valueOf(key));\r\n            root.addContent(keyElem);\r\n            Document settingsDoc = new Document(root);\r\n            // Save JDOM document to file system\r\n            File folder = new File(DRINKS_FOLDER);\r\n            File file = new File(DRINKS_FOLDER + name + \".xml\");\r\n            try {\r\n                if (!folder.exists()) {\r\n                    folder.mkdirs();\r\n                }\r\n                model.getLog().debug(\"File for Drink: \" + file.getAbsolutePath());\r\n                if (file.exists()) {\r\n                    file.delete();\r\n                }\r\n                file.createNewFile();\r\n                FileOutputStream fos = new FileOutputStream(file);\r\n                XMLOutputter serializer = new XMLOutputter();\r\n                serializer.output(settingsDoc, fos);\r\n                fos.flush();\r\n                fos.close();\r\n            } catch (Exception e) {\r\n                model.getLog().error(this, e);\r\n            }\r\n            return file;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Load the description from a XML file\r\n     */\r\n    public void load() {\r\n        model.getLog().debug(\"Load drink: \" + name);\r\n        try {\r\n            File file = new File(DRINKS_FOLDER + name + \".xml\");\r\n            model.getLog().debug(\"File for Drink: \" + file.getAbsolutePath());\r\n            if (file.exists()) {\r\n                SAXBuilder builder = new SAXBuilder();\r\n                Document doc = builder.build(file);\r\n                Element root = doc.getRootElement();\r\n                minPrice = Integer.valueOf(root.getChildText(\"minPrice\"));\r\n                maxPrice = Integer.valueOf(root.getChildText(\"maxPrice\"));\r\n                startPrice = Integer.valueOf(root.getChildText(\"startPrice\"));\r\n                targetAmount = Integer.valueOf(root.getChildText(\"targetAmount\"));\r\n                deltaAmount = Integer.valueOf(root.getChildText(\"deltaAmount\"));\r\n                maxStep = Integer.valueOf(root.getChildText(\"maxStep\"));\r\n                used = Boolean.parseBoolean(root.getChildText(\"used\"));\r\n                key = Integer.valueOf(root.getChildText(\"key\"));\r\n            }\r\n        } catch (Exception e1) {\r\n            model.getLog().error(this, e1);\r\n        }\r\n    }\r\n\r\n    public String toString() {\r\n        return name;\r\n    }\r\n\r\n    public static String getDataHeaderString() {\r\n        return \"NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD\";\r\n    }\r\n\r\n    public String getDataString() {\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(name);\r\n        result.append(Model.DELIMITER);\r\n        result.append(minPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(startPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(maxPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averageAmount);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averagePrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averageSoldPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(totalSold);\r\n        return result.toString();\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Getters and Setters\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    public int getMinPrice() {\r\n        return minPrice;\r\n    }\r\n\r\n    public void setMinPrice(int minPrice) {\r\n        this.minPrice = minPrice;\r\n    }\r\n\r\n    public int getMaxPrice() {\r\n        return maxPrice;\r\n    }\r\n\r\n    public void setMaxPrice(int maxPrice) {\r\n        this.maxPrice = maxPrice;\r\n    }\r\n\r\n    public int getCurrentPrice() {\r\n        return currentPrice;\r\n    }\r\n\r\n    public void setCurrentPrice(int currentPrice) {\r\n        this.currentPrice = currentPrice;\r\n    }\r\n\r\n    public int getLastSold() {\r\n        return lastSold;\r\n    }\r\n\r\n    public void setLastSold(int lastSold) {\r\n        this.lastSold = lastSold;\r\n    }\r\n\r\n    public int getTotalSold() {\r\n        return totalSold;\r\n    }\r\n\r\n    public void setTotalSold(int totalSold) {\r\n        this.totalSold = totalSold;\r\n    }\r\n\r\n    public float getAverageAmount() {\r\n        return averageAmount;\r\n    }\r\n\r\n    public void setAverageAmount(float averageAmount) {\r\n        this.averageAmount = averageAmount;\r\n    }\r\n\r\n    public float getAveragePrice() {\r\n        return averagePrice;\r\n    }\r\n\r\n    public void setAveragePrice(float averagePrice) {\r\n        this.averagePrice = averagePrice;\r\n    }\r\n\r\n    public float getAverageSoldPrice() {\r\n        return averageSoldPrice;\r\n    }\r\n\r\n    public void setAverageSoldPrice(float averageSoldPrice) {\r\n        this.averageSoldPrice = averageSoldPrice;\r\n    }\r\n\r\n    public int getMaxStep() {\r\n        return maxStep;\r\n    }\r\n\r\n    public void setMaxStep(int maxStep) {\r\n        this.maxStep = maxStep;\r\n    }\r\n\r\n    public int getTargetAmount() {\r\n        return targetAmount;\r\n    }\r\n\r\n    public void setTargetAmount(int targetAmount) {\r\n        this.targetAmount = targetAmount;\r\n    }\r\n\r\n    public int getDeltaAmount() {\r\n        return deltaAmount;\r\n    }\r\n\r\n    public void setDeltaAmount(int deltaAmount) {\r\n        this.deltaAmount = deltaAmount;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public int getStartPrice() {\r\n        return startPrice;\r\n    }\r\n\r\n    public void setStartPrice(int startPrice) {\r\n        this.startPrice = startPrice;\r\n    }\r\n\r\n    public boolean isUsed() {\r\n        return used;\r\n    }\r\n\r\n    public void setUsed(boolean used) {\r\n        this.used = used;\r\n    }\r\n\r\n    public int getKey() {\r\n        return key;\r\n    }\r\n\r\n    public void setKey(int key) {\r\n        this.key = key;\r\n    }\r\n\r\n    public int getTrend() {\r\n        return trend;\r\n    }\r\n\r\n    public boolean isKeepPrice() {\r\n        return keepPrice;\r\n    }\r\n\r\n    public void setKeepPrice(boolean keepPrice) {\r\n        this.keepPrice = keepPrice;\r\n    }\r\n\r\n    public int getDirectPrice() {\r\n        return directPrice;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        Drink drink = (Drink) obj;\r\n        if (name == null && drink.getName() == null) {\r\n            return true;\r\n        } else if (name != null && drink.getName() != null) {\r\n            return name.equals(((Drink) obj).getName());\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/model/DrinkTest0.java",
		"test_prompt": "// DrinkTest0.java\npackage bierse.model;\n\nimport java.awt.event.KeyEvent;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport bierse.view.MyKeyMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Drink}.\n* It contains ten unit test cases for the {@link Drink#recalculate()} method.\n*/\nclass DrinkTest0 {"
	},
	{
		"original_code": "// Drink.java\n/**\r\n */\r\npackage bierse.model;\r\n\r\nimport java.awt.event.KeyEvent;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileWriter;\r\nimport org.jdom.Document;\r\nimport org.jdom.Element;\r\nimport org.jdom.input.SAXBuilder;\r\nimport org.jdom.output.XMLOutputter;\r\nimport bierse.view.MyKeyMap;\r\n\r\n/**\r\n * @author Rainer Friesen\r\n */\r\npublic class Drink {\r\n\r\n    public static final String DRINKS_FOLDER = Model.CONFIG_FOLDER + \"drinks/\";\r\n\r\n    public static final String NEW_DRINK_NAME = \"Neues Getrï¿½nk\";\r\n\r\n    /**\r\n     * Name of the drink\r\n     */\r\n    private String name;\r\n\r\n    /**\r\n     * Minimum price(Cent) for what the drink is sold.\r\n     */\r\n    private int minPrice = 70;\r\n\r\n    /**\r\n     * Maximum price(Cent) for what the drink is sold,\r\n     */\r\n    private int maxPrice = 130;\r\n\r\n    /**\r\n     * Current price(Cent) of the drink.\r\n     */\r\n    private int currentPrice = 0;\r\n\r\n    /**\r\n     * Start price for this drink\r\n     */\r\n    private int startPrice = 100;\r\n\r\n    /**\r\n     * Amount of drinks sold in the last iteration\r\n     */\r\n    private int lastSold = 0;\r\n\r\n    /**\r\n     * The total amount of drinks sold\r\n     */\r\n    private int totalSold = 0;\r\n\r\n    /**\r\n     * The average amount of drinks sold in an iteration. Used to calculate the new price.\r\n     */\r\n    private float averageAmount = 0;\r\n\r\n    /**\r\n     * The average price in cent\r\n     */\r\n    private float averagePrice = 0;\r\n\r\n    /**\r\n     * The average price (Cent) for what the drink is sold\r\n     */\r\n    private float averageSoldPrice = 0;\r\n\r\n    /**\r\n     * The maximum difference between two prices in one iteration\r\n     */\r\n    private int maxStep = 20;\r\n\r\n    /**\r\n     * The target amount of drinks to keep the price stable\r\n     */\r\n    private int targetAmount = 20;\r\n\r\n    /**\r\n     * The delta to calculate the step width. If the targetAmount - delta is not reached\r\n     * the price is decreased by the maximum step. If the targetAmount + delta is reached\r\n     * the price is increased by the maximum step.\r\n     */\r\n    private int deltaAmount = 15;\r\n\r\n    /**\r\n     * Show if the drink is used currently\r\n     */\r\n    private boolean used = true;\r\n\r\n    /**\r\n     * Key used to indicate the sell of a drink\r\n     */\r\n    private int key = KeyEvent.VK_F1;\r\n\r\n    /**\r\n     * Show if the price is lower (-1), equal(0) or higher(1) than during the last iteration\r\n     */\r\n    private int trend = 0;\r\n\r\n    /**\r\n     * Keep the price and do no new calculation\r\n     */\r\n    private boolean keepPrice = false;\r\n\r\n    /**\r\n     * Set the new price directly without calculating\r\n     */\r\n    private int directPrice = 0;\r\n\r\n    /**\r\n     * Model that uses the drink\r\n     */\r\n    Model model;\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Constructor\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    public Drink(String name, Model model) {\r\n        this.name = name;\r\n        this.model = model;\r\n        load();\r\n        currentPrice = startPrice;\r\n    }\r\n\r\n    public Drink(String name, Model model, int startPrice) {\r\n        this(name, model);\r\n        currentPrice = startPrice;\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Methods\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    /**\r\n     * Sell the amount of drinks\r\n     *\r\n     * @param amount Amount of drinks sold\r\n     */\r\n    public synchronized void sell(int amount) {\r\n        lastSold += amount;\r\n        model.informModelChangedListeners(Model.EVENT_DRINK_SOLD);\r\n    }\r\n\r\n    public void setDirectPrice(int directPrice) {\r\n        this.directPrice = directPrice;\r\n        model.informModelChangedListeners(Model.EVENT_DRINK_LIST_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Recalculate the current price for this drink\r\n     */\r\n    public int recalculate() {\r\n        //Calculate new average values\r\n        totalSold += lastSold;\r\n        averageAmount = (float) totalSold / model.getIteration();\r\n        averagePrice = ((averagePrice * (model.getIteration() - 1)) + currentPrice) / model.getIteration();\r\n        if (totalSold > 0) {\r\n            averageSoldPrice = ((averageSoldPrice * (totalSold - lastSold)) + (currentPrice * lastSold)) / totalSold;\r\n        }\r\n        int newPrice;\r\n        if (directPrice != 0) {\r\n            // If a direct price was set, use it\r\n            newPrice = directPrice;\r\n            directPrice = 0;\r\n        } else if (keepPrice) {\r\n            // Keep the price\r\n            newPrice = currentPrice;\r\n        } else {\r\n            // Calculate the new price\r\n            double diffSold = lastSold - targetAmount;\r\n            double factor = diffSold / deltaAmount;\r\n            double change = factor * maxStep;\r\n            int priceSteps = model.getSettings().getPriceSteps();\r\n            double rest = Math.floor(Math.abs(change % priceSteps));\r\n            double full = Math.floor(Math.abs(change / priceSteps));\r\n            int priceChange = 0;\r\n            if (rest >= priceSteps / 2) {\r\n                priceChange = priceSteps;\r\n            }\r\n            priceChange += full * priceSteps;\r\n            // Check that the change of the price is not more than the max step\r\n            if (priceChange > maxStep) {\r\n                priceChange = maxStep;\r\n            }\r\n            if (model.getSettings().isStandardLogic()) {\r\n                if (factor >= 0) {\r\n                    newPrice = currentPrice + priceChange;\r\n                } else {\r\n                    newPrice = currentPrice - priceChange;\r\n                }\r\n            } else {\r\n                // Inverse logic\r\n                if (factor >= 0) {\r\n                    newPrice = currentPrice - priceChange;\r\n                } else {\r\n                    newPrice = currentPrice + priceChange;\r\n                }\r\n            }\r\n        }\r\n        // Check that the new price is not above the max price or below the min price\r\n        if (newPrice > maxPrice) {\r\n            newPrice = maxPrice;\r\n        } else if (newPrice < minPrice) {\r\n            newPrice = minPrice;\r\n        }\r\n        // Calculate the trend\r\n        if (newPrice > currentPrice) {\r\n            trend = 1;\r\n        } else if (newPrice < currentPrice) {\r\n            trend = -1;\r\n        } else {\r\n            trend = 0;\r\n        }\r\n        currentPrice = newPrice;\r\n        //Debug output\r\n        model.getLog().debug(\"Recalculating drink: \" + name + \" for iteration: \" + model.getIteration());\r\n        model.getLog().debug(\"Last sold: \" + lastSold);\r\n        model.getLog().debug(\"Total sold:\" + totalSold);\r\n        model.getLog().debug(\"Average sold: \" + averageAmount);\r\n        model.getLog().debug(\"Average price: \" + averagePrice);\r\n        model.getLog().debug(\"Average sold price: \" + averageSoldPrice);\r\n        model.getLog().debug(\"New price: \" + currentPrice);\r\n        // Reset values for the next iteration\r\n        lastSold = 0;\r\n        return currentPrice;\r\n    }\r\n\r\n    /**\r\n     * Save the drink description to a XML file\r\n     */\r\n    public File save() {\r\n        if (!NEW_DRINK_NAME.equals(name)) {\r\n            model.getLog().debug(\"Save drink: \" + name);\r\n            // Build JDOM document representing the settings\r\n            Element root = new Element(\"drink\");\r\n            Element minPriceElem = new Element(\"minPrice\");\r\n            minPriceElem.setText(String.valueOf(minPrice));\r\n            root.addContent(minPriceElem);\r\n            Element maxPriceElem = new Element(\"maxPrice\");\r\n            maxPriceElem.setText(String.valueOf(maxPrice));\r\n            root.addContent(maxPriceElem);\r\n            Element startPriceElem = new Element(\"startPrice\");\r\n            startPriceElem.setText(String.valueOf(startPrice));\r\n            root.addContent(startPriceElem);\r\n            Element targetAmountElem = new Element(\"targetAmount\");\r\n            targetAmountElem.setText(String.valueOf(targetAmount));\r\n            root.addContent(targetAmountElem);\r\n            Element deltaAmountElem = new Element(\"deltaAmount\");\r\n            deltaAmountElem.setText(String.valueOf(deltaAmount));\r\n            root.addContent(deltaAmountElem);\r\n            Element maxStepElem = new Element(\"maxStep\");\r\n            maxStepElem.setText(String.valueOf(maxStep));\r\n            root.addContent(maxStepElem);\r\n            Element usedElem = new Element(\"used\");\r\n            usedElem.setText(String.valueOf(used));\r\n            root.addContent(usedElem);\r\n            Element keyElem = new Element(\"key\");\r\n            keyElem.setText(String.valueOf(key));\r\n            root.addContent(keyElem);\r\n            Document settingsDoc = new Document(root);\r\n            // Save JDOM document to file system\r\n            File folder = new File(DRINKS_FOLDER);\r\n            File file = new File(DRINKS_FOLDER + name + \".xml\");\r\n            try {\r\n                if (!folder.exists()) {\r\n                    folder.mkdirs();\r\n                }\r\n                model.getLog().debug(\"File for Drink: \" + file.getAbsolutePath());\r\n                if (file.exists()) {\r\n                    file.delete();\r\n                }\r\n                file.createNewFile();\r\n                FileOutputStream fos = new FileOutputStream(file);\r\n                XMLOutputter serializer = new XMLOutputter();\r\n                serializer.output(settingsDoc, fos);\r\n                fos.flush();\r\n                fos.close();\r\n            } catch (Exception e) {\r\n                model.getLog().error(this, e);\r\n            }\r\n            return file;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Load the description from a XML file\r\n     */\r\n    public void load() {\r\n        model.getLog().debug(\"Load drink: \" + name);\r\n        try {\r\n            File file = new File(DRINKS_FOLDER + name + \".xml\");\r\n            model.getLog().debug(\"File for Drink: \" + file.getAbsolutePath());\r\n            if (file.exists()) {\r\n                SAXBuilder builder = new SAXBuilder();\r\n                Document doc = builder.build(file);\r\n                Element root = doc.getRootElement();\r\n                minPrice = Integer.valueOf(root.getChildText(\"minPrice\"));\r\n                maxPrice = Integer.valueOf(root.getChildText(\"maxPrice\"));\r\n                startPrice = Integer.valueOf(root.getChildText(\"startPrice\"));\r\n                targetAmount = Integer.valueOf(root.getChildText(\"targetAmount\"));\r\n                deltaAmount = Integer.valueOf(root.getChildText(\"deltaAmount\"));\r\n                maxStep = Integer.valueOf(root.getChildText(\"maxStep\"));\r\n                used = Boolean.parseBoolean(root.getChildText(\"used\"));\r\n                key = Integer.valueOf(root.getChildText(\"key\"));\r\n            }\r\n        } catch (Exception e1) {\r\n            model.getLog().error(this, e1);\r\n        }\r\n    }\r\n\r\n    public String toString() {\r\n        return name;\r\n    }\r\n\r\n    public static String getDataHeaderString() {\r\n        return \"NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD\";\r\n    }\r\n\r\n    public String getDataString() {\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(name);\r\n        result.append(Model.DELIMITER);\r\n        result.append(minPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(startPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(maxPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averageAmount);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averagePrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averageSoldPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(totalSold);\r\n        return result.toString();\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Getters and Setters\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    public int getMinPrice() {\r\n        return minPrice;\r\n    }\r\n\r\n    public void setMinPrice(int minPrice) {\r\n        this.minPrice = minPrice;\r\n    }\r\n\r\n    public int getMaxPrice() {\r\n        return maxPrice;\r\n    }\r\n\r\n    public void setMaxPrice(int maxPrice) {\r\n        this.maxPrice = maxPrice;\r\n    }\r\n\r\n    public int getCurrentPrice() {\r\n        return currentPrice;\r\n    }\r\n\r\n    public void setCurrentPrice(int currentPrice) {\r\n        this.currentPrice = currentPrice;\r\n    }\r\n\r\n    public int getLastSold() {\r\n        return lastSold;\r\n    }\r\n\r\n    public void setLastSold(int lastSold) {\r\n        this.lastSold = lastSold;\r\n    }\r\n\r\n    public int getTotalSold() {\r\n        return totalSold;\r\n    }\r\n\r\n    public void setTotalSold(int totalSold) {\r\n        this.totalSold = totalSold;\r\n    }\r\n\r\n    public float getAverageAmount() {\r\n        return averageAmount;\r\n    }\r\n\r\n    public void setAverageAmount(float averageAmount) {\r\n        this.averageAmount = averageAmount;\r\n    }\r\n\r\n    public float getAveragePrice() {\r\n        return averagePrice;\r\n    }\r\n\r\n    public void setAveragePrice(float averagePrice) {\r\n        this.averagePrice = averagePrice;\r\n    }\r\n\r\n    public float getAverageSoldPrice() {\r\n        return averageSoldPrice;\r\n    }\r\n\r\n    public void setAverageSoldPrice(float averageSoldPrice) {\r\n        this.averageSoldPrice = averageSoldPrice;\r\n    }\r\n\r\n    public int getMaxStep() {\r\n        return maxStep;\r\n    }\r\n\r\n    public void setMaxStep(int maxStep) {\r\n        this.maxStep = maxStep;\r\n    }\r\n\r\n    public int getTargetAmount() {\r\n        return targetAmount;\r\n    }\r\n\r\n    public void setTargetAmount(int targetAmount) {\r\n        this.targetAmount = targetAmount;\r\n    }\r\n\r\n    public int getDeltaAmount() {\r\n        return deltaAmount;\r\n    }\r\n\r\n    public void setDeltaAmount(int deltaAmount) {\r\n        this.deltaAmount = deltaAmount;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public int getStartPrice() {\r\n        return startPrice;\r\n    }\r\n\r\n    public void setStartPrice(int startPrice) {\r\n        this.startPrice = startPrice;\r\n    }\r\n\r\n    public boolean isUsed() {\r\n        return used;\r\n    }\r\n\r\n    public void setUsed(boolean used) {\r\n        this.used = used;\r\n    }\r\n\r\n    public int getKey() {\r\n        return key;\r\n    }\r\n\r\n    public void setKey(int key) {\r\n        this.key = key;\r\n    }\r\n\r\n    public int getTrend() {\r\n        return trend;\r\n    }\r\n\r\n    public boolean isKeepPrice() {\r\n        return keepPrice;\r\n    }\r\n\r\n    public void setKeepPrice(boolean keepPrice) {\r\n        this.keepPrice = keepPrice;\r\n    }\r\n\r\n    public int getDirectPrice() {\r\n        return directPrice;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        Drink drink = (Drink) obj;\r\n        if (name == null && drink.getName() == null) {\r\n            return true;\r\n        } else if (name != null && drink.getName() != null) {\r\n            return name.equals(((Drink) obj).getName());\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/model/DrinkTest1.java",
		"test_prompt": "// DrinkTest1.java\npackage bierse.model;\n\nimport java.awt.event.KeyEvent;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport bierse.view.MyKeyMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Drink}.\n* It contains ten unit test cases for the {@link Drink#save()} method.\n*/\nclass DrinkTest1 {"
	},
	{
		"original_code": "// Drink.java\n/**\r\n */\r\npackage bierse.model;\r\n\r\nimport java.awt.event.KeyEvent;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileWriter;\r\nimport org.jdom.Document;\r\nimport org.jdom.Element;\r\nimport org.jdom.input.SAXBuilder;\r\nimport org.jdom.output.XMLOutputter;\r\nimport bierse.view.MyKeyMap;\r\n\r\n/**\r\n * @author Rainer Friesen\r\n */\r\npublic class Drink {\r\n\r\n    public static final String DRINKS_FOLDER = Model.CONFIG_FOLDER + \"drinks/\";\r\n\r\n    public static final String NEW_DRINK_NAME = \"Neues Getrï¿½nk\";\r\n\r\n    /**\r\n     * Name of the drink\r\n     */\r\n    private String name;\r\n\r\n    /**\r\n     * Minimum price(Cent) for what the drink is sold.\r\n     */\r\n    private int minPrice = 70;\r\n\r\n    /**\r\n     * Maximum price(Cent) for what the drink is sold,\r\n     */\r\n    private int maxPrice = 130;\r\n\r\n    /**\r\n     * Current price(Cent) of the drink.\r\n     */\r\n    private int currentPrice = 0;\r\n\r\n    /**\r\n     * Start price for this drink\r\n     */\r\n    private int startPrice = 100;\r\n\r\n    /**\r\n     * Amount of drinks sold in the last iteration\r\n     */\r\n    private int lastSold = 0;\r\n\r\n    /**\r\n     * The total amount of drinks sold\r\n     */\r\n    private int totalSold = 0;\r\n\r\n    /**\r\n     * The average amount of drinks sold in an iteration. Used to calculate the new price.\r\n     */\r\n    private float averageAmount = 0;\r\n\r\n    /**\r\n     * The average price in cent\r\n     */\r\n    private float averagePrice = 0;\r\n\r\n    /**\r\n     * The average price (Cent) for what the drink is sold\r\n     */\r\n    private float averageSoldPrice = 0;\r\n\r\n    /**\r\n     * The maximum difference between two prices in one iteration\r\n     */\r\n    private int maxStep = 20;\r\n\r\n    /**\r\n     * The target amount of drinks to keep the price stable\r\n     */\r\n    private int targetAmount = 20;\r\n\r\n    /**\r\n     * The delta to calculate the step width. If the targetAmount - delta is not reached\r\n     * the price is decreased by the maximum step. If the targetAmount + delta is reached\r\n     * the price is increased by the maximum step.\r\n     */\r\n    private int deltaAmount = 15;\r\n\r\n    /**\r\n     * Show if the drink is used currently\r\n     */\r\n    private boolean used = true;\r\n\r\n    /**\r\n     * Key used to indicate the sell of a drink\r\n     */\r\n    private int key = KeyEvent.VK_F1;\r\n\r\n    /**\r\n     * Show if the price is lower (-1), equal(0) or higher(1) than during the last iteration\r\n     */\r\n    private int trend = 0;\r\n\r\n    /**\r\n     * Keep the price and do no new calculation\r\n     */\r\n    private boolean keepPrice = false;\r\n\r\n    /**\r\n     * Set the new price directly without calculating\r\n     */\r\n    private int directPrice = 0;\r\n\r\n    /**\r\n     * Model that uses the drink\r\n     */\r\n    Model model;\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Constructor\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    public Drink(String name, Model model) {\r\n        this.name = name;\r\n        this.model = model;\r\n        load();\r\n        currentPrice = startPrice;\r\n    }\r\n\r\n    public Drink(String name, Model model, int startPrice) {\r\n        this(name, model);\r\n        currentPrice = startPrice;\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Methods\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    /**\r\n     * Sell the amount of drinks\r\n     *\r\n     * @param amount Amount of drinks sold\r\n     */\r\n    public synchronized void sell(int amount) {\r\n        lastSold += amount;\r\n        model.informModelChangedListeners(Model.EVENT_DRINK_SOLD);\r\n    }\r\n\r\n    public void setDirectPrice(int directPrice) {\r\n        this.directPrice = directPrice;\r\n        model.informModelChangedListeners(Model.EVENT_DRINK_LIST_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Recalculate the current price for this drink\r\n     */\r\n    public int recalculate() {\r\n        //Calculate new average values\r\n        totalSold += lastSold;\r\n        averageAmount = (float) totalSold / model.getIteration();\r\n        averagePrice = ((averagePrice * (model.getIteration() - 1)) + currentPrice) / model.getIteration();\r\n        if (totalSold > 0) {\r\n            averageSoldPrice = ((averageSoldPrice * (totalSold - lastSold)) + (currentPrice * lastSold)) / totalSold;\r\n        }\r\n        int newPrice;\r\n        if (directPrice != 0) {\r\n            // If a direct price was set, use it\r\n            newPrice = directPrice;\r\n            directPrice = 0;\r\n        } else if (keepPrice) {\r\n            // Keep the price\r\n            newPrice = currentPrice;\r\n        } else {\r\n            // Calculate the new price\r\n            double diffSold = lastSold - targetAmount;\r\n            double factor = diffSold / deltaAmount;\r\n            double change = factor * maxStep;\r\n            int priceSteps = model.getSettings().getPriceSteps();\r\n            double rest = Math.floor(Math.abs(change % priceSteps));\r\n            double full = Math.floor(Math.abs(change / priceSteps));\r\n            int priceChange = 0;\r\n            if (rest >= priceSteps / 2) {\r\n                priceChange = priceSteps;\r\n            }\r\n            priceChange += full * priceSteps;\r\n            // Check that the change of the price is not more than the max step\r\n            if (priceChange > maxStep) {\r\n                priceChange = maxStep;\r\n            }\r\n            if (model.getSettings().isStandardLogic()) {\r\n                if (factor >= 0) {\r\n                    newPrice = currentPrice + priceChange;\r\n                } else {\r\n                    newPrice = currentPrice - priceChange;\r\n                }\r\n            } else {\r\n                // Inverse logic\r\n                if (factor >= 0) {\r\n                    newPrice = currentPrice - priceChange;\r\n                } else {\r\n                    newPrice = currentPrice + priceChange;\r\n                }\r\n            }\r\n        }\r\n        // Check that the new price is not above the max price or below the min price\r\n        if (newPrice > maxPrice) {\r\n            newPrice = maxPrice;\r\n        } else if (newPrice < minPrice) {\r\n            newPrice = minPrice;\r\n        }\r\n        // Calculate the trend\r\n        if (newPrice > currentPrice) {\r\n            trend = 1;\r\n        } else if (newPrice < currentPrice) {\r\n            trend = -1;\r\n        } else {\r\n            trend = 0;\r\n        }\r\n        currentPrice = newPrice;\r\n        //Debug output\r\n        model.getLog().debug(\"Recalculating drink: \" + name + \" for iteration: \" + model.getIteration());\r\n        model.getLog().debug(\"Last sold: \" + lastSold);\r\n        model.getLog().debug(\"Total sold:\" + totalSold);\r\n        model.getLog().debug(\"Average sold: \" + averageAmount);\r\n        model.getLog().debug(\"Average price: \" + averagePrice);\r\n        model.getLog().debug(\"Average sold price: \" + averageSoldPrice);\r\n        model.getLog().debug(\"New price: \" + currentPrice);\r\n        // Reset values for the next iteration\r\n        lastSold = 0;\r\n        return currentPrice;\r\n    }\r\n\r\n    /**\r\n     * Save the drink description to a XML file\r\n     */\r\n    public File save() {\r\n        if (!NEW_DRINK_NAME.equals(name)) {\r\n            model.getLog().debug(\"Save drink: \" + name);\r\n            // Build JDOM document representing the settings\r\n            Element root = new Element(\"drink\");\r\n            Element minPriceElem = new Element(\"minPrice\");\r\n            minPriceElem.setText(String.valueOf(minPrice));\r\n            root.addContent(minPriceElem);\r\n            Element maxPriceElem = new Element(\"maxPrice\");\r\n            maxPriceElem.setText(String.valueOf(maxPrice));\r\n            root.addContent(maxPriceElem);\r\n            Element startPriceElem = new Element(\"startPrice\");\r\n            startPriceElem.setText(String.valueOf(startPrice));\r\n            root.addContent(startPriceElem);\r\n            Element targetAmountElem = new Element(\"targetAmount\");\r\n            targetAmountElem.setText(String.valueOf(targetAmount));\r\n            root.addContent(targetAmountElem);\r\n            Element deltaAmountElem = new Element(\"deltaAmount\");\r\n            deltaAmountElem.setText(String.valueOf(deltaAmount));\r\n            root.addContent(deltaAmountElem);\r\n            Element maxStepElem = new Element(\"maxStep\");\r\n            maxStepElem.setText(String.valueOf(maxStep));\r\n            root.addContent(maxStepElem);\r\n            Element usedElem = new Element(\"used\");\r\n            usedElem.setText(String.valueOf(used));\r\n            root.addContent(usedElem);\r\n            Element keyElem = new Element(\"key\");\r\n            keyElem.setText(String.valueOf(key));\r\n            root.addContent(keyElem);\r\n            Document settingsDoc = new Document(root);\r\n            // Save JDOM document to file system\r\n            File folder = new File(DRINKS_FOLDER);\r\n            File file = new File(DRINKS_FOLDER + name + \".xml\");\r\n            try {\r\n                if (!folder.exists()) {\r\n                    folder.mkdirs();\r\n                }\r\n                model.getLog().debug(\"File for Drink: \" + file.getAbsolutePath());\r\n                if (file.exists()) {\r\n                    file.delete();\r\n                }\r\n                file.createNewFile();\r\n                FileOutputStream fos = new FileOutputStream(file);\r\n                XMLOutputter serializer = new XMLOutputter();\r\n                serializer.output(settingsDoc, fos);\r\n                fos.flush();\r\n                fos.close();\r\n            } catch (Exception e) {\r\n                model.getLog().error(this, e);\r\n            }\r\n            return file;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Load the description from a XML file\r\n     */\r\n    public void load() {\r\n        model.getLog().debug(\"Load drink: \" + name);\r\n        try {\r\n            File file = new File(DRINKS_FOLDER + name + \".xml\");\r\n            model.getLog().debug(\"File for Drink: \" + file.getAbsolutePath());\r\n            if (file.exists()) {\r\n                SAXBuilder builder = new SAXBuilder();\r\n                Document doc = builder.build(file);\r\n                Element root = doc.getRootElement();\r\n                minPrice = Integer.valueOf(root.getChildText(\"minPrice\"));\r\n                maxPrice = Integer.valueOf(root.getChildText(\"maxPrice\"));\r\n                startPrice = Integer.valueOf(root.getChildText(\"startPrice\"));\r\n                targetAmount = Integer.valueOf(root.getChildText(\"targetAmount\"));\r\n                deltaAmount = Integer.valueOf(root.getChildText(\"deltaAmount\"));\r\n                maxStep = Integer.valueOf(root.getChildText(\"maxStep\"));\r\n                used = Boolean.parseBoolean(root.getChildText(\"used\"));\r\n                key = Integer.valueOf(root.getChildText(\"key\"));\r\n            }\r\n        } catch (Exception e1) {\r\n            model.getLog().error(this, e1);\r\n        }\r\n    }\r\n\r\n    public String toString() {\r\n        return name;\r\n    }\r\n\r\n    public static String getDataHeaderString() {\r\n        return \"NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD\";\r\n    }\r\n\r\n    public String getDataString() {\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(name);\r\n        result.append(Model.DELIMITER);\r\n        result.append(minPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(startPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(maxPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averageAmount);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averagePrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averageSoldPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(totalSold);\r\n        return result.toString();\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Getters and Setters\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    public int getMinPrice() {\r\n        return minPrice;\r\n    }\r\n\r\n    public void setMinPrice(int minPrice) {\r\n        this.minPrice = minPrice;\r\n    }\r\n\r\n    public int getMaxPrice() {\r\n        return maxPrice;\r\n    }\r\n\r\n    public void setMaxPrice(int maxPrice) {\r\n        this.maxPrice = maxPrice;\r\n    }\r\n\r\n    public int getCurrentPrice() {\r\n        return currentPrice;\r\n    }\r\n\r\n    public void setCurrentPrice(int currentPrice) {\r\n        this.currentPrice = currentPrice;\r\n    }\r\n\r\n    public int getLastSold() {\r\n        return lastSold;\r\n    }\r\n\r\n    public void setLastSold(int lastSold) {\r\n        this.lastSold = lastSold;\r\n    }\r\n\r\n    public int getTotalSold() {\r\n        return totalSold;\r\n    }\r\n\r\n    public void setTotalSold(int totalSold) {\r\n        this.totalSold = totalSold;\r\n    }\r\n\r\n    public float getAverageAmount() {\r\n        return averageAmount;\r\n    }\r\n\r\n    public void setAverageAmount(float averageAmount) {\r\n        this.averageAmount = averageAmount;\r\n    }\r\n\r\n    public float getAveragePrice() {\r\n        return averagePrice;\r\n    }\r\n\r\n    public void setAveragePrice(float averagePrice) {\r\n        this.averagePrice = averagePrice;\r\n    }\r\n\r\n    public float getAverageSoldPrice() {\r\n        return averageSoldPrice;\r\n    }\r\n\r\n    public void setAverageSoldPrice(float averageSoldPrice) {\r\n        this.averageSoldPrice = averageSoldPrice;\r\n    }\r\n\r\n    public int getMaxStep() {\r\n        return maxStep;\r\n    }\r\n\r\n    public void setMaxStep(int maxStep) {\r\n        this.maxStep = maxStep;\r\n    }\r\n\r\n    public int getTargetAmount() {\r\n        return targetAmount;\r\n    }\r\n\r\n    public void setTargetAmount(int targetAmount) {\r\n        this.targetAmount = targetAmount;\r\n    }\r\n\r\n    public int getDeltaAmount() {\r\n        return deltaAmount;\r\n    }\r\n\r\n    public void setDeltaAmount(int deltaAmount) {\r\n        this.deltaAmount = deltaAmount;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public int getStartPrice() {\r\n        return startPrice;\r\n    }\r\n\r\n    public void setStartPrice(int startPrice) {\r\n        this.startPrice = startPrice;\r\n    }\r\n\r\n    public boolean isUsed() {\r\n        return used;\r\n    }\r\n\r\n    public void setUsed(boolean used) {\r\n        this.used = used;\r\n    }\r\n\r\n    public int getKey() {\r\n        return key;\r\n    }\r\n\r\n    public void setKey(int key) {\r\n        this.key = key;\r\n    }\r\n\r\n    public int getTrend() {\r\n        return trend;\r\n    }\r\n\r\n    public boolean isKeepPrice() {\r\n        return keepPrice;\r\n    }\r\n\r\n    public void setKeepPrice(boolean keepPrice) {\r\n        this.keepPrice = keepPrice;\r\n    }\r\n\r\n    public int getDirectPrice() {\r\n        return directPrice;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        Drink drink = (Drink) obj;\r\n        if (name == null && drink.getName() == null) {\r\n            return true;\r\n        } else if (name != null && drink.getName() != null) {\r\n            return name.equals(((Drink) obj).getName());\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/model/DrinkTest2.java",
		"test_prompt": "// DrinkTest2.java\npackage bierse.model;\n\nimport java.awt.event.KeyEvent;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport bierse.view.MyKeyMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Drink}.\n* It contains ten unit test cases for the {@link Drink#getDataHeaderString()} method.\n*/\nclass DrinkTest2 {"
	},
	{
		"original_code": "// Drink.java\n/**\r\n */\r\npackage bierse.model;\r\n\r\nimport java.awt.event.KeyEvent;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileWriter;\r\nimport org.jdom.Document;\r\nimport org.jdom.Element;\r\nimport org.jdom.input.SAXBuilder;\r\nimport org.jdom.output.XMLOutputter;\r\nimport bierse.view.MyKeyMap;\r\n\r\n/**\r\n * @author Rainer Friesen\r\n */\r\npublic class Drink {\r\n\r\n    public static final String DRINKS_FOLDER = Model.CONFIG_FOLDER + \"drinks/\";\r\n\r\n    public static final String NEW_DRINK_NAME = \"Neues Getrï¿½nk\";\r\n\r\n    /**\r\n     * Name of the drink\r\n     */\r\n    private String name;\r\n\r\n    /**\r\n     * Minimum price(Cent) for what the drink is sold.\r\n     */\r\n    private int minPrice = 70;\r\n\r\n    /**\r\n     * Maximum price(Cent) for what the drink is sold,\r\n     */\r\n    private int maxPrice = 130;\r\n\r\n    /**\r\n     * Current price(Cent) of the drink.\r\n     */\r\n    private int currentPrice = 0;\r\n\r\n    /**\r\n     * Start price for this drink\r\n     */\r\n    private int startPrice = 100;\r\n\r\n    /**\r\n     * Amount of drinks sold in the last iteration\r\n     */\r\n    private int lastSold = 0;\r\n\r\n    /**\r\n     * The total amount of drinks sold\r\n     */\r\n    private int totalSold = 0;\r\n\r\n    /**\r\n     * The average amount of drinks sold in an iteration. Used to calculate the new price.\r\n     */\r\n    private float averageAmount = 0;\r\n\r\n    /**\r\n     * The average price in cent\r\n     */\r\n    private float averagePrice = 0;\r\n\r\n    /**\r\n     * The average price (Cent) for what the drink is sold\r\n     */\r\n    private float averageSoldPrice = 0;\r\n\r\n    /**\r\n     * The maximum difference between two prices in one iteration\r\n     */\r\n    private int maxStep = 20;\r\n\r\n    /**\r\n     * The target amount of drinks to keep the price stable\r\n     */\r\n    private int targetAmount = 20;\r\n\r\n    /**\r\n     * The delta to calculate the step width. If the targetAmount - delta is not reached\r\n     * the price is decreased by the maximum step. If the targetAmount + delta is reached\r\n     * the price is increased by the maximum step.\r\n     */\r\n    private int deltaAmount = 15;\r\n\r\n    /**\r\n     * Show if the drink is used currently\r\n     */\r\n    private boolean used = true;\r\n\r\n    /**\r\n     * Key used to indicate the sell of a drink\r\n     */\r\n    private int key = KeyEvent.VK_F1;\r\n\r\n    /**\r\n     * Show if the price is lower (-1), equal(0) or higher(1) than during the last iteration\r\n     */\r\n    private int trend = 0;\r\n\r\n    /**\r\n     * Keep the price and do no new calculation\r\n     */\r\n    private boolean keepPrice = false;\r\n\r\n    /**\r\n     * Set the new price directly without calculating\r\n     */\r\n    private int directPrice = 0;\r\n\r\n    /**\r\n     * Model that uses the drink\r\n     */\r\n    Model model;\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Constructor\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    public Drink(String name, Model model) {\r\n        this.name = name;\r\n        this.model = model;\r\n        load();\r\n        currentPrice = startPrice;\r\n    }\r\n\r\n    public Drink(String name, Model model, int startPrice) {\r\n        this(name, model);\r\n        currentPrice = startPrice;\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Methods\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    /**\r\n     * Sell the amount of drinks\r\n     *\r\n     * @param amount Amount of drinks sold\r\n     */\r\n    public synchronized void sell(int amount) {\r\n        lastSold += amount;\r\n        model.informModelChangedListeners(Model.EVENT_DRINK_SOLD);\r\n    }\r\n\r\n    public void setDirectPrice(int directPrice) {\r\n        this.directPrice = directPrice;\r\n        model.informModelChangedListeners(Model.EVENT_DRINK_LIST_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Recalculate the current price for this drink\r\n     */\r\n    public int recalculate() {\r\n        //Calculate new average values\r\n        totalSold += lastSold;\r\n        averageAmount = (float) totalSold / model.getIteration();\r\n        averagePrice = ((averagePrice * (model.getIteration() - 1)) + currentPrice) / model.getIteration();\r\n        if (totalSold > 0) {\r\n            averageSoldPrice = ((averageSoldPrice * (totalSold - lastSold)) + (currentPrice * lastSold)) / totalSold;\r\n        }\r\n        int newPrice;\r\n        if (directPrice != 0) {\r\n            // If a direct price was set, use it\r\n            newPrice = directPrice;\r\n            directPrice = 0;\r\n        } else if (keepPrice) {\r\n            // Keep the price\r\n            newPrice = currentPrice;\r\n        } else {\r\n            // Calculate the new price\r\n            double diffSold = lastSold - targetAmount;\r\n            double factor = diffSold / deltaAmount;\r\n            double change = factor * maxStep;\r\n            int priceSteps = model.getSettings().getPriceSteps();\r\n            double rest = Math.floor(Math.abs(change % priceSteps));\r\n            double full = Math.floor(Math.abs(change / priceSteps));\r\n            int priceChange = 0;\r\n            if (rest >= priceSteps / 2) {\r\n                priceChange = priceSteps;\r\n            }\r\n            priceChange += full * priceSteps;\r\n            // Check that the change of the price is not more than the max step\r\n            if (priceChange > maxStep) {\r\n                priceChange = maxStep;\r\n            }\r\n            if (model.getSettings().isStandardLogic()) {\r\n                if (factor >= 0) {\r\n                    newPrice = currentPrice + priceChange;\r\n                } else {\r\n                    newPrice = currentPrice - priceChange;\r\n                }\r\n            } else {\r\n                // Inverse logic\r\n                if (factor >= 0) {\r\n                    newPrice = currentPrice - priceChange;\r\n                } else {\r\n                    newPrice = currentPrice + priceChange;\r\n                }\r\n            }\r\n        }\r\n        // Check that the new price is not above the max price or below the min price\r\n        if (newPrice > maxPrice) {\r\n            newPrice = maxPrice;\r\n        } else if (newPrice < minPrice) {\r\n            newPrice = minPrice;\r\n        }\r\n        // Calculate the trend\r\n        if (newPrice > currentPrice) {\r\n            trend = 1;\r\n        } else if (newPrice < currentPrice) {\r\n            trend = -1;\r\n        } else {\r\n            trend = 0;\r\n        }\r\n        currentPrice = newPrice;\r\n        //Debug output\r\n        model.getLog().debug(\"Recalculating drink: \" + name + \" for iteration: \" + model.getIteration());\r\n        model.getLog().debug(\"Last sold: \" + lastSold);\r\n        model.getLog().debug(\"Total sold:\" + totalSold);\r\n        model.getLog().debug(\"Average sold: \" + averageAmount);\r\n        model.getLog().debug(\"Average price: \" + averagePrice);\r\n        model.getLog().debug(\"Average sold price: \" + averageSoldPrice);\r\n        model.getLog().debug(\"New price: \" + currentPrice);\r\n        // Reset values for the next iteration\r\n        lastSold = 0;\r\n        return currentPrice;\r\n    }\r\n\r\n    /**\r\n     * Save the drink description to a XML file\r\n     */\r\n    public File save() {\r\n        if (!NEW_DRINK_NAME.equals(name)) {\r\n            model.getLog().debug(\"Save drink: \" + name);\r\n            // Build JDOM document representing the settings\r\n            Element root = new Element(\"drink\");\r\n            Element minPriceElem = new Element(\"minPrice\");\r\n            minPriceElem.setText(String.valueOf(minPrice));\r\n            root.addContent(minPriceElem);\r\n            Element maxPriceElem = new Element(\"maxPrice\");\r\n            maxPriceElem.setText(String.valueOf(maxPrice));\r\n            root.addContent(maxPriceElem);\r\n            Element startPriceElem = new Element(\"startPrice\");\r\n            startPriceElem.setText(String.valueOf(startPrice));\r\n            root.addContent(startPriceElem);\r\n            Element targetAmountElem = new Element(\"targetAmount\");\r\n            targetAmountElem.setText(String.valueOf(targetAmount));\r\n            root.addContent(targetAmountElem);\r\n            Element deltaAmountElem = new Element(\"deltaAmount\");\r\n            deltaAmountElem.setText(String.valueOf(deltaAmount));\r\n            root.addContent(deltaAmountElem);\r\n            Element maxStepElem = new Element(\"maxStep\");\r\n            maxStepElem.setText(String.valueOf(maxStep));\r\n            root.addContent(maxStepElem);\r\n            Element usedElem = new Element(\"used\");\r\n            usedElem.setText(String.valueOf(used));\r\n            root.addContent(usedElem);\r\n            Element keyElem = new Element(\"key\");\r\n            keyElem.setText(String.valueOf(key));\r\n            root.addContent(keyElem);\r\n            Document settingsDoc = new Document(root);\r\n            // Save JDOM document to file system\r\n            File folder = new File(DRINKS_FOLDER);\r\n            File file = new File(DRINKS_FOLDER + name + \".xml\");\r\n            try {\r\n                if (!folder.exists()) {\r\n                    folder.mkdirs();\r\n                }\r\n                model.getLog().debug(\"File for Drink: \" + file.getAbsolutePath());\r\n                if (file.exists()) {\r\n                    file.delete();\r\n                }\r\n                file.createNewFile();\r\n                FileOutputStream fos = new FileOutputStream(file);\r\n                XMLOutputter serializer = new XMLOutputter();\r\n                serializer.output(settingsDoc, fos);\r\n                fos.flush();\r\n                fos.close();\r\n            } catch (Exception e) {\r\n                model.getLog().error(this, e);\r\n            }\r\n            return file;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Load the description from a XML file\r\n     */\r\n    public void load() {\r\n        model.getLog().debug(\"Load drink: \" + name);\r\n        try {\r\n            File file = new File(DRINKS_FOLDER + name + \".xml\");\r\n            model.getLog().debug(\"File for Drink: \" + file.getAbsolutePath());\r\n            if (file.exists()) {\r\n                SAXBuilder builder = new SAXBuilder();\r\n                Document doc = builder.build(file);\r\n                Element root = doc.getRootElement();\r\n                minPrice = Integer.valueOf(root.getChildText(\"minPrice\"));\r\n                maxPrice = Integer.valueOf(root.getChildText(\"maxPrice\"));\r\n                startPrice = Integer.valueOf(root.getChildText(\"startPrice\"));\r\n                targetAmount = Integer.valueOf(root.getChildText(\"targetAmount\"));\r\n                deltaAmount = Integer.valueOf(root.getChildText(\"deltaAmount\"));\r\n                maxStep = Integer.valueOf(root.getChildText(\"maxStep\"));\r\n                used = Boolean.parseBoolean(root.getChildText(\"used\"));\r\n                key = Integer.valueOf(root.getChildText(\"key\"));\r\n            }\r\n        } catch (Exception e1) {\r\n            model.getLog().error(this, e1);\r\n        }\r\n    }\r\n\r\n    public String toString() {\r\n        return name;\r\n    }\r\n\r\n    public static String getDataHeaderString() {\r\n        return \"NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD\";\r\n    }\r\n\r\n    public String getDataString() {\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(name);\r\n        result.append(Model.DELIMITER);\r\n        result.append(minPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(startPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(maxPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averageAmount);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averagePrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averageSoldPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(totalSold);\r\n        return result.toString();\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Getters and Setters\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    public int getMinPrice() {\r\n        return minPrice;\r\n    }\r\n\r\n    public void setMinPrice(int minPrice) {\r\n        this.minPrice = minPrice;\r\n    }\r\n\r\n    public int getMaxPrice() {\r\n        return maxPrice;\r\n    }\r\n\r\n    public void setMaxPrice(int maxPrice) {\r\n        this.maxPrice = maxPrice;\r\n    }\r\n\r\n    public int getCurrentPrice() {\r\n        return currentPrice;\r\n    }\r\n\r\n    public void setCurrentPrice(int currentPrice) {\r\n        this.currentPrice = currentPrice;\r\n    }\r\n\r\n    public int getLastSold() {\r\n        return lastSold;\r\n    }\r\n\r\n    public void setLastSold(int lastSold) {\r\n        this.lastSold = lastSold;\r\n    }\r\n\r\n    public int getTotalSold() {\r\n        return totalSold;\r\n    }\r\n\r\n    public void setTotalSold(int totalSold) {\r\n        this.totalSold = totalSold;\r\n    }\r\n\r\n    public float getAverageAmount() {\r\n        return averageAmount;\r\n    }\r\n\r\n    public void setAverageAmount(float averageAmount) {\r\n        this.averageAmount = averageAmount;\r\n    }\r\n\r\n    public float getAveragePrice() {\r\n        return averagePrice;\r\n    }\r\n\r\n    public void setAveragePrice(float averagePrice) {\r\n        this.averagePrice = averagePrice;\r\n    }\r\n\r\n    public float getAverageSoldPrice() {\r\n        return averageSoldPrice;\r\n    }\r\n\r\n    public void setAverageSoldPrice(float averageSoldPrice) {\r\n        this.averageSoldPrice = averageSoldPrice;\r\n    }\r\n\r\n    public int getMaxStep() {\r\n        return maxStep;\r\n    }\r\n\r\n    public void setMaxStep(int maxStep) {\r\n        this.maxStep = maxStep;\r\n    }\r\n\r\n    public int getTargetAmount() {\r\n        return targetAmount;\r\n    }\r\n\r\n    public void setTargetAmount(int targetAmount) {\r\n        this.targetAmount = targetAmount;\r\n    }\r\n\r\n    public int getDeltaAmount() {\r\n        return deltaAmount;\r\n    }\r\n\r\n    public void setDeltaAmount(int deltaAmount) {\r\n        this.deltaAmount = deltaAmount;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public int getStartPrice() {\r\n        return startPrice;\r\n    }\r\n\r\n    public void setStartPrice(int startPrice) {\r\n        this.startPrice = startPrice;\r\n    }\r\n\r\n    public boolean isUsed() {\r\n        return used;\r\n    }\r\n\r\n    public void setUsed(boolean used) {\r\n        this.used = used;\r\n    }\r\n\r\n    public int getKey() {\r\n        return key;\r\n    }\r\n\r\n    public void setKey(int key) {\r\n        this.key = key;\r\n    }\r\n\r\n    public int getTrend() {\r\n        return trend;\r\n    }\r\n\r\n    public boolean isKeepPrice() {\r\n        return keepPrice;\r\n    }\r\n\r\n    public void setKeepPrice(boolean keepPrice) {\r\n        this.keepPrice = keepPrice;\r\n    }\r\n\r\n    public int getDirectPrice() {\r\n        return directPrice;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        Drink drink = (Drink) obj;\r\n        if (name == null && drink.getName() == null) {\r\n            return true;\r\n        } else if (name != null && drink.getName() != null) {\r\n            return name.equals(((Drink) obj).getName());\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/model/DrinkTest3.java",
		"test_prompt": "// DrinkTest3.java\npackage bierse.model;\n\nimport java.awt.event.KeyEvent;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport bierse.view.MyKeyMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Drink}.\n* It contains ten unit test cases for the {@link Drink#isUsed()} method.\n*/\nclass DrinkTest3 {"
	},
	{
		"original_code": "// Drink.java\n/**\r\n */\r\npackage bierse.model;\r\n\r\nimport java.awt.event.KeyEvent;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileWriter;\r\nimport org.jdom.Document;\r\nimport org.jdom.Element;\r\nimport org.jdom.input.SAXBuilder;\r\nimport org.jdom.output.XMLOutputter;\r\nimport bierse.view.MyKeyMap;\r\n\r\n/**\r\n * @author Rainer Friesen\r\n */\r\npublic class Drink {\r\n\r\n    public static final String DRINKS_FOLDER = Model.CONFIG_FOLDER + \"drinks/\";\r\n\r\n    public static final String NEW_DRINK_NAME = \"Neues Getrï¿½nk\";\r\n\r\n    /**\r\n     * Name of the drink\r\n     */\r\n    private String name;\r\n\r\n    /**\r\n     * Minimum price(Cent) for what the drink is sold.\r\n     */\r\n    private int minPrice = 70;\r\n\r\n    /**\r\n     * Maximum price(Cent) for what the drink is sold,\r\n     */\r\n    private int maxPrice = 130;\r\n\r\n    /**\r\n     * Current price(Cent) of the drink.\r\n     */\r\n    private int currentPrice = 0;\r\n\r\n    /**\r\n     * Start price for this drink\r\n     */\r\n    private int startPrice = 100;\r\n\r\n    /**\r\n     * Amount of drinks sold in the last iteration\r\n     */\r\n    private int lastSold = 0;\r\n\r\n    /**\r\n     * The total amount of drinks sold\r\n     */\r\n    private int totalSold = 0;\r\n\r\n    /**\r\n     * The average amount of drinks sold in an iteration. Used to calculate the new price.\r\n     */\r\n    private float averageAmount = 0;\r\n\r\n    /**\r\n     * The average price in cent\r\n     */\r\n    private float averagePrice = 0;\r\n\r\n    /**\r\n     * The average price (Cent) for what the drink is sold\r\n     */\r\n    private float averageSoldPrice = 0;\r\n\r\n    /**\r\n     * The maximum difference between two prices in one iteration\r\n     */\r\n    private int maxStep = 20;\r\n\r\n    /**\r\n     * The target amount of drinks to keep the price stable\r\n     */\r\n    private int targetAmount = 20;\r\n\r\n    /**\r\n     * The delta to calculate the step width. If the targetAmount - delta is not reached\r\n     * the price is decreased by the maximum step. If the targetAmount + delta is reached\r\n     * the price is increased by the maximum step.\r\n     */\r\n    private int deltaAmount = 15;\r\n\r\n    /**\r\n     * Show if the drink is used currently\r\n     */\r\n    private boolean used = true;\r\n\r\n    /**\r\n     * Key used to indicate the sell of a drink\r\n     */\r\n    private int key = KeyEvent.VK_F1;\r\n\r\n    /**\r\n     * Show if the price is lower (-1), equal(0) or higher(1) than during the last iteration\r\n     */\r\n    private int trend = 0;\r\n\r\n    /**\r\n     * Keep the price and do no new calculation\r\n     */\r\n    private boolean keepPrice = false;\r\n\r\n    /**\r\n     * Set the new price directly without calculating\r\n     */\r\n    private int directPrice = 0;\r\n\r\n    /**\r\n     * Model that uses the drink\r\n     */\r\n    Model model;\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Constructor\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    public Drink(String name, Model model) {\r\n        this.name = name;\r\n        this.model = model;\r\n        load();\r\n        currentPrice = startPrice;\r\n    }\r\n\r\n    public Drink(String name, Model model, int startPrice) {\r\n        this(name, model);\r\n        currentPrice = startPrice;\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Methods\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    /**\r\n     * Sell the amount of drinks\r\n     *\r\n     * @param amount Amount of drinks sold\r\n     */\r\n    public synchronized void sell(int amount) {\r\n        lastSold += amount;\r\n        model.informModelChangedListeners(Model.EVENT_DRINK_SOLD);\r\n    }\r\n\r\n    public void setDirectPrice(int directPrice) {\r\n        this.directPrice = directPrice;\r\n        model.informModelChangedListeners(Model.EVENT_DRINK_LIST_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Recalculate the current price for this drink\r\n     */\r\n    public int recalculate() {\r\n        //Calculate new average values\r\n        totalSold += lastSold;\r\n        averageAmount = (float) totalSold / model.getIteration();\r\n        averagePrice = ((averagePrice * (model.getIteration() - 1)) + currentPrice) / model.getIteration();\r\n        if (totalSold > 0) {\r\n            averageSoldPrice = ((averageSoldPrice * (totalSold - lastSold)) + (currentPrice * lastSold)) / totalSold;\r\n        }\r\n        int newPrice;\r\n        if (directPrice != 0) {\r\n            // If a direct price was set, use it\r\n            newPrice = directPrice;\r\n            directPrice = 0;\r\n        } else if (keepPrice) {\r\n            // Keep the price\r\n            newPrice = currentPrice;\r\n        } else {\r\n            // Calculate the new price\r\n            double diffSold = lastSold - targetAmount;\r\n            double factor = diffSold / deltaAmount;\r\n            double change = factor * maxStep;\r\n            int priceSteps = model.getSettings().getPriceSteps();\r\n            double rest = Math.floor(Math.abs(change % priceSteps));\r\n            double full = Math.floor(Math.abs(change / priceSteps));\r\n            int priceChange = 0;\r\n            if (rest >= priceSteps / 2) {\r\n                priceChange = priceSteps;\r\n            }\r\n            priceChange += full * priceSteps;\r\n            // Check that the change of the price is not more than the max step\r\n            if (priceChange > maxStep) {\r\n                priceChange = maxStep;\r\n            }\r\n            if (model.getSettings().isStandardLogic()) {\r\n                if (factor >= 0) {\r\n                    newPrice = currentPrice + priceChange;\r\n                } else {\r\n                    newPrice = currentPrice - priceChange;\r\n                }\r\n            } else {\r\n                // Inverse logic\r\n                if (factor >= 0) {\r\n                    newPrice = currentPrice - priceChange;\r\n                } else {\r\n                    newPrice = currentPrice + priceChange;\r\n                }\r\n            }\r\n        }\r\n        // Check that the new price is not above the max price or below the min price\r\n        if (newPrice > maxPrice) {\r\n            newPrice = maxPrice;\r\n        } else if (newPrice < minPrice) {\r\n            newPrice = minPrice;\r\n        }\r\n        // Calculate the trend\r\n        if (newPrice > currentPrice) {\r\n            trend = 1;\r\n        } else if (newPrice < currentPrice) {\r\n            trend = -1;\r\n        } else {\r\n            trend = 0;\r\n        }\r\n        currentPrice = newPrice;\r\n        //Debug output\r\n        model.getLog().debug(\"Recalculating drink: \" + name + \" for iteration: \" + model.getIteration());\r\n        model.getLog().debug(\"Last sold: \" + lastSold);\r\n        model.getLog().debug(\"Total sold:\" + totalSold);\r\n        model.getLog().debug(\"Average sold: \" + averageAmount);\r\n        model.getLog().debug(\"Average price: \" + averagePrice);\r\n        model.getLog().debug(\"Average sold price: \" + averageSoldPrice);\r\n        model.getLog().debug(\"New price: \" + currentPrice);\r\n        // Reset values for the next iteration\r\n        lastSold = 0;\r\n        return currentPrice;\r\n    }\r\n\r\n    /**\r\n     * Save the drink description to a XML file\r\n     */\r\n    public File save() {\r\n        if (!NEW_DRINK_NAME.equals(name)) {\r\n            model.getLog().debug(\"Save drink: \" + name);\r\n            // Build JDOM document representing the settings\r\n            Element root = new Element(\"drink\");\r\n            Element minPriceElem = new Element(\"minPrice\");\r\n            minPriceElem.setText(String.valueOf(minPrice));\r\n            root.addContent(minPriceElem);\r\n            Element maxPriceElem = new Element(\"maxPrice\");\r\n            maxPriceElem.setText(String.valueOf(maxPrice));\r\n            root.addContent(maxPriceElem);\r\n            Element startPriceElem = new Element(\"startPrice\");\r\n            startPriceElem.setText(String.valueOf(startPrice));\r\n            root.addContent(startPriceElem);\r\n            Element targetAmountElem = new Element(\"targetAmount\");\r\n            targetAmountElem.setText(String.valueOf(targetAmount));\r\n            root.addContent(targetAmountElem);\r\n            Element deltaAmountElem = new Element(\"deltaAmount\");\r\n            deltaAmountElem.setText(String.valueOf(deltaAmount));\r\n            root.addContent(deltaAmountElem);\r\n            Element maxStepElem = new Element(\"maxStep\");\r\n            maxStepElem.setText(String.valueOf(maxStep));\r\n            root.addContent(maxStepElem);\r\n            Element usedElem = new Element(\"used\");\r\n            usedElem.setText(String.valueOf(used));\r\n            root.addContent(usedElem);\r\n            Element keyElem = new Element(\"key\");\r\n            keyElem.setText(String.valueOf(key));\r\n            root.addContent(keyElem);\r\n            Document settingsDoc = new Document(root);\r\n            // Save JDOM document to file system\r\n            File folder = new File(DRINKS_FOLDER);\r\n            File file = new File(DRINKS_FOLDER + name + \".xml\");\r\n            try {\r\n                if (!folder.exists()) {\r\n                    folder.mkdirs();\r\n                }\r\n                model.getLog().debug(\"File for Drink: \" + file.getAbsolutePath());\r\n                if (file.exists()) {\r\n                    file.delete();\r\n                }\r\n                file.createNewFile();\r\n                FileOutputStream fos = new FileOutputStream(file);\r\n                XMLOutputter serializer = new XMLOutputter();\r\n                serializer.output(settingsDoc, fos);\r\n                fos.flush();\r\n                fos.close();\r\n            } catch (Exception e) {\r\n                model.getLog().error(this, e);\r\n            }\r\n            return file;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Load the description from a XML file\r\n     */\r\n    public void load() {\r\n        model.getLog().debug(\"Load drink: \" + name);\r\n        try {\r\n            File file = new File(DRINKS_FOLDER + name + \".xml\");\r\n            model.getLog().debug(\"File for Drink: \" + file.getAbsolutePath());\r\n            if (file.exists()) {\r\n                SAXBuilder builder = new SAXBuilder();\r\n                Document doc = builder.build(file);\r\n                Element root = doc.getRootElement();\r\n                minPrice = Integer.valueOf(root.getChildText(\"minPrice\"));\r\n                maxPrice = Integer.valueOf(root.getChildText(\"maxPrice\"));\r\n                startPrice = Integer.valueOf(root.getChildText(\"startPrice\"));\r\n                targetAmount = Integer.valueOf(root.getChildText(\"targetAmount\"));\r\n                deltaAmount = Integer.valueOf(root.getChildText(\"deltaAmount\"));\r\n                maxStep = Integer.valueOf(root.getChildText(\"maxStep\"));\r\n                used = Boolean.parseBoolean(root.getChildText(\"used\"));\r\n                key = Integer.valueOf(root.getChildText(\"key\"));\r\n            }\r\n        } catch (Exception e1) {\r\n            model.getLog().error(this, e1);\r\n        }\r\n    }\r\n\r\n    public String toString() {\r\n        return name;\r\n    }\r\n\r\n    public static String getDataHeaderString() {\r\n        return \"NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD\";\r\n    }\r\n\r\n    public String getDataString() {\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(name);\r\n        result.append(Model.DELIMITER);\r\n        result.append(minPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(startPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(maxPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averageAmount);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averagePrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averageSoldPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(totalSold);\r\n        return result.toString();\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Getters and Setters\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    public int getMinPrice() {\r\n        return minPrice;\r\n    }\r\n\r\n    public void setMinPrice(int minPrice) {\r\n        this.minPrice = minPrice;\r\n    }\r\n\r\n    public int getMaxPrice() {\r\n        return maxPrice;\r\n    }\r\n\r\n    public void setMaxPrice(int maxPrice) {\r\n        this.maxPrice = maxPrice;\r\n    }\r\n\r\n    public int getCurrentPrice() {\r\n        return currentPrice;\r\n    }\r\n\r\n    public void setCurrentPrice(int currentPrice) {\r\n        this.currentPrice = currentPrice;\r\n    }\r\n\r\n    public int getLastSold() {\r\n        return lastSold;\r\n    }\r\n\r\n    public void setLastSold(int lastSold) {\r\n        this.lastSold = lastSold;\r\n    }\r\n\r\n    public int getTotalSold() {\r\n        return totalSold;\r\n    }\r\n\r\n    public void setTotalSold(int totalSold) {\r\n        this.totalSold = totalSold;\r\n    }\r\n\r\n    public float getAverageAmount() {\r\n        return averageAmount;\r\n    }\r\n\r\n    public void setAverageAmount(float averageAmount) {\r\n        this.averageAmount = averageAmount;\r\n    }\r\n\r\n    public float getAveragePrice() {\r\n        return averagePrice;\r\n    }\r\n\r\n    public void setAveragePrice(float averagePrice) {\r\n        this.averagePrice = averagePrice;\r\n    }\r\n\r\n    public float getAverageSoldPrice() {\r\n        return averageSoldPrice;\r\n    }\r\n\r\n    public void setAverageSoldPrice(float averageSoldPrice) {\r\n        this.averageSoldPrice = averageSoldPrice;\r\n    }\r\n\r\n    public int getMaxStep() {\r\n        return maxStep;\r\n    }\r\n\r\n    public void setMaxStep(int maxStep) {\r\n        this.maxStep = maxStep;\r\n    }\r\n\r\n    public int getTargetAmount() {\r\n        return targetAmount;\r\n    }\r\n\r\n    public void setTargetAmount(int targetAmount) {\r\n        this.targetAmount = targetAmount;\r\n    }\r\n\r\n    public int getDeltaAmount() {\r\n        return deltaAmount;\r\n    }\r\n\r\n    public void setDeltaAmount(int deltaAmount) {\r\n        this.deltaAmount = deltaAmount;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public int getStartPrice() {\r\n        return startPrice;\r\n    }\r\n\r\n    public void setStartPrice(int startPrice) {\r\n        this.startPrice = startPrice;\r\n    }\r\n\r\n    public boolean isUsed() {\r\n        return used;\r\n    }\r\n\r\n    public void setUsed(boolean used) {\r\n        this.used = used;\r\n    }\r\n\r\n    public int getKey() {\r\n        return key;\r\n    }\r\n\r\n    public void setKey(int key) {\r\n        this.key = key;\r\n    }\r\n\r\n    public int getTrend() {\r\n        return trend;\r\n    }\r\n\r\n    public boolean isKeepPrice() {\r\n        return keepPrice;\r\n    }\r\n\r\n    public void setKeepPrice(boolean keepPrice) {\r\n        this.keepPrice = keepPrice;\r\n    }\r\n\r\n    public int getDirectPrice() {\r\n        return directPrice;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        Drink drink = (Drink) obj;\r\n        if (name == null && drink.getName() == null) {\r\n            return true;\r\n        } else if (name != null && drink.getName() != null) {\r\n            return name.equals(((Drink) obj).getName());\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/model/DrinkTest4.java",
		"test_prompt": "// DrinkTest4.java\npackage bierse.model;\n\nimport java.awt.event.KeyEvent;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport bierse.view.MyKeyMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Drink}.\n* It contains ten unit test cases for the {@link Drink#isKeepPrice()} method.\n*/\nclass DrinkTest4 {"
	},
	{
		"original_code": "// Drink.java\n/**\r\n */\r\npackage bierse.model;\r\n\r\nimport java.awt.event.KeyEvent;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileWriter;\r\nimport org.jdom.Document;\r\nimport org.jdom.Element;\r\nimport org.jdom.input.SAXBuilder;\r\nimport org.jdom.output.XMLOutputter;\r\nimport bierse.view.MyKeyMap;\r\n\r\n/**\r\n * @author Rainer Friesen\r\n */\r\npublic class Drink {\r\n\r\n    public static final String DRINKS_FOLDER = Model.CONFIG_FOLDER + \"drinks/\";\r\n\r\n    public static final String NEW_DRINK_NAME = \"Neues Getrï¿½nk\";\r\n\r\n    /**\r\n     * Name of the drink\r\n     */\r\n    private String name;\r\n\r\n    /**\r\n     * Minimum price(Cent) for what the drink is sold.\r\n     */\r\n    private int minPrice = 70;\r\n\r\n    /**\r\n     * Maximum price(Cent) for what the drink is sold,\r\n     */\r\n    private int maxPrice = 130;\r\n\r\n    /**\r\n     * Current price(Cent) of the drink.\r\n     */\r\n    private int currentPrice = 0;\r\n\r\n    /**\r\n     * Start price for this drink\r\n     */\r\n    private int startPrice = 100;\r\n\r\n    /**\r\n     * Amount of drinks sold in the last iteration\r\n     */\r\n    private int lastSold = 0;\r\n\r\n    /**\r\n     * The total amount of drinks sold\r\n     */\r\n    private int totalSold = 0;\r\n\r\n    /**\r\n     * The average amount of drinks sold in an iteration. Used to calculate the new price.\r\n     */\r\n    private float averageAmount = 0;\r\n\r\n    /**\r\n     * The average price in cent\r\n     */\r\n    private float averagePrice = 0;\r\n\r\n    /**\r\n     * The average price (Cent) for what the drink is sold\r\n     */\r\n    private float averageSoldPrice = 0;\r\n\r\n    /**\r\n     * The maximum difference between two prices in one iteration\r\n     */\r\n    private int maxStep = 20;\r\n\r\n    /**\r\n     * The target amount of drinks to keep the price stable\r\n     */\r\n    private int targetAmount = 20;\r\n\r\n    /**\r\n     * The delta to calculate the step width. If the targetAmount - delta is not reached\r\n     * the price is decreased by the maximum step. If the targetAmount + delta is reached\r\n     * the price is increased by the maximum step.\r\n     */\r\n    private int deltaAmount = 15;\r\n\r\n    /**\r\n     * Show if the drink is used currently\r\n     */\r\n    private boolean used = true;\r\n\r\n    /**\r\n     * Key used to indicate the sell of a drink\r\n     */\r\n    private int key = KeyEvent.VK_F1;\r\n\r\n    /**\r\n     * Show if the price is lower (-1), equal(0) or higher(1) than during the last iteration\r\n     */\r\n    private int trend = 0;\r\n\r\n    /**\r\n     * Keep the price and do no new calculation\r\n     */\r\n    private boolean keepPrice = false;\r\n\r\n    /**\r\n     * Set the new price directly without calculating\r\n     */\r\n    private int directPrice = 0;\r\n\r\n    /**\r\n     * Model that uses the drink\r\n     */\r\n    Model model;\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Constructor\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    public Drink(String name, Model model) {\r\n        this.name = name;\r\n        this.model = model;\r\n        load();\r\n        currentPrice = startPrice;\r\n    }\r\n\r\n    public Drink(String name, Model model, int startPrice) {\r\n        this(name, model);\r\n        currentPrice = startPrice;\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Methods\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    /**\r\n     * Sell the amount of drinks\r\n     *\r\n     * @param amount Amount of drinks sold\r\n     */\r\n    public synchronized void sell(int amount) {\r\n        lastSold += amount;\r\n        model.informModelChangedListeners(Model.EVENT_DRINK_SOLD);\r\n    }\r\n\r\n    public void setDirectPrice(int directPrice) {\r\n        this.directPrice = directPrice;\r\n        model.informModelChangedListeners(Model.EVENT_DRINK_LIST_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Recalculate the current price for this drink\r\n     */\r\n    public int recalculate() {\r\n        //Calculate new average values\r\n        totalSold += lastSold;\r\n        averageAmount = (float) totalSold / model.getIteration();\r\n        averagePrice = ((averagePrice * (model.getIteration() - 1)) + currentPrice) / model.getIteration();\r\n        if (totalSold > 0) {\r\n            averageSoldPrice = ((averageSoldPrice * (totalSold - lastSold)) + (currentPrice * lastSold)) / totalSold;\r\n        }\r\n        int newPrice;\r\n        if (directPrice != 0) {\r\n            // If a direct price was set, use it\r\n            newPrice = directPrice;\r\n            directPrice = 0;\r\n        } else if (keepPrice) {\r\n            // Keep the price\r\n            newPrice = currentPrice;\r\n        } else {\r\n            // Calculate the new price\r\n            double diffSold = lastSold - targetAmount;\r\n            double factor = diffSold / deltaAmount;\r\n            double change = factor * maxStep;\r\n            int priceSteps = model.getSettings().getPriceSteps();\r\n            double rest = Math.floor(Math.abs(change % priceSteps));\r\n            double full = Math.floor(Math.abs(change / priceSteps));\r\n            int priceChange = 0;\r\n            if (rest >= priceSteps / 2) {\r\n                priceChange = priceSteps;\r\n            }\r\n            priceChange += full * priceSteps;\r\n            // Check that the change of the price is not more than the max step\r\n            if (priceChange > maxStep) {\r\n                priceChange = maxStep;\r\n            }\r\n            if (model.getSettings().isStandardLogic()) {\r\n                if (factor >= 0) {\r\n                    newPrice = currentPrice + priceChange;\r\n                } else {\r\n                    newPrice = currentPrice - priceChange;\r\n                }\r\n            } else {\r\n                // Inverse logic\r\n                if (factor >= 0) {\r\n                    newPrice = currentPrice - priceChange;\r\n                } else {\r\n                    newPrice = currentPrice + priceChange;\r\n                }\r\n            }\r\n        }\r\n        // Check that the new price is not above the max price or below the min price\r\n        if (newPrice > maxPrice) {\r\n            newPrice = maxPrice;\r\n        } else if (newPrice < minPrice) {\r\n            newPrice = minPrice;\r\n        }\r\n        // Calculate the trend\r\n        if (newPrice > currentPrice) {\r\n            trend = 1;\r\n        } else if (newPrice < currentPrice) {\r\n            trend = -1;\r\n        } else {\r\n            trend = 0;\r\n        }\r\n        currentPrice = newPrice;\r\n        //Debug output\r\n        model.getLog().debug(\"Recalculating drink: \" + name + \" for iteration: \" + model.getIteration());\r\n        model.getLog().debug(\"Last sold: \" + lastSold);\r\n        model.getLog().debug(\"Total sold:\" + totalSold);\r\n        model.getLog().debug(\"Average sold: \" + averageAmount);\r\n        model.getLog().debug(\"Average price: \" + averagePrice);\r\n        model.getLog().debug(\"Average sold price: \" + averageSoldPrice);\r\n        model.getLog().debug(\"New price: \" + currentPrice);\r\n        // Reset values for the next iteration\r\n        lastSold = 0;\r\n        return currentPrice;\r\n    }\r\n\r\n    /**\r\n     * Save the drink description to a XML file\r\n     */\r\n    public File save() {\r\n        if (!NEW_DRINK_NAME.equals(name)) {\r\n            model.getLog().debug(\"Save drink: \" + name);\r\n            // Build JDOM document representing the settings\r\n            Element root = new Element(\"drink\");\r\n            Element minPriceElem = new Element(\"minPrice\");\r\n            minPriceElem.setText(String.valueOf(minPrice));\r\n            root.addContent(minPriceElem);\r\n            Element maxPriceElem = new Element(\"maxPrice\");\r\n            maxPriceElem.setText(String.valueOf(maxPrice));\r\n            root.addContent(maxPriceElem);\r\n            Element startPriceElem = new Element(\"startPrice\");\r\n            startPriceElem.setText(String.valueOf(startPrice));\r\n            root.addContent(startPriceElem);\r\n            Element targetAmountElem = new Element(\"targetAmount\");\r\n            targetAmountElem.setText(String.valueOf(targetAmount));\r\n            root.addContent(targetAmountElem);\r\n            Element deltaAmountElem = new Element(\"deltaAmount\");\r\n            deltaAmountElem.setText(String.valueOf(deltaAmount));\r\n            root.addContent(deltaAmountElem);\r\n            Element maxStepElem = new Element(\"maxStep\");\r\n            maxStepElem.setText(String.valueOf(maxStep));\r\n            root.addContent(maxStepElem);\r\n            Element usedElem = new Element(\"used\");\r\n            usedElem.setText(String.valueOf(used));\r\n            root.addContent(usedElem);\r\n            Element keyElem = new Element(\"key\");\r\n            keyElem.setText(String.valueOf(key));\r\n            root.addContent(keyElem);\r\n            Document settingsDoc = new Document(root);\r\n            // Save JDOM document to file system\r\n            File folder = new File(DRINKS_FOLDER);\r\n            File file = new File(DRINKS_FOLDER + name + \".xml\");\r\n            try {\r\n                if (!folder.exists()) {\r\n                    folder.mkdirs();\r\n                }\r\n                model.getLog().debug(\"File for Drink: \" + file.getAbsolutePath());\r\n                if (file.exists()) {\r\n                    file.delete();\r\n                }\r\n                file.createNewFile();\r\n                FileOutputStream fos = new FileOutputStream(file);\r\n                XMLOutputter serializer = new XMLOutputter();\r\n                serializer.output(settingsDoc, fos);\r\n                fos.flush();\r\n                fos.close();\r\n            } catch (Exception e) {\r\n                model.getLog().error(this, e);\r\n            }\r\n            return file;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Load the description from a XML file\r\n     */\r\n    public void load() {\r\n        model.getLog().debug(\"Load drink: \" + name);\r\n        try {\r\n            File file = new File(DRINKS_FOLDER + name + \".xml\");\r\n            model.getLog().debug(\"File for Drink: \" + file.getAbsolutePath());\r\n            if (file.exists()) {\r\n                SAXBuilder builder = new SAXBuilder();\r\n                Document doc = builder.build(file);\r\n                Element root = doc.getRootElement();\r\n                minPrice = Integer.valueOf(root.getChildText(\"minPrice\"));\r\n                maxPrice = Integer.valueOf(root.getChildText(\"maxPrice\"));\r\n                startPrice = Integer.valueOf(root.getChildText(\"startPrice\"));\r\n                targetAmount = Integer.valueOf(root.getChildText(\"targetAmount\"));\r\n                deltaAmount = Integer.valueOf(root.getChildText(\"deltaAmount\"));\r\n                maxStep = Integer.valueOf(root.getChildText(\"maxStep\"));\r\n                used = Boolean.parseBoolean(root.getChildText(\"used\"));\r\n                key = Integer.valueOf(root.getChildText(\"key\"));\r\n            }\r\n        } catch (Exception e1) {\r\n            model.getLog().error(this, e1);\r\n        }\r\n    }\r\n\r\n    public String toString() {\r\n        return name;\r\n    }\r\n\r\n    public static String getDataHeaderString() {\r\n        return \"NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD\";\r\n    }\r\n\r\n    public String getDataString() {\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(name);\r\n        result.append(Model.DELIMITER);\r\n        result.append(minPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(startPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(maxPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averageAmount);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averagePrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(averageSoldPrice);\r\n        result.append(Model.DELIMITER);\r\n        result.append(totalSold);\r\n        return result.toString();\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************************************************************\r\n     *  Getters and Setters\r\n     * *******************************************************************************************************************************************\r\n     */\r\n    public int getMinPrice() {\r\n        return minPrice;\r\n    }\r\n\r\n    public void setMinPrice(int minPrice) {\r\n        this.minPrice = minPrice;\r\n    }\r\n\r\n    public int getMaxPrice() {\r\n        return maxPrice;\r\n    }\r\n\r\n    public void setMaxPrice(int maxPrice) {\r\n        this.maxPrice = maxPrice;\r\n    }\r\n\r\n    public int getCurrentPrice() {\r\n        return currentPrice;\r\n    }\r\n\r\n    public void setCurrentPrice(int currentPrice) {\r\n        this.currentPrice = currentPrice;\r\n    }\r\n\r\n    public int getLastSold() {\r\n        return lastSold;\r\n    }\r\n\r\n    public void setLastSold(int lastSold) {\r\n        this.lastSold = lastSold;\r\n    }\r\n\r\n    public int getTotalSold() {\r\n        return totalSold;\r\n    }\r\n\r\n    public void setTotalSold(int totalSold) {\r\n        this.totalSold = totalSold;\r\n    }\r\n\r\n    public float getAverageAmount() {\r\n        return averageAmount;\r\n    }\r\n\r\n    public void setAverageAmount(float averageAmount) {\r\n        this.averageAmount = averageAmount;\r\n    }\r\n\r\n    public float getAveragePrice() {\r\n        return averagePrice;\r\n    }\r\n\r\n    public void setAveragePrice(float averagePrice) {\r\n        this.averagePrice = averagePrice;\r\n    }\r\n\r\n    public float getAverageSoldPrice() {\r\n        return averageSoldPrice;\r\n    }\r\n\r\n    public void setAverageSoldPrice(float averageSoldPrice) {\r\n        this.averageSoldPrice = averageSoldPrice;\r\n    }\r\n\r\n    public int getMaxStep() {\r\n        return maxStep;\r\n    }\r\n\r\n    public void setMaxStep(int maxStep) {\r\n        this.maxStep = maxStep;\r\n    }\r\n\r\n    public int getTargetAmount() {\r\n        return targetAmount;\r\n    }\r\n\r\n    public void setTargetAmount(int targetAmount) {\r\n        this.targetAmount = targetAmount;\r\n    }\r\n\r\n    public int getDeltaAmount() {\r\n        return deltaAmount;\r\n    }\r\n\r\n    public void setDeltaAmount(int deltaAmount) {\r\n        this.deltaAmount = deltaAmount;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public int getStartPrice() {\r\n        return startPrice;\r\n    }\r\n\r\n    public void setStartPrice(int startPrice) {\r\n        this.startPrice = startPrice;\r\n    }\r\n\r\n    public boolean isUsed() {\r\n        return used;\r\n    }\r\n\r\n    public void setUsed(boolean used) {\r\n        this.used = used;\r\n    }\r\n\r\n    public int getKey() {\r\n        return key;\r\n    }\r\n\r\n    public void setKey(int key) {\r\n        this.key = key;\r\n    }\r\n\r\n    public int getTrend() {\r\n        return trend;\r\n    }\r\n\r\n    public boolean isKeepPrice() {\r\n        return keepPrice;\r\n    }\r\n\r\n    public void setKeepPrice(boolean keepPrice) {\r\n        this.keepPrice = keepPrice;\r\n    }\r\n\r\n    public int getDirectPrice() {\r\n        return directPrice;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        Drink drink = (Drink) obj;\r\n        if (name == null && drink.getName() == null) {\r\n            return true;\r\n        } else if (name != null && drink.getName() != null) {\r\n            return name.equals(((Drink) obj).getName());\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/model/DrinkTest5.java",
		"test_prompt": "// DrinkTest5.java\npackage bierse.model;\n\nimport java.awt.event.KeyEvent;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport bierse.view.MyKeyMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Drink}.\n* It contains ten unit test cases for the {@link Drink#equals(Object)} method.\n*/\nclass DrinkTest5 {"
	},
	{
		"original_code": "// Settings.java\npackage bierse.model;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport org.jdom.Document;\r\nimport org.jdom.Element;\r\nimport org.jdom.input.SAXBuilder;\r\nimport org.jdom.output.XMLOutputter;\r\n\r\npublic class Settings {\r\n\r\n    private static final String DOM_SETTINGS_ROOT = \"settings\";\r\n\r\n    private static final String DOM_TIME_INTERVAL = \"timeInterval\";\r\n\r\n    private static final String DOM_PRICE_STEPS = \"priceSteps\";\r\n\r\n    private static final String DOM_CURRENCY = \"currency\";\r\n\r\n    private static final String DOM_BACKGROUND_IMG = \"backgound\";\r\n\r\n    private static final String DOM_STANDARD_LOGIC = \"standardLogic\";\r\n\r\n    private static final String DOM_MESSAGE = \"message\";\r\n\r\n    private static final String DOM_MESSAGE_SPEED = \"messageSpeed\";\r\n\r\n    private static final String DOM_YES = \"y\";\r\n\r\n    private static final String DOM_NO = \"n\";\r\n\r\n    public static final String SETTINGS_FOLDER = Model.CONFIG_FOLDER + \"settings/\";\r\n\r\n    /**\r\n     * Time interval(seconds) in which the current prices are recalculated.\r\n     */\r\n    private int timeInterval = 10;\r\n\r\n    /**\r\n     * The steps that are available for the prices, e.g. 10, 20 or 50 cents\r\n     */\r\n    private int priceSteps = 10;\r\n\r\n    /**\r\n     * The currency symbol used\r\n     */\r\n    private java.lang.String currency = \"ï¿½\";\r\n\r\n    private boolean standardLogic = true;\r\n\r\n    private String backgroundImagePath = null;\r\n\r\n    private String message = \"Das ist eine Standard-Nachrichtfï¿½r das Laufband!\";\r\n\r\n    private int messageSpeed = 10;\r\n\r\n    /**\r\n     * Model that uses these settings\r\n     */\r\n    private Model model;\r\n\r\n    public Settings(Model m) {\r\n        model = m;\r\n        File f = new File(getClass().getResource(\"/img/background.jpg\").getPath());\r\n        backgroundImagePath = f.getAbsolutePath();\r\n        backgroundImagePath = backgroundImagePath.replace(\"%20\", \" \");\r\n    }\r\n\r\n    /**\r\n     * Save the settings\r\n     */\r\n    public File save() {\r\n        // Build JDOM document representing the settings\r\n        Element settingsRoot = new Element(DOM_SETTINGS_ROOT);\r\n        Element timeIntervalElem = new Element(DOM_TIME_INTERVAL);\r\n        timeIntervalElem.setText(String.valueOf(timeInterval));\r\n        settingsRoot.addContent(timeIntervalElem);\r\n        Element priceStepsElem = new Element(DOM_PRICE_STEPS);\r\n        priceStepsElem.setText(String.valueOf(priceSteps));\r\n        settingsRoot.addContent(priceStepsElem);\r\n        Element currencyElem = new Element(DOM_CURRENCY);\r\n        currencyElem.setText(currency);\r\n        settingsRoot.addContent(currencyElem);\r\n        Element backgroundElem = new Element(DOM_BACKGROUND_IMG);\r\n        backgroundElem.addContent(backgroundImagePath);\r\n        settingsRoot.addContent(backgroundElem);\r\n        Element standardLogicElem = new Element(DOM_STANDARD_LOGIC);\r\n        if (standardLogic) {\r\n            standardLogicElem.addContent(DOM_YES);\r\n        } else {\r\n            standardLogicElem.addContent(DOM_NO);\r\n        }\r\n        settingsRoot.addContent(standardLogicElem);\r\n        Element messageElem = new Element(DOM_MESSAGE);\r\n        messageElem.addContent(message);\r\n        settingsRoot.addContent(messageElem);\r\n        Element messageSpeedElem = new Element(DOM_MESSAGE_SPEED);\r\n        messageSpeedElem.addContent(new Integer(messageSpeed).toString());\r\n        settingsRoot.addContent(messageSpeedElem);\r\n        Document settingsDoc = new Document(settingsRoot);\r\n        // Save JDOM document to file system\r\n        File file = new File(SETTINGS_FOLDER + \"settings.xml\");\r\n        try {\r\n            File folder = new File(SETTINGS_FOLDER);\r\n            if (!folder.exists()) {\r\n                folder.mkdirs();\r\n            }\r\n            if (file.exists()) {\r\n                file.delete();\r\n            }\r\n            file.createNewFile();\r\n            FileOutputStream fos = new FileOutputStream(file);\r\n            XMLOutputter serializer = new XMLOutputter();\r\n            serializer.output(settingsDoc, fos);\r\n            fos.flush();\r\n            fos.close();\r\n        } catch (Exception e) {\r\n            model.getLog().error(this, e);\r\n        }\r\n        return file;\r\n    }\r\n\r\n    /**\r\n     * Load the settings\r\n     */\r\n    public void load() {\r\n        try {\r\n            File settingsFile = new File(SETTINGS_FOLDER + \"settings.xml\");\r\n            if (settingsFile.exists()) {\r\n                SAXBuilder builder = new SAXBuilder();\r\n                Document settingsDoc = builder.build(settingsFile);\r\n                Element settingsRoot = settingsDoc.getRootElement();\r\n                timeInterval = Integer.valueOf(settingsRoot.getChildText(DOM_TIME_INTERVAL));\r\n                model.setTimeLeft(timeInterval);\r\n                priceSteps = Integer.valueOf(settingsRoot.getChildText(DOM_PRICE_STEPS));\r\n                currency = settingsRoot.getChildText(DOM_CURRENCY);\r\n                backgroundImagePath = settingsRoot.getChildText(DOM_BACKGROUND_IMG);\r\n                String standardLogicValue = settingsRoot.getChildText(DOM_STANDARD_LOGIC);\r\n                if (DOM_NO.equals(standardLogicValue)) {\r\n                    standardLogic = false;\r\n                } else {\r\n                    standardLogic = true;\r\n                }\r\n                message = settingsRoot.getChildText(DOM_MESSAGE);\r\n                setMessageSpeed(new Integer(settingsRoot.getChildText(DOM_MESSAGE_SPEED)).intValue());\r\n            }\r\n        } catch (Exception e1) {\r\n            model.getLog().error(this, e1);\r\n        }\r\n    }\r\n\r\n    public int getTimeInterval() {\r\n        return timeInterval;\r\n    }\r\n\r\n    public void setTimeInterval(int timeInterval) {\r\n        this.timeInterval = timeInterval;\r\n    }\r\n\r\n    public int getPriceSteps() {\r\n        return priceSteps;\r\n    }\r\n\r\n    public void setPriceSteps(int priceSteps) {\r\n        this.priceSteps = priceSteps;\r\n    }\r\n\r\n    public java.lang.String getCurrency() {\r\n        return currency;\r\n    }\r\n\r\n    public void setCurrency(java.lang.String currency) {\r\n        this.currency = currency;\r\n    }\r\n\r\n    public boolean isStandardLogic() {\r\n        return standardLogic;\r\n    }\r\n\r\n    public void setStandardLogic(boolean standardLogic) {\r\n        this.standardLogic = standardLogic;\r\n    }\r\n\r\n    public String getBackgroundImagePath() {\r\n        return backgroundImagePath;\r\n    }\r\n\r\n    public void setBackgroundImagePath(String backgroundImagePath) {\r\n        this.backgroundImagePath = backgroundImagePath;\r\n    }\r\n\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n\r\n    public void setMessage(String message) {\r\n        this.message = message;\r\n    }\r\n\r\n    public int getMessageSpeed() {\r\n        return messageSpeed;\r\n    }\r\n\r\n    public void setMessageSpeed(int messageSpeed) {\r\n        this.messageSpeed = messageSpeed;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/model/SettingsTest0.java",
		"test_prompt": "// SettingsTest0.java\npackage bierse.model;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Settings}.\n* It contains ten unit test cases for the {@link Settings#save()} method.\n*/\nclass SettingsTest0 {"
	},
	{
		"original_code": "// Settings.java\npackage bierse.model;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport org.jdom.Document;\r\nimport org.jdom.Element;\r\nimport org.jdom.input.SAXBuilder;\r\nimport org.jdom.output.XMLOutputter;\r\n\r\npublic class Settings {\r\n\r\n    private static final String DOM_SETTINGS_ROOT = \"settings\";\r\n\r\n    private static final String DOM_TIME_INTERVAL = \"timeInterval\";\r\n\r\n    private static final String DOM_PRICE_STEPS = \"priceSteps\";\r\n\r\n    private static final String DOM_CURRENCY = \"currency\";\r\n\r\n    private static final String DOM_BACKGROUND_IMG = \"backgound\";\r\n\r\n    private static final String DOM_STANDARD_LOGIC = \"standardLogic\";\r\n\r\n    private static final String DOM_MESSAGE = \"message\";\r\n\r\n    private static final String DOM_MESSAGE_SPEED = \"messageSpeed\";\r\n\r\n    private static final String DOM_YES = \"y\";\r\n\r\n    private static final String DOM_NO = \"n\";\r\n\r\n    public static final String SETTINGS_FOLDER = Model.CONFIG_FOLDER + \"settings/\";\r\n\r\n    /**\r\n     * Time interval(seconds) in which the current prices are recalculated.\r\n     */\r\n    private int timeInterval = 10;\r\n\r\n    /**\r\n     * The steps that are available for the prices, e.g. 10, 20 or 50 cents\r\n     */\r\n    private int priceSteps = 10;\r\n\r\n    /**\r\n     * The currency symbol used\r\n     */\r\n    private java.lang.String currency = \"ï¿½\";\r\n\r\n    private boolean standardLogic = true;\r\n\r\n    private String backgroundImagePath = null;\r\n\r\n    private String message = \"Das ist eine Standard-Nachrichtfï¿½r das Laufband!\";\r\n\r\n    private int messageSpeed = 10;\r\n\r\n    /**\r\n     * Model that uses these settings\r\n     */\r\n    private Model model;\r\n\r\n    public Settings(Model m) {\r\n        model = m;\r\n        File f = new File(getClass().getResource(\"/img/background.jpg\").getPath());\r\n        backgroundImagePath = f.getAbsolutePath();\r\n        backgroundImagePath = backgroundImagePath.replace(\"%20\", \" \");\r\n    }\r\n\r\n    /**\r\n     * Save the settings\r\n     */\r\n    public File save() {\r\n        // Build JDOM document representing the settings\r\n        Element settingsRoot = new Element(DOM_SETTINGS_ROOT);\r\n        Element timeIntervalElem = new Element(DOM_TIME_INTERVAL);\r\n        timeIntervalElem.setText(String.valueOf(timeInterval));\r\n        settingsRoot.addContent(timeIntervalElem);\r\n        Element priceStepsElem = new Element(DOM_PRICE_STEPS);\r\n        priceStepsElem.setText(String.valueOf(priceSteps));\r\n        settingsRoot.addContent(priceStepsElem);\r\n        Element currencyElem = new Element(DOM_CURRENCY);\r\n        currencyElem.setText(currency);\r\n        settingsRoot.addContent(currencyElem);\r\n        Element backgroundElem = new Element(DOM_BACKGROUND_IMG);\r\n        backgroundElem.addContent(backgroundImagePath);\r\n        settingsRoot.addContent(backgroundElem);\r\n        Element standardLogicElem = new Element(DOM_STANDARD_LOGIC);\r\n        if (standardLogic) {\r\n            standardLogicElem.addContent(DOM_YES);\r\n        } else {\r\n            standardLogicElem.addContent(DOM_NO);\r\n        }\r\n        settingsRoot.addContent(standardLogicElem);\r\n        Element messageElem = new Element(DOM_MESSAGE);\r\n        messageElem.addContent(message);\r\n        settingsRoot.addContent(messageElem);\r\n        Element messageSpeedElem = new Element(DOM_MESSAGE_SPEED);\r\n        messageSpeedElem.addContent(new Integer(messageSpeed).toString());\r\n        settingsRoot.addContent(messageSpeedElem);\r\n        Document settingsDoc = new Document(settingsRoot);\r\n        // Save JDOM document to file system\r\n        File file = new File(SETTINGS_FOLDER + \"settings.xml\");\r\n        try {\r\n            File folder = new File(SETTINGS_FOLDER);\r\n            if (!folder.exists()) {\r\n                folder.mkdirs();\r\n            }\r\n            if (file.exists()) {\r\n                file.delete();\r\n            }\r\n            file.createNewFile();\r\n            FileOutputStream fos = new FileOutputStream(file);\r\n            XMLOutputter serializer = new XMLOutputter();\r\n            serializer.output(settingsDoc, fos);\r\n            fos.flush();\r\n            fos.close();\r\n        } catch (Exception e) {\r\n            model.getLog().error(this, e);\r\n        }\r\n        return file;\r\n    }\r\n\r\n    /**\r\n     * Load the settings\r\n     */\r\n    public void load() {\r\n        try {\r\n            File settingsFile = new File(SETTINGS_FOLDER + \"settings.xml\");\r\n            if (settingsFile.exists()) {\r\n                SAXBuilder builder = new SAXBuilder();\r\n                Document settingsDoc = builder.build(settingsFile);\r\n                Element settingsRoot = settingsDoc.getRootElement();\r\n                timeInterval = Integer.valueOf(settingsRoot.getChildText(DOM_TIME_INTERVAL));\r\n                model.setTimeLeft(timeInterval);\r\n                priceSteps = Integer.valueOf(settingsRoot.getChildText(DOM_PRICE_STEPS));\r\n                currency = settingsRoot.getChildText(DOM_CURRENCY);\r\n                backgroundImagePath = settingsRoot.getChildText(DOM_BACKGROUND_IMG);\r\n                String standardLogicValue = settingsRoot.getChildText(DOM_STANDARD_LOGIC);\r\n                if (DOM_NO.equals(standardLogicValue)) {\r\n                    standardLogic = false;\r\n                } else {\r\n                    standardLogic = true;\r\n                }\r\n                message = settingsRoot.getChildText(DOM_MESSAGE);\r\n                setMessageSpeed(new Integer(settingsRoot.getChildText(DOM_MESSAGE_SPEED)).intValue());\r\n            }\r\n        } catch (Exception e1) {\r\n            model.getLog().error(this, e1);\r\n        }\r\n    }\r\n\r\n    public int getTimeInterval() {\r\n        return timeInterval;\r\n    }\r\n\r\n    public void setTimeInterval(int timeInterval) {\r\n        this.timeInterval = timeInterval;\r\n    }\r\n\r\n    public int getPriceSteps() {\r\n        return priceSteps;\r\n    }\r\n\r\n    public void setPriceSteps(int priceSteps) {\r\n        this.priceSteps = priceSteps;\r\n    }\r\n\r\n    public java.lang.String getCurrency() {\r\n        return currency;\r\n    }\r\n\r\n    public void setCurrency(java.lang.String currency) {\r\n        this.currency = currency;\r\n    }\r\n\r\n    public boolean isStandardLogic() {\r\n        return standardLogic;\r\n    }\r\n\r\n    public void setStandardLogic(boolean standardLogic) {\r\n        this.standardLogic = standardLogic;\r\n    }\r\n\r\n    public String getBackgroundImagePath() {\r\n        return backgroundImagePath;\r\n    }\r\n\r\n    public void setBackgroundImagePath(String backgroundImagePath) {\r\n        this.backgroundImagePath = backgroundImagePath;\r\n    }\r\n\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n\r\n    public void setMessage(String message) {\r\n        this.message = message;\r\n    }\r\n\r\n    public int getMessageSpeed() {\r\n        return messageSpeed;\r\n    }\r\n\r\n    public void setMessageSpeed(int messageSpeed) {\r\n        this.messageSpeed = messageSpeed;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/model/SettingsTest1.java",
		"test_prompt": "// SettingsTest1.java\npackage bierse.model;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Settings}.\n* It contains ten unit test cases for the {@link Settings#isStandardLogic()} method.\n*/\nclass SettingsTest1 {"
	},
	{
		"original_code": "// Model.java\n/**\r\n */\r\npackage bierse.model;\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileWriter;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Vector;\r\nimport org.apache.log4j.BasicConfigurator;\r\nimport org.apache.log4j.Level;\r\nimport org.apache.log4j.Logger;\r\nimport org.jdom.output.XMLOutputter;\r\nimport bierse.controller.TriggerThread;\r\nimport bierse.view.IModelChangedListener;\r\n\r\n/**\r\n * @author Rainer Friesen\r\n */\r\npublic class Model {\r\n\r\n    /**\r\n     * ******************************************************************************************\r\n     *  Constants\r\n     * *******************************************************************************************\r\n     */\r\n    public static final String CONFIG_FOLDER = \"./conf/\";\r\n\r\n    public static final String DATA_FOLDER = \"./data/\";\r\n\r\n    public static final String DELIMITER = \";\";\r\n\r\n    public static final int EVENT_TIME_LEFT_CHANGED = 1;\r\n\r\n    public static final int EVENT_RECALCULATED = 2;\r\n\r\n    public static final int EVENT_NEW_VALIDATIONS = 4;\r\n\r\n    public static final int EVENT_DRINK_LIST_CHANGED = 8;\r\n\r\n    public static final int EVENT_DRINK_SOLD = 16;\r\n\r\n    public static final int EVENT_SETTINGS_CHANGED = 32;\r\n\r\n    /**\r\n     * ******************************************************************************************\r\n     *  Attributes\r\n     * *******************************************************************************************\r\n     */\r\n    private TriggerThread triggerThread;\r\n\r\n    private Vector<Drink> lstDrinks = new Vector<Drink>();\r\n\r\n    private Settings settings;\r\n\r\n    private boolean running;\r\n\r\n    private int iteration = 1;\r\n\r\n    private List<IModelChangedListener> lstModelChangedListener = new Vector<IModelChangedListener>();\r\n\r\n    private List<String> lstValidations;\r\n\r\n    private List<Integer> lstUsedKeys = new Vector<Integer>();\r\n\r\n    private Logger log;\r\n\r\n    /**\r\n     * Time left till the next calculation of prices is started\r\n     */\r\n    private int timeLeft;\r\n\r\n    /**\r\n     * ******************************************************************************************\r\n     *  Constructors\r\n     * *******************************************************************************************\r\n     */\r\n    public Model() {\r\n        // Configure and create the logger\r\n        BasicConfigurator.configure();\r\n        log = Logger.getLogger(this.getClass());\r\n        log.setLevel(Level.WARN);\r\n        settings = new Settings(this);\r\n        settings.load();\r\n        loadAllDrinks();\r\n        triggerThread = new TriggerThread(\"TriggerThread\", this);\r\n        log.debug(\"Model created: \" + this);\r\n    }\r\n\r\n    /**\r\n     * ******************************************************************************************\r\n     *  Methods\r\n     * *******************************************************************************************\r\n     */\r\n    /**\r\n     * Recalculate the prices of all drinks\r\n     */\r\n    public synchronized void recalculate() {\r\n        // Go over all drinks and call the recalculation of them\r\n        log.debug(\"Recalculate all drinks\");\r\n        for (Drink d : getLstUsedDrink()) {\r\n            d.recalculate();\r\n        }\r\n        iteration++;\r\n        informModelChangedListeners(EVENT_RECALCULATED);\r\n    }\r\n\r\n    /**\r\n     * Informs all model change listeners when the model has changed\r\n     */\r\n    public void informModelChangedListeners(int eventType) {\r\n        for (IModelChangedListener mcl : lstModelChangedListener) {\r\n            mcl.fireModelChanged(eventType);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a new model change listener at the model\r\n     *\r\n     * @param listener\r\n     */\r\n    public void registerModelChangedListener(IModelChangedListener listener) {\r\n        lstModelChangedListener.add(listener);\r\n    }\r\n\r\n    /**\r\n     * Start the simulation\r\n     */\r\n    public void start() {\r\n        log.debug(\"START\");\r\n        running = true;\r\n        triggerThread.start();\r\n    }\r\n\r\n    /**\r\n     * Stop the simulation\r\n     */\r\n    public void stop() {\r\n        log.debug(\"STOP\");\r\n        running = false;\r\n        triggerThread.interrupt();\r\n    }\r\n\r\n    /**\r\n     * Load all drinks from the file system and put them in the matching list.\r\n     */\r\n    public void loadAllDrinks() {\r\n        File dir = new File(Drink.DRINKS_FOLDER);\r\n        if (dir.exists()) {\r\n            File[] files = dir.listFiles();\r\n            for (File f : files) {\r\n                Drink d = new Drink(f.getName().substring(0, f.getName().lastIndexOf(\".\")), this);\r\n                d.load();\r\n                lstDrinks.add(d);\r\n            }\r\n        }\r\n        validate();\r\n        informModelChangedListeners(EVENT_DRINK_LIST_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Enable a drink to be used by the simulation\r\n     *\r\n     * @param d The Drink to enable\r\n     */\r\n    public void enableDrink(Drink d) {\r\n        d.setUsed(true);\r\n        validate();\r\n        informModelChangedListeners(EVENT_DRINK_LIST_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Disable a drink to be used by the simulation\r\n     *\r\n     * @param d The drink to disable\r\n     */\r\n    public void disableDrink(Drink d) {\r\n        d.setUsed(false);\r\n        validate();\r\n        informModelChangedListeners(EVENT_DRINK_LIST_CHANGED);\r\n    }\r\n\r\n    public void changeDrinkKey(Drink d) {\r\n        validate();\r\n        informModelChangedListeners(EVENT_DRINK_LIST_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Validate the model and check if everything is all right\r\n     */\r\n    public void validate() {\r\n        lstValidations = new Vector<String>();\r\n        validateDrinks();\r\n        if (lstValidations.size() > 0) {\r\n            informModelChangedListeners(EVENT_NEW_VALIDATIONS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if the drinks have no conflicts, e.g. two drinks use the same key\r\n     */\r\n    public void validateDrinks() {\r\n        lstUsedKeys = new Vector<Integer>();\r\n        for (Drink d : getLstUsedDrink()) {\r\n            if (lstUsedKeys.contains(d.getKey())) {\r\n                addValidation(\"Die Taste: \" + d.getKey() + \"wird mehrfach verwendet!\");\r\n            }\r\n            lstUsedKeys.add(d.getKey());\r\n        }\r\n    }\r\n\r\n    public void beforeClose() {\r\n        // Save last data\r\n        // Save JDOM document to file system\r\n        File folder = new File(DATA_FOLDER);\r\n        SimpleDateFormat df = new SimpleDateFormat(\"yyMMddHHmmss\");\r\n        File file = new File(DATA_FOLDER + df.format(new Date()) + \".csv\");\r\n        try {\r\n            if (!folder.exists()) {\r\n                folder.mkdirs();\r\n            }\r\n            getLog().debug(\"Save last data before close\");\r\n            if (file.exists()) {\r\n                file.delete();\r\n            }\r\n            file.createNewFile();\r\n            BufferedWriter bw = new BufferedWriter(new FileWriter(file));\r\n            bw.write(Drink.getDataHeaderString());\r\n            bw.write(System.getProperty(\"line.separator\"));\r\n            for (Drink d : getLstDrinks()) {\r\n                bw.write(d.getDataString());\r\n                bw.write(System.getProperty(\"line.separator\"));\r\n            }\r\n            bw.flush();\r\n            bw.close();\r\n        } catch (Exception e) {\r\n            getLog().error(this, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * *******************************************************************************************\r\n     *  Getters and Setters\r\n     * *******************************************************************************************\r\n     */\r\n    public List<Drink> getLstAvailableDrink() {\r\n        Vector<Drink> result = new Vector();\r\n        for (Drink drink : lstDrinks) {\r\n            if (!drink.isUsed()) {\r\n                result.add(drink);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public Vector<Drink> getLstUsedDrink() {\r\n        Vector<Drink> result = new Vector();\r\n        for (Drink drink : lstDrinks) {\r\n            if (drink.isUsed()) {\r\n                result.add(drink);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public Vector<Drink> getLstDrinks() {\r\n        return lstDrinks;\r\n    }\r\n\r\n    public Settings getSettings() {\r\n        return settings;\r\n    }\r\n\r\n    public void setSettings(Settings settings) {\r\n        this.settings = settings;\r\n    }\r\n\r\n    public boolean isRunning() {\r\n        return running;\r\n    }\r\n\r\n    public void setRunning(boolean running) {\r\n        this.running = running;\r\n    }\r\n\r\n    public Logger getLog() {\r\n        return log;\r\n    }\r\n\r\n    public int getTimeLeft() {\r\n        return timeLeft;\r\n    }\r\n\r\n    public void setTimeLeft(int timeLeft) {\r\n        this.timeLeft = timeLeft;\r\n        informModelChangedListeners(EVENT_TIME_LEFT_CHANGED);\r\n    }\r\n\r\n    public List<IModelChangedListener> getLstModelChangeListener() {\r\n        return lstModelChangedListener;\r\n    }\r\n\r\n    public void setLstModelChangeListener(List<IModelChangedListener> lstModelChangeListener) {\r\n        this.lstModelChangedListener = lstModelChangeListener;\r\n    }\r\n\r\n    public List<String> getLstValidations() {\r\n        return lstValidations;\r\n    }\r\n\r\n    public void setLstValidations(List<String> lstValidations) {\r\n        this.lstValidations = lstValidations;\r\n    }\r\n\r\n    public void addValidation(String validationMessage) {\r\n        lstValidations.add(validationMessage);\r\n    }\r\n\r\n    public List<Integer> getUsedKeys() {\r\n        return lstUsedKeys;\r\n    }\r\n\r\n    public int getIteration() {\r\n        return iteration;\r\n    }\r\n\r\n    public void setIteration(int iteration) {\r\n        this.iteration = iteration;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/model/ModelTest.java",
		"test_prompt": "// ModelTest.java\npackage bierse.model;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Vector;\nimport org.apache.log4j.BasicConfigurator;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.jdom.output.XMLOutputter;\nimport bierse.controller.TriggerThread;\nimport bierse.view.IModelChangedListener;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Model}.\n* It contains ten unit test cases for the {@link Model#isRunning()} method.\n*/\nclass ModelTest {"
	},
	{
		"original_code": "// DefaultInfoView.java\npackage bierse.view;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.Component;\r\nimport java.awt.Dimension;\r\nimport java.awt.FlowLayout;\r\nimport java.awt.Font;\r\nimport java.awt.Graphics;\r\nimport java.awt.GridLayout;\r\nimport java.awt.Image;\r\nimport java.awt.MediaTracker;\r\nimport java.awt.Point;\r\nimport java.awt.Toolkit;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.event.MouseListener;\r\nimport java.awt.event.MouseMotionListener;\r\nimport java.awt.image.ImageObserver;\r\nimport java.io.File;\r\nimport java.text.DecimalFormat;\r\nimport javax.swing.Box;\r\nimport javax.swing.BoxLayout;\r\nimport javax.swing.Icon;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JMenuItem;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JPopupMenu;\r\nimport javax.swing.SwingUtilities;\r\nimport javax.swing.event.MouseInputAdapter;\r\nimport bierse.model.Drink;\r\nimport bierse.model.Model;\r\n\r\npublic class DefaultInfoView extends JPanel implements IModelChangedListener, ImageObserver {\r\n\r\n    private final static DecimalFormat df = new DecimalFormat(\"0.00\");\r\n\r\n    private final static Font font = new Font(Font.SERIF, Font.PLAIN, 60);\r\n\r\n    private final ImageIcon trendNeutralIcon = new ImageIcon(getClass().getResource(\"/img/neutral.gif\"));\r\n\r\n    private final ImageIcon trendLowerIcon = new ImageIcon(getClass().getResource(\"/img/lower.gif\"));\r\n\r\n    private final ImageIcon trendHigherIcon = new ImageIcon(getClass().getResource(\"/img/higher.gif\"));\r\n\r\n    private Model model;\r\n\r\n    private Image bgrImg;\r\n\r\n    private JLabel timeLeftLabel;\r\n\r\n    private RunningMessagePanel runningMessagePanel;\r\n\r\n    private JFrame frame;\r\n\r\n    public DefaultInfoView(Model model) {\r\n        frame = new JFrame(\"Preise\");\r\n        frame.setUndecorated(true);\r\n        Object mouseListener = new DefaultInfoViewMouseListener(frame);\r\n        frame.addMouseListener((MouseListener) mouseListener);\r\n        frame.addMouseMotionListener((MouseMotionListener) mouseListener);\r\n        JPopupMenu contextMenu = new JPopupMenu();\r\n        JMenuItem closeMenuItem = new JMenuItem(\"Schlieï¿½en\");\r\n        closeMenuItem.addActionListener(new ActionListener() {\r\n\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                frame.dispose();\r\n            }\r\n        });\r\n        contextMenu.add(closeMenuItem);\r\n        this.model = model;\r\n        model.registerModelChangedListener(this);\r\n        frame.getContentPane().setLayout(new BorderLayout());\r\n        JPanel infoPanel = createInfoPanel(model, contextMenu);\r\n        frame.getContentPane().add(infoPanel, BorderLayout.SOUTH);\r\n        setOpaque(false);\r\n        add(createDrinkList());\r\n        bgrImg = Toolkit.getDefaultToolkit().createImage(model.getSettings().getBackgroundImagePath());\r\n        MediaTracker mt = new MediaTracker(this);\r\n        mt.addImage(bgrImg, 0);\r\n        try {\r\n            mt.waitForAll();\r\n        } catch (Exception e) {\r\n            model.getLog().error(this, e);\r\n        }\r\n        frame.getContentPane().add(this, BorderLayout.CENTER);\r\n        frame.setAlwaysOnTop(true);\r\n        frame.setSize(new Dimension(800, 600));\r\n        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\r\n        frame.setVisible(true);\r\n    }\r\n\r\n    private JPanel createInfoPanel(Model model, JPopupMenu contextMenu) {\r\n        JPanel infoPanel = new JPanel(new BorderLayout());\r\n        infoPanel.setComponentPopupMenu(contextMenu);\r\n        runningMessagePanel = new RunningMessagePanel(model.getSettings().getMessage(), model.getSettings().getMessageSpeed());\r\n        infoPanel.add(runningMessagePanel, BorderLayout.CENTER);\r\n        JPanel timeLeftPanel = createTimeLeftPanel(model, runningMessagePanel);\r\n        infoPanel.add(timeLeftPanel, BorderLayout.EAST);\r\n        return infoPanel;\r\n    }\r\n\r\n    private JPanel createTimeLeftPanel(Model model, RunningMessagePanel runningMessagePanel) {\r\n        JPanel timeLeftPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));\r\n        timeLeftPanel.setOpaque(false);\r\n        timeLeftLabel = new JLabel(\"Noch \" + model.getTimeLeft() + \" Sekunden\");\r\n        timeLeftPanel.add(timeLeftLabel);\r\n        Dimension panelDim = new Dimension();\r\n        int width = timeLeftLabel.getFontMetrics(timeLeftLabel.getFont()).stringWidth(\"Noch \" + model.getSettings().getTimeInterval() + \" Sekunden\");\r\n        panelDim.setSize(width + 10, runningMessagePanel.getStringHeight());\r\n        timeLeftPanel.setPreferredSize(panelDim);\r\n        timeLeftPanel.setMinimumSize(panelDim);\r\n        return timeLeftPanel;\r\n    }\r\n\r\n    protected void paintComponent(Graphics g) {\r\n        g.drawImage(bgrImg, 0, 0, this.getWidth(), this.getHeight(), this);\r\n        super.paintComponent(g);\r\n    }\r\n\r\n    private JPanel createDrinkList() {\r\n        JPanel drinkListPanel = new JPanel();\r\n        drinkListPanel.setOpaque(false);\r\n        drinkListPanel.setLayout(new GridLayout(model.getLstUsedDrink().size(), 1));\r\n        for (Drink drink : model.getLstUsedDrink()) {\r\n            Box drinkBox = new Box(BoxLayout.X_AXIS);\r\n            JLabel nameLabel = new JLabel(drink.getName() + \":  \");\r\n            nameLabel.setFont(font);\r\n            drinkBox.add(nameLabel);\r\n            float price = drink.getCurrentPrice() / 100f;\r\n            JLabel priceLabel = new JLabel(df.format(price) + \" \" + model.getSettings().getCurrency() + \"  \");\r\n            priceLabel.setFont(font);\r\n            drinkBox.add(priceLabel);\r\n            ImageIcon trendIcon = trendNeutralIcon;\r\n            if (drink.getTrend() < 0) {\r\n                trendIcon = trendLowerIcon;\r\n            } else if (drink.getTrend() > 0) {\r\n                trendIcon = trendHigherIcon;\r\n            }\r\n            JLabel trendLabel = new JLabel(trendIcon);\r\n            trendLabel.setFont(font);\r\n            drinkBox.add(trendLabel);\r\n            drinkListPanel.add(drinkBox);\r\n        }\r\n        return drinkListPanel;\r\n    }\r\n\r\n    @Override\r\n    public void fireModelChanged(int eventType) {\r\n        if ((eventType & Model.EVENT_RECALCULATED + Model.EVENT_SETTINGS_CHANGED) > 0) {\r\n            removeAll();\r\n            add(createDrinkList());\r\n            runningMessagePanel.setSpeed(model.getSettings().getMessageSpeed());\r\n            runningMessagePanel.setMessage(model.getSettings().getMessage());\r\n        }\r\n        if ((eventType & Model.EVENT_TIME_LEFT_CHANGED) > 0) {\r\n            timeLeftLabel.setText(\"Noch \" + model.getTimeLeft() + \" Sekunden\");\r\n        }\r\n        validate();\r\n        repaint();\r\n    }\r\n\r\n    @Override\r\n    public boolean imageUpdate(Image img, int infoflags, int x, int y, int w, int h) {\r\n        return true;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/view/DefaultInfoViewTest.java",
		"test_prompt": "// DefaultInfoViewTest.java\npackage bierse.view;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.GridLayout;\nimport java.awt.Image;\nimport java.awt.MediaTracker;\nimport java.awt.Point;\nimport java.awt.Toolkit;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseListener;\nimport java.awt.event.MouseMotionListener;\nimport java.awt.image.ImageObserver;\nimport java.io.File;\nimport java.text.DecimalFormat;\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.Icon;\nimport javax.swing.ImageIcon;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JPopupMenu;\nimport javax.swing.SwingUtilities;\nimport javax.swing.event.MouseInputAdapter;\nimport bierse.model.Drink;\nimport bierse.model.Model;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultInfoView}.\n* It contains ten unit test cases for the {@link DefaultInfoView#imageUpdate(Image, int, int, int, int, int)} method.\n*/\nclass DefaultInfoViewTest {"
	},
	{
		"original_code": "// DefaultSettingsView.java\npackage bierse.view;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.FlowLayout;\r\nimport java.awt.GridLayout;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.KeyListener;\r\nimport java.util.Vector;\r\nimport javax.swing.ButtonGroup;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JCheckBox;\r\nimport javax.swing.JComboBox;\r\nimport javax.swing.JDialog;\r\nimport javax.swing.JFileChooser;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JRadioButton;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JSlider;\r\nimport javax.swing.JTabbedPane;\r\nimport javax.swing.JTextField;\r\nimport bierse.view.ISettingsView;\r\nimport bierse.model.Drink;\r\nimport bierse.model.Model;\r\n\r\npublic class DefaultSettingsView extends JFrame implements ISettingsView, IDrinkSettingsView {\r\n\r\n    private static final long serialVersionUID = -1160952914735227669L;\r\n\r\n    JButton okButton;\r\n\r\n    JButton cancelButton;\r\n\r\n    JTextField timeIntervalTextField;\r\n\r\n    JTextField currencyTextField;\r\n\r\n    JRadioButton priceStep5RadioButton;\r\n\r\n    JRadioButton priceStep10RadioButton;\r\n\r\n    JRadioButton priceStep20RadioButton;\r\n\r\n    JRadioButton priceStep50RadioButton;\r\n\r\n    JCheckBox standardLogicCheckBox;\r\n\r\n    JTextField backgroundFilePathtextField;\r\n\r\n    JButton fileChooserButton;\r\n\r\n    JTextField runningMessageTextField;\r\n\r\n    JSlider runningMessageSpeedSlider;\r\n\r\n    JPanel drinkSettingsPanel;\r\n\r\n    JComboBox drinkComboBox;\r\n\r\n    JTextField drinkNameTextField;\r\n\r\n    JComboBox drinkKeyComboBox;\r\n\r\n    JTextField drinkStartPriceTextField;\r\n\r\n    JTextField drinkMinPriceTextField;\r\n\r\n    JTextField drinkMaxPriceTextField;\r\n\r\n    JTextField drinkMaxStepTextField;\r\n\r\n    JTextField drinkTargetAmountTextField;\r\n\r\n    JTextField drinkDeltaAmountTextField;\r\n\r\n    JCheckBox drinkIsUsedCheckBox;\r\n\r\n    private Model model;\r\n\r\n    private Drink drink;\r\n\r\n    public DefaultSettingsView(Model model) {\r\n        super(\"Einstellungen\");\r\n        this.model = model;\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        JPanel mainPanel = new JPanel();\r\n        mainPanel.setLayout(new BorderLayout());\r\n        mainPanel.add(tabbedPane, BorderLayout.CENTER);\r\n        getContentPane().add(mainPanel);\r\n        JPanel mainSettingsPanel = new JPanel();\r\n        mainSettingsPanel.setLayout(new GridLayout(1, 1));\r\n        JScrollPane settingsScrollPane = new JScrollPane(mainSettingsPanel);\r\n        mainSettingsPanel.add(createSettingsPanel());\r\n        drinkSettingsPanel = new JPanel();\r\n        drinkSettingsPanel.setLayout(new BorderLayout());\r\n        JScrollPane drinkSettingsScrollPane = new JScrollPane(drinkSettingsPanel);\r\n        Drink newDrink = new Drink(Drink.NEW_DRINK_NAME, model);\r\n        if (!model.getLstDrinks().contains(newDrink)) {\r\n            model.getLstDrinks().add(newDrink);\r\n        }\r\n        if (model.getLstDrinks().size() > 0) {\r\n            drink = model.getLstDrinks().get(0);\r\n        } else {\r\n            drink = newDrink;\r\n        }\r\n        drinkComboBox = new JComboBox(model.getLstDrinks());\r\n        drinkComboBox.setActionCommand(ISettingsView.SETTINGS_ACTION_DRINK_SELECTED);\r\n        drinkSettingsPanel.add(drinkComboBox, BorderLayout.NORTH);\r\n        drinkSettingsPanel.add(createDrinkSettingsPanel(drink), BorderLayout.CENTER);\r\n        JPanel buttonPanel = new JPanel();\r\n        buttonPanel.setLayout(new GridLayout(1, 2));\r\n        okButton = new JButton(\"OK\");\r\n        okButton.setMnemonic(KeyEvent.VK_O);\r\n        okButton.setActionCommand(ISettingsView.SETTINGS_ACTION_OK);\r\n        buttonPanel.add(okButton);\r\n        cancelButton = new JButton(\"Abbrechen\");\r\n        cancelButton.setMnemonic(KeyEvent.VK_A);\r\n        cancelButton.setActionCommand(ISettingsView.SETTINGS_ACTION_CANCEL);\r\n        buttonPanel.add(cancelButton);\r\n        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\r\n        // Add settings panel to tabbed pane\r\n        tabbedPane.addTab(\"Einstellungen\", settingsScrollPane);\r\n        tabbedPane.addTab(\"Drink Einstellungen\", drinkSettingsScrollPane);\r\n        pack();\r\n        setVisible(true);\r\n    }\r\n\r\n    private JPanel createDrinkSettingsPanel(Drink drink) {\r\n        JPanel drinkSettings = new JPanel();\r\n        drinkSettings.setLayout(new GridLayout(0, 2));\r\n        JLabel drinkNameLabel = new JLabel(\"Name\");\r\n        drinkSettings.add(drinkNameLabel);\r\n        drinkNameTextField = new JTextField(drink.getName());\r\n        drinkSettings.add(drinkNameTextField);\r\n        JLabel drinkKeyLabel = new JLabel(\"Taste\");\r\n        drinkSettings.add(drinkKeyLabel);\r\n        drinkKeyComboBox = new JComboBox(new KeyMapComboBoxModel());\r\n        drinkKeyComboBox.setSelectedItem(KeyMapComboBoxModel.getMyKeyMapForKeyCode(drink.getKey()));\r\n        drinkSettings.add(drinkKeyComboBox);\r\n        JLabel drinkStartPriceLabel = new JLabel(\"Start Preis\");\r\n        drinkSettings.add(drinkStartPriceLabel);\r\n        drinkStartPriceTextField = new JTextField(String.valueOf(drink.getStartPrice()));\r\n        drinkSettings.add(drinkStartPriceTextField);\r\n        JLabel drinkMinPriceLabel = new JLabel(\"Minimum Preis\");\r\n        drinkSettings.add(drinkMinPriceLabel);\r\n        drinkMinPriceTextField = new JTextField(String.valueOf(drink.getMinPrice()));\r\n        drinkSettings.add(drinkMinPriceTextField);\r\n        JLabel drinkMaxPriceLabel = new JLabel(\"Maximum Preis\");\r\n        drinkSettings.add(drinkMaxPriceLabel);\r\n        drinkMaxPriceTextField = new JTextField(String.valueOf(drink.getMaxPrice()));\r\n        drinkSettings.add(drinkMaxPriceTextField);\r\n        JLabel drinkMaxStep = new JLabel(\"Maximum Preisschritt\");\r\n        drinkSettings.add(drinkMaxStep);\r\n        drinkMaxStepTextField = new JTextField(String.valueOf(drink.getMaxStep()));\r\n        drinkSettings.add(drinkMaxStepTextField);\r\n        JLabel drinkTargetAmountLabel = new JLabel(\"Verkauf-Soll\");\r\n        drinkSettings.add(drinkTargetAmountLabel);\r\n        drinkTargetAmountTextField = new JTextField(String.valueOf(drink.getTargetAmount()));\r\n        drinkSettings.add(drinkTargetAmountTextField);\r\n        JLabel drinkDeltaAmountLabel = new JLabel(\"VerkaufDifferenz\");\r\n        drinkSettings.add(drinkDeltaAmountLabel);\r\n        drinkDeltaAmountTextField = new JTextField(String.valueOf(drink.getDeltaAmount()));\r\n        drinkSettings.add(drinkDeltaAmountTextField);\r\n        drinkIsUsedCheckBox = new JCheckBox(\"Aktiv\");\r\n        drinkIsUsedCheckBox.setSelected(drink.isUsed());\r\n        drinkSettings.add(drinkIsUsedCheckBox);\r\n        return drinkSettings;\r\n    }\r\n\r\n    private JPanel createSettingsPanel() {\r\n        // Create settings panel\r\n        JPanel settingsPanel = new JPanel();\r\n        settingsPanel.setLayout(new BorderLayout(10, 10));\r\n        // Create panel containing the labels\r\n        JPanel labelPanel = new JPanel();\r\n        labelPanel.setLayout(new GridLayout(0, 1));\r\n        // Create panel containing the values\r\n        JPanel valuePanel = new JPanel();\r\n        valuePanel.setLayout(new GridLayout(0, 1));\r\n        // Setting for time interval\r\n        JLabel timeIntervalLabel = new JLabel(\"Zeitinterval\");\r\n        labelPanel.add(timeIntervalLabel);\r\n        timeIntervalTextField = new JTextField(String.valueOf(model.getSettings().getTimeInterval()));\r\n        valuePanel.add(timeIntervalTextField);\r\n        // Setting for price steps\r\n        JLabel priceStepsLabel = new JLabel(\"Preisschritte\");\r\n        labelPanel.add(priceStepsLabel);\r\n        // Create panel for price steps radio buttons\r\n        JPanel buttonGroupPanel = new JPanel();\r\n        buttonGroupPanel.setLayout(new FlowLayout(FlowLayout.LEFT));\r\n        ButtonGroup priceStepsButtonGroup = new ButtonGroup();\r\n        priceStep5RadioButton = new JRadioButton(\"5\");\r\n        priceStepsButtonGroup.add(priceStep5RadioButton);\r\n        buttonGroupPanel.add(priceStep5RadioButton);\r\n        priceStep10RadioButton = new JRadioButton(\"10\");\r\n        buttonGroupPanel.add(priceStep10RadioButton);\r\n        priceStepsButtonGroup.add(priceStep10RadioButton);\r\n        priceStep20RadioButton = new JRadioButton(\"20\");\r\n        buttonGroupPanel.add(priceStep20RadioButton);\r\n        priceStepsButtonGroup.add(priceStep20RadioButton);\r\n        priceStep50RadioButton = new JRadioButton(\"50\");\r\n        buttonGroupPanel.add(priceStep50RadioButton);\r\n        priceStepsButtonGroup.add(priceStep50RadioButton);\r\n        if (model.getSettings().getPriceSteps() == 5) {\r\n            priceStep5RadioButton.setSelected(true);\r\n        } else if (model.getSettings().getPriceSteps() == 10) {\r\n            priceStep10RadioButton.setSelected(true);\r\n        } else if (model.getSettings().getPriceSteps() == 20) {\r\n            priceStep20RadioButton.setSelected(true);\r\n        } else if (model.getSettings().getPriceSteps() == 50) {\r\n            priceStep50RadioButton.setSelected(true);\r\n        }\r\n        valuePanel.add(buttonGroupPanel);\r\n        // Setting for Currency\r\n        JLabel currencyLabel = new JLabel(\"Wï¿½hrung\");\r\n        labelPanel.add(currencyLabel);\r\n        currencyTextField = new JTextField(model.getSettings().getCurrency());\r\n        valuePanel.add(currencyTextField);\r\n        // Setting for background image\r\n        JLabel backgroundFileLabel = new JLabel(\"Hintergrundbild\");\r\n        labelPanel.add(backgroundFileLabel);\r\n        JPanel backgroundImageChooserPanel = new JPanel();\r\n        backgroundImageChooserPanel.setLayout(new BorderLayout());\r\n        backgroundFilePathtextField = new JTextField(model.getSettings().getBackgroundImagePath());\r\n        backgroundImageChooserPanel.add(backgroundFilePathtextField, BorderLayout.CENTER);\r\n        fileChooserButton = new JButton(\"...\");\r\n        fileChooserButton.setActionCommand(ISettingsView.SETTINGS_ACTION_CHOOSE_BACKGROUND);\r\n        backgroundImageChooserPanel.add(fileChooserButton, BorderLayout.EAST);\r\n        valuePanel.add(backgroundImageChooserPanel);\r\n        // Setting for standard logic\r\n        JLabel standardLogicLabel = new JLabel();\r\n        labelPanel.add(standardLogicLabel);\r\n        standardLogicCheckBox = new JCheckBox(\"Standard Logik\");\r\n        standardLogicCheckBox.setToolTipText(\"Standard Logik: Mehr verkauft -> Preis steigt\");\r\n        standardLogicCheckBox.setSelected(model.getSettings().isStandardLogic());\r\n        valuePanel.add(standardLogicCheckBox);\r\n        // Setting for running message text\r\n        JLabel runningMessageTextLabel = new JLabel(\"Lauftext\");\r\n        labelPanel.add(runningMessageTextLabel);\r\n        runningMessageTextField = new JTextField(model.getSettings().getMessage());\r\n        valuePanel.add(runningMessageTextField);\r\n        // Setting for running message speed\r\n        JLabel runningMessageSpeedLabel = new JLabel(\"Lauftext Geschwindigkeit\");\r\n        labelPanel.add(runningMessageSpeedLabel);\r\n        runningMessageSpeedSlider = new JSlider(1, 70, model.getSettings().getMessageSpeed());\r\n        runningMessageSpeedSlider.setMinorTickSpacing(5);\r\n        runningMessageSpeedSlider.setInverted(true);\r\n        runningMessageSpeedSlider.setToolTipText(\"Links langsamer, Rechts schneller\");\r\n        valuePanel.add(runningMessageSpeedSlider);\r\n        // Add label and value panel to main panel\r\n        settingsPanel.add(labelPanel, BorderLayout.WEST);\r\n        settingsPanel.add(valuePanel, BorderLayout.CENTER);\r\n        // Return main panel\r\n        return settingsPanel;\r\n    }\r\n\r\n    public void setSettingsController(ActionListener al) {\r\n        okButton.addActionListener(al);\r\n        cancelButton.addActionListener(al);\r\n        drinkComboBox.addActionListener(al);\r\n        fileChooserButton.addActionListener(al);\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n        dispose();\r\n    }\r\n\r\n    @Override\r\n    public int getTimeInterval() {\r\n        try {\r\n            return Integer.valueOf(timeIntervalTextField.getText()).intValue();\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public String getCurrency() {\r\n        return currencyTextField.getText();\r\n    }\r\n\r\n    @Override\r\n    public int getPriceSteps() {\r\n        if (priceStep5RadioButton.isSelected()) {\r\n            return 5;\r\n        } else if (priceStep10RadioButton.isSelected()) {\r\n            return 10;\r\n        } else if (priceStep20RadioButton.isSelected()) {\r\n            return 20;\r\n        } else if (priceStep50RadioButton.isSelected()) {\r\n            return 50;\r\n        }\r\n        return 10;\r\n    }\r\n\r\n    @Override\r\n    public String getDrinkName() {\r\n        return drinkNameTextField.getText();\r\n    }\r\n\r\n    @Override\r\n    public int getKey() {\r\n        try {\r\n            return ((MyKeyMap) drinkKeyComboBox.getSelectedItem()).getCode();\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public int getStartPrice() {\r\n        try {\r\n            return Integer.valueOf(drinkStartPriceTextField.getText());\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public int getMinPrice() {\r\n        try {\r\n            return Integer.valueOf(drinkMinPriceTextField.getText());\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public int getMaxPrice() {\r\n        try {\r\n            return Integer.valueOf(drinkMaxPriceTextField.getText());\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public int getMaxStep() {\r\n        try {\r\n            return Integer.valueOf(drinkMaxStepTextField.getText());\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public int getTargetAmount() {\r\n        try {\r\n            return Integer.valueOf(drinkTargetAmountTextField.getText());\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public int getDeltaAmount() {\r\n        try {\r\n            return Integer.valueOf(drinkDeltaAmountTextField.getText());\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public boolean isUsed() {\r\n        return drinkIsUsedCheckBox.isSelected();\r\n    }\r\n\r\n    public Drink getDrink() {\r\n        return drink;\r\n    }\r\n\r\n    @Override\r\n    public boolean isStandardLogic() {\r\n        return standardLogicCheckBox.isSelected();\r\n    }\r\n\r\n    @Override\r\n    public String getBackgroundPicturePath() {\r\n        return backgroundFilePathtextField.getText();\r\n    }\r\n\r\n    @Override\r\n    public void setBackgronudPicturePath(String path) {\r\n        backgroundFilePathtextField.setText(path);\r\n    }\r\n\r\n    @Override\r\n    public void setDrink(Drink drink) {\r\n        this.drink = drink;\r\n        drinkSettingsPanel.removeAll();\r\n        drinkSettingsPanel.add(drinkComboBox, BorderLayout.NORTH);\r\n        drinkSettingsPanel.add(createDrinkSettingsPanel(drink), BorderLayout.CENTER);\r\n        validate();\r\n        repaint();\r\n    }\r\n\r\n    @Override\r\n    public String getRunningMessage() {\r\n        return runningMessageTextField.getText();\r\n    }\r\n\r\n    @Override\r\n    public int getRunningMessageSpeed() {\r\n        return runningMessageSpeedSlider.getValue();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/view/DefaultSettingsViewTest0.java",
		"test_prompt": "// DefaultSettingsViewTest0.java\npackage bierse.view;\n\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.GridLayout;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.util.Vector;\nimport javax.swing.ButtonGroup;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JDialog;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JRadioButton;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSlider;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTextField;\nimport bierse.view.ISettingsView;\nimport bierse.model.Drink;\nimport bierse.model.Model;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultSettingsView}.\n* It contains ten unit test cases for the {@link DefaultSettingsView#isUsed()} method.\n*/\nclass DefaultSettingsViewTest0 {"
	},
	{
		"original_code": "// DefaultSettingsView.java\npackage bierse.view;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.FlowLayout;\r\nimport java.awt.GridLayout;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.KeyListener;\r\nimport java.util.Vector;\r\nimport javax.swing.ButtonGroup;\r\nimport javax.swing.JButton;\r\nimport javax.swing.JCheckBox;\r\nimport javax.swing.JComboBox;\r\nimport javax.swing.JDialog;\r\nimport javax.swing.JFileChooser;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.JRadioButton;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JSlider;\r\nimport javax.swing.JTabbedPane;\r\nimport javax.swing.JTextField;\r\nimport bierse.view.ISettingsView;\r\nimport bierse.model.Drink;\r\nimport bierse.model.Model;\r\n\r\npublic class DefaultSettingsView extends JFrame implements ISettingsView, IDrinkSettingsView {\r\n\r\n    private static final long serialVersionUID = -1160952914735227669L;\r\n\r\n    JButton okButton;\r\n\r\n    JButton cancelButton;\r\n\r\n    JTextField timeIntervalTextField;\r\n\r\n    JTextField currencyTextField;\r\n\r\n    JRadioButton priceStep5RadioButton;\r\n\r\n    JRadioButton priceStep10RadioButton;\r\n\r\n    JRadioButton priceStep20RadioButton;\r\n\r\n    JRadioButton priceStep50RadioButton;\r\n\r\n    JCheckBox standardLogicCheckBox;\r\n\r\n    JTextField backgroundFilePathtextField;\r\n\r\n    JButton fileChooserButton;\r\n\r\n    JTextField runningMessageTextField;\r\n\r\n    JSlider runningMessageSpeedSlider;\r\n\r\n    JPanel drinkSettingsPanel;\r\n\r\n    JComboBox drinkComboBox;\r\n\r\n    JTextField drinkNameTextField;\r\n\r\n    JComboBox drinkKeyComboBox;\r\n\r\n    JTextField drinkStartPriceTextField;\r\n\r\n    JTextField drinkMinPriceTextField;\r\n\r\n    JTextField drinkMaxPriceTextField;\r\n\r\n    JTextField drinkMaxStepTextField;\r\n\r\n    JTextField drinkTargetAmountTextField;\r\n\r\n    JTextField drinkDeltaAmountTextField;\r\n\r\n    JCheckBox drinkIsUsedCheckBox;\r\n\r\n    private Model model;\r\n\r\n    private Drink drink;\r\n\r\n    public DefaultSettingsView(Model model) {\r\n        super(\"Einstellungen\");\r\n        this.model = model;\r\n        JTabbedPane tabbedPane = new JTabbedPane();\r\n        JPanel mainPanel = new JPanel();\r\n        mainPanel.setLayout(new BorderLayout());\r\n        mainPanel.add(tabbedPane, BorderLayout.CENTER);\r\n        getContentPane().add(mainPanel);\r\n        JPanel mainSettingsPanel = new JPanel();\r\n        mainSettingsPanel.setLayout(new GridLayout(1, 1));\r\n        JScrollPane settingsScrollPane = new JScrollPane(mainSettingsPanel);\r\n        mainSettingsPanel.add(createSettingsPanel());\r\n        drinkSettingsPanel = new JPanel();\r\n        drinkSettingsPanel.setLayout(new BorderLayout());\r\n        JScrollPane drinkSettingsScrollPane = new JScrollPane(drinkSettingsPanel);\r\n        Drink newDrink = new Drink(Drink.NEW_DRINK_NAME, model);\r\n        if (!model.getLstDrinks().contains(newDrink)) {\r\n            model.getLstDrinks().add(newDrink);\r\n        }\r\n        if (model.getLstDrinks().size() > 0) {\r\n            drink = model.getLstDrinks().get(0);\r\n        } else {\r\n            drink = newDrink;\r\n        }\r\n        drinkComboBox = new JComboBox(model.getLstDrinks());\r\n        drinkComboBox.setActionCommand(ISettingsView.SETTINGS_ACTION_DRINK_SELECTED);\r\n        drinkSettingsPanel.add(drinkComboBox, BorderLayout.NORTH);\r\n        drinkSettingsPanel.add(createDrinkSettingsPanel(drink), BorderLayout.CENTER);\r\n        JPanel buttonPanel = new JPanel();\r\n        buttonPanel.setLayout(new GridLayout(1, 2));\r\n        okButton = new JButton(\"OK\");\r\n        okButton.setMnemonic(KeyEvent.VK_O);\r\n        okButton.setActionCommand(ISettingsView.SETTINGS_ACTION_OK);\r\n        buttonPanel.add(okButton);\r\n        cancelButton = new JButton(\"Abbrechen\");\r\n        cancelButton.setMnemonic(KeyEvent.VK_A);\r\n        cancelButton.setActionCommand(ISettingsView.SETTINGS_ACTION_CANCEL);\r\n        buttonPanel.add(cancelButton);\r\n        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\r\n        // Add settings panel to tabbed pane\r\n        tabbedPane.addTab(\"Einstellungen\", settingsScrollPane);\r\n        tabbedPane.addTab(\"Drink Einstellungen\", drinkSettingsScrollPane);\r\n        pack();\r\n        setVisible(true);\r\n    }\r\n\r\n    private JPanel createDrinkSettingsPanel(Drink drink) {\r\n        JPanel drinkSettings = new JPanel();\r\n        drinkSettings.setLayout(new GridLayout(0, 2));\r\n        JLabel drinkNameLabel = new JLabel(\"Name\");\r\n        drinkSettings.add(drinkNameLabel);\r\n        drinkNameTextField = new JTextField(drink.getName());\r\n        drinkSettings.add(drinkNameTextField);\r\n        JLabel drinkKeyLabel = new JLabel(\"Taste\");\r\n        drinkSettings.add(drinkKeyLabel);\r\n        drinkKeyComboBox = new JComboBox(new KeyMapComboBoxModel());\r\n        drinkKeyComboBox.setSelectedItem(KeyMapComboBoxModel.getMyKeyMapForKeyCode(drink.getKey()));\r\n        drinkSettings.add(drinkKeyComboBox);\r\n        JLabel drinkStartPriceLabel = new JLabel(\"Start Preis\");\r\n        drinkSettings.add(drinkStartPriceLabel);\r\n        drinkStartPriceTextField = new JTextField(String.valueOf(drink.getStartPrice()));\r\n        drinkSettings.add(drinkStartPriceTextField);\r\n        JLabel drinkMinPriceLabel = new JLabel(\"Minimum Preis\");\r\n        drinkSettings.add(drinkMinPriceLabel);\r\n        drinkMinPriceTextField = new JTextField(String.valueOf(drink.getMinPrice()));\r\n        drinkSettings.add(drinkMinPriceTextField);\r\n        JLabel drinkMaxPriceLabel = new JLabel(\"Maximum Preis\");\r\n        drinkSettings.add(drinkMaxPriceLabel);\r\n        drinkMaxPriceTextField = new JTextField(String.valueOf(drink.getMaxPrice()));\r\n        drinkSettings.add(drinkMaxPriceTextField);\r\n        JLabel drinkMaxStep = new JLabel(\"Maximum Preisschritt\");\r\n        drinkSettings.add(drinkMaxStep);\r\n        drinkMaxStepTextField = new JTextField(String.valueOf(drink.getMaxStep()));\r\n        drinkSettings.add(drinkMaxStepTextField);\r\n        JLabel drinkTargetAmountLabel = new JLabel(\"Verkauf-Soll\");\r\n        drinkSettings.add(drinkTargetAmountLabel);\r\n        drinkTargetAmountTextField = new JTextField(String.valueOf(drink.getTargetAmount()));\r\n        drinkSettings.add(drinkTargetAmountTextField);\r\n        JLabel drinkDeltaAmountLabel = new JLabel(\"VerkaufDifferenz\");\r\n        drinkSettings.add(drinkDeltaAmountLabel);\r\n        drinkDeltaAmountTextField = new JTextField(String.valueOf(drink.getDeltaAmount()));\r\n        drinkSettings.add(drinkDeltaAmountTextField);\r\n        drinkIsUsedCheckBox = new JCheckBox(\"Aktiv\");\r\n        drinkIsUsedCheckBox.setSelected(drink.isUsed());\r\n        drinkSettings.add(drinkIsUsedCheckBox);\r\n        return drinkSettings;\r\n    }\r\n\r\n    private JPanel createSettingsPanel() {\r\n        // Create settings panel\r\n        JPanel settingsPanel = new JPanel();\r\n        settingsPanel.setLayout(new BorderLayout(10, 10));\r\n        // Create panel containing the labels\r\n        JPanel labelPanel = new JPanel();\r\n        labelPanel.setLayout(new GridLayout(0, 1));\r\n        // Create panel containing the values\r\n        JPanel valuePanel = new JPanel();\r\n        valuePanel.setLayout(new GridLayout(0, 1));\r\n        // Setting for time interval\r\n        JLabel timeIntervalLabel = new JLabel(\"Zeitinterval\");\r\n        labelPanel.add(timeIntervalLabel);\r\n        timeIntervalTextField = new JTextField(String.valueOf(model.getSettings().getTimeInterval()));\r\n        valuePanel.add(timeIntervalTextField);\r\n        // Setting for price steps\r\n        JLabel priceStepsLabel = new JLabel(\"Preisschritte\");\r\n        labelPanel.add(priceStepsLabel);\r\n        // Create panel for price steps radio buttons\r\n        JPanel buttonGroupPanel = new JPanel();\r\n        buttonGroupPanel.setLayout(new FlowLayout(FlowLayout.LEFT));\r\n        ButtonGroup priceStepsButtonGroup = new ButtonGroup();\r\n        priceStep5RadioButton = new JRadioButton(\"5\");\r\n        priceStepsButtonGroup.add(priceStep5RadioButton);\r\n        buttonGroupPanel.add(priceStep5RadioButton);\r\n        priceStep10RadioButton = new JRadioButton(\"10\");\r\n        buttonGroupPanel.add(priceStep10RadioButton);\r\n        priceStepsButtonGroup.add(priceStep10RadioButton);\r\n        priceStep20RadioButton = new JRadioButton(\"20\");\r\n        buttonGroupPanel.add(priceStep20RadioButton);\r\n        priceStepsButtonGroup.add(priceStep20RadioButton);\r\n        priceStep50RadioButton = new JRadioButton(\"50\");\r\n        buttonGroupPanel.add(priceStep50RadioButton);\r\n        priceStepsButtonGroup.add(priceStep50RadioButton);\r\n        if (model.getSettings().getPriceSteps() == 5) {\r\n            priceStep5RadioButton.setSelected(true);\r\n        } else if (model.getSettings().getPriceSteps() == 10) {\r\n            priceStep10RadioButton.setSelected(true);\r\n        } else if (model.getSettings().getPriceSteps() == 20) {\r\n            priceStep20RadioButton.setSelected(true);\r\n        } else if (model.getSettings().getPriceSteps() == 50) {\r\n            priceStep50RadioButton.setSelected(true);\r\n        }\r\n        valuePanel.add(buttonGroupPanel);\r\n        // Setting for Currency\r\n        JLabel currencyLabel = new JLabel(\"Wï¿½hrung\");\r\n        labelPanel.add(currencyLabel);\r\n        currencyTextField = new JTextField(model.getSettings().getCurrency());\r\n        valuePanel.add(currencyTextField);\r\n        // Setting for background image\r\n        JLabel backgroundFileLabel = new JLabel(\"Hintergrundbild\");\r\n        labelPanel.add(backgroundFileLabel);\r\n        JPanel backgroundImageChooserPanel = new JPanel();\r\n        backgroundImageChooserPanel.setLayout(new BorderLayout());\r\n        backgroundFilePathtextField = new JTextField(model.getSettings().getBackgroundImagePath());\r\n        backgroundImageChooserPanel.add(backgroundFilePathtextField, BorderLayout.CENTER);\r\n        fileChooserButton = new JButton(\"...\");\r\n        fileChooserButton.setActionCommand(ISettingsView.SETTINGS_ACTION_CHOOSE_BACKGROUND);\r\n        backgroundImageChooserPanel.add(fileChooserButton, BorderLayout.EAST);\r\n        valuePanel.add(backgroundImageChooserPanel);\r\n        // Setting for standard logic\r\n        JLabel standardLogicLabel = new JLabel();\r\n        labelPanel.add(standardLogicLabel);\r\n        standardLogicCheckBox = new JCheckBox(\"Standard Logik\");\r\n        standardLogicCheckBox.setToolTipText(\"Standard Logik: Mehr verkauft -> Preis steigt\");\r\n        standardLogicCheckBox.setSelected(model.getSettings().isStandardLogic());\r\n        valuePanel.add(standardLogicCheckBox);\r\n        // Setting for running message text\r\n        JLabel runningMessageTextLabel = new JLabel(\"Lauftext\");\r\n        labelPanel.add(runningMessageTextLabel);\r\n        runningMessageTextField = new JTextField(model.getSettings().getMessage());\r\n        valuePanel.add(runningMessageTextField);\r\n        // Setting for running message speed\r\n        JLabel runningMessageSpeedLabel = new JLabel(\"Lauftext Geschwindigkeit\");\r\n        labelPanel.add(runningMessageSpeedLabel);\r\n        runningMessageSpeedSlider = new JSlider(1, 70, model.getSettings().getMessageSpeed());\r\n        runningMessageSpeedSlider.setMinorTickSpacing(5);\r\n        runningMessageSpeedSlider.setInverted(true);\r\n        runningMessageSpeedSlider.setToolTipText(\"Links langsamer, Rechts schneller\");\r\n        valuePanel.add(runningMessageSpeedSlider);\r\n        // Add label and value panel to main panel\r\n        settingsPanel.add(labelPanel, BorderLayout.WEST);\r\n        settingsPanel.add(valuePanel, BorderLayout.CENTER);\r\n        // Return main panel\r\n        return settingsPanel;\r\n    }\r\n\r\n    public void setSettingsController(ActionListener al) {\r\n        okButton.addActionListener(al);\r\n        cancelButton.addActionListener(al);\r\n        drinkComboBox.addActionListener(al);\r\n        fileChooserButton.addActionListener(al);\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n        dispose();\r\n    }\r\n\r\n    @Override\r\n    public int getTimeInterval() {\r\n        try {\r\n            return Integer.valueOf(timeIntervalTextField.getText()).intValue();\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public String getCurrency() {\r\n        return currencyTextField.getText();\r\n    }\r\n\r\n    @Override\r\n    public int getPriceSteps() {\r\n        if (priceStep5RadioButton.isSelected()) {\r\n            return 5;\r\n        } else if (priceStep10RadioButton.isSelected()) {\r\n            return 10;\r\n        } else if (priceStep20RadioButton.isSelected()) {\r\n            return 20;\r\n        } else if (priceStep50RadioButton.isSelected()) {\r\n            return 50;\r\n        }\r\n        return 10;\r\n    }\r\n\r\n    @Override\r\n    public String getDrinkName() {\r\n        return drinkNameTextField.getText();\r\n    }\r\n\r\n    @Override\r\n    public int getKey() {\r\n        try {\r\n            return ((MyKeyMap) drinkKeyComboBox.getSelectedItem()).getCode();\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public int getStartPrice() {\r\n        try {\r\n            return Integer.valueOf(drinkStartPriceTextField.getText());\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public int getMinPrice() {\r\n        try {\r\n            return Integer.valueOf(drinkMinPriceTextField.getText());\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public int getMaxPrice() {\r\n        try {\r\n            return Integer.valueOf(drinkMaxPriceTextField.getText());\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public int getMaxStep() {\r\n        try {\r\n            return Integer.valueOf(drinkMaxStepTextField.getText());\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public int getTargetAmount() {\r\n        try {\r\n            return Integer.valueOf(drinkTargetAmountTextField.getText());\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public int getDeltaAmount() {\r\n        try {\r\n            return Integer.valueOf(drinkDeltaAmountTextField.getText());\r\n        } catch (NumberFormatException nfe) {\r\n            model.getLog().error(this, nfe);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    @Override\r\n    public boolean isUsed() {\r\n        return drinkIsUsedCheckBox.isSelected();\r\n    }\r\n\r\n    public Drink getDrink() {\r\n        return drink;\r\n    }\r\n\r\n    @Override\r\n    public boolean isStandardLogic() {\r\n        return standardLogicCheckBox.isSelected();\r\n    }\r\n\r\n    @Override\r\n    public String getBackgroundPicturePath() {\r\n        return backgroundFilePathtextField.getText();\r\n    }\r\n\r\n    @Override\r\n    public void setBackgronudPicturePath(String path) {\r\n        backgroundFilePathtextField.setText(path);\r\n    }\r\n\r\n    @Override\r\n    public void setDrink(Drink drink) {\r\n        this.drink = drink;\r\n        drinkSettingsPanel.removeAll();\r\n        drinkSettingsPanel.add(drinkComboBox, BorderLayout.NORTH);\r\n        drinkSettingsPanel.add(createDrinkSettingsPanel(drink), BorderLayout.CENTER);\r\n        validate();\r\n        repaint();\r\n    }\r\n\r\n    @Override\r\n    public String getRunningMessage() {\r\n        return runningMessageTextField.getText();\r\n    }\r\n\r\n    @Override\r\n    public int getRunningMessageSpeed() {\r\n        return runningMessageSpeedSlider.getValue();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/view/DefaultSettingsViewTest1.java",
		"test_prompt": "// DefaultSettingsViewTest1.java\npackage bierse.view;\n\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.GridLayout;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.util.Vector;\nimport javax.swing.ButtonGroup;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JDialog;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JRadioButton;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSlider;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTextField;\nimport bierse.view.ISettingsView;\nimport bierse.model.Drink;\nimport bierse.model.Model;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultSettingsView}.\n* It contains ten unit test cases for the {@link DefaultSettingsView#isStandardLogic()} method.\n*/\nclass DefaultSettingsViewTest1 {"
	},
	{
		"original_code": "// KeyMapComboBoxModel.java\npackage bierse.view;\r\n\r\nimport java.awt.event.KeyEvent;\r\nimport javax.swing.DefaultComboBoxModel;\r\n\r\npublic class KeyMapComboBoxModel extends DefaultComboBoxModel {\r\n\r\n    /**\r\n     */\r\n    private static final long serialVersionUID = 1087130775887552360L;\r\n\r\n    public static final String KEYNAME_F1 = \"F1\";\r\n\r\n    public static final String KEYNAME_F2 = \"F2\";\r\n\r\n    public static final String KEYNAME_F3 = \"F3\";\r\n\r\n    public static final String KEYNAME_F4 = \"F4\";\r\n\r\n    public static final String KEYNAME_F5 = \"F5\";\r\n\r\n    public static final String KEYNAME_F6 = \"F6\";\r\n\r\n    public static final String KEYNAME_F7 = \"F7\";\r\n\r\n    public static final String KEYNAME_F8 = \"F8\";\r\n\r\n    public static final String KEYNAME_F9 = \"F9\";\r\n\r\n    public static final String KEYNAME_F10 = \"F10\";\r\n\r\n    public static final String KEYNAME_F11 = \"F11\";\r\n\r\n    public static final String KEYNAME_F12 = \"F12\";\r\n\r\n    private static final MyKeyMap KM1 = new MyKeyMap(KEYNAME_F1, KeyEvent.VK_F1);\r\n\r\n    private static final MyKeyMap KM2 = new MyKeyMap(KEYNAME_F2, KeyEvent.VK_F2);\r\n\r\n    private static final MyKeyMap KM3 = new MyKeyMap(KEYNAME_F3, KeyEvent.VK_F3);\r\n\r\n    private static final MyKeyMap KM4 = new MyKeyMap(KEYNAME_F4, KeyEvent.VK_F4);\r\n\r\n    private static final MyKeyMap KM5 = new MyKeyMap(KEYNAME_F5, KeyEvent.VK_F5);\r\n\r\n    private static final MyKeyMap KM6 = new MyKeyMap(KEYNAME_F6, KeyEvent.VK_F6);\r\n\r\n    private static final MyKeyMap KM7 = new MyKeyMap(KEYNAME_F7, KeyEvent.VK_F7);\r\n\r\n    private static final MyKeyMap KM8 = new MyKeyMap(KEYNAME_F8, KeyEvent.VK_F8);\r\n\r\n    private static final MyKeyMap KM9 = new MyKeyMap(KEYNAME_F9, KeyEvent.VK_F9);\r\n\r\n    private static final MyKeyMap KM10 = new MyKeyMap(KEYNAME_F10, KeyEvent.VK_F10);\r\n\r\n    private static final MyKeyMap KM11 = new MyKeyMap(KEYNAME_F11, KeyEvent.VK_F11);\r\n\r\n    private static final MyKeyMap KM12 = new MyKeyMap(KEYNAME_F12, KeyEvent.VK_F12);\r\n\r\n    public KeyMapComboBoxModel() {\r\n        this.addElement(KM1);\r\n        this.addElement(KM2);\r\n        this.addElement(KM3);\r\n        this.addElement(KM4);\r\n        this.addElement(KM5);\r\n        this.addElement(KM6);\r\n        this.addElement(KM7);\r\n        this.addElement(KM8);\r\n        this.addElement(KM9);\r\n        this.addElement(KM10);\r\n        this.addElement(KM11);\r\n        this.addElement(KM12);\r\n    }\r\n\r\n    public static MyKeyMap getMyKeyMapForKeyCode(int keyCode) {\r\n        switch(keyCode) {\r\n            case KeyEvent.VK_F1:\r\n                return KM1;\r\n            case KeyEvent.VK_F2:\r\n                return KM2;\r\n            case KeyEvent.VK_F3:\r\n                return KM3;\r\n            case KeyEvent.VK_F4:\r\n                return KM4;\r\n            case KeyEvent.VK_F5:\r\n                return KM5;\r\n            case KeyEvent.VK_F6:\r\n                return KM6;\r\n            case KeyEvent.VK_F7:\r\n                return KM7;\r\n            case KeyEvent.VK_F8:\r\n                return KM8;\r\n            case KeyEvent.VK_F9:\r\n                return KM9;\r\n            case KeyEvent.VK_F10:\r\n                return KM10;\r\n            case KeyEvent.VK_F11:\r\n                return KM11;\r\n            case KeyEvent.VK_F12:\r\n                return KM12;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/49_diebierse/src/main/java/bierse/view/KeyMapComboBoxModelTest.java",
		"test_prompt": "// KeyMapComboBoxModelTest.java\npackage bierse.view;\n\nimport java.awt.event.KeyEvent;\nimport javax.swing.DefaultComboBoxModel;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KeyMapComboBoxModel}.\n* It contains ten unit test cases for the {@link KeyMapComboBoxModel#getMyKeyMapForKeyCode(int)} method.\n*/\nclass KeyMapComboBoxModelTest {"
	}
]