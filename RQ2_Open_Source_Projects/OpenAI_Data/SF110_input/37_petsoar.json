[
	{
		"original_code": "// MoneyConverter.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.util;\n\nimport ognl.DefaultTypeConverter;\nimport java.math.BigDecimal;\nimport java.text.DecimalFormat;\nimport java.text.ParseException;\nimport java.util.Map;\n\npublic class MoneyConverter extends DefaultTypeConverter {\n\n    public Object convertValue(Map context, Object object, Class toType) {\n        DecimalFormat format = new DecimalFormat(\"$#0.00\");\n        if (toType == String.class) {\n            BigDecimal d = (BigDecimal) object;\n            if (d == null) {\n                d = new BigDecimal(0);\n            }\n            return format.format(d.doubleValue());\n        } else if (toType == BigDecimal.class) {\n            String s = ((String[]) object)[0];\n            try {\n                return new BigDecimal(format.parse(s).doubleValue());\n            } catch (ParseException e) {\n                DecimalFormat backup = new DecimalFormat(\"#0.00\");\n                try {\n                    return new BigDecimal(backup.parse(s).doubleValue());\n                } catch (ParseException e1) {\n                }\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/util/MoneyConverterTest.java",
		"test_prompt": "// MoneyConverterTest.java\npackage org.petsoar.util;\n\nimport ognl.DefaultTypeConverter;\nimport java.math.BigDecimal;\nimport java.text.DecimalFormat;\nimport java.text.ParseException;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MoneyConverter}.\n* It contains ten unit test cases for the {@link MoneyConverter#convertValue(Map, Object, Class)} method.\n*/\nclass MoneyConverterTest {"
	},
	{
		"original_code": "// Login.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.security;\n\nimport com.opensymphony.xwork.ActionContext;\nimport com.opensymphony.xwork.ActionSupport;\n\npublic class Login extends ActionSupport implements UserAccessorAware {\n\n    private UserAccessor ua;\n\n    private String username;\n\n    private String password;\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public String execute() {\n        if (ua.authenticate(username, password)) {\n            ActionContext.getContext().getSession().put(LoginFilter.LOGIN_KEY, username);\n            return SUCCESS;\n        } else {\n            addFieldError(\"username\", \"Invalid username or password - please retry.\");\n            return ERROR;\n        }\n    }\n\n    public void setUserAccessor(UserAccessor ua) {\n        this.ua = ua;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/security/LoginTest.java",
		"test_prompt": "// LoginTest.java\npackage org.petsoar.security;\n\nimport com.opensymphony.xwork.ActionContext;\nimport com.opensymphony.xwork.ActionSupport;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#execute()} method.\n*/\nclass LoginTest {"
	},
	{
		"original_code": "// DefaultUserAccessor.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.security;\n\nimport org.petsoar.persistence.PersistenceAware;\nimport org.petsoar.persistence.PersistenceException;\nimport org.petsoar.persistence.PersistenceManager;\n\npublic class DefaultUserAccessor implements UserAccessor, PersistenceAware {\n\n    private PersistenceManager pm;\n\n    public boolean authenticate(String username, String password) {\n        User user = getUser(username);\n        if (user == null || !user.getPassword().equals(password)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public User getUser(String username) {\n        try {\n            return (User) pm.getByPrimaryKey(User.class, username);\n        } catch (PersistenceException e) {\n            return null;\n        }\n    }\n\n    public void signup(User user) {\n        pm.save(user);\n    }\n\n    public void setPersistenceManager(PersistenceManager pm) {\n        this.pm = pm;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/security/DefaultUserAccessorTest.java",
		"test_prompt": "// DefaultUserAccessorTest.java\npackage org.petsoar.security;\n\nimport org.petsoar.persistence.PersistenceAware;\nimport org.petsoar.persistence.PersistenceException;\nimport org.petsoar.persistence.PersistenceManager;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultUserAccessor}.\n* It contains ten unit test cases for the {@link DefaultUserAccessor#authenticate(String, String)} method.\n*/\nclass DefaultUserAccessorTest {"
	},
	{
		"original_code": "// Logout.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.security;\n\nimport com.opensymphony.xwork.Action;\nimport com.opensymphony.xwork.ActionContext;\n\npublic class Logout implements Action, UserAccessorAware {\n\n    private UserAccessor ua;\n\n    public String execute() {\n        ActionContext.getContext().getSession().put(LoginFilter.LOGIN_KEY, null);\n        return SUCCESS;\n    }\n\n    public void setUserAccessor(UserAccessor ua) {\n        this.ua = ua;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/security/LogoutTest.java",
		"test_prompt": "// LogoutTest.java\npackage org.petsoar.security;\n\nimport com.opensymphony.xwork.Action;\nimport com.opensymphony.xwork.ActionContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Logout}.\n* It contains ten unit test cases for the {@link Logout#execute()} method.\n*/\nclass LogoutTest {"
	},
	{
		"original_code": "// Signup.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.security;\n\nimport com.opensymphony.xwork.ActionSupport;\nimport com.opensymphony.xwork.ModelDriven;\n\npublic class Signup extends ActionSupport implements ModelDriven, UserAccessorAware {\n\n    private User user = new User();\n\n    private String verifyPassword;\n\n    private UserAccessor ua;\n\n    public User getUser() {\n        return user;\n    }\n\n    public void setUser(User user) {\n        this.user = user;\n    }\n\n    public String getVerifyPassword() {\n        return verifyPassword;\n    }\n\n    public void setVerifyPassword(String verifyPassword) {\n        this.verifyPassword = verifyPassword;\n    }\n\n    public Object getModel() {\n        return user;\n    }\n\n    public void setUserAccessor(UserAccessor ua) {\n        this.ua = ua;\n    }\n\n    public String execute() {\n        if (ua.getUser(user.getUsername()) == null) {\n            ua.signup(user);\n            return SUCCESS;\n        } else {\n            addFieldError(\"username\", \"Username is already taken, please choose another\");\n            return ERROR;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/security/SignupTest.java",
		"test_prompt": "// SignupTest.java\npackage org.petsoar.security;\n\nimport com.opensymphony.xwork.ActionSupport;\nimport com.opensymphony.xwork.ModelDriven;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Signup}.\n* It contains ten unit test cases for the {@link Signup#execute()} method.\n*/\nclass SignupTest {"
	},
	{
		"original_code": "// Pet.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.pets;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.petsoar.categories.Category;\nimport java.math.BigDecimal;\n\n/**\n * A creature.\n * @hibernate.class table=\"PETS\"\n */\npublic class Pet {\n\n    public static final String MALE = \"Male\";\n\n    public static final String FEMALE = \"Female\";\n\n    public static final String UNKNOWN = \"Unknown\";\n\n    private long id;\n\n    private Category category;\n\n    private String name;\n\n    private String image;\n\n    private String gender = UNKNOWN;\n\n    private String description;\n\n    private String personality;\n\n    private BigDecimal price;\n\n    /**\n     * @hibernate.id column=\"PETID\" generator-class=\"increment\" unsaved-value=\"0\"\n     */\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    /**\n     * The category of pet (such as \"Ginger Cat\").\n     * @hibernate.many-to-one cascade=\"none\" column=\"CATEGORY\" not-null=\"false\" update=\"true\" insert=\"true\"\n     */\n    public Category getCategory() {\n        return category;\n    }\n\n    public void setCategory(Category category) {\n        this.category = category;\n    }\n\n    /**\n     * Name of creature\n     * @hibernate.property column=\"NAME\"\n     */\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * The path to the image.\n     * @hibernate.property column=\"IMAGE\"\n     */\n    public String getImage() {\n        return image;\n    }\n\n    public void setImage(String image) {\n        this.image = image;\n    }\n\n    /**\n     * Gender of creature. One of the MALE, FEMALE or UNKNOWN constants.\n     * @hibernate.property column=\"GENDER\"\n     */\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        if (gender == null) {\n            gender = UNKNOWN;\n        }\n        if (gender.equals(MALE) || gender.equals(FEMALE) || gender.equals(UNKNOWN)) {\n            this.gender = gender;\n        } else {\n            throw new IllegalArgumentException(\"Invalid gender\");\n        }\n    }\n\n    /**\n     * Descriptiong of how the creature looks\n     * @hibernate.property column=\"DESCRIPTION\" length=\"2000\"\n     */\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    /**\n     * Any behavioral or psychological issues the creature may be dealing with.\n     * @hibernate.property column=\"PERSONALITY\" length=\"2000\"\n     */\n    public String getPersonality() {\n        return personality;\n    }\n\n    public void setPersonality(String personality) {\n        this.personality = personality;\n    }\n\n    /**\n     * The unit price.\n     * @hibernate.property column=\"PRICE\"\n     */\n    public BigDecimal getPrice() {\n        return price;\n    }\n\n    public void setPrice(BigDecimal price) {\n        this.price = price;\n    }\n\n    public boolean equals(Object obj) {\n        if (!(obj instanceof Pet)) {\n            return false;\n        }\n        Pet other = (Pet) obj;\n        return new EqualsBuilder().append(id, other.id).append(name, other.name).isEquals();\n    }\n\n    public int hashCode() {\n        return HashCodeBuilder.reflectionHashCode(this);\n    }\n\n    public String toString() {\n        return ToStringBuilder.reflectionToString(this);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/pets/PetTest0.java",
		"test_prompt": "// PetTest0.java\npackage org.petsoar.pets;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.petsoar.categories.Category;\nimport java.math.BigDecimal;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Pet}.\n* It contains ten unit test cases for the {@link Pet#equals(Object)} method.\n*/\nclass PetTest0 {"
	},
	{
		"original_code": "// Pet.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.pets;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.petsoar.categories.Category;\nimport java.math.BigDecimal;\n\n/**\n * A creature.\n * @hibernate.class table=\"PETS\"\n */\npublic class Pet {\n\n    public static final String MALE = \"Male\";\n\n    public static final String FEMALE = \"Female\";\n\n    public static final String UNKNOWN = \"Unknown\";\n\n    private long id;\n\n    private Category category;\n\n    private String name;\n\n    private String image;\n\n    private String gender = UNKNOWN;\n\n    private String description;\n\n    private String personality;\n\n    private BigDecimal price;\n\n    /**\n     * @hibernate.id column=\"PETID\" generator-class=\"increment\" unsaved-value=\"0\"\n     */\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    /**\n     * The category of pet (such as \"Ginger Cat\").\n     * @hibernate.many-to-one cascade=\"none\" column=\"CATEGORY\" not-null=\"false\" update=\"true\" insert=\"true\"\n     */\n    public Category getCategory() {\n        return category;\n    }\n\n    public void setCategory(Category category) {\n        this.category = category;\n    }\n\n    /**\n     * Name of creature\n     * @hibernate.property column=\"NAME\"\n     */\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * The path to the image.\n     * @hibernate.property column=\"IMAGE\"\n     */\n    public String getImage() {\n        return image;\n    }\n\n    public void setImage(String image) {\n        this.image = image;\n    }\n\n    /**\n     * Gender of creature. One of the MALE, FEMALE or UNKNOWN constants.\n     * @hibernate.property column=\"GENDER\"\n     */\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        if (gender == null) {\n            gender = UNKNOWN;\n        }\n        if (gender.equals(MALE) || gender.equals(FEMALE) || gender.equals(UNKNOWN)) {\n            this.gender = gender;\n        } else {\n            throw new IllegalArgumentException(\"Invalid gender\");\n        }\n    }\n\n    /**\n     * Descriptiong of how the creature looks\n     * @hibernate.property column=\"DESCRIPTION\" length=\"2000\"\n     */\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    /**\n     * Any behavioral or psychological issues the creature may be dealing with.\n     * @hibernate.property column=\"PERSONALITY\" length=\"2000\"\n     */\n    public String getPersonality() {\n        return personality;\n    }\n\n    public void setPersonality(String personality) {\n        this.personality = personality;\n    }\n\n    /**\n     * The unit price.\n     * @hibernate.property column=\"PRICE\"\n     */\n    public BigDecimal getPrice() {\n        return price;\n    }\n\n    public void setPrice(BigDecimal price) {\n        this.price = price;\n    }\n\n    public boolean equals(Object obj) {\n        if (!(obj instanceof Pet)) {\n            return false;\n        }\n        Pet other = (Pet) obj;\n        return new EqualsBuilder().append(id, other.id).append(name, other.name).isEquals();\n    }\n\n    public int hashCode() {\n        return HashCodeBuilder.reflectionHashCode(this);\n    }\n\n    public String toString() {\n        return ToStringBuilder.reflectionToString(this);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/pets/PetTest1.java",
		"test_prompt": "// PetTest1.java\npackage org.petsoar.pets;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.petsoar.categories.Category;\nimport java.math.BigDecimal;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Pet}.\n* It contains ten unit test cases for the {@link Pet#hashCode()} method.\n*/\nclass PetTest1 {"
	},
	{
		"original_code": "// LuceneSearcher.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.search.lucene;\n\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.queryParser.QueryParser;\nimport org.apache.lucene.search.Hits;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.Query;\nimport org.petsoar.search.Searcher;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LuceneSearcher implements Searcher, LuceneDocumentFactoryAware, LuceneIndexStoreAware {\n\n    private LuceneDocumentFactory luceneDocumentFactory;\n\n    private LuceneIndexStore indexStore;\n\n    public void setIndexStore(LuceneIndexStore indexStore) {\n        this.indexStore = indexStore;\n    }\n\n    public LuceneDocumentFactory getLuceneDocumentFactory() {\n        return luceneDocumentFactory;\n    }\n\n    public void setLuceneDocumentFactory(LuceneDocumentFactory luceneDocumentFactory) {\n        this.luceneDocumentFactory = luceneDocumentFactory;\n    }\n\n    public List search(String query) {\n        QueryParser qp = null;\n        Query myquery = null;\n        try {\n            qp = new QueryParser(\"description\", luceneDocumentFactory.createAnalyzer());\n            myquery = qp.parse(query);\n        } catch (Throwable e) {\n            throw new LuceneException(\"Couldn't parse the query successfully:\" + e.getMessage());\n        }\n        IndexSearcher searcher = null;\n        try {\n            searcher = indexStore.createSearcher();\n            Hits hits = searcher.search(myquery);\n            List result = new ArrayList(hits.length());\n            for (int i = 0; i < hits.length(); i++) {\n                Document doc = hits.doc(i);\n                result.add(Long.valueOf(doc.get(\"handle\")));\n            }\n            return result;\n        } catch (Throwable e) {\n            throw new LuceneException(\"Couldn't complete search successfully\", e);\n        } finally {\n            try {\n                if (searcher != null)\n                    searcher.close();\n            } catch (IOException e) {\n                throw new LuceneException(\"Couldn't complete search successfully\", e);\n            }\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/search/lucene/LuceneSearcherTest.java",
		"test_prompt": "// LuceneSearcherTest.java\npackage org.petsoar.search.lucene;\n\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.queryParser.QueryParser;\nimport org.apache.lucene.search.Hits;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.Query;\nimport org.petsoar.search.Searcher;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LuceneSearcher}.\n* It contains ten unit test cases for the {@link LuceneSearcher#search(String)} method.\n*/\nclass LuceneSearcherTest {"
	},
	{
		"original_code": "// LuceneIndexStore.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.search.lucene;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\nimport java.io.IOException;\nimport java.io.File;\n\npublic class LuceneIndexStore {\n\n    private static final String DEFAULT_INDEX_DIR = \"index\";\n\n    private final String indexDir;\n\n    public LuceneIndexStore() {\n        this(DEFAULT_INDEX_DIR);\n    }\n\n    public LuceneIndexStore(String indexDir) {\n        this.indexDir = indexDir;\n        try {\n            File indexFolder = new File(indexDir);\n            boolean createIndexFolder = !indexFolder.isDirectory();\n            new IndexWriter(getDirectory(createIndexFolder), null, createIndexFolder).close();\n        } catch (IOException e) {\n            throw new LuceneException(\"Cannot create index directory\", e);\n        }\n    }\n\n    public IndexReader createReader() throws IOException {\n        return IndexReader.open(getDirectory(false));\n    }\n\n    public IndexWriter createWriter(Analyzer analyzer) throws IOException {\n        return new IndexWriter(getDirectory(false), analyzer, false);\n    }\n\n    public IndexSearcher createSearcher() throws IOException {\n        return new IndexSearcher(getDirectory(false));\n    }\n\n    public int getNumDocs() throws IOException {\n        IndexReader reader = createReader();\n        int result = reader.numDocs();\n        reader.close();\n        return result;\n    }\n\n    protected Directory getDirectory(boolean create) throws IOException {\n        return FSDirectory.getDirectory(indexDir, create);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/search/lucene/LuceneIndexStoreTest0.java",
		"test_prompt": "// LuceneIndexStoreTest0.java\npackage org.petsoar.search.lucene;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\nimport java.io.IOException;\nimport java.io.File;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LuceneIndexStore}.\n* It contains ten unit test cases for the {@link LuceneIndexStore#createReader()} method.\n*/\nclass LuceneIndexStoreTest0 {"
	},
	{
		"original_code": "// LuceneIndexStore.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.search.lucene;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\nimport java.io.IOException;\nimport java.io.File;\n\npublic class LuceneIndexStore {\n\n    private static final String DEFAULT_INDEX_DIR = \"index\";\n\n    private final String indexDir;\n\n    public LuceneIndexStore() {\n        this(DEFAULT_INDEX_DIR);\n    }\n\n    public LuceneIndexStore(String indexDir) {\n        this.indexDir = indexDir;\n        try {\n            File indexFolder = new File(indexDir);\n            boolean createIndexFolder = !indexFolder.isDirectory();\n            new IndexWriter(getDirectory(createIndexFolder), null, createIndexFolder).close();\n        } catch (IOException e) {\n            throw new LuceneException(\"Cannot create index directory\", e);\n        }\n    }\n\n    public IndexReader createReader() throws IOException {\n        return IndexReader.open(getDirectory(false));\n    }\n\n    public IndexWriter createWriter(Analyzer analyzer) throws IOException {\n        return new IndexWriter(getDirectory(false), analyzer, false);\n    }\n\n    public IndexSearcher createSearcher() throws IOException {\n        return new IndexSearcher(getDirectory(false));\n    }\n\n    public int getNumDocs() throws IOException {\n        IndexReader reader = createReader();\n        int result = reader.numDocs();\n        reader.close();\n        return result;\n    }\n\n    protected Directory getDirectory(boolean create) throws IOException {\n        return FSDirectory.getDirectory(indexDir, create);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/search/lucene/LuceneIndexStoreTest1.java",
		"test_prompt": "// LuceneIndexStoreTest1.java\npackage org.petsoar.search.lucene;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\nimport java.io.IOException;\nimport java.io.File;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LuceneIndexStore}.\n* It contains ten unit test cases for the {@link LuceneIndexStore#createWriter(Analyzer)} method.\n*/\nclass LuceneIndexStoreTest1 {"
	},
	{
		"original_code": "// LuceneIndexStore.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.search.lucene;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\nimport java.io.IOException;\nimport java.io.File;\n\npublic class LuceneIndexStore {\n\n    private static final String DEFAULT_INDEX_DIR = \"index\";\n\n    private final String indexDir;\n\n    public LuceneIndexStore() {\n        this(DEFAULT_INDEX_DIR);\n    }\n\n    public LuceneIndexStore(String indexDir) {\n        this.indexDir = indexDir;\n        try {\n            File indexFolder = new File(indexDir);\n            boolean createIndexFolder = !indexFolder.isDirectory();\n            new IndexWriter(getDirectory(createIndexFolder), null, createIndexFolder).close();\n        } catch (IOException e) {\n            throw new LuceneException(\"Cannot create index directory\", e);\n        }\n    }\n\n    public IndexReader createReader() throws IOException {\n        return IndexReader.open(getDirectory(false));\n    }\n\n    public IndexWriter createWriter(Analyzer analyzer) throws IOException {\n        return new IndexWriter(getDirectory(false), analyzer, false);\n    }\n\n    public IndexSearcher createSearcher() throws IOException {\n        return new IndexSearcher(getDirectory(false));\n    }\n\n    public int getNumDocs() throws IOException {\n        IndexReader reader = createReader();\n        int result = reader.numDocs();\n        reader.close();\n        return result;\n    }\n\n    protected Directory getDirectory(boolean create) throws IOException {\n        return FSDirectory.getDirectory(indexDir, create);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/search/lucene/LuceneIndexStoreTest2.java",
		"test_prompt": "// LuceneIndexStoreTest2.java\npackage org.petsoar.search.lucene;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\nimport java.io.IOException;\nimport java.io.File;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LuceneIndexStore}.\n* It contains ten unit test cases for the {@link LuceneIndexStore#createSearcher()} method.\n*/\nclass LuceneIndexStoreTest2 {"
	},
	{
		"original_code": "// DefaultLuceneDocumentFactory.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.search.lucene;\n\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.digester.Digester;\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.apache.lucene.analysis.*;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.util.*;\n\n/**\n * The default implementation of LuceneDocumentFactory that looks after a file named <class-name>.lucene.xml and reads\n * the Lucene Document creation instuctions from it.\n */\npublic class DefaultLuceneDocumentFactory implements LuceneDocumentFactory {\n\n    private Map classConfigurations = new HashMap();\n\n    public Document createDocument(Object obj) {\n        ClassConfiguration classConfig = getClassConfiguration(obj);\n        return createDocumentForObjectFromClassConfiguration(obj, classConfig);\n    }\n\n    public String getHandleAttributeName(Object obj) {\n        ClassConfiguration class_config = getClassConfiguration(obj);\n        return class_config.getHandleField().getAttributeName();\n    }\n\n    public String getHandleFieldName(Object obj) {\n        ClassConfiguration class_config = getClassConfiguration(obj);\n        return class_config.getHandleField().getFieldName();\n    }\n\n    public Analyzer createAnalyzer() {\n        return new DefaultAnalyzer();\n    }\n\n    private ClassConfiguration getClassConfiguration(Object obj) {\n        ClassConfiguration class_config;\n        synchronized (classConfigurations) {\n            class_config = (ClassConfiguration) classConfigurations.get(obj.getClass().getName());\n            if (class_config == null) {\n                class_config = loadClassConfiguration(obj.getClass());\n            }\n        }\n        return class_config;\n    }\n\n    private Document createDocumentForObjectFromClassConfiguration(Object obj, ClassConfiguration class_config) {\n        Iterator iter = class_config.getFieldConfigurations().iterator();\n        Document doc = new Document();\n        while (iter.hasNext()) {\n            FieldConfiguration fieldConfiguration = (FieldConfiguration) iter.next();\n            String strContent = getStringContentOfAttribute(obj, fieldConfiguration.getAttributeName());\n            Field field = null;\n            if (fieldConfiguration.getType().equals(FieldConfiguration.TYPE_TEXT)) {\n                field = Field.Text(fieldConfiguration.getFieldName(), strContent);\n            } else if (fieldConfiguration.getType().equals(FieldConfiguration.TYPE_KEYWORD)) {\n                field = Field.Keyword(fieldConfiguration.getFieldName(), strContent);\n            } else if (fieldConfiguration.getType().equals(FieldConfiguration.TYPE_UNINDEXED)) {\n                field = Field.UnIndexed(fieldConfiguration.getFieldName(), strContent);\n            } else if (fieldConfiguration.getType().equals(FieldConfiguration.TYPE_UNSTORED)) {\n                field = Field.UnStored(fieldConfiguration.getFieldName(), strContent);\n            } else if (fieldConfiguration.getType().equals(FieldConfiguration.TYPE_HANDLE)) {\n                field = Field.Keyword(fieldConfiguration.getFieldName(), strContent);\n            } else {\n                throw new LuceneException(\"Unknown type for a field, fieldName=\" + fieldConfiguration.getFieldName());\n            }\n            doc.add(field);\n        }\n        return doc;\n    }\n\n    private static String getStringContentOfAttribute(Object obj, String attributeName) {\n        try {\n            String str = BeanUtils.getProperty(obj, attributeName);\n            return (str == null) ? \"\" : str;\n        } catch (Exception e) {\n            throw new LuceneException(\"Couldn't get string content of attribute, attributeName=\" + attributeName);\n        }\n    }\n\n    private void addClassConfiguration(Class clazz, ClassConfiguration classConfiguration) {\n        classConfigurations.put(clazz.getName(), classConfiguration);\n    }\n\n    private ClassConfiguration loadClassConfiguration(Class clazz) {\n        InputStream configXml = loadConfigFile(clazz);\n        ClassConfiguration newClassConfig = new ClassConfiguration();\n        Digester digester = new Digester();\n        digester.push(newClassConfig);\n        digester.addObjectCreate(\"configuration/field\", FieldConfiguration.class.getName());\n        digester.addSetProperties(\"configuration/field\");\n        digester.addSetNext(\"configuration/field\", \"addFieldConfiguration\", FieldConfiguration.class.getName());\n        try {\n            digester.parse(new InputStreamReader(configXml));\n            addClassConfiguration(clazz, newClassConfig);\n            return newClassConfig;\n        } catch (Exception e) {\n            throw new LuceneException(\"Couldn't load lucene config file successfully, file=\" + clazz, e);\n        }\n    }\n\n    private InputStream loadConfigFile(Class clazz) {\n        String configFileName = clazz.getName().replace('.', '/') + \".lucene.xml\";\n        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(configFileName);\n        if (is != null) {\n            return is;\n        } else {\n            // Hibernate generates a CGLIB-based subclass when the POJO is a proxy, so check the superclass too\n            configFileName = clazz.getSuperclass().getName().replace('.', '/') + \".lucene.xml\";\n            is = Thread.currentThread().getContextClassLoader().getResourceAsStream(configFileName);\n            return is;\n        }\n    }\n\n    //~ Classes ----------------------------------------------------------------\n    public static final class ClassConfiguration {\n\n        private List fieldConfigurations = new ArrayList();\n\n        public void addFieldConfiguration(FieldConfiguration fieldConfiguration) {\n            fieldConfigurations.add(fieldConfiguration);\n        }\n\n        public List getFieldConfigurations() {\n            return fieldConfigurations;\n        }\n\n        private FieldConfiguration getHandleField() {\n            for (int i = 0; i < fieldConfigurations.size(); i++) {\n                FieldConfiguration fieldConfiguration = (FieldConfiguration) fieldConfigurations.get(i);\n                if (fieldConfiguration.getType().equals(FieldConfiguration.TYPE_HANDLE)) {\n                    return fieldConfiguration;\n                }\n            }\n            throw new LuceneException(\"No handle field found.\");\n        }\n\n        public boolean equals(Object obj) {\n            return EqualsBuilder.reflectionEquals(this, obj);\n        }\n\n        public int hashCode() {\n            return HashCodeBuilder.reflectionHashCode(this);\n        }\n\n        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }\n    }\n\n    public static final class FieldConfiguration {\n\n        public static final String TYPE_TEXT = \"Text\";\n\n        public static final String TYPE_KEYWORD = \"Keyword\";\n\n        public static final String TYPE_UNINDEXED = \"UnIndexed\";\n\n        public static final String TYPE_UNSTORED = \"UnStored\";\n\n        public static final String TYPE_HANDLE = \"Handle\";\n\n        private String type;\n\n        private String fieldName;\n\n        private String attributeName;\n\n        public String getType() {\n            return type;\n        }\n\n        public void setType(String type) {\n            this.type = type;\n        }\n\n        public String getFieldName() {\n            return fieldName;\n        }\n\n        public void setFieldName(String fieldName) {\n            this.fieldName = fieldName;\n        }\n\n        public String getAttributeName() {\n            return attributeName;\n        }\n\n        public void setAttributeName(String attributeName) {\n            this.attributeName = attributeName;\n        }\n\n        public boolean equals(Object obj) {\n            return EqualsBuilder.reflectionEquals(this, obj);\n        }\n\n        public int hashCode() {\n            return HashCodeBuilder.reflectionHashCode(this);\n        }\n\n        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }\n    }\n\n    public static class DefaultAnalyzer extends Analyzer {\n\n        public TokenStream tokenStream(String fieldName, Reader reader) {\n            LetterTokenizer tokenizer = new LetterTokenizer(reader);\n            TokenStream result = null;\n            result = new LowerCaseFilter(tokenizer);\n            result = new StopFilter(result, StopAnalyzer.ENGLISH_STOP_WORDS);\n            result = new PorterStemFilter(result);\n            return result;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/search/lucene/DefaultLuceneDocumentFactoryTest0.java",
		"test_prompt": "// DefaultLuceneDocumentFactoryTest0.java\npackage org.petsoar.search.lucene;\n\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.digester.Digester;\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.apache.lucene.analysis.*;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultLuceneDocumentFactory}.\n* It contains ten unit test cases for the {@link DefaultLuceneDocumentFactory#createDocument(Object)} method.\n*/\nclass DefaultLuceneDocumentFactoryTest0 {"
	},
	{
		"original_code": "// DefaultLuceneDocumentFactory.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.search.lucene;\n\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.digester.Digester;\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.apache.lucene.analysis.*;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.util.*;\n\n/**\n * The default implementation of LuceneDocumentFactory that looks after a file named <class-name>.lucene.xml and reads\n * the Lucene Document creation instuctions from it.\n */\npublic class DefaultLuceneDocumentFactory implements LuceneDocumentFactory {\n\n    private Map classConfigurations = new HashMap();\n\n    public Document createDocument(Object obj) {\n        ClassConfiguration classConfig = getClassConfiguration(obj);\n        return createDocumentForObjectFromClassConfiguration(obj, classConfig);\n    }\n\n    public String getHandleAttributeName(Object obj) {\n        ClassConfiguration class_config = getClassConfiguration(obj);\n        return class_config.getHandleField().getAttributeName();\n    }\n\n    public String getHandleFieldName(Object obj) {\n        ClassConfiguration class_config = getClassConfiguration(obj);\n        return class_config.getHandleField().getFieldName();\n    }\n\n    public Analyzer createAnalyzer() {\n        return new DefaultAnalyzer();\n    }\n\n    private ClassConfiguration getClassConfiguration(Object obj) {\n        ClassConfiguration class_config;\n        synchronized (classConfigurations) {\n            class_config = (ClassConfiguration) classConfigurations.get(obj.getClass().getName());\n            if (class_config == null) {\n                class_config = loadClassConfiguration(obj.getClass());\n            }\n        }\n        return class_config;\n    }\n\n    private Document createDocumentForObjectFromClassConfiguration(Object obj, ClassConfiguration class_config) {\n        Iterator iter = class_config.getFieldConfigurations().iterator();\n        Document doc = new Document();\n        while (iter.hasNext()) {\n            FieldConfiguration fieldConfiguration = (FieldConfiguration) iter.next();\n            String strContent = getStringContentOfAttribute(obj, fieldConfiguration.getAttributeName());\n            Field field = null;\n            if (fieldConfiguration.getType().equals(FieldConfiguration.TYPE_TEXT)) {\n                field = Field.Text(fieldConfiguration.getFieldName(), strContent);\n            } else if (fieldConfiguration.getType().equals(FieldConfiguration.TYPE_KEYWORD)) {\n                field = Field.Keyword(fieldConfiguration.getFieldName(), strContent);\n            } else if (fieldConfiguration.getType().equals(FieldConfiguration.TYPE_UNINDEXED)) {\n                field = Field.UnIndexed(fieldConfiguration.getFieldName(), strContent);\n            } else if (fieldConfiguration.getType().equals(FieldConfiguration.TYPE_UNSTORED)) {\n                field = Field.UnStored(fieldConfiguration.getFieldName(), strContent);\n            } else if (fieldConfiguration.getType().equals(FieldConfiguration.TYPE_HANDLE)) {\n                field = Field.Keyword(fieldConfiguration.getFieldName(), strContent);\n            } else {\n                throw new LuceneException(\"Unknown type for a field, fieldName=\" + fieldConfiguration.getFieldName());\n            }\n            doc.add(field);\n        }\n        return doc;\n    }\n\n    private static String getStringContentOfAttribute(Object obj, String attributeName) {\n        try {\n            String str = BeanUtils.getProperty(obj, attributeName);\n            return (str == null) ? \"\" : str;\n        } catch (Exception e) {\n            throw new LuceneException(\"Couldn't get string content of attribute, attributeName=\" + attributeName);\n        }\n    }\n\n    private void addClassConfiguration(Class clazz, ClassConfiguration classConfiguration) {\n        classConfigurations.put(clazz.getName(), classConfiguration);\n    }\n\n    private ClassConfiguration loadClassConfiguration(Class clazz) {\n        InputStream configXml = loadConfigFile(clazz);\n        ClassConfiguration newClassConfig = new ClassConfiguration();\n        Digester digester = new Digester();\n        digester.push(newClassConfig);\n        digester.addObjectCreate(\"configuration/field\", FieldConfiguration.class.getName());\n        digester.addSetProperties(\"configuration/field\");\n        digester.addSetNext(\"configuration/field\", \"addFieldConfiguration\", FieldConfiguration.class.getName());\n        try {\n            digester.parse(new InputStreamReader(configXml));\n            addClassConfiguration(clazz, newClassConfig);\n            return newClassConfig;\n        } catch (Exception e) {\n            throw new LuceneException(\"Couldn't load lucene config file successfully, file=\" + clazz, e);\n        }\n    }\n\n    private InputStream loadConfigFile(Class clazz) {\n        String configFileName = clazz.getName().replace('.', '/') + \".lucene.xml\";\n        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(configFileName);\n        if (is != null) {\n            return is;\n        } else {\n            // Hibernate generates a CGLIB-based subclass when the POJO is a proxy, so check the superclass too\n            configFileName = clazz.getSuperclass().getName().replace('.', '/') + \".lucene.xml\";\n            is = Thread.currentThread().getContextClassLoader().getResourceAsStream(configFileName);\n            return is;\n        }\n    }\n\n    //~ Classes ----------------------------------------------------------------\n    public static final class ClassConfiguration {\n\n        private List fieldConfigurations = new ArrayList();\n\n        public void addFieldConfiguration(FieldConfiguration fieldConfiguration) {\n            fieldConfigurations.add(fieldConfiguration);\n        }\n\n        public List getFieldConfigurations() {\n            return fieldConfigurations;\n        }\n\n        private FieldConfiguration getHandleField() {\n            for (int i = 0; i < fieldConfigurations.size(); i++) {\n                FieldConfiguration fieldConfiguration = (FieldConfiguration) fieldConfigurations.get(i);\n                if (fieldConfiguration.getType().equals(FieldConfiguration.TYPE_HANDLE)) {\n                    return fieldConfiguration;\n                }\n            }\n            throw new LuceneException(\"No handle field found.\");\n        }\n\n        public boolean equals(Object obj) {\n            return EqualsBuilder.reflectionEquals(this, obj);\n        }\n\n        public int hashCode() {\n            return HashCodeBuilder.reflectionHashCode(this);\n        }\n\n        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }\n    }\n\n    public static final class FieldConfiguration {\n\n        public static final String TYPE_TEXT = \"Text\";\n\n        public static final String TYPE_KEYWORD = \"Keyword\";\n\n        public static final String TYPE_UNINDEXED = \"UnIndexed\";\n\n        public static final String TYPE_UNSTORED = \"UnStored\";\n\n        public static final String TYPE_HANDLE = \"Handle\";\n\n        private String type;\n\n        private String fieldName;\n\n        private String attributeName;\n\n        public String getType() {\n            return type;\n        }\n\n        public void setType(String type) {\n            this.type = type;\n        }\n\n        public String getFieldName() {\n            return fieldName;\n        }\n\n        public void setFieldName(String fieldName) {\n            this.fieldName = fieldName;\n        }\n\n        public String getAttributeName() {\n            return attributeName;\n        }\n\n        public void setAttributeName(String attributeName) {\n            this.attributeName = attributeName;\n        }\n\n        public boolean equals(Object obj) {\n            return EqualsBuilder.reflectionEquals(this, obj);\n        }\n\n        public int hashCode() {\n            return HashCodeBuilder.reflectionHashCode(this);\n        }\n\n        public String toString() {\n            return ToStringBuilder.reflectionToString(this);\n        }\n    }\n\n    public static class DefaultAnalyzer extends Analyzer {\n\n        public TokenStream tokenStream(String fieldName, Reader reader) {\n            LetterTokenizer tokenizer = new LetterTokenizer(reader);\n            TokenStream result = null;\n            result = new LowerCaseFilter(tokenizer);\n            result = new StopFilter(result, StopAnalyzer.ENGLISH_STOP_WORDS);\n            result = new PorterStemFilter(result);\n            return result;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/search/lucene/DefaultLuceneDocumentFactoryTest1.java",
		"test_prompt": "// DefaultLuceneDocumentFactoryTest1.java\npackage org.petsoar.search.lucene;\n\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.digester.Digester;\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.apache.lucene.analysis.*;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultLuceneDocumentFactory}.\n* It contains ten unit test cases for the {@link DefaultLuceneDocumentFactory#createAnalyzer()} method.\n*/\nclass DefaultLuceneDocumentFactoryTest1 {"
	},
	{
		"original_code": "// LazyLoaderList.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.persistence.util;\n\nimport org.petsoar.persistence.PersistenceManager;\nimport java.util.ArrayList;\nimport java.util.BitSet;\nimport java.util.List;\n\npublic class LazyLoaderList extends ArrayList {\n\n    private List decoratedList;\n\n    private BitSet loadedListBitSet;\n\n    private PersistenceManager persistenceManager;\n\n    private Class type;\n\n    public LazyLoaderList(List decoratedList, PersistenceManager persistenceManager, Class type) {\n        this.decoratedList = decoratedList;\n        loadedListBitSet = new BitSet(decoratedList.size());\n        this.persistenceManager = persistenceManager;\n        this.type = type;\n    }\n\n    public int size() {\n        return decoratedList.size();\n    }\n\n    public boolean isEmpty() {\n        return decoratedList.isEmpty();\n    }\n\n    public Object get(int index) {\n        if (loadedListBitSet.get(index) == false) {\n            Long id = (Long) decoratedList.get(index);\n            Object lazyLoadedObj = persistenceManager.getById(type, id.longValue());\n            loadedListBitSet.set(index);\n            decoratedList.set(index, lazyLoadedObj);\n        }\n        return decoratedList.get(index);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/persistence/util/LazyLoaderListTest0.java",
		"test_prompt": "// LazyLoaderListTest0.java\npackage org.petsoar.persistence.util;\n\nimport org.petsoar.persistence.PersistenceManager;\nimport java.util.ArrayList;\nimport java.util.BitSet;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LazyLoaderList}.\n* It contains ten unit test cases for the {@link LazyLoaderList#size()} method.\n*/\nclass LazyLoaderListTest0 {"
	},
	{
		"original_code": "// LazyLoaderList.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.persistence.util;\n\nimport org.petsoar.persistence.PersistenceManager;\nimport java.util.ArrayList;\nimport java.util.BitSet;\nimport java.util.List;\n\npublic class LazyLoaderList extends ArrayList {\n\n    private List decoratedList;\n\n    private BitSet loadedListBitSet;\n\n    private PersistenceManager persistenceManager;\n\n    private Class type;\n\n    public LazyLoaderList(List decoratedList, PersistenceManager persistenceManager, Class type) {\n        this.decoratedList = decoratedList;\n        loadedListBitSet = new BitSet(decoratedList.size());\n        this.persistenceManager = persistenceManager;\n        this.type = type;\n    }\n\n    public int size() {\n        return decoratedList.size();\n    }\n\n    public boolean isEmpty() {\n        return decoratedList.isEmpty();\n    }\n\n    public Object get(int index) {\n        if (loadedListBitSet.get(index) == false) {\n            Long id = (Long) decoratedList.get(index);\n            Object lazyLoadedObj = persistenceManager.getById(type, id.longValue());\n            loadedListBitSet.set(index);\n            decoratedList.set(index, lazyLoadedObj);\n        }\n        return decoratedList.get(index);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/persistence/util/LazyLoaderListTest1.java",
		"test_prompt": "// LazyLoaderListTest1.java\npackage org.petsoar.persistence.util;\n\nimport org.petsoar.persistence.PersistenceManager;\nimport java.util.ArrayList;\nimport java.util.BitSet;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LazyLoaderList}.\n* It contains ten unit test cases for the {@link LazyLoaderList#isEmpty()} method.\n*/\nclass LazyLoaderListTest1 {"
	},
	{
		"original_code": "// DefaultHibernateSessionFactory.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.persistence.hibernate;\n\nimport com.opensymphony.xwork.interceptor.component.Initializable;\nimport net.sf.hibernate.HibernateException;\nimport net.sf.hibernate.Session;\nimport net.sf.hibernate.SessionFactory;\nimport net.sf.hibernate.cfg.Configuration;\nimport net.sf.hibernate.tool.hbm2ddl.SchemaUpdate;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.petsoar.persistence.PersistenceException;\nimport java.sql.SQLException;\n\n/**\n * The default implementation of HibernateSessionFactory. It uses Hibernate's built-in connection pooling mechanism.\n */\npublic class DefaultHibernateSessionFactory implements HibernateSessionFactory, Initializable {\n\n    private static SessionFactory sessionFactory;\n\n    private Log log = LogFactory.getLog(DefaultHibernateSessionFactory.class);\n\n    public void init() {\n        //first request, create a sessionFactory and use it afterwards\n        //for creating all sessions\n        if (sessionFactory == null) {\n            try {\n                sessionFactory = buildSessionFactory();\n            } catch (HibernateException e) {\n                log.fatal(\"Couldn't init HibernatePersistenceManager\", e);\n                throw new PersistenceException(\"Couldn't init DefaultHibernateSessionFactory\", e);\n            }\n        }\n    }\n\n    public void destroy() {\n        try {\n            sessionFactory.close();\n        } catch (HibernateException e) {\n            throw new RuntimeException(\"Cannot close hibernate session\", e);\n        }\n        sessionFactory = null;\n    }\n\n    public Session createSession() throws HibernateException {\n        return sessionFactory.openSession();\n    }\n\n    /**\n     * This implementation commits the connection too. Another implementation using a JTA connection should not commit\n     * the connection itself.\n     */\n    public void endSession(Session session) throws SQLException, HibernateException {\n        if ((session != null) && session.isOpen() && session.isConnected()) {\n            session.flush();\n            session.connection().commit();\n        }\n    }\n\n    public void closeSession(Session session) throws SQLException, HibernateException {\n        if ((session != null) && session.isOpen() && session.isConnected()) {\n            session.close();\n        }\n    }\n\n    private SessionFactory buildSessionFactory() throws HibernateException {\n        Configuration config = new Configuration();\n        config.configure();\n        if (System.getProperty(\"hibernate.connect.url.override\") != null) {\n            config.setProperty(\"hibernate.connection.url\", System.getProperty(\"hibernate.connect.url.override\"));\n        }\n        // update database schema if required\n        try {\n            new SchemaUpdate(config).execute(false);\n        } catch (HibernateException e) {\n            log.fatal(\"Cannot update schema\", e);\n            throw new PersistenceException(\"Cannot update schema\", e);\n        }\n        SessionFactory result = config.buildSessionFactory();\n        return result;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/persistence/hibernate/DefaultHibernateSessionFactoryTest.java",
		"test_prompt": "// DefaultHibernateSessionFactoryTest.java\npackage org.petsoar.persistence.hibernate;\n\nimport com.opensymphony.xwork.interceptor.component.Initializable;\nimport net.sf.hibernate.HibernateException;\nimport net.sf.hibernate.Session;\nimport net.sf.hibernate.SessionFactory;\nimport net.sf.hibernate.cfg.Configuration;\nimport net.sf.hibernate.tool.hbm2ddl.SchemaUpdate;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.petsoar.persistence.PersistenceException;\nimport java.sql.SQLException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultHibernateSessionFactory}.\n* It contains ten unit test cases for the {@link DefaultHibernateSessionFactory#createSession()} method.\n*/\nclass DefaultHibernateSessionFactoryTest {"
	},
	{
		"original_code": "// HibernatePersistenceManager.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.persistence.hibernate;\n\nimport com.opensymphony.xwork.interceptor.component.Disposable;\nimport com.opensymphony.xwork.interceptor.component.Initializable;\nimport net.sf.hibernate.*;\nimport net.sf.hibernate.type.Type;\nimport org.petsoar.persistence.PersistenceException;\nimport org.petsoar.persistence.PersistenceManager;\nimport java.io.Serializable;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class HibernatePersistenceManager implements PersistenceManager, HibernateSessionFactoryAware, Initializable, Disposable {\n\n    private static Map classToHibernateTypeMap = new HashMap();\n\n    static {\n        classToHibernateTypeMap.put(Boolean.class, Hibernate.BIG_DECIMAL);\n        classToHibernateTypeMap.put(Boolean.class, Hibernate.BOOLEAN);\n        classToHibernateTypeMap.put(Byte.class, Hibernate.BYTE);\n        classToHibernateTypeMap.put(Character.class, Hibernate.CHARACTER);\n        classToHibernateTypeMap.put(Date.class, Hibernate.DATE);\n        classToHibernateTypeMap.put(Double.class, Hibernate.DOUBLE);\n        classToHibernateTypeMap.put(Float.class, Hibernate.FLOAT);\n        classToHibernateTypeMap.put(Integer.class, Hibernate.INTEGER);\n        classToHibernateTypeMap.put(Long.class, Hibernate.LONG);\n        classToHibernateTypeMap.put(Short.class, Hibernate.SHORT);\n        classToHibernateTypeMap.put(String.class, Hibernate.STRING);\n        classToHibernateTypeMap.put(Timestamp.class, Hibernate.TIMESTAMP);\n    }\n\n    private HibernateSessionFactory hibernateSessionFactory;\n\n    private Session session;\n\n    public Session getSession() {\n        return session;\n    }\n\n    public HibernateSessionFactory getHibernateSessionFactory() {\n        return hibernateSessionFactory;\n    }\n\n    public void setHibernateSessionFactory(HibernateSessionFactory hsf) {\n        this.hibernateSessionFactory = hsf;\n    }\n\n    public void init() {\n        try {\n            session = hibernateSessionFactory.createSession();\n        } catch (HibernateException e) {\n            throw new PersistenceException(\"Couldn't init HibernatePersistenceManager\", e);\n        }\n    }\n\n    public void dispose() {\n        try {\n            endSession();\n        } catch (Exception e) {\n            throw new PersistenceException(\"Couldn't dispose HibernatePersistenceManager\", e);\n        } finally {\n            try {\n                hibernateSessionFactory.closeSession(session);\n            } catch (Exception e) {\n                throw new PersistenceException(\"Couldn't close the session\", e);\n            }\n        }\n    }\n\n    public void endSession() throws SQLException, HibernateException {\n        hibernateSessionFactory.endSession(session);\n    }\n\n    public void save(Object objectToSave) {\n        try {\n            session.saveOrUpdate(objectToSave);\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public void remove(Object objectToRemove) {\n        try {\n            session.delete(objectToRemove);\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public List findAll(Class type) {\n        return findAllSorted(type, null);\n    }\n\n    public List findAllSorted(Class type, String sortField) {\n        try {\n            String query = \"FROM result IN CLASS \" + type.getName();\n            if (sortField != null)\n                query += \" ORDER BY LOWER(result.\" + sortField + \")\";\n            return session.find(query);\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public Object getByPrimaryKey(Class type, Object pk) {\n        try {\n            return session.load(type, (Serializable) pk);\n        } catch (ObjectNotFoundException e) {\n            return null;\n        } catch (HibernateException e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public Object getById(Class aClass, long id) {\n        try {\n            return session.load(aClass, new Long(id));\n        } catch (ObjectDeletedException e) {\n            return null;\n        } catch (ObjectNotFoundException e) {\n            return null;\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public List find(String query, Object[] parameters, Class[] parameterTypes) {\n        Session session = null;\n        List results = null;\n        try {\n            session = this.session;\n            if ((parameterTypes != null) || (parameters != null)) {\n                Type[] hibernate_parameter_types = getHibernatedParameterTypes(parameterTypes);\n                results = session.find(query, parameters, hibernate_parameter_types);\n            } else {\n                results = session.find(query);\n            }\n            return results;\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    private static Type[] getHibernatedParameterTypes(Class[] types) {\n        if (types == null) {\n            return null;\n        }\n        Type[] hib_types = new Type[types.length];\n        for (int i = 0; i < types.length; i++) {\n            Class type = types[i];\n            hib_types[i] = (Type) classToHibernateTypeMap.get(type);\n        }\n        return hib_types;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/persistence/hibernate/HibernatePersistenceManagerTest0.java",
		"test_prompt": "// HibernatePersistenceManagerTest0.java\npackage org.petsoar.persistence.hibernate;\n\nimport com.opensymphony.xwork.interceptor.component.Disposable;\nimport com.opensymphony.xwork.interceptor.component.Initializable;\nimport net.sf.hibernate.*;\nimport net.sf.hibernate.type.Type;\nimport org.petsoar.persistence.PersistenceException;\nimport org.petsoar.persistence.PersistenceManager;\nimport java.io.Serializable;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HibernatePersistenceManager}.\n* It contains ten unit test cases for the {@link HibernatePersistenceManager#findAll(Class)} method.\n*/\nclass HibernatePersistenceManagerTest0 {"
	},
	{
		"original_code": "// HibernatePersistenceManager.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.persistence.hibernate;\n\nimport com.opensymphony.xwork.interceptor.component.Disposable;\nimport com.opensymphony.xwork.interceptor.component.Initializable;\nimport net.sf.hibernate.*;\nimport net.sf.hibernate.type.Type;\nimport org.petsoar.persistence.PersistenceException;\nimport org.petsoar.persistence.PersistenceManager;\nimport java.io.Serializable;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class HibernatePersistenceManager implements PersistenceManager, HibernateSessionFactoryAware, Initializable, Disposable {\n\n    private static Map classToHibernateTypeMap = new HashMap();\n\n    static {\n        classToHibernateTypeMap.put(Boolean.class, Hibernate.BIG_DECIMAL);\n        classToHibernateTypeMap.put(Boolean.class, Hibernate.BOOLEAN);\n        classToHibernateTypeMap.put(Byte.class, Hibernate.BYTE);\n        classToHibernateTypeMap.put(Character.class, Hibernate.CHARACTER);\n        classToHibernateTypeMap.put(Date.class, Hibernate.DATE);\n        classToHibernateTypeMap.put(Double.class, Hibernate.DOUBLE);\n        classToHibernateTypeMap.put(Float.class, Hibernate.FLOAT);\n        classToHibernateTypeMap.put(Integer.class, Hibernate.INTEGER);\n        classToHibernateTypeMap.put(Long.class, Hibernate.LONG);\n        classToHibernateTypeMap.put(Short.class, Hibernate.SHORT);\n        classToHibernateTypeMap.put(String.class, Hibernate.STRING);\n        classToHibernateTypeMap.put(Timestamp.class, Hibernate.TIMESTAMP);\n    }\n\n    private HibernateSessionFactory hibernateSessionFactory;\n\n    private Session session;\n\n    public Session getSession() {\n        return session;\n    }\n\n    public HibernateSessionFactory getHibernateSessionFactory() {\n        return hibernateSessionFactory;\n    }\n\n    public void setHibernateSessionFactory(HibernateSessionFactory hsf) {\n        this.hibernateSessionFactory = hsf;\n    }\n\n    public void init() {\n        try {\n            session = hibernateSessionFactory.createSession();\n        } catch (HibernateException e) {\n            throw new PersistenceException(\"Couldn't init HibernatePersistenceManager\", e);\n        }\n    }\n\n    public void dispose() {\n        try {\n            endSession();\n        } catch (Exception e) {\n            throw new PersistenceException(\"Couldn't dispose HibernatePersistenceManager\", e);\n        } finally {\n            try {\n                hibernateSessionFactory.closeSession(session);\n            } catch (Exception e) {\n                throw new PersistenceException(\"Couldn't close the session\", e);\n            }\n        }\n    }\n\n    public void endSession() throws SQLException, HibernateException {\n        hibernateSessionFactory.endSession(session);\n    }\n\n    public void save(Object objectToSave) {\n        try {\n            session.saveOrUpdate(objectToSave);\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public void remove(Object objectToRemove) {\n        try {\n            session.delete(objectToRemove);\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public List findAll(Class type) {\n        return findAllSorted(type, null);\n    }\n\n    public List findAllSorted(Class type, String sortField) {\n        try {\n            String query = \"FROM result IN CLASS \" + type.getName();\n            if (sortField != null)\n                query += \" ORDER BY LOWER(result.\" + sortField + \")\";\n            return session.find(query);\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public Object getByPrimaryKey(Class type, Object pk) {\n        try {\n            return session.load(type, (Serializable) pk);\n        } catch (ObjectNotFoundException e) {\n            return null;\n        } catch (HibernateException e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public Object getById(Class aClass, long id) {\n        try {\n            return session.load(aClass, new Long(id));\n        } catch (ObjectDeletedException e) {\n            return null;\n        } catch (ObjectNotFoundException e) {\n            return null;\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public List find(String query, Object[] parameters, Class[] parameterTypes) {\n        Session session = null;\n        List results = null;\n        try {\n            session = this.session;\n            if ((parameterTypes != null) || (parameters != null)) {\n                Type[] hibernate_parameter_types = getHibernatedParameterTypes(parameterTypes);\n                results = session.find(query, parameters, hibernate_parameter_types);\n            } else {\n                results = session.find(query);\n            }\n            return results;\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    private static Type[] getHibernatedParameterTypes(Class[] types) {\n        if (types == null) {\n            return null;\n        }\n        Type[] hib_types = new Type[types.length];\n        for (int i = 0; i < types.length; i++) {\n            Class type = types[i];\n            hib_types[i] = (Type) classToHibernateTypeMap.get(type);\n        }\n        return hib_types;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/persistence/hibernate/HibernatePersistenceManagerTest1.java",
		"test_prompt": "// HibernatePersistenceManagerTest1.java\npackage org.petsoar.persistence.hibernate;\n\nimport com.opensymphony.xwork.interceptor.component.Disposable;\nimport com.opensymphony.xwork.interceptor.component.Initializable;\nimport net.sf.hibernate.*;\nimport net.sf.hibernate.type.Type;\nimport org.petsoar.persistence.PersistenceException;\nimport org.petsoar.persistence.PersistenceManager;\nimport java.io.Serializable;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HibernatePersistenceManager}.\n* It contains ten unit test cases for the {@link HibernatePersistenceManager#findAllSorted(Class, String)} method.\n*/\nclass HibernatePersistenceManagerTest1 {"
	},
	{
		"original_code": "// HibernatePersistenceManager.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.persistence.hibernate;\n\nimport com.opensymphony.xwork.interceptor.component.Disposable;\nimport com.opensymphony.xwork.interceptor.component.Initializable;\nimport net.sf.hibernate.*;\nimport net.sf.hibernate.type.Type;\nimport org.petsoar.persistence.PersistenceException;\nimport org.petsoar.persistence.PersistenceManager;\nimport java.io.Serializable;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class HibernatePersistenceManager implements PersistenceManager, HibernateSessionFactoryAware, Initializable, Disposable {\n\n    private static Map classToHibernateTypeMap = new HashMap();\n\n    static {\n        classToHibernateTypeMap.put(Boolean.class, Hibernate.BIG_DECIMAL);\n        classToHibernateTypeMap.put(Boolean.class, Hibernate.BOOLEAN);\n        classToHibernateTypeMap.put(Byte.class, Hibernate.BYTE);\n        classToHibernateTypeMap.put(Character.class, Hibernate.CHARACTER);\n        classToHibernateTypeMap.put(Date.class, Hibernate.DATE);\n        classToHibernateTypeMap.put(Double.class, Hibernate.DOUBLE);\n        classToHibernateTypeMap.put(Float.class, Hibernate.FLOAT);\n        classToHibernateTypeMap.put(Integer.class, Hibernate.INTEGER);\n        classToHibernateTypeMap.put(Long.class, Hibernate.LONG);\n        classToHibernateTypeMap.put(Short.class, Hibernate.SHORT);\n        classToHibernateTypeMap.put(String.class, Hibernate.STRING);\n        classToHibernateTypeMap.put(Timestamp.class, Hibernate.TIMESTAMP);\n    }\n\n    private HibernateSessionFactory hibernateSessionFactory;\n\n    private Session session;\n\n    public Session getSession() {\n        return session;\n    }\n\n    public HibernateSessionFactory getHibernateSessionFactory() {\n        return hibernateSessionFactory;\n    }\n\n    public void setHibernateSessionFactory(HibernateSessionFactory hsf) {\n        this.hibernateSessionFactory = hsf;\n    }\n\n    public void init() {\n        try {\n            session = hibernateSessionFactory.createSession();\n        } catch (HibernateException e) {\n            throw new PersistenceException(\"Couldn't init HibernatePersistenceManager\", e);\n        }\n    }\n\n    public void dispose() {\n        try {\n            endSession();\n        } catch (Exception e) {\n            throw new PersistenceException(\"Couldn't dispose HibernatePersistenceManager\", e);\n        } finally {\n            try {\n                hibernateSessionFactory.closeSession(session);\n            } catch (Exception e) {\n                throw new PersistenceException(\"Couldn't close the session\", e);\n            }\n        }\n    }\n\n    public void endSession() throws SQLException, HibernateException {\n        hibernateSessionFactory.endSession(session);\n    }\n\n    public void save(Object objectToSave) {\n        try {\n            session.saveOrUpdate(objectToSave);\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public void remove(Object objectToRemove) {\n        try {\n            session.delete(objectToRemove);\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public List findAll(Class type) {\n        return findAllSorted(type, null);\n    }\n\n    public List findAllSorted(Class type, String sortField) {\n        try {\n            String query = \"FROM result IN CLASS \" + type.getName();\n            if (sortField != null)\n                query += \" ORDER BY LOWER(result.\" + sortField + \")\";\n            return session.find(query);\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public Object getByPrimaryKey(Class type, Object pk) {\n        try {\n            return session.load(type, (Serializable) pk);\n        } catch (ObjectNotFoundException e) {\n            return null;\n        } catch (HibernateException e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public Object getById(Class aClass, long id) {\n        try {\n            return session.load(aClass, new Long(id));\n        } catch (ObjectDeletedException e) {\n            return null;\n        } catch (ObjectNotFoundException e) {\n            return null;\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    public List find(String query, Object[] parameters, Class[] parameterTypes) {\n        Session session = null;\n        List results = null;\n        try {\n            session = this.session;\n            if ((parameterTypes != null) || (parameters != null)) {\n                Type[] hibernate_parameter_types = getHibernatedParameterTypes(parameterTypes);\n                results = session.find(query, parameters, hibernate_parameter_types);\n            } else {\n                results = session.find(query);\n            }\n            return results;\n        } catch (Exception e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    private static Type[] getHibernatedParameterTypes(Class[] types) {\n        if (types == null) {\n            return null;\n        }\n        Type[] hib_types = new Type[types.length];\n        for (int i = 0; i < types.length; i++) {\n            Class type = types[i];\n            hib_types[i] = (Type) classToHibernateTypeMap.get(type);\n        }\n        return hib_types;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/persistence/hibernate/HibernatePersistenceManagerTest2.java",
		"test_prompt": "// HibernatePersistenceManagerTest2.java\npackage org.petsoar.persistence.hibernate;\n\nimport com.opensymphony.xwork.interceptor.component.Disposable;\nimport com.opensymphony.xwork.interceptor.component.Initializable;\nimport net.sf.hibernate.*;\nimport net.sf.hibernate.type.Type;\nimport org.petsoar.persistence.PersistenceException;\nimport org.petsoar.persistence.PersistenceManager;\nimport java.io.Serializable;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HibernatePersistenceManager}.\n* It contains ten unit test cases for the {@link HibernatePersistenceManager#find(String, Object[], Class[])} method.\n*/\nclass HibernatePersistenceManagerTest2 {"
	},
	{
		"original_code": "// SaveOrder.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.order;\n\nimport com.opensymphony.xwork.ActionSupport;\nimport org.petsoar.cart.ShoppingCart;\nimport org.petsoar.cart.ShoppingCartAware;\nimport org.petsoar.order.Order;\nimport org.petsoar.order.OrderProcessing;\nimport org.petsoar.order.OrderProcessingAware;\n\npublic class SaveOrder extends ActionSupport implements OrderProcessingAware, ShoppingCartAware {\n\n    private Order order = new Order();\n\n    private OrderProcessing orderProcessing;\n\n    private ShoppingCart shoppingCart;\n\n    private boolean delete, cancel;\n\n    private long id;\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public void setOrderProcessing(OrderProcessing orderProcessing) {\n        this.orderProcessing = orderProcessing;\n    }\n\n    public void setShoppingCart(ShoppingCart cart) {\n        this.shoppingCart = cart;\n        order.setTotalPrice(shoppingCart.getTotalPrice());\n        order.setPets(shoppingCart.getPets());\n    }\n\n    public Order getOrder() {\n        return order;\n    }\n\n    public void setDelete(String delete) {\n        // delete button pressed\n        this.delete = true;\n    }\n\n    public void setCancel() {\n        // cancel button pressed\n        this.cancel = true;\n    }\n\n    public String execute() throws Exception {\n        try {\n            if (!cancel) {\n                if (order.getId() == 0) {\n                    orderProcessing.addOrder(order);\n                } else {\n                    Order existingOrder = orderProcessing.getOrder(order.getId());\n                    if (delete) {\n                        orderProcessing.cancelOrder(existingOrder);\n                    } else {\n                        //todo: init correctly\n                        //                  existingOrder.setName(order.getName());\n                        //                  existingOrder.setGender(order.getGender());\n                        //                  existingOrder.setDescription(order.getDescription());\n                        //                  existingOrder.setPersonality(order.getPersonality());\n                    }\n                }\n            }\n            return SUCCESS;\n        } catch (Exception e) {\n            return ERROR;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/order/SaveOrderTest.java",
		"test_prompt": "// SaveOrderTest.java\npackage org.petsoar.actions.order;\n\nimport com.opensymphony.xwork.ActionSupport;\nimport org.petsoar.cart.ShoppingCart;\nimport org.petsoar.cart.ShoppingCartAware;\nimport org.petsoar.order.Order;\nimport org.petsoar.order.OrderProcessing;\nimport org.petsoar.order.OrderProcessingAware;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SaveOrder}.\n* It contains ten unit test cases for the {@link SaveOrder#execute()} method.\n*/\nclass SaveOrderTest {"
	},
	{
		"original_code": "// CheckOut.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.order;\n\nimport org.petsoar.actions.cart.AbstractShoppingCartAction;\nimport org.petsoar.cart.ShoppingCart;\nimport org.petsoar.order.BillingInfo;\nimport org.petsoar.order.CreditCardInfo;\nimport org.petsoar.order.Order;\nimport org.petsoar.order.ShipmentInfo;\nimport org.petsoar.security.SessionCredentials;\nimport org.petsoar.security.SessionCredentialsAware;\nimport org.petsoar.security.User;\n\npublic class CheckOut extends AbstractShoppingCartAction implements SessionCredentialsAware {\n\n    private Order order = new Order();\n\n    private SessionCredentials sessionCredentials;\n\n    public ShoppingCart getShoppingCart() {\n        return shoppingCart;\n    }\n\n    public void setSessionCredentials(SessionCredentials sessionCredentials) {\n        this.sessionCredentials = sessionCredentials;\n    }\n\n    public Order getOrder() {\n        return order;\n    }\n\n    public String execute() throws Exception {\n        if (shoppingCart == null) {\n            return ERROR;\n        } else {\n            order.setTotalPrice(shoppingCart.getTotalPrice());\n            order.setPets(shoppingCart.getPets());\n            User user = sessionCredentials.getCurrentUser();\n            order.setBillingInfo(new BillingInfo(user));\n            order.setCreditCardInfo(new CreditCardInfo());\n            order.setShipmentInfo(new ShipmentInfo(user));\n            return SUCCESS;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/order/CheckOutTest.java",
		"test_prompt": "// CheckOutTest.java\npackage org.petsoar.actions.order;\n\nimport org.petsoar.actions.cart.AbstractShoppingCartAction;\nimport org.petsoar.cart.ShoppingCart;\nimport org.petsoar.order.BillingInfo;\nimport org.petsoar.order.CreditCardInfo;\nimport org.petsoar.order.Order;\nimport org.petsoar.order.ShipmentInfo;\nimport org.petsoar.security.SessionCredentials;\nimport org.petsoar.security.SessionCredentialsAware;\nimport org.petsoar.security.User;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CheckOut}.\n* It contains ten unit test cases for the {@link CheckOut#execute()} method.\n*/\nclass CheckOutTest {"
	},
	{
		"original_code": "// EditOrder.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.order;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.order.Order;\nimport org.petsoar.order.OrderProcessing;\nimport org.petsoar.order.OrderProcessingAware;\n\npublic class EditOrder implements Action, OrderProcessingAware {\n\n    private long id;\n\n    private Order order;\n\n    private OrderProcessing orderProcessing;\n\n    public long getId() {\n        return id;\n    }\n\n    public boolean isNewOrder() {\n        return id == 0;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public void setOrderProcessing(OrderProcessing orderProcessing) {\n        this.orderProcessing = orderProcessing;\n    }\n\n    public Order getOrder() {\n        return order;\n    }\n\n    public String execute() {\n        if (id == 0) {\n            order = new Order();\n        } else {\n            order = orderProcessing.getOrder(id);\n            if (order == null) {\n                return ERROR;\n            }\n        }\n        return SUCCESS;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/order/EditOrderTest0.java",
		"test_prompt": "// EditOrderTest0.java\npackage org.petsoar.actions.order;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.order.Order;\nimport org.petsoar.order.OrderProcessing;\nimport org.petsoar.order.OrderProcessingAware;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditOrder}.\n* It contains ten unit test cases for the {@link EditOrder#isNewOrder()} method.\n*/\nclass EditOrderTest0 {"
	},
	{
		"original_code": "// EditOrder.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.order;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.order.Order;\nimport org.petsoar.order.OrderProcessing;\nimport org.petsoar.order.OrderProcessingAware;\n\npublic class EditOrder implements Action, OrderProcessingAware {\n\n    private long id;\n\n    private Order order;\n\n    private OrderProcessing orderProcessing;\n\n    public long getId() {\n        return id;\n    }\n\n    public boolean isNewOrder() {\n        return id == 0;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public void setOrderProcessing(OrderProcessing orderProcessing) {\n        this.orderProcessing = orderProcessing;\n    }\n\n    public Order getOrder() {\n        return order;\n    }\n\n    public String execute() {\n        if (id == 0) {\n            order = new Order();\n        } else {\n            order = orderProcessing.getOrder(id);\n            if (order == null) {\n                return ERROR;\n            }\n        }\n        return SUCCESS;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/order/EditOrderTest1.java",
		"test_prompt": "// EditOrderTest1.java\npackage org.petsoar.actions.order;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.order.Order;\nimport org.petsoar.order.OrderProcessing;\nimport org.petsoar.order.OrderProcessingAware;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditOrder}.\n* It contains ten unit test cases for the {@link EditOrder#execute()} method.\n*/\nclass EditOrderTest1 {"
	},
	{
		"original_code": "// StoreFrontSearch.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.storefront;\n\nimport org.petsoar.pets.Pet;\nimport org.petsoar.search.Searcher;\nimport org.petsoar.search.SearcherAware;\nimport java.util.ArrayList;\n\npublic class StoreFrontSearch extends AbstractPaginatableAction implements SearcherAware {\n\n    private String query;\n\n    private Searcher searcher;\n\n    public void setSearcher(Searcher searcher) {\n        this.searcher = searcher;\n    }\n\n    public String getQuery() {\n        return query;\n    }\n\n    public void setQuery(String query) {\n        this.query = query;\n    }\n\n    public Pet getPet() {\n        return (Pet) getPets().get(0);\n    }\n\n    protected Class getType() {\n        return Pet.class;\n    }\n\n    public String execute() {\n        try {\n            setPets(searcher.search(query));\n            return SUCCESS;\n        } catch (Throwable e) {\n            setPets(new ArrayList());\n            addFieldError(\"query\", \"Invalid query\");\n            return INPUT;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/storefront/StoreFrontSearchTest.java",
		"test_prompt": "// StoreFrontSearchTest.java\npackage org.petsoar.actions.storefront;\n\nimport org.petsoar.pets.Pet;\nimport org.petsoar.search.Searcher;\nimport org.petsoar.search.SearcherAware;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StoreFrontSearch}.\n* It contains ten unit test cases for the {@link StoreFrontSearch#execute()} method.\n*/\nclass StoreFrontSearchTest {"
	},
	{
		"original_code": "// StoreFrontListCategories.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.storefront;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.categories.Category;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class StoreFrontListCategories implements Action, PetStoreAware {\n\n    private List categories;\n\n    private long categoryId;\n\n    private PetStore petStore;\n\n    private Category category;\n\n    private List hierarchy;\n\n    private List pets;\n\n    public List getCategories() {\n        return categories;\n    }\n\n    public void setCategories(List categories) {\n        this.categories = categories;\n    }\n\n    public void setPetStore(PetStore petStore) {\n        this.petStore = petStore;\n    }\n\n    public long getCategoryId() {\n        return categoryId;\n    }\n\n    public void setCategoryId(long categoryId) {\n        this.categoryId = categoryId;\n    }\n\n    public List getHierarchy() {\n        return hierarchy;\n    }\n\n    public Category getCategory() {\n        return category;\n    }\n\n    public List getPets() {\n        return pets;\n    }\n\n    public String execute() {\n        if (categoryId == 0) {\n            categories = petStore.getRootCategories();\n            hierarchy = Collections.EMPTY_LIST;\n            pets = petStore.getUncategorizedPets();\n        } else {\n            category = petStore.getCategory(categoryId);\n            categories = category.getCategories();\n            pets = category.getPets();\n            hierarchy = new ArrayList();\n            hierarchy.add(category);\n            Category tempCat = category;\n            while (tempCat.getParent() != null) {\n                tempCat = tempCat.getParent();\n                hierarchy.add(0, tempCat);\n            }\n        }\n        return SUCCESS;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/storefront/StoreFrontListCategoriesTest.java",
		"test_prompt": "// StoreFrontListCategoriesTest.java\npackage org.petsoar.actions.storefront;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.categories.Category;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StoreFrontListCategories}.\n* It contains ten unit test cases for the {@link StoreFrontListCategories#execute()} method.\n*/\nclass StoreFrontListCategoriesTest {"
	},
	{
		"original_code": "// StoreFrontListPets.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.storefront;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.categories.Category;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport org.petsoar.pets.Pet;\nimport java.util.List;\n\npublic class StoreFrontListPets extends AbstractPaginatableAction implements PetStoreAware {\n\n    private PetStore petStore;\n\n    private List pets;\n\n    private long categoryId;\n\n    private String query;\n\n    public long getCategoryId() {\n        return categoryId;\n    }\n\n    public void setCategoryId(long categoryId) {\n        this.categoryId = categoryId;\n    }\n\n    public void setPetStore(PetStore petStore) {\n        this.petStore = petStore;\n    }\n\n    public String getQuery() {\n        return query;\n    }\n\n    public void setQuery(String query) {\n        this.query = query;\n    }\n\n    public String execute() throws Exception {\n        if (categoryId != 0) {\n            Category parentCategory = petStore.getCategory(categoryId);\n            if (parentCategory != null) {\n                pets = parentCategory.getPets();\n            } else\n                return ERROR;\n        } else {\n            pets = petStore.getPets();\n        }\n        setPets(pets);\n        return SUCCESS;\n    }\n\n    public List getPets() {\n        return pets;\n    }\n\n    protected Class getType() {\n        return Pet.class;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/storefront/StoreFrontListPetsTest.java",
		"test_prompt": "// StoreFrontListPetsTest.java\npackage org.petsoar.actions.storefront;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.categories.Category;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport org.petsoar.pets.Pet;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StoreFrontListPets}.\n* It contains ten unit test cases for the {@link StoreFrontListPets#execute()} method.\n*/\nclass StoreFrontListPetsTest {"
	},
	{
		"original_code": "// StoreFrontViewPet.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.storefront;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.pets.Pet;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\n\npublic class StoreFrontViewPet implements Action, PetStoreAware {\n\n    private PetStore petStore;\n\n    private Pet pet;\n\n    private long id;\n\n    public void setPetStore(PetStore petStore) {\n        this.petStore = petStore;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public String execute() {\n        pet = petStore.getPet(id);\n        if (pet == null) {\n            return ERROR;\n        } else {\n            return SUCCESS;\n        }\n    }\n\n    public Pet getPet() {\n        return pet;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/storefront/StoreFrontViewPetTest.java",
		"test_prompt": "// StoreFrontViewPetTest.java\npackage org.petsoar.actions.storefront;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.pets.Pet;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StoreFrontViewPet}.\n* It contains ten unit test cases for the {@link StoreFrontViewPet#execute()} method.\n*/\nclass StoreFrontViewPetTest {"
	},
	{
		"original_code": "// ListCategories.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.inventory;\n\nimport com.opensymphony.xwork.ActionSupport;\nimport org.petsoar.categories.Category;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ListCategories extends ActionSupport implements PetStoreAware {\n\n    private long parentId;\n\n    private List categories;\n\n    private PetStore petStore;\n\n    public void setParentId(long parentId) {\n        this.parentId = parentId;\n    }\n\n    public long getParentId() {\n        return parentId;\n    }\n\n    public void setPetStore(PetStore petStore) {\n        this.petStore = petStore;\n    }\n\n    public List getCategories() {\n        return categories;\n    }\n\n    public Category getCurrentCategory() {\n        if (parentId == 0) {\n            return null;\n        } else {\n            return petStore.getCategory(parentId);\n        }\n    }\n\n    public List getCategoryHierarchy() {\n        Category cat = getCurrentCategory();\n        if (cat == null)\n            return Collections.EMPTY_LIST;\n        else {\n            List hierarchy = new ArrayList();\n            hierarchy.add(cat);\n            while (cat.getParent() != null) {\n                cat = cat.getParent();\n                hierarchy.add(0, cat);\n            }\n            return hierarchy;\n        }\n    }\n\n    public String execute() throws Exception {\n        if (parentId == 0) {\n            categories = petStore.getRootCategories();\n        } else {\n            categories = getCurrentCategory().getCategories();\n        }\n        return SUCCESS;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/inventory/ListCategoriesTest.java",
		"test_prompt": "// ListCategoriesTest.java\npackage org.petsoar.actions.inventory;\n\nimport com.opensymphony.xwork.ActionSupport;\nimport org.petsoar.categories.Category;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ListCategories}.\n* It contains ten unit test cases for the {@link ListCategories#execute()} method.\n*/\nclass ListCategoriesTest {"
	},
	{
		"original_code": "// ViewPet.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.inventory;\n\npublic class ViewPet extends AbstractPetAction {\n\n    private long id;\n\n    public String execute() throws Exception {\n        this.pet = petStore.getPet(id);\n        if (pet == null) {\n            addActionError(\"Invalid pet selected.\");\n            return ERROR;\n        }\n        return SUCCESS;\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/inventory/ViewPetTest.java",
		"test_prompt": "// ViewPetTest.java\npackage org.petsoar.actions.inventory;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ViewPet}.\n* It contains ten unit test cases for the {@link ViewPet#execute()} method.\n*/\nclass ViewPetTest {"
	},
	{
		"original_code": "// InventorySavePet.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.inventory;\n\nimport com.opensymphony.xwork.ActionSupport;\nimport org.petsoar.pets.Pet;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\n\npublic class InventorySavePet extends ActionSupport implements PetStoreAware {\n\n    private Pet pet = new Pet();\n\n    private PetStore petStore;\n\n    private boolean delete, cancel;\n\n    private long id;\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public void setPetStore(PetStore petStore) {\n        this.petStore = petStore;\n    }\n\n    public Pet getPet() {\n        return pet;\n    }\n\n    public void setDelete(String delete) {\n        // delete button pressed\n        this.delete = true;\n    }\n\n    public void setCancel(String cancel) {\n        // cancel button pressed\n        this.cancel = true;\n    }\n\n    public String execute() throws Exception {\n        boolean skip = false;\n        if (cancel || delete) {\n            // skip validation if user has pressed cancel or delete\n            skip = true;\n        }\n        if (!skip && (pet.getName() == null || pet.getName().trim().length() == 0)) {\n            addFieldError(\"pet.name\", \"Name not entered\");\n        }\n        if (hasErrors())\n            return ERROR;\n        if (!cancel) {\n            if (pet.getId() == 0) {\n                petStore.savePet(pet);\n            } else {\n                Pet existingPet = petStore.getPet(pet.getId());\n                if (delete) {\n                    petStore.removePet(existingPet);\n                } else {\n                    existingPet.setName(pet.getName());\n                    existingPet.setGender(pet.getGender());\n                    existingPet.setDescription(pet.getDescription());\n                    existingPet.setPersonality(pet.getPersonality());\n                    existingPet.setPrice(pet.getPrice());\n                    existingPet.setCategory(pet.getCategory());\n                    petStore.savePet(existingPet);\n                }\n            }\n        }\n        return SUCCESS;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/inventory/InventorySavePetTest.java",
		"test_prompt": "// InventorySavePetTest.java\npackage org.petsoar.actions.inventory;\n\nimport com.opensymphony.xwork.ActionSupport;\nimport org.petsoar.pets.Pet;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InventorySavePet}.\n* It contains ten unit test cases for the {@link InventorySavePet#execute()} method.\n*/\nclass InventorySavePetTest {"
	},
	{
		"original_code": "// AddCategory.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.inventory;\n\nimport com.opensymphony.xwork.ActionSupport;\nimport org.petsoar.categories.Category;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\n\npublic class AddCategory extends ActionSupport implements PetStoreAware {\n\n    private String name;\n\n    private long parentId;\n\n    private Category category;\n\n    private PetStore petStore;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setParentId(long parentId) {\n        this.parentId = parentId;\n    }\n\n    public Category getCategory() {\n        return category;\n    }\n\n    public void setPetStore(PetStore petStore) {\n        this.petStore = petStore;\n    }\n\n    public String execute() throws Exception {\n        try {\n            category = new Category(name);\n            if (parentId != 0) {\n                Category parent = petStore.getCategory(parentId);\n                category.setParent(parent);\n            }\n            petStore.addCategory(category);\n            return SUCCESS;\n        } catch (Exception e) {\n            return ERROR;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/inventory/AddCategoryTest.java",
		"test_prompt": "// AddCategoryTest.java\npackage org.petsoar.actions.inventory;\n\nimport com.opensymphony.xwork.ActionSupport;\nimport org.petsoar.categories.Category;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AddCategory}.\n* It contains ten unit test cases for the {@link AddCategory#execute()} method.\n*/\nclass AddCategoryTest {"
	},
	{
		"original_code": "// InventoryListPets.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.inventory;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport java.util.List;\n\npublic class InventoryListPets implements Action, PetStoreAware {\n\n    private PetStore petStore;\n\n    private List pets;\n\n    public void setPetStore(PetStore petStore) {\n        this.petStore = petStore;\n    }\n\n    public String execute() throws Exception {\n        pets = petStore.getPets();\n        return SUCCESS;\n    }\n\n    public List getPets() {\n        return pets;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/inventory/InventoryListPetsTest.java",
		"test_prompt": "// InventoryListPetsTest.java\npackage org.petsoar.actions.inventory;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InventoryListPets}.\n* It contains ten unit test cases for the {@link InventoryListPets#execute()} method.\n*/\nclass InventoryListPetsTest {"
	},
	{
		"original_code": "// AddPet.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.inventory;\n\npublic class AddPet extends AbstractPetAction {\n\n    public String execute() throws Exception {\n        if (hasErrors())\n            return ERROR;\n        petStore.savePet(pet);\n        return SUCCESS;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/inventory/AddPetTest.java",
		"test_prompt": "// AddPetTest.java\npackage org.petsoar.actions.inventory;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AddPet}.\n* It contains ten unit test cases for the {@link AddPet#execute()} method.\n*/\nclass AddPetTest {"
	},
	{
		"original_code": "// RemovePet.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.inventory;\n\npublic class RemovePet extends ViewPet {\n\n    private String confirm;\n\n    public String execute() throws Exception {\n        String result = super.execute();\n        if (hasErrors()) {\n            return result;\n        }\n        if (confirm != null) {\n            petStore.removePet(pet);\n            return SUCCESS;\n        } else {\n            return \"cancel\";\n        }\n    }\n\n    public void setConfirm(String confirm) {\n        this.confirm = confirm;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/inventory/RemovePetTest.java",
		"test_prompt": "// RemovePetTest.java\npackage org.petsoar.actions.inventory;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RemovePet}.\n* It contains ten unit test cases for the {@link RemovePet#execute()} method.\n*/\nclass RemovePetTest {"
	},
	{
		"original_code": "// RemovePetFromShoppingCart.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.cart;\n\nimport org.petsoar.pets.Pet;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\n\npublic class RemovePetFromShoppingCart extends AbstractShoppingCartAction implements PetStoreAware {\n\n    private long petId;\n\n    private PetStore petStore;\n\n    private Pet pet;\n\n    public void setPetStore(PetStore petStore) {\n        this.petStore = petStore;\n    }\n\n    public void setPetId(long petId) {\n        this.petId = petId;\n    }\n\n    public Pet getPet() {\n        return pet;\n    }\n\n    public String execute() throws Exception {\n        if (shoppingCart == null || petId == 0) {\n            return ERROR;\n        }\n        pet = petStore.getPet(petId);\n        if (pet == null)\n            return ERROR;\n        shoppingCart.removePet(pet);\n        return SUCCESS;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/cart/RemovePetFromShoppingCartTest.java",
		"test_prompt": "// RemovePetFromShoppingCartTest.java\npackage org.petsoar.actions.cart;\n\nimport org.petsoar.pets.Pet;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RemovePetFromShoppingCart}.\n* It contains ten unit test cases for the {@link RemovePetFromShoppingCart#execute()} method.\n*/\nclass RemovePetFromShoppingCartTest {"
	},
	{
		"original_code": "// ListCart.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.cart;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.cart.ShoppingCart;\nimport org.petsoar.cart.ShoppingCartAware;\nimport java.util.Set;\n\npublic class ListCart implements Action, ShoppingCartAware {\n\n    private ShoppingCart cart;\n\n    private Set pets;\n\n    public void setShoppingCart(ShoppingCart cart) {\n        this.cart = cart;\n    }\n\n    public Set getPets() {\n        return pets;\n    }\n\n    public String execute() {\n        if (cart == null) {\n            return ERROR;\n        } else {\n            pets = cart.getPets();\n            return SUCCESS;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/cart/ListCartTest.java",
		"test_prompt": "// ListCartTest.java\npackage org.petsoar.actions.cart;\n\nimport com.opensymphony.xwork.Action;\nimport org.petsoar.cart.ShoppingCart;\nimport org.petsoar.cart.ShoppingCartAware;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ListCart}.\n* It contains ten unit test cases for the {@link ListCart#execute()} method.\n*/\nclass ListCartTest {"
	},
	{
		"original_code": "// ViewShoppingCart.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.cart;\n\nimport org.petsoar.cart.ShoppingCart;\n\npublic class ViewShoppingCart extends AbstractShoppingCartAction {\n\n    public ShoppingCart getShoppingCart() {\n        return shoppingCart;\n    }\n\n    public String execute() throws Exception {\n        if (shoppingCart == null) {\n            return ERROR;\n        } else {\n            return SUCCESS;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/cart/ViewShoppingCartTest.java",
		"test_prompt": "// ViewShoppingCartTest.java\npackage org.petsoar.actions.cart;\n\nimport org.petsoar.cart.ShoppingCart;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ViewShoppingCart}.\n* It contains ten unit test cases for the {@link ViewShoppingCart#execute()} method.\n*/\nclass ViewShoppingCartTest {"
	},
	{
		"original_code": "// AddPetToShoppingCart.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.actions.cart;\n\nimport org.petsoar.pets.Pet;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\n\npublic class AddPetToShoppingCart extends AbstractShoppingCartAction implements PetStoreAware {\n\n    private long petId;\n\n    private PetStore petStore;\n\n    private Pet pet;\n\n    public void setPetStore(PetStore petStore) {\n        this.petStore = petStore;\n    }\n\n    public void setPetId(long petId) {\n        this.petId = petId;\n    }\n\n    public Pet getPet() {\n        return pet;\n    }\n\n    public String execute() throws Exception {\n        if (shoppingCart == null || petId == 0) {\n            return ERROR;\n        }\n        pet = petStore.getPet(petId);\n        if (pet == null)\n            return ERROR;\n        if (shoppingCart.addPet(pet)) {\n            return SUCCESS;\n        } else {\n            return ERROR;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/actions/cart/AddPetToShoppingCartTest.java",
		"test_prompt": "// AddPetToShoppingCartTest.java\npackage org.petsoar.actions.cart;\n\nimport org.petsoar.pets.Pet;\nimport org.petsoar.pets.PetStore;\nimport org.petsoar.pets.PetStoreAware;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AddPetToShoppingCart}.\n* It contains ten unit test cases for the {@link AddPetToShoppingCart#execute()} method.\n*/\nclass AddPetToShoppingCartTest {"
	},
	{
		"original_code": "// SimpleShoppingCart.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.cart;\n\nimport org.petsoar.pets.Pet;\nimport java.math.BigDecimal;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class SimpleShoppingCart implements ShoppingCart {\n\n    private Set pets = new HashSet();\n\n    public boolean addPet(Pet pet) {\n        return pets.add(pet);\n    }\n\n    public boolean removePet(Pet pet) {\n        return pets.remove(pet);\n    }\n\n    public boolean isEmpty() {\n        return pets.isEmpty();\n    }\n\n    public int size() {\n        return pets.size();\n    }\n\n    public Set getPets() {\n        return pets;\n    }\n\n    public BigDecimal getTotalPrice() {\n        BigDecimal totalPrice = new BigDecimal(0);\n        for (Iterator iterator = pets.iterator(); iterator.hasNext(); ) {\n            Pet pet = (Pet) iterator.next();\n            if (pet.getPrice() != null)\n                totalPrice = totalPrice.add(pet.getPrice());\n        }\n        return totalPrice;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/cart/SimpleShoppingCartTest0.java",
		"test_prompt": "// SimpleShoppingCartTest0.java\npackage org.petsoar.cart;\n\nimport org.petsoar.pets.Pet;\nimport java.math.BigDecimal;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleShoppingCart}.\n* It contains ten unit test cases for the {@link SimpleShoppingCart#addPet(Pet)} method.\n*/\nclass SimpleShoppingCartTest0 {"
	},
	{
		"original_code": "// SimpleShoppingCart.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.cart;\n\nimport org.petsoar.pets.Pet;\nimport java.math.BigDecimal;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class SimpleShoppingCart implements ShoppingCart {\n\n    private Set pets = new HashSet();\n\n    public boolean addPet(Pet pet) {\n        return pets.add(pet);\n    }\n\n    public boolean removePet(Pet pet) {\n        return pets.remove(pet);\n    }\n\n    public boolean isEmpty() {\n        return pets.isEmpty();\n    }\n\n    public int size() {\n        return pets.size();\n    }\n\n    public Set getPets() {\n        return pets;\n    }\n\n    public BigDecimal getTotalPrice() {\n        BigDecimal totalPrice = new BigDecimal(0);\n        for (Iterator iterator = pets.iterator(); iterator.hasNext(); ) {\n            Pet pet = (Pet) iterator.next();\n            if (pet.getPrice() != null)\n                totalPrice = totalPrice.add(pet.getPrice());\n        }\n        return totalPrice;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/cart/SimpleShoppingCartTest1.java",
		"test_prompt": "// SimpleShoppingCartTest1.java\npackage org.petsoar.cart;\n\nimport org.petsoar.pets.Pet;\nimport java.math.BigDecimal;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleShoppingCart}.\n* It contains ten unit test cases for the {@link SimpleShoppingCart#removePet(Pet)} method.\n*/\nclass SimpleShoppingCartTest1 {"
	},
	{
		"original_code": "// SimpleShoppingCart.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.cart;\n\nimport org.petsoar.pets.Pet;\nimport java.math.BigDecimal;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class SimpleShoppingCart implements ShoppingCart {\n\n    private Set pets = new HashSet();\n\n    public boolean addPet(Pet pet) {\n        return pets.add(pet);\n    }\n\n    public boolean removePet(Pet pet) {\n        return pets.remove(pet);\n    }\n\n    public boolean isEmpty() {\n        return pets.isEmpty();\n    }\n\n    public int size() {\n        return pets.size();\n    }\n\n    public Set getPets() {\n        return pets;\n    }\n\n    public BigDecimal getTotalPrice() {\n        BigDecimal totalPrice = new BigDecimal(0);\n        for (Iterator iterator = pets.iterator(); iterator.hasNext(); ) {\n            Pet pet = (Pet) iterator.next();\n            if (pet.getPrice() != null)\n                totalPrice = totalPrice.add(pet.getPrice());\n        }\n        return totalPrice;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/cart/SimpleShoppingCartTest2.java",
		"test_prompt": "// SimpleShoppingCartTest2.java\npackage org.petsoar.cart;\n\nimport org.petsoar.pets.Pet;\nimport java.math.BigDecimal;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleShoppingCart}.\n* It contains ten unit test cases for the {@link SimpleShoppingCart#isEmpty()} method.\n*/\nclass SimpleShoppingCartTest2 {"
	},
	{
		"original_code": "// SimpleShoppingCart.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.cart;\n\nimport org.petsoar.pets.Pet;\nimport java.math.BigDecimal;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class SimpleShoppingCart implements ShoppingCart {\n\n    private Set pets = new HashSet();\n\n    public boolean addPet(Pet pet) {\n        return pets.add(pet);\n    }\n\n    public boolean removePet(Pet pet) {\n        return pets.remove(pet);\n    }\n\n    public boolean isEmpty() {\n        return pets.isEmpty();\n    }\n\n    public int size() {\n        return pets.size();\n    }\n\n    public Set getPets() {\n        return pets;\n    }\n\n    public BigDecimal getTotalPrice() {\n        BigDecimal totalPrice = new BigDecimal(0);\n        for (Iterator iterator = pets.iterator(); iterator.hasNext(); ) {\n            Pet pet = (Pet) iterator.next();\n            if (pet.getPrice() != null)\n                totalPrice = totalPrice.add(pet.getPrice());\n        }\n        return totalPrice;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/cart/SimpleShoppingCartTest3.java",
		"test_prompt": "// SimpleShoppingCartTest3.java\npackage org.petsoar.cart;\n\nimport org.petsoar.pets.Pet;\nimport java.math.BigDecimal;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleShoppingCart}.\n* It contains ten unit test cases for the {@link SimpleShoppingCart#size()} method.\n*/\nclass SimpleShoppingCartTest3 {"
	},
	{
		"original_code": "// Category.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.categories;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.petsoar.pets.Pet;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * A category.\n * @hibernate.class table=\"CATEGORIES\" proxy=\"org.petsoar.categories.Category\"\n */\npublic class Category {\n\n    private long id;\n\n    private String name;\n\n    private String image;\n\n    private Category parent;\n\n    private List categories = new ArrayList();\n\n    private List pets = new ArrayList();\n\n    public Category() {\n    }\n\n    public Category(String name) {\n        this.name = name;\n    }\n\n    /**\n     * @hibernate.id column=\"CATID\" generator-class=\"increment\" unsaved-value=\"0\"\n     */\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    /**\n     * The parent category of this category.\n     * @hibernate.many-to-one cascade=\"none\" column=\"PARENTID\"\n     */\n    public Category getParent() {\n        return parent;\n    }\n\n    public void setParent(Category category) {\n        this.parent = category;\n    }\n\n    /**\n     * Name of category\n     * @hibernate.property column=\"NAME\"\n     */\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * The path to the image.\n     * @hibernate.property column=\"IMAGE\"\n     */\n    public String getImage() {\n        return image;\n    }\n\n    public void setImage(String image) {\n        this.image = image;\n    }\n\n    /**\n     * @hibernate.bag table=\"CATEGORY\" lazy=\"true\" cascade=\"delete\" inverse=\"true\"\n     * @hibernate.collection-one-to-many class=\"org.petsoar.categories.Category\"\n     * @hibernate.collection-key column=\"PARENTID\"\n     */\n    public List getCategories() {\n        return categories;\n    }\n\n    public void setCategories(List categories) {\n        this.categories = categories;\n    }\n\n    public void addCategory(Category category) {\n        getCategories().add(category);\n    }\n\n    public void removeCategory(Category category) {\n        getCategories().remove(category);\n    }\n\n    /**\n     * @hibernate.bag table=\"PET\" lazy=\"true\" cascade=\"delete\" inverse=\"true\"\n     * @hibernate.collection-one-to-many class=\"org.petsoar.pets.Pet\"\n     * @hibernate.collection-key column=\"CATEGORY\"\n     */\n    public List getPets() {\n        return pets;\n    }\n\n    public void setPets(List pets) {\n        this.pets = pets;\n    }\n\n    public void addPet(Pet pet) {\n        getPets().add(pet);\n        pet.setCategory(this);\n    }\n\n    public void removePet(Pet pet) {\n        getPets().remove(pet);\n    }\n\n    public boolean equals(Object obj) {\n        // custom equalsbuilder used (instead of using reflection) as cyclical dependency\n        // causes stack overflow.\n        if (!(obj instanceof Category)) {\n            return false;\n        }\n        Category other = (Category) obj;\n        return new EqualsBuilder().append(id, other.id).append(name, other.name).isEquals();\n    }\n\n    public int hashCode() {\n        // custom hashcodebuilder used (instead of using reflection) as cyclical dependency\n        // causes stack overflow.\n        return new HashCodeBuilder(17, 37).append(id).toHashCode();\n    }\n\n    public String toString() {\n        // custom tostringbuilder used (instead of using reflection) as cyclical dependency\n        // causes stack overflow.\n        return new ToStringBuilder(this).append(\"id\", id).append(\"name\", name).toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/categories/CategoryTest0.java",
		"test_prompt": "// CategoryTest0.java\npackage org.petsoar.categories;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.petsoar.pets.Pet;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Category}.\n* It contains ten unit test cases for the {@link Category#equals(Object)} method.\n*/\nclass CategoryTest0 {"
	},
	{
		"original_code": "// Category.java\n/*\n * Copyright (c) 2003-2005, Wiley & Sons, Joe Walnes,Ara Abrahamian,\n * Mike Cannon-Brookes,Patrick A Lightbody\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the distribution.\n *     * Neither the name of the 'Wiley & Sons', 'Java Open Source\n * Programming' nor the names of the authors may be used to endorse or\n * promote products derived from this software without specific prior\n * written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage org.petsoar.categories;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.petsoar.pets.Pet;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * A category.\n * @hibernate.class table=\"CATEGORIES\" proxy=\"org.petsoar.categories.Category\"\n */\npublic class Category {\n\n    private long id;\n\n    private String name;\n\n    private String image;\n\n    private Category parent;\n\n    private List categories = new ArrayList();\n\n    private List pets = new ArrayList();\n\n    public Category() {\n    }\n\n    public Category(String name) {\n        this.name = name;\n    }\n\n    /**\n     * @hibernate.id column=\"CATID\" generator-class=\"increment\" unsaved-value=\"0\"\n     */\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    /**\n     * The parent category of this category.\n     * @hibernate.many-to-one cascade=\"none\" column=\"PARENTID\"\n     */\n    public Category getParent() {\n        return parent;\n    }\n\n    public void setParent(Category category) {\n        this.parent = category;\n    }\n\n    /**\n     * Name of category\n     * @hibernate.property column=\"NAME\"\n     */\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    /**\n     * The path to the image.\n     * @hibernate.property column=\"IMAGE\"\n     */\n    public String getImage() {\n        return image;\n    }\n\n    public void setImage(String image) {\n        this.image = image;\n    }\n\n    /**\n     * @hibernate.bag table=\"CATEGORY\" lazy=\"true\" cascade=\"delete\" inverse=\"true\"\n     * @hibernate.collection-one-to-many class=\"org.petsoar.categories.Category\"\n     * @hibernate.collection-key column=\"PARENTID\"\n     */\n    public List getCategories() {\n        return categories;\n    }\n\n    public void setCategories(List categories) {\n        this.categories = categories;\n    }\n\n    public void addCategory(Category category) {\n        getCategories().add(category);\n    }\n\n    public void removeCategory(Category category) {\n        getCategories().remove(category);\n    }\n\n    /**\n     * @hibernate.bag table=\"PET\" lazy=\"true\" cascade=\"delete\" inverse=\"true\"\n     * @hibernate.collection-one-to-many class=\"org.petsoar.pets.Pet\"\n     * @hibernate.collection-key column=\"CATEGORY\"\n     */\n    public List getPets() {\n        return pets;\n    }\n\n    public void setPets(List pets) {\n        this.pets = pets;\n    }\n\n    public void addPet(Pet pet) {\n        getPets().add(pet);\n        pet.setCategory(this);\n    }\n\n    public void removePet(Pet pet) {\n        getPets().remove(pet);\n    }\n\n    public boolean equals(Object obj) {\n        // custom equalsbuilder used (instead of using reflection) as cyclical dependency\n        // causes stack overflow.\n        if (!(obj instanceof Category)) {\n            return false;\n        }\n        Category other = (Category) obj;\n        return new EqualsBuilder().append(id, other.id).append(name, other.name).isEquals();\n    }\n\n    public int hashCode() {\n        // custom hashcodebuilder used (instead of using reflection) as cyclical dependency\n        // causes stack overflow.\n        return new HashCodeBuilder(17, 37).append(id).toHashCode();\n    }\n\n    public String toString() {\n        // custom tostringbuilder used (instead of using reflection) as cyclical dependency\n        // causes stack overflow.\n        return new ToStringBuilder(this).append(\"id\", id).append(\"name\", name).toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/37_petsoar/src/main/java/org/petsoar/categories/CategoryTest1.java",
		"test_prompt": "// CategoryTest1.java\npackage org.petsoar.categories;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.petsoar.pets.Pet;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Category}.\n* It contains ten unit test cases for the {@link Category#hashCode()} method.\n*/\nclass CategoryTest1 {"
	}
]