[
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest0.java",
		"test_prompt": "// ClientHttpRequestTest0.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post()} method.\n*/\nclass ClientHttpRequestTest0 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest1.java",
		"test_prompt": "// ClientHttpRequestTest1.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(Map)} method.\n*/\nclass ClientHttpRequestTest1 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest2.java",
		"test_prompt": "// ClientHttpRequestTest2.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(Object[])} method.\n*/\nclass ClientHttpRequestTest2 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest3.java",
		"test_prompt": "// ClientHttpRequestTest3.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(Map, Map)} method.\n*/\nclass ClientHttpRequestTest3 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest4.java",
		"test_prompt": "// ClientHttpRequestTest4.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(String[], Object[])} method.\n*/\nclass ClientHttpRequestTest4 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest5.java",
		"test_prompt": "// ClientHttpRequestTest5.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object)} method.\n*/\nclass ClientHttpRequestTest5 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest6.java",
		"test_prompt": "// ClientHttpRequestTest6.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.\n*/\nclass ClientHttpRequestTest6 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest7.java",
		"test_prompt": "// ClientHttpRequestTest7.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.\n*/\nclass ClientHttpRequestTest7 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest8.java",
		"test_prompt": "// ClientHttpRequestTest8.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object, String, Object)} method.\n*/\nclass ClientHttpRequestTest8 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest9.java",
		"test_prompt": "// ClientHttpRequestTest9.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, Map)} method.\n*/\nclass ClientHttpRequestTest9 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest10.java",
		"test_prompt": "// ClientHttpRequestTest10.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, Object[])} method.\n*/\nclass ClientHttpRequestTest10 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest11.java",
		"test_prompt": "// ClientHttpRequestTest11.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, Map, Map)} method.\n*/\nclass ClientHttpRequestTest11 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest12.java",
		"test_prompt": "// ClientHttpRequestTest12.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String[], Object[])} method.\n*/\nclass ClientHttpRequestTest12 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest13.java",
		"test_prompt": "// ClientHttpRequestTest13.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object)} method.\n*/\nclass ClientHttpRequestTest13 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest14.java",
		"test_prompt": "// ClientHttpRequestTest14.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.\n*/\nclass ClientHttpRequestTest14 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest15.java",
		"test_prompt": "// ClientHttpRequestTest15.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.\n*/\nclass ClientHttpRequestTest15 {"
	},
	{
		"original_code": "// ClientHttpRequest.java\n/*\n *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\n\n/**\n * <p>Title: Client HTTP Request class</p>\n * <p>Description: this class helps to send POST HTTP requests with various form data,\n * including files. Cookies can be added to be included in the request.</p>\n *\n * @author Vlad Patryshev\n * @version 1.0\n */\npublic class ClientHttpRequest {\n\n    URLConnection connection;\n\n    OutputStream os = null;\n\n    Map cookies = new HashMap();\n\n    protected void connect() throws IOException {\n        if (os == null)\n            os = connection.getOutputStream();\n    }\n\n    protected void write(char c) throws IOException {\n        connect();\n        os.write(c);\n    }\n\n    protected void write(String s) throws IOException {\n        connect();\n        os.write(s.getBytes());\n    }\n\n    protected void newline() throws IOException {\n        connect();\n        write(\"\\r\\n\");\n    }\n\n    protected void writeln(String s) throws IOException {\n        connect();\n        write(s);\n        newline();\n    }\n\n    private static Random random = new Random();\n\n    protected static String randomString() {\n        return Long.toString(random.nextLong(), 36);\n    }\n\n    String boundary = \"---------------------------\" + randomString() + randomString() + randomString();\n\n    private void boundary() throws IOException {\n        write(\"--\");\n        write(boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request on a freshly opened URLConnection\n     *\n     * @param connection an already open URL connection\n     * @throws IOException\n     */\n    public ClientHttpRequest(URLConnection connection) throws IOException {\n        this.connection = connection;\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL\n     *\n     * @param url the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(URL url) throws IOException {\n        this(url.openConnection());\n    }\n\n    /**\n     * Creates a new multipart POST HTTP request for a specified URL string\n     *\n     * @param urlString the string representation of the URL to send request to\n     * @throws IOException\n     */\n    public ClientHttpRequest(String urlString) throws IOException {\n        this(new URL(urlString));\n    }\n\n    private void postCookies() {\n        StringBuffer cookieList = new StringBuffer();\n        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) (i.next());\n            cookieList.append(entry.getKey().toString() + \"=\" + entry.getValue());\n            if (i.hasNext()) {\n                cookieList.append(\"; \");\n            }\n        }\n        if (cookieList.length() > 0) {\n            connection.setRequestProperty(\"Cookie\", cookieList.toString());\n        }\n    }\n\n    /**\n     * adds a cookie to the requst\n     * @param name cookie name\n     * @param value cookie value\n     * @throws IOException\n     */\n    public void setCookie(String name, String value) throws IOException {\n        cookies.put(name, value);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies the cookie \"name-to-value\" map\n     * @throws IOException\n     */\n    public void setCookies(Map cookies) throws IOException {\n        if (cookies == null)\n            return;\n        this.cookies.putAll(cookies);\n    }\n\n    /**\n     * adds cookies to the request\n     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)\n     * @throws IOException\n     */\n    public void setCookies(String[] cookies) throws IOException {\n        if (cookies == null)\n            return;\n        for (int i = 0; i < cookies.length - 1; i += 2) {\n            setCookie(cookies[i], cookies[i + 1]);\n        }\n    }\n\n    private void writeName(String name) throws IOException {\n        newline();\n        write(\"Content-Disposition: form-data; name=\\\"\");\n        write(name);\n        write('\"');\n    }\n\n    /**\n     * adds a string parameter to the request\n     * @param name parameter name\n     * @param value parameter value\n     * @throws IOException\n     */\n    public void setParameter(String name, String value) throws IOException {\n        boundary();\n        writeName(name);\n        newline();\n        newline();\n        writeln(value);\n    }\n\n    private static void pipe(InputStream in, OutputStream out) throws IOException {\n        byte[] buf = new byte[500000];\n        int nread;\n        int navailable;\n        int total = 0;\n        synchronized (in) {\n            while ((nread = in.read(buf, 0, buf.length)) >= 0) {\n                out.write(buf, 0, nread);\n                total += nread;\n            }\n        }\n        out.flush();\n        buf = null;\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param filename the name of the file\n     * @param is input stream to read the contents of the file from\n     * @throws IOException\n     */\n    public void setParameter(String name, String filename, InputStream is) throws IOException {\n        boundary();\n        writeName(name);\n        write(\"; filename=\\\"\");\n        write(filename);\n        write('\"');\n        newline();\n        write(\"Content-Type: \");\n        String type = connection.guessContentTypeFromName(filename);\n        if (type == null)\n            type = \"application/octet-stream\";\n        writeln(type);\n        newline();\n        pipe(is, os);\n        newline();\n    }\n\n    /**\n     * adds a file parameter to the request\n     * @param name parameter name\n     * @param file the file to upload\n     * @throws IOException\n     */\n    public void setParameter(String name, File file) throws IOException {\n        setParameter(name, file.getPath(), new FileInputStream(file));\n    }\n\n    /**\n     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request\n     * @param name parameter name\n     * @param object parameter value, a File or anything else that can be stringified\n     * @throws IOException\n     */\n    public void setParameter(String name, Object object) throws IOException {\n        if (object instanceof File) {\n            setParameter(name, (File) object);\n        } else {\n            setParameter(name, object.toString());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters \"name-to-value\" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Map parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) i.next();\n            setParameter(entry.getKey().toString(), entry.getValue());\n        }\n    }\n\n    /**\n     * adds parameters to the request\n     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request\n     * @throws IOException\n     */\n    public void setParameters(Object[] parameters) throws IOException {\n        if (parameters == null)\n            return;\n        for (int i = 0; i < parameters.length - 1; i += 2) {\n            setParameter(parameters[i].toString(), parameters[i + 1]);\n        }\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added\n     * @return input stream with the server response\n     * @throws IOException\n     */\n    public InputStream post() throws IOException {\n        boundary();\n        writeln(\"--\");\n        os.close();\n        return connection.getInputStream();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Map parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public InputStream post(Object[] parameters) throws IOException {\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(Map cookies, Map parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     * @see setCookies\n     */\n    public InputStream post(String[] cookies, Object[] parameters) throws IOException {\n        setCookies(cookies);\n        setParameters(parameters);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name, Object value) throws IOException {\n        setParameter(name, value);\n        return post();\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to the server, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        setParameter(name1, value1);\n        return post(name2, value2, name3, value3, name4, value4);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with parameters that are passed in the argument\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * posts a new request to specified URL, with cookies and parameters that are passed in the argument\n     * @param cookies request cookies\n     * @param parameters request parameters\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setCookies\n     * @see setParameters\n     */\n    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {\n        return new ClientHttpRequest(url).post(cookies, parameters);\n    }\n\n    /**\n     * post the POST request specified URL, with the specified parameter\n     * @param name parameter name\n     * @param value parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);\n    }\n\n    /**\n     * post the POST request to specified URL, with the specified parameters\n     * @param name1 first parameter name\n     * @param value1 first parameter value\n     * @param name2 second parameter name\n     * @param value2 second parameter value\n     * @param name3 third parameter name\n     * @param value3 third parameter value\n     * @param name4 fourth parameter name\n     * @param value4 fourth parameter value\n     * @return input stream with the server response\n     * @throws IOException\n     * @see setParameter\n     */\n    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {\n        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequestTest16.java",
		"test_prompt": "// ClientHttpRequestTest16.java\npackage com.browsersoft.servlet.util;\n\nimport java.net.URLConnection;\nimport java.net.URL;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.Random;\nimport java.io.OutputStream;\nimport java.io.FileInputStream;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientHttpRequest}.\n* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object, String, Object)} method.\n*/\nclass ClientHttpRequestTest16 {"
	},
	{
		"original_code": "// HL7DataTypeMapImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7DataType;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypeMap;\nimport java.util.HashMap;\n\npublic class HL7DataTypeMapImpl implements HL7DataTypeMap {\n\n    private HashMap map;\n\n    public HL7DataTypeMapImpl() {\n        map = new HashMap();\n    }\n\n    public int size() {\n        return map.size();\n    }\n\n    public String[] getTypeIds() {\n        Object[] keysAsObjects = map.keySet().toArray();\n        String[] keysAsString = new String[keysAsObjects.length];\n        for (int i = 0; i < keysAsObjects.length; i++) {\n            keysAsString[i] = (String) keysAsObjects[i];\n        }\n        return keysAsString;\n    }\n\n    public HL7DataType getItem(String type) {\n        if (map.containsKey(type)) {\n            return (HL7DataType) map.get(type);\n        } else {\n            return null;\n        }\n    }\n\n    public void addItem(HL7DataType value) {\n        map.put(value.getID(), value);\n    }\n\n    public void removeItem(String type) {\n        if (map.containsKey(type)) {\n            map.remove(type);\n        }\n    }\n\n    public void clearAll() {\n        map.clear();\n    }\n\n    public String toString() {\n        String ret = \" ******************************************\\n\";\n        ret += \" DATA TYPES\\n\";\n        ret += \" ******************************************\\n\";\n        String[] keys = getTypeIds();\n        for (int i = 0; i < keys.length; i++) {\n            ret += getItem(keys[i]).toString();\n        }\n        ret += \" ******************************************\\n\";\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7DataTypeMapImplTest.java",
		"test_prompt": "// HL7DataTypeMapImplTest.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7DataType;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypeMap;\nimport java.util.HashMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7DataTypeMapImpl}.\n* It contains ten unit test cases for the {@link HL7DataTypeMapImpl#size()} method.\n*/\nclass HL7DataTypeMapImplTest {"
	},
	{
		"original_code": "// HL7TableItemMapImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7TableItem;\nimport com.browsersoft.openhre.hl7.api.config.HL7TableItemMap;\nimport java.util.HashMap;\n\npublic class HL7TableItemMapImpl implements HL7TableItemMap {\n\n    private HashMap map;\n\n    public HL7TableItemMapImpl() {\n        map = new HashMap();\n    }\n\n    public int size() {\n        return map.size();\n    }\n\n    public String[] getItemsValues() {\n        Object[] keysAsObjects = map.keySet().toArray();\n        String[] keysAsString = new String[keysAsObjects.length];\n        for (int i = 0; i < keysAsObjects.length; i++) {\n            keysAsString[i] = (String) keysAsObjects[i];\n        }\n        return keysAsString;\n    }\n\n    public HL7TableItem getItem(String type) {\n        if (map.containsKey(type)) {\n            return (HL7TableItem) map.get(type);\n        } else {\n            return null;\n        }\n    }\n\n    public void addItem(HL7TableItem value) {\n        map.put(value.getValue(), value);\n    }\n\n    public void removeItem(String type) {\n        if (map.containsKey(type)) {\n            map.remove(type);\n        }\n    }\n\n    public void clearAll() {\n        map.clear();\n    }\n\n    public String toString() {\n        String ret = \" ******************************************\\n\";\n        ret += \" ITEMS\\n\";\n        ret += \" ******************************************\\n\";\n        String[] keys = getItemsValues();\n        for (int i = 0; i < keys.length; i++) {\n            ret += getItem(keys[i]).toString() + \"\\n\";\n        }\n        ret += \" ******************************************\\n\";\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7TableItemMapImplTest.java",
		"test_prompt": "// HL7TableItemMapImplTest.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7TableItem;\nimport com.browsersoft.openhre.hl7.api.config.HL7TableItemMap;\nimport java.util.HashMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7TableItemMapImpl}.\n* It contains ten unit test cases for the {@link HL7TableItemMapImpl#size()} method.\n*/\nclass HL7TableItemMapImplTest {"
	},
	{
		"original_code": "// DOMUtils.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport org.apache.xerces.parsers.DOMParser;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.InputSource;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class DOMUtils {\n\n    public static Document parseFile(String sPath) throws IOException, SAXException {\n        DOMParser parser = new DOMParser();\n        parser.parse(sPath);\n        return parser.getDocument();\n    }\n\n    public static Document parseInputStream(InputStream stream) throws IOException, SAXException {\n        DOMParser parser = new DOMParser();\n        parser.parse(new InputSource(stream));\n        return parser.getDocument();\n    }\n\n    public static String getParameter(Node node, String name) {\n        NamedNodeMap attributes = node.getAttributes();\n        Node attribute = attributes.getNamedItem(name);\n        if (attribute != null) {\n            return attribute.getNodeValue().trim();\n        } else {\n            return \"\";\n        }\n    }\n\n    public static String getTextContent(Node node) {\n        NodeList children = node.getChildNodes();\n        String ret = \"\";\n        if (children != null) {\n            for (int i = 0; i < children.getLength(); i++) {\n                if (children.item(i).getNodeType() == Node.TEXT_NODE) {\n                    ret += children.item(i).getNodeValue();\n                }\n            }\n        }\n        ret = ret.trim();\n        ret = ret.replace('\\n', ' ');\n        ret = ret.replace('\\r', ' ');\n        ret = ret.replace('\\t', ' ');\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/DOMUtilsTest0.java",
		"test_prompt": "// DOMUtilsTest0.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport org.apache.xerces.parsers.DOMParser;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.InputSource;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DOMUtils}.\n* It contains ten unit test cases for the {@link DOMUtils#parseFile(String)} method.\n*/\nclass DOMUtilsTest0 {"
	},
	{
		"original_code": "// DOMUtils.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport org.apache.xerces.parsers.DOMParser;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.InputSource;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class DOMUtils {\n\n    public static Document parseFile(String sPath) throws IOException, SAXException {\n        DOMParser parser = new DOMParser();\n        parser.parse(sPath);\n        return parser.getDocument();\n    }\n\n    public static Document parseInputStream(InputStream stream) throws IOException, SAXException {\n        DOMParser parser = new DOMParser();\n        parser.parse(new InputSource(stream));\n        return parser.getDocument();\n    }\n\n    public static String getParameter(Node node, String name) {\n        NamedNodeMap attributes = node.getAttributes();\n        Node attribute = attributes.getNamedItem(name);\n        if (attribute != null) {\n            return attribute.getNodeValue().trim();\n        } else {\n            return \"\";\n        }\n    }\n\n    public static String getTextContent(Node node) {\n        NodeList children = node.getChildNodes();\n        String ret = \"\";\n        if (children != null) {\n            for (int i = 0; i < children.getLength(); i++) {\n                if (children.item(i).getNodeType() == Node.TEXT_NODE) {\n                    ret += children.item(i).getNodeValue();\n                }\n            }\n        }\n        ret = ret.trim();\n        ret = ret.replace('\\n', ' ');\n        ret = ret.replace('\\r', ' ');\n        ret = ret.replace('\\t', ' ');\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/DOMUtilsTest1.java",
		"test_prompt": "// DOMUtilsTest1.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport org.apache.xerces.parsers.DOMParser;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.InputSource;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DOMUtils}.\n* It contains ten unit test cases for the {@link DOMUtils#parseInputStream(InputStream)} method.\n*/\nclass DOMUtilsTest1 {"
	},
	{
		"original_code": "// DOMUtils.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport org.apache.xerces.parsers.DOMParser;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.InputSource;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class DOMUtils {\n\n    public static Document parseFile(String sPath) throws IOException, SAXException {\n        DOMParser parser = new DOMParser();\n        parser.parse(sPath);\n        return parser.getDocument();\n    }\n\n    public static Document parseInputStream(InputStream stream) throws IOException, SAXException {\n        DOMParser parser = new DOMParser();\n        parser.parse(new InputSource(stream));\n        return parser.getDocument();\n    }\n\n    public static String getParameter(Node node, String name) {\n        NamedNodeMap attributes = node.getAttributes();\n        Node attribute = attributes.getNamedItem(name);\n        if (attribute != null) {\n            return attribute.getNodeValue().trim();\n        } else {\n            return \"\";\n        }\n    }\n\n    public static String getTextContent(Node node) {\n        NodeList children = node.getChildNodes();\n        String ret = \"\";\n        if (children != null) {\n            for (int i = 0; i < children.getLength(); i++) {\n                if (children.item(i).getNodeType() == Node.TEXT_NODE) {\n                    ret += children.item(i).getNodeValue();\n                }\n            }\n        }\n        ret = ret.trim();\n        ret = ret.replace('\\n', ' ');\n        ret = ret.replace('\\r', ' ');\n        ret = ret.replace('\\t', ' ');\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/DOMUtilsTest2.java",
		"test_prompt": "// DOMUtilsTest2.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport org.apache.xerces.parsers.DOMParser;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.InputSource;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DOMUtils}.\n* It contains ten unit test cases for the {@link DOMUtils#getParameter(Node, String)} method.\n*/\nclass DOMUtilsTest2 {"
	},
	{
		"original_code": "// DOMUtils.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport org.apache.xerces.parsers.DOMParser;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.InputSource;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class DOMUtils {\n\n    public static Document parseFile(String sPath) throws IOException, SAXException {\n        DOMParser parser = new DOMParser();\n        parser.parse(sPath);\n        return parser.getDocument();\n    }\n\n    public static Document parseInputStream(InputStream stream) throws IOException, SAXException {\n        DOMParser parser = new DOMParser();\n        parser.parse(new InputSource(stream));\n        return parser.getDocument();\n    }\n\n    public static String getParameter(Node node, String name) {\n        NamedNodeMap attributes = node.getAttributes();\n        Node attribute = attributes.getNamedItem(name);\n        if (attribute != null) {\n            return attribute.getNodeValue().trim();\n        } else {\n            return \"\";\n        }\n    }\n\n    public static String getTextContent(Node node) {\n        NodeList children = node.getChildNodes();\n        String ret = \"\";\n        if (children != null) {\n            for (int i = 0; i < children.getLength(); i++) {\n                if (children.item(i).getNodeType() == Node.TEXT_NODE) {\n                    ret += children.item(i).getNodeValue();\n                }\n            }\n        }\n        ret = ret.trim();\n        ret = ret.replace('\\n', ' ');\n        ret = ret.replace('\\r', ' ');\n        ret = ret.replace('\\t', ' ');\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/DOMUtilsTest3.java",
		"test_prompt": "// DOMUtilsTest3.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport org.apache.xerces.parsers.DOMParser;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.InputSource;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DOMUtils}.\n* It contains ten unit test cases for the {@link DOMUtils#getTextContent(Node)} method.\n*/\nclass DOMUtilsTest3 {"
	},
	{
		"original_code": "// HL7MessageGroupImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7MessageGroup;\nimport com.browsersoft.openhre.hl7.api.config.HL7MessageGroupItem;\nimport java.util.ArrayList;\n\npublic class HL7MessageGroupImpl extends HL7MessageGroupItemImpl implements HL7MessageGroup {\n\n    private ArrayList items;\n\n    private String additional = \"\";\n\n    public HL7MessageGroupImpl() {\n        items = new ArrayList();\n    }\n\n    public int getType() {\n        return HL7MessageGroupItem.ITEM_TYPE_GROUP;\n    }\n\n    public String getAdditional() {\n        return additional;\n    }\n\n    public void setAdditional(String additional) {\n        this.additional = additional;\n    }\n\n    public int size() {\n        return items.size();\n    }\n\n    public void addItem(HL7MessageGroupItem item) {\n        items.add(item);\n    }\n\n    public HL7MessageGroupItem getItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            return (HL7MessageGroupItem) items.get(index);\n        } else {\n            return null;\n        }\n    }\n\n    public void setItem(int index, HL7MessageGroupItem value) {\n        if (index >= 0 && index < items.size()) {\n            items.set(index, value);\n        }\n    }\n\n    public void removeItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            items.remove(index);\n        }\n    }\n\n    public void clearAll() {\n        items.clear();\n    }\n\n    public String toString() {\n        String ret = \"group \";\n        ret += \" repeatable =\\\"\" + repeatable + \"\\\"\";\n        ret += \" required =\\\"\" + required + \"\\\"\";\n        for (int i = 0; i < size(); i++) {\n            ret += \"     \" + getItem(i).toString() + \"\\n\";\n        }\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7MessageGroupImplTest.java",
		"test_prompt": "// HL7MessageGroupImplTest.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7MessageGroup;\nimport com.browsersoft.openhre.hl7.api.config.HL7MessageGroupItem;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7MessageGroupImpl}.\n* It contains ten unit test cases for the {@link HL7MessageGroupImpl#size()} method.\n*/\nclass HL7MessageGroupImplTest {"
	},
	{
		"original_code": "// HL7PatternsForCatchValuesImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7PatternsForCatchValues;\nimport java.util.HashMap;\n\npublic class HL7PatternsForCatchValuesImpl implements HL7PatternsForCatchValues {\n\n    private HashMap map;\n\n    public HL7PatternsForCatchValuesImpl() {\n        map = new HashMap();\n    }\n\n    public int size() {\n        return map.size();\n    }\n\n    public boolean patternExist(String pattern) {\n        return map.containsKey(pattern);\n    }\n\n    public String[] getPatterns() {\n        Object[] keysAsObjects = map.keySet().toArray();\n        String[] keysAsString = new String[keysAsObjects.length];\n        for (int i = 0; i < keysAsObjects.length; i++) {\n            keysAsString[i] = (String) keysAsObjects[i];\n        }\n        return keysAsString;\n    }\n\n    public void clearAll() {\n        map.clear();\n    }\n\n    public void addPattern(String pattern) {\n        map.put(pattern, \"\");\n    }\n\n    public void setValueForPattern(String pattern, String value) {\n        if (map.containsKey(pattern)) {\n            //map.remove(pattern);\n            map.put(pattern, value);\n        }\n    }\n\n    public String getValueForPattern(String pattern) {\n        if (map.containsKey(pattern)) {\n            return (String) map.get(pattern);\n        } else {\n            return \"\";\n        }\n    }\n\n    public void clearPatternValues() {\n        String[] patterns = getPatterns();\n        for (int i = 0; i < patterns.length; i++) {\n            setValueForPattern(patterns[i], \"\");\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7PatternsForCatchValuesImplTest0.java",
		"test_prompt": "// HL7PatternsForCatchValuesImplTest0.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7PatternsForCatchValues;\nimport java.util.HashMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7PatternsForCatchValuesImpl}.\n* It contains ten unit test cases for the {@link HL7PatternsForCatchValuesImpl#size()} method.\n*/\nclass HL7PatternsForCatchValuesImplTest0 {"
	},
	{
		"original_code": "// HL7PatternsForCatchValuesImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7PatternsForCatchValues;\nimport java.util.HashMap;\n\npublic class HL7PatternsForCatchValuesImpl implements HL7PatternsForCatchValues {\n\n    private HashMap map;\n\n    public HL7PatternsForCatchValuesImpl() {\n        map = new HashMap();\n    }\n\n    public int size() {\n        return map.size();\n    }\n\n    public boolean patternExist(String pattern) {\n        return map.containsKey(pattern);\n    }\n\n    public String[] getPatterns() {\n        Object[] keysAsObjects = map.keySet().toArray();\n        String[] keysAsString = new String[keysAsObjects.length];\n        for (int i = 0; i < keysAsObjects.length; i++) {\n            keysAsString[i] = (String) keysAsObjects[i];\n        }\n        return keysAsString;\n    }\n\n    public void clearAll() {\n        map.clear();\n    }\n\n    public void addPattern(String pattern) {\n        map.put(pattern, \"\");\n    }\n\n    public void setValueForPattern(String pattern, String value) {\n        if (map.containsKey(pattern)) {\n            //map.remove(pattern);\n            map.put(pattern, value);\n        }\n    }\n\n    public String getValueForPattern(String pattern) {\n        if (map.containsKey(pattern)) {\n            return (String) map.get(pattern);\n        } else {\n            return \"\";\n        }\n    }\n\n    public void clearPatternValues() {\n        String[] patterns = getPatterns();\n        for (int i = 0; i < patterns.length; i++) {\n            setValueForPattern(patterns[i], \"\");\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7PatternsForCatchValuesImplTest1.java",
		"test_prompt": "// HL7PatternsForCatchValuesImplTest1.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7PatternsForCatchValues;\nimport java.util.HashMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7PatternsForCatchValuesImpl}.\n* It contains ten unit test cases for the {@link HL7PatternsForCatchValuesImpl#patternExist(String)} method.\n*/\nclass HL7PatternsForCatchValuesImplTest1 {"
	},
	{
		"original_code": "// HL7MessageMapImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Message;\nimport com.browsersoft.openhre.hl7.api.config.HL7MessageMap;\nimport java.util.HashMap;\n\npublic class HL7MessageMapImpl implements HL7MessageMap {\n\n    private HashMap map;\n\n    public HL7MessageMapImpl() {\n        map = new HashMap();\n    }\n\n    public int size() {\n        return map.size();\n    }\n\n    public String[] getMessageIds() {\n        Object[] keysAsObjects = map.keySet().toArray();\n        String[] keysAsString = new String[keysAsObjects.length];\n        for (int i = 0; i < keysAsObjects.length; i++) {\n            keysAsString[i] = (String) keysAsObjects[i];\n        }\n        return keysAsString;\n    }\n\n    public HL7Message getItem(String type) {\n        if (map.containsKey(type)) {\n            return (HL7Message) map.get(type);\n        } else {\n            return null;\n        }\n    }\n\n    public void addItem(HL7Message value) {\n        map.put(value.getID(), value);\n    }\n\n    public void removeItem(String type) {\n        if (map.containsKey(type)) {\n            map.remove(type);\n        }\n    }\n\n    public void clearAll() {\n        map.clear();\n    }\n\n    public String toString() {\n        String ret = \" ******************************************\\n\";\n        ret += \" MESSAGES\\n\";\n        ret += \" ******************************************\\n\";\n        String[] keys = getMessageIds();\n        for (int i = 0; i < keys.length; i++) {\n            ret += getItem(keys[i]).toString();\n        }\n        ret += \" ******************************************\\n\";\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7MessageMapImplTest.java",
		"test_prompt": "// HL7MessageMapImplTest.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Message;\nimport com.browsersoft.openhre.hl7.api.config.HL7MessageMap;\nimport java.util.HashMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7MessageMapImpl}.\n* It contains ten unit test cases for the {@link HL7MessageMapImpl#size()} method.\n*/\nclass HL7MessageMapImplTest {"
	},
	{
		"original_code": "// HL7MessageGroupItemImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7MessageGroupItem;\n\npublic abstract class HL7MessageGroupItemImpl implements HL7MessageGroupItem {\n\n    protected boolean repeatable;\n\n    protected boolean required;\n\n    public boolean isRepeatable() {\n        return repeatable;\n    }\n\n    public void setRepeatable(boolean repeatable) {\n        this.repeatable = repeatable;\n    }\n\n    public boolean isRequired() {\n        return required;\n    }\n\n    public void setRequired(boolean required) {\n        this.required = required;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7MessageGroupItemImplTest0.java",
		"test_prompt": "// HL7MessageGroupItemImplTest0.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7MessageGroupItem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7MessageGroupItemImpl}.\n* It contains ten unit test cases for the {@link HL7MessageGroupItemImpl#isRepeatable()} method.\n*/\nclass HL7MessageGroupItemImplTest0 {"
	},
	{
		"original_code": "// HL7MessageGroupItemImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7MessageGroupItem;\n\npublic abstract class HL7MessageGroupItemImpl implements HL7MessageGroupItem {\n\n    protected boolean repeatable;\n\n    protected boolean required;\n\n    public boolean isRepeatable() {\n        return repeatable;\n    }\n\n    public void setRepeatable(boolean repeatable) {\n        this.repeatable = repeatable;\n    }\n\n    public boolean isRequired() {\n        return required;\n    }\n\n    public void setRequired(boolean required) {\n        this.required = required;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7MessageGroupItemImplTest1.java",
		"test_prompt": "// HL7MessageGroupItemImplTest1.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7MessageGroupItem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7MessageGroupItemImpl}.\n* It contains ten unit test cases for the {@link HL7MessageGroupItemImpl#isRequired()} method.\n*/\nclass HL7MessageGroupItemImplTest1 {"
	},
	{
		"original_code": "// HL7DataTypePartListImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypePartList;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypePart;\nimport java.util.ArrayList;\n\npublic class HL7DataTypePartListImpl implements HL7DataTypePartList {\n\n    private ArrayList items;\n\n    public HL7DataTypePartListImpl() {\n        items = new ArrayList();\n    }\n\n    public int size() {\n        return items.size();\n    }\n\n    public void addItem(HL7DataTypePart item) {\n        items.add(item);\n    }\n\n    public HL7DataTypePart getItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            return (HL7DataTypePart) items.get(index);\n        } else {\n            return null;\n        }\n    }\n\n    public void setItem(int index, HL7DataTypePart value) {\n        if (index >= 0 && index < items.size()) {\n            items.set(index, value);\n        }\n    }\n\n    public void removeItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            items.remove(index);\n        }\n    }\n\n    public void clearAll() {\n        items.clear();\n    }\n\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < size(); i++) {\n            buffer.append(getItem(i).toString());\n            buffer.append(\"\\n\");\n        }\n        return buffer.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7DataTypePartListImplTest.java",
		"test_prompt": "// HL7DataTypePartListImplTest.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypePartList;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypePart;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7DataTypePartListImpl}.\n* It contains ten unit test cases for the {@link HL7DataTypePartListImpl#size()} method.\n*/\nclass HL7DataTypePartListImplTest {"
	},
	{
		"original_code": "// HL7FieldImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Field;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataType;\nimport com.browsersoft.openhre.hl7.api.config.HL7Table;\nimport com.browsersoft.openhre.hl7.api.config.HL7Configuration;\nimport com.browsersoft.openhre.hl7.api.config.HL7FieldDependingProcessor;\nimport com.browsersoft.openhre.hl7.api.parse.HL7CheckerState;\nimport com.browsersoft.openhre.hl7.api.parse.ParserException;\n\npublic class HL7FieldImpl implements HL7Field {\n\n    private String sequential;\n\n    private String reference;\n\n    private String description;\n\n    private String dataTypeID;\n\n    private HL7DataType dataType;\n\n    private HL7FieldDependingProcessor dependingProcessor;\n\n    public HL7FieldDependingProcessor getDependingProcessor() {\n        return dependingProcessor;\n    }\n\n    public void setDependingProcessor(HL7FieldDependingProcessor dependingProcessor) {\n        this.dependingProcessor = dependingProcessor;\n    }\n\n    private int dependingType;\n\n    private int length;\n\n    private int required;\n\n    private boolean repeatable;\n\n    private String table;\n\n    private HL7Table tableObject;\n\n    public HL7FieldImpl() {\n        sequential = \"\";\n        reference = \"\";\n        description = \"\";\n        dataTypeID = \"\";\n        table = \"\";\n    }\n\n    public int getDependingType() {\n        return dependingType;\n    }\n\n    public void setDependingType(int dependingType) {\n        this.dependingType = dependingType;\n    }\n\n    public String getSequential() {\n        return sequential;\n    }\n\n    public void setSequential(String sequential) {\n        this.sequential = sequential;\n    }\n\n    public String getReference() {\n        return reference;\n    }\n\n    public void setReference(String reference) {\n        this.reference = reference;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public String getDataTypeID() {\n        return dataTypeID;\n    }\n\n    public void setDataTypeID(String dataTypeID) {\n        this.dataTypeID = dataTypeID;\n    }\n\n    public HL7DataType getDataType() {\n        return dataType;\n    }\n\n    public void setDataType(HL7DataType dataType) {\n        this.dataType = dataType;\n    }\n\n    public int getMaximumLength() {\n        return length;\n    }\n\n    public void setMaximumLength(int length) {\n        this.length = length;\n    }\n\n    public int getRequired() {\n        return required;\n    }\n\n    public void setRequired(int required) {\n        this.required = required;\n    }\n\n    public boolean isRepeatable() {\n        return repeatable;\n    }\n\n    public void setRepeatable(boolean repeatable) {\n        this.repeatable = repeatable;\n    }\n\n    public String getTable() {\n        return table;\n    }\n\n    public void setTable(String table) {\n        this.table = table;\n    }\n\n    public HL7Table getTableObject() {\n        return tableObject;\n    }\n\n    public void setTableObject(HL7Table tableObject) {\n        this.tableObject = tableObject;\n    }\n\n    public HL7DataType getActualDataType(HL7Configuration configuration, HL7CheckerState state) throws ParserException {\n        switch(dependingType) {\n            case HL7Field.TYPE_DEPENDING_NORMAL:\n                return configuration.getDataTypes().getItem(dataTypeID);\n            case HL7Field.TYPE_DEPENDING_REPEATABLE:\n            case HL7Field.TYPE_DEPENDING_GIVEN:\n                return dependingProcessor.getDataTypeForSituation(state);\n        }\n        return null;\n    }\n\n    public String toString() {\n        String ret = \" field\";\n        if (!sequential.equals(\"\")) {\n            ret += \" sequential=\\\"\" + sequential + \"\\\"\";\n        }\n        if (!reference.equals(\"\")) {\n            ret += \" reference=\\\"\" + reference + \"\\\"\";\n        }\n        if (!dataTypeID.equals(\"\")) {\n            ret += \" dataTypeID=\\\"\" + dataTypeID + \"\\\"\";\n        }\n        ret += \" length=\\\"\" + length + \"\\\"\";\n        ret += \" required=\\\"\";\n        switch(required) {\n            case REQUIRED_R:\n                ret += \"R\";\n                break;\n            case REQUIRED_O:\n                ret += \"O\";\n                break;\n            case REQUIRED_C:\n                ret += \"C\";\n                break;\n            case REQUIRED_X:\n                ret += \"X\";\n                break;\n            case REQUIRED_B:\n                ret += \"B\";\n                break;\n        }\n        ret += \"\\\"\";\n        ret += \" repeatable=\\\"\" + repeatable + \"\\\"\";\n        if (!table.equals(\"\")) {\n            ret += \" table=\\\"\" + table + \"\\\"\";\n        }\n        if (!description.equals(\"\")) {\n            ret += \" description=\\\"\" + description + \"\\\"\";\n        }\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7FieldImplTest.java",
		"test_prompt": "// HL7FieldImplTest.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Field;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataType;\nimport com.browsersoft.openhre.hl7.api.config.HL7Table;\nimport com.browsersoft.openhre.hl7.api.config.HL7Configuration;\nimport com.browsersoft.openhre.hl7.api.config.HL7FieldDependingProcessor;\nimport com.browsersoft.openhre.hl7.api.parse.HL7CheckerState;\nimport com.browsersoft.openhre.hl7.api.parse.ParserException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7FieldImpl}.\n* It contains ten unit test cases for the {@link HL7FieldImpl#isRepeatable()} method.\n*/\nclass HL7FieldImplTest {"
	},
	{
		"original_code": "// HL7TableMapImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Table;\nimport com.browsersoft.openhre.hl7.api.config.HL7TableMap;\nimport java.util.HashMap;\n\npublic class HL7TableMapImpl implements HL7TableMap {\n\n    private HashMap map;\n\n    public HL7TableMapImpl() {\n        map = new HashMap();\n    }\n\n    public int size() {\n        return map.size();\n    }\n\n    public String[] getTablesIds() {\n        Object[] keysAsObjects = map.keySet().toArray();\n        String[] keysAsString = new String[keysAsObjects.length];\n        for (int i = 0; i < keysAsObjects.length; i++) {\n            keysAsString[i] = (String) keysAsObjects[i];\n        }\n        return keysAsString;\n    }\n\n    public HL7Table getItem(String type) {\n        if (map.containsKey(type)) {\n            return (HL7Table) map.get(type);\n        } else {\n            return null;\n        }\n    }\n\n    public void addItem(HL7Table value) {\n        map.put(value.getID(), value);\n    }\n\n    public void removeItem(String type) {\n        if (map.containsKey(type)) {\n            map.remove(type);\n        }\n    }\n\n    public void clearAll() {\n        map.clear();\n    }\n\n    public String toString() {\n        String ret = \" ******************************************\\n\";\n        ret += \" TABLES\\n\";\n        ret += \" ******************************************\\n\";\n        String[] keys = getTablesIds();\n        for (int i = 0; i < keys.length; i++) {\n            ret += getItem(keys[i]).toString();\n        }\n        ret += \" ******************************************\\n\";\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7TableMapImplTest.java",
		"test_prompt": "// HL7TableMapImplTest.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Table;\nimport com.browsersoft.openhre.hl7.api.config.HL7TableMap;\nimport java.util.HashMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7TableMapImpl}.\n* It contains ten unit test cases for the {@link HL7TableMapImpl#size()} method.\n*/\nclass HL7TableMapImplTest {"
	},
	{
		"original_code": "// HL7VersionConfigurationMapImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Configuration;\nimport com.browsersoft.openhre.hl7.api.config.HL7VersionConfigurationMap;\nimport java.util.HashMap;\n\npublic class HL7VersionConfigurationMapImpl implements HL7VersionConfigurationMap {\n\n    private HashMap map;\n\n    public HL7VersionConfigurationMapImpl() {\n        map = new HashMap();\n    }\n\n    public int size() {\n        return map.size();\n    }\n\n    public String[] getConfigurationsKeys() {\n        Object[] keysAsObjects = map.keySet().toArray();\n        String[] keysAsString = new String[keysAsObjects.length];\n        for (int i = 0; i < keysAsObjects.length; i++) {\n            keysAsString[i] = (String) keysAsObjects[i];\n        }\n        return keysAsString;\n    }\n\n    public void clearAll() {\n        map.clear();\n    }\n\n    public void addConfiguration(String version, HL7Configuration configuration) {\n        map.put(version, configuration);\n    }\n\n    public HL7Configuration getSuitableConfiguration(String version) {\n        if (map.containsKey(version)) {\n            return (HL7Configuration) map.get(version);\n        } else {\n            return null;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7VersionConfigurationMapImplTest.java",
		"test_prompt": "// HL7VersionConfigurationMapImplTest.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Configuration;\nimport com.browsersoft.openhre.hl7.api.config.HL7VersionConfigurationMap;\nimport java.util.HashMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7VersionConfigurationMapImpl}.\n* It contains ten unit test cases for the {@link HL7VersionConfigurationMapImpl#size()} method.\n*/\nclass HL7VersionConfigurationMapImplTest {"
	},
	{
		"original_code": "// HL7SegmentMapImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Segment;\nimport com.browsersoft.openhre.hl7.api.config.HL7SegmentMap;\nimport java.util.HashMap;\n\npublic class HL7SegmentMapImpl implements HL7SegmentMap {\n\n    private HashMap map;\n\n    public HL7SegmentMapImpl() {\n        map = new HashMap();\n    }\n\n    public int size() {\n        return map.size();\n    }\n\n    public String[] getSegmentsIds() {\n        Object[] keysAsObjects = map.keySet().toArray();\n        String[] keysAsString = new String[keysAsObjects.length];\n        for (int i = 0; i < keysAsObjects.length; i++) {\n            keysAsString[i] = (String) keysAsObjects[i];\n        }\n        return keysAsString;\n    }\n\n    public HL7Segment getItem(String type) {\n        if (map.containsKey(type)) {\n            return (HL7Segment) map.get(type);\n        } else {\n            return null;\n        }\n    }\n\n    public void addItem(HL7Segment value) {\n        map.put(value.getID(), value);\n    }\n\n    public void removeItem(String type) {\n        if (map.containsKey(type)) {\n            map.remove(type);\n        }\n    }\n\n    public void clearAll() {\n        map.clear();\n    }\n\n    public String toString() {\n        String ret = \" ******************************************\\n\";\n        ret += \" SEGMENTS\\n\";\n        ret += \" ******************************************\\n\";\n        String[] keys = getSegmentsIds();\n        for (int i = 0; i < keys.length; i++) {\n            ret += getItem(keys[i]).toString() + \"\\n\";\n        }\n        ret += \" ******************************************\\n\";\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7SegmentMapImplTest.java",
		"test_prompt": "// HL7SegmentMapImplTest.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Segment;\nimport com.browsersoft.openhre.hl7.api.config.HL7SegmentMap;\nimport java.util.HashMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7SegmentMapImpl}.\n* It contains ten unit test cases for the {@link HL7SegmentMapImpl#size()} method.\n*/\nclass HL7SegmentMapImplTest {"
	},
	{
		"original_code": "// HL7FieldListImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Field;\nimport com.browsersoft.openhre.hl7.api.config.HL7FieldList;\nimport java.util.ArrayList;\n\npublic class HL7FieldListImpl implements HL7FieldList {\n\n    private ArrayList items;\n\n    public HL7FieldListImpl() {\n        items = new ArrayList();\n    }\n\n    public int size() {\n        return items.size();\n    }\n\n    public void addItem(HL7Field item) {\n        items.add(item);\n    }\n\n    public HL7Field getItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            return (HL7Field) items.get(index);\n        } else {\n            return null;\n        }\n    }\n\n    public void setItem(int index, HL7Field value) {\n        if (index >= 0 && index < items.size()) {\n            items.set(index, value);\n        }\n    }\n\n    public void removeItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            items.remove(index);\n        }\n    }\n\n    public void clearAll() {\n        items.clear();\n    }\n\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < size(); i++) {\n            buffer.append(getItem(i).toString());\n            buffer.append(\"\\n\");\n        }\n        return buffer.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/config/HL7FieldListImplTest.java",
		"test_prompt": "// HL7FieldListImplTest.java\npackage com.browsersoft.openhre.hl7.impl.config;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Field;\nimport com.browsersoft.openhre.hl7.api.config.HL7FieldList;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7FieldListImpl}.\n* It contains ten unit test cases for the {@link HL7FieldListImpl#size()} method.\n*/\nclass HL7FieldListImplTest {"
	},
	{
		"original_code": "// XMLUtils.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.parser;\n\nimport java.util.HashMap;\n\npublic class XMLUtils {\n\n    private static final String[] HTMLnames = { /*38*/\n    \"amp\", /*60*/\n    \"lt\", /*62*/\n    \"gt\", /*34*/\n    \"quot\" };\n\n    private static final int[] HTMLcodes = { 38, /* \"amp\" */\n    60, /* \"lt\" */\n    62, /* \"gt\" */\n    34 /* \"quot\" */\n    };\n\n    private HashMap entity2codes = new HashMap();\n\n    private HashMap codes2entity = new HashMap();\n\n    public XMLUtils() {\n        for (int i = 0; i < HTMLnames.length; i++) {\n            entity2codes.put(HTMLnames[i], new Integer(HTMLcodes[i]));\n            codes2entity.put(new Integer(HTMLcodes[i]), HTMLnames[i]);\n        }\n    }\n\n    public String escapeString(String text) {\n        StringBuffer buffer = new StringBuffer();\n        String esc = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            esc = \"\";\n            char c = text.charAt(i);\n            if ((c > 0xfffd) || ((c < 0x0020) && !((c == 0x0009) || (c == 0x000A) || (c == 0x000D)))) {\n                esc = null;\n            } else {\n                Integer code = new Integer(c);\n                if (codes2entity.containsKey(code)) {\n                    esc = (String) codes2entity.get(new Integer(c));\n                }\n            }\n            // else escape with numeric char refs\n            if (esc.equals(\"\")) {\n                buffer.append(c);\n            } else if (esc == null) {\n                //nothing  - no character\n            } else {\n                buffer.append('&');\n                buffer.append(esc);\n                buffer.append(';');\n            }\n        }\n        return buffer.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/parser/XMLUtilsTest.java",
		"test_prompt": "// XMLUtilsTest.java\npackage com.browsersoft.openhre.hl7.impl.parser;\n\nimport java.util.HashMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XMLUtils}.\n* It contains ten unit test cases for the {@link XMLUtils#escapeString(String)} method.\n*/\nclass XMLUtilsTest {"
	},
	{
		"original_code": "// HL7CheckerStateImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.parser;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Configuration;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataType;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypePart;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypePartSubPart;\nimport com.browsersoft.openhre.hl7.api.config.HL7Field;\nimport com.browsersoft.openhre.hl7.api.config.HL7FieldList;\nimport com.browsersoft.openhre.hl7.api.config.HL7Segment;\nimport com.browsersoft.openhre.hl7.api.parse.HL7Checker;\nimport com.browsersoft.openhre.hl7.api.parse.HL7CheckerHandler;\nimport com.browsersoft.openhre.hl7.api.parse.HL7CheckerState;\nimport com.browsersoft.openhre.hl7.api.parse.ParserException;\nimport com.browsersoft.openhre.hl7.api.regular.MessageTracer;\n\npublic class HL7CheckerStateImpl implements HL7CheckerState {\n\n    private HL7CheckerHandler handler;\n\n    //segment\n    private HL7Segment actualSegment;\n\n    private HL7Configuration configuration;\n\n    //field\n    private HL7Field actualField;\n\n    private int actualFieldPosition;\n\n    private int actualFieldRepeatableIndex;\n\n    private int actualFieldLength = 0;\n\n    //part\n    private HL7DataType actualDataType;\n\n    private int actualDataTypePartsPossition = 0;\n\n    private HL7DataType actualComponentDataType;\n\n    private int actualDataTypeSubPartsPossition = 0;\n\n    private HL7DataType actualSubComponentDataType;\n\n    private boolean seriousError;\n\n    private MessageTracer messageTracer;\n\n    public boolean isSeriousError() {\n        return seriousError;\n    }\n\n    public void setSeriousError(boolean seriousError) {\n        this.seriousError = seriousError;\n    }\n\n    public MessageTracer getMessageTracer() {\n        return messageTracer;\n    }\n\n    public void setMessageTracer(MessageTracer messageTracer) {\n        this.messageTracer = messageTracer;\n    }\n\n    /* Subcomponents function */\n    public void eventBeginSubComponent() {\n        if (actualComponentDataType == null) {\n            return;\n        }\n        if (actualDataTypeSubPartsPossition >= actualComponentDataType.getParts().size()) {\n            generateError(27, actualComponentDataType.getID());\n            setSeriousError(true);\n            return;\n        }\n        HL7DataTypePart part = actualComponentDataType.getParts().getItem(actualDataTypeSubPartsPossition);\n        if (part.getType() == HL7DataTypePart.PART_TYPE_PRIMITIVE) {\n            // only for single subcomponent\n            actualSubComponentDataType = actualComponentDataType;\n            return;\n        }\n        String idOfSubpart = ((HL7DataTypePartSubPart) part).getSubPartID();\n        actualSubComponentDataType = configuration.getDataTypes().getItem(idOfSubpart);\n        if (!isDataTypePrimitive(actualSubComponentDataType)) {\n            generateError(25, actualSubComponentDataType.getID());\n            setSeriousError(true);\n            return;\n        }\n        if (actualSubComponentDataType == null) {\n            generateError(9, idOfSubpart);\n            setSeriousError(true);\n            return;\n        }\n        actualDataTypeSubPartsPossition++;\n    }\n\n    public void addToActualFieldLength(int length) {\n        actualFieldLength += length;\n    }\n\n    /* Component functions */\n    public void eventBeginComponent() {\n        resetBeginComponent();\n        if (actualDataType == null) {\n            return;\n        }\n        // CM data type\n        if (actualDataType.getID().equals(\"CM\")) {\n            actualComponentDataType = configuration.getDataTypes().getItem(\"ST\");\n            return;\n        }\n        if (isDataTypePrimitive(actualDataType)) {\n            //more components in primitive type\n            if (actualDataTypePartsPossition > 0) {\n                generateError(22, actualDataType.getID());\n                setSeriousError(true);\n                return;\n            }\n            actualComponentDataType = actualDataType;\n        } else {\n            if (actualDataTypePartsPossition >= actualDataType.getParts().size()) {\n                generateError(22, actualDataType.getID() + \" \" + (actualDataTypePartsPossition + 1) + \"th(defined:\" + actualDataType.getParts().size() + \")\");\n                setSeriousError(true);\n                return;\n            }\n            HL7DataTypePart part = actualDataType.getParts().getItem(actualDataTypePartsPossition);\n            if (part.getType() == HL7DataTypePart.PART_TYPE_PRIMITIVE) {\n                //something wrong - Primitive type may be defined only as single subpart\n                generateError(26, actualDataType.getID());\n                setSeriousError(true);\n                return;\n            }\n            String idOfSubPart = ((HL7DataTypePartSubPart) part).getSubPartID();\n            actualComponentDataType = configuration.getDataTypes().getItem(idOfSubPart);\n            if (actualComponentDataType == null) {\n                generateError(9, idOfSubPart);\n                setSeriousError(true);\n                return;\n            }\n        }\n        actualDataTypePartsPossition++;\n    }\n\n    public boolean isDataTypePrimitive(HL7DataType dataType) {\n        if (dataType.getParts().size() != 1) {\n            return false;\n        } else {\n            return dataType.getParts().getItem(0).getType() == HL7DataTypePart.PART_TYPE_PRIMITIVE;\n        }\n    }\n\n    /* Field functions */\n    public void eventBeginField(boolean repeatable) {\n        //System.out.println(\"eventBeginField:\" + repeatable );\n        if (actualSegment == null) {\n            return;\n        }\n        if (!repeatable) {\n            //set the actual field\n            resetBeginField();\n            HL7FieldList fields = actualSegment.getFields();\n            if (actualFieldPosition >= 0 && actualFieldPosition < fields.size()) {\n                actualField = fields.getItem(actualFieldPosition);\n                actualFieldPosition++;\n            } else {\n                // More fields in segment then defined\n                generateError(16, getNameOfActualField());\n                actualField = null;\n                setSeriousError(true);\n                return;\n            }\n        } else {\n            resetBeginRepeatableField();\n        }\n        findActualDataType();\n    }\n\n    private void findActualDataType() {\n        if (actualField == null) {\n            return;\n        }\n        switch(actualField.getDependingType()) {\n            case HL7Field.TYPE_DEPENDING_NORMAL:\n                String typeID = actualField.getDataTypeID();\n                actualDataType = configuration.getDataTypes().getItem(typeID);\n                if (actualDataType == null) {\n                    generateError(9, typeID);\n                    setSeriousError(true);\n                    return;\n                }\n                break;\n            case HL7Field.TYPE_DEPENDING_REPEATABLE:\n            case HL7Field.TYPE_DEPENDING_GIVEN:\n                try {\n                    actualDataType = actualField.getDependingProcessor().getDataTypeForSituation(this);\n                } catch (ParserException e) {\n                    generateError(e.getMessageCode(), e.getPostfix());\n                    setSeriousError(true);\n                    return;\n                }\n                break;\n        }\n    }\n\n    /* Segment functions */\n    public void eventBeginSegment(String segmentID) {\n        resetBeginSegment();\n        messageTracer.processNextSegment(segmentID);\n    }\n\n    public void generateError(int code, String message) {\n        String segmentID = \"\";\n        if (actualSegment != null) {\n            segmentID = actualSegment.getID();\n        }\n        String fieldID = \"\";\n        if (actualField != null) {\n            fieldID = segmentID + \".\" + actualField.getSequential();\n        }\n        handler.error(HL7Checker.TYPE_ERROR, code, message, segmentID, fieldID);\n    }\n\n    public void generateWarning(int code, String message) {\n        String segmentID = \"\";\n        if (actualSegment != null) {\n            segmentID = actualSegment.getID();\n        }\n        String fieldID = \"\";\n        if (actualField != null) {\n            fieldID = segmentID + \".\" + actualField.getSequential();\n        }\n        handler.error(HL7Checker.TYPE_WARNING, code, message, segmentID, fieldID);\n    }\n\n    private String getNameOfActualField() {\n        if (actualSegment != null && actualField != null) {\n            return actualSegment.getID() + \".\" + actualField.getSequential();\n        } else {\n            return \"\";\n        }\n    }\n\n    public HL7CheckerHandler getCheckerHandler() {\n        return handler;\n    }\n\n    public void setCheckerHandler(HL7CheckerHandler handler) {\n        this.handler = handler;\n    }\n\n    public void resetBeginComponent() {\n        actualSubComponentDataType = null;\n        actualDataTypeSubPartsPossition = 0;\n    }\n\n    public void resetBeginField() {\n        actualFieldRepeatableIndex = 0;\n        actualFieldLength = 0;\n        actualField = null;\n        actualDataType = null;\n        actualDataTypePartsPossition = 0;\n        resetBeginComponent();\n    }\n\n    public void resetBeginRepeatableField() {\n        actualFieldRepeatableIndex++;\n        actualFieldLength = 0;\n        actualDataTypePartsPossition = 0;\n        resetBeginComponent();\n    }\n\n    public void resetBeginSegment() {\n        resetBeginField();\n        actualFieldPosition = 0;\n        actualSegment = null;\n    }\n\n    public HL7Segment getActualSegment() {\n        return actualSegment;\n    }\n\n    public void setActualSegment(HL7Segment actualSegment) {\n        this.actualSegment = actualSegment;\n    }\n\n    public int getActualFieldPosition() {\n        return actualFieldPosition;\n    }\n\n    public void setActualFieldPosition(int actualFieldPosition) {\n        this.actualFieldPosition = actualFieldPosition;\n    }\n\n    public HL7Field getActualField() {\n        return actualField;\n    }\n\n    public void setActualField(HL7Field actualField) {\n        this.actualField = actualField;\n    }\n\n    public int getActualFieldLength() {\n        return actualFieldLength;\n    }\n\n    public void setActualFieldLength(int actualFieldLength) {\n        this.actualFieldLength = actualFieldLength;\n    }\n\n    public int getActualDataTypePartsPossition() {\n        return actualDataTypePartsPossition;\n    }\n\n    public void setActualDataTypePartsPossition(int actualDataTypePartsPossition) {\n        this.actualDataTypePartsPossition = actualDataTypePartsPossition;\n    }\n\n    public int getActualDataTypeSubPartsPossition() {\n        return actualDataTypeSubPartsPossition;\n    }\n\n    public void setActualDataTypeSubPartsPossition(int actualDataTypeSubPartsPossition) {\n        this.actualDataTypeSubPartsPossition = actualDataTypeSubPartsPossition;\n    }\n\n    public int getActualFieldRepeatableIndex() {\n        return actualFieldRepeatableIndex;\n    }\n\n    public void setActualFieldRepeatableIndex(int actualFieldRepeatableIndex) {\n        this.actualFieldRepeatableIndex = actualFieldRepeatableIndex;\n    }\n\n    public HL7DataType getActualDataType() {\n        return actualDataType;\n    }\n\n    public void setActualDataType(HL7DataType actualDataType) {\n        this.actualDataType = actualDataType;\n    }\n\n    public HL7Configuration getConfiguration() {\n        return configuration;\n    }\n\n    public void setConfiguration(HL7Configuration configuration) {\n        this.configuration = configuration;\n    }\n\n    public HL7DataType getActualComponentDataType() {\n        return actualComponentDataType;\n    }\n\n    public void setActualComponentDataType(HL7DataType actualComponentDataType) {\n        this.actualComponentDataType = actualComponentDataType;\n    }\n\n    public HL7DataType getActualSubComponentDataType() {\n        return actualSubComponentDataType;\n    }\n\n    public void setActualSubComponentDataType(HL7DataType actualSubComponentDataType) {\n        this.actualSubComponentDataType = actualSubComponentDataType;\n    }\n\n    public String toString() {\n        String ret = \"\";\n        if (actualSegment != null) {\n            ret += \"ACTUAL_SEGMENT:\" + actualSegment.getID() + \"\\n\";\n        }\n        if (actualField != null) {\n            ret += \"ACTUAL_FIELD:\" + actualSegment.getID() + \".\" + actualField.getSequential() + \"\\n\";\n        }\n        ret += \"actualFieldPosition:\" + actualFieldPosition + \"\\n\";\n        ret += \"actualFieldRepeatableIndex:\" + actualFieldRepeatableIndex + \"\\n\";\n        ret += \"actualFieldLength:\" + actualFieldLength + \"\\n\";\n        if (actualDataType != null) {\n            ret += \"actualDataType:\" + actualDataType.getID() + \"\\n\";\n        }\n        ret += \"actualDataTypePartsPossition:\" + actualDataTypePartsPossition + \"\\n\";\n        if (actualComponentDataType != null) {\n            ret += \"actualComponentDataType:\" + actualComponentDataType.getID() + \"\\n\";\n        }\n        ret += \"actualDataTypeSubPartsPossition:\" + actualDataTypeSubPartsPossition + \"\\n\";\n        if (actualSubComponentDataType != null) {\n            ret += \"actualSubComponentDataType:\" + actualSubComponentDataType.getID() + \"\\n\";\n        }\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/parser/HL7CheckerStateImplTest0.java",
		"test_prompt": "// HL7CheckerStateImplTest0.java\npackage com.browsersoft.openhre.hl7.impl.parser;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Configuration;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataType;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypePart;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypePartSubPart;\nimport com.browsersoft.openhre.hl7.api.config.HL7Field;\nimport com.browsersoft.openhre.hl7.api.config.HL7FieldList;\nimport com.browsersoft.openhre.hl7.api.config.HL7Segment;\nimport com.browsersoft.openhre.hl7.api.parse.HL7Checker;\nimport com.browsersoft.openhre.hl7.api.parse.HL7CheckerHandler;\nimport com.browsersoft.openhre.hl7.api.parse.HL7CheckerState;\nimport com.browsersoft.openhre.hl7.api.parse.ParserException;\nimport com.browsersoft.openhre.hl7.api.regular.MessageTracer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7CheckerStateImpl}.\n* It contains ten unit test cases for the {@link HL7CheckerStateImpl#isSeriousError()} method.\n*/\nclass HL7CheckerStateImplTest0 {"
	},
	{
		"original_code": "// HL7CheckerStateImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.parser;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Configuration;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataType;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypePart;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypePartSubPart;\nimport com.browsersoft.openhre.hl7.api.config.HL7Field;\nimport com.browsersoft.openhre.hl7.api.config.HL7FieldList;\nimport com.browsersoft.openhre.hl7.api.config.HL7Segment;\nimport com.browsersoft.openhre.hl7.api.parse.HL7Checker;\nimport com.browsersoft.openhre.hl7.api.parse.HL7CheckerHandler;\nimport com.browsersoft.openhre.hl7.api.parse.HL7CheckerState;\nimport com.browsersoft.openhre.hl7.api.parse.ParserException;\nimport com.browsersoft.openhre.hl7.api.regular.MessageTracer;\n\npublic class HL7CheckerStateImpl implements HL7CheckerState {\n\n    private HL7CheckerHandler handler;\n\n    //segment\n    private HL7Segment actualSegment;\n\n    private HL7Configuration configuration;\n\n    //field\n    private HL7Field actualField;\n\n    private int actualFieldPosition;\n\n    private int actualFieldRepeatableIndex;\n\n    private int actualFieldLength = 0;\n\n    //part\n    private HL7DataType actualDataType;\n\n    private int actualDataTypePartsPossition = 0;\n\n    private HL7DataType actualComponentDataType;\n\n    private int actualDataTypeSubPartsPossition = 0;\n\n    private HL7DataType actualSubComponentDataType;\n\n    private boolean seriousError;\n\n    private MessageTracer messageTracer;\n\n    public boolean isSeriousError() {\n        return seriousError;\n    }\n\n    public void setSeriousError(boolean seriousError) {\n        this.seriousError = seriousError;\n    }\n\n    public MessageTracer getMessageTracer() {\n        return messageTracer;\n    }\n\n    public void setMessageTracer(MessageTracer messageTracer) {\n        this.messageTracer = messageTracer;\n    }\n\n    /* Subcomponents function */\n    public void eventBeginSubComponent() {\n        if (actualComponentDataType == null) {\n            return;\n        }\n        if (actualDataTypeSubPartsPossition >= actualComponentDataType.getParts().size()) {\n            generateError(27, actualComponentDataType.getID());\n            setSeriousError(true);\n            return;\n        }\n        HL7DataTypePart part = actualComponentDataType.getParts().getItem(actualDataTypeSubPartsPossition);\n        if (part.getType() == HL7DataTypePart.PART_TYPE_PRIMITIVE) {\n            // only for single subcomponent\n            actualSubComponentDataType = actualComponentDataType;\n            return;\n        }\n        String idOfSubpart = ((HL7DataTypePartSubPart) part).getSubPartID();\n        actualSubComponentDataType = configuration.getDataTypes().getItem(idOfSubpart);\n        if (!isDataTypePrimitive(actualSubComponentDataType)) {\n            generateError(25, actualSubComponentDataType.getID());\n            setSeriousError(true);\n            return;\n        }\n        if (actualSubComponentDataType == null) {\n            generateError(9, idOfSubpart);\n            setSeriousError(true);\n            return;\n        }\n        actualDataTypeSubPartsPossition++;\n    }\n\n    public void addToActualFieldLength(int length) {\n        actualFieldLength += length;\n    }\n\n    /* Component functions */\n    public void eventBeginComponent() {\n        resetBeginComponent();\n        if (actualDataType == null) {\n            return;\n        }\n        // CM data type\n        if (actualDataType.getID().equals(\"CM\")) {\n            actualComponentDataType = configuration.getDataTypes().getItem(\"ST\");\n            return;\n        }\n        if (isDataTypePrimitive(actualDataType)) {\n            //more components in primitive type\n            if (actualDataTypePartsPossition > 0) {\n                generateError(22, actualDataType.getID());\n                setSeriousError(true);\n                return;\n            }\n            actualComponentDataType = actualDataType;\n        } else {\n            if (actualDataTypePartsPossition >= actualDataType.getParts().size()) {\n                generateError(22, actualDataType.getID() + \" \" + (actualDataTypePartsPossition + 1) + \"th(defined:\" + actualDataType.getParts().size() + \")\");\n                setSeriousError(true);\n                return;\n            }\n            HL7DataTypePart part = actualDataType.getParts().getItem(actualDataTypePartsPossition);\n            if (part.getType() == HL7DataTypePart.PART_TYPE_PRIMITIVE) {\n                //something wrong - Primitive type may be defined only as single subpart\n                generateError(26, actualDataType.getID());\n                setSeriousError(true);\n                return;\n            }\n            String idOfSubPart = ((HL7DataTypePartSubPart) part).getSubPartID();\n            actualComponentDataType = configuration.getDataTypes().getItem(idOfSubPart);\n            if (actualComponentDataType == null) {\n                generateError(9, idOfSubPart);\n                setSeriousError(true);\n                return;\n            }\n        }\n        actualDataTypePartsPossition++;\n    }\n\n    public boolean isDataTypePrimitive(HL7DataType dataType) {\n        if (dataType.getParts().size() != 1) {\n            return false;\n        } else {\n            return dataType.getParts().getItem(0).getType() == HL7DataTypePart.PART_TYPE_PRIMITIVE;\n        }\n    }\n\n    /* Field functions */\n    public void eventBeginField(boolean repeatable) {\n        //System.out.println(\"eventBeginField:\" + repeatable );\n        if (actualSegment == null) {\n            return;\n        }\n        if (!repeatable) {\n            //set the actual field\n            resetBeginField();\n            HL7FieldList fields = actualSegment.getFields();\n            if (actualFieldPosition >= 0 && actualFieldPosition < fields.size()) {\n                actualField = fields.getItem(actualFieldPosition);\n                actualFieldPosition++;\n            } else {\n                // More fields in segment then defined\n                generateError(16, getNameOfActualField());\n                actualField = null;\n                setSeriousError(true);\n                return;\n            }\n        } else {\n            resetBeginRepeatableField();\n        }\n        findActualDataType();\n    }\n\n    private void findActualDataType() {\n        if (actualField == null) {\n            return;\n        }\n        switch(actualField.getDependingType()) {\n            case HL7Field.TYPE_DEPENDING_NORMAL:\n                String typeID = actualField.getDataTypeID();\n                actualDataType = configuration.getDataTypes().getItem(typeID);\n                if (actualDataType == null) {\n                    generateError(9, typeID);\n                    setSeriousError(true);\n                    return;\n                }\n                break;\n            case HL7Field.TYPE_DEPENDING_REPEATABLE:\n            case HL7Field.TYPE_DEPENDING_GIVEN:\n                try {\n                    actualDataType = actualField.getDependingProcessor().getDataTypeForSituation(this);\n                } catch (ParserException e) {\n                    generateError(e.getMessageCode(), e.getPostfix());\n                    setSeriousError(true);\n                    return;\n                }\n                break;\n        }\n    }\n\n    /* Segment functions */\n    public void eventBeginSegment(String segmentID) {\n        resetBeginSegment();\n        messageTracer.processNextSegment(segmentID);\n    }\n\n    public void generateError(int code, String message) {\n        String segmentID = \"\";\n        if (actualSegment != null) {\n            segmentID = actualSegment.getID();\n        }\n        String fieldID = \"\";\n        if (actualField != null) {\n            fieldID = segmentID + \".\" + actualField.getSequential();\n        }\n        handler.error(HL7Checker.TYPE_ERROR, code, message, segmentID, fieldID);\n    }\n\n    public void generateWarning(int code, String message) {\n        String segmentID = \"\";\n        if (actualSegment != null) {\n            segmentID = actualSegment.getID();\n        }\n        String fieldID = \"\";\n        if (actualField != null) {\n            fieldID = segmentID + \".\" + actualField.getSequential();\n        }\n        handler.error(HL7Checker.TYPE_WARNING, code, message, segmentID, fieldID);\n    }\n\n    private String getNameOfActualField() {\n        if (actualSegment != null && actualField != null) {\n            return actualSegment.getID() + \".\" + actualField.getSequential();\n        } else {\n            return \"\";\n        }\n    }\n\n    public HL7CheckerHandler getCheckerHandler() {\n        return handler;\n    }\n\n    public void setCheckerHandler(HL7CheckerHandler handler) {\n        this.handler = handler;\n    }\n\n    public void resetBeginComponent() {\n        actualSubComponentDataType = null;\n        actualDataTypeSubPartsPossition = 0;\n    }\n\n    public void resetBeginField() {\n        actualFieldRepeatableIndex = 0;\n        actualFieldLength = 0;\n        actualField = null;\n        actualDataType = null;\n        actualDataTypePartsPossition = 0;\n        resetBeginComponent();\n    }\n\n    public void resetBeginRepeatableField() {\n        actualFieldRepeatableIndex++;\n        actualFieldLength = 0;\n        actualDataTypePartsPossition = 0;\n        resetBeginComponent();\n    }\n\n    public void resetBeginSegment() {\n        resetBeginField();\n        actualFieldPosition = 0;\n        actualSegment = null;\n    }\n\n    public HL7Segment getActualSegment() {\n        return actualSegment;\n    }\n\n    public void setActualSegment(HL7Segment actualSegment) {\n        this.actualSegment = actualSegment;\n    }\n\n    public int getActualFieldPosition() {\n        return actualFieldPosition;\n    }\n\n    public void setActualFieldPosition(int actualFieldPosition) {\n        this.actualFieldPosition = actualFieldPosition;\n    }\n\n    public HL7Field getActualField() {\n        return actualField;\n    }\n\n    public void setActualField(HL7Field actualField) {\n        this.actualField = actualField;\n    }\n\n    public int getActualFieldLength() {\n        return actualFieldLength;\n    }\n\n    public void setActualFieldLength(int actualFieldLength) {\n        this.actualFieldLength = actualFieldLength;\n    }\n\n    public int getActualDataTypePartsPossition() {\n        return actualDataTypePartsPossition;\n    }\n\n    public void setActualDataTypePartsPossition(int actualDataTypePartsPossition) {\n        this.actualDataTypePartsPossition = actualDataTypePartsPossition;\n    }\n\n    public int getActualDataTypeSubPartsPossition() {\n        return actualDataTypeSubPartsPossition;\n    }\n\n    public void setActualDataTypeSubPartsPossition(int actualDataTypeSubPartsPossition) {\n        this.actualDataTypeSubPartsPossition = actualDataTypeSubPartsPossition;\n    }\n\n    public int getActualFieldRepeatableIndex() {\n        return actualFieldRepeatableIndex;\n    }\n\n    public void setActualFieldRepeatableIndex(int actualFieldRepeatableIndex) {\n        this.actualFieldRepeatableIndex = actualFieldRepeatableIndex;\n    }\n\n    public HL7DataType getActualDataType() {\n        return actualDataType;\n    }\n\n    public void setActualDataType(HL7DataType actualDataType) {\n        this.actualDataType = actualDataType;\n    }\n\n    public HL7Configuration getConfiguration() {\n        return configuration;\n    }\n\n    public void setConfiguration(HL7Configuration configuration) {\n        this.configuration = configuration;\n    }\n\n    public HL7DataType getActualComponentDataType() {\n        return actualComponentDataType;\n    }\n\n    public void setActualComponentDataType(HL7DataType actualComponentDataType) {\n        this.actualComponentDataType = actualComponentDataType;\n    }\n\n    public HL7DataType getActualSubComponentDataType() {\n        return actualSubComponentDataType;\n    }\n\n    public void setActualSubComponentDataType(HL7DataType actualSubComponentDataType) {\n        this.actualSubComponentDataType = actualSubComponentDataType;\n    }\n\n    public String toString() {\n        String ret = \"\";\n        if (actualSegment != null) {\n            ret += \"ACTUAL_SEGMENT:\" + actualSegment.getID() + \"\\n\";\n        }\n        if (actualField != null) {\n            ret += \"ACTUAL_FIELD:\" + actualSegment.getID() + \".\" + actualField.getSequential() + \"\\n\";\n        }\n        ret += \"actualFieldPosition:\" + actualFieldPosition + \"\\n\";\n        ret += \"actualFieldRepeatableIndex:\" + actualFieldRepeatableIndex + \"\\n\";\n        ret += \"actualFieldLength:\" + actualFieldLength + \"\\n\";\n        if (actualDataType != null) {\n            ret += \"actualDataType:\" + actualDataType.getID() + \"\\n\";\n        }\n        ret += \"actualDataTypePartsPossition:\" + actualDataTypePartsPossition + \"\\n\";\n        if (actualComponentDataType != null) {\n            ret += \"actualComponentDataType:\" + actualComponentDataType.getID() + \"\\n\";\n        }\n        ret += \"actualDataTypeSubPartsPossition:\" + actualDataTypeSubPartsPossition + \"\\n\";\n        if (actualSubComponentDataType != null) {\n            ret += \"actualSubComponentDataType:\" + actualSubComponentDataType.getID() + \"\\n\";\n        }\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/parser/HL7CheckerStateImplTest1.java",
		"test_prompt": "// HL7CheckerStateImplTest1.java\npackage com.browsersoft.openhre.hl7.impl.parser;\n\nimport com.browsersoft.openhre.hl7.api.config.HL7Configuration;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataType;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypePart;\nimport com.browsersoft.openhre.hl7.api.config.HL7DataTypePartSubPart;\nimport com.browsersoft.openhre.hl7.api.config.HL7Field;\nimport com.browsersoft.openhre.hl7.api.config.HL7FieldList;\nimport com.browsersoft.openhre.hl7.api.config.HL7Segment;\nimport com.browsersoft.openhre.hl7.api.parse.HL7Checker;\nimport com.browsersoft.openhre.hl7.api.parse.HL7CheckerHandler;\nimport com.browsersoft.openhre.hl7.api.parse.HL7CheckerState;\nimport com.browsersoft.openhre.hl7.api.parse.ParserException;\nimport com.browsersoft.openhre.hl7.api.regular.MessageTracer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7CheckerStateImpl}.\n* It contains ten unit test cases for the {@link HL7CheckerStateImpl#isDataTypePrimitive(HL7DataType)} method.\n*/\nclass HL7CheckerStateImplTest1 {"
	},
	{
		"original_code": "// HL7DefaultConfigurationMakerImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl;\n\nimport com.browsersoft.openhre.hl7.api.HL7DefaultConfigurationMaker;\nimport com.browsersoft.openhre.hl7.api.config.HL7VersionConfigurationMap;\nimport com.browsersoft.openhre.hl7.api.config.InvalidConfigDataStructureException;\nimport com.browsersoft.openhre.hl7.api.config.HL7Configuration;\nimport com.browsersoft.openhre.hl7.impl.config.DOMUtils;\nimport com.browsersoft.openhre.hl7.impl.config.HL7ConfigurationImpl;\nimport com.browsersoft.openhre.hl7.impl.config.HL7VersionConfigurationMapImpl;\nimport org.xml.sax.SAXException;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport java.io.IOException;\n\npublic class HL7DefaultConfigurationMakerImpl implements HL7DefaultConfigurationMaker {\n\n    public HL7VersionConfigurationMap readConfiguration() throws InvalidConfigDataStructureException, IOException, SAXException {\n        Node nodeMessages = getResourceConfig(\"hl7_2_5_messages.xml\").getDocumentElement();\n        Node nodeSegments = getResourceConfig(\"hl7_2_5_segments.xml\").getDocumentElement();\n        Node nodeDataTypes = getResourceConfig(\"hl7_2_5_data_types.xml\").getDocumentElement();\n        Node nodeTables = getResourceConfig(\"hl7_2_5_tables.xml\").getDocumentElement();\n        Node nodeMessagesT2 = getResourceConfig(\"T2_messages.xml\").getDocumentElement();\n        Node nodeSegmentsT2 = getResourceConfig(\"T2_segments.xml\").getDocumentElement();\n        Node nodeMessagesI2I = getResourceConfig(\"i2i_2_4_messages.xml\").getDocumentElement();\n        Node nodeSegmentsI2I = getResourceConfig(\"i2i_2_4_segments.xml\").getDocumentElement();\n        Node nodeMessagesMed = getResourceConfig(\"MED_2_1_messages.xml\").getDocumentElement();\n        Node nodeSegmentsMed = getResourceConfig(\"MED_2_1_segments.xml\").getDocumentElement();\n        Node nodeMessagesMed22 = getResourceConfig(\"MED_2_2_messages.xml\").getDocumentElement();\n        Node nodeSegmentsMed22 = getResourceConfig(\"MED_2_2_segments.xml\").getDocumentElement();\n        HL7VersionConfigurationMap map = new HL7VersionConfigurationMapImpl();\n        HL7Configuration new231Configuration = new HL7ConfigurationImpl();\n        new231Configuration.readConfigurations(nodeMessages, nodeSegments, nodeDataTypes, nodeTables);\n        new231Configuration.connectConfigurations();\n        map.addConfiguration(\"HL7_2.5\", new231Configuration);\n        HL7Configuration newT2Configuration = new HL7ConfigurationImpl();\n        newT2Configuration.readMessagesConfiguration(nodeMessagesT2);\n        newT2Configuration.readSegmentsConfiguration(nodeSegments);\n        newT2Configuration.readSegmentsConfiguration(nodeSegmentsT2);\n        newT2Configuration.readDataTypesConfiguration(nodeDataTypes);\n        newT2Configuration.readTablesConfiguration(nodeTables);\n        newT2Configuration.connectConfigurations();\n        map.addConfiguration(\"T2_1.0\", newT2Configuration);\n        HL7Configuration newI2IConfiguration = new HL7ConfigurationImpl();\n        newI2IConfiguration.readMessagesConfiguration(nodeMessagesI2I);\n        newI2IConfiguration.readSegmentsConfiguration(nodeSegments);\n        newI2IConfiguration.readSegmentsConfiguration(nodeSegmentsI2I);\n        newI2IConfiguration.readDataTypesConfiguration(nodeDataTypes);\n        newI2IConfiguration.readTablesConfiguration(nodeTables);\n        newI2IConfiguration.connectConfigurations();\n        map.addConfiguration(\"I2I_2.4\", newI2IConfiguration);\n        HL7Configuration newMEDConfiguration = new HL7ConfigurationImpl();\n        newMEDConfiguration.readMessagesConfiguration(nodeMessagesMed);\n        newMEDConfiguration.readSegmentsConfiguration(nodeSegments);\n        newMEDConfiguration.readSegmentsConfiguration(nodeSegmentsMed);\n        newMEDConfiguration.readDataTypesConfiguration(nodeDataTypes);\n        newMEDConfiguration.readTablesConfiguration(nodeTables);\n        newMEDConfiguration.connectConfigurations();\n        map.addConfiguration(\"MED_2.1\", newMEDConfiguration);\n        HL7Configuration newMED22Configuration = new HL7ConfigurationImpl();\n        newMED22Configuration.readMessagesConfiguration(nodeMessagesMed22);\n        newMED22Configuration.readSegmentsConfiguration(nodeSegmentsMed22);\n        newMED22Configuration.readDataTypesConfiguration(nodeDataTypes);\n        newMED22Configuration.readTablesConfiguration(nodeTables);\n        newMED22Configuration.connectConfigurations();\n        map.addConfiguration(\"MED_2.2\", newMED22Configuration);\n        return map;\n    }\n\n    private Document getResourceConfig(String name) throws IOException, SAXException {\n        return DOMUtils.parseInputStream(getClass().getResourceAsStream(\"/com/browsersoft/openhre/hl7/config/\" + name));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/HL7DefaultConfigurationMakerImplTest.java",
		"test_prompt": "// HL7DefaultConfigurationMakerImplTest.java\npackage com.browsersoft.openhre.hl7.impl;\n\nimport com.browsersoft.openhre.hl7.api.HL7DefaultConfigurationMaker;\nimport com.browsersoft.openhre.hl7.api.config.HL7VersionConfigurationMap;\nimport com.browsersoft.openhre.hl7.api.config.InvalidConfigDataStructureException;\nimport com.browsersoft.openhre.hl7.api.config.HL7Configuration;\nimport com.browsersoft.openhre.hl7.impl.config.DOMUtils;\nimport com.browsersoft.openhre.hl7.impl.config.HL7ConfigurationImpl;\nimport com.browsersoft.openhre.hl7.impl.config.HL7VersionConfigurationMapImpl;\nimport org.xml.sax.SAXException;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HL7DefaultConfigurationMakerImpl}.\n* It contains ten unit test cases for the {@link HL7DefaultConfigurationMakerImpl#readConfiguration()} method.\n*/\nclass HL7DefaultConfigurationMakerImplTest {"
	},
	{
		"original_code": "// ConnectionList.java\n/*\n*   ====================================================================\n*                 Open Source Health Records Exchange\n*   ====================================================================\n*\n*   Copyright (C) 2006 Browsersoft Inc.\n*\n*   This program is free software; you can redistribute it and/or modify\n*   it under the terms of the GNU General Public License, version 2,\n*   as published by the Free Software Foundation.\n*\n*   This program is distributed in the hope that it will be useful,\n*   but WITHOUT ANY WARRANTY; without even the implied warranty of\n*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*   GNU General Public License for more details.\n*\n*   The GNU General Public License is available at\n*   http://www.fsf.org/licensing/licenses/gpl.html\n*\n*   Email: info@openhre.org\n*   Web:   http://www.openhre.org\n*/\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport java.util.ArrayList;\n\npublic class ConnectionList {\n\n    private ArrayList items;\n\n    public ConnectionList() {\n        items = new ArrayList();\n    }\n\n    public int size() {\n        return items.size();\n    }\n\n    public void addItem(Connection item) {\n        items.add(item);\n    }\n\n    public Connection getItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            return (Connection) items.get(index);\n        } else {\n            return null;\n        }\n    }\n\n    public void setItem(int index, Connection value) {\n        if (index >= 0 && index < items.size()) {\n            items.set(index, value);\n        }\n    }\n\n    public void removeItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            items.remove(index);\n        }\n    }\n\n    public void clearAll() {\n        items.clear();\n    }\n\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < size(); i++) {\n            buffer.append(getItem(i));\n            buffer.append(\"\\n\");\n        }\n        return buffer.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/regular/ConnectionListTest.java",
		"test_prompt": "// ConnectionListTest.java\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConnectionList}.\n* It contains ten unit test cases for the {@link ConnectionList#size()} method.\n*/\nclass ConnectionListTest {"
	},
	{
		"original_code": "// NodeStack.java\n/*\n*   ====================================================================\n*                 Open Source Health Records Exchange\n*   ====================================================================\n*\n*   Copyright (C) 2006 Browsersoft Inc.\n*\n*   This program is free software; you can redistribute it and/or modify\n*   it under the terms of the GNU General Public License, version 2,\n*   as published by the Free Software Foundation.\n*\n*   This program is distributed in the hope that it will be useful,\n*   but WITHOUT ANY WARRANTY; without even the implied warranty of\n*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*   GNU General Public License for more details.\n*\n*   The GNU General Public License is available at\n*   http://www.fsf.org/licensing/licenses/gpl.html\n*\n*   Email: info@openhre.org\n*   Web:   http://www.openhre.org\n*/\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport com.browsersoft.openhre.hl7.api.regular.InvalidExpressionException;\nimport java.util.Stack;\n\npublic class NodeStack {\n\n    private Stack stack;\n\n    public NodeStack() {\n        stack = new Stack();\n    }\n\n    public void push(int node) {\n        stack.add(new Integer(node));\n    }\n\n    public int pop() throws InvalidExpressionException {\n        if (!stack.isEmpty()) {\n            return ((Integer) stack.pop()).intValue();\n        } else {\n            throw new InvalidExpressionException();\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/regular/NodeStackTest.java",
		"test_prompt": "// NodeStackTest.java\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport com.browsersoft.openhre.hl7.api.regular.InvalidExpressionException;\nimport java.util.Stack;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NodeStack}.\n* It contains ten unit test cases for the {@link NodeStack#pop()} method.\n*/\nclass NodeStackTest {"
	},
	{
		"original_code": "// ExpressionImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport com.browsersoft.openhre.hl7.api.regular.Expression;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionPart;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapper;\nimport java.util.ArrayList;\n\npublic class ExpressionImpl implements Expression {\n\n    private ArrayList items;\n\n    private int numberOfElements;\n\n    public ExpressionImpl() {\n        items = new ArrayList();\n    }\n\n    public int size() {\n        return items.size();\n    }\n\n    public void addItem(ExpressionPart item) {\n        items.add(item);\n    }\n\n    public ExpressionPart getItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            return (ExpressionPart) items.get(index);\n        } else {\n            return null;\n        }\n    }\n\n    public void setItem(int index, ExpressionPart value) {\n        if (index >= 0 && index < items.size()) {\n            items.set(index, value);\n        }\n    }\n\n    public void removeItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            items.remove(index);\n        }\n    }\n\n    public void clearAll() {\n        items.clear();\n    }\n\n    public int getNumberOfElementTypes() {\n        return numberOfElements;\n    }\n\n    public void setNumberOfElementTypes(int numberOfElements) {\n        this.numberOfElements = numberOfElements;\n    }\n\n    public String toString(ExpressionElementMapper mapper) {\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < size(); i++) {\n            switch(getItem(i).getType()) {\n                case ExpressionPart.OPEN_OPTIONAL:\n                    buffer.append(\"[\");\n                    break;\n                case ExpressionPart.OPEN_REPEATABLE:\n                    buffer.append(\"{\");\n                    break;\n                case ExpressionPart.ELEMENT:\n                    buffer.append(mapper.getItem(getItem(i).getElementID()));\n                    break;\n                case ExpressionPart.CLOSE_REPEATABLE:\n                    buffer.append(\"}\");\n                    break;\n                case ExpressionPart.CLOSE_OPTIONAL:\n                    buffer.append(\"]\");\n                    break;\n            }\n        }\n        return buffer.toString();\n    }\n\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < size(); i++) {\n            buffer.append(getItem(i).toString());\n            buffer.append(\"\\n\");\n        }\n        return buffer.toString();\n    }\n\n    public void readFromStringForDebug(String string) {\n        int counterElement = 0;\n        for (int i = 0; i < string.length(); i++) {\n            ExpressionPart newPart = new ExpressionPartImpl();\n            char ch = string.charAt(i);\n            switch(ch) {\n                case '[':\n                    newPart.setType(ExpressionPart.OPEN_OPTIONAL);\n                    addItem(newPart);\n                    break;\n                case ']':\n                    newPart.setType(ExpressionPart.CLOSE_OPTIONAL);\n                    addItem(newPart);\n                    break;\n                case '{':\n                    newPart.setType(ExpressionPart.OPEN_REPEATABLE);\n                    addItem(newPart);\n                    break;\n                case '}':\n                    newPart.setType(ExpressionPart.CLOSE_REPEATABLE);\n                    addItem(newPart);\n                    break;\n                default:\n                    if (ch >= 'A' && ch <= 'Z') {\n                        newPart.setType(ExpressionPart.ELEMENT);\n                        newPart.setElementID(counterElement);\n                        addItem(newPart);\n                        counterElement++;\n                        break;\n                    }\n            }\n        }\n        numberOfElements = counterElement;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/regular/ExpressionImplTest.java",
		"test_prompt": "// ExpressionImplTest.java\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport com.browsersoft.openhre.hl7.api.regular.Expression;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionPart;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapper;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExpressionImpl}.\n* It contains ten unit test cases for the {@link ExpressionImpl#size()} method.\n*/\nclass ExpressionImplTest {"
	},
	{
		"original_code": "// ExpressionNodeList.java\n/*\n*   ====================================================================\n*                 Open Source Health Records Exchange\n*   ====================================================================\n*\n*   Copyright (C) 2006 Browsersoft Inc.\n*\n*   This program is free software; you can redistribute it and/or modify\n*   it under the terms of the GNU General Public License, version 2,\n*   as published by the Free Software Foundation.\n*\n*   This program is distributed in the hope that it will be useful,\n*   but WITHOUT ANY WARRANTY; without even the implied warranty of\n*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*   GNU General Public License for more details.\n*\n*   The GNU General Public License is available at\n*   http://www.fsf.org/licensing/licenses/gpl.html\n*\n*   Email: info@openhre.org\n*   Web:   http://www.openhre.org\n*/\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport java.util.ArrayList;\n\npublic class ExpressionNodeList {\n\n    private ArrayList items;\n\n    public ExpressionNodeList() {\n        items = new ArrayList();\n    }\n\n    public int size() {\n        return items.size();\n    }\n\n    public void addExpressionList(ExpressionNodeList list) {\n        for (int i = 0; i < list.size(); i++) {\n            int item = list.getItem(i);\n            if (!isInList(item)) {\n                addItem(item);\n            }\n        }\n    }\n\n    public boolean isInList(int item) {\n        for (int i = 0; i < size(); i++) {\n            if (getItem(i) == item) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void addItem(int item) {\n        items.add(new Integer(item));\n    }\n\n    public int getItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            return ((Integer) items.get(index)).intValue();\n        } else {\n            return -1;\n        }\n    }\n\n    public void setItem(int index, int value) {\n        if (index >= 0 && index < items.size()) {\n            items.set(index, new Integer(value));\n        }\n    }\n\n    public void removeItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            items.remove(index);\n        }\n    }\n\n    public void clearAll() {\n        items.clear();\n    }\n\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < size(); i++) {\n            buffer.append(getItem(i));\n            buffer.append(\"\\n\");\n        }\n        return buffer.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/regular/ExpressionNodeListTest0.java",
		"test_prompt": "// ExpressionNodeListTest0.java\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExpressionNodeList}.\n* It contains ten unit test cases for the {@link ExpressionNodeList#size()} method.\n*/\nclass ExpressionNodeListTest0 {"
	},
	{
		"original_code": "// ExpressionNodeList.java\n/*\n*   ====================================================================\n*                 Open Source Health Records Exchange\n*   ====================================================================\n*\n*   Copyright (C) 2006 Browsersoft Inc.\n*\n*   This program is free software; you can redistribute it and/or modify\n*   it under the terms of the GNU General Public License, version 2,\n*   as published by the Free Software Foundation.\n*\n*   This program is distributed in the hope that it will be useful,\n*   but WITHOUT ANY WARRANTY; without even the implied warranty of\n*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*   GNU General Public License for more details.\n*\n*   The GNU General Public License is available at\n*   http://www.fsf.org/licensing/licenses/gpl.html\n*\n*   Email: info@openhre.org\n*   Web:   http://www.openhre.org\n*/\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport java.util.ArrayList;\n\npublic class ExpressionNodeList {\n\n    private ArrayList items;\n\n    public ExpressionNodeList() {\n        items = new ArrayList();\n    }\n\n    public int size() {\n        return items.size();\n    }\n\n    public void addExpressionList(ExpressionNodeList list) {\n        for (int i = 0; i < list.size(); i++) {\n            int item = list.getItem(i);\n            if (!isInList(item)) {\n                addItem(item);\n            }\n        }\n    }\n\n    public boolean isInList(int item) {\n        for (int i = 0; i < size(); i++) {\n            if (getItem(i) == item) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void addItem(int item) {\n        items.add(new Integer(item));\n    }\n\n    public int getItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            return ((Integer) items.get(index)).intValue();\n        } else {\n            return -1;\n        }\n    }\n\n    public void setItem(int index, int value) {\n        if (index >= 0 && index < items.size()) {\n            items.set(index, new Integer(value));\n        }\n    }\n\n    public void removeItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            items.remove(index);\n        }\n    }\n\n    public void clearAll() {\n        items.clear();\n    }\n\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < size(); i++) {\n            buffer.append(getItem(i));\n            buffer.append(\"\\n\");\n        }\n        return buffer.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/regular/ExpressionNodeListTest1.java",
		"test_prompt": "// ExpressionNodeListTest1.java\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExpressionNodeList}.\n* It contains ten unit test cases for the {@link ExpressionNodeList#isInList(int)} method.\n*/\nclass ExpressionNodeListTest1 {"
	},
	{
		"original_code": "// ExpressionElementMapperImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapper;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapperItem;\nimport java.util.ArrayList;\n\npublic class ExpressionElementMapperImpl implements ExpressionElementMapper {\n\n    private ArrayList items;\n\n    public ExpressionElementMapperImpl() {\n        items = new ArrayList();\n    }\n\n    public int size() {\n        return items.size();\n    }\n\n    public void addItem(ExpressionElementMapperItem item) {\n        items.add(item);\n    }\n\n    public ExpressionElementMapperItem getItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            return (ExpressionElementMapperItem) items.get(index);\n        } else {\n            return null;\n        }\n    }\n\n    public void setItem(int index, ExpressionElementMapperItem value) {\n        if (index >= 0 && index < items.size()) {\n            items.set(index, value);\n        }\n    }\n\n    public void removeItem(int index) {\n        if (index >= 0 && index < items.size()) {\n            items.remove(index);\n        }\n    }\n\n    public void clearAll() {\n        items.clear();\n    }\n\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        for (int i = 0; i < size(); i++) {\n            buffer.append(getItem(i).toString());\n            buffer.append(\"\\n\");\n        }\n        return buffer.toString();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/regular/ExpressionElementMapperImplTest.java",
		"test_prompt": "// ExpressionElementMapperImplTest.java\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapper;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapperItem;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExpressionElementMapperImpl}.\n* It contains ten unit test cases for the {@link ExpressionElementMapperImpl#size()} method.\n*/\nclass ExpressionElementMapperImplTest {"
	},
	{
		"original_code": "// ExpressionMatrixBuilderImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport com.browsersoft.openhre.hl7.api.regular.Expression;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionMatrix;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionMatrixBuilder;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionPart;\nimport com.browsersoft.openhre.hl7.api.regular.InvalidExpressionException;\n\npublic class ExpressionMatrixBuilderImpl implements ExpressionMatrixBuilder {\n\n    private static final int GROUP_TYPE_NORMAL = 0;\n\n    private static final int GROUP_TYPE_OPTIONAL = 1;\n\n    public ExpressionMatrix buildMatrix(Expression expression) throws InvalidExpressionException {\n        ExpressionMatrix matrix = new ExpressionMatrixImpl();\n        int numberOfElements = expression.getNumberOfElementTypes();\n        matrix.creatMatrix(numberOfElements);\n        buildProcess(matrix, expression);\n        return matrix;\n    }\n\n    private void buildProcess(ExpressionMatrix matrix, Expression expression) throws InvalidExpressionException {\n        //first node\n        matrix.addNewNode();\n        processSubExpression(matrix, expression, 0, expression.size() - 1, GROUP_TYPE_NORMAL);\n    }\n\n    private ExpressionNodeList processSubExpression(ExpressionMatrix matrix, Expression expression, int start, int end, int typeOfGroup) throws InvalidExpressionException {\n        NodeStack repeatableStack = new NodeStack();\n        ExpressionNodeList terminalNodes = new ExpressionNodeList();\n        int startNode = getActualIndexOfNode(expression, start, end);\n        terminalNodes.addItem(startNode);\n        int realStart = start;\n        if (typeOfGroup != GROUP_TYPE_NORMAL) {\n            realStart++;\n        }\n        for (int i = realStart; i <= end; i++) {\n            ExpressionPart part = expression.getItem(i);\n            switch(part.getType()) {\n                case ExpressionPart.OPEN_REPEATABLE:\n                    {\n                        repeatableStack.push(getActualIndexOfNode(expression, i, end));\n                        break;\n                    }\n                case ExpressionPart.OPEN_OPTIONAL:\n                    {\n                        int endOfGroup = getEndOfGroup(expression, i);\n                        ExpressionNodeList terminalsFromGroup = processSubExpression(matrix, expression, i, endOfGroup, GROUP_TYPE_OPTIONAL);\n                        int startNodeOfGroup = getActualIndexOfNode(expression, i, endOfGroup);\n                        ConnectionList connections = getAllConnectionsFromNode(matrix, startNodeOfGroup);\n                        for (int j = 0; j < terminalNodes.size(); j++) {\n                            int terminalItem = terminalNodes.getItem(j);\n                            if (terminalItem != startNodeOfGroup) {\n                                for (int k = 0; k < connections.size(); k++) {\n                                    Connection connection = connections.getItem(k);\n                                    matrix.setValue(terminalItem, connection.getElementID(), connection.getTo());\n                                }\n                            }\n                        }\n                        terminalNodes.addExpressionList(terminalsFromGroup);\n                        i = endOfGroup;\n                        break;\n                    }\n                case ExpressionPart.ELEMENT:\n                    {\n                        matrix.addNewNode();\n                        int indexOfNodeAfterElement = part.getElementID() + 1;\n                        for (int j = 0; j < terminalNodes.size(); j++) {\n                            matrix.setValue(terminalNodes.getItem(j), part.getElementID(), indexOfNodeAfterElement);\n                        }\n                        terminalNodes.clearAll();\n                        terminalNodes.addItem(indexOfNodeAfterElement);\n                        break;\n                    }\n                case ExpressionPart.CLOSE_REPEATABLE:\n                    {\n                        int repeatableBeginNode = repeatableStack.pop();\n                        ConnectionList connections = getAllConnectionsFromNode(matrix, repeatableBeginNode);\n                        for (int j = 0; j < terminalNodes.size(); j++) {\n                            int terminalItem = terminalNodes.getItem(j);\n                            if (terminalItem > repeatableBeginNode) {\n                                for (int k = 0; k < connections.size(); k++) {\n                                    Connection connection = connections.getItem(k);\n                                    matrix.setValue(terminalItem, connection.getElementID(), connection.getTo());\n                                }\n                            }\n                        }\n                        break;\n                    }\n            }\n        }\n        if (typeOfGroup == GROUP_TYPE_OPTIONAL) {\n            if (!terminalNodes.isInList(startNode)) {\n                terminalNodes.addItem(startNode);\n            }\n        }\n        return terminalNodes;\n    }\n\n    private ConnectionList getAllConnectionsFromNode(ExpressionMatrix matrix, int node) {\n        ConnectionList list = new ConnectionList();\n        for (int j = 0; j < matrix.getNumberOfElements(); j++) {\n            int connection = matrix.getValue(node, j);\n            if (connection != (-1)) {\n                Connection connectionObject = new Connection();\n                connectionObject.setElementID(j);\n                connectionObject.setTo(connection);\n                connectionObject.setFrom(node);\n                list.addItem(connectionObject);\n            }\n        }\n        return list;\n    }\n\n    private int getActualIndexOfNode(Expression expression, int index, int max) throws InvalidExpressionException {\n        for (int j = index; j <= max; j++) {\n            ExpressionPart p = expression.getItem(j);\n            if (p.getType() == ExpressionPart.ELEMENT) {\n                return p.getElementID();\n            }\n        }\n        throw new InvalidExpressionException();\n    }\n\n    private int getEndOfGroup(Expression expression, int start) throws InvalidExpressionException {\n        ExpressionPart partStart = expression.getItem(start);\n        int openType = partStart.getType();\n        int closeType = -1;\n        if (openType == ExpressionPart.OPEN_OPTIONAL) {\n            closeType = ExpressionPart.CLOSE_OPTIONAL;\n        }\n        if (openType == ExpressionPart.OPEN_REPEATABLE) {\n            closeType = ExpressionPart.CLOSE_REPEATABLE;\n        }\n        int level = 0;\n        for (int i = start; i < expression.size(); i++) {\n            ExpressionPart part = expression.getItem(i);\n            if (part.getType() == openType) {\n                level++;\n            } else if (part.getType() == closeType) {\n                level--;\n                if (level == 0) {\n                    return i;\n                }\n            }\n        }\n        throw new InvalidExpressionException();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/regular/ExpressionMatrixBuilderImplTest.java",
		"test_prompt": "// ExpressionMatrixBuilderImplTest.java\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport com.browsersoft.openhre.hl7.api.regular.Expression;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionMatrix;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionMatrixBuilder;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionPart;\nimport com.browsersoft.openhre.hl7.api.regular.InvalidExpressionException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExpressionMatrixBuilderImpl}.\n* It contains ten unit test cases for the {@link ExpressionMatrixBuilderImpl#buildMatrix(Expression)} method.\n*/\nclass ExpressionMatrixBuilderImplTest {"
	},
	{
		"original_code": "// ExpressionMatrixImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionMatrix;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapper;\nimport java.util.ArrayList;\n\npublic class ExpressionMatrixImpl implements ExpressionMatrix {\n\n    private ArrayList lines;\n\n    private int numberOfElements;\n\n    public ExpressionMatrixImpl() {\n        lines = new ArrayList();\n    }\n\n    public int getNumberOfElements() {\n        return numberOfElements;\n    }\n\n    public int getNumberOfNodes() {\n        return lines.size();\n    }\n\n    public void creatMatrix(int numberOfElements) {\n        this.numberOfElements = numberOfElements;\n    }\n\n    public void setValue(int node, int elementID, int value) {\n        if (node >= 0 && node < lines.size()) {\n            //System.out.println(\"setValue: \" + node + \" --\" + ((char)(((int) 'A') + elementID)) + \"-->\" + value );\n            int[] elements = (int[]) lines.get(node);\n            if (elementID >= 0 && elementID < elements.length) {\n                elements[elementID] = value;\n            }\n        }\n    }\n\n    public int getValue(int node, int elementID) {\n        if (node >= 0 && node < lines.size()) {\n            int[] elements = (int[]) lines.get(node);\n            if (elementID >= 0 && elementID < elements.length) {\n                return elements[elementID];\n            }\n        }\n        return -1;\n    }\n\n    public int addNewNode() {\n        int[] ar = new int[numberOfElements];\n        for (int i = 0; i < ar.length; i++) {\n            ar[i] = -1;\n        }\n        lines.add(ar);\n        return lines.size() - 1;\n    }\n\n    public String outNoStandardConnections(boolean forward, ExpressionElementMapper mapper) {\n        String ret = \"\";\n        for (int i = 0; i < lines.size(); i++) {\n            for (int j = 0; j < numberOfElements; j++) {\n                String idElement = \"\";\n                if (mapper == null) {\n                    idElement = String.valueOf((char) (((int) 'A') + j));\n                } else {\n                    idElement = mapper.getItem(j).toString();\n                }\n                int val = getValue(i, j);\n                if (val != (-1) && (i != j)) {\n                    if (forward) {\n                        if (i < val) {\n                            ret += i + \" --- \" + idElement + \" ---> \" + val;\n                            ret += \"\\n\";\n                        }\n                    } else {\n                        if (i >= val) {\n                            ret += i + \" --- \" + idElement + \" ---> \" + val;\n                            ret += \"\\n\";\n                        }\n                    }\n                }\n            }\n        }\n        return ret;\n    }\n\n    public String toString() {\n        String ret = \"MATRIX\\n\";\n        ret += \"-----------------------\\n\";\n        char ch = 'A';\n        ret += \" | \";\n        for (int j = 0; j < numberOfElements; j++) {\n            ret += ch;\n            ch++;\n            if (j != numberOfElements - 1) {\n                ret += \" , \";\n            }\n        }\n        ret += \"\\n\";\n        for (int i = 0; i < lines.size(); i++) {\n            ret += i + \"| \";\n            for (int j = 0; j < numberOfElements; j++) {\n                int val = getValue(i, j);\n                if (val == (-1)) {\n                    ret += \"E\";\n                } else {\n                    ret += getValue(i, j);\n                }\n                if (j != numberOfElements - 1) {\n                    ret += \" , \";\n                }\n            }\n            ret += \"\\n\";\n        }\n        ret += \"\\nCONNECTIONS\\n\";\n        ret += \"-----------------------\\n\";\n        for (int i = 0; i < lines.size(); i++) {\n            for (int j = 0; j < numberOfElements; j++) {\n                int val = getValue(i, j);\n                if (val != (-1) && (i != j)) {\n                    ret += i + \" --- \" + (char) (((int) 'A') + j) + \" ---> \" + val;\n                    ret += \"\\n\";\n                }\n            }\n        }\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/regular/ExpressionMatrixImplTest0.java",
		"test_prompt": "// ExpressionMatrixImplTest0.java\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionMatrix;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapper;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExpressionMatrixImpl}.\n* It contains ten unit test cases for the {@link ExpressionMatrixImpl#addNewNode()} method.\n*/\nclass ExpressionMatrixImplTest0 {"
	},
	{
		"original_code": "// ExpressionMatrixImpl.java\n/*\n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionMatrix;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapper;\nimport java.util.ArrayList;\n\npublic class ExpressionMatrixImpl implements ExpressionMatrix {\n\n    private ArrayList lines;\n\n    private int numberOfElements;\n\n    public ExpressionMatrixImpl() {\n        lines = new ArrayList();\n    }\n\n    public int getNumberOfElements() {\n        return numberOfElements;\n    }\n\n    public int getNumberOfNodes() {\n        return lines.size();\n    }\n\n    public void creatMatrix(int numberOfElements) {\n        this.numberOfElements = numberOfElements;\n    }\n\n    public void setValue(int node, int elementID, int value) {\n        if (node >= 0 && node < lines.size()) {\n            //System.out.println(\"setValue: \" + node + \" --\" + ((char)(((int) 'A') + elementID)) + \"-->\" + value );\n            int[] elements = (int[]) lines.get(node);\n            if (elementID >= 0 && elementID < elements.length) {\n                elements[elementID] = value;\n            }\n        }\n    }\n\n    public int getValue(int node, int elementID) {\n        if (node >= 0 && node < lines.size()) {\n            int[] elements = (int[]) lines.get(node);\n            if (elementID >= 0 && elementID < elements.length) {\n                return elements[elementID];\n            }\n        }\n        return -1;\n    }\n\n    public int addNewNode() {\n        int[] ar = new int[numberOfElements];\n        for (int i = 0; i < ar.length; i++) {\n            ar[i] = -1;\n        }\n        lines.add(ar);\n        return lines.size() - 1;\n    }\n\n    public String outNoStandardConnections(boolean forward, ExpressionElementMapper mapper) {\n        String ret = \"\";\n        for (int i = 0; i < lines.size(); i++) {\n            for (int j = 0; j < numberOfElements; j++) {\n                String idElement = \"\";\n                if (mapper == null) {\n                    idElement = String.valueOf((char) (((int) 'A') + j));\n                } else {\n                    idElement = mapper.getItem(j).toString();\n                }\n                int val = getValue(i, j);\n                if (val != (-1) && (i != j)) {\n                    if (forward) {\n                        if (i < val) {\n                            ret += i + \" --- \" + idElement + \" ---> \" + val;\n                            ret += \"\\n\";\n                        }\n                    } else {\n                        if (i >= val) {\n                            ret += i + \" --- \" + idElement + \" ---> \" + val;\n                            ret += \"\\n\";\n                        }\n                    }\n                }\n            }\n        }\n        return ret;\n    }\n\n    public String toString() {\n        String ret = \"MATRIX\\n\";\n        ret += \"-----------------------\\n\";\n        char ch = 'A';\n        ret += \" | \";\n        for (int j = 0; j < numberOfElements; j++) {\n            ret += ch;\n            ch++;\n            if (j != numberOfElements - 1) {\n                ret += \" , \";\n            }\n        }\n        ret += \"\\n\";\n        for (int i = 0; i < lines.size(); i++) {\n            ret += i + \"| \";\n            for (int j = 0; j < numberOfElements; j++) {\n                int val = getValue(i, j);\n                if (val == (-1)) {\n                    ret += \"E\";\n                } else {\n                    ret += getValue(i, j);\n                }\n                if (j != numberOfElements - 1) {\n                    ret += \" , \";\n                }\n            }\n            ret += \"\\n\";\n        }\n        ret += \"\\nCONNECTIONS\\n\";\n        ret += \"-----------------------\\n\";\n        for (int i = 0; i < lines.size(); i++) {\n            for (int j = 0; j < numberOfElements; j++) {\n                int val = getValue(i, j);\n                if (val != (-1) && (i != j)) {\n                    ret += i + \" --- \" + (char) (((int) 'A') + j) + \" ---> \" + val;\n                    ret += \"\\n\";\n                }\n            }\n        }\n        return ret;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/openhre/hl7/impl/regular/ExpressionMatrixImplTest1.java",
		"test_prompt": "// ExpressionMatrixImplTest1.java\npackage com.browsersoft.openhre.hl7.impl.regular;\n\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionMatrix;\nimport com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapper;\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExpressionMatrixImpl}.\n* It contains ten unit test cases for the {@link ExpressionMatrixImpl#outNoStandardConnections(boolean, ExpressionElementMapper)} method.\n*/\nclass ExpressionMatrixImplTest1 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest0.java",
		"test_prompt": "// GroupTest0.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#createSubcontext(Name, Attributes)} method.\n*/\nclass GroupTest0 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest1.java",
		"test_prompt": "// GroupTest1.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#createSubcontext(String, Attributes)} method.\n*/\nclass GroupTest1 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest2.java",
		"test_prompt": "// GroupTest2.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#search(Name, Attributes)} method.\n*/\nclass GroupTest2 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest3.java",
		"test_prompt": "// GroupTest3.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#search(Name, Attributes, String[])} method.\n*/\nclass GroupTest3 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest4.java",
		"test_prompt": "// GroupTest4.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#search(Name, String, Object[], SearchControls)} method.\n*/\nclass GroupTest4 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest5.java",
		"test_prompt": "// GroupTest5.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#search(Name, String, SearchControls)} method.\n*/\nclass GroupTest5 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest6.java",
		"test_prompt": "// GroupTest6.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#search(String, Attributes)} method.\n*/\nclass GroupTest6 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest7.java",
		"test_prompt": "// GroupTest7.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#search(String, Attributes, String[])} method.\n*/\nclass GroupTest7 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest8.java",
		"test_prompt": "// GroupTest8.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#search(String, String, Object[], SearchControls)} method.\n*/\nclass GroupTest8 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest9.java",
		"test_prompt": "// GroupTest9.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#search(String, String, SearchControls)} method.\n*/\nclass GroupTest9 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest10.java",
		"test_prompt": "// GroupTest10.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#addToEnvironment(String, Object)} method.\n*/\nclass GroupTest10 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest11.java",
		"test_prompt": "// GroupTest11.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#composeName(Name, Name)} method.\n*/\nclass GroupTest11 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest12.java",
		"test_prompt": "// GroupTest12.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#composeName(String, String)} method.\n*/\nclass GroupTest12 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest13.java",
		"test_prompt": "// GroupTest13.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#createSubcontext(Name)} method.\n*/\nclass GroupTest13 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest14.java",
		"test_prompt": "// GroupTest14.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#createSubcontext(String)} method.\n*/\nclass GroupTest14 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest15.java",
		"test_prompt": "// GroupTest15.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#list(Name)} method.\n*/\nclass GroupTest15 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest16.java",
		"test_prompt": "// GroupTest16.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#list(String)} method.\n*/\nclass GroupTest16 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest17.java",
		"test_prompt": "// GroupTest17.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#listBindings(Name)} method.\n*/\nclass GroupTest17 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest18.java",
		"test_prompt": "// GroupTest18.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#listBindings(String)} method.\n*/\nclass GroupTest18 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest19.java",
		"test_prompt": "// GroupTest19.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#lookup(Name)} method.\n*/\nclass GroupTest19 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest20.java",
		"test_prompt": "// GroupTest20.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#lookup(String)} method.\n*/\nclass GroupTest20 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest21.java",
		"test_prompt": "// GroupTest21.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#lookupLink(Name)} method.\n*/\nclass GroupTest21 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest22.java",
		"test_prompt": "// GroupTest22.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#lookupLink(String)} method.\n*/\nclass GroupTest22 {"
	},
	{
		"original_code": "// Group.java\n/*\n *   CVS $Id: Group.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Group implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private Set allowedips;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    public Group() {\n    }\n\n    public Group(String cn) {\n        // read the configuration properties\n        try {\n            Login.loadProperties(props, configFile);\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            this.cn = cn;\n            this.dn = \"cn=\" + cn + \",ou=groups,\" + basedn;\n            this.allowedips = new HashSet();\n            oc.add(\"groupOfNames\");\n            oc.add(\"top\");\n            //required LDAP attribute\n            myAttrs.put(\"member\", \"cn=none\");\n            myAttrs.put(\"cn\", cn);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Group(String cn, String allowedips) {\n        this(cn);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                this.allowedips.add(ip);\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        oc.add(\"ipHost\");\n        myAttrs.put(oc);\n        myAttrs.put(ipSet);\n    }\n\n    public Group(String cn, ArrayList allowedips) {\n        this(cn);\n        if (allowedips != null) {\n            for (int i = 0; i < allowedips.size(); ++i) this.addAllowedip((String) allowedips.get(i));\n        } else\n            this.allowedips = new HashSet();\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        /*if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }*/\n        if (allowedips == null)\n            allowedips = new HashSet();\n        if (!allowed_ip.equals(\"0\"))\n            allowedips.add(allowed_ip);\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/GroupTest23.java",
		"test_prompt": "// GroupTest23.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Group}.\n* It contains ten unit test cases for the {@link Group#removeFromEnvironment(String)} method.\n*/\nclass GroupTest23 {"
	},
	{
		"original_code": "// SimpleUserMgr.java\n/*\n *   CVS $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport jdbm.JDBMEnumeration;\nimport jdbm.JDBMHashtable;\nimport jdbm.JDBMRecordManager;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\n/**\n * This class manages a persistent storage of Users. It can add users from a file in\n * LDAP's LDIF format.  The values required are dn (Distinguished Name), cn (Common Name), userPassword, email,\n * ou and employeeType.\n * This is intended as an interface for LDAP, but provides a simple persistent Hashtables using JDBM.\n *\n * The id Hashtable (name \"userids\") contains the User objects with the email address as the key\n * The country (name \"countries\") Hashtable contains a HashSet of all the organizations in a given country\n * To get a list of all supported countries simply get the keys of the countries Hashtable\n * There also is a persistent Hashtable for each organization with is LDAP \"o\" value as its name\n * It returns a Hashtable of users within that organization, with key the \"cn\" (Username) and value \"email\"\n * Thus a user can be looked up by username and organization and return the \"key\" email address from which\n * the full User object can be obtained from the id Hashtable\n *\n * When a new organization is encountered (with a user with \"o\" and \"c\" dn parameters, it is registered\n * into the list of organizations for that country in the country Hashtable\n *\n * JDBM (http://jdbm.sourceforge.net) persistent hashtable implemenation is used for persistence\n *\n * @author $Author: grodecki $\n * @version $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n */\npublic class SimpleUserMgr implements UserMgr {\n\n    //private JDBMHashtable dn;\n    private JDBMHashtable id = null;\n\n    private JDBMHashtable users;\n\n    private JDBMHashtable country;\n\n    private String username = \"\";\n\n    // private String password = \"\";\n    // private String email = \"\";\n    private static String userfile = \"login.users\";\n\n    private String userdb = \"users\";\n\n    private static String configFile = \"test\";\n\n    private JDBMRecordManager recman;\n\n    private static Properties props = new Properties();\n\n    private Vector profile_vec = null;\n\n    // private Hashtable users = null;\n    private User user;\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(SimpleUserMgr.class.getName());\n\n    /**\n     * Public default constructor\n     */\n    public SimpleUserMgr() {\n        // Defer initialization for servlets\n        //  init();\n    }\n\n    /**\n     * Constructor which specifies the configProperties to be read\n     */\n    public SimpleUserMgr(String configProperties) {\n        setConfigFile(configProperties);\n        init();\n    }\n\n    /**\n     * Initialize Persistent storage\n     * There are two primary hashtables.   The first (country) contains a list of the organizations which are keys\n     * to user hashtables for each organization.  The organization hashtable is a map from the username\n     * key to the userId (email address).  The second (id) is the hashtable based on the email address\n     * which is used as a userId since the email address is supposed to be unique.  For each organization\n     * there is a separate hashtable of the users for that organization.  Thus one can look a user up\n     * across organizations or within an organization.  All the user objects are contained in the second (id) hashtable.\n     */\n    public void init() {\n        //  ResourceBundle bundle = ResourceBundle.getBundle(configFile);\n        Login.loadProperties(props, configFile);\n        userdb = props.getProperty(\"users\", userdb);\n        //      New code to find the actual db file, as long as it is on the classpath\n        String tmpDb = \"/\" + userdb + \".db\";\n        URL fileUrl = UserMgr.class.getResource(tmpDb);\n        String pathAndFile = fileUrl.getFile();\n        // Now remove the final '.db' from the returned string.\n        userdb = pathAndFile.substring(0, pathAndFile.length() - 3);\n        cat.debug(\"init: accessing: \" + userdb);\n        try {\n            recman = new JDBMRecordManager(userdb);\n            //dn = recman.getHashtable(\"usernames\");\n            id = recman.getHashtable(\"userids\");\n            if (cat.isDebugEnabled()) {\n                for (JDBMEnumeration en = id.keys(); en.hasMoreElements(); ) {\n                    String key = (String) en.nextElement();\n                    cat.debug(\"Key = \" + key);\n                }\n            }\n            country = recman.getHashtable(\"countries\");\n        } catch (IOException e) {\n            cat.error(\"init: \" + e);\n        }\n    }\n\n    /**\n     * add Users from previously defined userfile\n     */\n    public void addUsers() {\n        addUsers(userfile);\n    }\n\n    /**\n     *  Add users from an input file\n     * @param userfile\n     */\n    public void addUsers(String userfile) {\n        // Query using JNDI to get list of users, not implemented correctly yet.\n        // Read from file to get users (in ldif format)\n        // e.g.:\n        //  dn: cn= David Forslund, o=LANL, c=US\n        //\tcn: David Forslund\n        //\temail: dwf@lanl.gov\n        //  userPassword: test\n        // Results are put into a User object and the User into a hashtable with email/userId\n        // as the key\n        // various arrays are created for listing the users as needed.\n        // userfile = props.getProperty(\"login.users\", userfile);\n        // String country = props.getProperty(\"country\",\"US\");\n        try {\n            // orgs = recman.getHashtable(country);\n            // Read in user list if not already done      ###\n            String line = null;\n            InputStream is = getClass().getResourceAsStream(userfile);\n            //if (theFile.exists()) {\n            if (is != null) {\n                cat.debug(\"Reading  \" + userfile);\n                //\tFileReader inFile = new FileReader(theFile);\n                InputStreamReader inFile = new InputStreamReader(is);\n                BufferedReader inReader = new BufferedReader(inFile);\n                profile_vec = new Vector();\n                user = null;\n                // unique set of organizations in a country\n                HashSet set = null;\n                while (((line = inReader.readLine()) != null)) {\n                    parseLine(line);\n                }\n                //HashSet set = (HashSet) orgs.get(country);\n                //if (set == null) set = new HashSet();\n                inReader.close();\n                if ((profile_vec != null)) {\n                    addProfile();\n                    for (int i = 0; i < profile_vec.size(); i++) {\n                        User u = (User) profile_vec.elementAt(i);\n                        String c = u.getCountry();\n                        //cat.debug(\"addUsers\\n \"+u.toString());\n                        String org = u.getOrg();\n                        if (c != null)\n                            set = (HashSet) country.get(c);\n                        if (set == null)\n                            set = new HashSet();\n                        // get the hashtable for that organization\n                        // Update list  of organizations for a country\n                        set.add(org);\n                        //  cat.debug(\"organization = \" + org);\n                        JDBMHashtable users = recman.getHashtable(org);\n                        // insert userID in users table with userName as key\n                        // put userId in dn with dn as key\n                        users.put(u.getUserName(), u.getUserId());\n                        // put user in id with mail as key\n                        id.put(u.getUserId(), u);\n                        country.put(c, set);\n                    }\n                    // put the list of names into the organization hashtable\n                    // cat.debug(set.size() + \" organizations\");\n                }\n            }\n        } catch (IOException e) {\n            cat.error(\"UserMgr reading error adding users \" + e, e);\n        }\n        //}\n    }\n\n    /**\n     * parse the line and add the user to the list\n     * @param line to be parsed\n     */\n    public void parseLine(String line) {\n        try {\n            //user = null;\n            if (line.startsWith(\"#\") || line.startsWith(\"//\"))\n                return;\n            StringTokenizer tmp_st = new StringTokenizer(line, \":\");\n            if (tmp_st.countTokens() == 0)\n                return;\n            String tmp_tok = tmp_st.nextToken();\n            //   System.out.println(\"parseLine: \"+tmp_tok);\n            if (tmp_tok.equals(\"dn\")) {\n                // We have a new defined person so save old data and reset\n                if (user == null) {\n                    user = new User();\n                } else {\n                    // user is complete so store it\n                    addProfile();\n                }\n                user.setDN(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"cn\")) {\n                user.setUserName(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"email\")) {\n                user.setUserId(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"userPassword\")) {\n                //user.setPassword(tmp_st.nextToken().trim());\n                user.encodePassword(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"employeeType\")) {\n                // specify role(s) of user\n                user.addRole(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"ou\")) {\n                // specify group(s) of user\n                user.addGroup(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"sn\")) {\n                user.setSurName(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"ip\")) {\n                // specify ip Addr of user\n                user.setIpAddr(tmp_st.nextToken().trim());\n            }\n        } catch (Exception e) {\n            cat.error(\"parseLine failed:\" + e);\n        }\n    }\n\n    /**\n     * Add the user profile\n     */\n    private void addProfile() {\n        profile_vec.addElement(user);\n        //  cat.debug(\"name: \"+user.getUserName()+\", email: \"+user.getUserId()+\", passwd: \"+user.getPassword());\n        user = new User();\n    }\n\n    /**\n     * addUser\n     * @param u String with multiple lines with all the data for a user\n     */\n    public void addUser(String u) {\n        BufferedReader reader = new BufferedReader(new StringReader(u));\n        String line = null;\n        User saveUser = user;\n        try {\n            while ((line = reader.readLine()) != null) parseLine(line);\n            if (user != null)\n                addUser(user);\n        } catch (IOException e) {\n            cat.error(\"addUser: \" + e);\n        }\n        user = saveUser;\n    }\n\n    /**\n     * add User to the Persistent Hashtable\n     * @param theDN The distinguished name (cn= \"name\", o=\"organization\", c=\"country\")\n     * @param cn  LDAP username\n     * @param sn   LDAP surname\n     * @param email   LDAP email address (userId)\n     * @param role\n     * @param password\n     */\n    public void addUser(String theDN, String cn, String sn, String email, String role, String password) {\n        User newUser = new User(email, cn);\n        newUser.addRole(role);\n        newUser.setPassword(password);\n        newUser.setSurName(sn);\n        newUser.setDN(theDN);\n        addUser(newUser);\n    }\n\n    /**\n     *  Add a User already constructed\n     * @param newUser\n     */\n    public void addUser(User newUser) {\n        String c = newUser.getCountry();\n        String org = newUser.getOrg();\n        String userName = newUser.getUserName();\n        String email = newUser.getUserId();\n        cat.debug(\"addUser: \" + newUser.toString());\n        User oldUser = getUser(newUser);\n        if (oldUser == null)\n            oldUser = new User();\n        oldUser.update(newUser);\n        try {\n            // First make sure the organization is in the country list\n            HashSet set = (HashSet) country.get(c);\n            if (set == null)\n                set = new HashSet();\n            set.add(org);\n            country.put(c, set);\n            // get the users Hashtable based on the organization\n            users = recman.getHashtable(org);\n            users.put(userName, email);\n            id.put(email, oldUser);\n            cat.debug(\"User: \" + oldUser.toString() + \" added!\");\n        } catch (IOException e) {\n            cat.error(\"addUser: \" + e);\n        }\n    }\n\n    /**\n     * delete User based on the unique UserId\n     * @param userId corresponding to email address\n     */\n    public void delUser(String userId) {\n        try {\n            cat.debug(\"delUser trying to remove: \" + userId);\n            User delUser = (User) id.get(userId);\n            if (delUser != null) {\n                id.remove(userId);\n                cat.debug(\"delUser removed from id: \" + userId);\n                String uName = delUser.getUserName();\n                users = recman.getHashtable(delUser.getOrg());\n                cat.debug(\"removing \" + uName + \" from dn\");\n                String u = (String) users.get(uName);\n                if (u != null) {\n                    users.remove(uName);\n                    cat.debug(\"delUser removed from dn: \" + uName);\n                }\n            } else\n                cat.debug(\"delUser: id='\" + userId + \"' not found\");\n        } catch (IOException e) {\n            cat.error(\"delUser: \" + userId + \" \" + e);\n        }\n    }\n\n    /**\n     * get the User based on name and organization\n     * @param userName\n     * @param org\n     * @return User\n     */\n    public User getUser(String userName, String org) {\n        User user = null;\n        try {\n            users = recman.getHashtable(org);\n            String userId = (String) users.get(username);\n            if (userId != null)\n                user = (User) id.get(userId);\n            if (user == null)\n                cat.warn(\"getUser(\" + userName + \",\" + org + \"): not found\");\n        } catch (IOException e) {\n            cat.error(\"getUser: \" + e);\n        }\n        return user;\n    }\n\n    public User getUser() {\n        cat.debug(\"userID: \" + user.getUserId());\n        cat.debug(\"userName: \" + user.getUserName());\n        return user;\n    }\n\n    /**\n     * get User by the unique userId (email)\n     * @param userId\n     * @return User\n     */\n    public User getUser(String userId) {\n        cat.debug(\"getUser: \" + userId);\n        User user = null;\n        try {\n            user = (User) id.get(userId);\n            cat.debug(\"getUser: found user \" + user.toString());\n        } catch (Exception e) {\n            user = null;\n            cat.error(\"getUser: user not found \" + e);\n        }\n        //cat.debug(\"getUser: found user \" + user.toString());\n        return user;\n    }\n\n    /**\n     * get User with username, org and email\n     * @param username  cn variable\n     * @param org       o variable\n     * @param email       email variable\n     * @return User\n     */\n    public User getUser(String username, String org, String email) {\n        User user = null;\n        try {\n            // try unique email first (this should always return the user)\n            if (email != null && !email.equals(\"\"))\n                user = (User) id.get(email);\n            if ((user == null) && (org != null) && (username != null)) {\n                // get the user list for the organization\n                users = recman.getHashtable(org);\n                if (users != null) {\n                    String userid = (String) users.get(username);\n                    if (userid != null)\n                        user = (User) id.get(userid);\n                }\n            }\n            if (user == null)\n                cat.warn(\"getUser(\" + username + \",\" + org + \",\" + email + \"): user not found, \");\n        } catch (IOException e) {\n            cat.error(\"getUser: \" + e);\n        }\n        return user;\n    }\n\n    /**\n     * Find a User given a partially completed User object as a template\n     * @param findUser\n     * @return User\n     */\n    public User getUser(User findUser) {\n        User user = new User();\n        String email = findUser.getUserId();\n        try {\n            if (email != null && !email.equals(\"\"))\n                user = (User) id.get(email);\n            if ((user == null) && (findUser.getOrg() != null) && findUser.getUserName() != null) {\n                users = recman.getHashtable(findUser.getOrg());\n                if (users != null) {\n                    String userid = (String) users.get(username);\n                    if (userid != null)\n                        user = (User) id.get(userid);\n                }\n            }\n            if (user == null) {\n                cat.warn(\"getUser(\" + findUser.toString() + \"): user not found\");\n            }\n        } catch (IOException e) {\n            cat.error(\"getUser: \" + e);\n        }\n        return user;\n    }\n\n    /**\n     * Get all the userNames for a given organization\n     * @param org the organization name (o field in LDAP);\n     * @return String[] list of names within the organization\n     */\n    public String[] getNamesbyOrg(String org) {\n        Vector v = new Vector();\n        try {\n            JDBMHashtable users = recman.getHashtable(org);\n            JDBMEnumeration e = users.keys();\n            while (e.hasMoreElements()) {\n                v.addElement(e.nextElement());\n            }\n        } catch (IOException e1) {\n            cat.error(\"getNamesbyOrg: \" + e1);\n        }\n        String[] s = new String[v.size()];\n        v.copyInto(s);\n        return s;\n    }\n\n    /**\n     * get the email addresses of all users in an organization\n     * @param org name of the organization (o LDAP field)\n     * @return String[] array of email addresses\n     */\n    public String[] getMailbyOrg(String org) {\n        Vector v = new Vector();\n        try {\n            JDBMHashtable users = recman.getHashtable(org);\n            JDBMEnumeration e = users.values();\n            while (e.hasMoreElements()) {\n                v.addElement(e.nextElement());\n            }\n        } catch (IOException e1) {\n            cat.error(\"getMailbyOrg: \" + e1);\n        }\n        String[] s = new String[v.size()];\n        v.copyInto(s);\n        return s;\n    }\n\n    /**\n     * get list of all UserIds in DB\n     * @return String[] list of UserIds\n     */\n    public String[] getUserIds() {\n        String[] mail;\n        if (id == null)\n            init();\n        ArrayList v = null;\n        try {\n            JDBMEnumeration e = id.keys();\n            v = new ArrayList();\n            while (e.hasMoreElements()) {\n                v.add(e.nextElement());\n            }\n        } catch (IOException e1) {\n            cat.error(\"getUserIds: \" + e1);\n            return new String[0];\n        }\n        mail = new String[v.size()];\n        v.toArray(mail);\n        // cat.debug(\"getUserIds: \"+mail.length +\" mail: \"+mail[0]);\n        return mail;\n    }\n\n    /**\n     * obtain list of valid users\n     * @return String[] list of known users\n     */\n    public String[] getUserNames() {\n        String[] names;\n        if (id == null)\n            init();\n        ArrayList v = null;\n        try {\n            JDBMEnumeration e = id.values();\n            v = new ArrayList();\n            while (e.hasMoreElements()) {\n                v.add(((User) e.nextElement()).getUserName());\n            }\n        } catch (IOException e1) {\n            cat.error(\"getUserNames: \" + e1);\n            return new String[0];\n        }\n        // for (int i = 0;i< v.size(); i++)\n        //      cat.debug(\"name: \"+v.get(i));\n        names = new String[v.size()];\n        cat.debug(\"getUserNames: found \" + names.length + \" elements\");\n        v.toArray(names);\n        return names;\n    }\n\n    /**\n     * Bean setter  and getter methods\n     * @param theConfigFile the properties file\n     */\n    public static void setConfigFile(String theConfigFile) {\n        configFile = theConfigFile;\n    }\n\n    /**\n     *  set the file of users to be read.\n     * @param file to be read\n     */\n    public static void setUserfile(String file) {\n        userfile = file;\n    }\n\n    /**\n     * get all the users in in the persistent hashtable\n     * @return String\n     */\n    public String export() {\n        try {\n            JDBMEnumeration c = id.values();\n            StringBuffer buff = new StringBuffer();\n            while (c.hasMoreElements()) {\n                buff.append(c.nextElement().toString() + '\\n');\n            }\n            return buff.toString();\n        } catch (IOException e) {\n            cat.error(\"getUsers: \" + e);\n            return null;\n        }\n    }\n\n    public boolean checkSecret(String userid, String password, String authType) {\n        user = getUser(userid);\n        if (user != null) {\n            String passwd = user.getPassword();\n            if (passwd == null)\n                return false;\n            return user.checkDigest(passwd, password);\n        } else\n            return false;\n    }\n\n    public void logOut() {\n        return;\n    }\n\n    public static void main(String[] argv) {\n        if (argv.length < 1) {\n            System.out.println(\"usage: SimpleUserMgr 'file' where 'file' is a ResourceBundle (file.properties)\\n\" + \"that has an optional property 'users' which is the name of the database to be created or read\\n\" + \"and a property 'login.users' is a ldif text file containing the users to be added.\");\n            System.exit(0);\n        }\n        SimpleUserMgr.setConfigFile(argv[0]);\n        System.out.println(\"Config Resource is \" + argv[0] + \".properties\");\n        SimpleUserMgr userMgr = new SimpleUserMgr();\n        userMgr.init();\n        String file = props.getProperty(userfile, \"/users.txt\");\n        System.out.println(\"User File is \" + file);\n        if (file != null && file != \"\")\n            userMgr.addUsers(file);\n        System.out.println(\"Users Added:\\n\" + userMgr.export());\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgrTest0.java",
		"test_prompt": "// SimpleUserMgrTest0.java\npackage com.browsersoft.aacs;\n\nimport jdbm.JDBMEnumeration;\nimport jdbm.JDBMHashtable;\nimport jdbm.JDBMRecordManager;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleUserMgr}.\n* It contains ten unit test cases for the {@link SimpleUserMgr#export()} method.\n*/\nclass SimpleUserMgrTest0 {"
	},
	{
		"original_code": "// SimpleUserMgr.java\n/*\n *   CVS $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport jdbm.JDBMEnumeration;\nimport jdbm.JDBMHashtable;\nimport jdbm.JDBMRecordManager;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\n/**\n * This class manages a persistent storage of Users. It can add users from a file in\n * LDAP's LDIF format.  The values required are dn (Distinguished Name), cn (Common Name), userPassword, email,\n * ou and employeeType.\n * This is intended as an interface for LDAP, but provides a simple persistent Hashtables using JDBM.\n *\n * The id Hashtable (name \"userids\") contains the User objects with the email address as the key\n * The country (name \"countries\") Hashtable contains a HashSet of all the organizations in a given country\n * To get a list of all supported countries simply get the keys of the countries Hashtable\n * There also is a persistent Hashtable for each organization with is LDAP \"o\" value as its name\n * It returns a Hashtable of users within that organization, with key the \"cn\" (Username) and value \"email\"\n * Thus a user can be looked up by username and organization and return the \"key\" email address from which\n * the full User object can be obtained from the id Hashtable\n *\n * When a new organization is encountered (with a user with \"o\" and \"c\" dn parameters, it is registered\n * into the list of organizations for that country in the country Hashtable\n *\n * JDBM (http://jdbm.sourceforge.net) persistent hashtable implemenation is used for persistence\n *\n * @author $Author: grodecki $\n * @version $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n */\npublic class SimpleUserMgr implements UserMgr {\n\n    //private JDBMHashtable dn;\n    private JDBMHashtable id = null;\n\n    private JDBMHashtable users;\n\n    private JDBMHashtable country;\n\n    private String username = \"\";\n\n    // private String password = \"\";\n    // private String email = \"\";\n    private static String userfile = \"login.users\";\n\n    private String userdb = \"users\";\n\n    private static String configFile = \"test\";\n\n    private JDBMRecordManager recman;\n\n    private static Properties props = new Properties();\n\n    private Vector profile_vec = null;\n\n    // private Hashtable users = null;\n    private User user;\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(SimpleUserMgr.class.getName());\n\n    /**\n     * Public default constructor\n     */\n    public SimpleUserMgr() {\n        // Defer initialization for servlets\n        //  init();\n    }\n\n    /**\n     * Constructor which specifies the configProperties to be read\n     */\n    public SimpleUserMgr(String configProperties) {\n        setConfigFile(configProperties);\n        init();\n    }\n\n    /**\n     * Initialize Persistent storage\n     * There are two primary hashtables.   The first (country) contains a list of the organizations which are keys\n     * to user hashtables for each organization.  The organization hashtable is a map from the username\n     * key to the userId (email address).  The second (id) is the hashtable based on the email address\n     * which is used as a userId since the email address is supposed to be unique.  For each organization\n     * there is a separate hashtable of the users for that organization.  Thus one can look a user up\n     * across organizations or within an organization.  All the user objects are contained in the second (id) hashtable.\n     */\n    public void init() {\n        //  ResourceBundle bundle = ResourceBundle.getBundle(configFile);\n        Login.loadProperties(props, configFile);\n        userdb = props.getProperty(\"users\", userdb);\n        //      New code to find the actual db file, as long as it is on the classpath\n        String tmpDb = \"/\" + userdb + \".db\";\n        URL fileUrl = UserMgr.class.getResource(tmpDb);\n        String pathAndFile = fileUrl.getFile();\n        // Now remove the final '.db' from the returned string.\n        userdb = pathAndFile.substring(0, pathAndFile.length() - 3);\n        cat.debug(\"init: accessing: \" + userdb);\n        try {\n            recman = new JDBMRecordManager(userdb);\n            //dn = recman.getHashtable(\"usernames\");\n            id = recman.getHashtable(\"userids\");\n            if (cat.isDebugEnabled()) {\n                for (JDBMEnumeration en = id.keys(); en.hasMoreElements(); ) {\n                    String key = (String) en.nextElement();\n                    cat.debug(\"Key = \" + key);\n                }\n            }\n            country = recman.getHashtable(\"countries\");\n        } catch (IOException e) {\n            cat.error(\"init: \" + e);\n        }\n    }\n\n    /**\n     * add Users from previously defined userfile\n     */\n    public void addUsers() {\n        addUsers(userfile);\n    }\n\n    /**\n     *  Add users from an input file\n     * @param userfile\n     */\n    public void addUsers(String userfile) {\n        // Query using JNDI to get list of users, not implemented correctly yet.\n        // Read from file to get users (in ldif format)\n        // e.g.:\n        //  dn: cn= David Forslund, o=LANL, c=US\n        //\tcn: David Forslund\n        //\temail: dwf@lanl.gov\n        //  userPassword: test\n        // Results are put into a User object and the User into a hashtable with email/userId\n        // as the key\n        // various arrays are created for listing the users as needed.\n        // userfile = props.getProperty(\"login.users\", userfile);\n        // String country = props.getProperty(\"country\",\"US\");\n        try {\n            // orgs = recman.getHashtable(country);\n            // Read in user list if not already done      ###\n            String line = null;\n            InputStream is = getClass().getResourceAsStream(userfile);\n            //if (theFile.exists()) {\n            if (is != null) {\n                cat.debug(\"Reading  \" + userfile);\n                //\tFileReader inFile = new FileReader(theFile);\n                InputStreamReader inFile = new InputStreamReader(is);\n                BufferedReader inReader = new BufferedReader(inFile);\n                profile_vec = new Vector();\n                user = null;\n                // unique set of organizations in a country\n                HashSet set = null;\n                while (((line = inReader.readLine()) != null)) {\n                    parseLine(line);\n                }\n                //HashSet set = (HashSet) orgs.get(country);\n                //if (set == null) set = new HashSet();\n                inReader.close();\n                if ((profile_vec != null)) {\n                    addProfile();\n                    for (int i = 0; i < profile_vec.size(); i++) {\n                        User u = (User) profile_vec.elementAt(i);\n                        String c = u.getCountry();\n                        //cat.debug(\"addUsers\\n \"+u.toString());\n                        String org = u.getOrg();\n                        if (c != null)\n                            set = (HashSet) country.get(c);\n                        if (set == null)\n                            set = new HashSet();\n                        // get the hashtable for that organization\n                        // Update list  of organizations for a country\n                        set.add(org);\n                        //  cat.debug(\"organization = \" + org);\n                        JDBMHashtable users = recman.getHashtable(org);\n                        // insert userID in users table with userName as key\n                        // put userId in dn with dn as key\n                        users.put(u.getUserName(), u.getUserId());\n                        // put user in id with mail as key\n                        id.put(u.getUserId(), u);\n                        country.put(c, set);\n                    }\n                    // put the list of names into the organization hashtable\n                    // cat.debug(set.size() + \" organizations\");\n                }\n            }\n        } catch (IOException e) {\n            cat.error(\"UserMgr reading error adding users \" + e, e);\n        }\n        //}\n    }\n\n    /**\n     * parse the line and add the user to the list\n     * @param line to be parsed\n     */\n    public void parseLine(String line) {\n        try {\n            //user = null;\n            if (line.startsWith(\"#\") || line.startsWith(\"//\"))\n                return;\n            StringTokenizer tmp_st = new StringTokenizer(line, \":\");\n            if (tmp_st.countTokens() == 0)\n                return;\n            String tmp_tok = tmp_st.nextToken();\n            //   System.out.println(\"parseLine: \"+tmp_tok);\n            if (tmp_tok.equals(\"dn\")) {\n                // We have a new defined person so save old data and reset\n                if (user == null) {\n                    user = new User();\n                } else {\n                    // user is complete so store it\n                    addProfile();\n                }\n                user.setDN(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"cn\")) {\n                user.setUserName(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"email\")) {\n                user.setUserId(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"userPassword\")) {\n                //user.setPassword(tmp_st.nextToken().trim());\n                user.encodePassword(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"employeeType\")) {\n                // specify role(s) of user\n                user.addRole(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"ou\")) {\n                // specify group(s) of user\n                user.addGroup(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"sn\")) {\n                user.setSurName(tmp_st.nextToken().trim());\n            } else if (tmp_tok.equals(\"ip\")) {\n                // specify ip Addr of user\n                user.setIpAddr(tmp_st.nextToken().trim());\n            }\n        } catch (Exception e) {\n            cat.error(\"parseLine failed:\" + e);\n        }\n    }\n\n    /**\n     * Add the user profile\n     */\n    private void addProfile() {\n        profile_vec.addElement(user);\n        //  cat.debug(\"name: \"+user.getUserName()+\", email: \"+user.getUserId()+\", passwd: \"+user.getPassword());\n        user = new User();\n    }\n\n    /**\n     * addUser\n     * @param u String with multiple lines with all the data for a user\n     */\n    public void addUser(String u) {\n        BufferedReader reader = new BufferedReader(new StringReader(u));\n        String line = null;\n        User saveUser = user;\n        try {\n            while ((line = reader.readLine()) != null) parseLine(line);\n            if (user != null)\n                addUser(user);\n        } catch (IOException e) {\n            cat.error(\"addUser: \" + e);\n        }\n        user = saveUser;\n    }\n\n    /**\n     * add User to the Persistent Hashtable\n     * @param theDN The distinguished name (cn= \"name\", o=\"organization\", c=\"country\")\n     * @param cn  LDAP username\n     * @param sn   LDAP surname\n     * @param email   LDAP email address (userId)\n     * @param role\n     * @param password\n     */\n    public void addUser(String theDN, String cn, String sn, String email, String role, String password) {\n        User newUser = new User(email, cn);\n        newUser.addRole(role);\n        newUser.setPassword(password);\n        newUser.setSurName(sn);\n        newUser.setDN(theDN);\n        addUser(newUser);\n    }\n\n    /**\n     *  Add a User already constructed\n     * @param newUser\n     */\n    public void addUser(User newUser) {\n        String c = newUser.getCountry();\n        String org = newUser.getOrg();\n        String userName = newUser.getUserName();\n        String email = newUser.getUserId();\n        cat.debug(\"addUser: \" + newUser.toString());\n        User oldUser = getUser(newUser);\n        if (oldUser == null)\n            oldUser = new User();\n        oldUser.update(newUser);\n        try {\n            // First make sure the organization is in the country list\n            HashSet set = (HashSet) country.get(c);\n            if (set == null)\n                set = new HashSet();\n            set.add(org);\n            country.put(c, set);\n            // get the users Hashtable based on the organization\n            users = recman.getHashtable(org);\n            users.put(userName, email);\n            id.put(email, oldUser);\n            cat.debug(\"User: \" + oldUser.toString() + \" added!\");\n        } catch (IOException e) {\n            cat.error(\"addUser: \" + e);\n        }\n    }\n\n    /**\n     * delete User based on the unique UserId\n     * @param userId corresponding to email address\n     */\n    public void delUser(String userId) {\n        try {\n            cat.debug(\"delUser trying to remove: \" + userId);\n            User delUser = (User) id.get(userId);\n            if (delUser != null) {\n                id.remove(userId);\n                cat.debug(\"delUser removed from id: \" + userId);\n                String uName = delUser.getUserName();\n                users = recman.getHashtable(delUser.getOrg());\n                cat.debug(\"removing \" + uName + \" from dn\");\n                String u = (String) users.get(uName);\n                if (u != null) {\n                    users.remove(uName);\n                    cat.debug(\"delUser removed from dn: \" + uName);\n                }\n            } else\n                cat.debug(\"delUser: id='\" + userId + \"' not found\");\n        } catch (IOException e) {\n            cat.error(\"delUser: \" + userId + \" \" + e);\n        }\n    }\n\n    /**\n     * get the User based on name and organization\n     * @param userName\n     * @param org\n     * @return User\n     */\n    public User getUser(String userName, String org) {\n        User user = null;\n        try {\n            users = recman.getHashtable(org);\n            String userId = (String) users.get(username);\n            if (userId != null)\n                user = (User) id.get(userId);\n            if (user == null)\n                cat.warn(\"getUser(\" + userName + \",\" + org + \"): not found\");\n        } catch (IOException e) {\n            cat.error(\"getUser: \" + e);\n        }\n        return user;\n    }\n\n    public User getUser() {\n        cat.debug(\"userID: \" + user.getUserId());\n        cat.debug(\"userName: \" + user.getUserName());\n        return user;\n    }\n\n    /**\n     * get User by the unique userId (email)\n     * @param userId\n     * @return User\n     */\n    public User getUser(String userId) {\n        cat.debug(\"getUser: \" + userId);\n        User user = null;\n        try {\n            user = (User) id.get(userId);\n            cat.debug(\"getUser: found user \" + user.toString());\n        } catch (Exception e) {\n            user = null;\n            cat.error(\"getUser: user not found \" + e);\n        }\n        //cat.debug(\"getUser: found user \" + user.toString());\n        return user;\n    }\n\n    /**\n     * get User with username, org and email\n     * @param username  cn variable\n     * @param org       o variable\n     * @param email       email variable\n     * @return User\n     */\n    public User getUser(String username, String org, String email) {\n        User user = null;\n        try {\n            // try unique email first (this should always return the user)\n            if (email != null && !email.equals(\"\"))\n                user = (User) id.get(email);\n            if ((user == null) && (org != null) && (username != null)) {\n                // get the user list for the organization\n                users = recman.getHashtable(org);\n                if (users != null) {\n                    String userid = (String) users.get(username);\n                    if (userid != null)\n                        user = (User) id.get(userid);\n                }\n            }\n            if (user == null)\n                cat.warn(\"getUser(\" + username + \",\" + org + \",\" + email + \"): user not found, \");\n        } catch (IOException e) {\n            cat.error(\"getUser: \" + e);\n        }\n        return user;\n    }\n\n    /**\n     * Find a User given a partially completed User object as a template\n     * @param findUser\n     * @return User\n     */\n    public User getUser(User findUser) {\n        User user = new User();\n        String email = findUser.getUserId();\n        try {\n            if (email != null && !email.equals(\"\"))\n                user = (User) id.get(email);\n            if ((user == null) && (findUser.getOrg() != null) && findUser.getUserName() != null) {\n                users = recman.getHashtable(findUser.getOrg());\n                if (users != null) {\n                    String userid = (String) users.get(username);\n                    if (userid != null)\n                        user = (User) id.get(userid);\n                }\n            }\n            if (user == null) {\n                cat.warn(\"getUser(\" + findUser.toString() + \"): user not found\");\n            }\n        } catch (IOException e) {\n            cat.error(\"getUser: \" + e);\n        }\n        return user;\n    }\n\n    /**\n     * Get all the userNames for a given organization\n     * @param org the organization name (o field in LDAP);\n     * @return String[] list of names within the organization\n     */\n    public String[] getNamesbyOrg(String org) {\n        Vector v = new Vector();\n        try {\n            JDBMHashtable users = recman.getHashtable(org);\n            JDBMEnumeration e = users.keys();\n            while (e.hasMoreElements()) {\n                v.addElement(e.nextElement());\n            }\n        } catch (IOException e1) {\n            cat.error(\"getNamesbyOrg: \" + e1);\n        }\n        String[] s = new String[v.size()];\n        v.copyInto(s);\n        return s;\n    }\n\n    /**\n     * get the email addresses of all users in an organization\n     * @param org name of the organization (o LDAP field)\n     * @return String[] array of email addresses\n     */\n    public String[] getMailbyOrg(String org) {\n        Vector v = new Vector();\n        try {\n            JDBMHashtable users = recman.getHashtable(org);\n            JDBMEnumeration e = users.values();\n            while (e.hasMoreElements()) {\n                v.addElement(e.nextElement());\n            }\n        } catch (IOException e1) {\n            cat.error(\"getMailbyOrg: \" + e1);\n        }\n        String[] s = new String[v.size()];\n        v.copyInto(s);\n        return s;\n    }\n\n    /**\n     * get list of all UserIds in DB\n     * @return String[] list of UserIds\n     */\n    public String[] getUserIds() {\n        String[] mail;\n        if (id == null)\n            init();\n        ArrayList v = null;\n        try {\n            JDBMEnumeration e = id.keys();\n            v = new ArrayList();\n            while (e.hasMoreElements()) {\n                v.add(e.nextElement());\n            }\n        } catch (IOException e1) {\n            cat.error(\"getUserIds: \" + e1);\n            return new String[0];\n        }\n        mail = new String[v.size()];\n        v.toArray(mail);\n        // cat.debug(\"getUserIds: \"+mail.length +\" mail: \"+mail[0]);\n        return mail;\n    }\n\n    /**\n     * obtain list of valid users\n     * @return String[] list of known users\n     */\n    public String[] getUserNames() {\n        String[] names;\n        if (id == null)\n            init();\n        ArrayList v = null;\n        try {\n            JDBMEnumeration e = id.values();\n            v = new ArrayList();\n            while (e.hasMoreElements()) {\n                v.add(((User) e.nextElement()).getUserName());\n            }\n        } catch (IOException e1) {\n            cat.error(\"getUserNames: \" + e1);\n            return new String[0];\n        }\n        // for (int i = 0;i< v.size(); i++)\n        //      cat.debug(\"name: \"+v.get(i));\n        names = new String[v.size()];\n        cat.debug(\"getUserNames: found \" + names.length + \" elements\");\n        v.toArray(names);\n        return names;\n    }\n\n    /**\n     * Bean setter  and getter methods\n     * @param theConfigFile the properties file\n     */\n    public static void setConfigFile(String theConfigFile) {\n        configFile = theConfigFile;\n    }\n\n    /**\n     *  set the file of users to be read.\n     * @param file to be read\n     */\n    public static void setUserfile(String file) {\n        userfile = file;\n    }\n\n    /**\n     * get all the users in in the persistent hashtable\n     * @return String\n     */\n    public String export() {\n        try {\n            JDBMEnumeration c = id.values();\n            StringBuffer buff = new StringBuffer();\n            while (c.hasMoreElements()) {\n                buff.append(c.nextElement().toString() + '\\n');\n            }\n            return buff.toString();\n        } catch (IOException e) {\n            cat.error(\"getUsers: \" + e);\n            return null;\n        }\n    }\n\n    public boolean checkSecret(String userid, String password, String authType) {\n        user = getUser(userid);\n        if (user != null) {\n            String passwd = user.getPassword();\n            if (passwd == null)\n                return false;\n            return user.checkDigest(passwd, password);\n        } else\n            return false;\n    }\n\n    public void logOut() {\n        return;\n    }\n\n    public static void main(String[] argv) {\n        if (argv.length < 1) {\n            System.out.println(\"usage: SimpleUserMgr 'file' where 'file' is a ResourceBundle (file.properties)\\n\" + \"that has an optional property 'users' which is the name of the database to be created or read\\n\" + \"and a property 'login.users' is a ldif text file containing the users to be added.\");\n            System.exit(0);\n        }\n        SimpleUserMgr.setConfigFile(argv[0]);\n        System.out.println(\"Config Resource is \" + argv[0] + \".properties\");\n        SimpleUserMgr userMgr = new SimpleUserMgr();\n        userMgr.init();\n        String file = props.getProperty(userfile, \"/users.txt\");\n        System.out.println(\"User File is \" + file);\n        if (file != null && file != \"\")\n            userMgr.addUsers(file);\n        System.out.println(\"Users Added:\\n\" + userMgr.export());\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgrTest1.java",
		"test_prompt": "// SimpleUserMgrTest1.java\npackage com.browsersoft.aacs;\n\nimport jdbm.JDBMEnumeration;\nimport jdbm.JDBMHashtable;\nimport jdbm.JDBMRecordManager;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleUserMgr}.\n* It contains ten unit test cases for the {@link SimpleUserMgr#checkSecret(String, String, String)} method.\n*/\nclass SimpleUserMgrTest1 {"
	},
	{
		"original_code": "// RequestBuilder.java\n/*\n *   CVS $Id: RequestBuilder.java,v 1.1 2006/11/06 19:56:51 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs.xacml;\n\nimport com.sun.xacml.EvaluationCtx;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.attr.AnyURIAttribute;\nimport com.sun.xacml.attr.RFC822NameAttribute;\nimport com.sun.xacml.attr.StringAttribute;\nimport com.sun.xacml.ctx.Attribute;\nimport com.sun.xacml.ctx.RequestCtx;\nimport com.sun.xacml.ctx.Subject;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\n/**\n * Class to build and generate an XACMLRequest.\n * This is a major part of what a PEP does.\n */\npublic class RequestBuilder {\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(RequestBuilder.class.getName());\n\n    /**\n     * Sets up the Subject section of the request. This Request only has\n     * one Subject section, and it uses the default category. To create a\n     * Subject with a different category, you simply specify the category\n     * when you construct the Subject object.\n     */\n    public static Set setupSubjects(String subject, Set roles, Set groups) throws URISyntaxException {\n        HashSet attributes = new HashSet();\n        // setup the id and value for the requesting subject\n        URI subjectId = new URI(\"urn:oasis:names:tc:xacml:1.0:subject:subject-id\");\n        RFC822NameAttribute value = new RFC822NameAttribute(subject);\n        // create the subject section with three attributes, the first with\n        // the subject's identity...\n        attributes.add(new Attribute(subjectId, null, null, value));\n        Iterator it = null;\n        // ...and the second with the subject's role membership(s)\n        if (roles == null) {\n            cat.warn(\"Subject \" + subject + \" has null roles\");\n        } else {\n            it = roles.iterator();\n            while (it.hasNext()) attributes.add(new Attribute(new URI(\"urn:openhre:names:security:1.0:role\"), null, null, new StringAttribute((String) (it.next()))));\n        }\n        //      ...and the third with the subject's group membership(s)\n        if (groups == null) {\n            cat.warn(\"Subject \" + subject + \" has null groups\");\n        } else {\n            it = groups.iterator();\n            while (it.hasNext()) attributes.add(new Attribute(new URI(\"urn:openhre:names:security:1.0:group\"), null, null, new StringAttribute((String) (it.next()))));\n        }\n        // bundle the attributes in a Subject with the default category\n        HashSet subjects = new HashSet();\n        subjects.add(new Subject(attributes));\n        return subjects;\n    }\n\n    /**\n     * Creates a Resource specifying the resource-id, a required attribute.\n     *\n     * @return a Set of Attributes for inclusion in a Request\n     *\n     * @throws URISyntaxException if there is a problem with a URI\n     */\n    public static Set setupResource(String resName) throws URISyntaxException {\n        HashSet resource = new HashSet();\n        /*\n        // the resource being requested\n        AnyURIAttribute value =\n            new AnyURIAttribute(new URI(resName));\n\n        // create the resource using a standard, required identifier for\n        // the resource being requested\n        resource.add(new Attribute(new URI(EvaluationCtx.RESOURCE_ID),\n                                   null, null, value));\n        */\n        URI resId = new URI(\"urn:oasis:names:tc:xacml:1.0:resource:resource-id\");\n        resource.add(new Attribute(resId, null, null, new StringAttribute(resName)));\n        return resource;\n    }\n\n    /**\n     * Creates an Action specifying the action-id, an optional attribute.\n     *\n     * @return a Set of Attributes for inclusion in a Request\n     *\n     * @throws URISyntaxException if there is a problem with a URI\n     */\n    public static Set setupAction(String actionName) throws URISyntaxException {\n        HashSet action = new HashSet();\n        // this is a standard URI that can optionally be used to specify\n        // the action being requested\n        URI actionId = new URI(\"urn:oasis:names:tc:xacml:1.0:action:action-id\");\n        // create the action\n        action.add(new Attribute(actionId, null, null, new StringAttribute(actionName)));\n        return action;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/RequestBuilderTest0.java",
		"test_prompt": "// RequestBuilderTest0.java\npackage com.browsersoft.aacs.xacml;\n\nimport com.sun.xacml.EvaluationCtx;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.attr.AnyURIAttribute;\nimport com.sun.xacml.attr.RFC822NameAttribute;\nimport com.sun.xacml.attr.StringAttribute;\nimport com.sun.xacml.ctx.Attribute;\nimport com.sun.xacml.ctx.RequestCtx;\nimport com.sun.xacml.ctx.Subject;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RequestBuilder}.\n* It contains ten unit test cases for the {@link RequestBuilder#setupSubjects(String, Set, Set)} method.\n*/\nclass RequestBuilderTest0 {"
	},
	{
		"original_code": "// RequestBuilder.java\n/*\n *   CVS $Id: RequestBuilder.java,v 1.1 2006/11/06 19:56:51 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs.xacml;\n\nimport com.sun.xacml.EvaluationCtx;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.attr.AnyURIAttribute;\nimport com.sun.xacml.attr.RFC822NameAttribute;\nimport com.sun.xacml.attr.StringAttribute;\nimport com.sun.xacml.ctx.Attribute;\nimport com.sun.xacml.ctx.RequestCtx;\nimport com.sun.xacml.ctx.Subject;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\n/**\n * Class to build and generate an XACMLRequest.\n * This is a major part of what a PEP does.\n */\npublic class RequestBuilder {\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(RequestBuilder.class.getName());\n\n    /**\n     * Sets up the Subject section of the request. This Request only has\n     * one Subject section, and it uses the default category. To create a\n     * Subject with a different category, you simply specify the category\n     * when you construct the Subject object.\n     */\n    public static Set setupSubjects(String subject, Set roles, Set groups) throws URISyntaxException {\n        HashSet attributes = new HashSet();\n        // setup the id and value for the requesting subject\n        URI subjectId = new URI(\"urn:oasis:names:tc:xacml:1.0:subject:subject-id\");\n        RFC822NameAttribute value = new RFC822NameAttribute(subject);\n        // create the subject section with three attributes, the first with\n        // the subject's identity...\n        attributes.add(new Attribute(subjectId, null, null, value));\n        Iterator it = null;\n        // ...and the second with the subject's role membership(s)\n        if (roles == null) {\n            cat.warn(\"Subject \" + subject + \" has null roles\");\n        } else {\n            it = roles.iterator();\n            while (it.hasNext()) attributes.add(new Attribute(new URI(\"urn:openhre:names:security:1.0:role\"), null, null, new StringAttribute((String) (it.next()))));\n        }\n        //      ...and the third with the subject's group membership(s)\n        if (groups == null) {\n            cat.warn(\"Subject \" + subject + \" has null groups\");\n        } else {\n            it = groups.iterator();\n            while (it.hasNext()) attributes.add(new Attribute(new URI(\"urn:openhre:names:security:1.0:group\"), null, null, new StringAttribute((String) (it.next()))));\n        }\n        // bundle the attributes in a Subject with the default category\n        HashSet subjects = new HashSet();\n        subjects.add(new Subject(attributes));\n        return subjects;\n    }\n\n    /**\n     * Creates a Resource specifying the resource-id, a required attribute.\n     *\n     * @return a Set of Attributes for inclusion in a Request\n     *\n     * @throws URISyntaxException if there is a problem with a URI\n     */\n    public static Set setupResource(String resName) throws URISyntaxException {\n        HashSet resource = new HashSet();\n        /*\n        // the resource being requested\n        AnyURIAttribute value =\n            new AnyURIAttribute(new URI(resName));\n\n        // create the resource using a standard, required identifier for\n        // the resource being requested\n        resource.add(new Attribute(new URI(EvaluationCtx.RESOURCE_ID),\n                                   null, null, value));\n        */\n        URI resId = new URI(\"urn:oasis:names:tc:xacml:1.0:resource:resource-id\");\n        resource.add(new Attribute(resId, null, null, new StringAttribute(resName)));\n        return resource;\n    }\n\n    /**\n     * Creates an Action specifying the action-id, an optional attribute.\n     *\n     * @return a Set of Attributes for inclusion in a Request\n     *\n     * @throws URISyntaxException if there is a problem with a URI\n     */\n    public static Set setupAction(String actionName) throws URISyntaxException {\n        HashSet action = new HashSet();\n        // this is a standard URI that can optionally be used to specify\n        // the action being requested\n        URI actionId = new URI(\"urn:oasis:names:tc:xacml:1.0:action:action-id\");\n        // create the action\n        action.add(new Attribute(actionId, null, null, new StringAttribute(actionName)));\n        return action;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/RequestBuilderTest1.java",
		"test_prompt": "// RequestBuilderTest1.java\npackage com.browsersoft.aacs.xacml;\n\nimport com.sun.xacml.EvaluationCtx;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.attr.AnyURIAttribute;\nimport com.sun.xacml.attr.RFC822NameAttribute;\nimport com.sun.xacml.attr.StringAttribute;\nimport com.sun.xacml.ctx.Attribute;\nimport com.sun.xacml.ctx.RequestCtx;\nimport com.sun.xacml.ctx.Subject;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RequestBuilder}.\n* It contains ten unit test cases for the {@link RequestBuilder#setupResource(String)} method.\n*/\nclass RequestBuilderTest1 {"
	},
	{
		"original_code": "// RequestBuilder.java\n/*\n *   CVS $Id: RequestBuilder.java,v 1.1 2006/11/06 19:56:51 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs.xacml;\n\nimport com.sun.xacml.EvaluationCtx;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.attr.AnyURIAttribute;\nimport com.sun.xacml.attr.RFC822NameAttribute;\nimport com.sun.xacml.attr.StringAttribute;\nimport com.sun.xacml.ctx.Attribute;\nimport com.sun.xacml.ctx.RequestCtx;\nimport com.sun.xacml.ctx.Subject;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\n/**\n * Class to build and generate an XACMLRequest.\n * This is a major part of what a PEP does.\n */\npublic class RequestBuilder {\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(RequestBuilder.class.getName());\n\n    /**\n     * Sets up the Subject section of the request. This Request only has\n     * one Subject section, and it uses the default category. To create a\n     * Subject with a different category, you simply specify the category\n     * when you construct the Subject object.\n     */\n    public static Set setupSubjects(String subject, Set roles, Set groups) throws URISyntaxException {\n        HashSet attributes = new HashSet();\n        // setup the id and value for the requesting subject\n        URI subjectId = new URI(\"urn:oasis:names:tc:xacml:1.0:subject:subject-id\");\n        RFC822NameAttribute value = new RFC822NameAttribute(subject);\n        // create the subject section with three attributes, the first with\n        // the subject's identity...\n        attributes.add(new Attribute(subjectId, null, null, value));\n        Iterator it = null;\n        // ...and the second with the subject's role membership(s)\n        if (roles == null) {\n            cat.warn(\"Subject \" + subject + \" has null roles\");\n        } else {\n            it = roles.iterator();\n            while (it.hasNext()) attributes.add(new Attribute(new URI(\"urn:openhre:names:security:1.0:role\"), null, null, new StringAttribute((String) (it.next()))));\n        }\n        //      ...and the third with the subject's group membership(s)\n        if (groups == null) {\n            cat.warn(\"Subject \" + subject + \" has null groups\");\n        } else {\n            it = groups.iterator();\n            while (it.hasNext()) attributes.add(new Attribute(new URI(\"urn:openhre:names:security:1.0:group\"), null, null, new StringAttribute((String) (it.next()))));\n        }\n        // bundle the attributes in a Subject with the default category\n        HashSet subjects = new HashSet();\n        subjects.add(new Subject(attributes));\n        return subjects;\n    }\n\n    /**\n     * Creates a Resource specifying the resource-id, a required attribute.\n     *\n     * @return a Set of Attributes for inclusion in a Request\n     *\n     * @throws URISyntaxException if there is a problem with a URI\n     */\n    public static Set setupResource(String resName) throws URISyntaxException {\n        HashSet resource = new HashSet();\n        /*\n        // the resource being requested\n        AnyURIAttribute value =\n            new AnyURIAttribute(new URI(resName));\n\n        // create the resource using a standard, required identifier for\n        // the resource being requested\n        resource.add(new Attribute(new URI(EvaluationCtx.RESOURCE_ID),\n                                   null, null, value));\n        */\n        URI resId = new URI(\"urn:oasis:names:tc:xacml:1.0:resource:resource-id\");\n        resource.add(new Attribute(resId, null, null, new StringAttribute(resName)));\n        return resource;\n    }\n\n    /**\n     * Creates an Action specifying the action-id, an optional attribute.\n     *\n     * @return a Set of Attributes for inclusion in a Request\n     *\n     * @throws URISyntaxException if there is a problem with a URI\n     */\n    public static Set setupAction(String actionName) throws URISyntaxException {\n        HashSet action = new HashSet();\n        // this is a standard URI that can optionally be used to specify\n        // the action being requested\n        URI actionId = new URI(\"urn:oasis:names:tc:xacml:1.0:action:action-id\");\n        // create the action\n        action.add(new Attribute(actionId, null, null, new StringAttribute(actionName)));\n        return action;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/RequestBuilderTest2.java",
		"test_prompt": "// RequestBuilderTest2.java\npackage com.browsersoft.aacs.xacml;\n\nimport com.sun.xacml.EvaluationCtx;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.attr.AnyURIAttribute;\nimport com.sun.xacml.attr.RFC822NameAttribute;\nimport com.sun.xacml.attr.StringAttribute;\nimport com.sun.xacml.ctx.Attribute;\nimport com.sun.xacml.ctx.RequestCtx;\nimport com.sun.xacml.ctx.Subject;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RequestBuilder}.\n* It contains ten unit test cases for the {@link RequestBuilder#setupAction(String)} method.\n*/\nclass RequestBuilderTest2 {"
	},
	{
		"original_code": "// PDPadapter.java\n/*\n *   CVS $Id: PDPadapter.java,v 1.1 2006/11/06 19:56:51 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs.xacml;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport com.sun.xacml.ConfigurationStore;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.PDP;\nimport com.sun.xacml.ParsingException;\nimport com.sun.xacml.ctx.RequestCtx;\nimport com.sun.xacml.ctx.ResponseCtx;\nimport com.sun.xacml.ctx.Result;\n\n/**\n * This class holds the PDP (Policy Decision Point) that is used to make\n * Access Control decisions. The PDP is configured from the XACML configuration\n * file.\n *\n * @since 1.1\n * @author seth proctor\n */\npublic class PDPadapter {\n\n    // this is the actual PDP object we'll use for evaluation\n    private PDP pdp = null;\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(PDPadapter.class.getName());\n\n    // This creates a PDPadapter with a PDP based on the configuration\n    // defined by the runtime property com.sun.xcaml.PDPConfigFile.\n    public PDPadapter(String configFile) throws Exception {\n        // set the configuration file containing information on policies, etc\n        cat.debug(\"Setting System property com.sun.xacml.PDPConfigFile to \" + configFile);\n        Properties props = System.getProperties();\n        props.put(\"com.sun.xacml.PDPConfigFile\", configFile);\n        System.setProperties(props);\n        // load the configuration\n        ConfigurationStore store = new ConfigurationStore();\n        // use the default factories from the configuration\n        store.useDefaultFactories();\n        // get the PDP configuration's and setup the PDP\n        pdp = new PDP(store.getDefaultPDPConfig());\n    }\n\n    /**\n     * Evaluate the supplied Request according to the\n     * current PDP and return the Response Context.\n     */\n    public ResponseCtx evaluate(String requestFile) throws IOException, ParsingException {\n        // setup the request based on the file\n        RequestCtx request = RequestCtx.getInstance(new FileInputStream(requestFile));\n        // evaluate the request\n        return pdp.evaluate(request);\n    }\n\n    /**\n     * Evaluate the supplied Request Context according to the\n     * current PDP and return the Access Control decision.\n     */\n    public int makeDecision(RequestCtx request) {\n        int result_value = -1;\n        // evaluate the request\n        try {\n            ResponseCtx response = pdp.evaluate(request);\n            Set xacml_results = response.getResults();\n            Iterator xacml_iter = xacml_results.iterator();\n            while (xacml_iter.hasNext()) {\n                Result xacml_result = (Result) xacml_iter.next();\n                xacml_result.encode(System.out, new Indenter());\n                result_value = xacml_result.getDecision();\n            }\n        } catch (Exception e) {\n            cat.error(e);\n        }\n        return result_value;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/PDPadapterTest0.java",
		"test_prompt": "// PDPadapterTest0.java\npackage com.browsersoft.aacs.xacml;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport com.sun.xacml.ConfigurationStore;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.PDP;\nimport com.sun.xacml.ParsingException;\nimport com.sun.xacml.ctx.RequestCtx;\nimport com.sun.xacml.ctx.ResponseCtx;\nimport com.sun.xacml.ctx.Result;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PDPadapter}.\n* It contains ten unit test cases for the {@link PDPadapter#evaluate(String)} method.\n*/\nclass PDPadapterTest0 {"
	},
	{
		"original_code": "// PDPadapter.java\n/*\n *   CVS $Id: PDPadapter.java,v 1.1 2006/11/06 19:56:51 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs.xacml;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport com.sun.xacml.ConfigurationStore;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.PDP;\nimport com.sun.xacml.ParsingException;\nimport com.sun.xacml.ctx.RequestCtx;\nimport com.sun.xacml.ctx.ResponseCtx;\nimport com.sun.xacml.ctx.Result;\n\n/**\n * This class holds the PDP (Policy Decision Point) that is used to make\n * Access Control decisions. The PDP is configured from the XACML configuration\n * file.\n *\n * @since 1.1\n * @author seth proctor\n */\npublic class PDPadapter {\n\n    // this is the actual PDP object we'll use for evaluation\n    private PDP pdp = null;\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(PDPadapter.class.getName());\n\n    // This creates a PDPadapter with a PDP based on the configuration\n    // defined by the runtime property com.sun.xcaml.PDPConfigFile.\n    public PDPadapter(String configFile) throws Exception {\n        // set the configuration file containing information on policies, etc\n        cat.debug(\"Setting System property com.sun.xacml.PDPConfigFile to \" + configFile);\n        Properties props = System.getProperties();\n        props.put(\"com.sun.xacml.PDPConfigFile\", configFile);\n        System.setProperties(props);\n        // load the configuration\n        ConfigurationStore store = new ConfigurationStore();\n        // use the default factories from the configuration\n        store.useDefaultFactories();\n        // get the PDP configuration's and setup the PDP\n        pdp = new PDP(store.getDefaultPDPConfig());\n    }\n\n    /**\n     * Evaluate the supplied Request according to the\n     * current PDP and return the Response Context.\n     */\n    public ResponseCtx evaluate(String requestFile) throws IOException, ParsingException {\n        // setup the request based on the file\n        RequestCtx request = RequestCtx.getInstance(new FileInputStream(requestFile));\n        // evaluate the request\n        return pdp.evaluate(request);\n    }\n\n    /**\n     * Evaluate the supplied Request Context according to the\n     * current PDP and return the Access Control decision.\n     */\n    public int makeDecision(RequestCtx request) {\n        int result_value = -1;\n        // evaluate the request\n        try {\n            ResponseCtx response = pdp.evaluate(request);\n            Set xacml_results = response.getResults();\n            Iterator xacml_iter = xacml_results.iterator();\n            while (xacml_iter.hasNext()) {\n                Result xacml_result = (Result) xacml_iter.next();\n                xacml_result.encode(System.out, new Indenter());\n                result_value = xacml_result.getDecision();\n            }\n        } catch (Exception e) {\n            cat.error(e);\n        }\n        return result_value;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/PDPadapterTest1.java",
		"test_prompt": "// PDPadapterTest1.java\npackage com.browsersoft.aacs.xacml;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport com.sun.xacml.ConfigurationStore;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.PDP;\nimport com.sun.xacml.ParsingException;\nimport com.sun.xacml.ctx.RequestCtx;\nimport com.sun.xacml.ctx.ResponseCtx;\nimport com.sun.xacml.ctx.Result;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PDPadapter}.\n* It contains ten unit test cases for the {@link PDPadapter#makeDecision(RequestCtx)} method.\n*/\nclass PDPadapterTest1 {"
	},
	{
		"original_code": "// FilePolicyModule.java\n/*\n * @(#)FilePolicyModule.java\n *\n * Copyright 2003-2006 Sun Microsystems, Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   1. Redistribution of source code must retain the above copyright notice,\n *      this list of conditions and the following disclaimer.\n * \n *   2. Redistribution in binary form must reproduce the above copyright\n *      notice, this list of conditions and the following disclaimer in the\n *      documentation and/or other materials provided with the distribution.\n *\n * Neither the name of Sun Microsystems, Inc. or the names of contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n * \n * This software is provided \"AS IS,\" without a warranty of any kind. ALL\n * EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING\n * ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE\n * OR NON-INFRINGEMENT, ARE HEREBY EXCLUDED. SUN MICROSYSTEMS, INC. (\"SUN\")\n * AND ITS LICENSORS SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE\n * AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS\n * DERIVATIVES. IN NO EVENT WILL SUN OR ITS LICENSORS BE LIABLE FOR ANY LOST\n * REVENUE, PROFIT OR DATA, OR FOR DIRECT, INDIRECT, SPECIAL, CONSEQUENTIAL,\n * INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER CAUSED AND REGARDLESS OF THE THEORY\n * OF LIABILITY, ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE,\n * EVEN IF SUN HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n *\n * You acknowledge that this software is not designed or intended for use in\n * the design, construction, operation or maintenance of any nuclear facility.\n */\npackage com.browsersoft.aacs.xacml;\n\nimport com.browsersoft.aacs.Login;\nimport com.sun.xacml.AbstractPolicy;\nimport com.sun.xacml.EvaluationCtx;\nimport com.sun.xacml.MatchResult;\nimport com.sun.xacml.ParsingException;\nimport com.sun.xacml.Policy;\nimport com.sun.xacml.ctx.Status;\nimport com.sun.xacml.PolicyReference;\nimport com.sun.xacml.PolicySet;\nimport com.sun.xacml.finder.PolicyFinder;\nimport com.sun.xacml.finder.PolicyFinderModule;\nimport com.sun.xacml.finder.PolicyFinderResult;\nimport com.sun.xacml.PolicyMetaData;\nimport com.sun.xacml.PolicyReference;\nimport com.sun.xacml.PolicySet;\nimport com.sun.xacml.VersionConstraints;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport com.sun.xacml.support.finder.PolicyReader;\n\n/**\n * This module represents a collection of files containing polices,\n * each of which will be searched through when trying to find a\n * policy that is applicable to a specific request. It does not support\n * policy references.\n * <p>\n * Note that this class used to be provided in the\n * <code>com.sun.xacml.finder.impl</code> package with a warning that it\n * would move out of the core packages eventually. This is partly because\n * this class doesn't represent standard functionality, and partly because\n * it isn't designed to be generally useful as anything more than an\n * example. Because so many people have used this class, however, it stayed\n * in place until the 2.0 release.\n * <p>\n * As of the 2.0 release, you may still use this class (in its new location),\n * but you are encouraged to migrate to the new support modules that are\n * much richer and designed for general-purpose use. Also, note that the\n * <code>loadPolicy</code> methods that used to be available from this class\n * have been removed. That functionality has been replaced by the much more\n * useful <code>PolicyReader</code> class. If you need to load policies\n * directly, you should consider that new class.\n *\n * @since 1.0\n * @author Seth Proctor\n */\npublic class FilePolicyModule extends com.sun.xacml.support.finder.FilePolicyModule {\n\n    // the reader used to load all policies\n    private PolicyReader reader;\n\n    // the Policy directory\n    private String policyDir;\n\n    // the schema file we're using, if any\n    private File schemaFile = null;\n\n    // the logger we'll use for all messages\n    private static final Logger logger = Logger.getLogger(FilePolicyModule.class.getName());\n\n    /**\n     * Constructor which retrieves the schema file to validate policies against\n     * from the <code>PolicyReader.POLICY_SCHEMA_PROPERTY</code>. If the\n     * retrieved property is null, then no schema validation will occur.\n     */\n    public FilePolicyModule() {\n        super();\n        String schemaName = System.getProperty(PolicyReader.POLICY_SCHEMA_PROPERTY);\n        if (schemaName != null)\n            schemaFile = new File(schemaName);\n    }\n\n    /**\n     * Constructor that uses the specified <code>File</code> as the schema\n     * file for XML validation. If schema validation is not desired, a null\n     * value should be used.\n     *\n     * @param schemaFile the schema file to validate policies against,\n     *                   or null if schema validation is not desired.\n     */\n    public FilePolicyModule(File schemaFile) {\n        super(schemaFile);\n        this.schemaFile = schemaFile;\n    }\n\n    /**\n     * Constructor that uses the specified <code>String</code> as the schema\n     * file for XML validation. If schema validation is not desired, a null\n     * value should be used.\n     *\n     * @param schemaFile the schema file to validate policies against,\n     *                   or null if schema validation is not desired.\n     */\n    public FilePolicyModule(String schemaFile) {\n        super(schemaFile);\n        this.schemaFile = ((schemaFile != null) ? new File(schemaFile) : null);\n    }\n\n    /**\n     * Constructor that specifies a set of initial policy files to use. This\n     * retrieves the schema file to validate policies against from the\n     * <code>PolicyReader.POLICY_SCHEMA_PROPERTY</code>. If the retrieved\n     * property is null, then no schema validation will occur.\n     *\n     * @param fileNames a <code>List</code> of <code>String</code>s that\n     *                  identify policy files\n     */\n    public FilePolicyModule(List fileNames) {\n        super(fileNames);\n        String schemaName = System.getProperty(PolicyReader.POLICY_SCHEMA_PROPERTY);\n        if (schemaName != null)\n            schemaFile = new File(schemaName);\n    }\n\n    /**\n     * Constructor that specifies a set of initial policy files to use and\n     * the schema file used to validate the policies. If schema validation is\n     * not desired, a null value should be used.\n     *\n     * @param fileNames a <code>List</code> of <code>String</code>s that\n     *                  identify policy files\n     * @param schemaFile the schema file to validate policies against,\n     *                   or null if schema validation is not desired.\n     */\n    public FilePolicyModule(List fileNames, String schemaFile) {\n        super(fileNames, schemaFile);\n        this.schemaFile = ((schemaFile != null) ? new File(schemaFile) : null);\n    }\n\n    /**\n     * Initializes the <code>FilePolicyModule</code> by loading\n     * the policies contained in the collection of files associated\n     * with this module. This method also uses the specified\n     * <code>PolicyFinder</code> to help in instantiating PolicySets.\n     *\n     * init() also gets the Policy file directory to be used for\n     * resolving references.\n     *\n     * @param finder a PolicyFinder used to help in instantiating PolicySets\n     */\n    public void init(PolicyFinder finder) {\n        super.init(finder);\n        reader = new PolicyReader(finder, logger, schemaFile);\n        policyDir = Login.getProps().getProperty(\"XACMLPolicyDir\", \"webapps/share/WEB-INF/classes/xacml/policy/\");\n    }\n\n    /**\n     * Always returns <code>true</code> since this module does support\n     * finding policies based on reference.\n     *\n     * @return true\n     */\n    public boolean isIdReferenceSupported() {\n        return true;\n    }\n\n    /**\n     * Attempts to find a policy by reference, based on the provided\n     * parameters. Specifically, this module will try to treat the reference\n     * as a URL, and resolve that URL directly. If the reference is not\n     * a valid URL, cannot be resolved, or does not resolve to an XACML\n     * policy, then no matching policy is returned. This method never\n     * returns an error.\n     *\n     * @param idReference an identifier specifying some policy\n     * @param type type of reference (policy or policySet) as identified by\n     *             the fields in <code>PolicyReference</code>\n     * @param constraints any optional constraints on the version of the\n     *                    referenced policy (this will never be null, but\n     *                    it may impose no constraints, and in fact will\n     *                    never impose constraints when used from a pre-2.0\n     *                    XACML policy)\n     * @param parentMetaData the meta-data from the parent policy, which\n     *                       provides XACML version, factories, etc.\n     *\n     * @return the result of looking for a matching policy\n     */\n    public PolicyFinderResult findPolicy(URI idReference, int type, VersionConstraints constraints, PolicyMetaData parentMetaData) {\n        // see if the URI is in fact a URL\n        URL url = null;\n        try {\n            url = new URL(\"file:\" + policyDir + idReference.toString() + \".xml\");\n        } catch (MalformedURLException murle) {\n            // it's not a URL, so we can't handle this reference\n            return new PolicyFinderResult();\n        }\n        // try resolving the URL\n        AbstractPolicy policy = null;\n        try {\n            policy = reader.readPolicy(url);\n        } catch (ParsingException pe) {\n            // An error loading the policy could be many things (the URL\n            // doesn't actually resolve a policy, the server is down, the\n            // policy is invalid, etc.). This could be interpreted as an\n            // error case, or simply as a case where no applicable policy\n            // is available (as is done when we pre-load policies). This\n            // module chooses the latter interpretation.\n            return new PolicyFinderResult();\n        }\n        // check that we got the right kind of policy...if we didn't, then\n        // we can't handle the reference\n        if (type == PolicyReference.POLICY_REFERENCE) {\n            if (!(policy instanceof Policy))\n                return new PolicyFinderResult();\n        } else {\n            if (!(policy instanceof PolicySet))\n                return new PolicyFinderResult();\n        }\n        // finally, check that the constraints match ... note that in a more\n        // powerful module, you could actually have used the constraints to\n        // construct a more specific URL, passed the constraints to the\n        // server, etc., but this example module is staying simple\n        if (!constraints.meetsConstraint(policy.getVersion()))\n            return new PolicyFinderResult();\n        // if we got here, then we successfully resolved a policy that is\n        // the correct type, so return it\n        return new PolicyFinderResult(policy);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/FilePolicyModuleTest0.java",
		"test_prompt": "// FilePolicyModuleTest0.java\npackage com.browsersoft.aacs.xacml;\n\nimport com.browsersoft.aacs.Login;\nimport com.sun.xacml.AbstractPolicy;\nimport com.sun.xacml.EvaluationCtx;\nimport com.sun.xacml.MatchResult;\nimport com.sun.xacml.ParsingException;\nimport com.sun.xacml.Policy;\nimport com.sun.xacml.ctx.Status;\nimport com.sun.xacml.PolicyReference;\nimport com.sun.xacml.PolicySet;\nimport com.sun.xacml.finder.PolicyFinder;\nimport com.sun.xacml.finder.PolicyFinderModule;\nimport com.sun.xacml.finder.PolicyFinderResult;\nimport com.sun.xacml.PolicyMetaData;\nimport com.sun.xacml.PolicyReference;\nimport com.sun.xacml.PolicySet;\nimport com.sun.xacml.VersionConstraints;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport com.sun.xacml.support.finder.PolicyReader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilePolicyModule}.\n* It contains ten unit test cases for the {@link FilePolicyModule#isIdReferenceSupported()} method.\n*/\nclass FilePolicyModuleTest0 {"
	},
	{
		"original_code": "// FilePolicyModule.java\n/*\n * @(#)FilePolicyModule.java\n *\n * Copyright 2003-2006 Sun Microsystems, Inc. All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   1. Redistribution of source code must retain the above copyright notice,\n *      this list of conditions and the following disclaimer.\n * \n *   2. Redistribution in binary form must reproduce the above copyright\n *      notice, this list of conditions and the following disclaimer in the\n *      documentation and/or other materials provided with the distribution.\n *\n * Neither the name of Sun Microsystems, Inc. or the names of contributors may\n * be used to endorse or promote products derived from this software without\n * specific prior written permission.\n * \n * This software is provided \"AS IS,\" without a warranty of any kind. ALL\n * EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING\n * ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE\n * OR NON-INFRINGEMENT, ARE HEREBY EXCLUDED. SUN MICROSYSTEMS, INC. (\"SUN\")\n * AND ITS LICENSORS SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE\n * AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS\n * DERIVATIVES. IN NO EVENT WILL SUN OR ITS LICENSORS BE LIABLE FOR ANY LOST\n * REVENUE, PROFIT OR DATA, OR FOR DIRECT, INDIRECT, SPECIAL, CONSEQUENTIAL,\n * INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER CAUSED AND REGARDLESS OF THE THEORY\n * OF LIABILITY, ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE,\n * EVEN IF SUN HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n *\n * You acknowledge that this software is not designed or intended for use in\n * the design, construction, operation or maintenance of any nuclear facility.\n */\npackage com.browsersoft.aacs.xacml;\n\nimport com.browsersoft.aacs.Login;\nimport com.sun.xacml.AbstractPolicy;\nimport com.sun.xacml.EvaluationCtx;\nimport com.sun.xacml.MatchResult;\nimport com.sun.xacml.ParsingException;\nimport com.sun.xacml.Policy;\nimport com.sun.xacml.ctx.Status;\nimport com.sun.xacml.PolicyReference;\nimport com.sun.xacml.PolicySet;\nimport com.sun.xacml.finder.PolicyFinder;\nimport com.sun.xacml.finder.PolicyFinderModule;\nimport com.sun.xacml.finder.PolicyFinderResult;\nimport com.sun.xacml.PolicyMetaData;\nimport com.sun.xacml.PolicyReference;\nimport com.sun.xacml.PolicySet;\nimport com.sun.xacml.VersionConstraints;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport com.sun.xacml.support.finder.PolicyReader;\n\n/**\n * This module represents a collection of files containing polices,\n * each of which will be searched through when trying to find a\n * policy that is applicable to a specific request. It does not support\n * policy references.\n * <p>\n * Note that this class used to be provided in the\n * <code>com.sun.xacml.finder.impl</code> package with a warning that it\n * would move out of the core packages eventually. This is partly because\n * this class doesn't represent standard functionality, and partly because\n * it isn't designed to be generally useful as anything more than an\n * example. Because so many people have used this class, however, it stayed\n * in place until the 2.0 release.\n * <p>\n * As of the 2.0 release, you may still use this class (in its new location),\n * but you are encouraged to migrate to the new support modules that are\n * much richer and designed for general-purpose use. Also, note that the\n * <code>loadPolicy</code> methods that used to be available from this class\n * have been removed. That functionality has been replaced by the much more\n * useful <code>PolicyReader</code> class. If you need to load policies\n * directly, you should consider that new class.\n *\n * @since 1.0\n * @author Seth Proctor\n */\npublic class FilePolicyModule extends com.sun.xacml.support.finder.FilePolicyModule {\n\n    // the reader used to load all policies\n    private PolicyReader reader;\n\n    // the Policy directory\n    private String policyDir;\n\n    // the schema file we're using, if any\n    private File schemaFile = null;\n\n    // the logger we'll use for all messages\n    private static final Logger logger = Logger.getLogger(FilePolicyModule.class.getName());\n\n    /**\n     * Constructor which retrieves the schema file to validate policies against\n     * from the <code>PolicyReader.POLICY_SCHEMA_PROPERTY</code>. If the\n     * retrieved property is null, then no schema validation will occur.\n     */\n    public FilePolicyModule() {\n        super();\n        String schemaName = System.getProperty(PolicyReader.POLICY_SCHEMA_PROPERTY);\n        if (schemaName != null)\n            schemaFile = new File(schemaName);\n    }\n\n    /**\n     * Constructor that uses the specified <code>File</code> as the schema\n     * file for XML validation. If schema validation is not desired, a null\n     * value should be used.\n     *\n     * @param schemaFile the schema file to validate policies against,\n     *                   or null if schema validation is not desired.\n     */\n    public FilePolicyModule(File schemaFile) {\n        super(schemaFile);\n        this.schemaFile = schemaFile;\n    }\n\n    /**\n     * Constructor that uses the specified <code>String</code> as the schema\n     * file for XML validation. If schema validation is not desired, a null\n     * value should be used.\n     *\n     * @param schemaFile the schema file to validate policies against,\n     *                   or null if schema validation is not desired.\n     */\n    public FilePolicyModule(String schemaFile) {\n        super(schemaFile);\n        this.schemaFile = ((schemaFile != null) ? new File(schemaFile) : null);\n    }\n\n    /**\n     * Constructor that specifies a set of initial policy files to use. This\n     * retrieves the schema file to validate policies against from the\n     * <code>PolicyReader.POLICY_SCHEMA_PROPERTY</code>. If the retrieved\n     * property is null, then no schema validation will occur.\n     *\n     * @param fileNames a <code>List</code> of <code>String</code>s that\n     *                  identify policy files\n     */\n    public FilePolicyModule(List fileNames) {\n        super(fileNames);\n        String schemaName = System.getProperty(PolicyReader.POLICY_SCHEMA_PROPERTY);\n        if (schemaName != null)\n            schemaFile = new File(schemaName);\n    }\n\n    /**\n     * Constructor that specifies a set of initial policy files to use and\n     * the schema file used to validate the policies. If schema validation is\n     * not desired, a null value should be used.\n     *\n     * @param fileNames a <code>List</code> of <code>String</code>s that\n     *                  identify policy files\n     * @param schemaFile the schema file to validate policies against,\n     *                   or null if schema validation is not desired.\n     */\n    public FilePolicyModule(List fileNames, String schemaFile) {\n        super(fileNames, schemaFile);\n        this.schemaFile = ((schemaFile != null) ? new File(schemaFile) : null);\n    }\n\n    /**\n     * Initializes the <code>FilePolicyModule</code> by loading\n     * the policies contained in the collection of files associated\n     * with this module. This method also uses the specified\n     * <code>PolicyFinder</code> to help in instantiating PolicySets.\n     *\n     * init() also gets the Policy file directory to be used for\n     * resolving references.\n     *\n     * @param finder a PolicyFinder used to help in instantiating PolicySets\n     */\n    public void init(PolicyFinder finder) {\n        super.init(finder);\n        reader = new PolicyReader(finder, logger, schemaFile);\n        policyDir = Login.getProps().getProperty(\"XACMLPolicyDir\", \"webapps/share/WEB-INF/classes/xacml/policy/\");\n    }\n\n    /**\n     * Always returns <code>true</code> since this module does support\n     * finding policies based on reference.\n     *\n     * @return true\n     */\n    public boolean isIdReferenceSupported() {\n        return true;\n    }\n\n    /**\n     * Attempts to find a policy by reference, based on the provided\n     * parameters. Specifically, this module will try to treat the reference\n     * as a URL, and resolve that URL directly. If the reference is not\n     * a valid URL, cannot be resolved, or does not resolve to an XACML\n     * policy, then no matching policy is returned. This method never\n     * returns an error.\n     *\n     * @param idReference an identifier specifying some policy\n     * @param type type of reference (policy or policySet) as identified by\n     *             the fields in <code>PolicyReference</code>\n     * @param constraints any optional constraints on the version of the\n     *                    referenced policy (this will never be null, but\n     *                    it may impose no constraints, and in fact will\n     *                    never impose constraints when used from a pre-2.0\n     *                    XACML policy)\n     * @param parentMetaData the meta-data from the parent policy, which\n     *                       provides XACML version, factories, etc.\n     *\n     * @return the result of looking for a matching policy\n     */\n    public PolicyFinderResult findPolicy(URI idReference, int type, VersionConstraints constraints, PolicyMetaData parentMetaData) {\n        // see if the URI is in fact a URL\n        URL url = null;\n        try {\n            url = new URL(\"file:\" + policyDir + idReference.toString() + \".xml\");\n        } catch (MalformedURLException murle) {\n            // it's not a URL, so we can't handle this reference\n            return new PolicyFinderResult();\n        }\n        // try resolving the URL\n        AbstractPolicy policy = null;\n        try {\n            policy = reader.readPolicy(url);\n        } catch (ParsingException pe) {\n            // An error loading the policy could be many things (the URL\n            // doesn't actually resolve a policy, the server is down, the\n            // policy is invalid, etc.). This could be interpreted as an\n            // error case, or simply as a case where no applicable policy\n            // is available (as is done when we pre-load policies). This\n            // module chooses the latter interpretation.\n            return new PolicyFinderResult();\n        }\n        // check that we got the right kind of policy...if we didn't, then\n        // we can't handle the reference\n        if (type == PolicyReference.POLICY_REFERENCE) {\n            if (!(policy instanceof Policy))\n                return new PolicyFinderResult();\n        } else {\n            if (!(policy instanceof PolicySet))\n                return new PolicyFinderResult();\n        }\n        // finally, check that the constraints match ... note that in a more\n        // powerful module, you could actually have used the constraints to\n        // construct a more specific URL, passed the constraints to the\n        // server, etc., but this example module is staying simple\n        if (!constraints.meetsConstraint(policy.getVersion()))\n            return new PolicyFinderResult();\n        // if we got here, then we successfully resolved a policy that is\n        // the correct type, so return it\n        return new PolicyFinderResult(policy);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/FilePolicyModuleTest1.java",
		"test_prompt": "// FilePolicyModuleTest1.java\npackage com.browsersoft.aacs.xacml;\n\nimport com.browsersoft.aacs.Login;\nimport com.sun.xacml.AbstractPolicy;\nimport com.sun.xacml.EvaluationCtx;\nimport com.sun.xacml.MatchResult;\nimport com.sun.xacml.ParsingException;\nimport com.sun.xacml.Policy;\nimport com.sun.xacml.ctx.Status;\nimport com.sun.xacml.PolicyReference;\nimport com.sun.xacml.PolicySet;\nimport com.sun.xacml.finder.PolicyFinder;\nimport com.sun.xacml.finder.PolicyFinderModule;\nimport com.sun.xacml.finder.PolicyFinderResult;\nimport com.sun.xacml.PolicyMetaData;\nimport com.sun.xacml.PolicyReference;\nimport com.sun.xacml.PolicySet;\nimport com.sun.xacml.VersionConstraints;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport com.sun.xacml.support.finder.PolicyReader;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilePolicyModule}.\n* It contains ten unit test cases for the {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.\n*/\nclass FilePolicyModuleTest1 {"
	},
	{
		"original_code": "// User.java\n/*\n *   CVS $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\n\n/**\n * User class contains all the necessary attributes of a logged in user\n * @author $Author: grodecki $\n * @version $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n */\npublic class User implements Comparable, Serializable {\n\n    // static final long serialVersionUID = -3313178117323543078L;\n    static final long serialVersionUID = 6729362233633496647L;\n\n    // id (key)\n    private String userId = \"\";\n\n    // current IP address\n    private String ipAddr;\n\n    //cn CommonName\n    private String userName = \"\";\n\n    private String email = \"\";\n\n    private Set roles;\n\n    private Set groups;\n\n    // Groups active for the user based on his location\n    private Set activegroups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    // user password change required before using the system?\n    private boolean passchange = false;\n\n    private Set allowedips;\n\n    LdapContext dctx;\n\n    // private String dn;  //Distinguished name    (cn, o, c)\n    // c\n    private String country = \"\";\n\n    // o\n    private String organization = \"\";\n\n    // encrypted    // userPassword\n    private String passwd = \"\";\n\n    // surname\n    private String sn = \"\";\n\n    private transient MessageDigest sha;\n\n    private static String sep = System.getProperty(\"line.separator\");\n\n    private static String salt = \"XXXX\";\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(User.class.getName());\n\n    public User() {\n    }\n\n    /**\n     * User object constructed from userId and userName\n     */\n    public User(String userId, String userName) {\n        this();\n        //\tSystem.out.println(\"userId: \"+userId);\n        //id\n        this.userId = userId.trim();\n        //cn\n        this.userName = userName.trim();\n    }\n\n    public void init() {\n        try {\n            sha = MessageDigest.getInstance(\"SHA-1\");\n        } catch (java.security.NoSuchAlgorithmException e) {\n            cat.error(\"SHA-1 constructor failed: \", e);\n        }\n    }\n\n    /**\n     * get userId previously set\n     * @return userId\n     */\n    public String getUserId() {\n        //\tSystem.out.println(\"getUserId: \"+userId);\n        return userId;\n    }\n\n    /**\n     * set the UserId\n     * @param id to be set\n     */\n    public void setUserId(String id) {\n        userId = id.trim();\n    }\n\n    /**\n     * encode the  password\n     * @param password to be encoded\n     */\n    public void encodePassword(String password) {\n        // only set password if it is non null.\n        if (passwd != null && (password != null) && !password.equals(\"\"))\n            passwd = createDigest(salt.getBytes(), password);\n    }\n\n    /**\n     * Validate the password\n     * @param password\n     * @return\n     */\n    public boolean checkPassword(String password) {\n        if (passwd == null)\n            return false;\n        return checkDigest(passwd, password);\n    }\n\n    /**\n     * set the encrypted password\n     * @param password  as encrypted digest (SHA algorithm)\n     */\n    public void setPassword(String password) {\n        passwd = password;\n    }\n\n    /**\n     * get the encrypted Password\n     * @return encrypted password string\n     */\n    public String getPassword() {\n        return passwd;\n    }\n\n    /**\n     * set the SurName\n     * @param surname\n     */\n    public void setSurName(String surname) {\n        sn = surname;\n    }\n\n    /**\n     * get the SurName\n     * @return sn\n     */\n    public String getSurName() {\n        return sn;\n    }\n\n    /**\n     * get userName\n     * @return userName\n     */\n    public String getUserName() {\n        return userName;\n    }\n\n    /**\n     * set the User Name (cn field in LDAP\n     * @param name\n     */\n    public void setUserName(String name) {\n        userName = name.trim();\n    }\n\n    /**\n     * get the IpAddr of this user\n     * @return String containing ipAddr\n     */\n    public String getIpAddr() {\n        return ipAddr;\n    }\n\n    /**\n     * set the IpAddr of this user\n     * @param ipAddr  (should validate the address)\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        email = email.trim();\n    }\n\n    public Set getRoles() {\n        return roles;\n    }\n\n    public void addRole(String role) {\n        if (roles == null)\n            roles = new HashSet();\n        roles.add(role);\n    }\n\n    public Set getGroups() {\n        return groups;\n    }\n\n    public void addGroup(String group) {\n        if (groups == null)\n            groups = new HashSet();\n        groups.add(group);\n    }\n\n    public Set getActivegroups() {\n        return activegroups;\n    }\n\n    public void addActivegroup(String group) {\n        if (activegroups == null)\n            activegroups = new HashSet();\n        activegroups.add(group);\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = passvalidstart;\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public boolean getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(boolean passchange) {\n        this.passchange = passchange;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = new HashSet();\n        allowedips.add(allowed_ip);\n    }\n\n    public void setLdapContext(LdapContext dctx) {\n        this.dctx = dctx;\n    }\n\n    public LdapContext getLdapContext() {\n        return dctx;\n    }\n\n    /**\n     * set the Distinguished Name of the person\n     * @param dn containing distinguished name    (should check its validity)\n     */\n    public void setDN(String dn) {\n        //  cat.debug(\"setDN: \" + dn);\n        if (dn != null) {\n            StringTokenizer st = new StringTokenizer(dn, \",\");\n            while (st.hasMoreTokens()) {\n                String tok = st.nextToken();\n                StringTokenizer stoken = new StringTokenizer(tok, \"=\");\n                String name = stoken.nextToken();\n                // System.out.println(\"token: \"+tok +\" name: \"+name);\n                if (name.trim().equals(\"o\")) {\n                    organization = stoken.nextToken();\n                    //   cat.debug(\"org: \"+organization);\n                    //break;\n                } else if (name.trim().equals(\"c\")) {\n                    country = stoken.nextToken();\n                } else if (name.trim().equals(\"cn\")) {\n                    userName = stoken.nextToken();\n                }\n            }\n        } else\n            cat.warn(\"setDN: dn is null\");\n        return;\n    }\n\n    /**\n     * set the salt for encryption\n     * @param theSalt\n     */\n    public static void setSalt(String theSalt) {\n        salt = theSalt;\n    }\n\n    /**\n     * get the Distinguished Name of the Person\n     * @return String containing the distinguished name\n     */\n    public String getDN() {\n        return \"cn=\" + userName + \", o=\" + organization + \", c=\" + country;\n        //  return dn;\n    }\n\n    /**\n     * get the country (c) parameter\n     * @return country\n     */\n    public String getCountry() {\n        return country;\n    }\n\n    /**\n     * set the country parameter\n     * @param c country\n     */\n    public void setCountry(String c) {\n        country = c;\n    }\n\n    /**\n     * get the Organization of the user from the Distinguished Name dn\n     * @return String representing the organization\n     * The dn string is of the form cn=\"name\", o=\"organization\", c=\"country\"\n     */\n    public String getOrg() {\n        return organization;\n    }\n\n    /**\n     * Return a Properties sheet with identification\n     * @return\n     */\n    public Properties getCredentials() {\n        Properties props = new Properties();\n        props.setProperty(\"subjectDN\", getDN());\n        props.setProperty(\"EMail\", getUserId());\n        return props;\n    }\n\n    /**\n     * set the organization\n     */\n    public void setOrg(String org) {\n        organization = org;\n    }\n\n    /**\n     * copy nonempty fiels into the fields of object\n     * @param newUser\n     */\n    public void update(User newUser) {\n        organization = newUser.getOrg();\n        country = newUser.getCountry();\n        roles = newUser.getRoles();\n        groups = newUser.getGroups();\n        userName = newUser.getUserName();\n        sn = newUser.getSurName();\n        passwd = newUser.getPassword();\n        userId = newUser.getUserId();\n    }\n\n    /**\n     * String representation of user is simply its userId;\n     * @return String representation of User\n     */\n    public String toString() {\n        // char sep = '\\n';\n        StringBuffer buff = new StringBuffer();\n        buff.append(\"dn: \" + getDN() + sep);\n        buff.append(\"cn: \" + getUserName() + sep);\n        buff.append(\"id: \" + getUserId() + sep);\n        buff.append(\"sn: \" + getSurName() + sep);\n        buff.append(\"userPassword: \" + getPassword() + sep);\n        if (getRoles() != null) {\n            Iterator it = getRoles().iterator();\n            while (it.hasNext()) buff.append(\"role: \" + (String) (it.next()) + sep);\n        }\n        if (getGroups() != null) {\n            Iterator it = getGroups().iterator();\n            while (it.hasNext()) buff.append(\"group: \" + (String) (it.next()) + sep);\n        }\n        if (getIpAddr() != null)\n            buff.append(\"ip: \" + getIpAddr() + sep);\n        buff.append(\"objectClass: top\" + sep);\n        buff.append(\"objectClass: person\" + sep);\n        return buff.toString();\n    }\n\n    /**\n     * String representation with user defined separator\n     * @param sep\n     * @return String representation of User\n     */\n    public String toString(String sep) {\n        StringBuffer buff = new StringBuffer();\n        buff.append(\"dn: \" + getDN() + sep);\n        buff.append(\"cn: \" + getUserName() + sep);\n        buff.append(\"id: \" + getUserId() + sep);\n        buff.append(\"sn: \" + getSurName() + sep);\n        buff.append(\"userPassword: \" + getPassword() + sep);\n        Set rolebuf = new HashSet();\n        rolebuf = getRoles();\n        Iterator it = rolebuf.iterator();\n        while (it.hasNext()) buff.append(\"role: \" + (String) (it.next()) + sep);\n        Set groupbuf = new HashSet();\n        groupbuf = getGroups();\n        it = groupbuf.iterator();\n        while (it.hasNext()) buff.append(\"group: \" + (String) (it.next()) + sep);\n        buff.append(\"objectClass: top\" + sep);\n        buff.append(\"objectClass: person\" + sep);\n        return buff.toString();\n    }\n\n    /**\n     * create hashCode combining unique userId and ipAddr so user\n     * is distinguished coming from different \"locations\"\n     */\n    public int hashCode() {\n        // Improve hashcode calculation using member variables of this class\n        return 13 * userId.hashCode() + 7 * ipAddr.hashCode();\n    }\n\n    /**\n     *  Equality check for user to see if he is already known.\n     */\n    public boolean equals(Object user) {\n        // Return true if the result of the compareTo() method is zero\n        return compareTo(user) == 0;\n    }\n\n    /**\n     *  Compare to operation to see if the input user is the same as this user.\n     */\n    public int compareTo(Object user) {\n        // Compare the user IDs of the two user objects -\n        //  result is zero if they're identical (uses String compareTo function)\n        int result = userId.compareTo(((User) user).getUserId());\n        // If result is zero from previous method, return the comparison of IP addresses.\n        // Otherwise, return the result.\n        return result == 0 ? ipAddr.compareTo(((User) user).getIpAddr()) : result;\n    }\n\n    /**\n     * Create Digest for each input identity\n     * @param salt to set the base for the encryption\n     * @param identity to be encrypted\n     */\n    public String createDigest(byte[] salt, String identity) {\n        String label = (salt.length > 0) ? \"{SSHA}\" : \"{SHA}\";\n        if (sha == null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash = sha.digest();\n        return label + new String(Base64.encode(concatenate(pwhash, salt)));\n    }\n\n    /**\n     * Check Digest against identity\n     * @param digest is digest to be checked against\n     * @param identity to be checked\n     */\n    public boolean checkDigest(String digest, String identity) {\n        if (digest.regionMatches(true, 0, \"{SHA}\", 0, 5)) {\n            // ignore the label\n            digest = digest.substring(5);\n        } else if (digest.regionMatches(true, 0, \"{SSHA}\", 0, 6)) {\n            // ignore the label\n            digest = digest.substring(6);\n        }\n        byte[][] hs = split(Base64.decode(digest.getBytes()), 20);\n        byte[] hash = hs[0];\n        byte[] salt = hs[1];\n        if (sha == null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash = sha.digest();\n        boolean valid = true;\n        if (!MessageDigest.isEqual(hash, pwhash)) {\n            valid = false;\n            cat.warn(\"doesn't match: \" + identity);\n        }\n        return valid;\n    }\n\n    /**\n     * Combine two byte arrays\n     * @param l first byte array\n     * @param r second byte array\n     * @return byte[] combined byte array\n     */\n    private static byte[] concatenate(byte[] l, byte[] r) {\n        byte[] b = new byte[l.length + r.length];\n        System.arraycopy(l, 0, b, 0, l.length);\n        System.arraycopy(r, 0, b, l.length, r.length);\n        return b;\n    }\n\n    /**\n     * split a byte array in two\n     * @param src byte array to be split\n     * @param n element at which to split the byte array\n     * @return byte[][]  two byte arrays that have been split\n     */\n    private static byte[][] split(byte[] src, int n) {\n        byte[] l, r;\n        if (src == null || src.length <= n) {\n            l = src;\n            r = new byte[0];\n        } else {\n            l = new byte[n];\n            r = new byte[src.length - n];\n            System.arraycopy(src, 0, l, 0, n);\n            System.arraycopy(src, n, r, 0, r.length);\n        }\n        byte[][] lr = { l, r };\n        return lr;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/UserTest0.java",
		"test_prompt": "// UserTest0.java\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link User}.\n* It contains ten unit test cases for the {@link User#checkPassword(String)} method.\n*/\nclass UserTest0 {"
	},
	{
		"original_code": "// User.java\n/*\n *   CVS $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\n\n/**\n * User class contains all the necessary attributes of a logged in user\n * @author $Author: grodecki $\n * @version $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n */\npublic class User implements Comparable, Serializable {\n\n    // static final long serialVersionUID = -3313178117323543078L;\n    static final long serialVersionUID = 6729362233633496647L;\n\n    // id (key)\n    private String userId = \"\";\n\n    // current IP address\n    private String ipAddr;\n\n    //cn CommonName\n    private String userName = \"\";\n\n    private String email = \"\";\n\n    private Set roles;\n\n    private Set groups;\n\n    // Groups active for the user based on his location\n    private Set activegroups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    // user password change required before using the system?\n    private boolean passchange = false;\n\n    private Set allowedips;\n\n    LdapContext dctx;\n\n    // private String dn;  //Distinguished name    (cn, o, c)\n    // c\n    private String country = \"\";\n\n    // o\n    private String organization = \"\";\n\n    // encrypted    // userPassword\n    private String passwd = \"\";\n\n    // surname\n    private String sn = \"\";\n\n    private transient MessageDigest sha;\n\n    private static String sep = System.getProperty(\"line.separator\");\n\n    private static String salt = \"XXXX\";\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(User.class.getName());\n\n    public User() {\n    }\n\n    /**\n     * User object constructed from userId and userName\n     */\n    public User(String userId, String userName) {\n        this();\n        //\tSystem.out.println(\"userId: \"+userId);\n        //id\n        this.userId = userId.trim();\n        //cn\n        this.userName = userName.trim();\n    }\n\n    public void init() {\n        try {\n            sha = MessageDigest.getInstance(\"SHA-1\");\n        } catch (java.security.NoSuchAlgorithmException e) {\n            cat.error(\"SHA-1 constructor failed: \", e);\n        }\n    }\n\n    /**\n     * get userId previously set\n     * @return userId\n     */\n    public String getUserId() {\n        //\tSystem.out.println(\"getUserId: \"+userId);\n        return userId;\n    }\n\n    /**\n     * set the UserId\n     * @param id to be set\n     */\n    public void setUserId(String id) {\n        userId = id.trim();\n    }\n\n    /**\n     * encode the  password\n     * @param password to be encoded\n     */\n    public void encodePassword(String password) {\n        // only set password if it is non null.\n        if (passwd != null && (password != null) && !password.equals(\"\"))\n            passwd = createDigest(salt.getBytes(), password);\n    }\n\n    /**\n     * Validate the password\n     * @param password\n     * @return\n     */\n    public boolean checkPassword(String password) {\n        if (passwd == null)\n            return false;\n        return checkDigest(passwd, password);\n    }\n\n    /**\n     * set the encrypted password\n     * @param password  as encrypted digest (SHA algorithm)\n     */\n    public void setPassword(String password) {\n        passwd = password;\n    }\n\n    /**\n     * get the encrypted Password\n     * @return encrypted password string\n     */\n    public String getPassword() {\n        return passwd;\n    }\n\n    /**\n     * set the SurName\n     * @param surname\n     */\n    public void setSurName(String surname) {\n        sn = surname;\n    }\n\n    /**\n     * get the SurName\n     * @return sn\n     */\n    public String getSurName() {\n        return sn;\n    }\n\n    /**\n     * get userName\n     * @return userName\n     */\n    public String getUserName() {\n        return userName;\n    }\n\n    /**\n     * set the User Name (cn field in LDAP\n     * @param name\n     */\n    public void setUserName(String name) {\n        userName = name.trim();\n    }\n\n    /**\n     * get the IpAddr of this user\n     * @return String containing ipAddr\n     */\n    public String getIpAddr() {\n        return ipAddr;\n    }\n\n    /**\n     * set the IpAddr of this user\n     * @param ipAddr  (should validate the address)\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        email = email.trim();\n    }\n\n    public Set getRoles() {\n        return roles;\n    }\n\n    public void addRole(String role) {\n        if (roles == null)\n            roles = new HashSet();\n        roles.add(role);\n    }\n\n    public Set getGroups() {\n        return groups;\n    }\n\n    public void addGroup(String group) {\n        if (groups == null)\n            groups = new HashSet();\n        groups.add(group);\n    }\n\n    public Set getActivegroups() {\n        return activegroups;\n    }\n\n    public void addActivegroup(String group) {\n        if (activegroups == null)\n            activegroups = new HashSet();\n        activegroups.add(group);\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = passvalidstart;\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public boolean getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(boolean passchange) {\n        this.passchange = passchange;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = new HashSet();\n        allowedips.add(allowed_ip);\n    }\n\n    public void setLdapContext(LdapContext dctx) {\n        this.dctx = dctx;\n    }\n\n    public LdapContext getLdapContext() {\n        return dctx;\n    }\n\n    /**\n     * set the Distinguished Name of the person\n     * @param dn containing distinguished name    (should check its validity)\n     */\n    public void setDN(String dn) {\n        //  cat.debug(\"setDN: \" + dn);\n        if (dn != null) {\n            StringTokenizer st = new StringTokenizer(dn, \",\");\n            while (st.hasMoreTokens()) {\n                String tok = st.nextToken();\n                StringTokenizer stoken = new StringTokenizer(tok, \"=\");\n                String name = stoken.nextToken();\n                // System.out.println(\"token: \"+tok +\" name: \"+name);\n                if (name.trim().equals(\"o\")) {\n                    organization = stoken.nextToken();\n                    //   cat.debug(\"org: \"+organization);\n                    //break;\n                } else if (name.trim().equals(\"c\")) {\n                    country = stoken.nextToken();\n                } else if (name.trim().equals(\"cn\")) {\n                    userName = stoken.nextToken();\n                }\n            }\n        } else\n            cat.warn(\"setDN: dn is null\");\n        return;\n    }\n\n    /**\n     * set the salt for encryption\n     * @param theSalt\n     */\n    public static void setSalt(String theSalt) {\n        salt = theSalt;\n    }\n\n    /**\n     * get the Distinguished Name of the Person\n     * @return String containing the distinguished name\n     */\n    public String getDN() {\n        return \"cn=\" + userName + \", o=\" + organization + \", c=\" + country;\n        //  return dn;\n    }\n\n    /**\n     * get the country (c) parameter\n     * @return country\n     */\n    public String getCountry() {\n        return country;\n    }\n\n    /**\n     * set the country parameter\n     * @param c country\n     */\n    public void setCountry(String c) {\n        country = c;\n    }\n\n    /**\n     * get the Organization of the user from the Distinguished Name dn\n     * @return String representing the organization\n     * The dn string is of the form cn=\"name\", o=\"organization\", c=\"country\"\n     */\n    public String getOrg() {\n        return organization;\n    }\n\n    /**\n     * Return a Properties sheet with identification\n     * @return\n     */\n    public Properties getCredentials() {\n        Properties props = new Properties();\n        props.setProperty(\"subjectDN\", getDN());\n        props.setProperty(\"EMail\", getUserId());\n        return props;\n    }\n\n    /**\n     * set the organization\n     */\n    public void setOrg(String org) {\n        organization = org;\n    }\n\n    /**\n     * copy nonempty fiels into the fields of object\n     * @param newUser\n     */\n    public void update(User newUser) {\n        organization = newUser.getOrg();\n        country = newUser.getCountry();\n        roles = newUser.getRoles();\n        groups = newUser.getGroups();\n        userName = newUser.getUserName();\n        sn = newUser.getSurName();\n        passwd = newUser.getPassword();\n        userId = newUser.getUserId();\n    }\n\n    /**\n     * String representation of user is simply its userId;\n     * @return String representation of User\n     */\n    public String toString() {\n        // char sep = '\\n';\n        StringBuffer buff = new StringBuffer();\n        buff.append(\"dn: \" + getDN() + sep);\n        buff.append(\"cn: \" + getUserName() + sep);\n        buff.append(\"id: \" + getUserId() + sep);\n        buff.append(\"sn: \" + getSurName() + sep);\n        buff.append(\"userPassword: \" + getPassword() + sep);\n        if (getRoles() != null) {\n            Iterator it = getRoles().iterator();\n            while (it.hasNext()) buff.append(\"role: \" + (String) (it.next()) + sep);\n        }\n        if (getGroups() != null) {\n            Iterator it = getGroups().iterator();\n            while (it.hasNext()) buff.append(\"group: \" + (String) (it.next()) + sep);\n        }\n        if (getIpAddr() != null)\n            buff.append(\"ip: \" + getIpAddr() + sep);\n        buff.append(\"objectClass: top\" + sep);\n        buff.append(\"objectClass: person\" + sep);\n        return buff.toString();\n    }\n\n    /**\n     * String representation with user defined separator\n     * @param sep\n     * @return String representation of User\n     */\n    public String toString(String sep) {\n        StringBuffer buff = new StringBuffer();\n        buff.append(\"dn: \" + getDN() + sep);\n        buff.append(\"cn: \" + getUserName() + sep);\n        buff.append(\"id: \" + getUserId() + sep);\n        buff.append(\"sn: \" + getSurName() + sep);\n        buff.append(\"userPassword: \" + getPassword() + sep);\n        Set rolebuf = new HashSet();\n        rolebuf = getRoles();\n        Iterator it = rolebuf.iterator();\n        while (it.hasNext()) buff.append(\"role: \" + (String) (it.next()) + sep);\n        Set groupbuf = new HashSet();\n        groupbuf = getGroups();\n        it = groupbuf.iterator();\n        while (it.hasNext()) buff.append(\"group: \" + (String) (it.next()) + sep);\n        buff.append(\"objectClass: top\" + sep);\n        buff.append(\"objectClass: person\" + sep);\n        return buff.toString();\n    }\n\n    /**\n     * create hashCode combining unique userId and ipAddr so user\n     * is distinguished coming from different \"locations\"\n     */\n    public int hashCode() {\n        // Improve hashcode calculation using member variables of this class\n        return 13 * userId.hashCode() + 7 * ipAddr.hashCode();\n    }\n\n    /**\n     *  Equality check for user to see if he is already known.\n     */\n    public boolean equals(Object user) {\n        // Return true if the result of the compareTo() method is zero\n        return compareTo(user) == 0;\n    }\n\n    /**\n     *  Compare to operation to see if the input user is the same as this user.\n     */\n    public int compareTo(Object user) {\n        // Compare the user IDs of the two user objects -\n        //  result is zero if they're identical (uses String compareTo function)\n        int result = userId.compareTo(((User) user).getUserId());\n        // If result is zero from previous method, return the comparison of IP addresses.\n        // Otherwise, return the result.\n        return result == 0 ? ipAddr.compareTo(((User) user).getIpAddr()) : result;\n    }\n\n    /**\n     * Create Digest for each input identity\n     * @param salt to set the base for the encryption\n     * @param identity to be encrypted\n     */\n    public String createDigest(byte[] salt, String identity) {\n        String label = (salt.length > 0) ? \"{SSHA}\" : \"{SHA}\";\n        if (sha == null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash = sha.digest();\n        return label + new String(Base64.encode(concatenate(pwhash, salt)));\n    }\n\n    /**\n     * Check Digest against identity\n     * @param digest is digest to be checked against\n     * @param identity to be checked\n     */\n    public boolean checkDigest(String digest, String identity) {\n        if (digest.regionMatches(true, 0, \"{SHA}\", 0, 5)) {\n            // ignore the label\n            digest = digest.substring(5);\n        } else if (digest.regionMatches(true, 0, \"{SSHA}\", 0, 6)) {\n            // ignore the label\n            digest = digest.substring(6);\n        }\n        byte[][] hs = split(Base64.decode(digest.getBytes()), 20);\n        byte[] hash = hs[0];\n        byte[] salt = hs[1];\n        if (sha == null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash = sha.digest();\n        boolean valid = true;\n        if (!MessageDigest.isEqual(hash, pwhash)) {\n            valid = false;\n            cat.warn(\"doesn't match: \" + identity);\n        }\n        return valid;\n    }\n\n    /**\n     * Combine two byte arrays\n     * @param l first byte array\n     * @param r second byte array\n     * @return byte[] combined byte array\n     */\n    private static byte[] concatenate(byte[] l, byte[] r) {\n        byte[] b = new byte[l.length + r.length];\n        System.arraycopy(l, 0, b, 0, l.length);\n        System.arraycopy(r, 0, b, l.length, r.length);\n        return b;\n    }\n\n    /**\n     * split a byte array in two\n     * @param src byte array to be split\n     * @param n element at which to split the byte array\n     * @return byte[][]  two byte arrays that have been split\n     */\n    private static byte[][] split(byte[] src, int n) {\n        byte[] l, r;\n        if (src == null || src.length <= n) {\n            l = src;\n            r = new byte[0];\n        } else {\n            l = new byte[n];\n            r = new byte[src.length - n];\n            System.arraycopy(src, 0, l, 0, n);\n            System.arraycopy(src, n, r, 0, r.length);\n        }\n        byte[][] lr = { l, r };\n        return lr;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/UserTest1.java",
		"test_prompt": "// UserTest1.java\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link User}.\n* It contains ten unit test cases for the {@link User#hashCode()} method.\n*/\nclass UserTest1 {"
	},
	{
		"original_code": "// User.java\n/*\n *   CVS $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\n\n/**\n * User class contains all the necessary attributes of a logged in user\n * @author $Author: grodecki $\n * @version $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n */\npublic class User implements Comparable, Serializable {\n\n    // static final long serialVersionUID = -3313178117323543078L;\n    static final long serialVersionUID = 6729362233633496647L;\n\n    // id (key)\n    private String userId = \"\";\n\n    // current IP address\n    private String ipAddr;\n\n    //cn CommonName\n    private String userName = \"\";\n\n    private String email = \"\";\n\n    private Set roles;\n\n    private Set groups;\n\n    // Groups active for the user based on his location\n    private Set activegroups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    // user password change required before using the system?\n    private boolean passchange = false;\n\n    private Set allowedips;\n\n    LdapContext dctx;\n\n    // private String dn;  //Distinguished name    (cn, o, c)\n    // c\n    private String country = \"\";\n\n    // o\n    private String organization = \"\";\n\n    // encrypted    // userPassword\n    private String passwd = \"\";\n\n    // surname\n    private String sn = \"\";\n\n    private transient MessageDigest sha;\n\n    private static String sep = System.getProperty(\"line.separator\");\n\n    private static String salt = \"XXXX\";\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(User.class.getName());\n\n    public User() {\n    }\n\n    /**\n     * User object constructed from userId and userName\n     */\n    public User(String userId, String userName) {\n        this();\n        //\tSystem.out.println(\"userId: \"+userId);\n        //id\n        this.userId = userId.trim();\n        //cn\n        this.userName = userName.trim();\n    }\n\n    public void init() {\n        try {\n            sha = MessageDigest.getInstance(\"SHA-1\");\n        } catch (java.security.NoSuchAlgorithmException e) {\n            cat.error(\"SHA-1 constructor failed: \", e);\n        }\n    }\n\n    /**\n     * get userId previously set\n     * @return userId\n     */\n    public String getUserId() {\n        //\tSystem.out.println(\"getUserId: \"+userId);\n        return userId;\n    }\n\n    /**\n     * set the UserId\n     * @param id to be set\n     */\n    public void setUserId(String id) {\n        userId = id.trim();\n    }\n\n    /**\n     * encode the  password\n     * @param password to be encoded\n     */\n    public void encodePassword(String password) {\n        // only set password if it is non null.\n        if (passwd != null && (password != null) && !password.equals(\"\"))\n            passwd = createDigest(salt.getBytes(), password);\n    }\n\n    /**\n     * Validate the password\n     * @param password\n     * @return\n     */\n    public boolean checkPassword(String password) {\n        if (passwd == null)\n            return false;\n        return checkDigest(passwd, password);\n    }\n\n    /**\n     * set the encrypted password\n     * @param password  as encrypted digest (SHA algorithm)\n     */\n    public void setPassword(String password) {\n        passwd = password;\n    }\n\n    /**\n     * get the encrypted Password\n     * @return encrypted password string\n     */\n    public String getPassword() {\n        return passwd;\n    }\n\n    /**\n     * set the SurName\n     * @param surname\n     */\n    public void setSurName(String surname) {\n        sn = surname;\n    }\n\n    /**\n     * get the SurName\n     * @return sn\n     */\n    public String getSurName() {\n        return sn;\n    }\n\n    /**\n     * get userName\n     * @return userName\n     */\n    public String getUserName() {\n        return userName;\n    }\n\n    /**\n     * set the User Name (cn field in LDAP\n     * @param name\n     */\n    public void setUserName(String name) {\n        userName = name.trim();\n    }\n\n    /**\n     * get the IpAddr of this user\n     * @return String containing ipAddr\n     */\n    public String getIpAddr() {\n        return ipAddr;\n    }\n\n    /**\n     * set the IpAddr of this user\n     * @param ipAddr  (should validate the address)\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        email = email.trim();\n    }\n\n    public Set getRoles() {\n        return roles;\n    }\n\n    public void addRole(String role) {\n        if (roles == null)\n            roles = new HashSet();\n        roles.add(role);\n    }\n\n    public Set getGroups() {\n        return groups;\n    }\n\n    public void addGroup(String group) {\n        if (groups == null)\n            groups = new HashSet();\n        groups.add(group);\n    }\n\n    public Set getActivegroups() {\n        return activegroups;\n    }\n\n    public void addActivegroup(String group) {\n        if (activegroups == null)\n            activegroups = new HashSet();\n        activegroups.add(group);\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = passvalidstart;\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public boolean getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(boolean passchange) {\n        this.passchange = passchange;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = new HashSet();\n        allowedips.add(allowed_ip);\n    }\n\n    public void setLdapContext(LdapContext dctx) {\n        this.dctx = dctx;\n    }\n\n    public LdapContext getLdapContext() {\n        return dctx;\n    }\n\n    /**\n     * set the Distinguished Name of the person\n     * @param dn containing distinguished name    (should check its validity)\n     */\n    public void setDN(String dn) {\n        //  cat.debug(\"setDN: \" + dn);\n        if (dn != null) {\n            StringTokenizer st = new StringTokenizer(dn, \",\");\n            while (st.hasMoreTokens()) {\n                String tok = st.nextToken();\n                StringTokenizer stoken = new StringTokenizer(tok, \"=\");\n                String name = stoken.nextToken();\n                // System.out.println(\"token: \"+tok +\" name: \"+name);\n                if (name.trim().equals(\"o\")) {\n                    organization = stoken.nextToken();\n                    //   cat.debug(\"org: \"+organization);\n                    //break;\n                } else if (name.trim().equals(\"c\")) {\n                    country = stoken.nextToken();\n                } else if (name.trim().equals(\"cn\")) {\n                    userName = stoken.nextToken();\n                }\n            }\n        } else\n            cat.warn(\"setDN: dn is null\");\n        return;\n    }\n\n    /**\n     * set the salt for encryption\n     * @param theSalt\n     */\n    public static void setSalt(String theSalt) {\n        salt = theSalt;\n    }\n\n    /**\n     * get the Distinguished Name of the Person\n     * @return String containing the distinguished name\n     */\n    public String getDN() {\n        return \"cn=\" + userName + \", o=\" + organization + \", c=\" + country;\n        //  return dn;\n    }\n\n    /**\n     * get the country (c) parameter\n     * @return country\n     */\n    public String getCountry() {\n        return country;\n    }\n\n    /**\n     * set the country parameter\n     * @param c country\n     */\n    public void setCountry(String c) {\n        country = c;\n    }\n\n    /**\n     * get the Organization of the user from the Distinguished Name dn\n     * @return String representing the organization\n     * The dn string is of the form cn=\"name\", o=\"organization\", c=\"country\"\n     */\n    public String getOrg() {\n        return organization;\n    }\n\n    /**\n     * Return a Properties sheet with identification\n     * @return\n     */\n    public Properties getCredentials() {\n        Properties props = new Properties();\n        props.setProperty(\"subjectDN\", getDN());\n        props.setProperty(\"EMail\", getUserId());\n        return props;\n    }\n\n    /**\n     * set the organization\n     */\n    public void setOrg(String org) {\n        organization = org;\n    }\n\n    /**\n     * copy nonempty fiels into the fields of object\n     * @param newUser\n     */\n    public void update(User newUser) {\n        organization = newUser.getOrg();\n        country = newUser.getCountry();\n        roles = newUser.getRoles();\n        groups = newUser.getGroups();\n        userName = newUser.getUserName();\n        sn = newUser.getSurName();\n        passwd = newUser.getPassword();\n        userId = newUser.getUserId();\n    }\n\n    /**\n     * String representation of user is simply its userId;\n     * @return String representation of User\n     */\n    public String toString() {\n        // char sep = '\\n';\n        StringBuffer buff = new StringBuffer();\n        buff.append(\"dn: \" + getDN() + sep);\n        buff.append(\"cn: \" + getUserName() + sep);\n        buff.append(\"id: \" + getUserId() + sep);\n        buff.append(\"sn: \" + getSurName() + sep);\n        buff.append(\"userPassword: \" + getPassword() + sep);\n        if (getRoles() != null) {\n            Iterator it = getRoles().iterator();\n            while (it.hasNext()) buff.append(\"role: \" + (String) (it.next()) + sep);\n        }\n        if (getGroups() != null) {\n            Iterator it = getGroups().iterator();\n            while (it.hasNext()) buff.append(\"group: \" + (String) (it.next()) + sep);\n        }\n        if (getIpAddr() != null)\n            buff.append(\"ip: \" + getIpAddr() + sep);\n        buff.append(\"objectClass: top\" + sep);\n        buff.append(\"objectClass: person\" + sep);\n        return buff.toString();\n    }\n\n    /**\n     * String representation with user defined separator\n     * @param sep\n     * @return String representation of User\n     */\n    public String toString(String sep) {\n        StringBuffer buff = new StringBuffer();\n        buff.append(\"dn: \" + getDN() + sep);\n        buff.append(\"cn: \" + getUserName() + sep);\n        buff.append(\"id: \" + getUserId() + sep);\n        buff.append(\"sn: \" + getSurName() + sep);\n        buff.append(\"userPassword: \" + getPassword() + sep);\n        Set rolebuf = new HashSet();\n        rolebuf = getRoles();\n        Iterator it = rolebuf.iterator();\n        while (it.hasNext()) buff.append(\"role: \" + (String) (it.next()) + sep);\n        Set groupbuf = new HashSet();\n        groupbuf = getGroups();\n        it = groupbuf.iterator();\n        while (it.hasNext()) buff.append(\"group: \" + (String) (it.next()) + sep);\n        buff.append(\"objectClass: top\" + sep);\n        buff.append(\"objectClass: person\" + sep);\n        return buff.toString();\n    }\n\n    /**\n     * create hashCode combining unique userId and ipAddr so user\n     * is distinguished coming from different \"locations\"\n     */\n    public int hashCode() {\n        // Improve hashcode calculation using member variables of this class\n        return 13 * userId.hashCode() + 7 * ipAddr.hashCode();\n    }\n\n    /**\n     *  Equality check for user to see if he is already known.\n     */\n    public boolean equals(Object user) {\n        // Return true if the result of the compareTo() method is zero\n        return compareTo(user) == 0;\n    }\n\n    /**\n     *  Compare to operation to see if the input user is the same as this user.\n     */\n    public int compareTo(Object user) {\n        // Compare the user IDs of the two user objects -\n        //  result is zero if they're identical (uses String compareTo function)\n        int result = userId.compareTo(((User) user).getUserId());\n        // If result is zero from previous method, return the comparison of IP addresses.\n        // Otherwise, return the result.\n        return result == 0 ? ipAddr.compareTo(((User) user).getIpAddr()) : result;\n    }\n\n    /**\n     * Create Digest for each input identity\n     * @param salt to set the base for the encryption\n     * @param identity to be encrypted\n     */\n    public String createDigest(byte[] salt, String identity) {\n        String label = (salt.length > 0) ? \"{SSHA}\" : \"{SHA}\";\n        if (sha == null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash = sha.digest();\n        return label + new String(Base64.encode(concatenate(pwhash, salt)));\n    }\n\n    /**\n     * Check Digest against identity\n     * @param digest is digest to be checked against\n     * @param identity to be checked\n     */\n    public boolean checkDigest(String digest, String identity) {\n        if (digest.regionMatches(true, 0, \"{SHA}\", 0, 5)) {\n            // ignore the label\n            digest = digest.substring(5);\n        } else if (digest.regionMatches(true, 0, \"{SSHA}\", 0, 6)) {\n            // ignore the label\n            digest = digest.substring(6);\n        }\n        byte[][] hs = split(Base64.decode(digest.getBytes()), 20);\n        byte[] hash = hs[0];\n        byte[] salt = hs[1];\n        if (sha == null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash = sha.digest();\n        boolean valid = true;\n        if (!MessageDigest.isEqual(hash, pwhash)) {\n            valid = false;\n            cat.warn(\"doesn't match: \" + identity);\n        }\n        return valid;\n    }\n\n    /**\n     * Combine two byte arrays\n     * @param l first byte array\n     * @param r second byte array\n     * @return byte[] combined byte array\n     */\n    private static byte[] concatenate(byte[] l, byte[] r) {\n        byte[] b = new byte[l.length + r.length];\n        System.arraycopy(l, 0, b, 0, l.length);\n        System.arraycopy(r, 0, b, l.length, r.length);\n        return b;\n    }\n\n    /**\n     * split a byte array in two\n     * @param src byte array to be split\n     * @param n element at which to split the byte array\n     * @return byte[][]  two byte arrays that have been split\n     */\n    private static byte[][] split(byte[] src, int n) {\n        byte[] l, r;\n        if (src == null || src.length <= n) {\n            l = src;\n            r = new byte[0];\n        } else {\n            l = new byte[n];\n            r = new byte[src.length - n];\n            System.arraycopy(src, 0, l, 0, n);\n            System.arraycopy(src, n, r, 0, r.length);\n        }\n        byte[][] lr = { l, r };\n        return lr;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/UserTest2.java",
		"test_prompt": "// UserTest2.java\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link User}.\n* It contains ten unit test cases for the {@link User#equals(Object)} method.\n*/\nclass UserTest2 {"
	},
	{
		"original_code": "// User.java\n/*\n *   CVS $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\n\n/**\n * User class contains all the necessary attributes of a logged in user\n * @author $Author: grodecki $\n * @version $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n */\npublic class User implements Comparable, Serializable {\n\n    // static final long serialVersionUID = -3313178117323543078L;\n    static final long serialVersionUID = 6729362233633496647L;\n\n    // id (key)\n    private String userId = \"\";\n\n    // current IP address\n    private String ipAddr;\n\n    //cn CommonName\n    private String userName = \"\";\n\n    private String email = \"\";\n\n    private Set roles;\n\n    private Set groups;\n\n    // Groups active for the user based on his location\n    private Set activegroups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    // user password change required before using the system?\n    private boolean passchange = false;\n\n    private Set allowedips;\n\n    LdapContext dctx;\n\n    // private String dn;  //Distinguished name    (cn, o, c)\n    // c\n    private String country = \"\";\n\n    // o\n    private String organization = \"\";\n\n    // encrypted    // userPassword\n    private String passwd = \"\";\n\n    // surname\n    private String sn = \"\";\n\n    private transient MessageDigest sha;\n\n    private static String sep = System.getProperty(\"line.separator\");\n\n    private static String salt = \"XXXX\";\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(User.class.getName());\n\n    public User() {\n    }\n\n    /**\n     * User object constructed from userId and userName\n     */\n    public User(String userId, String userName) {\n        this();\n        //\tSystem.out.println(\"userId: \"+userId);\n        //id\n        this.userId = userId.trim();\n        //cn\n        this.userName = userName.trim();\n    }\n\n    public void init() {\n        try {\n            sha = MessageDigest.getInstance(\"SHA-1\");\n        } catch (java.security.NoSuchAlgorithmException e) {\n            cat.error(\"SHA-1 constructor failed: \", e);\n        }\n    }\n\n    /**\n     * get userId previously set\n     * @return userId\n     */\n    public String getUserId() {\n        //\tSystem.out.println(\"getUserId: \"+userId);\n        return userId;\n    }\n\n    /**\n     * set the UserId\n     * @param id to be set\n     */\n    public void setUserId(String id) {\n        userId = id.trim();\n    }\n\n    /**\n     * encode the  password\n     * @param password to be encoded\n     */\n    public void encodePassword(String password) {\n        // only set password if it is non null.\n        if (passwd != null && (password != null) && !password.equals(\"\"))\n            passwd = createDigest(salt.getBytes(), password);\n    }\n\n    /**\n     * Validate the password\n     * @param password\n     * @return\n     */\n    public boolean checkPassword(String password) {\n        if (passwd == null)\n            return false;\n        return checkDigest(passwd, password);\n    }\n\n    /**\n     * set the encrypted password\n     * @param password  as encrypted digest (SHA algorithm)\n     */\n    public void setPassword(String password) {\n        passwd = password;\n    }\n\n    /**\n     * get the encrypted Password\n     * @return encrypted password string\n     */\n    public String getPassword() {\n        return passwd;\n    }\n\n    /**\n     * set the SurName\n     * @param surname\n     */\n    public void setSurName(String surname) {\n        sn = surname;\n    }\n\n    /**\n     * get the SurName\n     * @return sn\n     */\n    public String getSurName() {\n        return sn;\n    }\n\n    /**\n     * get userName\n     * @return userName\n     */\n    public String getUserName() {\n        return userName;\n    }\n\n    /**\n     * set the User Name (cn field in LDAP\n     * @param name\n     */\n    public void setUserName(String name) {\n        userName = name.trim();\n    }\n\n    /**\n     * get the IpAddr of this user\n     * @return String containing ipAddr\n     */\n    public String getIpAddr() {\n        return ipAddr;\n    }\n\n    /**\n     * set the IpAddr of this user\n     * @param ipAddr  (should validate the address)\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        email = email.trim();\n    }\n\n    public Set getRoles() {\n        return roles;\n    }\n\n    public void addRole(String role) {\n        if (roles == null)\n            roles = new HashSet();\n        roles.add(role);\n    }\n\n    public Set getGroups() {\n        return groups;\n    }\n\n    public void addGroup(String group) {\n        if (groups == null)\n            groups = new HashSet();\n        groups.add(group);\n    }\n\n    public Set getActivegroups() {\n        return activegroups;\n    }\n\n    public void addActivegroup(String group) {\n        if (activegroups == null)\n            activegroups = new HashSet();\n        activegroups.add(group);\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = passvalidstart;\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public boolean getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(boolean passchange) {\n        this.passchange = passchange;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = new HashSet();\n        allowedips.add(allowed_ip);\n    }\n\n    public void setLdapContext(LdapContext dctx) {\n        this.dctx = dctx;\n    }\n\n    public LdapContext getLdapContext() {\n        return dctx;\n    }\n\n    /**\n     * set the Distinguished Name of the person\n     * @param dn containing distinguished name    (should check its validity)\n     */\n    public void setDN(String dn) {\n        //  cat.debug(\"setDN: \" + dn);\n        if (dn != null) {\n            StringTokenizer st = new StringTokenizer(dn, \",\");\n            while (st.hasMoreTokens()) {\n                String tok = st.nextToken();\n                StringTokenizer stoken = new StringTokenizer(tok, \"=\");\n                String name = stoken.nextToken();\n                // System.out.println(\"token: \"+tok +\" name: \"+name);\n                if (name.trim().equals(\"o\")) {\n                    organization = stoken.nextToken();\n                    //   cat.debug(\"org: \"+organization);\n                    //break;\n                } else if (name.trim().equals(\"c\")) {\n                    country = stoken.nextToken();\n                } else if (name.trim().equals(\"cn\")) {\n                    userName = stoken.nextToken();\n                }\n            }\n        } else\n            cat.warn(\"setDN: dn is null\");\n        return;\n    }\n\n    /**\n     * set the salt for encryption\n     * @param theSalt\n     */\n    public static void setSalt(String theSalt) {\n        salt = theSalt;\n    }\n\n    /**\n     * get the Distinguished Name of the Person\n     * @return String containing the distinguished name\n     */\n    public String getDN() {\n        return \"cn=\" + userName + \", o=\" + organization + \", c=\" + country;\n        //  return dn;\n    }\n\n    /**\n     * get the country (c) parameter\n     * @return country\n     */\n    public String getCountry() {\n        return country;\n    }\n\n    /**\n     * set the country parameter\n     * @param c country\n     */\n    public void setCountry(String c) {\n        country = c;\n    }\n\n    /**\n     * get the Organization of the user from the Distinguished Name dn\n     * @return String representing the organization\n     * The dn string is of the form cn=\"name\", o=\"organization\", c=\"country\"\n     */\n    public String getOrg() {\n        return organization;\n    }\n\n    /**\n     * Return a Properties sheet with identification\n     * @return\n     */\n    public Properties getCredentials() {\n        Properties props = new Properties();\n        props.setProperty(\"subjectDN\", getDN());\n        props.setProperty(\"EMail\", getUserId());\n        return props;\n    }\n\n    /**\n     * set the organization\n     */\n    public void setOrg(String org) {\n        organization = org;\n    }\n\n    /**\n     * copy nonempty fiels into the fields of object\n     * @param newUser\n     */\n    public void update(User newUser) {\n        organization = newUser.getOrg();\n        country = newUser.getCountry();\n        roles = newUser.getRoles();\n        groups = newUser.getGroups();\n        userName = newUser.getUserName();\n        sn = newUser.getSurName();\n        passwd = newUser.getPassword();\n        userId = newUser.getUserId();\n    }\n\n    /**\n     * String representation of user is simply its userId;\n     * @return String representation of User\n     */\n    public String toString() {\n        // char sep = '\\n';\n        StringBuffer buff = new StringBuffer();\n        buff.append(\"dn: \" + getDN() + sep);\n        buff.append(\"cn: \" + getUserName() + sep);\n        buff.append(\"id: \" + getUserId() + sep);\n        buff.append(\"sn: \" + getSurName() + sep);\n        buff.append(\"userPassword: \" + getPassword() + sep);\n        if (getRoles() != null) {\n            Iterator it = getRoles().iterator();\n            while (it.hasNext()) buff.append(\"role: \" + (String) (it.next()) + sep);\n        }\n        if (getGroups() != null) {\n            Iterator it = getGroups().iterator();\n            while (it.hasNext()) buff.append(\"group: \" + (String) (it.next()) + sep);\n        }\n        if (getIpAddr() != null)\n            buff.append(\"ip: \" + getIpAddr() + sep);\n        buff.append(\"objectClass: top\" + sep);\n        buff.append(\"objectClass: person\" + sep);\n        return buff.toString();\n    }\n\n    /**\n     * String representation with user defined separator\n     * @param sep\n     * @return String representation of User\n     */\n    public String toString(String sep) {\n        StringBuffer buff = new StringBuffer();\n        buff.append(\"dn: \" + getDN() + sep);\n        buff.append(\"cn: \" + getUserName() + sep);\n        buff.append(\"id: \" + getUserId() + sep);\n        buff.append(\"sn: \" + getSurName() + sep);\n        buff.append(\"userPassword: \" + getPassword() + sep);\n        Set rolebuf = new HashSet();\n        rolebuf = getRoles();\n        Iterator it = rolebuf.iterator();\n        while (it.hasNext()) buff.append(\"role: \" + (String) (it.next()) + sep);\n        Set groupbuf = new HashSet();\n        groupbuf = getGroups();\n        it = groupbuf.iterator();\n        while (it.hasNext()) buff.append(\"group: \" + (String) (it.next()) + sep);\n        buff.append(\"objectClass: top\" + sep);\n        buff.append(\"objectClass: person\" + sep);\n        return buff.toString();\n    }\n\n    /**\n     * create hashCode combining unique userId and ipAddr so user\n     * is distinguished coming from different \"locations\"\n     */\n    public int hashCode() {\n        // Improve hashcode calculation using member variables of this class\n        return 13 * userId.hashCode() + 7 * ipAddr.hashCode();\n    }\n\n    /**\n     *  Equality check for user to see if he is already known.\n     */\n    public boolean equals(Object user) {\n        // Return true if the result of the compareTo() method is zero\n        return compareTo(user) == 0;\n    }\n\n    /**\n     *  Compare to operation to see if the input user is the same as this user.\n     */\n    public int compareTo(Object user) {\n        // Compare the user IDs of the two user objects -\n        //  result is zero if they're identical (uses String compareTo function)\n        int result = userId.compareTo(((User) user).getUserId());\n        // If result is zero from previous method, return the comparison of IP addresses.\n        // Otherwise, return the result.\n        return result == 0 ? ipAddr.compareTo(((User) user).getIpAddr()) : result;\n    }\n\n    /**\n     * Create Digest for each input identity\n     * @param salt to set the base for the encryption\n     * @param identity to be encrypted\n     */\n    public String createDigest(byte[] salt, String identity) {\n        String label = (salt.length > 0) ? \"{SSHA}\" : \"{SHA}\";\n        if (sha == null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash = sha.digest();\n        return label + new String(Base64.encode(concatenate(pwhash, salt)));\n    }\n\n    /**\n     * Check Digest against identity\n     * @param digest is digest to be checked against\n     * @param identity to be checked\n     */\n    public boolean checkDigest(String digest, String identity) {\n        if (digest.regionMatches(true, 0, \"{SHA}\", 0, 5)) {\n            // ignore the label\n            digest = digest.substring(5);\n        } else if (digest.regionMatches(true, 0, \"{SSHA}\", 0, 6)) {\n            // ignore the label\n            digest = digest.substring(6);\n        }\n        byte[][] hs = split(Base64.decode(digest.getBytes()), 20);\n        byte[] hash = hs[0];\n        byte[] salt = hs[1];\n        if (sha == null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash = sha.digest();\n        boolean valid = true;\n        if (!MessageDigest.isEqual(hash, pwhash)) {\n            valid = false;\n            cat.warn(\"doesn't match: \" + identity);\n        }\n        return valid;\n    }\n\n    /**\n     * Combine two byte arrays\n     * @param l first byte array\n     * @param r second byte array\n     * @return byte[] combined byte array\n     */\n    private static byte[] concatenate(byte[] l, byte[] r) {\n        byte[] b = new byte[l.length + r.length];\n        System.arraycopy(l, 0, b, 0, l.length);\n        System.arraycopy(r, 0, b, l.length, r.length);\n        return b;\n    }\n\n    /**\n     * split a byte array in two\n     * @param src byte array to be split\n     * @param n element at which to split the byte array\n     * @return byte[][]  two byte arrays that have been split\n     */\n    private static byte[][] split(byte[] src, int n) {\n        byte[] l, r;\n        if (src == null || src.length <= n) {\n            l = src;\n            r = new byte[0];\n        } else {\n            l = new byte[n];\n            r = new byte[src.length - n];\n            System.arraycopy(src, 0, l, 0, n);\n            System.arraycopy(src, n, r, 0, r.length);\n        }\n        byte[][] lr = { l, r };\n        return lr;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/UserTest3.java",
		"test_prompt": "// UserTest3.java\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link User}.\n* It contains ten unit test cases for the {@link User#compareTo(Object)} method.\n*/\nclass UserTest3 {"
	},
	{
		"original_code": "// User.java\n/*\n *   CVS $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\n\n/**\n * User class contains all the necessary attributes of a logged in user\n * @author $Author: grodecki $\n * @version $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n */\npublic class User implements Comparable, Serializable {\n\n    // static final long serialVersionUID = -3313178117323543078L;\n    static final long serialVersionUID = 6729362233633496647L;\n\n    // id (key)\n    private String userId = \"\";\n\n    // current IP address\n    private String ipAddr;\n\n    //cn CommonName\n    private String userName = \"\";\n\n    private String email = \"\";\n\n    private Set roles;\n\n    private Set groups;\n\n    // Groups active for the user based on his location\n    private Set activegroups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    // user password change required before using the system?\n    private boolean passchange = false;\n\n    private Set allowedips;\n\n    LdapContext dctx;\n\n    // private String dn;  //Distinguished name    (cn, o, c)\n    // c\n    private String country = \"\";\n\n    // o\n    private String organization = \"\";\n\n    // encrypted    // userPassword\n    private String passwd = \"\";\n\n    // surname\n    private String sn = \"\";\n\n    private transient MessageDigest sha;\n\n    private static String sep = System.getProperty(\"line.separator\");\n\n    private static String salt = \"XXXX\";\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(User.class.getName());\n\n    public User() {\n    }\n\n    /**\n     * User object constructed from userId and userName\n     */\n    public User(String userId, String userName) {\n        this();\n        //\tSystem.out.println(\"userId: \"+userId);\n        //id\n        this.userId = userId.trim();\n        //cn\n        this.userName = userName.trim();\n    }\n\n    public void init() {\n        try {\n            sha = MessageDigest.getInstance(\"SHA-1\");\n        } catch (java.security.NoSuchAlgorithmException e) {\n            cat.error(\"SHA-1 constructor failed: \", e);\n        }\n    }\n\n    /**\n     * get userId previously set\n     * @return userId\n     */\n    public String getUserId() {\n        //\tSystem.out.println(\"getUserId: \"+userId);\n        return userId;\n    }\n\n    /**\n     * set the UserId\n     * @param id to be set\n     */\n    public void setUserId(String id) {\n        userId = id.trim();\n    }\n\n    /**\n     * encode the  password\n     * @param password to be encoded\n     */\n    public void encodePassword(String password) {\n        // only set password if it is non null.\n        if (passwd != null && (password != null) && !password.equals(\"\"))\n            passwd = createDigest(salt.getBytes(), password);\n    }\n\n    /**\n     * Validate the password\n     * @param password\n     * @return\n     */\n    public boolean checkPassword(String password) {\n        if (passwd == null)\n            return false;\n        return checkDigest(passwd, password);\n    }\n\n    /**\n     * set the encrypted password\n     * @param password  as encrypted digest (SHA algorithm)\n     */\n    public void setPassword(String password) {\n        passwd = password;\n    }\n\n    /**\n     * get the encrypted Password\n     * @return encrypted password string\n     */\n    public String getPassword() {\n        return passwd;\n    }\n\n    /**\n     * set the SurName\n     * @param surname\n     */\n    public void setSurName(String surname) {\n        sn = surname;\n    }\n\n    /**\n     * get the SurName\n     * @return sn\n     */\n    public String getSurName() {\n        return sn;\n    }\n\n    /**\n     * get userName\n     * @return userName\n     */\n    public String getUserName() {\n        return userName;\n    }\n\n    /**\n     * set the User Name (cn field in LDAP\n     * @param name\n     */\n    public void setUserName(String name) {\n        userName = name.trim();\n    }\n\n    /**\n     * get the IpAddr of this user\n     * @return String containing ipAddr\n     */\n    public String getIpAddr() {\n        return ipAddr;\n    }\n\n    /**\n     * set the IpAddr of this user\n     * @param ipAddr  (should validate the address)\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        email = email.trim();\n    }\n\n    public Set getRoles() {\n        return roles;\n    }\n\n    public void addRole(String role) {\n        if (roles == null)\n            roles = new HashSet();\n        roles.add(role);\n    }\n\n    public Set getGroups() {\n        return groups;\n    }\n\n    public void addGroup(String group) {\n        if (groups == null)\n            groups = new HashSet();\n        groups.add(group);\n    }\n\n    public Set getActivegroups() {\n        return activegroups;\n    }\n\n    public void addActivegroup(String group) {\n        if (activegroups == null)\n            activegroups = new HashSet();\n        activegroups.add(group);\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = passvalidstart;\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public boolean getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(boolean passchange) {\n        this.passchange = passchange;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = new HashSet();\n        allowedips.add(allowed_ip);\n    }\n\n    public void setLdapContext(LdapContext dctx) {\n        this.dctx = dctx;\n    }\n\n    public LdapContext getLdapContext() {\n        return dctx;\n    }\n\n    /**\n     * set the Distinguished Name of the person\n     * @param dn containing distinguished name    (should check its validity)\n     */\n    public void setDN(String dn) {\n        //  cat.debug(\"setDN: \" + dn);\n        if (dn != null) {\n            StringTokenizer st = new StringTokenizer(dn, \",\");\n            while (st.hasMoreTokens()) {\n                String tok = st.nextToken();\n                StringTokenizer stoken = new StringTokenizer(tok, \"=\");\n                String name = stoken.nextToken();\n                // System.out.println(\"token: \"+tok +\" name: \"+name);\n                if (name.trim().equals(\"o\")) {\n                    organization = stoken.nextToken();\n                    //   cat.debug(\"org: \"+organization);\n                    //break;\n                } else if (name.trim().equals(\"c\")) {\n                    country = stoken.nextToken();\n                } else if (name.trim().equals(\"cn\")) {\n                    userName = stoken.nextToken();\n                }\n            }\n        } else\n            cat.warn(\"setDN: dn is null\");\n        return;\n    }\n\n    /**\n     * set the salt for encryption\n     * @param theSalt\n     */\n    public static void setSalt(String theSalt) {\n        salt = theSalt;\n    }\n\n    /**\n     * get the Distinguished Name of the Person\n     * @return String containing the distinguished name\n     */\n    public String getDN() {\n        return \"cn=\" + userName + \", o=\" + organization + \", c=\" + country;\n        //  return dn;\n    }\n\n    /**\n     * get the country (c) parameter\n     * @return country\n     */\n    public String getCountry() {\n        return country;\n    }\n\n    /**\n     * set the country parameter\n     * @param c country\n     */\n    public void setCountry(String c) {\n        country = c;\n    }\n\n    /**\n     * get the Organization of the user from the Distinguished Name dn\n     * @return String representing the organization\n     * The dn string is of the form cn=\"name\", o=\"organization\", c=\"country\"\n     */\n    public String getOrg() {\n        return organization;\n    }\n\n    /**\n     * Return a Properties sheet with identification\n     * @return\n     */\n    public Properties getCredentials() {\n        Properties props = new Properties();\n        props.setProperty(\"subjectDN\", getDN());\n        props.setProperty(\"EMail\", getUserId());\n        return props;\n    }\n\n    /**\n     * set the organization\n     */\n    public void setOrg(String org) {\n        organization = org;\n    }\n\n    /**\n     * copy nonempty fiels into the fields of object\n     * @param newUser\n     */\n    public void update(User newUser) {\n        organization = newUser.getOrg();\n        country = newUser.getCountry();\n        roles = newUser.getRoles();\n        groups = newUser.getGroups();\n        userName = newUser.getUserName();\n        sn = newUser.getSurName();\n        passwd = newUser.getPassword();\n        userId = newUser.getUserId();\n    }\n\n    /**\n     * String representation of user is simply its userId;\n     * @return String representation of User\n     */\n    public String toString() {\n        // char sep = '\\n';\n        StringBuffer buff = new StringBuffer();\n        buff.append(\"dn: \" + getDN() + sep);\n        buff.append(\"cn: \" + getUserName() + sep);\n        buff.append(\"id: \" + getUserId() + sep);\n        buff.append(\"sn: \" + getSurName() + sep);\n        buff.append(\"userPassword: \" + getPassword() + sep);\n        if (getRoles() != null) {\n            Iterator it = getRoles().iterator();\n            while (it.hasNext()) buff.append(\"role: \" + (String) (it.next()) + sep);\n        }\n        if (getGroups() != null) {\n            Iterator it = getGroups().iterator();\n            while (it.hasNext()) buff.append(\"group: \" + (String) (it.next()) + sep);\n        }\n        if (getIpAddr() != null)\n            buff.append(\"ip: \" + getIpAddr() + sep);\n        buff.append(\"objectClass: top\" + sep);\n        buff.append(\"objectClass: person\" + sep);\n        return buff.toString();\n    }\n\n    /**\n     * String representation with user defined separator\n     * @param sep\n     * @return String representation of User\n     */\n    public String toString(String sep) {\n        StringBuffer buff = new StringBuffer();\n        buff.append(\"dn: \" + getDN() + sep);\n        buff.append(\"cn: \" + getUserName() + sep);\n        buff.append(\"id: \" + getUserId() + sep);\n        buff.append(\"sn: \" + getSurName() + sep);\n        buff.append(\"userPassword: \" + getPassword() + sep);\n        Set rolebuf = new HashSet();\n        rolebuf = getRoles();\n        Iterator it = rolebuf.iterator();\n        while (it.hasNext()) buff.append(\"role: \" + (String) (it.next()) + sep);\n        Set groupbuf = new HashSet();\n        groupbuf = getGroups();\n        it = groupbuf.iterator();\n        while (it.hasNext()) buff.append(\"group: \" + (String) (it.next()) + sep);\n        buff.append(\"objectClass: top\" + sep);\n        buff.append(\"objectClass: person\" + sep);\n        return buff.toString();\n    }\n\n    /**\n     * create hashCode combining unique userId and ipAddr so user\n     * is distinguished coming from different \"locations\"\n     */\n    public int hashCode() {\n        // Improve hashcode calculation using member variables of this class\n        return 13 * userId.hashCode() + 7 * ipAddr.hashCode();\n    }\n\n    /**\n     *  Equality check for user to see if he is already known.\n     */\n    public boolean equals(Object user) {\n        // Return true if the result of the compareTo() method is zero\n        return compareTo(user) == 0;\n    }\n\n    /**\n     *  Compare to operation to see if the input user is the same as this user.\n     */\n    public int compareTo(Object user) {\n        // Compare the user IDs of the two user objects -\n        //  result is zero if they're identical (uses String compareTo function)\n        int result = userId.compareTo(((User) user).getUserId());\n        // If result is zero from previous method, return the comparison of IP addresses.\n        // Otherwise, return the result.\n        return result == 0 ? ipAddr.compareTo(((User) user).getIpAddr()) : result;\n    }\n\n    /**\n     * Create Digest for each input identity\n     * @param salt to set the base for the encryption\n     * @param identity to be encrypted\n     */\n    public String createDigest(byte[] salt, String identity) {\n        String label = (salt.length > 0) ? \"{SSHA}\" : \"{SHA}\";\n        if (sha == null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash = sha.digest();\n        return label + new String(Base64.encode(concatenate(pwhash, salt)));\n    }\n\n    /**\n     * Check Digest against identity\n     * @param digest is digest to be checked against\n     * @param identity to be checked\n     */\n    public boolean checkDigest(String digest, String identity) {\n        if (digest.regionMatches(true, 0, \"{SHA}\", 0, 5)) {\n            // ignore the label\n            digest = digest.substring(5);\n        } else if (digest.regionMatches(true, 0, \"{SSHA}\", 0, 6)) {\n            // ignore the label\n            digest = digest.substring(6);\n        }\n        byte[][] hs = split(Base64.decode(digest.getBytes()), 20);\n        byte[] hash = hs[0];\n        byte[] salt = hs[1];\n        if (sha == null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash = sha.digest();\n        boolean valid = true;\n        if (!MessageDigest.isEqual(hash, pwhash)) {\n            valid = false;\n            cat.warn(\"doesn't match: \" + identity);\n        }\n        return valid;\n    }\n\n    /**\n     * Combine two byte arrays\n     * @param l first byte array\n     * @param r second byte array\n     * @return byte[] combined byte array\n     */\n    private static byte[] concatenate(byte[] l, byte[] r) {\n        byte[] b = new byte[l.length + r.length];\n        System.arraycopy(l, 0, b, 0, l.length);\n        System.arraycopy(r, 0, b, l.length, r.length);\n        return b;\n    }\n\n    /**\n     * split a byte array in two\n     * @param src byte array to be split\n     * @param n element at which to split the byte array\n     * @return byte[][]  two byte arrays that have been split\n     */\n    private static byte[][] split(byte[] src, int n) {\n        byte[] l, r;\n        if (src == null || src.length <= n) {\n            l = src;\n            r = new byte[0];\n        } else {\n            l = new byte[n];\n            r = new byte[src.length - n];\n            System.arraycopy(src, 0, l, 0, n);\n            System.arraycopy(src, n, r, 0, r.length);\n        }\n        byte[][] lr = { l, r };\n        return lr;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/UserTest4.java",
		"test_prompt": "// UserTest4.java\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link User}.\n* It contains ten unit test cases for the {@link User#createDigest(byte[], String)} method.\n*/\nclass UserTest4 {"
	},
	{
		"original_code": "// User.java\n/*\n *   CVS $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\n\n/**\n * User class contains all the necessary attributes of a logged in user\n * @author $Author: grodecki $\n * @version $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n */\npublic class User implements Comparable, Serializable {\n\n    // static final long serialVersionUID = -3313178117323543078L;\n    static final long serialVersionUID = 6729362233633496647L;\n\n    // id (key)\n    private String userId = \"\";\n\n    // current IP address\n    private String ipAddr;\n\n    //cn CommonName\n    private String userName = \"\";\n\n    private String email = \"\";\n\n    private Set roles;\n\n    private Set groups;\n\n    // Groups active for the user based on his location\n    private Set activegroups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    // user password change required before using the system?\n    private boolean passchange = false;\n\n    private Set allowedips;\n\n    LdapContext dctx;\n\n    // private String dn;  //Distinguished name    (cn, o, c)\n    // c\n    private String country = \"\";\n\n    // o\n    private String organization = \"\";\n\n    // encrypted    // userPassword\n    private String passwd = \"\";\n\n    // surname\n    private String sn = \"\";\n\n    private transient MessageDigest sha;\n\n    private static String sep = System.getProperty(\"line.separator\");\n\n    private static String salt = \"XXXX\";\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(User.class.getName());\n\n    public User() {\n    }\n\n    /**\n     * User object constructed from userId and userName\n     */\n    public User(String userId, String userName) {\n        this();\n        //\tSystem.out.println(\"userId: \"+userId);\n        //id\n        this.userId = userId.trim();\n        //cn\n        this.userName = userName.trim();\n    }\n\n    public void init() {\n        try {\n            sha = MessageDigest.getInstance(\"SHA-1\");\n        } catch (java.security.NoSuchAlgorithmException e) {\n            cat.error(\"SHA-1 constructor failed: \", e);\n        }\n    }\n\n    /**\n     * get userId previously set\n     * @return userId\n     */\n    public String getUserId() {\n        //\tSystem.out.println(\"getUserId: \"+userId);\n        return userId;\n    }\n\n    /**\n     * set the UserId\n     * @param id to be set\n     */\n    public void setUserId(String id) {\n        userId = id.trim();\n    }\n\n    /**\n     * encode the  password\n     * @param password to be encoded\n     */\n    public void encodePassword(String password) {\n        // only set password if it is non null.\n        if (passwd != null && (password != null) && !password.equals(\"\"))\n            passwd = createDigest(salt.getBytes(), password);\n    }\n\n    /**\n     * Validate the password\n     * @param password\n     * @return\n     */\n    public boolean checkPassword(String password) {\n        if (passwd == null)\n            return false;\n        return checkDigest(passwd, password);\n    }\n\n    /**\n     * set the encrypted password\n     * @param password  as encrypted digest (SHA algorithm)\n     */\n    public void setPassword(String password) {\n        passwd = password;\n    }\n\n    /**\n     * get the encrypted Password\n     * @return encrypted password string\n     */\n    public String getPassword() {\n        return passwd;\n    }\n\n    /**\n     * set the SurName\n     * @param surname\n     */\n    public void setSurName(String surname) {\n        sn = surname;\n    }\n\n    /**\n     * get the SurName\n     * @return sn\n     */\n    public String getSurName() {\n        return sn;\n    }\n\n    /**\n     * get userName\n     * @return userName\n     */\n    public String getUserName() {\n        return userName;\n    }\n\n    /**\n     * set the User Name (cn field in LDAP\n     * @param name\n     */\n    public void setUserName(String name) {\n        userName = name.trim();\n    }\n\n    /**\n     * get the IpAddr of this user\n     * @return String containing ipAddr\n     */\n    public String getIpAddr() {\n        return ipAddr;\n    }\n\n    /**\n     * set the IpAddr of this user\n     * @param ipAddr  (should validate the address)\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        email = email.trim();\n    }\n\n    public Set getRoles() {\n        return roles;\n    }\n\n    public void addRole(String role) {\n        if (roles == null)\n            roles = new HashSet();\n        roles.add(role);\n    }\n\n    public Set getGroups() {\n        return groups;\n    }\n\n    public void addGroup(String group) {\n        if (groups == null)\n            groups = new HashSet();\n        groups.add(group);\n    }\n\n    public Set getActivegroups() {\n        return activegroups;\n    }\n\n    public void addActivegroup(String group) {\n        if (activegroups == null)\n            activegroups = new HashSet();\n        activegroups.add(group);\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = passvalidstart;\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public boolean getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(boolean passchange) {\n        this.passchange = passchange;\n    }\n\n    public Set getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = new HashSet();\n        allowedips.add(allowed_ip);\n    }\n\n    public void setLdapContext(LdapContext dctx) {\n        this.dctx = dctx;\n    }\n\n    public LdapContext getLdapContext() {\n        return dctx;\n    }\n\n    /**\n     * set the Distinguished Name of the person\n     * @param dn containing distinguished name    (should check its validity)\n     */\n    public void setDN(String dn) {\n        //  cat.debug(\"setDN: \" + dn);\n        if (dn != null) {\n            StringTokenizer st = new StringTokenizer(dn, \",\");\n            while (st.hasMoreTokens()) {\n                String tok = st.nextToken();\n                StringTokenizer stoken = new StringTokenizer(tok, \"=\");\n                String name = stoken.nextToken();\n                // System.out.println(\"token: \"+tok +\" name: \"+name);\n                if (name.trim().equals(\"o\")) {\n                    organization = stoken.nextToken();\n                    //   cat.debug(\"org: \"+organization);\n                    //break;\n                } else if (name.trim().equals(\"c\")) {\n                    country = stoken.nextToken();\n                } else if (name.trim().equals(\"cn\")) {\n                    userName = stoken.nextToken();\n                }\n            }\n        } else\n            cat.warn(\"setDN: dn is null\");\n        return;\n    }\n\n    /**\n     * set the salt for encryption\n     * @param theSalt\n     */\n    public static void setSalt(String theSalt) {\n        salt = theSalt;\n    }\n\n    /**\n     * get the Distinguished Name of the Person\n     * @return String containing the distinguished name\n     */\n    public String getDN() {\n        return \"cn=\" + userName + \", o=\" + organization + \", c=\" + country;\n        //  return dn;\n    }\n\n    /**\n     * get the country (c) parameter\n     * @return country\n     */\n    public String getCountry() {\n        return country;\n    }\n\n    /**\n     * set the country parameter\n     * @param c country\n     */\n    public void setCountry(String c) {\n        country = c;\n    }\n\n    /**\n     * get the Organization of the user from the Distinguished Name dn\n     * @return String representing the organization\n     * The dn string is of the form cn=\"name\", o=\"organization\", c=\"country\"\n     */\n    public String getOrg() {\n        return organization;\n    }\n\n    /**\n     * Return a Properties sheet with identification\n     * @return\n     */\n    public Properties getCredentials() {\n        Properties props = new Properties();\n        props.setProperty(\"subjectDN\", getDN());\n        props.setProperty(\"EMail\", getUserId());\n        return props;\n    }\n\n    /**\n     * set the organization\n     */\n    public void setOrg(String org) {\n        organization = org;\n    }\n\n    /**\n     * copy nonempty fiels into the fields of object\n     * @param newUser\n     */\n    public void update(User newUser) {\n        organization = newUser.getOrg();\n        country = newUser.getCountry();\n        roles = newUser.getRoles();\n        groups = newUser.getGroups();\n        userName = newUser.getUserName();\n        sn = newUser.getSurName();\n        passwd = newUser.getPassword();\n        userId = newUser.getUserId();\n    }\n\n    /**\n     * String representation of user is simply its userId;\n     * @return String representation of User\n     */\n    public String toString() {\n        // char sep = '\\n';\n        StringBuffer buff = new StringBuffer();\n        buff.append(\"dn: \" + getDN() + sep);\n        buff.append(\"cn: \" + getUserName() + sep);\n        buff.append(\"id: \" + getUserId() + sep);\n        buff.append(\"sn: \" + getSurName() + sep);\n        buff.append(\"userPassword: \" + getPassword() + sep);\n        if (getRoles() != null) {\n            Iterator it = getRoles().iterator();\n            while (it.hasNext()) buff.append(\"role: \" + (String) (it.next()) + sep);\n        }\n        if (getGroups() != null) {\n            Iterator it = getGroups().iterator();\n            while (it.hasNext()) buff.append(\"group: \" + (String) (it.next()) + sep);\n        }\n        if (getIpAddr() != null)\n            buff.append(\"ip: \" + getIpAddr() + sep);\n        buff.append(\"objectClass: top\" + sep);\n        buff.append(\"objectClass: person\" + sep);\n        return buff.toString();\n    }\n\n    /**\n     * String representation with user defined separator\n     * @param sep\n     * @return String representation of User\n     */\n    public String toString(String sep) {\n        StringBuffer buff = new StringBuffer();\n        buff.append(\"dn: \" + getDN() + sep);\n        buff.append(\"cn: \" + getUserName() + sep);\n        buff.append(\"id: \" + getUserId() + sep);\n        buff.append(\"sn: \" + getSurName() + sep);\n        buff.append(\"userPassword: \" + getPassword() + sep);\n        Set rolebuf = new HashSet();\n        rolebuf = getRoles();\n        Iterator it = rolebuf.iterator();\n        while (it.hasNext()) buff.append(\"role: \" + (String) (it.next()) + sep);\n        Set groupbuf = new HashSet();\n        groupbuf = getGroups();\n        it = groupbuf.iterator();\n        while (it.hasNext()) buff.append(\"group: \" + (String) (it.next()) + sep);\n        buff.append(\"objectClass: top\" + sep);\n        buff.append(\"objectClass: person\" + sep);\n        return buff.toString();\n    }\n\n    /**\n     * create hashCode combining unique userId and ipAddr so user\n     * is distinguished coming from different \"locations\"\n     */\n    public int hashCode() {\n        // Improve hashcode calculation using member variables of this class\n        return 13 * userId.hashCode() + 7 * ipAddr.hashCode();\n    }\n\n    /**\n     *  Equality check for user to see if he is already known.\n     */\n    public boolean equals(Object user) {\n        // Return true if the result of the compareTo() method is zero\n        return compareTo(user) == 0;\n    }\n\n    /**\n     *  Compare to operation to see if the input user is the same as this user.\n     */\n    public int compareTo(Object user) {\n        // Compare the user IDs of the two user objects -\n        //  result is zero if they're identical (uses String compareTo function)\n        int result = userId.compareTo(((User) user).getUserId());\n        // If result is zero from previous method, return the comparison of IP addresses.\n        // Otherwise, return the result.\n        return result == 0 ? ipAddr.compareTo(((User) user).getIpAddr()) : result;\n    }\n\n    /**\n     * Create Digest for each input identity\n     * @param salt to set the base for the encryption\n     * @param identity to be encrypted\n     */\n    public String createDigest(byte[] salt, String identity) {\n        String label = (salt.length > 0) ? \"{SSHA}\" : \"{SHA}\";\n        if (sha == null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash = sha.digest();\n        return label + new String(Base64.encode(concatenate(pwhash, salt)));\n    }\n\n    /**\n     * Check Digest against identity\n     * @param digest is digest to be checked against\n     * @param identity to be checked\n     */\n    public boolean checkDigest(String digest, String identity) {\n        if (digest.regionMatches(true, 0, \"{SHA}\", 0, 5)) {\n            // ignore the label\n            digest = digest.substring(5);\n        } else if (digest.regionMatches(true, 0, \"{SSHA}\", 0, 6)) {\n            // ignore the label\n            digest = digest.substring(6);\n        }\n        byte[][] hs = split(Base64.decode(digest.getBytes()), 20);\n        byte[] hash = hs[0];\n        byte[] salt = hs[1];\n        if (sha == null)\n            init();\n        sha.reset();\n        sha.update(identity.getBytes());\n        sha.update(salt);\n        byte[] pwhash = sha.digest();\n        boolean valid = true;\n        if (!MessageDigest.isEqual(hash, pwhash)) {\n            valid = false;\n            cat.warn(\"doesn't match: \" + identity);\n        }\n        return valid;\n    }\n\n    /**\n     * Combine two byte arrays\n     * @param l first byte array\n     * @param r second byte array\n     * @return byte[] combined byte array\n     */\n    private static byte[] concatenate(byte[] l, byte[] r) {\n        byte[] b = new byte[l.length + r.length];\n        System.arraycopy(l, 0, b, 0, l.length);\n        System.arraycopy(r, 0, b, l.length, r.length);\n        return b;\n    }\n\n    /**\n     * split a byte array in two\n     * @param src byte array to be split\n     * @param n element at which to split the byte array\n     * @return byte[][]  two byte arrays that have been split\n     */\n    private static byte[][] split(byte[] src, int n) {\n        byte[] l, r;\n        if (src == null || src.length <= n) {\n            l = src;\n            r = new byte[0];\n        } else {\n            l = new byte[n];\n            r = new byte[src.length - n];\n            System.arraycopy(src, 0, l, 0, n);\n            System.arraycopy(src, n, r, 0, r.length);\n        }\n        byte[][] lr = { l, r };\n        return lr;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/UserTest5.java",
		"test_prompt": "// UserTest5.java\npackage com.browsersoft.aacs;\n\nimport java.io.Serializable;\nimport java.security.MessageDigest;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport javax.naming.ldap.LdapContext;\nimport org.apache.xerces.impl.dv.util.Base64;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link User}.\n* It contains ten unit test cases for the {@link User#checkDigest(String, String)} method.\n*/\nclass UserTest5 {"
	},
	{
		"original_code": "// Login.java\n/*\n *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\n/**\n * This class manages authentication and user\n * attribute retrieval when a user tries to log in.\n */\npublic class Login {\n\n    //private static String[] names = null;\n    //private static String[] mail = null;\n    private String username = \"\";\n\n    private static String organization = \"OPENHRE\";\n\n    private static String country = \"US\";\n\n    private String password = \"\";\n\n    private String userid = \"\";\n\n    private String ipAddr = \"\";\n\n    // private static String userdb = \"users\";\n    //AACS.properties\n    private static String configFile = \"AACS\";\n\n    private static String authType = \"simple\";\n\n    private static String xacmlConfig = \"\";\n\n    private static String securityLog = \"\";\n\n    private static String securityLogFilePath = \"\";\n\n    // Date format used by OpenHRE\n    private final static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private final static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    private static Properties props;\n\n    private static UserMgr userMgr;\n\n    private static PDPadapter pdpadapter;\n\n    private User user;\n\n    private LdapService lservice;\n\n    private static Logger cat = Logger.getLogger(Login.class.getName());\n\n    /**\n     * Public default constructor\n     */\n    public Login() {\n    }\n\n    /**\n     * Construct a Login with a UserId\n     */\n    public Login(String userId) {\n        this();\n        this.setUserId(userId);\n    }\n\n    /**\n     * Construct a Login with a UserId and IP Address\n     */\n    public Login(String userId, String ipAddr) {\n        this(userId);\n        this.setIpAddr(ipAddr);\n    }\n\n    /**\n     * @param theConfigFile the properties file\n     */\n    public static void setConfigFile(String theConfigFile) {\n        configFile = theConfigFile;\n    }\n\n    /**\n     * Load and get the Properties from the Config File\n     * @param theConfigFile the properties file\n     */\n    public static Properties getProps(String theConfigFile) {\n        setConfigFile(theConfigFile);\n        return getProps();\n    }\n\n    /**\n     * Load and get the Properties from the preset Config File\n     */\n    public static Properties getProps() {\n        init();\n        return props;\n    }\n\n    /**\n     * Initialize and load all the users.\n     */\n    public static String getSecurityLogFilePath() {\n        return securityLogFilePath;\n    }\n\n    public static void init() {\n        if (props != null)\n            return;\n        props = new Properties();\n        cat.info(\"Loading Properties from \" + configFile);\n        loadProperties(props, configFile);\n        // set the default organization and country\n        organization = props.getProperty(\"organization\", \"OPENHRE\");\n        country = props.getProperty(\"country\", \"US\");\n        authType = props.getProperty(\"AuthType\", \"simple\");\n        xacmlConfig = props.getProperty(\"XACMLConfig\", \"\");\n        cat.info(\"organization is \" + organization);\n        cat.info(\"country is \" + country);\n        cat.info(\"AuthType is \" + authType);\n        cat.info(\"XACMLConfig is \" + xacmlConfig);\n        securityLog = props.getProperty(\"SecurityLog\", \"\");\n        // create security log file if it doesn't exist\n        try {\n            File file = new File(securityLog);\n            securityLogFilePath = file.getAbsolutePath();\n            cat.info(\"Preparing Security Log file \" + securityLogFilePath);\n            // Create file if it does not exist\n            file.createNewFile();\n            // Get the XACML PDPadapter\n            pdpadapter = new PDPadapter(xacmlConfig);\n        } catch (Exception e) {\n            cat.fatal(\"Exception initializing Login manager\", e);\n            e.printStackTrace();\n        }\n        if (userMgr == null) {\n            if (authType.equals(\"simple\")) {\n                userMgr = new SimpleUserMgr(configFile);\n            } else if (authType.equals(\"krb5\")) {\n                userMgr = new KrbUserMgr();\n            }\n        }\n    }\n\n    public static void loadProperties(Properties props, String configFile) {\n        try {\n            props.load(Login.class.getResourceAsStream(configFile + \".properties\"));\n        } catch (Exception e) {\n            System.out.println(\"Could not read \" + configFile + \".properties\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * set the username  and get the user corresponding to the resulting dn\n     * @param username\n     */\n    public void setUsername(String username) {\n        //\t\tSystem.out.println(\"setting username: \" +username);\n        //        user = null;\n        this.username = username.trim();\n        //user = userMgr.getUser(username, organization);\n        user.setUserName(username);\n        cat.debug(\"setUserName: \" + username);\n    }\n\n    /**\n     * Get filepath of security log.\n     * ASSUMPTION: init() was called (i.e. securityLog was initialized)\n     * @return absolute filepath\n     */\n    /**\n     * get the current username  from user if defined\n     */\n    public String getUsername() {\n        if (user != null)\n            return user.getUserName();\n        else\n            return username;\n    }\n\n    /**\n     * set ipAddr for login\n     * @param ipAddr\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n        if (user != null)\n            user.setIpAddr(ipAddr);\n    }\n\n    /**\n     * get ipAddress of user if defined\n     * return String\n     */\n    public String getIpAddr() {\n        if (user != null)\n            return user.getIpAddr();\n        else\n            return ipAddr;\n    }\n\n    /**\n     * set the password\n     * @param password\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**\n     *  set the email address\n     * @param email address\n     */\n    /*    public void setEmail(String email) {\n//\t\tSystem.out.println(\"setting email: \"+email);\n        this.email = email;\n        if (user != null) user.setUserId(email);\n    }\n*/\n    /**\n     * set the active user from the userId\n     * @param userId\n     */\n    public void setUserId(String usrId) {\n        userid = usrId;\n        cat.debug(\"setUserId: \" + userid);\n    }\n\n    /**\n     * get the current User\n     */\n    public User getUser() {\n        return user;\n    }\n\n    /**\n     * get the current User ID\n     */\n    public String getUserId() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current email address\n     */\n    public String getEmail() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current LdapService\n     */\n    public LdapService getLdapService() {\n        if (lservice == null)\n            return (lservice = new LdapService(user.getLdapContext()));\n        else\n            return lservice;\n    }\n\n    /**\n     * get the User from one of two ways. Return the current user if it is already defined.\n     * First see if there is a defined email address (userId) and get the user directly\n     * If not, then check the organization table and the the associated table of username\n     * using the username and organization (country is defaulted to \"US\").\n     */\n    /*    public User getUser() {\n        //   try {\n        // makeDN();\n        if (user != null) return user;\n        if (userid != null || userid != \"\")\n            user = userMgr.getUser(userid);\n        else\n            user = userMgr.getUser(username, organization, userid);\n        cat.debug(\"getUser: \"+user);\n        return user;\n\n    }\n*/\n    /**\n     * return the role of the current user.\n     * @return String containing the Role of the current user\n     *     /\n     *    public String getRole() {\n     *        if (user != null)\n     *            return user.getRole();\n     *        else\n     *            return null;\n     *    }\n     *\n     *    /**\n     * get the Distinguished Name of the user\n     * @return String containing the distinguished name\n     *     /\n     *    public String getDN() {\n     *        if (user != null)\n     *            return user.getDN();\n     *        else\n     *            return null;\n     *    }\n     */\n    /**\n     * Authorize a User without checking the password.\n     * Note that this should only be called for Users\n     * that are already Authenticated.\n     * @return user\n     */\n    public User authorize() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        user = userMgr.getUser(this.userid);\n        user.setIpAddr(this.ipAddr);\n        // compare password validity start date with current date\n        Date today = new Date();\n        Date pwvd = null;\n        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(\"\"))) {\n            pwvd = convertDateFromUTC(user.getPassvalidstart());\n            if (!dateCompare(pwvd, today)) {\n                log(user, \"Not allowed to login currently.\");\n                user = null;\n                throw new LoginException(\"Not allowed to login currently.\");\n            }\n        }\n        // check if user needs to change password before proceeding\n        user.setPasschange(false);\n        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals(\"\")) && (!user.getPassrenewal().equals(\"\")) && (!user.getPassrenewal().equals(\"-1\"))) {\n            Calendar c1 = Calendar.getInstance();\n            c1.setTime(pwvd);\n            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));\n            if (dateCompare(c1.getTime(), today)) {\n                user.setPasschange(true);\n            }\n        }\n        // Performing IP based filtering and active groups determination\n        // based on current location.\n        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.\n        if ((user.getAllowedips() != null) && (props.getProperty(\"AuthType\", \"krb5\").equals(\"krb5\")) && (props.getProperty(\"IPfiltering\", \"yes\").equals(\"yes\"))) {\n            int currentip = getIpInteger(user.getIpAddr());\n            // IP based filtering\n            cat.info(\"Performing IP filtering for \" + getUserId());\n            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);\n            if (ipcheck_result == false) {\n                log(user, \"Not authorized from the current IP address.\");\n                throw new LoginException(\"Not authorized from the current IP address.\");\n            }\n            // Active groups determination\n            cat.info(\"Determining active groups for \" + getUserId());\n            boolean faccheck_result;\n            // get all groups from LDAPservice\n            Set usergrps = user.getGroups();\n            if (usergrps != null && usergrps.size() > 0) {\n                // Setup the interface to the LDAP server\n                getLdapService();\n                //session.setAttribute(\"ldapservice\", lservice);\n                Iterator grpit = usergrps.iterator();\n                while (grpit.hasNext()) {\n                    // Fetch each group's details from LDAP\n                    Group grp = (Group) lservice.getGroup(grpit.next().toString());\n                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);\n                    if (faccheck_result == true) {\n                        log(user, \"Active group: \" + grp.getCn());\n                        user.addActivegroup(grp.getCn());\n                    }\n                }\n                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {\n                    log(user, \" Accessing from remote location.\");\n                    user.addActivegroup(\"remote\");\n                }\n            }\n        }\n        // end IP based filtering and Active groups determination\n        return user;\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate(String userid, String password, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.password = password;\n        this.ipAddr = ipaddr;\n        return authenticate();\n    }\n\n    /**\n     * Authorize a pre-Authenticated User\n     * @return user\n     */\n    public User authorize(String userid, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.ipAddr = ipaddr;\n        return authorize();\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        if (!userMgr.checkSecret(userid, password, authType)) {\n            cat.warn(\"Invalid Password! User: \" + username + \" ,userid: \" + userid);\n            throw new LoginException(\"Password invalid\");\n        }\n        user = userMgr.getUser();\n        user.setIpAddr(this.ipAddr);\n        authorize();\n        return user;\n    }\n\n    /**\n     * check permissions for the current user\n     */\n    public boolean accessDecision(User usr, String resource, String action) {\n        if (\"simple\".equals(authType)) {\n            cat.debug(\"accessDecision() always true for simple authType\");\n            return true;\n        }\n        if (cat.isDebugEnabled()) {\n            cat.debug(\"User for accessDecision() is \" + usr);\n            cat.debug(\"resource is \" + resource);\n            cat.debug(\"action is \" + action);\n            cat.debug(\"XACMLConfig is \" + xacmlConfig);\n        }\n        if (usr == null)\n            return false;\n        boolean ac_result = false;\n        try {\n            // create XACML request\n            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());\n            // encode the Request and print it to standard out\n            request.encode(System.out, new Indenter());\n            if (pdpadapter.makeDecision(request) == 0)\n                ac_result = true;\n            else\n                ac_result = false;\n            cat.debug(\"Access Decision: \" + ac_result);\n        } catch (Exception e) {\n            cat.error(e);\n            e.printStackTrace();\n        }\n        return ac_result;\n    }\n\n    public void log(User user, String info) {\n        FileAppender appender = null;\n        try {\n            appender = new FileAppender(new SimpleLayout(), securityLog, true);\n        } catch (Exception e) {\n            cat.error(e);\n        }\n        cat.addAppender(appender);\n        Level oldlevel = cat.getLevel();\n        cat.setLevel((Level) Level.INFO);\n        Date now = new Date();\n        if (user == null) {\n            cat.info(now + \" - \" + username + \" - \" + userid + \" - \" + ipAddr + \" -- \" + info);\n        } else {\n            // new log format (for better parsing in Cocoon)\n            cat.info(now + \" - \" + user.getUserName() + \" - \" + user.getUserId() + \" - \" + user.getIpAddr() + \" -- \" + info);\n        }\n        cat.setLevel(oldlevel);\n        cat.removeAppender(appender);\n    }\n\n    /**\n     * logout the current user\n     */\n    public void logOut() {\n        userMgr.logOut();\n        user = null;\n        password = null;\n        username = null;\n    }\n\n    private Date convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return specdate;\n    }\n\n    private boolean dateCompare(Date date1, Date date2) {\n        Calendar c1 = Calendar.getInstance();\n        Calendar c2 = Calendar.getInstance();\n        c1.setTime(date1);\n        c2.setTime(date2);\n        if (c1.before(c2))\n            return true;\n        else\n            return false;\n    }\n\n    private int getIpInteger(String ip) {\n        StringTokenizer st = new StringTokenizer(ip, \".\");\n        int bitposition = 24;\n        int ipnumber = 0;\n        while (st.hasMoreTokens()) {\n            String curtoken = st.nextToken();\n            if (ipnumber == 0)\n                ipnumber = (Integer.parseInt(curtoken) << bitposition);\n            else\n                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);\n            bitposition -= 8;\n        }\n        return ipnumber;\n    }\n\n    private boolean ipRangeCheck(Set allowedips, int currentip) {\n        // Check if the current IP address falls between the given range of allowed IP addresses\n        boolean ipmatch = false;\n        if (allowedips == null) {\n            cat.debug(\"No IP address range specified.\");\n            return false;\n        }\n        Set allowed_ips = new HashSet();\n        allowed_ips = (HashSet) allowedips;\n        Iterator ipit = allowed_ips.iterator();\n        while (ipit.hasNext()) {\n            int finalip = 0;\n            // subnet mask bits\n            int n = 0;\n            // get the IP address and the subnet mask bits (if any)\n            StringTokenizer st = new StringTokenizer(ipit.next().toString(), \"/\");\n            if (st.hasMoreTokens()) {\n                finalip = getIpInteger(st.nextToken());\n                if (st.hasMoreTokens())\n                    n = Integer.parseInt(st.nextToken());\n            }\n            // Every IP address allowed for the user\n            if (finalip == 0) {\n                cat.info(\"All IP addresses allowed.\");\n                ipmatch = true;\n            }\n            if (n != 0) {\n                // compute an n bit subnet mask, all 1s except for last n bits.\n                int subnet = ~((1 << n) - 1);\n                int t1 = finalip & subnet;\n                int t2 = currentip & subnet;\n                if (t1 == t2)\n                    ipmatch = true;\n            } else {\n                if (finalip == currentip)\n                    ipmatch = true;\n            }\n        }\n        return ipmatch;\n    }\n\n    /**\n     * Change the User's password\n     * (this should be moved to KrbUserMgr)\n     */\n    public void changePassword(String newpass) throws Exception {\n        // read the configuration properties\n        if (cat.isDebugEnabled())\n            cat.debug(\"using props \" + props);\n        String krbrealm = props.getProperty(\"krbrealm\", \"YOUR-KERBEROS-REALM\");\n        String editkrb = props.getProperty(\"editkrb\", \"no\");\n        String kadminLocal = props.getProperty(\"kadmin.local\", \"kadmin.local\");\n        int exitVal = 0;\n        String userid = user.getUserId();\n        // strip only the unique username from the userid\n        int ind = userid.indexOf(\"@\");\n        if (ind > 0)\n            userid = userid.substring(0, ind);\n        cat.debug(\"editkrb: \" + editkrb);\n        if (editkrb.toLowerCase().equals(\"yes\")) {\n            // Execute the UNIX command to reset the principal's password in the Kerberos\n            // database.\n            // Assumption: The web server and the kerberos server are running on the same UNIX\n            // based machine.Otherwise please modify the following according to your settings.\n            String krbprinc = userid + \"@\" + krbrealm;\n            cat.info(\"Reseting principal \\\"\" + krbprinc + \"\\\"'s password in \" + \"the Kerberos database\");\n            Runtime rt = Runtime.getRuntime();\n            // Create a String array consisting of the command and its arguments\n            String[] cmd = { kadminLocal, \"-p \" + userid, \"-q \\\"\\\"cpw -pw \" + newpass + \" \" + krbprinc + \"\\\"\\\"\" };\n            cat.debug(\"exec'ing Runtime command: \" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);\n            Process ps = rt.exec(cmd);\n            // For printing error messages\n            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), \"ERROR\");\n            // For printing output\n            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), \"OUTPUT\");\n            // Start printing\n            errorHandler.start();\n            outputHandler.start();\n            // Print exit value\n            exitVal = ps.waitFor();\n            cat.debug(\"Kerberos update status: \" + exitVal);\n        }\n        if (exitVal == 0) {\n            getLdapService();\n            Person person = lservice.getPerson(userid);\n            person.setPasschange(\"no\");\n            // Put current date as password valid start date\n            Date today = new Date();\n            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);\n            person.setPassvalidstart(sdf.format(today));\n            if (lservice.updatePerson(person, person.getDn()) == true) {\n            } else\n                throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n        } else\n            throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n    }\n    /*  /** obtain list of valid users\n     * @return String[] list of known users\n     /\n    public static String[] getNames() {\n        if (names == null) {\n            if (userMgr == null) init();\n            names = userMgr.getUserNames();\n        }\n\n        return names;\n    }\n\n    /**\n     * return known email addresses\n     * @return String[] list of known emails\n     /\n    public static String[] getMail() {\n        if (mail == null) {\n            if (userMgr == null) init();\n            mail = userMgr.getUserIds();\n        }\n        /*\n        {\n            if (id == null) init();\n            ArrayList v = null;\n            try {\n                JDBMEnumeration e = id.keys();\n                v = new ArrayList();\n                while (e.hasMoreElements()) {\n                    v.add(e.nextElement());\n                }\n            } catch (IOException e1) {\n                cat.error(\"getMail: \" + e1);\n                return new String[0];\n            }\n            mail = new String[v.size()];\n            cat.debug(\"getMail: \"+mail.length+ \" elements\");\n            v.toArray(mail);\n        }  /\n        return mail;\n    }\n\n\n    /**\n     *  set the SimpleUserMgr containing the Users.\n     * @param theUserMgr to be used\n     /\n    public static void setUserMgr(UserMgr theUserMgr) {\n        userMgr = theUserMgr;\n    }\n\n    /**\n     * get the SimpleUserMgr that contains the Users\n     * @return SimpleUserMgr\n     /\n    public static SimpleUserMgr getUserMgr() {\n        return userMgr;\n    }\n\n    /**\n     * get all the users in memory\n     * @return String\n     /\n    public String toString() {\n        return userMgr.export();\n        /*\n        StringBuffer buff = new StringBuffer();\n        try {\n            JDBMEnumeration c = id.values();\n            while (c.hasMoreElements()) {\n                buff.append(c.nextElement().toString() + '\\n');\n            }\n        } catch (IOException e) {\n            cat.error(\"getUsers: \" + e);\n        }\n        return buff.toString();\n        /\n    }\n\n    /**\n     * test program\n     /\n    public static void main(String[] argv) {\n        Login login = new Login();\n      //  SimpleUserMgr.setConfigFile(argv[0]);\n        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);\n        // usrMgr.init();\n        login.setConfigFile(argv[0]);\n        login.init();\n        login.getUserMgr().addUser(\"cn=Jim Smith, o=LANL, c=US\", \"Jim Smith\", \"Smith\", \"smith@foo.com\", \"submitter\", \"junk\");\n        login.getUserMgr().addUser(\"dn: cn=Dave Barry, o=UNM, c=US\\ncn: Dave Barry\\nemail: barry@goofoff.com\\nsn: Barry\\nuserPassword: stuff\\nrole: staff\");\n\n        login.setUsername(\"Dave Barry\");\n        login.setOrg(\"UNM\");\n        login.setUsername(\"Dave Barry\");\n        cat.debug(login.getUser());\n        login.getUserMgr().delUser(\"smith@foo.com\");\n        String[] mail = Login.getMail();\n        cat.debug(\"Mail: \"+mail[0]);\n        cat.debug(login.getUserMgr().getMailbyOrg(\"LANL\"));\n        String[] names = Login.getNames();\n        cat.debug(\"names: \"+names[0]);\n        System.out.println(login.toString());\n\n    } */\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LoginTest0.java",
		"test_prompt": "// LoginTest0.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#getProps(String)} method.\n*/\nclass LoginTest0 {"
	},
	{
		"original_code": "// Login.java\n/*\n *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\n/**\n * This class manages authentication and user\n * attribute retrieval when a user tries to log in.\n */\npublic class Login {\n\n    //private static String[] names = null;\n    //private static String[] mail = null;\n    private String username = \"\";\n\n    private static String organization = \"OPENHRE\";\n\n    private static String country = \"US\";\n\n    private String password = \"\";\n\n    private String userid = \"\";\n\n    private String ipAddr = \"\";\n\n    // private static String userdb = \"users\";\n    //AACS.properties\n    private static String configFile = \"AACS\";\n\n    private static String authType = \"simple\";\n\n    private static String xacmlConfig = \"\";\n\n    private static String securityLog = \"\";\n\n    private static String securityLogFilePath = \"\";\n\n    // Date format used by OpenHRE\n    private final static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private final static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    private static Properties props;\n\n    private static UserMgr userMgr;\n\n    private static PDPadapter pdpadapter;\n\n    private User user;\n\n    private LdapService lservice;\n\n    private static Logger cat = Logger.getLogger(Login.class.getName());\n\n    /**\n     * Public default constructor\n     */\n    public Login() {\n    }\n\n    /**\n     * Construct a Login with a UserId\n     */\n    public Login(String userId) {\n        this();\n        this.setUserId(userId);\n    }\n\n    /**\n     * Construct a Login with a UserId and IP Address\n     */\n    public Login(String userId, String ipAddr) {\n        this(userId);\n        this.setIpAddr(ipAddr);\n    }\n\n    /**\n     * @param theConfigFile the properties file\n     */\n    public static void setConfigFile(String theConfigFile) {\n        configFile = theConfigFile;\n    }\n\n    /**\n     * Load and get the Properties from the Config File\n     * @param theConfigFile the properties file\n     */\n    public static Properties getProps(String theConfigFile) {\n        setConfigFile(theConfigFile);\n        return getProps();\n    }\n\n    /**\n     * Load and get the Properties from the preset Config File\n     */\n    public static Properties getProps() {\n        init();\n        return props;\n    }\n\n    /**\n     * Initialize and load all the users.\n     */\n    public static String getSecurityLogFilePath() {\n        return securityLogFilePath;\n    }\n\n    public static void init() {\n        if (props != null)\n            return;\n        props = new Properties();\n        cat.info(\"Loading Properties from \" + configFile);\n        loadProperties(props, configFile);\n        // set the default organization and country\n        organization = props.getProperty(\"organization\", \"OPENHRE\");\n        country = props.getProperty(\"country\", \"US\");\n        authType = props.getProperty(\"AuthType\", \"simple\");\n        xacmlConfig = props.getProperty(\"XACMLConfig\", \"\");\n        cat.info(\"organization is \" + organization);\n        cat.info(\"country is \" + country);\n        cat.info(\"AuthType is \" + authType);\n        cat.info(\"XACMLConfig is \" + xacmlConfig);\n        securityLog = props.getProperty(\"SecurityLog\", \"\");\n        // create security log file if it doesn't exist\n        try {\n            File file = new File(securityLog);\n            securityLogFilePath = file.getAbsolutePath();\n            cat.info(\"Preparing Security Log file \" + securityLogFilePath);\n            // Create file if it does not exist\n            file.createNewFile();\n            // Get the XACML PDPadapter\n            pdpadapter = new PDPadapter(xacmlConfig);\n        } catch (Exception e) {\n            cat.fatal(\"Exception initializing Login manager\", e);\n            e.printStackTrace();\n        }\n        if (userMgr == null) {\n            if (authType.equals(\"simple\")) {\n                userMgr = new SimpleUserMgr(configFile);\n            } else if (authType.equals(\"krb5\")) {\n                userMgr = new KrbUserMgr();\n            }\n        }\n    }\n\n    public static void loadProperties(Properties props, String configFile) {\n        try {\n            props.load(Login.class.getResourceAsStream(configFile + \".properties\"));\n        } catch (Exception e) {\n            System.out.println(\"Could not read \" + configFile + \".properties\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * set the username  and get the user corresponding to the resulting dn\n     * @param username\n     */\n    public void setUsername(String username) {\n        //\t\tSystem.out.println(\"setting username: \" +username);\n        //        user = null;\n        this.username = username.trim();\n        //user = userMgr.getUser(username, organization);\n        user.setUserName(username);\n        cat.debug(\"setUserName: \" + username);\n    }\n\n    /**\n     * Get filepath of security log.\n     * ASSUMPTION: init() was called (i.e. securityLog was initialized)\n     * @return absolute filepath\n     */\n    /**\n     * get the current username  from user if defined\n     */\n    public String getUsername() {\n        if (user != null)\n            return user.getUserName();\n        else\n            return username;\n    }\n\n    /**\n     * set ipAddr for login\n     * @param ipAddr\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n        if (user != null)\n            user.setIpAddr(ipAddr);\n    }\n\n    /**\n     * get ipAddress of user if defined\n     * return String\n     */\n    public String getIpAddr() {\n        if (user != null)\n            return user.getIpAddr();\n        else\n            return ipAddr;\n    }\n\n    /**\n     * set the password\n     * @param password\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**\n     *  set the email address\n     * @param email address\n     */\n    /*    public void setEmail(String email) {\n//\t\tSystem.out.println(\"setting email: \"+email);\n        this.email = email;\n        if (user != null) user.setUserId(email);\n    }\n*/\n    /**\n     * set the active user from the userId\n     * @param userId\n     */\n    public void setUserId(String usrId) {\n        userid = usrId;\n        cat.debug(\"setUserId: \" + userid);\n    }\n\n    /**\n     * get the current User\n     */\n    public User getUser() {\n        return user;\n    }\n\n    /**\n     * get the current User ID\n     */\n    public String getUserId() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current email address\n     */\n    public String getEmail() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current LdapService\n     */\n    public LdapService getLdapService() {\n        if (lservice == null)\n            return (lservice = new LdapService(user.getLdapContext()));\n        else\n            return lservice;\n    }\n\n    /**\n     * get the User from one of two ways. Return the current user if it is already defined.\n     * First see if there is a defined email address (userId) and get the user directly\n     * If not, then check the organization table and the the associated table of username\n     * using the username and organization (country is defaulted to \"US\").\n     */\n    /*    public User getUser() {\n        //   try {\n        // makeDN();\n        if (user != null) return user;\n        if (userid != null || userid != \"\")\n            user = userMgr.getUser(userid);\n        else\n            user = userMgr.getUser(username, organization, userid);\n        cat.debug(\"getUser: \"+user);\n        return user;\n\n    }\n*/\n    /**\n     * return the role of the current user.\n     * @return String containing the Role of the current user\n     *     /\n     *    public String getRole() {\n     *        if (user != null)\n     *            return user.getRole();\n     *        else\n     *            return null;\n     *    }\n     *\n     *    /**\n     * get the Distinguished Name of the user\n     * @return String containing the distinguished name\n     *     /\n     *    public String getDN() {\n     *        if (user != null)\n     *            return user.getDN();\n     *        else\n     *            return null;\n     *    }\n     */\n    /**\n     * Authorize a User without checking the password.\n     * Note that this should only be called for Users\n     * that are already Authenticated.\n     * @return user\n     */\n    public User authorize() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        user = userMgr.getUser(this.userid);\n        user.setIpAddr(this.ipAddr);\n        // compare password validity start date with current date\n        Date today = new Date();\n        Date pwvd = null;\n        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(\"\"))) {\n            pwvd = convertDateFromUTC(user.getPassvalidstart());\n            if (!dateCompare(pwvd, today)) {\n                log(user, \"Not allowed to login currently.\");\n                user = null;\n                throw new LoginException(\"Not allowed to login currently.\");\n            }\n        }\n        // check if user needs to change password before proceeding\n        user.setPasschange(false);\n        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals(\"\")) && (!user.getPassrenewal().equals(\"\")) && (!user.getPassrenewal().equals(\"-1\"))) {\n            Calendar c1 = Calendar.getInstance();\n            c1.setTime(pwvd);\n            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));\n            if (dateCompare(c1.getTime(), today)) {\n                user.setPasschange(true);\n            }\n        }\n        // Performing IP based filtering and active groups determination\n        // based on current location.\n        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.\n        if ((user.getAllowedips() != null) && (props.getProperty(\"AuthType\", \"krb5\").equals(\"krb5\")) && (props.getProperty(\"IPfiltering\", \"yes\").equals(\"yes\"))) {\n            int currentip = getIpInteger(user.getIpAddr());\n            // IP based filtering\n            cat.info(\"Performing IP filtering for \" + getUserId());\n            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);\n            if (ipcheck_result == false) {\n                log(user, \"Not authorized from the current IP address.\");\n                throw new LoginException(\"Not authorized from the current IP address.\");\n            }\n            // Active groups determination\n            cat.info(\"Determining active groups for \" + getUserId());\n            boolean faccheck_result;\n            // get all groups from LDAPservice\n            Set usergrps = user.getGroups();\n            if (usergrps != null && usergrps.size() > 0) {\n                // Setup the interface to the LDAP server\n                getLdapService();\n                //session.setAttribute(\"ldapservice\", lservice);\n                Iterator grpit = usergrps.iterator();\n                while (grpit.hasNext()) {\n                    // Fetch each group's details from LDAP\n                    Group grp = (Group) lservice.getGroup(grpit.next().toString());\n                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);\n                    if (faccheck_result == true) {\n                        log(user, \"Active group: \" + grp.getCn());\n                        user.addActivegroup(grp.getCn());\n                    }\n                }\n                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {\n                    log(user, \" Accessing from remote location.\");\n                    user.addActivegroup(\"remote\");\n                }\n            }\n        }\n        // end IP based filtering and Active groups determination\n        return user;\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate(String userid, String password, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.password = password;\n        this.ipAddr = ipaddr;\n        return authenticate();\n    }\n\n    /**\n     * Authorize a pre-Authenticated User\n     * @return user\n     */\n    public User authorize(String userid, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.ipAddr = ipaddr;\n        return authorize();\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        if (!userMgr.checkSecret(userid, password, authType)) {\n            cat.warn(\"Invalid Password! User: \" + username + \" ,userid: \" + userid);\n            throw new LoginException(\"Password invalid\");\n        }\n        user = userMgr.getUser();\n        user.setIpAddr(this.ipAddr);\n        authorize();\n        return user;\n    }\n\n    /**\n     * check permissions for the current user\n     */\n    public boolean accessDecision(User usr, String resource, String action) {\n        if (\"simple\".equals(authType)) {\n            cat.debug(\"accessDecision() always true for simple authType\");\n            return true;\n        }\n        if (cat.isDebugEnabled()) {\n            cat.debug(\"User for accessDecision() is \" + usr);\n            cat.debug(\"resource is \" + resource);\n            cat.debug(\"action is \" + action);\n            cat.debug(\"XACMLConfig is \" + xacmlConfig);\n        }\n        if (usr == null)\n            return false;\n        boolean ac_result = false;\n        try {\n            // create XACML request\n            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());\n            // encode the Request and print it to standard out\n            request.encode(System.out, new Indenter());\n            if (pdpadapter.makeDecision(request) == 0)\n                ac_result = true;\n            else\n                ac_result = false;\n            cat.debug(\"Access Decision: \" + ac_result);\n        } catch (Exception e) {\n            cat.error(e);\n            e.printStackTrace();\n        }\n        return ac_result;\n    }\n\n    public void log(User user, String info) {\n        FileAppender appender = null;\n        try {\n            appender = new FileAppender(new SimpleLayout(), securityLog, true);\n        } catch (Exception e) {\n            cat.error(e);\n        }\n        cat.addAppender(appender);\n        Level oldlevel = cat.getLevel();\n        cat.setLevel((Level) Level.INFO);\n        Date now = new Date();\n        if (user == null) {\n            cat.info(now + \" - \" + username + \" - \" + userid + \" - \" + ipAddr + \" -- \" + info);\n        } else {\n            // new log format (for better parsing in Cocoon)\n            cat.info(now + \" - \" + user.getUserName() + \" - \" + user.getUserId() + \" - \" + user.getIpAddr() + \" -- \" + info);\n        }\n        cat.setLevel(oldlevel);\n        cat.removeAppender(appender);\n    }\n\n    /**\n     * logout the current user\n     */\n    public void logOut() {\n        userMgr.logOut();\n        user = null;\n        password = null;\n        username = null;\n    }\n\n    private Date convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return specdate;\n    }\n\n    private boolean dateCompare(Date date1, Date date2) {\n        Calendar c1 = Calendar.getInstance();\n        Calendar c2 = Calendar.getInstance();\n        c1.setTime(date1);\n        c2.setTime(date2);\n        if (c1.before(c2))\n            return true;\n        else\n            return false;\n    }\n\n    private int getIpInteger(String ip) {\n        StringTokenizer st = new StringTokenizer(ip, \".\");\n        int bitposition = 24;\n        int ipnumber = 0;\n        while (st.hasMoreTokens()) {\n            String curtoken = st.nextToken();\n            if (ipnumber == 0)\n                ipnumber = (Integer.parseInt(curtoken) << bitposition);\n            else\n                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);\n            bitposition -= 8;\n        }\n        return ipnumber;\n    }\n\n    private boolean ipRangeCheck(Set allowedips, int currentip) {\n        // Check if the current IP address falls between the given range of allowed IP addresses\n        boolean ipmatch = false;\n        if (allowedips == null) {\n            cat.debug(\"No IP address range specified.\");\n            return false;\n        }\n        Set allowed_ips = new HashSet();\n        allowed_ips = (HashSet) allowedips;\n        Iterator ipit = allowed_ips.iterator();\n        while (ipit.hasNext()) {\n            int finalip = 0;\n            // subnet mask bits\n            int n = 0;\n            // get the IP address and the subnet mask bits (if any)\n            StringTokenizer st = new StringTokenizer(ipit.next().toString(), \"/\");\n            if (st.hasMoreTokens()) {\n                finalip = getIpInteger(st.nextToken());\n                if (st.hasMoreTokens())\n                    n = Integer.parseInt(st.nextToken());\n            }\n            // Every IP address allowed for the user\n            if (finalip == 0) {\n                cat.info(\"All IP addresses allowed.\");\n                ipmatch = true;\n            }\n            if (n != 0) {\n                // compute an n bit subnet mask, all 1s except for last n bits.\n                int subnet = ~((1 << n) - 1);\n                int t1 = finalip & subnet;\n                int t2 = currentip & subnet;\n                if (t1 == t2)\n                    ipmatch = true;\n            } else {\n                if (finalip == currentip)\n                    ipmatch = true;\n            }\n        }\n        return ipmatch;\n    }\n\n    /**\n     * Change the User's password\n     * (this should be moved to KrbUserMgr)\n     */\n    public void changePassword(String newpass) throws Exception {\n        // read the configuration properties\n        if (cat.isDebugEnabled())\n            cat.debug(\"using props \" + props);\n        String krbrealm = props.getProperty(\"krbrealm\", \"YOUR-KERBEROS-REALM\");\n        String editkrb = props.getProperty(\"editkrb\", \"no\");\n        String kadminLocal = props.getProperty(\"kadmin.local\", \"kadmin.local\");\n        int exitVal = 0;\n        String userid = user.getUserId();\n        // strip only the unique username from the userid\n        int ind = userid.indexOf(\"@\");\n        if (ind > 0)\n            userid = userid.substring(0, ind);\n        cat.debug(\"editkrb: \" + editkrb);\n        if (editkrb.toLowerCase().equals(\"yes\")) {\n            // Execute the UNIX command to reset the principal's password in the Kerberos\n            // database.\n            // Assumption: The web server and the kerberos server are running on the same UNIX\n            // based machine.Otherwise please modify the following according to your settings.\n            String krbprinc = userid + \"@\" + krbrealm;\n            cat.info(\"Reseting principal \\\"\" + krbprinc + \"\\\"'s password in \" + \"the Kerberos database\");\n            Runtime rt = Runtime.getRuntime();\n            // Create a String array consisting of the command and its arguments\n            String[] cmd = { kadminLocal, \"-p \" + userid, \"-q \\\"\\\"cpw -pw \" + newpass + \" \" + krbprinc + \"\\\"\\\"\" };\n            cat.debug(\"exec'ing Runtime command: \" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);\n            Process ps = rt.exec(cmd);\n            // For printing error messages\n            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), \"ERROR\");\n            // For printing output\n            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), \"OUTPUT\");\n            // Start printing\n            errorHandler.start();\n            outputHandler.start();\n            // Print exit value\n            exitVal = ps.waitFor();\n            cat.debug(\"Kerberos update status: \" + exitVal);\n        }\n        if (exitVal == 0) {\n            getLdapService();\n            Person person = lservice.getPerson(userid);\n            person.setPasschange(\"no\");\n            // Put current date as password valid start date\n            Date today = new Date();\n            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);\n            person.setPassvalidstart(sdf.format(today));\n            if (lservice.updatePerson(person, person.getDn()) == true) {\n            } else\n                throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n        } else\n            throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n    }\n    /*  /** obtain list of valid users\n     * @return String[] list of known users\n     /\n    public static String[] getNames() {\n        if (names == null) {\n            if (userMgr == null) init();\n            names = userMgr.getUserNames();\n        }\n\n        return names;\n    }\n\n    /**\n     * return known email addresses\n     * @return String[] list of known emails\n     /\n    public static String[] getMail() {\n        if (mail == null) {\n            if (userMgr == null) init();\n            mail = userMgr.getUserIds();\n        }\n        /*\n        {\n            if (id == null) init();\n            ArrayList v = null;\n            try {\n                JDBMEnumeration e = id.keys();\n                v = new ArrayList();\n                while (e.hasMoreElements()) {\n                    v.add(e.nextElement());\n                }\n            } catch (IOException e1) {\n                cat.error(\"getMail: \" + e1);\n                return new String[0];\n            }\n            mail = new String[v.size()];\n            cat.debug(\"getMail: \"+mail.length+ \" elements\");\n            v.toArray(mail);\n        }  /\n        return mail;\n    }\n\n\n    /**\n     *  set the SimpleUserMgr containing the Users.\n     * @param theUserMgr to be used\n     /\n    public static void setUserMgr(UserMgr theUserMgr) {\n        userMgr = theUserMgr;\n    }\n\n    /**\n     * get the SimpleUserMgr that contains the Users\n     * @return SimpleUserMgr\n     /\n    public static SimpleUserMgr getUserMgr() {\n        return userMgr;\n    }\n\n    /**\n     * get all the users in memory\n     * @return String\n     /\n    public String toString() {\n        return userMgr.export();\n        /*\n        StringBuffer buff = new StringBuffer();\n        try {\n            JDBMEnumeration c = id.values();\n            while (c.hasMoreElements()) {\n                buff.append(c.nextElement().toString() + '\\n');\n            }\n        } catch (IOException e) {\n            cat.error(\"getUsers: \" + e);\n        }\n        return buff.toString();\n        /\n    }\n\n    /**\n     * test program\n     /\n    public static void main(String[] argv) {\n        Login login = new Login();\n      //  SimpleUserMgr.setConfigFile(argv[0]);\n        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);\n        // usrMgr.init();\n        login.setConfigFile(argv[0]);\n        login.init();\n        login.getUserMgr().addUser(\"cn=Jim Smith, o=LANL, c=US\", \"Jim Smith\", \"Smith\", \"smith@foo.com\", \"submitter\", \"junk\");\n        login.getUserMgr().addUser(\"dn: cn=Dave Barry, o=UNM, c=US\\ncn: Dave Barry\\nemail: barry@goofoff.com\\nsn: Barry\\nuserPassword: stuff\\nrole: staff\");\n\n        login.setUsername(\"Dave Barry\");\n        login.setOrg(\"UNM\");\n        login.setUsername(\"Dave Barry\");\n        cat.debug(login.getUser());\n        login.getUserMgr().delUser(\"smith@foo.com\");\n        String[] mail = Login.getMail();\n        cat.debug(\"Mail: \"+mail[0]);\n        cat.debug(login.getUserMgr().getMailbyOrg(\"LANL\"));\n        String[] names = Login.getNames();\n        cat.debug(\"names: \"+names[0]);\n        System.out.println(login.toString());\n\n    } */\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LoginTest1.java",
		"test_prompt": "// LoginTest1.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#getProps()} method.\n*/\nclass LoginTest1 {"
	},
	{
		"original_code": "// Login.java\n/*\n *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\n/**\n * This class manages authentication and user\n * attribute retrieval when a user tries to log in.\n */\npublic class Login {\n\n    //private static String[] names = null;\n    //private static String[] mail = null;\n    private String username = \"\";\n\n    private static String organization = \"OPENHRE\";\n\n    private static String country = \"US\";\n\n    private String password = \"\";\n\n    private String userid = \"\";\n\n    private String ipAddr = \"\";\n\n    // private static String userdb = \"users\";\n    //AACS.properties\n    private static String configFile = \"AACS\";\n\n    private static String authType = \"simple\";\n\n    private static String xacmlConfig = \"\";\n\n    private static String securityLog = \"\";\n\n    private static String securityLogFilePath = \"\";\n\n    // Date format used by OpenHRE\n    private final static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private final static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    private static Properties props;\n\n    private static UserMgr userMgr;\n\n    private static PDPadapter pdpadapter;\n\n    private User user;\n\n    private LdapService lservice;\n\n    private static Logger cat = Logger.getLogger(Login.class.getName());\n\n    /**\n     * Public default constructor\n     */\n    public Login() {\n    }\n\n    /**\n     * Construct a Login with a UserId\n     */\n    public Login(String userId) {\n        this();\n        this.setUserId(userId);\n    }\n\n    /**\n     * Construct a Login with a UserId and IP Address\n     */\n    public Login(String userId, String ipAddr) {\n        this(userId);\n        this.setIpAddr(ipAddr);\n    }\n\n    /**\n     * @param theConfigFile the properties file\n     */\n    public static void setConfigFile(String theConfigFile) {\n        configFile = theConfigFile;\n    }\n\n    /**\n     * Load and get the Properties from the Config File\n     * @param theConfigFile the properties file\n     */\n    public static Properties getProps(String theConfigFile) {\n        setConfigFile(theConfigFile);\n        return getProps();\n    }\n\n    /**\n     * Load and get the Properties from the preset Config File\n     */\n    public static Properties getProps() {\n        init();\n        return props;\n    }\n\n    /**\n     * Initialize and load all the users.\n     */\n    public static String getSecurityLogFilePath() {\n        return securityLogFilePath;\n    }\n\n    public static void init() {\n        if (props != null)\n            return;\n        props = new Properties();\n        cat.info(\"Loading Properties from \" + configFile);\n        loadProperties(props, configFile);\n        // set the default organization and country\n        organization = props.getProperty(\"organization\", \"OPENHRE\");\n        country = props.getProperty(\"country\", \"US\");\n        authType = props.getProperty(\"AuthType\", \"simple\");\n        xacmlConfig = props.getProperty(\"XACMLConfig\", \"\");\n        cat.info(\"organization is \" + organization);\n        cat.info(\"country is \" + country);\n        cat.info(\"AuthType is \" + authType);\n        cat.info(\"XACMLConfig is \" + xacmlConfig);\n        securityLog = props.getProperty(\"SecurityLog\", \"\");\n        // create security log file if it doesn't exist\n        try {\n            File file = new File(securityLog);\n            securityLogFilePath = file.getAbsolutePath();\n            cat.info(\"Preparing Security Log file \" + securityLogFilePath);\n            // Create file if it does not exist\n            file.createNewFile();\n            // Get the XACML PDPadapter\n            pdpadapter = new PDPadapter(xacmlConfig);\n        } catch (Exception e) {\n            cat.fatal(\"Exception initializing Login manager\", e);\n            e.printStackTrace();\n        }\n        if (userMgr == null) {\n            if (authType.equals(\"simple\")) {\n                userMgr = new SimpleUserMgr(configFile);\n            } else if (authType.equals(\"krb5\")) {\n                userMgr = new KrbUserMgr();\n            }\n        }\n    }\n\n    public static void loadProperties(Properties props, String configFile) {\n        try {\n            props.load(Login.class.getResourceAsStream(configFile + \".properties\"));\n        } catch (Exception e) {\n            System.out.println(\"Could not read \" + configFile + \".properties\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * set the username  and get the user corresponding to the resulting dn\n     * @param username\n     */\n    public void setUsername(String username) {\n        //\t\tSystem.out.println(\"setting username: \" +username);\n        //        user = null;\n        this.username = username.trim();\n        //user = userMgr.getUser(username, organization);\n        user.setUserName(username);\n        cat.debug(\"setUserName: \" + username);\n    }\n\n    /**\n     * Get filepath of security log.\n     * ASSUMPTION: init() was called (i.e. securityLog was initialized)\n     * @return absolute filepath\n     */\n    /**\n     * get the current username  from user if defined\n     */\n    public String getUsername() {\n        if (user != null)\n            return user.getUserName();\n        else\n            return username;\n    }\n\n    /**\n     * set ipAddr for login\n     * @param ipAddr\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n        if (user != null)\n            user.setIpAddr(ipAddr);\n    }\n\n    /**\n     * get ipAddress of user if defined\n     * return String\n     */\n    public String getIpAddr() {\n        if (user != null)\n            return user.getIpAddr();\n        else\n            return ipAddr;\n    }\n\n    /**\n     * set the password\n     * @param password\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**\n     *  set the email address\n     * @param email address\n     */\n    /*    public void setEmail(String email) {\n//\t\tSystem.out.println(\"setting email: \"+email);\n        this.email = email;\n        if (user != null) user.setUserId(email);\n    }\n*/\n    /**\n     * set the active user from the userId\n     * @param userId\n     */\n    public void setUserId(String usrId) {\n        userid = usrId;\n        cat.debug(\"setUserId: \" + userid);\n    }\n\n    /**\n     * get the current User\n     */\n    public User getUser() {\n        return user;\n    }\n\n    /**\n     * get the current User ID\n     */\n    public String getUserId() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current email address\n     */\n    public String getEmail() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current LdapService\n     */\n    public LdapService getLdapService() {\n        if (lservice == null)\n            return (lservice = new LdapService(user.getLdapContext()));\n        else\n            return lservice;\n    }\n\n    /**\n     * get the User from one of two ways. Return the current user if it is already defined.\n     * First see if there is a defined email address (userId) and get the user directly\n     * If not, then check the organization table and the the associated table of username\n     * using the username and organization (country is defaulted to \"US\").\n     */\n    /*    public User getUser() {\n        //   try {\n        // makeDN();\n        if (user != null) return user;\n        if (userid != null || userid != \"\")\n            user = userMgr.getUser(userid);\n        else\n            user = userMgr.getUser(username, organization, userid);\n        cat.debug(\"getUser: \"+user);\n        return user;\n\n    }\n*/\n    /**\n     * return the role of the current user.\n     * @return String containing the Role of the current user\n     *     /\n     *    public String getRole() {\n     *        if (user != null)\n     *            return user.getRole();\n     *        else\n     *            return null;\n     *    }\n     *\n     *    /**\n     * get the Distinguished Name of the user\n     * @return String containing the distinguished name\n     *     /\n     *    public String getDN() {\n     *        if (user != null)\n     *            return user.getDN();\n     *        else\n     *            return null;\n     *    }\n     */\n    /**\n     * Authorize a User without checking the password.\n     * Note that this should only be called for Users\n     * that are already Authenticated.\n     * @return user\n     */\n    public User authorize() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        user = userMgr.getUser(this.userid);\n        user.setIpAddr(this.ipAddr);\n        // compare password validity start date with current date\n        Date today = new Date();\n        Date pwvd = null;\n        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(\"\"))) {\n            pwvd = convertDateFromUTC(user.getPassvalidstart());\n            if (!dateCompare(pwvd, today)) {\n                log(user, \"Not allowed to login currently.\");\n                user = null;\n                throw new LoginException(\"Not allowed to login currently.\");\n            }\n        }\n        // check if user needs to change password before proceeding\n        user.setPasschange(false);\n        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals(\"\")) && (!user.getPassrenewal().equals(\"\")) && (!user.getPassrenewal().equals(\"-1\"))) {\n            Calendar c1 = Calendar.getInstance();\n            c1.setTime(pwvd);\n            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));\n            if (dateCompare(c1.getTime(), today)) {\n                user.setPasschange(true);\n            }\n        }\n        // Performing IP based filtering and active groups determination\n        // based on current location.\n        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.\n        if ((user.getAllowedips() != null) && (props.getProperty(\"AuthType\", \"krb5\").equals(\"krb5\")) && (props.getProperty(\"IPfiltering\", \"yes\").equals(\"yes\"))) {\n            int currentip = getIpInteger(user.getIpAddr());\n            // IP based filtering\n            cat.info(\"Performing IP filtering for \" + getUserId());\n            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);\n            if (ipcheck_result == false) {\n                log(user, \"Not authorized from the current IP address.\");\n                throw new LoginException(\"Not authorized from the current IP address.\");\n            }\n            // Active groups determination\n            cat.info(\"Determining active groups for \" + getUserId());\n            boolean faccheck_result;\n            // get all groups from LDAPservice\n            Set usergrps = user.getGroups();\n            if (usergrps != null && usergrps.size() > 0) {\n                // Setup the interface to the LDAP server\n                getLdapService();\n                //session.setAttribute(\"ldapservice\", lservice);\n                Iterator grpit = usergrps.iterator();\n                while (grpit.hasNext()) {\n                    // Fetch each group's details from LDAP\n                    Group grp = (Group) lservice.getGroup(grpit.next().toString());\n                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);\n                    if (faccheck_result == true) {\n                        log(user, \"Active group: \" + grp.getCn());\n                        user.addActivegroup(grp.getCn());\n                    }\n                }\n                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {\n                    log(user, \" Accessing from remote location.\");\n                    user.addActivegroup(\"remote\");\n                }\n            }\n        }\n        // end IP based filtering and Active groups determination\n        return user;\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate(String userid, String password, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.password = password;\n        this.ipAddr = ipaddr;\n        return authenticate();\n    }\n\n    /**\n     * Authorize a pre-Authenticated User\n     * @return user\n     */\n    public User authorize(String userid, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.ipAddr = ipaddr;\n        return authorize();\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        if (!userMgr.checkSecret(userid, password, authType)) {\n            cat.warn(\"Invalid Password! User: \" + username + \" ,userid: \" + userid);\n            throw new LoginException(\"Password invalid\");\n        }\n        user = userMgr.getUser();\n        user.setIpAddr(this.ipAddr);\n        authorize();\n        return user;\n    }\n\n    /**\n     * check permissions for the current user\n     */\n    public boolean accessDecision(User usr, String resource, String action) {\n        if (\"simple\".equals(authType)) {\n            cat.debug(\"accessDecision() always true for simple authType\");\n            return true;\n        }\n        if (cat.isDebugEnabled()) {\n            cat.debug(\"User for accessDecision() is \" + usr);\n            cat.debug(\"resource is \" + resource);\n            cat.debug(\"action is \" + action);\n            cat.debug(\"XACMLConfig is \" + xacmlConfig);\n        }\n        if (usr == null)\n            return false;\n        boolean ac_result = false;\n        try {\n            // create XACML request\n            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());\n            // encode the Request and print it to standard out\n            request.encode(System.out, new Indenter());\n            if (pdpadapter.makeDecision(request) == 0)\n                ac_result = true;\n            else\n                ac_result = false;\n            cat.debug(\"Access Decision: \" + ac_result);\n        } catch (Exception e) {\n            cat.error(e);\n            e.printStackTrace();\n        }\n        return ac_result;\n    }\n\n    public void log(User user, String info) {\n        FileAppender appender = null;\n        try {\n            appender = new FileAppender(new SimpleLayout(), securityLog, true);\n        } catch (Exception e) {\n            cat.error(e);\n        }\n        cat.addAppender(appender);\n        Level oldlevel = cat.getLevel();\n        cat.setLevel((Level) Level.INFO);\n        Date now = new Date();\n        if (user == null) {\n            cat.info(now + \" - \" + username + \" - \" + userid + \" - \" + ipAddr + \" -- \" + info);\n        } else {\n            // new log format (for better parsing in Cocoon)\n            cat.info(now + \" - \" + user.getUserName() + \" - \" + user.getUserId() + \" - \" + user.getIpAddr() + \" -- \" + info);\n        }\n        cat.setLevel(oldlevel);\n        cat.removeAppender(appender);\n    }\n\n    /**\n     * logout the current user\n     */\n    public void logOut() {\n        userMgr.logOut();\n        user = null;\n        password = null;\n        username = null;\n    }\n\n    private Date convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return specdate;\n    }\n\n    private boolean dateCompare(Date date1, Date date2) {\n        Calendar c1 = Calendar.getInstance();\n        Calendar c2 = Calendar.getInstance();\n        c1.setTime(date1);\n        c2.setTime(date2);\n        if (c1.before(c2))\n            return true;\n        else\n            return false;\n    }\n\n    private int getIpInteger(String ip) {\n        StringTokenizer st = new StringTokenizer(ip, \".\");\n        int bitposition = 24;\n        int ipnumber = 0;\n        while (st.hasMoreTokens()) {\n            String curtoken = st.nextToken();\n            if (ipnumber == 0)\n                ipnumber = (Integer.parseInt(curtoken) << bitposition);\n            else\n                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);\n            bitposition -= 8;\n        }\n        return ipnumber;\n    }\n\n    private boolean ipRangeCheck(Set allowedips, int currentip) {\n        // Check if the current IP address falls between the given range of allowed IP addresses\n        boolean ipmatch = false;\n        if (allowedips == null) {\n            cat.debug(\"No IP address range specified.\");\n            return false;\n        }\n        Set allowed_ips = new HashSet();\n        allowed_ips = (HashSet) allowedips;\n        Iterator ipit = allowed_ips.iterator();\n        while (ipit.hasNext()) {\n            int finalip = 0;\n            // subnet mask bits\n            int n = 0;\n            // get the IP address and the subnet mask bits (if any)\n            StringTokenizer st = new StringTokenizer(ipit.next().toString(), \"/\");\n            if (st.hasMoreTokens()) {\n                finalip = getIpInteger(st.nextToken());\n                if (st.hasMoreTokens())\n                    n = Integer.parseInt(st.nextToken());\n            }\n            // Every IP address allowed for the user\n            if (finalip == 0) {\n                cat.info(\"All IP addresses allowed.\");\n                ipmatch = true;\n            }\n            if (n != 0) {\n                // compute an n bit subnet mask, all 1s except for last n bits.\n                int subnet = ~((1 << n) - 1);\n                int t1 = finalip & subnet;\n                int t2 = currentip & subnet;\n                if (t1 == t2)\n                    ipmatch = true;\n            } else {\n                if (finalip == currentip)\n                    ipmatch = true;\n            }\n        }\n        return ipmatch;\n    }\n\n    /**\n     * Change the User's password\n     * (this should be moved to KrbUserMgr)\n     */\n    public void changePassword(String newpass) throws Exception {\n        // read the configuration properties\n        if (cat.isDebugEnabled())\n            cat.debug(\"using props \" + props);\n        String krbrealm = props.getProperty(\"krbrealm\", \"YOUR-KERBEROS-REALM\");\n        String editkrb = props.getProperty(\"editkrb\", \"no\");\n        String kadminLocal = props.getProperty(\"kadmin.local\", \"kadmin.local\");\n        int exitVal = 0;\n        String userid = user.getUserId();\n        // strip only the unique username from the userid\n        int ind = userid.indexOf(\"@\");\n        if (ind > 0)\n            userid = userid.substring(0, ind);\n        cat.debug(\"editkrb: \" + editkrb);\n        if (editkrb.toLowerCase().equals(\"yes\")) {\n            // Execute the UNIX command to reset the principal's password in the Kerberos\n            // database.\n            // Assumption: The web server and the kerberos server are running on the same UNIX\n            // based machine.Otherwise please modify the following according to your settings.\n            String krbprinc = userid + \"@\" + krbrealm;\n            cat.info(\"Reseting principal \\\"\" + krbprinc + \"\\\"'s password in \" + \"the Kerberos database\");\n            Runtime rt = Runtime.getRuntime();\n            // Create a String array consisting of the command and its arguments\n            String[] cmd = { kadminLocal, \"-p \" + userid, \"-q \\\"\\\"cpw -pw \" + newpass + \" \" + krbprinc + \"\\\"\\\"\" };\n            cat.debug(\"exec'ing Runtime command: \" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);\n            Process ps = rt.exec(cmd);\n            // For printing error messages\n            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), \"ERROR\");\n            // For printing output\n            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), \"OUTPUT\");\n            // Start printing\n            errorHandler.start();\n            outputHandler.start();\n            // Print exit value\n            exitVal = ps.waitFor();\n            cat.debug(\"Kerberos update status: \" + exitVal);\n        }\n        if (exitVal == 0) {\n            getLdapService();\n            Person person = lservice.getPerson(userid);\n            person.setPasschange(\"no\");\n            // Put current date as password valid start date\n            Date today = new Date();\n            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);\n            person.setPassvalidstart(sdf.format(today));\n            if (lservice.updatePerson(person, person.getDn()) == true) {\n            } else\n                throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n        } else\n            throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n    }\n    /*  /** obtain list of valid users\n     * @return String[] list of known users\n     /\n    public static String[] getNames() {\n        if (names == null) {\n            if (userMgr == null) init();\n            names = userMgr.getUserNames();\n        }\n\n        return names;\n    }\n\n    /**\n     * return known email addresses\n     * @return String[] list of known emails\n     /\n    public static String[] getMail() {\n        if (mail == null) {\n            if (userMgr == null) init();\n            mail = userMgr.getUserIds();\n        }\n        /*\n        {\n            if (id == null) init();\n            ArrayList v = null;\n            try {\n                JDBMEnumeration e = id.keys();\n                v = new ArrayList();\n                while (e.hasMoreElements()) {\n                    v.add(e.nextElement());\n                }\n            } catch (IOException e1) {\n                cat.error(\"getMail: \" + e1);\n                return new String[0];\n            }\n            mail = new String[v.size()];\n            cat.debug(\"getMail: \"+mail.length+ \" elements\");\n            v.toArray(mail);\n        }  /\n        return mail;\n    }\n\n\n    /**\n     *  set the SimpleUserMgr containing the Users.\n     * @param theUserMgr to be used\n     /\n    public static void setUserMgr(UserMgr theUserMgr) {\n        userMgr = theUserMgr;\n    }\n\n    /**\n     * get the SimpleUserMgr that contains the Users\n     * @return SimpleUserMgr\n     /\n    public static SimpleUserMgr getUserMgr() {\n        return userMgr;\n    }\n\n    /**\n     * get all the users in memory\n     * @return String\n     /\n    public String toString() {\n        return userMgr.export();\n        /*\n        StringBuffer buff = new StringBuffer();\n        try {\n            JDBMEnumeration c = id.values();\n            while (c.hasMoreElements()) {\n                buff.append(c.nextElement().toString() + '\\n');\n            }\n        } catch (IOException e) {\n            cat.error(\"getUsers: \" + e);\n        }\n        return buff.toString();\n        /\n    }\n\n    /**\n     * test program\n     /\n    public static void main(String[] argv) {\n        Login login = new Login();\n      //  SimpleUserMgr.setConfigFile(argv[0]);\n        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);\n        // usrMgr.init();\n        login.setConfigFile(argv[0]);\n        login.init();\n        login.getUserMgr().addUser(\"cn=Jim Smith, o=LANL, c=US\", \"Jim Smith\", \"Smith\", \"smith@foo.com\", \"submitter\", \"junk\");\n        login.getUserMgr().addUser(\"dn: cn=Dave Barry, o=UNM, c=US\\ncn: Dave Barry\\nemail: barry@goofoff.com\\nsn: Barry\\nuserPassword: stuff\\nrole: staff\");\n\n        login.setUsername(\"Dave Barry\");\n        login.setOrg(\"UNM\");\n        login.setUsername(\"Dave Barry\");\n        cat.debug(login.getUser());\n        login.getUserMgr().delUser(\"smith@foo.com\");\n        String[] mail = Login.getMail();\n        cat.debug(\"Mail: \"+mail[0]);\n        cat.debug(login.getUserMgr().getMailbyOrg(\"LANL\"));\n        String[] names = Login.getNames();\n        cat.debug(\"names: \"+names[0]);\n        System.out.println(login.toString());\n\n    } */\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LoginTest2.java",
		"test_prompt": "// LoginTest2.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#getSecurityLogFilePath()} method.\n*/\nclass LoginTest2 {"
	},
	{
		"original_code": "// Login.java\n/*\n *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\n/**\n * This class manages authentication and user\n * attribute retrieval when a user tries to log in.\n */\npublic class Login {\n\n    //private static String[] names = null;\n    //private static String[] mail = null;\n    private String username = \"\";\n\n    private static String organization = \"OPENHRE\";\n\n    private static String country = \"US\";\n\n    private String password = \"\";\n\n    private String userid = \"\";\n\n    private String ipAddr = \"\";\n\n    // private static String userdb = \"users\";\n    //AACS.properties\n    private static String configFile = \"AACS\";\n\n    private static String authType = \"simple\";\n\n    private static String xacmlConfig = \"\";\n\n    private static String securityLog = \"\";\n\n    private static String securityLogFilePath = \"\";\n\n    // Date format used by OpenHRE\n    private final static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private final static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    private static Properties props;\n\n    private static UserMgr userMgr;\n\n    private static PDPadapter pdpadapter;\n\n    private User user;\n\n    private LdapService lservice;\n\n    private static Logger cat = Logger.getLogger(Login.class.getName());\n\n    /**\n     * Public default constructor\n     */\n    public Login() {\n    }\n\n    /**\n     * Construct a Login with a UserId\n     */\n    public Login(String userId) {\n        this();\n        this.setUserId(userId);\n    }\n\n    /**\n     * Construct a Login with a UserId and IP Address\n     */\n    public Login(String userId, String ipAddr) {\n        this(userId);\n        this.setIpAddr(ipAddr);\n    }\n\n    /**\n     * @param theConfigFile the properties file\n     */\n    public static void setConfigFile(String theConfigFile) {\n        configFile = theConfigFile;\n    }\n\n    /**\n     * Load and get the Properties from the Config File\n     * @param theConfigFile the properties file\n     */\n    public static Properties getProps(String theConfigFile) {\n        setConfigFile(theConfigFile);\n        return getProps();\n    }\n\n    /**\n     * Load and get the Properties from the preset Config File\n     */\n    public static Properties getProps() {\n        init();\n        return props;\n    }\n\n    /**\n     * Initialize and load all the users.\n     */\n    public static String getSecurityLogFilePath() {\n        return securityLogFilePath;\n    }\n\n    public static void init() {\n        if (props != null)\n            return;\n        props = new Properties();\n        cat.info(\"Loading Properties from \" + configFile);\n        loadProperties(props, configFile);\n        // set the default organization and country\n        organization = props.getProperty(\"organization\", \"OPENHRE\");\n        country = props.getProperty(\"country\", \"US\");\n        authType = props.getProperty(\"AuthType\", \"simple\");\n        xacmlConfig = props.getProperty(\"XACMLConfig\", \"\");\n        cat.info(\"organization is \" + organization);\n        cat.info(\"country is \" + country);\n        cat.info(\"AuthType is \" + authType);\n        cat.info(\"XACMLConfig is \" + xacmlConfig);\n        securityLog = props.getProperty(\"SecurityLog\", \"\");\n        // create security log file if it doesn't exist\n        try {\n            File file = new File(securityLog);\n            securityLogFilePath = file.getAbsolutePath();\n            cat.info(\"Preparing Security Log file \" + securityLogFilePath);\n            // Create file if it does not exist\n            file.createNewFile();\n            // Get the XACML PDPadapter\n            pdpadapter = new PDPadapter(xacmlConfig);\n        } catch (Exception e) {\n            cat.fatal(\"Exception initializing Login manager\", e);\n            e.printStackTrace();\n        }\n        if (userMgr == null) {\n            if (authType.equals(\"simple\")) {\n                userMgr = new SimpleUserMgr(configFile);\n            } else if (authType.equals(\"krb5\")) {\n                userMgr = new KrbUserMgr();\n            }\n        }\n    }\n\n    public static void loadProperties(Properties props, String configFile) {\n        try {\n            props.load(Login.class.getResourceAsStream(configFile + \".properties\"));\n        } catch (Exception e) {\n            System.out.println(\"Could not read \" + configFile + \".properties\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * set the username  and get the user corresponding to the resulting dn\n     * @param username\n     */\n    public void setUsername(String username) {\n        //\t\tSystem.out.println(\"setting username: \" +username);\n        //        user = null;\n        this.username = username.trim();\n        //user = userMgr.getUser(username, organization);\n        user.setUserName(username);\n        cat.debug(\"setUserName: \" + username);\n    }\n\n    /**\n     * Get filepath of security log.\n     * ASSUMPTION: init() was called (i.e. securityLog was initialized)\n     * @return absolute filepath\n     */\n    /**\n     * get the current username  from user if defined\n     */\n    public String getUsername() {\n        if (user != null)\n            return user.getUserName();\n        else\n            return username;\n    }\n\n    /**\n     * set ipAddr for login\n     * @param ipAddr\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n        if (user != null)\n            user.setIpAddr(ipAddr);\n    }\n\n    /**\n     * get ipAddress of user if defined\n     * return String\n     */\n    public String getIpAddr() {\n        if (user != null)\n            return user.getIpAddr();\n        else\n            return ipAddr;\n    }\n\n    /**\n     * set the password\n     * @param password\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**\n     *  set the email address\n     * @param email address\n     */\n    /*    public void setEmail(String email) {\n//\t\tSystem.out.println(\"setting email: \"+email);\n        this.email = email;\n        if (user != null) user.setUserId(email);\n    }\n*/\n    /**\n     * set the active user from the userId\n     * @param userId\n     */\n    public void setUserId(String usrId) {\n        userid = usrId;\n        cat.debug(\"setUserId: \" + userid);\n    }\n\n    /**\n     * get the current User\n     */\n    public User getUser() {\n        return user;\n    }\n\n    /**\n     * get the current User ID\n     */\n    public String getUserId() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current email address\n     */\n    public String getEmail() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current LdapService\n     */\n    public LdapService getLdapService() {\n        if (lservice == null)\n            return (lservice = new LdapService(user.getLdapContext()));\n        else\n            return lservice;\n    }\n\n    /**\n     * get the User from one of two ways. Return the current user if it is already defined.\n     * First see if there is a defined email address (userId) and get the user directly\n     * If not, then check the organization table and the the associated table of username\n     * using the username and organization (country is defaulted to \"US\").\n     */\n    /*    public User getUser() {\n        //   try {\n        // makeDN();\n        if (user != null) return user;\n        if (userid != null || userid != \"\")\n            user = userMgr.getUser(userid);\n        else\n            user = userMgr.getUser(username, organization, userid);\n        cat.debug(\"getUser: \"+user);\n        return user;\n\n    }\n*/\n    /**\n     * return the role of the current user.\n     * @return String containing the Role of the current user\n     *     /\n     *    public String getRole() {\n     *        if (user != null)\n     *            return user.getRole();\n     *        else\n     *            return null;\n     *    }\n     *\n     *    /**\n     * get the Distinguished Name of the user\n     * @return String containing the distinguished name\n     *     /\n     *    public String getDN() {\n     *        if (user != null)\n     *            return user.getDN();\n     *        else\n     *            return null;\n     *    }\n     */\n    /**\n     * Authorize a User without checking the password.\n     * Note that this should only be called for Users\n     * that are already Authenticated.\n     * @return user\n     */\n    public User authorize() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        user = userMgr.getUser(this.userid);\n        user.setIpAddr(this.ipAddr);\n        // compare password validity start date with current date\n        Date today = new Date();\n        Date pwvd = null;\n        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(\"\"))) {\n            pwvd = convertDateFromUTC(user.getPassvalidstart());\n            if (!dateCompare(pwvd, today)) {\n                log(user, \"Not allowed to login currently.\");\n                user = null;\n                throw new LoginException(\"Not allowed to login currently.\");\n            }\n        }\n        // check if user needs to change password before proceeding\n        user.setPasschange(false);\n        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals(\"\")) && (!user.getPassrenewal().equals(\"\")) && (!user.getPassrenewal().equals(\"-1\"))) {\n            Calendar c1 = Calendar.getInstance();\n            c1.setTime(pwvd);\n            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));\n            if (dateCompare(c1.getTime(), today)) {\n                user.setPasschange(true);\n            }\n        }\n        // Performing IP based filtering and active groups determination\n        // based on current location.\n        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.\n        if ((user.getAllowedips() != null) && (props.getProperty(\"AuthType\", \"krb5\").equals(\"krb5\")) && (props.getProperty(\"IPfiltering\", \"yes\").equals(\"yes\"))) {\n            int currentip = getIpInteger(user.getIpAddr());\n            // IP based filtering\n            cat.info(\"Performing IP filtering for \" + getUserId());\n            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);\n            if (ipcheck_result == false) {\n                log(user, \"Not authorized from the current IP address.\");\n                throw new LoginException(\"Not authorized from the current IP address.\");\n            }\n            // Active groups determination\n            cat.info(\"Determining active groups for \" + getUserId());\n            boolean faccheck_result;\n            // get all groups from LDAPservice\n            Set usergrps = user.getGroups();\n            if (usergrps != null && usergrps.size() > 0) {\n                // Setup the interface to the LDAP server\n                getLdapService();\n                //session.setAttribute(\"ldapservice\", lservice);\n                Iterator grpit = usergrps.iterator();\n                while (grpit.hasNext()) {\n                    // Fetch each group's details from LDAP\n                    Group grp = (Group) lservice.getGroup(grpit.next().toString());\n                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);\n                    if (faccheck_result == true) {\n                        log(user, \"Active group: \" + grp.getCn());\n                        user.addActivegroup(grp.getCn());\n                    }\n                }\n                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {\n                    log(user, \" Accessing from remote location.\");\n                    user.addActivegroup(\"remote\");\n                }\n            }\n        }\n        // end IP based filtering and Active groups determination\n        return user;\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate(String userid, String password, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.password = password;\n        this.ipAddr = ipaddr;\n        return authenticate();\n    }\n\n    /**\n     * Authorize a pre-Authenticated User\n     * @return user\n     */\n    public User authorize(String userid, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.ipAddr = ipaddr;\n        return authorize();\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        if (!userMgr.checkSecret(userid, password, authType)) {\n            cat.warn(\"Invalid Password! User: \" + username + \" ,userid: \" + userid);\n            throw new LoginException(\"Password invalid\");\n        }\n        user = userMgr.getUser();\n        user.setIpAddr(this.ipAddr);\n        authorize();\n        return user;\n    }\n\n    /**\n     * check permissions for the current user\n     */\n    public boolean accessDecision(User usr, String resource, String action) {\n        if (\"simple\".equals(authType)) {\n            cat.debug(\"accessDecision() always true for simple authType\");\n            return true;\n        }\n        if (cat.isDebugEnabled()) {\n            cat.debug(\"User for accessDecision() is \" + usr);\n            cat.debug(\"resource is \" + resource);\n            cat.debug(\"action is \" + action);\n            cat.debug(\"XACMLConfig is \" + xacmlConfig);\n        }\n        if (usr == null)\n            return false;\n        boolean ac_result = false;\n        try {\n            // create XACML request\n            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());\n            // encode the Request and print it to standard out\n            request.encode(System.out, new Indenter());\n            if (pdpadapter.makeDecision(request) == 0)\n                ac_result = true;\n            else\n                ac_result = false;\n            cat.debug(\"Access Decision: \" + ac_result);\n        } catch (Exception e) {\n            cat.error(e);\n            e.printStackTrace();\n        }\n        return ac_result;\n    }\n\n    public void log(User user, String info) {\n        FileAppender appender = null;\n        try {\n            appender = new FileAppender(new SimpleLayout(), securityLog, true);\n        } catch (Exception e) {\n            cat.error(e);\n        }\n        cat.addAppender(appender);\n        Level oldlevel = cat.getLevel();\n        cat.setLevel((Level) Level.INFO);\n        Date now = new Date();\n        if (user == null) {\n            cat.info(now + \" - \" + username + \" - \" + userid + \" - \" + ipAddr + \" -- \" + info);\n        } else {\n            // new log format (for better parsing in Cocoon)\n            cat.info(now + \" - \" + user.getUserName() + \" - \" + user.getUserId() + \" - \" + user.getIpAddr() + \" -- \" + info);\n        }\n        cat.setLevel(oldlevel);\n        cat.removeAppender(appender);\n    }\n\n    /**\n     * logout the current user\n     */\n    public void logOut() {\n        userMgr.logOut();\n        user = null;\n        password = null;\n        username = null;\n    }\n\n    private Date convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return specdate;\n    }\n\n    private boolean dateCompare(Date date1, Date date2) {\n        Calendar c1 = Calendar.getInstance();\n        Calendar c2 = Calendar.getInstance();\n        c1.setTime(date1);\n        c2.setTime(date2);\n        if (c1.before(c2))\n            return true;\n        else\n            return false;\n    }\n\n    private int getIpInteger(String ip) {\n        StringTokenizer st = new StringTokenizer(ip, \".\");\n        int bitposition = 24;\n        int ipnumber = 0;\n        while (st.hasMoreTokens()) {\n            String curtoken = st.nextToken();\n            if (ipnumber == 0)\n                ipnumber = (Integer.parseInt(curtoken) << bitposition);\n            else\n                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);\n            bitposition -= 8;\n        }\n        return ipnumber;\n    }\n\n    private boolean ipRangeCheck(Set allowedips, int currentip) {\n        // Check if the current IP address falls between the given range of allowed IP addresses\n        boolean ipmatch = false;\n        if (allowedips == null) {\n            cat.debug(\"No IP address range specified.\");\n            return false;\n        }\n        Set allowed_ips = new HashSet();\n        allowed_ips = (HashSet) allowedips;\n        Iterator ipit = allowed_ips.iterator();\n        while (ipit.hasNext()) {\n            int finalip = 0;\n            // subnet mask bits\n            int n = 0;\n            // get the IP address and the subnet mask bits (if any)\n            StringTokenizer st = new StringTokenizer(ipit.next().toString(), \"/\");\n            if (st.hasMoreTokens()) {\n                finalip = getIpInteger(st.nextToken());\n                if (st.hasMoreTokens())\n                    n = Integer.parseInt(st.nextToken());\n            }\n            // Every IP address allowed for the user\n            if (finalip == 0) {\n                cat.info(\"All IP addresses allowed.\");\n                ipmatch = true;\n            }\n            if (n != 0) {\n                // compute an n bit subnet mask, all 1s except for last n bits.\n                int subnet = ~((1 << n) - 1);\n                int t1 = finalip & subnet;\n                int t2 = currentip & subnet;\n                if (t1 == t2)\n                    ipmatch = true;\n            } else {\n                if (finalip == currentip)\n                    ipmatch = true;\n            }\n        }\n        return ipmatch;\n    }\n\n    /**\n     * Change the User's password\n     * (this should be moved to KrbUserMgr)\n     */\n    public void changePassword(String newpass) throws Exception {\n        // read the configuration properties\n        if (cat.isDebugEnabled())\n            cat.debug(\"using props \" + props);\n        String krbrealm = props.getProperty(\"krbrealm\", \"YOUR-KERBEROS-REALM\");\n        String editkrb = props.getProperty(\"editkrb\", \"no\");\n        String kadminLocal = props.getProperty(\"kadmin.local\", \"kadmin.local\");\n        int exitVal = 0;\n        String userid = user.getUserId();\n        // strip only the unique username from the userid\n        int ind = userid.indexOf(\"@\");\n        if (ind > 0)\n            userid = userid.substring(0, ind);\n        cat.debug(\"editkrb: \" + editkrb);\n        if (editkrb.toLowerCase().equals(\"yes\")) {\n            // Execute the UNIX command to reset the principal's password in the Kerberos\n            // database.\n            // Assumption: The web server and the kerberos server are running on the same UNIX\n            // based machine.Otherwise please modify the following according to your settings.\n            String krbprinc = userid + \"@\" + krbrealm;\n            cat.info(\"Reseting principal \\\"\" + krbprinc + \"\\\"'s password in \" + \"the Kerberos database\");\n            Runtime rt = Runtime.getRuntime();\n            // Create a String array consisting of the command and its arguments\n            String[] cmd = { kadminLocal, \"-p \" + userid, \"-q \\\"\\\"cpw -pw \" + newpass + \" \" + krbprinc + \"\\\"\\\"\" };\n            cat.debug(\"exec'ing Runtime command: \" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);\n            Process ps = rt.exec(cmd);\n            // For printing error messages\n            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), \"ERROR\");\n            // For printing output\n            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), \"OUTPUT\");\n            // Start printing\n            errorHandler.start();\n            outputHandler.start();\n            // Print exit value\n            exitVal = ps.waitFor();\n            cat.debug(\"Kerberos update status: \" + exitVal);\n        }\n        if (exitVal == 0) {\n            getLdapService();\n            Person person = lservice.getPerson(userid);\n            person.setPasschange(\"no\");\n            // Put current date as password valid start date\n            Date today = new Date();\n            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);\n            person.setPassvalidstart(sdf.format(today));\n            if (lservice.updatePerson(person, person.getDn()) == true) {\n            } else\n                throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n        } else\n            throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n    }\n    /*  /** obtain list of valid users\n     * @return String[] list of known users\n     /\n    public static String[] getNames() {\n        if (names == null) {\n            if (userMgr == null) init();\n            names = userMgr.getUserNames();\n        }\n\n        return names;\n    }\n\n    /**\n     * return known email addresses\n     * @return String[] list of known emails\n     /\n    public static String[] getMail() {\n        if (mail == null) {\n            if (userMgr == null) init();\n            mail = userMgr.getUserIds();\n        }\n        /*\n        {\n            if (id == null) init();\n            ArrayList v = null;\n            try {\n                JDBMEnumeration e = id.keys();\n                v = new ArrayList();\n                while (e.hasMoreElements()) {\n                    v.add(e.nextElement());\n                }\n            } catch (IOException e1) {\n                cat.error(\"getMail: \" + e1);\n                return new String[0];\n            }\n            mail = new String[v.size()];\n            cat.debug(\"getMail: \"+mail.length+ \" elements\");\n            v.toArray(mail);\n        }  /\n        return mail;\n    }\n\n\n    /**\n     *  set the SimpleUserMgr containing the Users.\n     * @param theUserMgr to be used\n     /\n    public static void setUserMgr(UserMgr theUserMgr) {\n        userMgr = theUserMgr;\n    }\n\n    /**\n     * get the SimpleUserMgr that contains the Users\n     * @return SimpleUserMgr\n     /\n    public static SimpleUserMgr getUserMgr() {\n        return userMgr;\n    }\n\n    /**\n     * get all the users in memory\n     * @return String\n     /\n    public String toString() {\n        return userMgr.export();\n        /*\n        StringBuffer buff = new StringBuffer();\n        try {\n            JDBMEnumeration c = id.values();\n            while (c.hasMoreElements()) {\n                buff.append(c.nextElement().toString() + '\\n');\n            }\n        } catch (IOException e) {\n            cat.error(\"getUsers: \" + e);\n        }\n        return buff.toString();\n        /\n    }\n\n    /**\n     * test program\n     /\n    public static void main(String[] argv) {\n        Login login = new Login();\n      //  SimpleUserMgr.setConfigFile(argv[0]);\n        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);\n        // usrMgr.init();\n        login.setConfigFile(argv[0]);\n        login.init();\n        login.getUserMgr().addUser(\"cn=Jim Smith, o=LANL, c=US\", \"Jim Smith\", \"Smith\", \"smith@foo.com\", \"submitter\", \"junk\");\n        login.getUserMgr().addUser(\"dn: cn=Dave Barry, o=UNM, c=US\\ncn: Dave Barry\\nemail: barry@goofoff.com\\nsn: Barry\\nuserPassword: stuff\\nrole: staff\");\n\n        login.setUsername(\"Dave Barry\");\n        login.setOrg(\"UNM\");\n        login.setUsername(\"Dave Barry\");\n        cat.debug(login.getUser());\n        login.getUserMgr().delUser(\"smith@foo.com\");\n        String[] mail = Login.getMail();\n        cat.debug(\"Mail: \"+mail[0]);\n        cat.debug(login.getUserMgr().getMailbyOrg(\"LANL\"));\n        String[] names = Login.getNames();\n        cat.debug(\"names: \"+names[0]);\n        System.out.println(login.toString());\n\n    } */\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LoginTest3.java",
		"test_prompt": "// LoginTest3.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#authorize()} method.\n*/\nclass LoginTest3 {"
	},
	{
		"original_code": "// Login.java\n/*\n *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\n/**\n * This class manages authentication and user\n * attribute retrieval when a user tries to log in.\n */\npublic class Login {\n\n    //private static String[] names = null;\n    //private static String[] mail = null;\n    private String username = \"\";\n\n    private static String organization = \"OPENHRE\";\n\n    private static String country = \"US\";\n\n    private String password = \"\";\n\n    private String userid = \"\";\n\n    private String ipAddr = \"\";\n\n    // private static String userdb = \"users\";\n    //AACS.properties\n    private static String configFile = \"AACS\";\n\n    private static String authType = \"simple\";\n\n    private static String xacmlConfig = \"\";\n\n    private static String securityLog = \"\";\n\n    private static String securityLogFilePath = \"\";\n\n    // Date format used by OpenHRE\n    private final static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private final static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    private static Properties props;\n\n    private static UserMgr userMgr;\n\n    private static PDPadapter pdpadapter;\n\n    private User user;\n\n    private LdapService lservice;\n\n    private static Logger cat = Logger.getLogger(Login.class.getName());\n\n    /**\n     * Public default constructor\n     */\n    public Login() {\n    }\n\n    /**\n     * Construct a Login with a UserId\n     */\n    public Login(String userId) {\n        this();\n        this.setUserId(userId);\n    }\n\n    /**\n     * Construct a Login with a UserId and IP Address\n     */\n    public Login(String userId, String ipAddr) {\n        this(userId);\n        this.setIpAddr(ipAddr);\n    }\n\n    /**\n     * @param theConfigFile the properties file\n     */\n    public static void setConfigFile(String theConfigFile) {\n        configFile = theConfigFile;\n    }\n\n    /**\n     * Load and get the Properties from the Config File\n     * @param theConfigFile the properties file\n     */\n    public static Properties getProps(String theConfigFile) {\n        setConfigFile(theConfigFile);\n        return getProps();\n    }\n\n    /**\n     * Load and get the Properties from the preset Config File\n     */\n    public static Properties getProps() {\n        init();\n        return props;\n    }\n\n    /**\n     * Initialize and load all the users.\n     */\n    public static String getSecurityLogFilePath() {\n        return securityLogFilePath;\n    }\n\n    public static void init() {\n        if (props != null)\n            return;\n        props = new Properties();\n        cat.info(\"Loading Properties from \" + configFile);\n        loadProperties(props, configFile);\n        // set the default organization and country\n        organization = props.getProperty(\"organization\", \"OPENHRE\");\n        country = props.getProperty(\"country\", \"US\");\n        authType = props.getProperty(\"AuthType\", \"simple\");\n        xacmlConfig = props.getProperty(\"XACMLConfig\", \"\");\n        cat.info(\"organization is \" + organization);\n        cat.info(\"country is \" + country);\n        cat.info(\"AuthType is \" + authType);\n        cat.info(\"XACMLConfig is \" + xacmlConfig);\n        securityLog = props.getProperty(\"SecurityLog\", \"\");\n        // create security log file if it doesn't exist\n        try {\n            File file = new File(securityLog);\n            securityLogFilePath = file.getAbsolutePath();\n            cat.info(\"Preparing Security Log file \" + securityLogFilePath);\n            // Create file if it does not exist\n            file.createNewFile();\n            // Get the XACML PDPadapter\n            pdpadapter = new PDPadapter(xacmlConfig);\n        } catch (Exception e) {\n            cat.fatal(\"Exception initializing Login manager\", e);\n            e.printStackTrace();\n        }\n        if (userMgr == null) {\n            if (authType.equals(\"simple\")) {\n                userMgr = new SimpleUserMgr(configFile);\n            } else if (authType.equals(\"krb5\")) {\n                userMgr = new KrbUserMgr();\n            }\n        }\n    }\n\n    public static void loadProperties(Properties props, String configFile) {\n        try {\n            props.load(Login.class.getResourceAsStream(configFile + \".properties\"));\n        } catch (Exception e) {\n            System.out.println(\"Could not read \" + configFile + \".properties\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * set the username  and get the user corresponding to the resulting dn\n     * @param username\n     */\n    public void setUsername(String username) {\n        //\t\tSystem.out.println(\"setting username: \" +username);\n        //        user = null;\n        this.username = username.trim();\n        //user = userMgr.getUser(username, organization);\n        user.setUserName(username);\n        cat.debug(\"setUserName: \" + username);\n    }\n\n    /**\n     * Get filepath of security log.\n     * ASSUMPTION: init() was called (i.e. securityLog was initialized)\n     * @return absolute filepath\n     */\n    /**\n     * get the current username  from user if defined\n     */\n    public String getUsername() {\n        if (user != null)\n            return user.getUserName();\n        else\n            return username;\n    }\n\n    /**\n     * set ipAddr for login\n     * @param ipAddr\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n        if (user != null)\n            user.setIpAddr(ipAddr);\n    }\n\n    /**\n     * get ipAddress of user if defined\n     * return String\n     */\n    public String getIpAddr() {\n        if (user != null)\n            return user.getIpAddr();\n        else\n            return ipAddr;\n    }\n\n    /**\n     * set the password\n     * @param password\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**\n     *  set the email address\n     * @param email address\n     */\n    /*    public void setEmail(String email) {\n//\t\tSystem.out.println(\"setting email: \"+email);\n        this.email = email;\n        if (user != null) user.setUserId(email);\n    }\n*/\n    /**\n     * set the active user from the userId\n     * @param userId\n     */\n    public void setUserId(String usrId) {\n        userid = usrId;\n        cat.debug(\"setUserId: \" + userid);\n    }\n\n    /**\n     * get the current User\n     */\n    public User getUser() {\n        return user;\n    }\n\n    /**\n     * get the current User ID\n     */\n    public String getUserId() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current email address\n     */\n    public String getEmail() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current LdapService\n     */\n    public LdapService getLdapService() {\n        if (lservice == null)\n            return (lservice = new LdapService(user.getLdapContext()));\n        else\n            return lservice;\n    }\n\n    /**\n     * get the User from one of two ways. Return the current user if it is already defined.\n     * First see if there is a defined email address (userId) and get the user directly\n     * If not, then check the organization table and the the associated table of username\n     * using the username and organization (country is defaulted to \"US\").\n     */\n    /*    public User getUser() {\n        //   try {\n        // makeDN();\n        if (user != null) return user;\n        if (userid != null || userid != \"\")\n            user = userMgr.getUser(userid);\n        else\n            user = userMgr.getUser(username, organization, userid);\n        cat.debug(\"getUser: \"+user);\n        return user;\n\n    }\n*/\n    /**\n     * return the role of the current user.\n     * @return String containing the Role of the current user\n     *     /\n     *    public String getRole() {\n     *        if (user != null)\n     *            return user.getRole();\n     *        else\n     *            return null;\n     *    }\n     *\n     *    /**\n     * get the Distinguished Name of the user\n     * @return String containing the distinguished name\n     *     /\n     *    public String getDN() {\n     *        if (user != null)\n     *            return user.getDN();\n     *        else\n     *            return null;\n     *    }\n     */\n    /**\n     * Authorize a User without checking the password.\n     * Note that this should only be called for Users\n     * that are already Authenticated.\n     * @return user\n     */\n    public User authorize() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        user = userMgr.getUser(this.userid);\n        user.setIpAddr(this.ipAddr);\n        // compare password validity start date with current date\n        Date today = new Date();\n        Date pwvd = null;\n        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(\"\"))) {\n            pwvd = convertDateFromUTC(user.getPassvalidstart());\n            if (!dateCompare(pwvd, today)) {\n                log(user, \"Not allowed to login currently.\");\n                user = null;\n                throw new LoginException(\"Not allowed to login currently.\");\n            }\n        }\n        // check if user needs to change password before proceeding\n        user.setPasschange(false);\n        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals(\"\")) && (!user.getPassrenewal().equals(\"\")) && (!user.getPassrenewal().equals(\"-1\"))) {\n            Calendar c1 = Calendar.getInstance();\n            c1.setTime(pwvd);\n            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));\n            if (dateCompare(c1.getTime(), today)) {\n                user.setPasschange(true);\n            }\n        }\n        // Performing IP based filtering and active groups determination\n        // based on current location.\n        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.\n        if ((user.getAllowedips() != null) && (props.getProperty(\"AuthType\", \"krb5\").equals(\"krb5\")) && (props.getProperty(\"IPfiltering\", \"yes\").equals(\"yes\"))) {\n            int currentip = getIpInteger(user.getIpAddr());\n            // IP based filtering\n            cat.info(\"Performing IP filtering for \" + getUserId());\n            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);\n            if (ipcheck_result == false) {\n                log(user, \"Not authorized from the current IP address.\");\n                throw new LoginException(\"Not authorized from the current IP address.\");\n            }\n            // Active groups determination\n            cat.info(\"Determining active groups for \" + getUserId());\n            boolean faccheck_result;\n            // get all groups from LDAPservice\n            Set usergrps = user.getGroups();\n            if (usergrps != null && usergrps.size() > 0) {\n                // Setup the interface to the LDAP server\n                getLdapService();\n                //session.setAttribute(\"ldapservice\", lservice);\n                Iterator grpit = usergrps.iterator();\n                while (grpit.hasNext()) {\n                    // Fetch each group's details from LDAP\n                    Group grp = (Group) lservice.getGroup(grpit.next().toString());\n                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);\n                    if (faccheck_result == true) {\n                        log(user, \"Active group: \" + grp.getCn());\n                        user.addActivegroup(grp.getCn());\n                    }\n                }\n                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {\n                    log(user, \" Accessing from remote location.\");\n                    user.addActivegroup(\"remote\");\n                }\n            }\n        }\n        // end IP based filtering and Active groups determination\n        return user;\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate(String userid, String password, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.password = password;\n        this.ipAddr = ipaddr;\n        return authenticate();\n    }\n\n    /**\n     * Authorize a pre-Authenticated User\n     * @return user\n     */\n    public User authorize(String userid, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.ipAddr = ipaddr;\n        return authorize();\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        if (!userMgr.checkSecret(userid, password, authType)) {\n            cat.warn(\"Invalid Password! User: \" + username + \" ,userid: \" + userid);\n            throw new LoginException(\"Password invalid\");\n        }\n        user = userMgr.getUser();\n        user.setIpAddr(this.ipAddr);\n        authorize();\n        return user;\n    }\n\n    /**\n     * check permissions for the current user\n     */\n    public boolean accessDecision(User usr, String resource, String action) {\n        if (\"simple\".equals(authType)) {\n            cat.debug(\"accessDecision() always true for simple authType\");\n            return true;\n        }\n        if (cat.isDebugEnabled()) {\n            cat.debug(\"User for accessDecision() is \" + usr);\n            cat.debug(\"resource is \" + resource);\n            cat.debug(\"action is \" + action);\n            cat.debug(\"XACMLConfig is \" + xacmlConfig);\n        }\n        if (usr == null)\n            return false;\n        boolean ac_result = false;\n        try {\n            // create XACML request\n            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());\n            // encode the Request and print it to standard out\n            request.encode(System.out, new Indenter());\n            if (pdpadapter.makeDecision(request) == 0)\n                ac_result = true;\n            else\n                ac_result = false;\n            cat.debug(\"Access Decision: \" + ac_result);\n        } catch (Exception e) {\n            cat.error(e);\n            e.printStackTrace();\n        }\n        return ac_result;\n    }\n\n    public void log(User user, String info) {\n        FileAppender appender = null;\n        try {\n            appender = new FileAppender(new SimpleLayout(), securityLog, true);\n        } catch (Exception e) {\n            cat.error(e);\n        }\n        cat.addAppender(appender);\n        Level oldlevel = cat.getLevel();\n        cat.setLevel((Level) Level.INFO);\n        Date now = new Date();\n        if (user == null) {\n            cat.info(now + \" - \" + username + \" - \" + userid + \" - \" + ipAddr + \" -- \" + info);\n        } else {\n            // new log format (for better parsing in Cocoon)\n            cat.info(now + \" - \" + user.getUserName() + \" - \" + user.getUserId() + \" - \" + user.getIpAddr() + \" -- \" + info);\n        }\n        cat.setLevel(oldlevel);\n        cat.removeAppender(appender);\n    }\n\n    /**\n     * logout the current user\n     */\n    public void logOut() {\n        userMgr.logOut();\n        user = null;\n        password = null;\n        username = null;\n    }\n\n    private Date convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return specdate;\n    }\n\n    private boolean dateCompare(Date date1, Date date2) {\n        Calendar c1 = Calendar.getInstance();\n        Calendar c2 = Calendar.getInstance();\n        c1.setTime(date1);\n        c2.setTime(date2);\n        if (c1.before(c2))\n            return true;\n        else\n            return false;\n    }\n\n    private int getIpInteger(String ip) {\n        StringTokenizer st = new StringTokenizer(ip, \".\");\n        int bitposition = 24;\n        int ipnumber = 0;\n        while (st.hasMoreTokens()) {\n            String curtoken = st.nextToken();\n            if (ipnumber == 0)\n                ipnumber = (Integer.parseInt(curtoken) << bitposition);\n            else\n                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);\n            bitposition -= 8;\n        }\n        return ipnumber;\n    }\n\n    private boolean ipRangeCheck(Set allowedips, int currentip) {\n        // Check if the current IP address falls between the given range of allowed IP addresses\n        boolean ipmatch = false;\n        if (allowedips == null) {\n            cat.debug(\"No IP address range specified.\");\n            return false;\n        }\n        Set allowed_ips = new HashSet();\n        allowed_ips = (HashSet) allowedips;\n        Iterator ipit = allowed_ips.iterator();\n        while (ipit.hasNext()) {\n            int finalip = 0;\n            // subnet mask bits\n            int n = 0;\n            // get the IP address and the subnet mask bits (if any)\n            StringTokenizer st = new StringTokenizer(ipit.next().toString(), \"/\");\n            if (st.hasMoreTokens()) {\n                finalip = getIpInteger(st.nextToken());\n                if (st.hasMoreTokens())\n                    n = Integer.parseInt(st.nextToken());\n            }\n            // Every IP address allowed for the user\n            if (finalip == 0) {\n                cat.info(\"All IP addresses allowed.\");\n                ipmatch = true;\n            }\n            if (n != 0) {\n                // compute an n bit subnet mask, all 1s except for last n bits.\n                int subnet = ~((1 << n) - 1);\n                int t1 = finalip & subnet;\n                int t2 = currentip & subnet;\n                if (t1 == t2)\n                    ipmatch = true;\n            } else {\n                if (finalip == currentip)\n                    ipmatch = true;\n            }\n        }\n        return ipmatch;\n    }\n\n    /**\n     * Change the User's password\n     * (this should be moved to KrbUserMgr)\n     */\n    public void changePassword(String newpass) throws Exception {\n        // read the configuration properties\n        if (cat.isDebugEnabled())\n            cat.debug(\"using props \" + props);\n        String krbrealm = props.getProperty(\"krbrealm\", \"YOUR-KERBEROS-REALM\");\n        String editkrb = props.getProperty(\"editkrb\", \"no\");\n        String kadminLocal = props.getProperty(\"kadmin.local\", \"kadmin.local\");\n        int exitVal = 0;\n        String userid = user.getUserId();\n        // strip only the unique username from the userid\n        int ind = userid.indexOf(\"@\");\n        if (ind > 0)\n            userid = userid.substring(0, ind);\n        cat.debug(\"editkrb: \" + editkrb);\n        if (editkrb.toLowerCase().equals(\"yes\")) {\n            // Execute the UNIX command to reset the principal's password in the Kerberos\n            // database.\n            // Assumption: The web server and the kerberos server are running on the same UNIX\n            // based machine.Otherwise please modify the following according to your settings.\n            String krbprinc = userid + \"@\" + krbrealm;\n            cat.info(\"Reseting principal \\\"\" + krbprinc + \"\\\"'s password in \" + \"the Kerberos database\");\n            Runtime rt = Runtime.getRuntime();\n            // Create a String array consisting of the command and its arguments\n            String[] cmd = { kadminLocal, \"-p \" + userid, \"-q \\\"\\\"cpw -pw \" + newpass + \" \" + krbprinc + \"\\\"\\\"\" };\n            cat.debug(\"exec'ing Runtime command: \" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);\n            Process ps = rt.exec(cmd);\n            // For printing error messages\n            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), \"ERROR\");\n            // For printing output\n            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), \"OUTPUT\");\n            // Start printing\n            errorHandler.start();\n            outputHandler.start();\n            // Print exit value\n            exitVal = ps.waitFor();\n            cat.debug(\"Kerberos update status: \" + exitVal);\n        }\n        if (exitVal == 0) {\n            getLdapService();\n            Person person = lservice.getPerson(userid);\n            person.setPasschange(\"no\");\n            // Put current date as password valid start date\n            Date today = new Date();\n            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);\n            person.setPassvalidstart(sdf.format(today));\n            if (lservice.updatePerson(person, person.getDn()) == true) {\n            } else\n                throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n        } else\n            throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n    }\n    /*  /** obtain list of valid users\n     * @return String[] list of known users\n     /\n    public static String[] getNames() {\n        if (names == null) {\n            if (userMgr == null) init();\n            names = userMgr.getUserNames();\n        }\n\n        return names;\n    }\n\n    /**\n     * return known email addresses\n     * @return String[] list of known emails\n     /\n    public static String[] getMail() {\n        if (mail == null) {\n            if (userMgr == null) init();\n            mail = userMgr.getUserIds();\n        }\n        /*\n        {\n            if (id == null) init();\n            ArrayList v = null;\n            try {\n                JDBMEnumeration e = id.keys();\n                v = new ArrayList();\n                while (e.hasMoreElements()) {\n                    v.add(e.nextElement());\n                }\n            } catch (IOException e1) {\n                cat.error(\"getMail: \" + e1);\n                return new String[0];\n            }\n            mail = new String[v.size()];\n            cat.debug(\"getMail: \"+mail.length+ \" elements\");\n            v.toArray(mail);\n        }  /\n        return mail;\n    }\n\n\n    /**\n     *  set the SimpleUserMgr containing the Users.\n     * @param theUserMgr to be used\n     /\n    public static void setUserMgr(UserMgr theUserMgr) {\n        userMgr = theUserMgr;\n    }\n\n    /**\n     * get the SimpleUserMgr that contains the Users\n     * @return SimpleUserMgr\n     /\n    public static SimpleUserMgr getUserMgr() {\n        return userMgr;\n    }\n\n    /**\n     * get all the users in memory\n     * @return String\n     /\n    public String toString() {\n        return userMgr.export();\n        /*\n        StringBuffer buff = new StringBuffer();\n        try {\n            JDBMEnumeration c = id.values();\n            while (c.hasMoreElements()) {\n                buff.append(c.nextElement().toString() + '\\n');\n            }\n        } catch (IOException e) {\n            cat.error(\"getUsers: \" + e);\n        }\n        return buff.toString();\n        /\n    }\n\n    /**\n     * test program\n     /\n    public static void main(String[] argv) {\n        Login login = new Login();\n      //  SimpleUserMgr.setConfigFile(argv[0]);\n        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);\n        // usrMgr.init();\n        login.setConfigFile(argv[0]);\n        login.init();\n        login.getUserMgr().addUser(\"cn=Jim Smith, o=LANL, c=US\", \"Jim Smith\", \"Smith\", \"smith@foo.com\", \"submitter\", \"junk\");\n        login.getUserMgr().addUser(\"dn: cn=Dave Barry, o=UNM, c=US\\ncn: Dave Barry\\nemail: barry@goofoff.com\\nsn: Barry\\nuserPassword: stuff\\nrole: staff\");\n\n        login.setUsername(\"Dave Barry\");\n        login.setOrg(\"UNM\");\n        login.setUsername(\"Dave Barry\");\n        cat.debug(login.getUser());\n        login.getUserMgr().delUser(\"smith@foo.com\");\n        String[] mail = Login.getMail();\n        cat.debug(\"Mail: \"+mail[0]);\n        cat.debug(login.getUserMgr().getMailbyOrg(\"LANL\"));\n        String[] names = Login.getNames();\n        cat.debug(\"names: \"+names[0]);\n        System.out.println(login.toString());\n\n    } */\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LoginTest4.java",
		"test_prompt": "// LoginTest4.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#authenticate(String, String, String)} method.\n*/\nclass LoginTest4 {"
	},
	{
		"original_code": "// Login.java\n/*\n *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\n/**\n * This class manages authentication and user\n * attribute retrieval when a user tries to log in.\n */\npublic class Login {\n\n    //private static String[] names = null;\n    //private static String[] mail = null;\n    private String username = \"\";\n\n    private static String organization = \"OPENHRE\";\n\n    private static String country = \"US\";\n\n    private String password = \"\";\n\n    private String userid = \"\";\n\n    private String ipAddr = \"\";\n\n    // private static String userdb = \"users\";\n    //AACS.properties\n    private static String configFile = \"AACS\";\n\n    private static String authType = \"simple\";\n\n    private static String xacmlConfig = \"\";\n\n    private static String securityLog = \"\";\n\n    private static String securityLogFilePath = \"\";\n\n    // Date format used by OpenHRE\n    private final static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private final static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    private static Properties props;\n\n    private static UserMgr userMgr;\n\n    private static PDPadapter pdpadapter;\n\n    private User user;\n\n    private LdapService lservice;\n\n    private static Logger cat = Logger.getLogger(Login.class.getName());\n\n    /**\n     * Public default constructor\n     */\n    public Login() {\n    }\n\n    /**\n     * Construct a Login with a UserId\n     */\n    public Login(String userId) {\n        this();\n        this.setUserId(userId);\n    }\n\n    /**\n     * Construct a Login with a UserId and IP Address\n     */\n    public Login(String userId, String ipAddr) {\n        this(userId);\n        this.setIpAddr(ipAddr);\n    }\n\n    /**\n     * @param theConfigFile the properties file\n     */\n    public static void setConfigFile(String theConfigFile) {\n        configFile = theConfigFile;\n    }\n\n    /**\n     * Load and get the Properties from the Config File\n     * @param theConfigFile the properties file\n     */\n    public static Properties getProps(String theConfigFile) {\n        setConfigFile(theConfigFile);\n        return getProps();\n    }\n\n    /**\n     * Load and get the Properties from the preset Config File\n     */\n    public static Properties getProps() {\n        init();\n        return props;\n    }\n\n    /**\n     * Initialize and load all the users.\n     */\n    public static String getSecurityLogFilePath() {\n        return securityLogFilePath;\n    }\n\n    public static void init() {\n        if (props != null)\n            return;\n        props = new Properties();\n        cat.info(\"Loading Properties from \" + configFile);\n        loadProperties(props, configFile);\n        // set the default organization and country\n        organization = props.getProperty(\"organization\", \"OPENHRE\");\n        country = props.getProperty(\"country\", \"US\");\n        authType = props.getProperty(\"AuthType\", \"simple\");\n        xacmlConfig = props.getProperty(\"XACMLConfig\", \"\");\n        cat.info(\"organization is \" + organization);\n        cat.info(\"country is \" + country);\n        cat.info(\"AuthType is \" + authType);\n        cat.info(\"XACMLConfig is \" + xacmlConfig);\n        securityLog = props.getProperty(\"SecurityLog\", \"\");\n        // create security log file if it doesn't exist\n        try {\n            File file = new File(securityLog);\n            securityLogFilePath = file.getAbsolutePath();\n            cat.info(\"Preparing Security Log file \" + securityLogFilePath);\n            // Create file if it does not exist\n            file.createNewFile();\n            // Get the XACML PDPadapter\n            pdpadapter = new PDPadapter(xacmlConfig);\n        } catch (Exception e) {\n            cat.fatal(\"Exception initializing Login manager\", e);\n            e.printStackTrace();\n        }\n        if (userMgr == null) {\n            if (authType.equals(\"simple\")) {\n                userMgr = new SimpleUserMgr(configFile);\n            } else if (authType.equals(\"krb5\")) {\n                userMgr = new KrbUserMgr();\n            }\n        }\n    }\n\n    public static void loadProperties(Properties props, String configFile) {\n        try {\n            props.load(Login.class.getResourceAsStream(configFile + \".properties\"));\n        } catch (Exception e) {\n            System.out.println(\"Could not read \" + configFile + \".properties\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * set the username  and get the user corresponding to the resulting dn\n     * @param username\n     */\n    public void setUsername(String username) {\n        //\t\tSystem.out.println(\"setting username: \" +username);\n        //        user = null;\n        this.username = username.trim();\n        //user = userMgr.getUser(username, organization);\n        user.setUserName(username);\n        cat.debug(\"setUserName: \" + username);\n    }\n\n    /**\n     * Get filepath of security log.\n     * ASSUMPTION: init() was called (i.e. securityLog was initialized)\n     * @return absolute filepath\n     */\n    /**\n     * get the current username  from user if defined\n     */\n    public String getUsername() {\n        if (user != null)\n            return user.getUserName();\n        else\n            return username;\n    }\n\n    /**\n     * set ipAddr for login\n     * @param ipAddr\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n        if (user != null)\n            user.setIpAddr(ipAddr);\n    }\n\n    /**\n     * get ipAddress of user if defined\n     * return String\n     */\n    public String getIpAddr() {\n        if (user != null)\n            return user.getIpAddr();\n        else\n            return ipAddr;\n    }\n\n    /**\n     * set the password\n     * @param password\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**\n     *  set the email address\n     * @param email address\n     */\n    /*    public void setEmail(String email) {\n//\t\tSystem.out.println(\"setting email: \"+email);\n        this.email = email;\n        if (user != null) user.setUserId(email);\n    }\n*/\n    /**\n     * set the active user from the userId\n     * @param userId\n     */\n    public void setUserId(String usrId) {\n        userid = usrId;\n        cat.debug(\"setUserId: \" + userid);\n    }\n\n    /**\n     * get the current User\n     */\n    public User getUser() {\n        return user;\n    }\n\n    /**\n     * get the current User ID\n     */\n    public String getUserId() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current email address\n     */\n    public String getEmail() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current LdapService\n     */\n    public LdapService getLdapService() {\n        if (lservice == null)\n            return (lservice = new LdapService(user.getLdapContext()));\n        else\n            return lservice;\n    }\n\n    /**\n     * get the User from one of two ways. Return the current user if it is already defined.\n     * First see if there is a defined email address (userId) and get the user directly\n     * If not, then check the organization table and the the associated table of username\n     * using the username and organization (country is defaulted to \"US\").\n     */\n    /*    public User getUser() {\n        //   try {\n        // makeDN();\n        if (user != null) return user;\n        if (userid != null || userid != \"\")\n            user = userMgr.getUser(userid);\n        else\n            user = userMgr.getUser(username, organization, userid);\n        cat.debug(\"getUser: \"+user);\n        return user;\n\n    }\n*/\n    /**\n     * return the role of the current user.\n     * @return String containing the Role of the current user\n     *     /\n     *    public String getRole() {\n     *        if (user != null)\n     *            return user.getRole();\n     *        else\n     *            return null;\n     *    }\n     *\n     *    /**\n     * get the Distinguished Name of the user\n     * @return String containing the distinguished name\n     *     /\n     *    public String getDN() {\n     *        if (user != null)\n     *            return user.getDN();\n     *        else\n     *            return null;\n     *    }\n     */\n    /**\n     * Authorize a User without checking the password.\n     * Note that this should only be called for Users\n     * that are already Authenticated.\n     * @return user\n     */\n    public User authorize() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        user = userMgr.getUser(this.userid);\n        user.setIpAddr(this.ipAddr);\n        // compare password validity start date with current date\n        Date today = new Date();\n        Date pwvd = null;\n        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(\"\"))) {\n            pwvd = convertDateFromUTC(user.getPassvalidstart());\n            if (!dateCompare(pwvd, today)) {\n                log(user, \"Not allowed to login currently.\");\n                user = null;\n                throw new LoginException(\"Not allowed to login currently.\");\n            }\n        }\n        // check if user needs to change password before proceeding\n        user.setPasschange(false);\n        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals(\"\")) && (!user.getPassrenewal().equals(\"\")) && (!user.getPassrenewal().equals(\"-1\"))) {\n            Calendar c1 = Calendar.getInstance();\n            c1.setTime(pwvd);\n            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));\n            if (dateCompare(c1.getTime(), today)) {\n                user.setPasschange(true);\n            }\n        }\n        // Performing IP based filtering and active groups determination\n        // based on current location.\n        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.\n        if ((user.getAllowedips() != null) && (props.getProperty(\"AuthType\", \"krb5\").equals(\"krb5\")) && (props.getProperty(\"IPfiltering\", \"yes\").equals(\"yes\"))) {\n            int currentip = getIpInteger(user.getIpAddr());\n            // IP based filtering\n            cat.info(\"Performing IP filtering for \" + getUserId());\n            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);\n            if (ipcheck_result == false) {\n                log(user, \"Not authorized from the current IP address.\");\n                throw new LoginException(\"Not authorized from the current IP address.\");\n            }\n            // Active groups determination\n            cat.info(\"Determining active groups for \" + getUserId());\n            boolean faccheck_result;\n            // get all groups from LDAPservice\n            Set usergrps = user.getGroups();\n            if (usergrps != null && usergrps.size() > 0) {\n                // Setup the interface to the LDAP server\n                getLdapService();\n                //session.setAttribute(\"ldapservice\", lservice);\n                Iterator grpit = usergrps.iterator();\n                while (grpit.hasNext()) {\n                    // Fetch each group's details from LDAP\n                    Group grp = (Group) lservice.getGroup(grpit.next().toString());\n                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);\n                    if (faccheck_result == true) {\n                        log(user, \"Active group: \" + grp.getCn());\n                        user.addActivegroup(grp.getCn());\n                    }\n                }\n                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {\n                    log(user, \" Accessing from remote location.\");\n                    user.addActivegroup(\"remote\");\n                }\n            }\n        }\n        // end IP based filtering and Active groups determination\n        return user;\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate(String userid, String password, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.password = password;\n        this.ipAddr = ipaddr;\n        return authenticate();\n    }\n\n    /**\n     * Authorize a pre-Authenticated User\n     * @return user\n     */\n    public User authorize(String userid, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.ipAddr = ipaddr;\n        return authorize();\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        if (!userMgr.checkSecret(userid, password, authType)) {\n            cat.warn(\"Invalid Password! User: \" + username + \" ,userid: \" + userid);\n            throw new LoginException(\"Password invalid\");\n        }\n        user = userMgr.getUser();\n        user.setIpAddr(this.ipAddr);\n        authorize();\n        return user;\n    }\n\n    /**\n     * check permissions for the current user\n     */\n    public boolean accessDecision(User usr, String resource, String action) {\n        if (\"simple\".equals(authType)) {\n            cat.debug(\"accessDecision() always true for simple authType\");\n            return true;\n        }\n        if (cat.isDebugEnabled()) {\n            cat.debug(\"User for accessDecision() is \" + usr);\n            cat.debug(\"resource is \" + resource);\n            cat.debug(\"action is \" + action);\n            cat.debug(\"XACMLConfig is \" + xacmlConfig);\n        }\n        if (usr == null)\n            return false;\n        boolean ac_result = false;\n        try {\n            // create XACML request\n            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());\n            // encode the Request and print it to standard out\n            request.encode(System.out, new Indenter());\n            if (pdpadapter.makeDecision(request) == 0)\n                ac_result = true;\n            else\n                ac_result = false;\n            cat.debug(\"Access Decision: \" + ac_result);\n        } catch (Exception e) {\n            cat.error(e);\n            e.printStackTrace();\n        }\n        return ac_result;\n    }\n\n    public void log(User user, String info) {\n        FileAppender appender = null;\n        try {\n            appender = new FileAppender(new SimpleLayout(), securityLog, true);\n        } catch (Exception e) {\n            cat.error(e);\n        }\n        cat.addAppender(appender);\n        Level oldlevel = cat.getLevel();\n        cat.setLevel((Level) Level.INFO);\n        Date now = new Date();\n        if (user == null) {\n            cat.info(now + \" - \" + username + \" - \" + userid + \" - \" + ipAddr + \" -- \" + info);\n        } else {\n            // new log format (for better parsing in Cocoon)\n            cat.info(now + \" - \" + user.getUserName() + \" - \" + user.getUserId() + \" - \" + user.getIpAddr() + \" -- \" + info);\n        }\n        cat.setLevel(oldlevel);\n        cat.removeAppender(appender);\n    }\n\n    /**\n     * logout the current user\n     */\n    public void logOut() {\n        userMgr.logOut();\n        user = null;\n        password = null;\n        username = null;\n    }\n\n    private Date convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return specdate;\n    }\n\n    private boolean dateCompare(Date date1, Date date2) {\n        Calendar c1 = Calendar.getInstance();\n        Calendar c2 = Calendar.getInstance();\n        c1.setTime(date1);\n        c2.setTime(date2);\n        if (c1.before(c2))\n            return true;\n        else\n            return false;\n    }\n\n    private int getIpInteger(String ip) {\n        StringTokenizer st = new StringTokenizer(ip, \".\");\n        int bitposition = 24;\n        int ipnumber = 0;\n        while (st.hasMoreTokens()) {\n            String curtoken = st.nextToken();\n            if (ipnumber == 0)\n                ipnumber = (Integer.parseInt(curtoken) << bitposition);\n            else\n                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);\n            bitposition -= 8;\n        }\n        return ipnumber;\n    }\n\n    private boolean ipRangeCheck(Set allowedips, int currentip) {\n        // Check if the current IP address falls between the given range of allowed IP addresses\n        boolean ipmatch = false;\n        if (allowedips == null) {\n            cat.debug(\"No IP address range specified.\");\n            return false;\n        }\n        Set allowed_ips = new HashSet();\n        allowed_ips = (HashSet) allowedips;\n        Iterator ipit = allowed_ips.iterator();\n        while (ipit.hasNext()) {\n            int finalip = 0;\n            // subnet mask bits\n            int n = 0;\n            // get the IP address and the subnet mask bits (if any)\n            StringTokenizer st = new StringTokenizer(ipit.next().toString(), \"/\");\n            if (st.hasMoreTokens()) {\n                finalip = getIpInteger(st.nextToken());\n                if (st.hasMoreTokens())\n                    n = Integer.parseInt(st.nextToken());\n            }\n            // Every IP address allowed for the user\n            if (finalip == 0) {\n                cat.info(\"All IP addresses allowed.\");\n                ipmatch = true;\n            }\n            if (n != 0) {\n                // compute an n bit subnet mask, all 1s except for last n bits.\n                int subnet = ~((1 << n) - 1);\n                int t1 = finalip & subnet;\n                int t2 = currentip & subnet;\n                if (t1 == t2)\n                    ipmatch = true;\n            } else {\n                if (finalip == currentip)\n                    ipmatch = true;\n            }\n        }\n        return ipmatch;\n    }\n\n    /**\n     * Change the User's password\n     * (this should be moved to KrbUserMgr)\n     */\n    public void changePassword(String newpass) throws Exception {\n        // read the configuration properties\n        if (cat.isDebugEnabled())\n            cat.debug(\"using props \" + props);\n        String krbrealm = props.getProperty(\"krbrealm\", \"YOUR-KERBEROS-REALM\");\n        String editkrb = props.getProperty(\"editkrb\", \"no\");\n        String kadminLocal = props.getProperty(\"kadmin.local\", \"kadmin.local\");\n        int exitVal = 0;\n        String userid = user.getUserId();\n        // strip only the unique username from the userid\n        int ind = userid.indexOf(\"@\");\n        if (ind > 0)\n            userid = userid.substring(0, ind);\n        cat.debug(\"editkrb: \" + editkrb);\n        if (editkrb.toLowerCase().equals(\"yes\")) {\n            // Execute the UNIX command to reset the principal's password in the Kerberos\n            // database.\n            // Assumption: The web server and the kerberos server are running on the same UNIX\n            // based machine.Otherwise please modify the following according to your settings.\n            String krbprinc = userid + \"@\" + krbrealm;\n            cat.info(\"Reseting principal \\\"\" + krbprinc + \"\\\"'s password in \" + \"the Kerberos database\");\n            Runtime rt = Runtime.getRuntime();\n            // Create a String array consisting of the command and its arguments\n            String[] cmd = { kadminLocal, \"-p \" + userid, \"-q \\\"\\\"cpw -pw \" + newpass + \" \" + krbprinc + \"\\\"\\\"\" };\n            cat.debug(\"exec'ing Runtime command: \" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);\n            Process ps = rt.exec(cmd);\n            // For printing error messages\n            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), \"ERROR\");\n            // For printing output\n            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), \"OUTPUT\");\n            // Start printing\n            errorHandler.start();\n            outputHandler.start();\n            // Print exit value\n            exitVal = ps.waitFor();\n            cat.debug(\"Kerberos update status: \" + exitVal);\n        }\n        if (exitVal == 0) {\n            getLdapService();\n            Person person = lservice.getPerson(userid);\n            person.setPasschange(\"no\");\n            // Put current date as password valid start date\n            Date today = new Date();\n            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);\n            person.setPassvalidstart(sdf.format(today));\n            if (lservice.updatePerson(person, person.getDn()) == true) {\n            } else\n                throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n        } else\n            throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n    }\n    /*  /** obtain list of valid users\n     * @return String[] list of known users\n     /\n    public static String[] getNames() {\n        if (names == null) {\n            if (userMgr == null) init();\n            names = userMgr.getUserNames();\n        }\n\n        return names;\n    }\n\n    /**\n     * return known email addresses\n     * @return String[] list of known emails\n     /\n    public static String[] getMail() {\n        if (mail == null) {\n            if (userMgr == null) init();\n            mail = userMgr.getUserIds();\n        }\n        /*\n        {\n            if (id == null) init();\n            ArrayList v = null;\n            try {\n                JDBMEnumeration e = id.keys();\n                v = new ArrayList();\n                while (e.hasMoreElements()) {\n                    v.add(e.nextElement());\n                }\n            } catch (IOException e1) {\n                cat.error(\"getMail: \" + e1);\n                return new String[0];\n            }\n            mail = new String[v.size()];\n            cat.debug(\"getMail: \"+mail.length+ \" elements\");\n            v.toArray(mail);\n        }  /\n        return mail;\n    }\n\n\n    /**\n     *  set the SimpleUserMgr containing the Users.\n     * @param theUserMgr to be used\n     /\n    public static void setUserMgr(UserMgr theUserMgr) {\n        userMgr = theUserMgr;\n    }\n\n    /**\n     * get the SimpleUserMgr that contains the Users\n     * @return SimpleUserMgr\n     /\n    public static SimpleUserMgr getUserMgr() {\n        return userMgr;\n    }\n\n    /**\n     * get all the users in memory\n     * @return String\n     /\n    public String toString() {\n        return userMgr.export();\n        /*\n        StringBuffer buff = new StringBuffer();\n        try {\n            JDBMEnumeration c = id.values();\n            while (c.hasMoreElements()) {\n                buff.append(c.nextElement().toString() + '\\n');\n            }\n        } catch (IOException e) {\n            cat.error(\"getUsers: \" + e);\n        }\n        return buff.toString();\n        /\n    }\n\n    /**\n     * test program\n     /\n    public static void main(String[] argv) {\n        Login login = new Login();\n      //  SimpleUserMgr.setConfigFile(argv[0]);\n        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);\n        // usrMgr.init();\n        login.setConfigFile(argv[0]);\n        login.init();\n        login.getUserMgr().addUser(\"cn=Jim Smith, o=LANL, c=US\", \"Jim Smith\", \"Smith\", \"smith@foo.com\", \"submitter\", \"junk\");\n        login.getUserMgr().addUser(\"dn: cn=Dave Barry, o=UNM, c=US\\ncn: Dave Barry\\nemail: barry@goofoff.com\\nsn: Barry\\nuserPassword: stuff\\nrole: staff\");\n\n        login.setUsername(\"Dave Barry\");\n        login.setOrg(\"UNM\");\n        login.setUsername(\"Dave Barry\");\n        cat.debug(login.getUser());\n        login.getUserMgr().delUser(\"smith@foo.com\");\n        String[] mail = Login.getMail();\n        cat.debug(\"Mail: \"+mail[0]);\n        cat.debug(login.getUserMgr().getMailbyOrg(\"LANL\"));\n        String[] names = Login.getNames();\n        cat.debug(\"names: \"+names[0]);\n        System.out.println(login.toString());\n\n    } */\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LoginTest5.java",
		"test_prompt": "// LoginTest5.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#authorize(String, String)} method.\n*/\nclass LoginTest5 {"
	},
	{
		"original_code": "// Login.java\n/*\n *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\n/**\n * This class manages authentication and user\n * attribute retrieval when a user tries to log in.\n */\npublic class Login {\n\n    //private static String[] names = null;\n    //private static String[] mail = null;\n    private String username = \"\";\n\n    private static String organization = \"OPENHRE\";\n\n    private static String country = \"US\";\n\n    private String password = \"\";\n\n    private String userid = \"\";\n\n    private String ipAddr = \"\";\n\n    // private static String userdb = \"users\";\n    //AACS.properties\n    private static String configFile = \"AACS\";\n\n    private static String authType = \"simple\";\n\n    private static String xacmlConfig = \"\";\n\n    private static String securityLog = \"\";\n\n    private static String securityLogFilePath = \"\";\n\n    // Date format used by OpenHRE\n    private final static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private final static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    private static Properties props;\n\n    private static UserMgr userMgr;\n\n    private static PDPadapter pdpadapter;\n\n    private User user;\n\n    private LdapService lservice;\n\n    private static Logger cat = Logger.getLogger(Login.class.getName());\n\n    /**\n     * Public default constructor\n     */\n    public Login() {\n    }\n\n    /**\n     * Construct a Login with a UserId\n     */\n    public Login(String userId) {\n        this();\n        this.setUserId(userId);\n    }\n\n    /**\n     * Construct a Login with a UserId and IP Address\n     */\n    public Login(String userId, String ipAddr) {\n        this(userId);\n        this.setIpAddr(ipAddr);\n    }\n\n    /**\n     * @param theConfigFile the properties file\n     */\n    public static void setConfigFile(String theConfigFile) {\n        configFile = theConfigFile;\n    }\n\n    /**\n     * Load and get the Properties from the Config File\n     * @param theConfigFile the properties file\n     */\n    public static Properties getProps(String theConfigFile) {\n        setConfigFile(theConfigFile);\n        return getProps();\n    }\n\n    /**\n     * Load and get the Properties from the preset Config File\n     */\n    public static Properties getProps() {\n        init();\n        return props;\n    }\n\n    /**\n     * Initialize and load all the users.\n     */\n    public static String getSecurityLogFilePath() {\n        return securityLogFilePath;\n    }\n\n    public static void init() {\n        if (props != null)\n            return;\n        props = new Properties();\n        cat.info(\"Loading Properties from \" + configFile);\n        loadProperties(props, configFile);\n        // set the default organization and country\n        organization = props.getProperty(\"organization\", \"OPENHRE\");\n        country = props.getProperty(\"country\", \"US\");\n        authType = props.getProperty(\"AuthType\", \"simple\");\n        xacmlConfig = props.getProperty(\"XACMLConfig\", \"\");\n        cat.info(\"organization is \" + organization);\n        cat.info(\"country is \" + country);\n        cat.info(\"AuthType is \" + authType);\n        cat.info(\"XACMLConfig is \" + xacmlConfig);\n        securityLog = props.getProperty(\"SecurityLog\", \"\");\n        // create security log file if it doesn't exist\n        try {\n            File file = new File(securityLog);\n            securityLogFilePath = file.getAbsolutePath();\n            cat.info(\"Preparing Security Log file \" + securityLogFilePath);\n            // Create file if it does not exist\n            file.createNewFile();\n            // Get the XACML PDPadapter\n            pdpadapter = new PDPadapter(xacmlConfig);\n        } catch (Exception e) {\n            cat.fatal(\"Exception initializing Login manager\", e);\n            e.printStackTrace();\n        }\n        if (userMgr == null) {\n            if (authType.equals(\"simple\")) {\n                userMgr = new SimpleUserMgr(configFile);\n            } else if (authType.equals(\"krb5\")) {\n                userMgr = new KrbUserMgr();\n            }\n        }\n    }\n\n    public static void loadProperties(Properties props, String configFile) {\n        try {\n            props.load(Login.class.getResourceAsStream(configFile + \".properties\"));\n        } catch (Exception e) {\n            System.out.println(\"Could not read \" + configFile + \".properties\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * set the username  and get the user corresponding to the resulting dn\n     * @param username\n     */\n    public void setUsername(String username) {\n        //\t\tSystem.out.println(\"setting username: \" +username);\n        //        user = null;\n        this.username = username.trim();\n        //user = userMgr.getUser(username, organization);\n        user.setUserName(username);\n        cat.debug(\"setUserName: \" + username);\n    }\n\n    /**\n     * Get filepath of security log.\n     * ASSUMPTION: init() was called (i.e. securityLog was initialized)\n     * @return absolute filepath\n     */\n    /**\n     * get the current username  from user if defined\n     */\n    public String getUsername() {\n        if (user != null)\n            return user.getUserName();\n        else\n            return username;\n    }\n\n    /**\n     * set ipAddr for login\n     * @param ipAddr\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n        if (user != null)\n            user.setIpAddr(ipAddr);\n    }\n\n    /**\n     * get ipAddress of user if defined\n     * return String\n     */\n    public String getIpAddr() {\n        if (user != null)\n            return user.getIpAddr();\n        else\n            return ipAddr;\n    }\n\n    /**\n     * set the password\n     * @param password\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**\n     *  set the email address\n     * @param email address\n     */\n    /*    public void setEmail(String email) {\n//\t\tSystem.out.println(\"setting email: \"+email);\n        this.email = email;\n        if (user != null) user.setUserId(email);\n    }\n*/\n    /**\n     * set the active user from the userId\n     * @param userId\n     */\n    public void setUserId(String usrId) {\n        userid = usrId;\n        cat.debug(\"setUserId: \" + userid);\n    }\n\n    /**\n     * get the current User\n     */\n    public User getUser() {\n        return user;\n    }\n\n    /**\n     * get the current User ID\n     */\n    public String getUserId() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current email address\n     */\n    public String getEmail() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current LdapService\n     */\n    public LdapService getLdapService() {\n        if (lservice == null)\n            return (lservice = new LdapService(user.getLdapContext()));\n        else\n            return lservice;\n    }\n\n    /**\n     * get the User from one of two ways. Return the current user if it is already defined.\n     * First see if there is a defined email address (userId) and get the user directly\n     * If not, then check the organization table and the the associated table of username\n     * using the username and organization (country is defaulted to \"US\").\n     */\n    /*    public User getUser() {\n        //   try {\n        // makeDN();\n        if (user != null) return user;\n        if (userid != null || userid != \"\")\n            user = userMgr.getUser(userid);\n        else\n            user = userMgr.getUser(username, organization, userid);\n        cat.debug(\"getUser: \"+user);\n        return user;\n\n    }\n*/\n    /**\n     * return the role of the current user.\n     * @return String containing the Role of the current user\n     *     /\n     *    public String getRole() {\n     *        if (user != null)\n     *            return user.getRole();\n     *        else\n     *            return null;\n     *    }\n     *\n     *    /**\n     * get the Distinguished Name of the user\n     * @return String containing the distinguished name\n     *     /\n     *    public String getDN() {\n     *        if (user != null)\n     *            return user.getDN();\n     *        else\n     *            return null;\n     *    }\n     */\n    /**\n     * Authorize a User without checking the password.\n     * Note that this should only be called for Users\n     * that are already Authenticated.\n     * @return user\n     */\n    public User authorize() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        user = userMgr.getUser(this.userid);\n        user.setIpAddr(this.ipAddr);\n        // compare password validity start date with current date\n        Date today = new Date();\n        Date pwvd = null;\n        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(\"\"))) {\n            pwvd = convertDateFromUTC(user.getPassvalidstart());\n            if (!dateCompare(pwvd, today)) {\n                log(user, \"Not allowed to login currently.\");\n                user = null;\n                throw new LoginException(\"Not allowed to login currently.\");\n            }\n        }\n        // check if user needs to change password before proceeding\n        user.setPasschange(false);\n        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals(\"\")) && (!user.getPassrenewal().equals(\"\")) && (!user.getPassrenewal().equals(\"-1\"))) {\n            Calendar c1 = Calendar.getInstance();\n            c1.setTime(pwvd);\n            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));\n            if (dateCompare(c1.getTime(), today)) {\n                user.setPasschange(true);\n            }\n        }\n        // Performing IP based filtering and active groups determination\n        // based on current location.\n        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.\n        if ((user.getAllowedips() != null) && (props.getProperty(\"AuthType\", \"krb5\").equals(\"krb5\")) && (props.getProperty(\"IPfiltering\", \"yes\").equals(\"yes\"))) {\n            int currentip = getIpInteger(user.getIpAddr());\n            // IP based filtering\n            cat.info(\"Performing IP filtering for \" + getUserId());\n            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);\n            if (ipcheck_result == false) {\n                log(user, \"Not authorized from the current IP address.\");\n                throw new LoginException(\"Not authorized from the current IP address.\");\n            }\n            // Active groups determination\n            cat.info(\"Determining active groups for \" + getUserId());\n            boolean faccheck_result;\n            // get all groups from LDAPservice\n            Set usergrps = user.getGroups();\n            if (usergrps != null && usergrps.size() > 0) {\n                // Setup the interface to the LDAP server\n                getLdapService();\n                //session.setAttribute(\"ldapservice\", lservice);\n                Iterator grpit = usergrps.iterator();\n                while (grpit.hasNext()) {\n                    // Fetch each group's details from LDAP\n                    Group grp = (Group) lservice.getGroup(grpit.next().toString());\n                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);\n                    if (faccheck_result == true) {\n                        log(user, \"Active group: \" + grp.getCn());\n                        user.addActivegroup(grp.getCn());\n                    }\n                }\n                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {\n                    log(user, \" Accessing from remote location.\");\n                    user.addActivegroup(\"remote\");\n                }\n            }\n        }\n        // end IP based filtering and Active groups determination\n        return user;\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate(String userid, String password, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.password = password;\n        this.ipAddr = ipaddr;\n        return authenticate();\n    }\n\n    /**\n     * Authorize a pre-Authenticated User\n     * @return user\n     */\n    public User authorize(String userid, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.ipAddr = ipaddr;\n        return authorize();\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        if (!userMgr.checkSecret(userid, password, authType)) {\n            cat.warn(\"Invalid Password! User: \" + username + \" ,userid: \" + userid);\n            throw new LoginException(\"Password invalid\");\n        }\n        user = userMgr.getUser();\n        user.setIpAddr(this.ipAddr);\n        authorize();\n        return user;\n    }\n\n    /**\n     * check permissions for the current user\n     */\n    public boolean accessDecision(User usr, String resource, String action) {\n        if (\"simple\".equals(authType)) {\n            cat.debug(\"accessDecision() always true for simple authType\");\n            return true;\n        }\n        if (cat.isDebugEnabled()) {\n            cat.debug(\"User for accessDecision() is \" + usr);\n            cat.debug(\"resource is \" + resource);\n            cat.debug(\"action is \" + action);\n            cat.debug(\"XACMLConfig is \" + xacmlConfig);\n        }\n        if (usr == null)\n            return false;\n        boolean ac_result = false;\n        try {\n            // create XACML request\n            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());\n            // encode the Request and print it to standard out\n            request.encode(System.out, new Indenter());\n            if (pdpadapter.makeDecision(request) == 0)\n                ac_result = true;\n            else\n                ac_result = false;\n            cat.debug(\"Access Decision: \" + ac_result);\n        } catch (Exception e) {\n            cat.error(e);\n            e.printStackTrace();\n        }\n        return ac_result;\n    }\n\n    public void log(User user, String info) {\n        FileAppender appender = null;\n        try {\n            appender = new FileAppender(new SimpleLayout(), securityLog, true);\n        } catch (Exception e) {\n            cat.error(e);\n        }\n        cat.addAppender(appender);\n        Level oldlevel = cat.getLevel();\n        cat.setLevel((Level) Level.INFO);\n        Date now = new Date();\n        if (user == null) {\n            cat.info(now + \" - \" + username + \" - \" + userid + \" - \" + ipAddr + \" -- \" + info);\n        } else {\n            // new log format (for better parsing in Cocoon)\n            cat.info(now + \" - \" + user.getUserName() + \" - \" + user.getUserId() + \" - \" + user.getIpAddr() + \" -- \" + info);\n        }\n        cat.setLevel(oldlevel);\n        cat.removeAppender(appender);\n    }\n\n    /**\n     * logout the current user\n     */\n    public void logOut() {\n        userMgr.logOut();\n        user = null;\n        password = null;\n        username = null;\n    }\n\n    private Date convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return specdate;\n    }\n\n    private boolean dateCompare(Date date1, Date date2) {\n        Calendar c1 = Calendar.getInstance();\n        Calendar c2 = Calendar.getInstance();\n        c1.setTime(date1);\n        c2.setTime(date2);\n        if (c1.before(c2))\n            return true;\n        else\n            return false;\n    }\n\n    private int getIpInteger(String ip) {\n        StringTokenizer st = new StringTokenizer(ip, \".\");\n        int bitposition = 24;\n        int ipnumber = 0;\n        while (st.hasMoreTokens()) {\n            String curtoken = st.nextToken();\n            if (ipnumber == 0)\n                ipnumber = (Integer.parseInt(curtoken) << bitposition);\n            else\n                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);\n            bitposition -= 8;\n        }\n        return ipnumber;\n    }\n\n    private boolean ipRangeCheck(Set allowedips, int currentip) {\n        // Check if the current IP address falls between the given range of allowed IP addresses\n        boolean ipmatch = false;\n        if (allowedips == null) {\n            cat.debug(\"No IP address range specified.\");\n            return false;\n        }\n        Set allowed_ips = new HashSet();\n        allowed_ips = (HashSet) allowedips;\n        Iterator ipit = allowed_ips.iterator();\n        while (ipit.hasNext()) {\n            int finalip = 0;\n            // subnet mask bits\n            int n = 0;\n            // get the IP address and the subnet mask bits (if any)\n            StringTokenizer st = new StringTokenizer(ipit.next().toString(), \"/\");\n            if (st.hasMoreTokens()) {\n                finalip = getIpInteger(st.nextToken());\n                if (st.hasMoreTokens())\n                    n = Integer.parseInt(st.nextToken());\n            }\n            // Every IP address allowed for the user\n            if (finalip == 0) {\n                cat.info(\"All IP addresses allowed.\");\n                ipmatch = true;\n            }\n            if (n != 0) {\n                // compute an n bit subnet mask, all 1s except for last n bits.\n                int subnet = ~((1 << n) - 1);\n                int t1 = finalip & subnet;\n                int t2 = currentip & subnet;\n                if (t1 == t2)\n                    ipmatch = true;\n            } else {\n                if (finalip == currentip)\n                    ipmatch = true;\n            }\n        }\n        return ipmatch;\n    }\n\n    /**\n     * Change the User's password\n     * (this should be moved to KrbUserMgr)\n     */\n    public void changePassword(String newpass) throws Exception {\n        // read the configuration properties\n        if (cat.isDebugEnabled())\n            cat.debug(\"using props \" + props);\n        String krbrealm = props.getProperty(\"krbrealm\", \"YOUR-KERBEROS-REALM\");\n        String editkrb = props.getProperty(\"editkrb\", \"no\");\n        String kadminLocal = props.getProperty(\"kadmin.local\", \"kadmin.local\");\n        int exitVal = 0;\n        String userid = user.getUserId();\n        // strip only the unique username from the userid\n        int ind = userid.indexOf(\"@\");\n        if (ind > 0)\n            userid = userid.substring(0, ind);\n        cat.debug(\"editkrb: \" + editkrb);\n        if (editkrb.toLowerCase().equals(\"yes\")) {\n            // Execute the UNIX command to reset the principal's password in the Kerberos\n            // database.\n            // Assumption: The web server and the kerberos server are running on the same UNIX\n            // based machine.Otherwise please modify the following according to your settings.\n            String krbprinc = userid + \"@\" + krbrealm;\n            cat.info(\"Reseting principal \\\"\" + krbprinc + \"\\\"'s password in \" + \"the Kerberos database\");\n            Runtime rt = Runtime.getRuntime();\n            // Create a String array consisting of the command and its arguments\n            String[] cmd = { kadminLocal, \"-p \" + userid, \"-q \\\"\\\"cpw -pw \" + newpass + \" \" + krbprinc + \"\\\"\\\"\" };\n            cat.debug(\"exec'ing Runtime command: \" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);\n            Process ps = rt.exec(cmd);\n            // For printing error messages\n            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), \"ERROR\");\n            // For printing output\n            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), \"OUTPUT\");\n            // Start printing\n            errorHandler.start();\n            outputHandler.start();\n            // Print exit value\n            exitVal = ps.waitFor();\n            cat.debug(\"Kerberos update status: \" + exitVal);\n        }\n        if (exitVal == 0) {\n            getLdapService();\n            Person person = lservice.getPerson(userid);\n            person.setPasschange(\"no\");\n            // Put current date as password valid start date\n            Date today = new Date();\n            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);\n            person.setPassvalidstart(sdf.format(today));\n            if (lservice.updatePerson(person, person.getDn()) == true) {\n            } else\n                throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n        } else\n            throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n    }\n    /*  /** obtain list of valid users\n     * @return String[] list of known users\n     /\n    public static String[] getNames() {\n        if (names == null) {\n            if (userMgr == null) init();\n            names = userMgr.getUserNames();\n        }\n\n        return names;\n    }\n\n    /**\n     * return known email addresses\n     * @return String[] list of known emails\n     /\n    public static String[] getMail() {\n        if (mail == null) {\n            if (userMgr == null) init();\n            mail = userMgr.getUserIds();\n        }\n        /*\n        {\n            if (id == null) init();\n            ArrayList v = null;\n            try {\n                JDBMEnumeration e = id.keys();\n                v = new ArrayList();\n                while (e.hasMoreElements()) {\n                    v.add(e.nextElement());\n                }\n            } catch (IOException e1) {\n                cat.error(\"getMail: \" + e1);\n                return new String[0];\n            }\n            mail = new String[v.size()];\n            cat.debug(\"getMail: \"+mail.length+ \" elements\");\n            v.toArray(mail);\n        }  /\n        return mail;\n    }\n\n\n    /**\n     *  set the SimpleUserMgr containing the Users.\n     * @param theUserMgr to be used\n     /\n    public static void setUserMgr(UserMgr theUserMgr) {\n        userMgr = theUserMgr;\n    }\n\n    /**\n     * get the SimpleUserMgr that contains the Users\n     * @return SimpleUserMgr\n     /\n    public static SimpleUserMgr getUserMgr() {\n        return userMgr;\n    }\n\n    /**\n     * get all the users in memory\n     * @return String\n     /\n    public String toString() {\n        return userMgr.export();\n        /*\n        StringBuffer buff = new StringBuffer();\n        try {\n            JDBMEnumeration c = id.values();\n            while (c.hasMoreElements()) {\n                buff.append(c.nextElement().toString() + '\\n');\n            }\n        } catch (IOException e) {\n            cat.error(\"getUsers: \" + e);\n        }\n        return buff.toString();\n        /\n    }\n\n    /**\n     * test program\n     /\n    public static void main(String[] argv) {\n        Login login = new Login();\n      //  SimpleUserMgr.setConfigFile(argv[0]);\n        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);\n        // usrMgr.init();\n        login.setConfigFile(argv[0]);\n        login.init();\n        login.getUserMgr().addUser(\"cn=Jim Smith, o=LANL, c=US\", \"Jim Smith\", \"Smith\", \"smith@foo.com\", \"submitter\", \"junk\");\n        login.getUserMgr().addUser(\"dn: cn=Dave Barry, o=UNM, c=US\\ncn: Dave Barry\\nemail: barry@goofoff.com\\nsn: Barry\\nuserPassword: stuff\\nrole: staff\");\n\n        login.setUsername(\"Dave Barry\");\n        login.setOrg(\"UNM\");\n        login.setUsername(\"Dave Barry\");\n        cat.debug(login.getUser());\n        login.getUserMgr().delUser(\"smith@foo.com\");\n        String[] mail = Login.getMail();\n        cat.debug(\"Mail: \"+mail[0]);\n        cat.debug(login.getUserMgr().getMailbyOrg(\"LANL\"));\n        String[] names = Login.getNames();\n        cat.debug(\"names: \"+names[0]);\n        System.out.println(login.toString());\n\n    } */\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LoginTest6.java",
		"test_prompt": "// LoginTest6.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#authenticate()} method.\n*/\nclass LoginTest6 {"
	},
	{
		"original_code": "// Login.java\n/*\n *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005, 2006 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\n\n/**\n * This class manages authentication and user\n * attribute retrieval when a user tries to log in.\n */\npublic class Login {\n\n    //private static String[] names = null;\n    //private static String[] mail = null;\n    private String username = \"\";\n\n    private static String organization = \"OPENHRE\";\n\n    private static String country = \"US\";\n\n    private String password = \"\";\n\n    private String userid = \"\";\n\n    private String ipAddr = \"\";\n\n    // private static String userdb = \"users\";\n    //AACS.properties\n    private static String configFile = \"AACS\";\n\n    private static String authType = \"simple\";\n\n    private static String xacmlConfig = \"\";\n\n    private static String securityLog = \"\";\n\n    private static String securityLogFilePath = \"\";\n\n    // Date format used by OpenHRE\n    private final static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private final static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    private static Properties props;\n\n    private static UserMgr userMgr;\n\n    private static PDPadapter pdpadapter;\n\n    private User user;\n\n    private LdapService lservice;\n\n    private static Logger cat = Logger.getLogger(Login.class.getName());\n\n    /**\n     * Public default constructor\n     */\n    public Login() {\n    }\n\n    /**\n     * Construct a Login with a UserId\n     */\n    public Login(String userId) {\n        this();\n        this.setUserId(userId);\n    }\n\n    /**\n     * Construct a Login with a UserId and IP Address\n     */\n    public Login(String userId, String ipAddr) {\n        this(userId);\n        this.setIpAddr(ipAddr);\n    }\n\n    /**\n     * @param theConfigFile the properties file\n     */\n    public static void setConfigFile(String theConfigFile) {\n        configFile = theConfigFile;\n    }\n\n    /**\n     * Load and get the Properties from the Config File\n     * @param theConfigFile the properties file\n     */\n    public static Properties getProps(String theConfigFile) {\n        setConfigFile(theConfigFile);\n        return getProps();\n    }\n\n    /**\n     * Load and get the Properties from the preset Config File\n     */\n    public static Properties getProps() {\n        init();\n        return props;\n    }\n\n    /**\n     * Initialize and load all the users.\n     */\n    public static String getSecurityLogFilePath() {\n        return securityLogFilePath;\n    }\n\n    public static void init() {\n        if (props != null)\n            return;\n        props = new Properties();\n        cat.info(\"Loading Properties from \" + configFile);\n        loadProperties(props, configFile);\n        // set the default organization and country\n        organization = props.getProperty(\"organization\", \"OPENHRE\");\n        country = props.getProperty(\"country\", \"US\");\n        authType = props.getProperty(\"AuthType\", \"simple\");\n        xacmlConfig = props.getProperty(\"XACMLConfig\", \"\");\n        cat.info(\"organization is \" + organization);\n        cat.info(\"country is \" + country);\n        cat.info(\"AuthType is \" + authType);\n        cat.info(\"XACMLConfig is \" + xacmlConfig);\n        securityLog = props.getProperty(\"SecurityLog\", \"\");\n        // create security log file if it doesn't exist\n        try {\n            File file = new File(securityLog);\n            securityLogFilePath = file.getAbsolutePath();\n            cat.info(\"Preparing Security Log file \" + securityLogFilePath);\n            // Create file if it does not exist\n            file.createNewFile();\n            // Get the XACML PDPadapter\n            pdpadapter = new PDPadapter(xacmlConfig);\n        } catch (Exception e) {\n            cat.fatal(\"Exception initializing Login manager\", e);\n            e.printStackTrace();\n        }\n        if (userMgr == null) {\n            if (authType.equals(\"simple\")) {\n                userMgr = new SimpleUserMgr(configFile);\n            } else if (authType.equals(\"krb5\")) {\n                userMgr = new KrbUserMgr();\n            }\n        }\n    }\n\n    public static void loadProperties(Properties props, String configFile) {\n        try {\n            props.load(Login.class.getResourceAsStream(configFile + \".properties\"));\n        } catch (Exception e) {\n            System.out.println(\"Could not read \" + configFile + \".properties\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * set the username  and get the user corresponding to the resulting dn\n     * @param username\n     */\n    public void setUsername(String username) {\n        //\t\tSystem.out.println(\"setting username: \" +username);\n        //        user = null;\n        this.username = username.trim();\n        //user = userMgr.getUser(username, organization);\n        user.setUserName(username);\n        cat.debug(\"setUserName: \" + username);\n    }\n\n    /**\n     * Get filepath of security log.\n     * ASSUMPTION: init() was called (i.e. securityLog was initialized)\n     * @return absolute filepath\n     */\n    /**\n     * get the current username  from user if defined\n     */\n    public String getUsername() {\n        if (user != null)\n            return user.getUserName();\n        else\n            return username;\n    }\n\n    /**\n     * set ipAddr for login\n     * @param ipAddr\n     */\n    public void setIpAddr(String ipAddr) {\n        this.ipAddr = ipAddr;\n        if (user != null)\n            user.setIpAddr(ipAddr);\n    }\n\n    /**\n     * get ipAddress of user if defined\n     * return String\n     */\n    public String getIpAddr() {\n        if (user != null)\n            return user.getIpAddr();\n        else\n            return ipAddr;\n    }\n\n    /**\n     * set the password\n     * @param password\n     */\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    /**\n     *  set the email address\n     * @param email address\n     */\n    /*    public void setEmail(String email) {\n//\t\tSystem.out.println(\"setting email: \"+email);\n        this.email = email;\n        if (user != null) user.setUserId(email);\n    }\n*/\n    /**\n     * set the active user from the userId\n     * @param userId\n     */\n    public void setUserId(String usrId) {\n        userid = usrId;\n        cat.debug(\"setUserId: \" + userid);\n    }\n\n    /**\n     * get the current User\n     */\n    public User getUser() {\n        return user;\n    }\n\n    /**\n     * get the current User ID\n     */\n    public String getUserId() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current email address\n     */\n    public String getEmail() {\n        //getUser();\n        if (user != null)\n            return user.getUserId();\n        else\n            return null;\n    }\n\n    /**\n     * get the current LdapService\n     */\n    public LdapService getLdapService() {\n        if (lservice == null)\n            return (lservice = new LdapService(user.getLdapContext()));\n        else\n            return lservice;\n    }\n\n    /**\n     * get the User from one of two ways. Return the current user if it is already defined.\n     * First see if there is a defined email address (userId) and get the user directly\n     * If not, then check the organization table and the the associated table of username\n     * using the username and organization (country is defaulted to \"US\").\n     */\n    /*    public User getUser() {\n        //   try {\n        // makeDN();\n        if (user != null) return user;\n        if (userid != null || userid != \"\")\n            user = userMgr.getUser(userid);\n        else\n            user = userMgr.getUser(username, organization, userid);\n        cat.debug(\"getUser: \"+user);\n        return user;\n\n    }\n*/\n    /**\n     * return the role of the current user.\n     * @return String containing the Role of the current user\n     *     /\n     *    public String getRole() {\n     *        if (user != null)\n     *            return user.getRole();\n     *        else\n     *            return null;\n     *    }\n     *\n     *    /**\n     * get the Distinguished Name of the user\n     * @return String containing the distinguished name\n     *     /\n     *    public String getDN() {\n     *        if (user != null)\n     *            return user.getDN();\n     *        else\n     *            return null;\n     *    }\n     */\n    /**\n     * Authorize a User without checking the password.\n     * Note that this should only be called for Users\n     * that are already Authenticated.\n     * @return user\n     */\n    public User authorize() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        user = userMgr.getUser(this.userid);\n        user.setIpAddr(this.ipAddr);\n        // compare password validity start date with current date\n        Date today = new Date();\n        Date pwvd = null;\n        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(\"\"))) {\n            pwvd = convertDateFromUTC(user.getPassvalidstart());\n            if (!dateCompare(pwvd, today)) {\n                log(user, \"Not allowed to login currently.\");\n                user = null;\n                throw new LoginException(\"Not allowed to login currently.\");\n            }\n        }\n        // check if user needs to change password before proceeding\n        user.setPasschange(false);\n        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals(\"\")) && (!user.getPassrenewal().equals(\"\")) && (!user.getPassrenewal().equals(\"-1\"))) {\n            Calendar c1 = Calendar.getInstance();\n            c1.setTime(pwvd);\n            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));\n            if (dateCompare(c1.getTime(), today)) {\n                user.setPasschange(true);\n            }\n        }\n        // Performing IP based filtering and active groups determination\n        // based on current location.\n        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.\n        if ((user.getAllowedips() != null) && (props.getProperty(\"AuthType\", \"krb5\").equals(\"krb5\")) && (props.getProperty(\"IPfiltering\", \"yes\").equals(\"yes\"))) {\n            int currentip = getIpInteger(user.getIpAddr());\n            // IP based filtering\n            cat.info(\"Performing IP filtering for \" + getUserId());\n            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);\n            if (ipcheck_result == false) {\n                log(user, \"Not authorized from the current IP address.\");\n                throw new LoginException(\"Not authorized from the current IP address.\");\n            }\n            // Active groups determination\n            cat.info(\"Determining active groups for \" + getUserId());\n            boolean faccheck_result;\n            // get all groups from LDAPservice\n            Set usergrps = user.getGroups();\n            if (usergrps != null && usergrps.size() > 0) {\n                // Setup the interface to the LDAP server\n                getLdapService();\n                //session.setAttribute(\"ldapservice\", lservice);\n                Iterator grpit = usergrps.iterator();\n                while (grpit.hasNext()) {\n                    // Fetch each group's details from LDAP\n                    Group grp = (Group) lservice.getGroup(grpit.next().toString());\n                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);\n                    if (faccheck_result == true) {\n                        log(user, \"Active group: \" + grp.getCn());\n                        user.addActivegroup(grp.getCn());\n                    }\n                }\n                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {\n                    log(user, \" Accessing from remote location.\");\n                    user.addActivegroup(\"remote\");\n                }\n            }\n        }\n        // end IP based filtering and Active groups determination\n        return user;\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate(String userid, String password, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.password = password;\n        this.ipAddr = ipaddr;\n        return authenticate();\n    }\n\n    /**\n     * Authorize a pre-Authenticated User\n     * @return user\n     */\n    public User authorize(String userid, String ipaddr) throws LoginException {\n        this.userid = userid;\n        this.ipAddr = ipaddr;\n        return authorize();\n    }\n\n    /**\n     * Authenticate the user by checking the password\n     * and then Authorize them.\n     * @return user\n     */\n    public User authenticate() throws LoginException {\n        user = null;\n        if (userMgr == null)\n            throw new LoginException(\"UserMgr undefined\");\n        if (password == null)\n            throw new LoginException(\"Password not supplied\");\n        if (!userMgr.checkSecret(userid, password, authType)) {\n            cat.warn(\"Invalid Password! User: \" + username + \" ,userid: \" + userid);\n            throw new LoginException(\"Password invalid\");\n        }\n        user = userMgr.getUser();\n        user.setIpAddr(this.ipAddr);\n        authorize();\n        return user;\n    }\n\n    /**\n     * check permissions for the current user\n     */\n    public boolean accessDecision(User usr, String resource, String action) {\n        if (\"simple\".equals(authType)) {\n            cat.debug(\"accessDecision() always true for simple authType\");\n            return true;\n        }\n        if (cat.isDebugEnabled()) {\n            cat.debug(\"User for accessDecision() is \" + usr);\n            cat.debug(\"resource is \" + resource);\n            cat.debug(\"action is \" + action);\n            cat.debug(\"XACMLConfig is \" + xacmlConfig);\n        }\n        if (usr == null)\n            return false;\n        boolean ac_result = false;\n        try {\n            // create XACML request\n            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());\n            // encode the Request and print it to standard out\n            request.encode(System.out, new Indenter());\n            if (pdpadapter.makeDecision(request) == 0)\n                ac_result = true;\n            else\n                ac_result = false;\n            cat.debug(\"Access Decision: \" + ac_result);\n        } catch (Exception e) {\n            cat.error(e);\n            e.printStackTrace();\n        }\n        return ac_result;\n    }\n\n    public void log(User user, String info) {\n        FileAppender appender = null;\n        try {\n            appender = new FileAppender(new SimpleLayout(), securityLog, true);\n        } catch (Exception e) {\n            cat.error(e);\n        }\n        cat.addAppender(appender);\n        Level oldlevel = cat.getLevel();\n        cat.setLevel((Level) Level.INFO);\n        Date now = new Date();\n        if (user == null) {\n            cat.info(now + \" - \" + username + \" - \" + userid + \" - \" + ipAddr + \" -- \" + info);\n        } else {\n            // new log format (for better parsing in Cocoon)\n            cat.info(now + \" - \" + user.getUserName() + \" - \" + user.getUserId() + \" - \" + user.getIpAddr() + \" -- \" + info);\n        }\n        cat.setLevel(oldlevel);\n        cat.removeAppender(appender);\n    }\n\n    /**\n     * logout the current user\n     */\n    public void logOut() {\n        userMgr.logOut();\n        user = null;\n        password = null;\n        username = null;\n    }\n\n    private Date convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return specdate;\n    }\n\n    private boolean dateCompare(Date date1, Date date2) {\n        Calendar c1 = Calendar.getInstance();\n        Calendar c2 = Calendar.getInstance();\n        c1.setTime(date1);\n        c2.setTime(date2);\n        if (c1.before(c2))\n            return true;\n        else\n            return false;\n    }\n\n    private int getIpInteger(String ip) {\n        StringTokenizer st = new StringTokenizer(ip, \".\");\n        int bitposition = 24;\n        int ipnumber = 0;\n        while (st.hasMoreTokens()) {\n            String curtoken = st.nextToken();\n            if (ipnumber == 0)\n                ipnumber = (Integer.parseInt(curtoken) << bitposition);\n            else\n                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);\n            bitposition -= 8;\n        }\n        return ipnumber;\n    }\n\n    private boolean ipRangeCheck(Set allowedips, int currentip) {\n        // Check if the current IP address falls between the given range of allowed IP addresses\n        boolean ipmatch = false;\n        if (allowedips == null) {\n            cat.debug(\"No IP address range specified.\");\n            return false;\n        }\n        Set allowed_ips = new HashSet();\n        allowed_ips = (HashSet) allowedips;\n        Iterator ipit = allowed_ips.iterator();\n        while (ipit.hasNext()) {\n            int finalip = 0;\n            // subnet mask bits\n            int n = 0;\n            // get the IP address and the subnet mask bits (if any)\n            StringTokenizer st = new StringTokenizer(ipit.next().toString(), \"/\");\n            if (st.hasMoreTokens()) {\n                finalip = getIpInteger(st.nextToken());\n                if (st.hasMoreTokens())\n                    n = Integer.parseInt(st.nextToken());\n            }\n            // Every IP address allowed for the user\n            if (finalip == 0) {\n                cat.info(\"All IP addresses allowed.\");\n                ipmatch = true;\n            }\n            if (n != 0) {\n                // compute an n bit subnet mask, all 1s except for last n bits.\n                int subnet = ~((1 << n) - 1);\n                int t1 = finalip & subnet;\n                int t2 = currentip & subnet;\n                if (t1 == t2)\n                    ipmatch = true;\n            } else {\n                if (finalip == currentip)\n                    ipmatch = true;\n            }\n        }\n        return ipmatch;\n    }\n\n    /**\n     * Change the User's password\n     * (this should be moved to KrbUserMgr)\n     */\n    public void changePassword(String newpass) throws Exception {\n        // read the configuration properties\n        if (cat.isDebugEnabled())\n            cat.debug(\"using props \" + props);\n        String krbrealm = props.getProperty(\"krbrealm\", \"YOUR-KERBEROS-REALM\");\n        String editkrb = props.getProperty(\"editkrb\", \"no\");\n        String kadminLocal = props.getProperty(\"kadmin.local\", \"kadmin.local\");\n        int exitVal = 0;\n        String userid = user.getUserId();\n        // strip only the unique username from the userid\n        int ind = userid.indexOf(\"@\");\n        if (ind > 0)\n            userid = userid.substring(0, ind);\n        cat.debug(\"editkrb: \" + editkrb);\n        if (editkrb.toLowerCase().equals(\"yes\")) {\n            // Execute the UNIX command to reset the principal's password in the Kerberos\n            // database.\n            // Assumption: The web server and the kerberos server are running on the same UNIX\n            // based machine.Otherwise please modify the following according to your settings.\n            String krbprinc = userid + \"@\" + krbrealm;\n            cat.info(\"Reseting principal \\\"\" + krbprinc + \"\\\"'s password in \" + \"the Kerberos database\");\n            Runtime rt = Runtime.getRuntime();\n            // Create a String array consisting of the command and its arguments\n            String[] cmd = { kadminLocal, \"-p \" + userid, \"-q \\\"\\\"cpw -pw \" + newpass + \" \" + krbprinc + \"\\\"\\\"\" };\n            cat.debug(\"exec'ing Runtime command: \" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);\n            Process ps = rt.exec(cmd);\n            // For printing error messages\n            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), \"ERROR\");\n            // For printing output\n            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), \"OUTPUT\");\n            // Start printing\n            errorHandler.start();\n            outputHandler.start();\n            // Print exit value\n            exitVal = ps.waitFor();\n            cat.debug(\"Kerberos update status: \" + exitVal);\n        }\n        if (exitVal == 0) {\n            getLdapService();\n            Person person = lservice.getPerson(userid);\n            person.setPasschange(\"no\");\n            // Put current date as password valid start date\n            Date today = new Date();\n            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);\n            person.setPassvalidstart(sdf.format(today));\n            if (lservice.updatePerson(person, person.getDn()) == true) {\n            } else\n                throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n        } else\n            throw new LoginException(\"Cannot update your profile. Please contact the administrator!\");\n    }\n    /*  /** obtain list of valid users\n     * @return String[] list of known users\n     /\n    public static String[] getNames() {\n        if (names == null) {\n            if (userMgr == null) init();\n            names = userMgr.getUserNames();\n        }\n\n        return names;\n    }\n\n    /**\n     * return known email addresses\n     * @return String[] list of known emails\n     /\n    public static String[] getMail() {\n        if (mail == null) {\n            if (userMgr == null) init();\n            mail = userMgr.getUserIds();\n        }\n        /*\n        {\n            if (id == null) init();\n            ArrayList v = null;\n            try {\n                JDBMEnumeration e = id.keys();\n                v = new ArrayList();\n                while (e.hasMoreElements()) {\n                    v.add(e.nextElement());\n                }\n            } catch (IOException e1) {\n                cat.error(\"getMail: \" + e1);\n                return new String[0];\n            }\n            mail = new String[v.size()];\n            cat.debug(\"getMail: \"+mail.length+ \" elements\");\n            v.toArray(mail);\n        }  /\n        return mail;\n    }\n\n\n    /**\n     *  set the SimpleUserMgr containing the Users.\n     * @param theUserMgr to be used\n     /\n    public static void setUserMgr(UserMgr theUserMgr) {\n        userMgr = theUserMgr;\n    }\n\n    /**\n     * get the SimpleUserMgr that contains the Users\n     * @return SimpleUserMgr\n     /\n    public static SimpleUserMgr getUserMgr() {\n        return userMgr;\n    }\n\n    /**\n     * get all the users in memory\n     * @return String\n     /\n    public String toString() {\n        return userMgr.export();\n        /*\n        StringBuffer buff = new StringBuffer();\n        try {\n            JDBMEnumeration c = id.values();\n            while (c.hasMoreElements()) {\n                buff.append(c.nextElement().toString() + '\\n');\n            }\n        } catch (IOException e) {\n            cat.error(\"getUsers: \" + e);\n        }\n        return buff.toString();\n        /\n    }\n\n    /**\n     * test program\n     /\n    public static void main(String[] argv) {\n        Login login = new Login();\n      //  SimpleUserMgr.setConfigFile(argv[0]);\n        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);\n        // usrMgr.init();\n        login.setConfigFile(argv[0]);\n        login.init();\n        login.getUserMgr().addUser(\"cn=Jim Smith, o=LANL, c=US\", \"Jim Smith\", \"Smith\", \"smith@foo.com\", \"submitter\", \"junk\");\n        login.getUserMgr().addUser(\"dn: cn=Dave Barry, o=UNM, c=US\\ncn: Dave Barry\\nemail: barry@goofoff.com\\nsn: Barry\\nuserPassword: stuff\\nrole: staff\");\n\n        login.setUsername(\"Dave Barry\");\n        login.setOrg(\"UNM\");\n        login.setUsername(\"Dave Barry\");\n        cat.debug(login.getUser());\n        login.getUserMgr().delUser(\"smith@foo.com\");\n        String[] mail = Login.getMail();\n        cat.debug(\"Mail: \"+mail[0]);\n        cat.debug(login.getUserMgr().getMailbyOrg(\"LANL\"));\n        String[] names = Login.getNames();\n        cat.debug(\"names: \"+names[0]);\n        System.out.println(login.toString());\n\n    } */\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LoginTest7.java",
		"test_prompt": "// LoginTest7.java\npackage com.browsersoft.aacs;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport javax.security.auth.login.LoginException;\nimport org.apache.log4j.FileAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.SimpleLayout;\nimport com.browsersoft.aacs.xacml.PDPadapter;\nimport com.browsersoft.aacs.xacml.RequestBuilder;\nimport com.sun.xacml.Indenter;\nimport com.sun.xacml.ctx.RequestCtx;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Login}.\n* It contains ten unit test cases for the {@link Login#accessDecision(User, String, String)} method.\n*/\nclass LoginTest7 {"
	},
	{
		"original_code": "// LdapService.java\n/*\n *   CVS $Id: LdapService.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\n\n/**\n * @author gsharma\n *\n * LdapService is used as a service for the administrator\n * to retrieve and modify all the information stored\n * in an LDAP server.\n */\npublic class LdapService {\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(LdapService.class.getName());\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    private String basedn;\n\n    private List people;\n\n    private List roles;\n\n    private List groups;\n\n    private LdapContext dctx;\n\n    //SearchControls determines scope of search and what gets\n    private SearchControls ctls;\n\n    // returned as a result of the search.\n    public LdapService(LdapContext dctx) {\n        this.dctx = dctx;\n        init();\n    }\n\n    private void init() {\n        ctls = new SearchControls();\n        // read the configuration properties\n        cat.debug(\"loading properties from \" + configFile);\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        cat.debug(\"got properties \" + props);\n    }\n\n    private NamingEnumeration fetch(String namecontext, String[] attrIDs, String filter) {\n        NamingEnumeration answer = null;\n        try {\n            ctls.setReturningObjFlag(false);\n            // Specify the ids of the attributes to return\n            ctls.setReturningAttributes(attrIDs);\n            ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n            answer = dctx.search(namecontext, filter, ctls);\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return answer;\n    }\n\n    public Person getPerson(String uid) {\n        Person person = new Person();\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, null, \"(uid=\" + uid + \")\");\n        try {\n            cat.debug(\"Person found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList person_roles = new ArrayList();\n                ArrayList person_groups = new ArrayList();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setCn((String) e.next());\n                                cat.debug(\"cn: \" + person.getCn());\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setUid((String) e.next());\n                                cat.debug(\"uid: \" + person.getUid());\n                            }\n                        } else if (attrib.getID().equals(\"sn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setSn((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"givenName\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setGivenname((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"mail\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setEmail((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"telephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"facsimileTelephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setFaxTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"postalAddress\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPostalAddress((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"employeeType\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_roles.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ou\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_groups.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.addAllowedip((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5ValidStart\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassvalidstart((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxRenew\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassrenewal((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxLife\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                if (((String) e.next()).equals(\"-1\"))\n                                    person.setPasschange(\"yes\");\n                                else\n                                    person.setPasschange(\"no\");\n                            }\n                        }\n                    }\n                    // end for\n                    // set DN\n                    person.setDn(\"uid=\" + person.getUid() + \",ou=people,\" + basedn);\n                    if (person_roles.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle roles as selected options\n                        person.setRoles((String[]) person_roles.toArray(new String[person_roles.size()]));\n                    }\n                    if (person_groups.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle groups as selected options\n                        person.setGroups((String[]) person_groups.toArray(new String[person_groups.size()]));\n                    }\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return person;\n    }\n\n    public Collection getPeople() {\n        //if (people == null) {\n        people = new ArrayList();\n        String[] at = { \"uid\", \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, at, \"(uid=*)\");\n        try {\n            cat.debug(\"People found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                String person_cn = null;\n                String person_uid = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_cn = (String) e.next();\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_uid = (String) e.next();\n                            }\n                        }\n                        if ((person_cn != null) && (person_uid != null)) {\n                            people.add(new Person(person_uid, person_cn));\n                            cat.debug(person_cn + \" (\" + person_uid + \") \");\n                            person_cn = null;\n                            person_uid = null;\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(people, new peopleComparator());\n        return people;\n    }\n\n    public Collection getRoles() {\n        //if (roles == null) {\n        roles = new ArrayList();\n        String[] at = { \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=roles,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Roles found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            String role_cn = (String) e.next();\n                            roles.add(new Role(role_cn));\n                            cat.debug(role_cn);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(roles, new roleComparator());\n        return roles;\n    }\n\n    public Collection getGroups() {\n        //if (groups == null) {\n        groups = new ArrayList();\n        String[] at = { \"cn\", \"ipHostNumber\" };\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Groups found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList group_ips = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            // ipHostNumber attribute is returned before the cn attribute for each group.\n                            // There can be 0 or more IP address ranges.\n                            if (attrib.getID().equals(\"ipHostNumber\")) {\n                                String group_ip = (String) e.next();\n                                cat.debug(group_ip);\n                                if (!group_ip.trim().equals(\"0\")) {\n                                    if (group_ips == null)\n                                        group_ips = new ArrayList();\n                                    group_ips.add(group_ip);\n                                }\n                            } else if (attrib.getID().equals(\"cn\")) {\n                                String group_cn = (String) e.next();\n                                groups.add(new Group(group_cn, group_ips));\n                                cat.debug(group_cn);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(groups, new groupComparator());\n        return groups;\n    }\n\n    public Group getGroup(String cn) {\n        Group grp = new Group(cn);\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, null, \"(cn=\" + cn + \")\");\n        try {\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                grp.addAllowedip((String) e.next());\n                            }\n                        }\n                    }\n                    // end for\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return grp;\n    }\n\n    public boolean addPerson(Person person) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            // was getting error code 8\n            dctx.bind(person.getDn(), person);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updatePerson(Person person, String olddn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            String newdn = person.getDn();\n            if (olddn.compareTo(newdn) != 0)\n                dctx.rename(olddn, newdn);\n            person.setAttributes();\n            dctx.modifyAttributes(newdn, DirContext.REPLACE_ATTRIBUTE, person.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deletePerson(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addRole(Role role) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(role.getDn(), role);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteRole(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addGroup(Group group) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(group.getDn(), group);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteGroup(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updateGroup(Group grp) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.modifyAttributes(grp.getDn(), DirContext.REPLACE_ATTRIBUTE, grp.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    class peopleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Person p0 = (Person) o0;\n            Person p1 = (Person) o1;\n            // compare cn first\n            int cnComp = p0.getCn().toUpperCase().compareTo(p1.getCn().toUpperCase());\n            if (cnComp != 0) {\n                return cnComp;\n            }\n            // if cn same then compare uids\n            int uidComp = p0.getUid().toUpperCase().compareTo(p1.getUid().toUpperCase());\n            return uidComp;\n        }\n    }\n\n    class roleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Role r0 = (Role) o0;\n            Role r1 = (Role) o1;\n            // compare cn\n            int cnComp = r0.getCn().toUpperCase().compareTo(r1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n\n    class groupComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Group g0 = (Group) o0;\n            Group g1 = (Group) o1;\n            // compare cn\n            int cnComp = g0.getCn().toUpperCase().compareTo(g1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LdapServiceTest0.java",
		"test_prompt": "// LdapServiceTest0.java\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LdapService}.\n* It contains ten unit test cases for the {@link LdapService#addPerson(Person)} method.\n*/\nclass LdapServiceTest0 {"
	},
	{
		"original_code": "// LdapService.java\n/*\n *   CVS $Id: LdapService.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\n\n/**\n * @author gsharma\n *\n * LdapService is used as a service for the administrator\n * to retrieve and modify all the information stored\n * in an LDAP server.\n */\npublic class LdapService {\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(LdapService.class.getName());\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    private String basedn;\n\n    private List people;\n\n    private List roles;\n\n    private List groups;\n\n    private LdapContext dctx;\n\n    //SearchControls determines scope of search and what gets\n    private SearchControls ctls;\n\n    // returned as a result of the search.\n    public LdapService(LdapContext dctx) {\n        this.dctx = dctx;\n        init();\n    }\n\n    private void init() {\n        ctls = new SearchControls();\n        // read the configuration properties\n        cat.debug(\"loading properties from \" + configFile);\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        cat.debug(\"got properties \" + props);\n    }\n\n    private NamingEnumeration fetch(String namecontext, String[] attrIDs, String filter) {\n        NamingEnumeration answer = null;\n        try {\n            ctls.setReturningObjFlag(false);\n            // Specify the ids of the attributes to return\n            ctls.setReturningAttributes(attrIDs);\n            ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n            answer = dctx.search(namecontext, filter, ctls);\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return answer;\n    }\n\n    public Person getPerson(String uid) {\n        Person person = new Person();\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, null, \"(uid=\" + uid + \")\");\n        try {\n            cat.debug(\"Person found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList person_roles = new ArrayList();\n                ArrayList person_groups = new ArrayList();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setCn((String) e.next());\n                                cat.debug(\"cn: \" + person.getCn());\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setUid((String) e.next());\n                                cat.debug(\"uid: \" + person.getUid());\n                            }\n                        } else if (attrib.getID().equals(\"sn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setSn((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"givenName\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setGivenname((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"mail\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setEmail((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"telephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"facsimileTelephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setFaxTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"postalAddress\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPostalAddress((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"employeeType\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_roles.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ou\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_groups.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.addAllowedip((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5ValidStart\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassvalidstart((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxRenew\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassrenewal((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxLife\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                if (((String) e.next()).equals(\"-1\"))\n                                    person.setPasschange(\"yes\");\n                                else\n                                    person.setPasschange(\"no\");\n                            }\n                        }\n                    }\n                    // end for\n                    // set DN\n                    person.setDn(\"uid=\" + person.getUid() + \",ou=people,\" + basedn);\n                    if (person_roles.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle roles as selected options\n                        person.setRoles((String[]) person_roles.toArray(new String[person_roles.size()]));\n                    }\n                    if (person_groups.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle groups as selected options\n                        person.setGroups((String[]) person_groups.toArray(new String[person_groups.size()]));\n                    }\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return person;\n    }\n\n    public Collection getPeople() {\n        //if (people == null) {\n        people = new ArrayList();\n        String[] at = { \"uid\", \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, at, \"(uid=*)\");\n        try {\n            cat.debug(\"People found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                String person_cn = null;\n                String person_uid = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_cn = (String) e.next();\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_uid = (String) e.next();\n                            }\n                        }\n                        if ((person_cn != null) && (person_uid != null)) {\n                            people.add(new Person(person_uid, person_cn));\n                            cat.debug(person_cn + \" (\" + person_uid + \") \");\n                            person_cn = null;\n                            person_uid = null;\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(people, new peopleComparator());\n        return people;\n    }\n\n    public Collection getRoles() {\n        //if (roles == null) {\n        roles = new ArrayList();\n        String[] at = { \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=roles,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Roles found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            String role_cn = (String) e.next();\n                            roles.add(new Role(role_cn));\n                            cat.debug(role_cn);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(roles, new roleComparator());\n        return roles;\n    }\n\n    public Collection getGroups() {\n        //if (groups == null) {\n        groups = new ArrayList();\n        String[] at = { \"cn\", \"ipHostNumber\" };\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Groups found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList group_ips = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            // ipHostNumber attribute is returned before the cn attribute for each group.\n                            // There can be 0 or more IP address ranges.\n                            if (attrib.getID().equals(\"ipHostNumber\")) {\n                                String group_ip = (String) e.next();\n                                cat.debug(group_ip);\n                                if (!group_ip.trim().equals(\"0\")) {\n                                    if (group_ips == null)\n                                        group_ips = new ArrayList();\n                                    group_ips.add(group_ip);\n                                }\n                            } else if (attrib.getID().equals(\"cn\")) {\n                                String group_cn = (String) e.next();\n                                groups.add(new Group(group_cn, group_ips));\n                                cat.debug(group_cn);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(groups, new groupComparator());\n        return groups;\n    }\n\n    public Group getGroup(String cn) {\n        Group grp = new Group(cn);\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, null, \"(cn=\" + cn + \")\");\n        try {\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                grp.addAllowedip((String) e.next());\n                            }\n                        }\n                    }\n                    // end for\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return grp;\n    }\n\n    public boolean addPerson(Person person) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            // was getting error code 8\n            dctx.bind(person.getDn(), person);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updatePerson(Person person, String olddn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            String newdn = person.getDn();\n            if (olddn.compareTo(newdn) != 0)\n                dctx.rename(olddn, newdn);\n            person.setAttributes();\n            dctx.modifyAttributes(newdn, DirContext.REPLACE_ATTRIBUTE, person.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deletePerson(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addRole(Role role) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(role.getDn(), role);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteRole(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addGroup(Group group) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(group.getDn(), group);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteGroup(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updateGroup(Group grp) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.modifyAttributes(grp.getDn(), DirContext.REPLACE_ATTRIBUTE, grp.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    class peopleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Person p0 = (Person) o0;\n            Person p1 = (Person) o1;\n            // compare cn first\n            int cnComp = p0.getCn().toUpperCase().compareTo(p1.getCn().toUpperCase());\n            if (cnComp != 0) {\n                return cnComp;\n            }\n            // if cn same then compare uids\n            int uidComp = p0.getUid().toUpperCase().compareTo(p1.getUid().toUpperCase());\n            return uidComp;\n        }\n    }\n\n    class roleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Role r0 = (Role) o0;\n            Role r1 = (Role) o1;\n            // compare cn\n            int cnComp = r0.getCn().toUpperCase().compareTo(r1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n\n    class groupComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Group g0 = (Group) o0;\n            Group g1 = (Group) o1;\n            // compare cn\n            int cnComp = g0.getCn().toUpperCase().compareTo(g1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LdapServiceTest1.java",
		"test_prompt": "// LdapServiceTest1.java\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LdapService}.\n* It contains ten unit test cases for the {@link LdapService#updatePerson(Person, String)} method.\n*/\nclass LdapServiceTest1 {"
	},
	{
		"original_code": "// LdapService.java\n/*\n *   CVS $Id: LdapService.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\n\n/**\n * @author gsharma\n *\n * LdapService is used as a service for the administrator\n * to retrieve and modify all the information stored\n * in an LDAP server.\n */\npublic class LdapService {\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(LdapService.class.getName());\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    private String basedn;\n\n    private List people;\n\n    private List roles;\n\n    private List groups;\n\n    private LdapContext dctx;\n\n    //SearchControls determines scope of search and what gets\n    private SearchControls ctls;\n\n    // returned as a result of the search.\n    public LdapService(LdapContext dctx) {\n        this.dctx = dctx;\n        init();\n    }\n\n    private void init() {\n        ctls = new SearchControls();\n        // read the configuration properties\n        cat.debug(\"loading properties from \" + configFile);\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        cat.debug(\"got properties \" + props);\n    }\n\n    private NamingEnumeration fetch(String namecontext, String[] attrIDs, String filter) {\n        NamingEnumeration answer = null;\n        try {\n            ctls.setReturningObjFlag(false);\n            // Specify the ids of the attributes to return\n            ctls.setReturningAttributes(attrIDs);\n            ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n            answer = dctx.search(namecontext, filter, ctls);\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return answer;\n    }\n\n    public Person getPerson(String uid) {\n        Person person = new Person();\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, null, \"(uid=\" + uid + \")\");\n        try {\n            cat.debug(\"Person found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList person_roles = new ArrayList();\n                ArrayList person_groups = new ArrayList();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setCn((String) e.next());\n                                cat.debug(\"cn: \" + person.getCn());\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setUid((String) e.next());\n                                cat.debug(\"uid: \" + person.getUid());\n                            }\n                        } else if (attrib.getID().equals(\"sn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setSn((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"givenName\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setGivenname((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"mail\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setEmail((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"telephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"facsimileTelephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setFaxTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"postalAddress\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPostalAddress((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"employeeType\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_roles.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ou\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_groups.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.addAllowedip((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5ValidStart\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassvalidstart((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxRenew\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassrenewal((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxLife\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                if (((String) e.next()).equals(\"-1\"))\n                                    person.setPasschange(\"yes\");\n                                else\n                                    person.setPasschange(\"no\");\n                            }\n                        }\n                    }\n                    // end for\n                    // set DN\n                    person.setDn(\"uid=\" + person.getUid() + \",ou=people,\" + basedn);\n                    if (person_roles.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle roles as selected options\n                        person.setRoles((String[]) person_roles.toArray(new String[person_roles.size()]));\n                    }\n                    if (person_groups.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle groups as selected options\n                        person.setGroups((String[]) person_groups.toArray(new String[person_groups.size()]));\n                    }\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return person;\n    }\n\n    public Collection getPeople() {\n        //if (people == null) {\n        people = new ArrayList();\n        String[] at = { \"uid\", \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, at, \"(uid=*)\");\n        try {\n            cat.debug(\"People found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                String person_cn = null;\n                String person_uid = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_cn = (String) e.next();\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_uid = (String) e.next();\n                            }\n                        }\n                        if ((person_cn != null) && (person_uid != null)) {\n                            people.add(new Person(person_uid, person_cn));\n                            cat.debug(person_cn + \" (\" + person_uid + \") \");\n                            person_cn = null;\n                            person_uid = null;\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(people, new peopleComparator());\n        return people;\n    }\n\n    public Collection getRoles() {\n        //if (roles == null) {\n        roles = new ArrayList();\n        String[] at = { \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=roles,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Roles found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            String role_cn = (String) e.next();\n                            roles.add(new Role(role_cn));\n                            cat.debug(role_cn);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(roles, new roleComparator());\n        return roles;\n    }\n\n    public Collection getGroups() {\n        //if (groups == null) {\n        groups = new ArrayList();\n        String[] at = { \"cn\", \"ipHostNumber\" };\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Groups found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList group_ips = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            // ipHostNumber attribute is returned before the cn attribute for each group.\n                            // There can be 0 or more IP address ranges.\n                            if (attrib.getID().equals(\"ipHostNumber\")) {\n                                String group_ip = (String) e.next();\n                                cat.debug(group_ip);\n                                if (!group_ip.trim().equals(\"0\")) {\n                                    if (group_ips == null)\n                                        group_ips = new ArrayList();\n                                    group_ips.add(group_ip);\n                                }\n                            } else if (attrib.getID().equals(\"cn\")) {\n                                String group_cn = (String) e.next();\n                                groups.add(new Group(group_cn, group_ips));\n                                cat.debug(group_cn);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(groups, new groupComparator());\n        return groups;\n    }\n\n    public Group getGroup(String cn) {\n        Group grp = new Group(cn);\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, null, \"(cn=\" + cn + \")\");\n        try {\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                grp.addAllowedip((String) e.next());\n                            }\n                        }\n                    }\n                    // end for\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return grp;\n    }\n\n    public boolean addPerson(Person person) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            // was getting error code 8\n            dctx.bind(person.getDn(), person);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updatePerson(Person person, String olddn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            String newdn = person.getDn();\n            if (olddn.compareTo(newdn) != 0)\n                dctx.rename(olddn, newdn);\n            person.setAttributes();\n            dctx.modifyAttributes(newdn, DirContext.REPLACE_ATTRIBUTE, person.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deletePerson(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addRole(Role role) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(role.getDn(), role);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteRole(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addGroup(Group group) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(group.getDn(), group);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteGroup(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updateGroup(Group grp) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.modifyAttributes(grp.getDn(), DirContext.REPLACE_ATTRIBUTE, grp.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    class peopleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Person p0 = (Person) o0;\n            Person p1 = (Person) o1;\n            // compare cn first\n            int cnComp = p0.getCn().toUpperCase().compareTo(p1.getCn().toUpperCase());\n            if (cnComp != 0) {\n                return cnComp;\n            }\n            // if cn same then compare uids\n            int uidComp = p0.getUid().toUpperCase().compareTo(p1.getUid().toUpperCase());\n            return uidComp;\n        }\n    }\n\n    class roleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Role r0 = (Role) o0;\n            Role r1 = (Role) o1;\n            // compare cn\n            int cnComp = r0.getCn().toUpperCase().compareTo(r1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n\n    class groupComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Group g0 = (Group) o0;\n            Group g1 = (Group) o1;\n            // compare cn\n            int cnComp = g0.getCn().toUpperCase().compareTo(g1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LdapServiceTest2.java",
		"test_prompt": "// LdapServiceTest2.java\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LdapService}.\n* It contains ten unit test cases for the {@link LdapService#deletePerson(String)} method.\n*/\nclass LdapServiceTest2 {"
	},
	{
		"original_code": "// LdapService.java\n/*\n *   CVS $Id: LdapService.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\n\n/**\n * @author gsharma\n *\n * LdapService is used as a service for the administrator\n * to retrieve and modify all the information stored\n * in an LDAP server.\n */\npublic class LdapService {\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(LdapService.class.getName());\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    private String basedn;\n\n    private List people;\n\n    private List roles;\n\n    private List groups;\n\n    private LdapContext dctx;\n\n    //SearchControls determines scope of search and what gets\n    private SearchControls ctls;\n\n    // returned as a result of the search.\n    public LdapService(LdapContext dctx) {\n        this.dctx = dctx;\n        init();\n    }\n\n    private void init() {\n        ctls = new SearchControls();\n        // read the configuration properties\n        cat.debug(\"loading properties from \" + configFile);\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        cat.debug(\"got properties \" + props);\n    }\n\n    private NamingEnumeration fetch(String namecontext, String[] attrIDs, String filter) {\n        NamingEnumeration answer = null;\n        try {\n            ctls.setReturningObjFlag(false);\n            // Specify the ids of the attributes to return\n            ctls.setReturningAttributes(attrIDs);\n            ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n            answer = dctx.search(namecontext, filter, ctls);\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return answer;\n    }\n\n    public Person getPerson(String uid) {\n        Person person = new Person();\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, null, \"(uid=\" + uid + \")\");\n        try {\n            cat.debug(\"Person found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList person_roles = new ArrayList();\n                ArrayList person_groups = new ArrayList();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setCn((String) e.next());\n                                cat.debug(\"cn: \" + person.getCn());\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setUid((String) e.next());\n                                cat.debug(\"uid: \" + person.getUid());\n                            }\n                        } else if (attrib.getID().equals(\"sn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setSn((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"givenName\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setGivenname((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"mail\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setEmail((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"telephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"facsimileTelephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setFaxTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"postalAddress\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPostalAddress((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"employeeType\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_roles.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ou\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_groups.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.addAllowedip((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5ValidStart\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassvalidstart((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxRenew\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassrenewal((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxLife\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                if (((String) e.next()).equals(\"-1\"))\n                                    person.setPasschange(\"yes\");\n                                else\n                                    person.setPasschange(\"no\");\n                            }\n                        }\n                    }\n                    // end for\n                    // set DN\n                    person.setDn(\"uid=\" + person.getUid() + \",ou=people,\" + basedn);\n                    if (person_roles.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle roles as selected options\n                        person.setRoles((String[]) person_roles.toArray(new String[person_roles.size()]));\n                    }\n                    if (person_groups.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle groups as selected options\n                        person.setGroups((String[]) person_groups.toArray(new String[person_groups.size()]));\n                    }\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return person;\n    }\n\n    public Collection getPeople() {\n        //if (people == null) {\n        people = new ArrayList();\n        String[] at = { \"uid\", \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, at, \"(uid=*)\");\n        try {\n            cat.debug(\"People found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                String person_cn = null;\n                String person_uid = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_cn = (String) e.next();\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_uid = (String) e.next();\n                            }\n                        }\n                        if ((person_cn != null) && (person_uid != null)) {\n                            people.add(new Person(person_uid, person_cn));\n                            cat.debug(person_cn + \" (\" + person_uid + \") \");\n                            person_cn = null;\n                            person_uid = null;\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(people, new peopleComparator());\n        return people;\n    }\n\n    public Collection getRoles() {\n        //if (roles == null) {\n        roles = new ArrayList();\n        String[] at = { \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=roles,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Roles found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            String role_cn = (String) e.next();\n                            roles.add(new Role(role_cn));\n                            cat.debug(role_cn);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(roles, new roleComparator());\n        return roles;\n    }\n\n    public Collection getGroups() {\n        //if (groups == null) {\n        groups = new ArrayList();\n        String[] at = { \"cn\", \"ipHostNumber\" };\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Groups found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList group_ips = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            // ipHostNumber attribute is returned before the cn attribute for each group.\n                            // There can be 0 or more IP address ranges.\n                            if (attrib.getID().equals(\"ipHostNumber\")) {\n                                String group_ip = (String) e.next();\n                                cat.debug(group_ip);\n                                if (!group_ip.trim().equals(\"0\")) {\n                                    if (group_ips == null)\n                                        group_ips = new ArrayList();\n                                    group_ips.add(group_ip);\n                                }\n                            } else if (attrib.getID().equals(\"cn\")) {\n                                String group_cn = (String) e.next();\n                                groups.add(new Group(group_cn, group_ips));\n                                cat.debug(group_cn);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(groups, new groupComparator());\n        return groups;\n    }\n\n    public Group getGroup(String cn) {\n        Group grp = new Group(cn);\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, null, \"(cn=\" + cn + \")\");\n        try {\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                grp.addAllowedip((String) e.next());\n                            }\n                        }\n                    }\n                    // end for\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return grp;\n    }\n\n    public boolean addPerson(Person person) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            // was getting error code 8\n            dctx.bind(person.getDn(), person);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updatePerson(Person person, String olddn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            String newdn = person.getDn();\n            if (olddn.compareTo(newdn) != 0)\n                dctx.rename(olddn, newdn);\n            person.setAttributes();\n            dctx.modifyAttributes(newdn, DirContext.REPLACE_ATTRIBUTE, person.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deletePerson(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addRole(Role role) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(role.getDn(), role);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteRole(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addGroup(Group group) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(group.getDn(), group);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteGroup(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updateGroup(Group grp) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.modifyAttributes(grp.getDn(), DirContext.REPLACE_ATTRIBUTE, grp.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    class peopleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Person p0 = (Person) o0;\n            Person p1 = (Person) o1;\n            // compare cn first\n            int cnComp = p0.getCn().toUpperCase().compareTo(p1.getCn().toUpperCase());\n            if (cnComp != 0) {\n                return cnComp;\n            }\n            // if cn same then compare uids\n            int uidComp = p0.getUid().toUpperCase().compareTo(p1.getUid().toUpperCase());\n            return uidComp;\n        }\n    }\n\n    class roleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Role r0 = (Role) o0;\n            Role r1 = (Role) o1;\n            // compare cn\n            int cnComp = r0.getCn().toUpperCase().compareTo(r1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n\n    class groupComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Group g0 = (Group) o0;\n            Group g1 = (Group) o1;\n            // compare cn\n            int cnComp = g0.getCn().toUpperCase().compareTo(g1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LdapServiceTest3.java",
		"test_prompt": "// LdapServiceTest3.java\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LdapService}.\n* It contains ten unit test cases for the {@link LdapService#addRole(Role)} method.\n*/\nclass LdapServiceTest3 {"
	},
	{
		"original_code": "// LdapService.java\n/*\n *   CVS $Id: LdapService.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\n\n/**\n * @author gsharma\n *\n * LdapService is used as a service for the administrator\n * to retrieve and modify all the information stored\n * in an LDAP server.\n */\npublic class LdapService {\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(LdapService.class.getName());\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    private String basedn;\n\n    private List people;\n\n    private List roles;\n\n    private List groups;\n\n    private LdapContext dctx;\n\n    //SearchControls determines scope of search and what gets\n    private SearchControls ctls;\n\n    // returned as a result of the search.\n    public LdapService(LdapContext dctx) {\n        this.dctx = dctx;\n        init();\n    }\n\n    private void init() {\n        ctls = new SearchControls();\n        // read the configuration properties\n        cat.debug(\"loading properties from \" + configFile);\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        cat.debug(\"got properties \" + props);\n    }\n\n    private NamingEnumeration fetch(String namecontext, String[] attrIDs, String filter) {\n        NamingEnumeration answer = null;\n        try {\n            ctls.setReturningObjFlag(false);\n            // Specify the ids of the attributes to return\n            ctls.setReturningAttributes(attrIDs);\n            ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n            answer = dctx.search(namecontext, filter, ctls);\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return answer;\n    }\n\n    public Person getPerson(String uid) {\n        Person person = new Person();\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, null, \"(uid=\" + uid + \")\");\n        try {\n            cat.debug(\"Person found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList person_roles = new ArrayList();\n                ArrayList person_groups = new ArrayList();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setCn((String) e.next());\n                                cat.debug(\"cn: \" + person.getCn());\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setUid((String) e.next());\n                                cat.debug(\"uid: \" + person.getUid());\n                            }\n                        } else if (attrib.getID().equals(\"sn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setSn((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"givenName\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setGivenname((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"mail\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setEmail((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"telephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"facsimileTelephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setFaxTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"postalAddress\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPostalAddress((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"employeeType\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_roles.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ou\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_groups.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.addAllowedip((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5ValidStart\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassvalidstart((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxRenew\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassrenewal((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxLife\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                if (((String) e.next()).equals(\"-1\"))\n                                    person.setPasschange(\"yes\");\n                                else\n                                    person.setPasschange(\"no\");\n                            }\n                        }\n                    }\n                    // end for\n                    // set DN\n                    person.setDn(\"uid=\" + person.getUid() + \",ou=people,\" + basedn);\n                    if (person_roles.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle roles as selected options\n                        person.setRoles((String[]) person_roles.toArray(new String[person_roles.size()]));\n                    }\n                    if (person_groups.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle groups as selected options\n                        person.setGroups((String[]) person_groups.toArray(new String[person_groups.size()]));\n                    }\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return person;\n    }\n\n    public Collection getPeople() {\n        //if (people == null) {\n        people = new ArrayList();\n        String[] at = { \"uid\", \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, at, \"(uid=*)\");\n        try {\n            cat.debug(\"People found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                String person_cn = null;\n                String person_uid = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_cn = (String) e.next();\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_uid = (String) e.next();\n                            }\n                        }\n                        if ((person_cn != null) && (person_uid != null)) {\n                            people.add(new Person(person_uid, person_cn));\n                            cat.debug(person_cn + \" (\" + person_uid + \") \");\n                            person_cn = null;\n                            person_uid = null;\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(people, new peopleComparator());\n        return people;\n    }\n\n    public Collection getRoles() {\n        //if (roles == null) {\n        roles = new ArrayList();\n        String[] at = { \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=roles,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Roles found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            String role_cn = (String) e.next();\n                            roles.add(new Role(role_cn));\n                            cat.debug(role_cn);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(roles, new roleComparator());\n        return roles;\n    }\n\n    public Collection getGroups() {\n        //if (groups == null) {\n        groups = new ArrayList();\n        String[] at = { \"cn\", \"ipHostNumber\" };\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Groups found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList group_ips = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            // ipHostNumber attribute is returned before the cn attribute for each group.\n                            // There can be 0 or more IP address ranges.\n                            if (attrib.getID().equals(\"ipHostNumber\")) {\n                                String group_ip = (String) e.next();\n                                cat.debug(group_ip);\n                                if (!group_ip.trim().equals(\"0\")) {\n                                    if (group_ips == null)\n                                        group_ips = new ArrayList();\n                                    group_ips.add(group_ip);\n                                }\n                            } else if (attrib.getID().equals(\"cn\")) {\n                                String group_cn = (String) e.next();\n                                groups.add(new Group(group_cn, group_ips));\n                                cat.debug(group_cn);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(groups, new groupComparator());\n        return groups;\n    }\n\n    public Group getGroup(String cn) {\n        Group grp = new Group(cn);\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, null, \"(cn=\" + cn + \")\");\n        try {\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                grp.addAllowedip((String) e.next());\n                            }\n                        }\n                    }\n                    // end for\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return grp;\n    }\n\n    public boolean addPerson(Person person) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            // was getting error code 8\n            dctx.bind(person.getDn(), person);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updatePerson(Person person, String olddn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            String newdn = person.getDn();\n            if (olddn.compareTo(newdn) != 0)\n                dctx.rename(olddn, newdn);\n            person.setAttributes();\n            dctx.modifyAttributes(newdn, DirContext.REPLACE_ATTRIBUTE, person.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deletePerson(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addRole(Role role) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(role.getDn(), role);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteRole(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addGroup(Group group) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(group.getDn(), group);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteGroup(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updateGroup(Group grp) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.modifyAttributes(grp.getDn(), DirContext.REPLACE_ATTRIBUTE, grp.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    class peopleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Person p0 = (Person) o0;\n            Person p1 = (Person) o1;\n            // compare cn first\n            int cnComp = p0.getCn().toUpperCase().compareTo(p1.getCn().toUpperCase());\n            if (cnComp != 0) {\n                return cnComp;\n            }\n            // if cn same then compare uids\n            int uidComp = p0.getUid().toUpperCase().compareTo(p1.getUid().toUpperCase());\n            return uidComp;\n        }\n    }\n\n    class roleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Role r0 = (Role) o0;\n            Role r1 = (Role) o1;\n            // compare cn\n            int cnComp = r0.getCn().toUpperCase().compareTo(r1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n\n    class groupComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Group g0 = (Group) o0;\n            Group g1 = (Group) o1;\n            // compare cn\n            int cnComp = g0.getCn().toUpperCase().compareTo(g1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LdapServiceTest4.java",
		"test_prompt": "// LdapServiceTest4.java\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LdapService}.\n* It contains ten unit test cases for the {@link LdapService#deleteRole(String)} method.\n*/\nclass LdapServiceTest4 {"
	},
	{
		"original_code": "// LdapService.java\n/*\n *   CVS $Id: LdapService.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\n\n/**\n * @author gsharma\n *\n * LdapService is used as a service for the administrator\n * to retrieve and modify all the information stored\n * in an LDAP server.\n */\npublic class LdapService {\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(LdapService.class.getName());\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    private String basedn;\n\n    private List people;\n\n    private List roles;\n\n    private List groups;\n\n    private LdapContext dctx;\n\n    //SearchControls determines scope of search and what gets\n    private SearchControls ctls;\n\n    // returned as a result of the search.\n    public LdapService(LdapContext dctx) {\n        this.dctx = dctx;\n        init();\n    }\n\n    private void init() {\n        ctls = new SearchControls();\n        // read the configuration properties\n        cat.debug(\"loading properties from \" + configFile);\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        cat.debug(\"got properties \" + props);\n    }\n\n    private NamingEnumeration fetch(String namecontext, String[] attrIDs, String filter) {\n        NamingEnumeration answer = null;\n        try {\n            ctls.setReturningObjFlag(false);\n            // Specify the ids of the attributes to return\n            ctls.setReturningAttributes(attrIDs);\n            ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n            answer = dctx.search(namecontext, filter, ctls);\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return answer;\n    }\n\n    public Person getPerson(String uid) {\n        Person person = new Person();\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, null, \"(uid=\" + uid + \")\");\n        try {\n            cat.debug(\"Person found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList person_roles = new ArrayList();\n                ArrayList person_groups = new ArrayList();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setCn((String) e.next());\n                                cat.debug(\"cn: \" + person.getCn());\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setUid((String) e.next());\n                                cat.debug(\"uid: \" + person.getUid());\n                            }\n                        } else if (attrib.getID().equals(\"sn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setSn((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"givenName\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setGivenname((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"mail\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setEmail((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"telephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"facsimileTelephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setFaxTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"postalAddress\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPostalAddress((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"employeeType\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_roles.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ou\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_groups.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.addAllowedip((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5ValidStart\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassvalidstart((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxRenew\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassrenewal((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxLife\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                if (((String) e.next()).equals(\"-1\"))\n                                    person.setPasschange(\"yes\");\n                                else\n                                    person.setPasschange(\"no\");\n                            }\n                        }\n                    }\n                    // end for\n                    // set DN\n                    person.setDn(\"uid=\" + person.getUid() + \",ou=people,\" + basedn);\n                    if (person_roles.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle roles as selected options\n                        person.setRoles((String[]) person_roles.toArray(new String[person_roles.size()]));\n                    }\n                    if (person_groups.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle groups as selected options\n                        person.setGroups((String[]) person_groups.toArray(new String[person_groups.size()]));\n                    }\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return person;\n    }\n\n    public Collection getPeople() {\n        //if (people == null) {\n        people = new ArrayList();\n        String[] at = { \"uid\", \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, at, \"(uid=*)\");\n        try {\n            cat.debug(\"People found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                String person_cn = null;\n                String person_uid = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_cn = (String) e.next();\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_uid = (String) e.next();\n                            }\n                        }\n                        if ((person_cn != null) && (person_uid != null)) {\n                            people.add(new Person(person_uid, person_cn));\n                            cat.debug(person_cn + \" (\" + person_uid + \") \");\n                            person_cn = null;\n                            person_uid = null;\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(people, new peopleComparator());\n        return people;\n    }\n\n    public Collection getRoles() {\n        //if (roles == null) {\n        roles = new ArrayList();\n        String[] at = { \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=roles,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Roles found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            String role_cn = (String) e.next();\n                            roles.add(new Role(role_cn));\n                            cat.debug(role_cn);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(roles, new roleComparator());\n        return roles;\n    }\n\n    public Collection getGroups() {\n        //if (groups == null) {\n        groups = new ArrayList();\n        String[] at = { \"cn\", \"ipHostNumber\" };\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Groups found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList group_ips = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            // ipHostNumber attribute is returned before the cn attribute for each group.\n                            // There can be 0 or more IP address ranges.\n                            if (attrib.getID().equals(\"ipHostNumber\")) {\n                                String group_ip = (String) e.next();\n                                cat.debug(group_ip);\n                                if (!group_ip.trim().equals(\"0\")) {\n                                    if (group_ips == null)\n                                        group_ips = new ArrayList();\n                                    group_ips.add(group_ip);\n                                }\n                            } else if (attrib.getID().equals(\"cn\")) {\n                                String group_cn = (String) e.next();\n                                groups.add(new Group(group_cn, group_ips));\n                                cat.debug(group_cn);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(groups, new groupComparator());\n        return groups;\n    }\n\n    public Group getGroup(String cn) {\n        Group grp = new Group(cn);\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, null, \"(cn=\" + cn + \")\");\n        try {\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                grp.addAllowedip((String) e.next());\n                            }\n                        }\n                    }\n                    // end for\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return grp;\n    }\n\n    public boolean addPerson(Person person) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            // was getting error code 8\n            dctx.bind(person.getDn(), person);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updatePerson(Person person, String olddn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            String newdn = person.getDn();\n            if (olddn.compareTo(newdn) != 0)\n                dctx.rename(olddn, newdn);\n            person.setAttributes();\n            dctx.modifyAttributes(newdn, DirContext.REPLACE_ATTRIBUTE, person.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deletePerson(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addRole(Role role) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(role.getDn(), role);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteRole(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addGroup(Group group) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(group.getDn(), group);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteGroup(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updateGroup(Group grp) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.modifyAttributes(grp.getDn(), DirContext.REPLACE_ATTRIBUTE, grp.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    class peopleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Person p0 = (Person) o0;\n            Person p1 = (Person) o1;\n            // compare cn first\n            int cnComp = p0.getCn().toUpperCase().compareTo(p1.getCn().toUpperCase());\n            if (cnComp != 0) {\n                return cnComp;\n            }\n            // if cn same then compare uids\n            int uidComp = p0.getUid().toUpperCase().compareTo(p1.getUid().toUpperCase());\n            return uidComp;\n        }\n    }\n\n    class roleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Role r0 = (Role) o0;\n            Role r1 = (Role) o1;\n            // compare cn\n            int cnComp = r0.getCn().toUpperCase().compareTo(r1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n\n    class groupComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Group g0 = (Group) o0;\n            Group g1 = (Group) o1;\n            // compare cn\n            int cnComp = g0.getCn().toUpperCase().compareTo(g1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LdapServiceTest5.java",
		"test_prompt": "// LdapServiceTest5.java\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LdapService}.\n* It contains ten unit test cases for the {@link LdapService#addGroup(Group)} method.\n*/\nclass LdapServiceTest5 {"
	},
	{
		"original_code": "// LdapService.java\n/*\n *   CVS $Id: LdapService.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\n\n/**\n * @author gsharma\n *\n * LdapService is used as a service for the administrator\n * to retrieve and modify all the information stored\n * in an LDAP server.\n */\npublic class LdapService {\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(LdapService.class.getName());\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    private String basedn;\n\n    private List people;\n\n    private List roles;\n\n    private List groups;\n\n    private LdapContext dctx;\n\n    //SearchControls determines scope of search and what gets\n    private SearchControls ctls;\n\n    // returned as a result of the search.\n    public LdapService(LdapContext dctx) {\n        this.dctx = dctx;\n        init();\n    }\n\n    private void init() {\n        ctls = new SearchControls();\n        // read the configuration properties\n        cat.debug(\"loading properties from \" + configFile);\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        cat.debug(\"got properties \" + props);\n    }\n\n    private NamingEnumeration fetch(String namecontext, String[] attrIDs, String filter) {\n        NamingEnumeration answer = null;\n        try {\n            ctls.setReturningObjFlag(false);\n            // Specify the ids of the attributes to return\n            ctls.setReturningAttributes(attrIDs);\n            ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n            answer = dctx.search(namecontext, filter, ctls);\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return answer;\n    }\n\n    public Person getPerson(String uid) {\n        Person person = new Person();\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, null, \"(uid=\" + uid + \")\");\n        try {\n            cat.debug(\"Person found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList person_roles = new ArrayList();\n                ArrayList person_groups = new ArrayList();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setCn((String) e.next());\n                                cat.debug(\"cn: \" + person.getCn());\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setUid((String) e.next());\n                                cat.debug(\"uid: \" + person.getUid());\n                            }\n                        } else if (attrib.getID().equals(\"sn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setSn((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"givenName\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setGivenname((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"mail\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setEmail((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"telephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"facsimileTelephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setFaxTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"postalAddress\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPostalAddress((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"employeeType\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_roles.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ou\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_groups.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.addAllowedip((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5ValidStart\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassvalidstart((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxRenew\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassrenewal((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxLife\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                if (((String) e.next()).equals(\"-1\"))\n                                    person.setPasschange(\"yes\");\n                                else\n                                    person.setPasschange(\"no\");\n                            }\n                        }\n                    }\n                    // end for\n                    // set DN\n                    person.setDn(\"uid=\" + person.getUid() + \",ou=people,\" + basedn);\n                    if (person_roles.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle roles as selected options\n                        person.setRoles((String[]) person_roles.toArray(new String[person_roles.size()]));\n                    }\n                    if (person_groups.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle groups as selected options\n                        person.setGroups((String[]) person_groups.toArray(new String[person_groups.size()]));\n                    }\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return person;\n    }\n\n    public Collection getPeople() {\n        //if (people == null) {\n        people = new ArrayList();\n        String[] at = { \"uid\", \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, at, \"(uid=*)\");\n        try {\n            cat.debug(\"People found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                String person_cn = null;\n                String person_uid = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_cn = (String) e.next();\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_uid = (String) e.next();\n                            }\n                        }\n                        if ((person_cn != null) && (person_uid != null)) {\n                            people.add(new Person(person_uid, person_cn));\n                            cat.debug(person_cn + \" (\" + person_uid + \") \");\n                            person_cn = null;\n                            person_uid = null;\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(people, new peopleComparator());\n        return people;\n    }\n\n    public Collection getRoles() {\n        //if (roles == null) {\n        roles = new ArrayList();\n        String[] at = { \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=roles,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Roles found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            String role_cn = (String) e.next();\n                            roles.add(new Role(role_cn));\n                            cat.debug(role_cn);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(roles, new roleComparator());\n        return roles;\n    }\n\n    public Collection getGroups() {\n        //if (groups == null) {\n        groups = new ArrayList();\n        String[] at = { \"cn\", \"ipHostNumber\" };\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Groups found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList group_ips = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            // ipHostNumber attribute is returned before the cn attribute for each group.\n                            // There can be 0 or more IP address ranges.\n                            if (attrib.getID().equals(\"ipHostNumber\")) {\n                                String group_ip = (String) e.next();\n                                cat.debug(group_ip);\n                                if (!group_ip.trim().equals(\"0\")) {\n                                    if (group_ips == null)\n                                        group_ips = new ArrayList();\n                                    group_ips.add(group_ip);\n                                }\n                            } else if (attrib.getID().equals(\"cn\")) {\n                                String group_cn = (String) e.next();\n                                groups.add(new Group(group_cn, group_ips));\n                                cat.debug(group_cn);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(groups, new groupComparator());\n        return groups;\n    }\n\n    public Group getGroup(String cn) {\n        Group grp = new Group(cn);\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, null, \"(cn=\" + cn + \")\");\n        try {\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                grp.addAllowedip((String) e.next());\n                            }\n                        }\n                    }\n                    // end for\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return grp;\n    }\n\n    public boolean addPerson(Person person) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            // was getting error code 8\n            dctx.bind(person.getDn(), person);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updatePerson(Person person, String olddn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            String newdn = person.getDn();\n            if (olddn.compareTo(newdn) != 0)\n                dctx.rename(olddn, newdn);\n            person.setAttributes();\n            dctx.modifyAttributes(newdn, DirContext.REPLACE_ATTRIBUTE, person.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deletePerson(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addRole(Role role) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(role.getDn(), role);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteRole(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addGroup(Group group) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(group.getDn(), group);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteGroup(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updateGroup(Group grp) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.modifyAttributes(grp.getDn(), DirContext.REPLACE_ATTRIBUTE, grp.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    class peopleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Person p0 = (Person) o0;\n            Person p1 = (Person) o1;\n            // compare cn first\n            int cnComp = p0.getCn().toUpperCase().compareTo(p1.getCn().toUpperCase());\n            if (cnComp != 0) {\n                return cnComp;\n            }\n            // if cn same then compare uids\n            int uidComp = p0.getUid().toUpperCase().compareTo(p1.getUid().toUpperCase());\n            return uidComp;\n        }\n    }\n\n    class roleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Role r0 = (Role) o0;\n            Role r1 = (Role) o1;\n            // compare cn\n            int cnComp = r0.getCn().toUpperCase().compareTo(r1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n\n    class groupComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Group g0 = (Group) o0;\n            Group g1 = (Group) o1;\n            // compare cn\n            int cnComp = g0.getCn().toUpperCase().compareTo(g1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LdapServiceTest6.java",
		"test_prompt": "// LdapServiceTest6.java\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LdapService}.\n* It contains ten unit test cases for the {@link LdapService#deleteGroup(String)} method.\n*/\nclass LdapServiceTest6 {"
	},
	{
		"original_code": "// LdapService.java\n/*\n *   CVS $Id: LdapService.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\n\n/**\n * @author gsharma\n *\n * LdapService is used as a service for the administrator\n * to retrieve and modify all the information stored\n * in an LDAP server.\n */\npublic class LdapService {\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(LdapService.class.getName());\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    private String basedn;\n\n    private List people;\n\n    private List roles;\n\n    private List groups;\n\n    private LdapContext dctx;\n\n    //SearchControls determines scope of search and what gets\n    private SearchControls ctls;\n\n    // returned as a result of the search.\n    public LdapService(LdapContext dctx) {\n        this.dctx = dctx;\n        init();\n    }\n\n    private void init() {\n        ctls = new SearchControls();\n        // read the configuration properties\n        cat.debug(\"loading properties from \" + configFile);\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        cat.debug(\"got properties \" + props);\n    }\n\n    private NamingEnumeration fetch(String namecontext, String[] attrIDs, String filter) {\n        NamingEnumeration answer = null;\n        try {\n            ctls.setReturningObjFlag(false);\n            // Specify the ids of the attributes to return\n            ctls.setReturningAttributes(attrIDs);\n            ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n            answer = dctx.search(namecontext, filter, ctls);\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return answer;\n    }\n\n    public Person getPerson(String uid) {\n        Person person = new Person();\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, null, \"(uid=\" + uid + \")\");\n        try {\n            cat.debug(\"Person found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList person_roles = new ArrayList();\n                ArrayList person_groups = new ArrayList();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setCn((String) e.next());\n                                cat.debug(\"cn: \" + person.getCn());\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setUid((String) e.next());\n                                cat.debug(\"uid: \" + person.getUid());\n                            }\n                        } else if (attrib.getID().equals(\"sn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setSn((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"givenName\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setGivenname((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"mail\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setEmail((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"telephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"facsimileTelephoneNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setFaxTelephoneNumber((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"postalAddress\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPostalAddress((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"employeeType\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_roles.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ou\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_groups.add((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.addAllowedip((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5ValidStart\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassvalidstart((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxRenew\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person.setPassrenewal((String) e.next());\n                            }\n                        } else if (attrib.getID().equals(\"krb5MaxLife\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                if (((String) e.next()).equals(\"-1\"))\n                                    person.setPasschange(\"yes\");\n                                else\n                                    person.setPasschange(\"no\");\n                            }\n                        }\n                    }\n                    // end for\n                    // set DN\n                    person.setDn(\"uid=\" + person.getUid() + \",ou=people,\" + basedn);\n                    if (person_roles.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle roles as selected options\n                        person.setRoles((String[]) person_roles.toArray(new String[person_roles.size()]));\n                    }\n                    if (person_groups.size() > 0) {\n                        // Convert ArrayList to String[] for forms to handle groups as selected options\n                        person.setGroups((String[]) person_groups.toArray(new String[person_groups.size()]));\n                    }\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return person;\n    }\n\n    public Collection getPeople() {\n        //if (people == null) {\n        people = new ArrayList();\n        String[] at = { \"uid\", \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=people,\" + basedn, at, \"(uid=*)\");\n        try {\n            cat.debug(\"People found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                String person_cn = null;\n                String person_uid = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_cn = (String) e.next();\n                            }\n                        } else if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                person_uid = (String) e.next();\n                            }\n                        }\n                        if ((person_cn != null) && (person_uid != null)) {\n                            people.add(new Person(person_uid, person_cn));\n                            cat.debug(person_cn + \" (\" + person_uid + \") \");\n                            person_cn = null;\n                            person_uid = null;\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(people, new peopleComparator());\n        return people;\n    }\n\n    public Collection getRoles() {\n        //if (roles == null) {\n        roles = new ArrayList();\n        String[] at = { \"cn\" };\n        NamingEnumeration answer = fetch(\"ou=roles,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Roles found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            String role_cn = (String) e.next();\n                            roles.add(new Role(role_cn));\n                            cat.debug(role_cn);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(roles, new roleComparator());\n        return roles;\n    }\n\n    public Collection getGroups() {\n        //if (groups == null) {\n        groups = new ArrayList();\n        String[] at = { \"cn\", \"ipHostNumber\" };\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, at, \"(cn=*)\");\n        try {\n            cat.debug(\"Groups found:\");\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                ArrayList group_ips = null;\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                            // ipHostNumber attribute is returned before the cn attribute for each group.\n                            // There can be 0 or more IP address ranges.\n                            if (attrib.getID().equals(\"ipHostNumber\")) {\n                                String group_ip = (String) e.next();\n                                cat.debug(group_ip);\n                                if (!group_ip.trim().equals(\"0\")) {\n                                    if (group_ips == null)\n                                        group_ips = new ArrayList();\n                                    group_ips.add(group_ip);\n                                }\n                            } else if (attrib.getID().equals(\"cn\")) {\n                                String group_cn = (String) e.next();\n                                groups.add(new Group(group_cn, group_ips));\n                                cat.debug(group_cn);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //}\n        Collections.sort(groups, new groupComparator());\n        return groups;\n    }\n\n    public Group getGroup(String cn) {\n        Group grp = new Group(cn);\n        NamingEnumeration answer = fetch(\"ou=groups,\" + basedn, null, \"(cn=\" + cn + \")\");\n        try {\n            while (answer.hasMore()) {\n                SearchResult sr = (SearchResult) answer.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (NamingEnumeration naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                grp.addAllowedip((String) e.next());\n                            }\n                        }\n                    }\n                    // end for\n                }\n                // end else\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return grp;\n    }\n\n    public boolean addPerson(Person person) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            // was getting error code 8\n            dctx.bind(person.getDn(), person);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updatePerson(Person person, String olddn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            String newdn = person.getDn();\n            if (olddn.compareTo(newdn) != 0)\n                dctx.rename(olddn, newdn);\n            person.setAttributes();\n            dctx.modifyAttributes(newdn, DirContext.REPLACE_ATTRIBUTE, person.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deletePerson(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addRole(Role role) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(role.getDn(), role);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteRole(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean addGroup(Group group) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.bind(group.getDn(), group);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean deleteGroup(String dn) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.destroySubcontext(dn);\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean updateGroup(Group grp) {\n        // for now we are using simple authentication for LDAP since there seems to be the following\n        // error with GSSAPI authentication (which works for search) while requesting a modification to LDAP:\n        // javax.naming.AuthenticationNotSupportedException:\n        // [LDAP: error code 8 - modifications require authentication]\n        // Awaiting reply from mailing lists.\n        //String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n        //String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        // Set up the environment for creating the initial context\n        //Hashtable env = new Hashtable(11);\n        //env.put(Context.INITIAL_CONTEXT_FACTORY,\n        //    \"com.sun.jndi.ldap.LdapCtxFactory\");\n        //env.put(Context.PROVIDER_URL, ldapurl);\n        //env.put(Context.SECURITY_AUTHENTICATION,\"simple\");\n        //env.put(Context.SECURITY_PRINCIPAL,\"cn=xxx,dc=arch,dc=org\"); // specify the username\n        //env.put(Context.SECURITY_CREDENTIALS,\"secret\");           // specify the password\n        try {\n            // Create the initial context\n            //LdapContext ctx = new InitialLdapContext(env,null);\n            dctx.modifyAttributes(grp.getDn(), DirContext.REPLACE_ATTRIBUTE, grp.getAttributes());\n            return true;\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n            return false;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    class peopleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Person p0 = (Person) o0;\n            Person p1 = (Person) o1;\n            // compare cn first\n            int cnComp = p0.getCn().toUpperCase().compareTo(p1.getCn().toUpperCase());\n            if (cnComp != 0) {\n                return cnComp;\n            }\n            // if cn same then compare uids\n            int uidComp = p0.getUid().toUpperCase().compareTo(p1.getUid().toUpperCase());\n            return uidComp;\n        }\n    }\n\n    class roleComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Role r0 = (Role) o0;\n            Role r1 = (Role) o1;\n            // compare cn\n            int cnComp = r0.getCn().toUpperCase().compareTo(r1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n\n    class groupComparator implements Comparator {\n\n        public int compare(Object o0, Object o1) {\n            Group g0 = (Group) o0;\n            Group g1 = (Group) o1;\n            // compare cn\n            int cnComp = g0.getCn().toUpperCase().compareTo(g1.getCn().toUpperCase());\n            return cnComp;\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LdapServiceTest7.java",
		"test_prompt": "// LdapServiceTest7.java\npackage com.browsersoft.aacs;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Hashtable;\nimport java.util.List;\nimport java.util.Properties;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LdapService}.\n* It contains ten unit test cases for the {@link LdapService#updateGroup(Group)} method.\n*/\nclass LdapServiceTest7 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest0.java",
		"test_prompt": "// PersonTest0.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#createSubcontext(Name, Attributes)} method.\n*/\nclass PersonTest0 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest1.java",
		"test_prompt": "// PersonTest1.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#createSubcontext(String, Attributes)} method.\n*/\nclass PersonTest1 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest2.java",
		"test_prompt": "// PersonTest2.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#search(Name, Attributes)} method.\n*/\nclass PersonTest2 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest3.java",
		"test_prompt": "// PersonTest3.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#search(Name, Attributes, String[])} method.\n*/\nclass PersonTest3 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest4.java",
		"test_prompt": "// PersonTest4.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#search(Name, String, Object[], SearchControls)} method.\n*/\nclass PersonTest4 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest5.java",
		"test_prompt": "// PersonTest5.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#search(Name, String, SearchControls)} method.\n*/\nclass PersonTest5 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest6.java",
		"test_prompt": "// PersonTest6.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#search(String, Attributes)} method.\n*/\nclass PersonTest6 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest7.java",
		"test_prompt": "// PersonTest7.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#search(String, Attributes, String[])} method.\n*/\nclass PersonTest7 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest8.java",
		"test_prompt": "// PersonTest8.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#search(String, String, Object[], SearchControls)} method.\n*/\nclass PersonTest8 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest9.java",
		"test_prompt": "// PersonTest9.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#search(String, String, SearchControls)} method.\n*/\nclass PersonTest9 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest10.java",
		"test_prompt": "// PersonTest10.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#addToEnvironment(String, Object)} method.\n*/\nclass PersonTest10 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest11.java",
		"test_prompt": "// PersonTest11.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#composeName(Name, Name)} method.\n*/\nclass PersonTest11 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest12.java",
		"test_prompt": "// PersonTest12.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#composeName(String, String)} method.\n*/\nclass PersonTest12 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest13.java",
		"test_prompt": "// PersonTest13.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#createSubcontext(Name)} method.\n*/\nclass PersonTest13 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest14.java",
		"test_prompt": "// PersonTest14.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#createSubcontext(String)} method.\n*/\nclass PersonTest14 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest15.java",
		"test_prompt": "// PersonTest15.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#list(Name)} method.\n*/\nclass PersonTest15 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest16.java",
		"test_prompt": "// PersonTest16.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#list(String)} method.\n*/\nclass PersonTest16 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest17.java",
		"test_prompt": "// PersonTest17.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#listBindings(Name)} method.\n*/\nclass PersonTest17 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest18.java",
		"test_prompt": "// PersonTest18.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#listBindings(String)} method.\n*/\nclass PersonTest18 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest19.java",
		"test_prompt": "// PersonTest19.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#lookup(Name)} method.\n*/\nclass PersonTest19 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest20.java",
		"test_prompt": "// PersonTest20.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#lookup(String)} method.\n*/\nclass PersonTest20 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest21.java",
		"test_prompt": "// PersonTest21.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#lookupLink(Name)} method.\n*/\nclass PersonTest21 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest22.java",
		"test_prompt": "// PersonTest22.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#lookupLink(String)} method.\n*/\nclass PersonTest22 {"
	},
	{
		"original_code": "// Person.java\n/*\n *   CVS $Id: Person.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class Person implements DirContext {\n\n    // LDAP uid\n    private String uid;\n\n    // fully qualified id including the LDAP domain name\n    private String id;\n\n    // complete name\n    private String cn;\n\n    // LDAP distinguished name\n    private String dn;\n\n    // surname\n    private String sn;\n\n    // first name\n    private String givenname;\n\n    //email address\n    private String email;\n\n    private String telephoneNumber;\n\n    private String faxTelephoneNumber;\n\n    private String postalAddress;\n\n    private String[] roles;\n\n    private String[] groups;\n\n    private String passvalidstart = \"\";\n\n    private String passrenewal = \"\";\n\n    private String passchange = \"\";\n\n    private String allowedips;\n\n    private String domain;\n\n    private String basedn;\n\n    private String krbrealm;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    // Date format used by OpenHRE\n    private static String appDateFormat = \"MM/dd/yyyy\";\n\n    // LDAP GeneralizedTime Format\n    private static String ldapGTFormat = \"yyyyMMddHHmmssZ\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    // Attribute Set for roles\n    Attribute etSet = new BasicAttribute(\"employeeType\");\n\n    // Attribute Set for groups\n    Attribute ouSet = new BasicAttribute(\"ou\");\n\n    // Attribute Set for allowed IP addresses\n    Attribute ipSet = new BasicAttribute(\"ipHostNumber\");\n\n    // default constructor\n    public Person() {\n        init();\n    }\n\n    public Person(String uid, String cn) {\n        init();\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.cn = cn;\n    }\n\n    public Person(String uid, String givenname, String sn, String email, String[] roles, String[] groups, String passvalidstart, String passrenewal, String passchange, String allowedips, String tel, String fax, String postalAddr) {\n        init();\n        this.dn = \"uid=\" + uid + \",ou=people,\" + basedn;\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n        this.sn = sn;\n        this.givenname = givenname;\n        this.cn = givenname + \" \" + sn;\n        this.email = email;\n        this.telephoneNumber = tel;\n        this.faxTelephoneNumber = fax;\n        this.postalAddress = postalAddr;\n        this.roles = roles;\n        this.groups = groups;\n        this.passvalidstart = passvalidstart;\n        this.passrenewal = passrenewal;\n        this.passchange = passchange;\n        this.allowedips = allowedips;\n        setAttributes();\n    }\n\n    private void init() {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        krbrealm = props.getProperty(\"krbrealm\", \"<YOUR-KRB-REALM>\");\n        domain = basedn.trim().replaceAll(\"dc=\", \"\");\n        domain = domain.replaceAll(\",\", \".\");\n    }\n\n    public void setAttributes() {\n        oc.add(\"inetOrgPerson\");\n        oc.add(\"organizationalPerson\");\n        oc.add(\"person\");\n        oc.add(\"krb5Principal\");\n        oc.add(\"krb5KDCEntry\");\n        oc.add(\"ipHost\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"uid\", uid);\n        myAttrs.put(\"cn\", cn);\n        myAttrs.put(\"sn\", sn);\n        myAttrs.put(\"givenname\", givenname);\n        myAttrs.put(\"mail\", email);\n        myAttrs.put(\"krb5PrincipalName\", uid + \"@\" + krbrealm);\n        myAttrs.put(\"krb5KeyVersionNumber\", \"1\");\n        // This attribute will force the user to change the password before using the system\n        // when the administrator creates the user or resets his/her password\n        if (passchange.equals(\"yes\"))\n            myAttrs.put(\"krb5MaxLife\", \"-1\");\n        else if (passchange.equals(\"no\"))\n            myAttrs.put(\"krb5MaxLife\", \"0\");\n        // krb5ValidStart will keep on changing whenever user updates his/her password.\n        // krb5MaxRenew contains days after the krb5ValidStart, after which the user will\n        // be forced to update his/her password.\n        if (!passvalidstart.trim().equals(\"\")) {\n            String pwvalstart = convertDateToUTC(passvalidstart);\n            myAttrs.put(\"krb5ValidStart\", pwvalstart);\n            if (!passrenewal.trim().equals(\"\"))\n                myAttrs.put(\"krb5MaxRenew\", passrenewal);\n            else\n                myAttrs.put(\"krb5MaxRenew\", \"-1\");\n        }\n        // Add all the roles\n        for (int i = 0; i < roles.length; i++) etSet.add(roles[i]);\n        myAttrs.put(etSet);\n        // Add all the groups\n        for (int i = 0; i < groups.length; i++) {\n            if (groups[i].toString().equals(\"None\")) {\n                ouSet.clear();\n                // To avoid invalid LDAP value exception while adding\n                ouSet.add(\" \");\n                break;\n            }\n            ouSet.add(groups[i]);\n        }\n        myAttrs.put(ouSet);\n        // Add allowed IP addresses (if any)\n        if (allowedips.length() > 1) {\n            StringTokenizer st = new StringTokenizer(allowedips, \"\\n\");\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken().trim().replaceAll(\"\\n\", \"\");\n                ip = ip.replaceAll(\"\\t\", \"\");\n                ip = ip.replaceAll(\" \", \"\");\n                ipSet.add(ip);\n            }\n        } else\n            ipSet.add(\"0\");\n        myAttrs.put(ipSet);\n        if (telephoneNumber.length() > 1)\n            myAttrs.put(\"telephoneNumber\", telephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"telephoneNumber\", \"0\");\n        if (faxTelephoneNumber.length() > 1)\n            myAttrs.put(\"facsimileTelephoneNumber\", faxTelephoneNumber);\n        else\n            // Due to LDAP schema numerical value constraint\n            myAttrs.put(\"facsimileTelephoneNumber\", \"0\");\n        myAttrs.put(\"postalAddress\", postalAddress);\n    }\n\n    private String convertDateToUTC(String specdatetime) {\n        // Convert date and time from local time to UTC time\n        // and convert to LDAP GeneralizedTime format (for eg. 20040101000000+0000)\n        TimeZone utc = TimeZone.getTimeZone(\"UTC\");\n        SimpleDateFormat df1 = new SimpleDateFormat(ldapGTFormat);\n        df1.setTimeZone(utc);\n        SimpleDateFormat df2 = new SimpleDateFormat(appDateFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    private String convertDateFromUTC(String specdatetime) {\n        // Extract from LDAP GeneralizedTime format and Convert date\n        // and time from UTC time to local time\n        TimeZone localtime = TimeZone.getDefault();\n        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);\n        df1.setTimeZone(localtime);\n        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);\n        Date specdate = null;\n        try {\n            specdate = df2.parse(specdatetime);\n        } catch (ParseException pe) {\n            pe.printStackTrace();\n        }\n        return df1.format(specdate);\n    }\n\n    public String getUid() {\n        return uid;\n    }\n\n    public void setUid(String uid) {\n        this.uid = uid;\n        this.id = uid + \"@\" + domain;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    public String getSn() {\n        return sn;\n    }\n\n    public void setSn(String sn) {\n        this.sn = sn;\n    }\n\n    public String getGivenname() {\n        return givenname;\n    }\n\n    public void setGivenname(String givenname) {\n        this.givenname = givenname;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getTelephoneNumber() {\n        return telephoneNumber;\n    }\n\n    public void setTelephoneNumber(String telephoneNumber) {\n        this.telephoneNumber = telephoneNumber;\n    }\n\n    public String getFaxTelephoneNumber() {\n        return faxTelephoneNumber;\n    }\n\n    public void setFaxTelephoneNumber(String faxTelephoneNumber) {\n        this.faxTelephoneNumber = faxTelephoneNumber;\n    }\n\n    public String getPostalAddress() {\n        return postalAddress;\n    }\n\n    public void setPostalAddress(String postalAddress) {\n        this.postalAddress = postalAddress;\n    }\n\n    public String[] getRoles() {\n        return roles;\n    }\n\n    public void setRoles(String[] roles) {\n        this.roles = roles;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public String getPassvalidstart() {\n        return passvalidstart;\n    }\n\n    public void setPassvalidstart(String passvalidstart) {\n        this.passvalidstart = convertDateFromUTC(passvalidstart);\n    }\n\n    public String getPassrenewal() {\n        return passrenewal;\n    }\n\n    public void setPassrenewal(String passrenewal) {\n        this.passrenewal = passrenewal;\n    }\n\n    public String getPasschange() {\n        return passchange;\n    }\n\n    public void setPasschange(String passchange) {\n        this.passchange = passchange;\n    }\n\n    public String getAllowedips() {\n        return allowedips;\n    }\n\n    public void addAllowedip(String allowed_ip) {\n        if (allowedips == null)\n            allowedips = \"\";\n        if (!allowed_ip.equals(\"0\")) {\n            if (allowedips.equals(\"\"))\n                allowedips = allowed_ip;\n            else\n                allowedips = allowedips + \"\\n\" + allowed_ip;\n        }\n    }\n\n    public Attributes getAttributes() throws NamingException {\n        return myAttrs;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/PersonTest23.java",
		"test_prompt": "// PersonTest23.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.StringTokenizer;\nimport java.util.TimeZone;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Person}.\n* It contains ten unit test cases for the {@link Person#removeFromEnvironment(String)} method.\n*/\nclass PersonTest23 {"
	},
	{
		"original_code": "// LdapFetch.java\n/*\n *   CVS $Id: LdapFetch.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.security.PrivilegedAction;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\nimport javax.naming.ldap.StartTlsRequest;\nimport javax.naming.ldap.StartTlsResponse;\nimport javax.net.ssl.SSLSession;\nimport javax.security.auth.Subject;\n\n/**\n * @author gsharma\n *\n * LdapFetch is used to retrieve user details from a LDAP server\n * including his/her roles and priviledges,\n * for XACML based access control.\n */\npublic class LdapFetch implements PrivilegedAction {\n\n    private Subject subjct;\n\n    private User user;\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(LdapFetch.class.getName());\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    public LdapFetch(Subject subj, User usr) {\n        subjct = subj;\n        user = usr;\n    }\n\n    public Object run() {\n        try {\n            // read the configuration properties\n            Login.loadProperties(props, configFile);\n            String ldapurl = props.getProperty(\"ldapurl\", \"ldap://someldapserver.com:389\");\n            String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n            String mutualauth = props.getProperty(\"mutualauth\", \"false\");\n            String truststore = props.getProperty(\"truststore\", \"open.keystore\");\n            String starttls = props.getProperty(\"starttls\", \"yes\");\n            //System.setProperty(\"javax.net.ssl.trustStore\", \"C:\\\\openhre.keystore\");\n            System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n            // Set up the environment for creating the initial context\n            Hashtable env = new Hashtable(11);\n            env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            env.put(Context.PROVIDER_URL, ldapurl);\n            // Request the use of the \"GSSAPI\" SASL mechanism\n            // Authenticate by using already established Kerberos credentials\n            env.put(Context.SECURITY_AUTHENTICATION, \"GSSAPI\");\n            //env.put(\"javax.security.sasl.server.authentication\", mutualauth); //mutual authentication\n            // Set authzId = u:<username>, since OpenLDAP expects SASL to provide authzId of the form\n            // u:<username> or dn:<LDAP-DN>\n            Set princs = subjct.getPrincipals();\n            Iterator princs_iter = princs.iterator();\n            String princ_name = \"\";\n            if (princs_iter.hasNext()) {\n                princ_name = princs_iter.next().toString().trim();\n                int indx = princ_name.indexOf(\"@\");\n                princ_name = princ_name.substring(0, indx);\n            }\n            String authzId = \"u:\" + princ_name;\n            cat.debug(\"AuthzID: \" + authzId);\n            env.put(\"java.naming.security.sasl.authorizationId\", authzId);\n            // Create the initial context\n            LdapContext dctx = new InitialLdapContext(env, null);\n            user.setLdapContext(dctx);\n            if (starttls.toLowerCase().equals(\"yes\")) {\n                // Start TLS\n                cat.info(\"Starting TLS\");\n                StartTlsResponse tls = (StartTlsResponse) dctx.extendedOperation(new StartTlsRequest());\n                SSLSession sess = tls.negotiate();\n            } else\n                cat.info(\"No TLS support\");\n            // Search all entries.\tSearchControls determines scope of search and what gets\n            // returned as a result of the search.\n            SearchControls ctls = new SearchControls();\n            ctls.setReturningObjFlag(false);\n            ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n            String filter = \"(uid=\" + princ_name + \")\";\n            NamingEnumeration answer = dctx.search(basedn, filter, ctls);\n            setUserAttributes(answer);\n            //dctx.close();\n        } catch (NamingException ne) {\n            ne.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    void setUserAttributes(NamingEnumeration naming_enum) throws Exception {\n        try {\n            while (naming_enum.hasMore()) {\n                SearchResult sr = (SearchResult) naming_enum.next();\n                Attributes attrs = sr.getAttributes();\n                if (attrs == null) {\n                    cat.debug(\"This result has no attributes\");\n                } else {\n                    for (naming_enum = attrs.getAll(); naming_enum.hasMore(); ) {\n                        Attribute attrib = (Attribute) naming_enum.next();\n                        if (attrib.getID().equals(\"dn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                String user_dn = (String) e.next();\n                                user.setDN(user_dn);\n                                cat.debug(\"dn: \" + user_dn);\n                            }\n                        } else // user ID; make userId = uid@arch.org\n                        if (attrib.getID().equals(\"uid\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                String user_uid = (String) e.next();\n                                //String domain = basedn.replaceAll(\"dc=\",\"\");\n                                //user_uid = user_uid + \"@\" + domain.replaceAll(\",\", \".\");\n                                //user.setUserId(user_uid);\n                                cat.debug(\"uid: \" + user_uid);\n                            }\n                        } else // user's complete name\n                        if (attrib.getID().equals(\"cn\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                String user_cn = (String) e.next();\n                                user.setUserName(user_cn);\n                                cat.debug(\"cn: \" + user_cn);\n                            }\n                        } else // group membership\n                        if (attrib.getID().equals(\"ou\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                String group = (String) e.next();\n                                user.addGroup(group);\n                                cat.debug(\"group: \" + group);\n                            }\n                        } else // role membership\n                        if (attrib.getID().equals(\"employeeType\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                String role = (String) e.next();\n                                user.addRole(role);\n                                cat.debug(\"role: \" + role);\n                            }\n                        } else // allowed IP addresses\n                        if (attrib.getID().equals(\"ipHostNumber\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                String allowed_ip = (String) e.next();\n                                user.addAllowedip(allowed_ip);\n                                cat.debug(\"allowed ip: \" + allowed_ip);\n                            }\n                        } else // password validity start date\n                        if (attrib.getID().equals(\"krb5ValidStart\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                String pwvalidstart = (String) e.next();\n                                user.setPassvalidstart(pwvalidstart);\n                                cat.debug(\"Password valid from: \" + pwvalidstart);\n                            }\n                        } else // password renewal time\n                        if (attrib.getID().equals(\"krb5MaxRenew\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                String pwrenewal = (String) e.next();\n                                user.setPassrenewal(pwrenewal);\n                                cat.debug(\"Password renewal time: \" + pwrenewal + \" days\");\n                            }\n                        } else // user password change required if value = -1\n                        if (attrib.getID().equals(\"krb5MaxLife\")) {\n                            for (NamingEnumeration e = attrib.getAll(); e.hasMore(); ) {\n                                String pwchange = (String) e.next();\n                                if (pwchange.trim().equals(\"-1\"))\n                                    user.setPasschange(true);\n                                cat.debug(\"Password change: \" + pwchange);\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (NamingException e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/LdapFetchTest.java",
		"test_prompt": "// LdapFetchTest.java\npackage com.browsersoft.aacs;\n\nimport java.security.PrivilegedAction;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.directory.SearchResult;\nimport javax.naming.ldap.InitialLdapContext;\nimport javax.naming.ldap.LdapContext;\nimport javax.naming.ldap.StartTlsRequest;\nimport javax.naming.ldap.StartTlsResponse;\nimport javax.net.ssl.SSLSession;\nimport javax.security.auth.Subject;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LdapFetch}.\n* It contains ten unit test cases for the {@link LdapFetch#run()} method.\n*/\nclass LdapFetchTest {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest0.java",
		"test_prompt": "// RoleTest0.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#createSubcontext(Name, Attributes)} method.\n*/\nclass RoleTest0 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest1.java",
		"test_prompt": "// RoleTest1.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#createSubcontext(String, Attributes)} method.\n*/\nclass RoleTest1 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest2.java",
		"test_prompt": "// RoleTest2.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#search(Name, Attributes)} method.\n*/\nclass RoleTest2 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest3.java",
		"test_prompt": "// RoleTest3.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#search(Name, Attributes, String[])} method.\n*/\nclass RoleTest3 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest4.java",
		"test_prompt": "// RoleTest4.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#search(Name, String, Object[], SearchControls)} method.\n*/\nclass RoleTest4 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest5.java",
		"test_prompt": "// RoleTest5.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#search(Name, String, SearchControls)} method.\n*/\nclass RoleTest5 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest6.java",
		"test_prompt": "// RoleTest6.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#search(String, Attributes)} method.\n*/\nclass RoleTest6 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest7.java",
		"test_prompt": "// RoleTest7.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#search(String, Attributes, String[])} method.\n*/\nclass RoleTest7 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest8.java",
		"test_prompt": "// RoleTest8.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#search(String, String, Object[], SearchControls)} method.\n*/\nclass RoleTest8 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest9.java",
		"test_prompt": "// RoleTest9.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#search(String, String, SearchControls)} method.\n*/\nclass RoleTest9 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest10.java",
		"test_prompt": "// RoleTest10.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#addToEnvironment(String, Object)} method.\n*/\nclass RoleTest10 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest11.java",
		"test_prompt": "// RoleTest11.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#composeName(Name, Name)} method.\n*/\nclass RoleTest11 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest12.java",
		"test_prompt": "// RoleTest12.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#composeName(String, String)} method.\n*/\nclass RoleTest12 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest13.java",
		"test_prompt": "// RoleTest13.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#createSubcontext(Name)} method.\n*/\nclass RoleTest13 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest14.java",
		"test_prompt": "// RoleTest14.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#createSubcontext(String)} method.\n*/\nclass RoleTest14 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest15.java",
		"test_prompt": "// RoleTest15.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#list(Name)} method.\n*/\nclass RoleTest15 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest16.java",
		"test_prompt": "// RoleTest16.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#list(String)} method.\n*/\nclass RoleTest16 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest17.java",
		"test_prompt": "// RoleTest17.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#listBindings(Name)} method.\n*/\nclass RoleTest17 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest18.java",
		"test_prompt": "// RoleTest18.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#listBindings(String)} method.\n*/\nclass RoleTest18 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest19.java",
		"test_prompt": "// RoleTest19.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#lookup(Name)} method.\n*/\nclass RoleTest19 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest20.java",
		"test_prompt": "// RoleTest20.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#lookup(String)} method.\n*/\nclass RoleTest20 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest21.java",
		"test_prompt": "// RoleTest21.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#lookupLink(Name)} method.\n*/\nclass RoleTest21 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest22.java",
		"test_prompt": "// RoleTest22.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#lookupLink(String)} method.\n*/\nclass RoleTest22 {"
	},
	{
		"original_code": "// Role.java\n/*\n *   CVS $Id: Role.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\n\npublic class Role implements DirContext {\n\n    private String cn;\n\n    private String dn;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    Attributes myAttrs = new BasicAttributes(true);\n\n    Attribute oc = new BasicAttribute(\"objectclass\");\n\n    public Role() {\n    }\n\n    public Role(String cn) {\n        // read the configuration properties\n        Login.loadProperties(props, configFile);\n        String basedn = props.getProperty(\"basedn\", \"dc=arch,dc=org\");\n        this.cn = cn;\n        this.dn = \"cn=\" + cn + \",ou=roles,\" + basedn;\n        oc.add(\"organizationalRole\");\n        oc.add(\"top\");\n        myAttrs.put(oc);\n        myAttrs.put(\"cn\", cn);\n    }\n\n    public String getCn() {\n        return cn;\n    }\n\n    public void setCn(String cn) {\n        this.cn = cn;\n    }\n\n    public String getDn() {\n        return dn;\n    }\n\n    public void setDn(String dn) {\n        this.dn = dn;\n    }\n\n    // overriding DirContext methods\n    public void bind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void bind(String name, Object obj, Attributes attrs) {\n    }\n\n    public DirContext createSubcontext(Name name, Attributes attrs) {\n        return null;\n    }\n\n    public DirContext createSubcontext(String name, Attributes attrs) {\n        return null;\n    }\n\n    public Attributes getAttributes(String name) throws NamingException {\n        if (!name.equals(\"\")) {\n            throw new NameNotFoundException();\n        }\n        return myAttrs;\n    }\n\n    public Attributes getAttributes(Name name) throws NamingException {\n        return getAttributes(name.toString());\n    }\n\n    public Attributes getAttributes(String name, String[] ids) throws NamingException {\n        if (!name.equals(\"\"))\n            throw new NameNotFoundException();\n        Attributes answer = new BasicAttributes(true);\n        Attribute target;\n        for (int i = 0; i < ids.length; i++) {\n            target = myAttrs.get(ids[i]);\n            if (target != null) {\n                answer.put(target);\n            }\n        }\n        return answer;\n    }\n\n    public Attributes getAttributes(Name name, String[] ids) throws NamingException {\n        return getAttributes(name.toString(), ids);\n    }\n\n    public DirContext getSchema(Name name) {\n        return null;\n    }\n\n    public DirContext getSchema(String name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(Name name) {\n        return null;\n    }\n\n    public DirContext getSchemaClassDefinition(String name) {\n        return null;\n    }\n\n    public void modifyAttributes(Name name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(Name name, ModificationItem[] mods) {\n    }\n\n    public void modifyAttributes(String name, int mod_op, Attributes attrs) {\n    }\n\n    public void modifyAttributes(String name, ModificationItem[] mods) {\n    }\n\n    public void rebind(Name name, Object obj, Attributes attrs) {\n    }\n\n    public void rebind(String name, Object obj, Attributes attrs) {\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(Name name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, Attributes matchingAttributes, String[] attributesToReturn) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) {\n        return null;\n    }\n\n    public NamingEnumeration search(String name, String filter, SearchControls cons) {\n        return null;\n    }\n\n    //  overriding Context methods\n    public Object addToEnvironment(String propName, Object propVal) {\n        return null;\n    }\n\n    public void bind(Name name, Object obj) {\n    }\n\n    public void bind(String name, Object obj) {\n    }\n\n    public void close() {\n    }\n\n    public Name composeName(Name name, Name prefix) {\n        return null;\n    }\n\n    public String composeName(String name, String prefix) {\n        return null;\n    }\n\n    public Context createSubcontext(Name name) {\n        return null;\n    }\n\n    public Context createSubcontext(String name) {\n        return null;\n    }\n\n    public void destroySubcontext(Name name) {\n    }\n\n    public void destroySubcontext(String name) {\n    }\n\n    public Hashtable getEnvironment() {\n        return null;\n    }\n\n    public String getNameInNamespace() {\n        return null;\n    }\n\n    public NameParser getNameParser(Name name) {\n        return null;\n    }\n\n    public NameParser getNameParser(String name) {\n        return null;\n    }\n\n    public NamingEnumeration list(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration list(String name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(Name name) {\n        return null;\n    }\n\n    public NamingEnumeration listBindings(String name) {\n        return null;\n    }\n\n    public Object lookup(Name name) {\n        return null;\n    }\n\n    public Object lookup(String name) {\n        return null;\n    }\n\n    public Object lookupLink(Name name) {\n        return null;\n    }\n\n    public Object lookupLink(String name) {\n        return null;\n    }\n\n    public void rebind(Name name, Object obj) {\n    }\n\n    public void rebind(String name, Object obj) {\n    }\n\n    public Object removeFromEnvironment(String propName) {\n        return null;\n    }\n\n    public void rename(Name oldName, Name newName) {\n    }\n\n    public void rename(String oldName, String newName) {\n    }\n\n    public void unbind(Name name) {\n    }\n\n    public void unbind(String name) {\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/RoleTest23.java",
		"test_prompt": "// RoleTest23.java\npackage com.browsersoft.aacs;\n\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.BasicAttribute;\nimport javax.naming.directory.BasicAttributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.ModificationItem;\nimport javax.naming.directory.SearchControls;\nimport javax.naming.Context;\nimport javax.naming.Name;\nimport javax.naming.NameNotFoundException;\nimport javax.naming.NameParser;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Role}.\n* It contains ten unit test cases for the {@link Role#removeFromEnvironment(String)} method.\n*/\nclass RoleTest23 {"
	},
	{
		"original_code": "// KrbUserMgr.java\n/*\n *   CVS $Id: KrbUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.aacs;\n\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport javax.security.auth.Subject;\nimport javax.security.auth.login.AccountExpiredException;\nimport javax.security.auth.login.CredentialExpiredException;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\n\n/**\n * @author gsharma\n *\n * KrbUserMgr authenticates the user using Kerberos v5 authentication and uses the user's credentials to\n * fetch other user information from a persistant storage based on LDAP.\n */\npublic class KrbUserMgr implements UserMgr {\n\n    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(KrbUserMgr.class.getName());\n\n    private User user;\n\n    private LoginContext lctx = null;\n\n    private static Properties props = new Properties();\n\n    private static String configFile = \"/KrbLdap\";\n\n    static {\n        Login.loadProperties(props, configFile);\n    }\n\n    /**\n     * Public default constructor\n     */\n    public KrbUserMgr() {\n    }\n\n    /**\n     * Kerberos Authentication\n     */\n    public boolean checkSecret(String userid, String password, String authType) {\n        if (password == null)\n            return false;\n        if (authType.equals(\"krb5\")) {\n            // strip only the unique username from the userid\n            int ind = userid.indexOf(\"@\");\n            String tmp_userid = \"\";\n            if (ind > 0)\n                tmp_userid = userid.substring(0, ind);\n            user = new User();\n            user.setUserId(userid);\n            String jaaslogin = props.getProperty(\"jaaslogin\", \"AACSLogin\");\n            cat.info(\"Starting Kerberos Authentication\");\n            // Kerberos Authentication\n            PassiveCallbackHandler cbh = new PassiveCallbackHandler(tmp_userid, password);\n            try {\n                lctx = new LoginContext(jaaslogin, cbh);\n            } catch (LoginException le) {\n                cat.warn(\"LoginContext cannot be created. \" + le.getMessage());\n                return false;\n            } catch (SecurityException se) {\n                cat.warn(\"LoginContext cannot be created. \" + se.getMessage());\n            }\n            try {\n                lctx.login();\n            } catch (AccountExpiredException aee) {\n                cat.warn(\"Your account has expired.  \" + \"Please notify your administrator.\");\n                return false;\n            } catch (CredentialExpiredException cee) {\n                cat.warn(\"Your credentials have expired.\");\n                return false;\n            } catch (LoginException le) {\n                System.out.println(\"Authentication failed. \" + le.getMessage());\n                return false;\n            } catch (Exception e) {\n                cat.warn(\"Unexpected Exception - unable to continue\");\n                e.printStackTrace();\n                return false;\n            }\n            cat.info(\"Authentication succeeded.\\n\");\n            Subject subject = lctx.getSubject();\n            Set princs = subject.getPrincipals();\n            Iterator princs_iter = princs.iterator();\n            while (princs_iter.hasNext()) {\n                cat.debug(\"Principal: \" + princs_iter.next());\n            }\n            LdapFetch action = new LdapFetch(subject, user);\n            Subject.doAsPrivileged(subject, action, null);\n            return true;\n        } else\n            return false;\n    }\n\n    public User getUser() {\n        return user;\n    }\n\n    public User getUser(String userid) {\n        return user;\n    }\n\n    public void logOut() {\n        try {\n            lctx.logout();\n            user.getLdapContext().close();\n        } catch (LoginException le) {\n            System.out.println(\"Authentication failed. \" + le.getMessage());\n        } catch (Exception e) {\n            cat.warn(\"Unexpected Exception - unable to continue\");\n            e.printStackTrace();\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/KrbUserMgrTest.java",
		"test_prompt": "// KrbUserMgrTest.java\npackage com.browsersoft.aacs;\n\nimport java.util.Iterator;\nimport java.util.Properties;\nimport java.util.Set;\nimport javax.security.auth.Subject;\nimport javax.security.auth.login.AccountExpiredException;\nimport javax.security.auth.login.CredentialExpiredException;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KrbUserMgr}.\n* It contains ten unit test cases for the {@link KrbUserMgr#checkSecret(String, String, String)} method.\n*/\nclass KrbUserMgrTest {"
	},
	{
		"original_code": "// AACSPrincipal.java\n/*\n *   CVS $Id: AACSPrincipal.java,v 1.1 2006/11/06 19:52:20 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.jaas;\n\nimport java.security.Principal;\n\n/**\n * <p> This class implements the <code>Principal</code> interface\n * and represents a AACS user or role.\n *\n * <p> Principals such as this <code>AACSPrincipal</code>\n * may be associated with a particular <code>Subject</code>\n * to augment that <code>Subject</code> with an additional\n * identity.  Refer to the <code>Subject</code> class for more information\n * on how to achieve this.  Authorization decisions can then be based upon\n * the Principals associated with a <code>Subject</code>.\n *\n * @version $Id: AACSPrincipal.java,v 1.1 2006/11/06 19:52:20 grodecki Exp $\n * @see java.security.Principal\n * @see javax.security.auth.Subject\n */\npublic class AACSPrincipal implements Principal, java.io.Serializable {\n\n    /**\n     * @serial\n     */\n    private String name;\n\n    /**\n     *  Create a AACSPrincipal with a name.\n     *\n     *  <p>\n     *\n     *  @param name\n     *\n     *  @exception NullPointerException if the <code>name</code>\n     * \t\t\tis <code>null</code>.\n     */\n    public AACSPrincipal(String name) {\n        if (name == null)\n            throw new NullPointerException(\"illegal null input\");\n        this.name = name;\n    }\n\n    /**\n     * Return the name for this <code>AACSPrincipal</code>.\n     *\n     * <p>\n     *\n     * @return the name for this <code>AACSPrincipal</code>\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Return a string representation of this <code>AACSPrincipal</code>.\n     *\n     * <p>\n     *\n     * @return a string representation of this <code>AACSPrincipal</code>.\n     */\n    public String toString() {\n        return (\"AACSPrincipal:  \" + name);\n    }\n\n    /**\n     *  Compares the specified Object with this <code>AACSPrincipal</code>\n     *  for equality.  Returns true if the given object is also a\n     *  <code>AACSPrincipal</code> and the two AACSPrincipals\n     *  have the same name.\n     *\n     *  <p>\n     *\n     *  @param o Object to be compared for equality with this\n     * \t\t<code>AACSPrincipal</code>.\n     *\n     *  @return true if the specified Object is equal equal to this\n     * \t\t<code>AACSPrincipal</code>.\n     */\n    public boolean equals(Object o) {\n        if (o == null)\n            return false;\n        if (this == o)\n            return true;\n        if (!(o instanceof AACSPrincipal))\n            return false;\n        AACSPrincipal that = (AACSPrincipal) o;\n        if (this.getName().equals(that.getName()))\n            return true;\n        return false;\n    }\n\n    /**\n     * Return a hash code for this <code>AACSPrincipal</code>.\n     *\n     * <p>\n     *\n     * @return a hash code for this <code>AACSPrincipal</code>.\n     */\n    public int hashCode() {\n        return name.hashCode();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/jaas/AACSPrincipalTest0.java",
		"test_prompt": "// AACSPrincipalTest0.java\npackage com.browsersoft.jaas;\n\nimport java.security.Principal;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AACSPrincipal}.\n* It contains ten unit test cases for the {@link AACSPrincipal#equals(Object)} method.\n*/\nclass AACSPrincipalTest0 {"
	},
	{
		"original_code": "// AACSPrincipal.java\n/*\n *   CVS $Id: AACSPrincipal.java,v 1.1 2006/11/06 19:52:20 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.jaas;\n\nimport java.security.Principal;\n\n/**\n * <p> This class implements the <code>Principal</code> interface\n * and represents a AACS user or role.\n *\n * <p> Principals such as this <code>AACSPrincipal</code>\n * may be associated with a particular <code>Subject</code>\n * to augment that <code>Subject</code> with an additional\n * identity.  Refer to the <code>Subject</code> class for more information\n * on how to achieve this.  Authorization decisions can then be based upon\n * the Principals associated with a <code>Subject</code>.\n *\n * @version $Id: AACSPrincipal.java,v 1.1 2006/11/06 19:52:20 grodecki Exp $\n * @see java.security.Principal\n * @see javax.security.auth.Subject\n */\npublic class AACSPrincipal implements Principal, java.io.Serializable {\n\n    /**\n     * @serial\n     */\n    private String name;\n\n    /**\n     *  Create a AACSPrincipal with a name.\n     *\n     *  <p>\n     *\n     *  @param name\n     *\n     *  @exception NullPointerException if the <code>name</code>\n     * \t\t\tis <code>null</code>.\n     */\n    public AACSPrincipal(String name) {\n        if (name == null)\n            throw new NullPointerException(\"illegal null input\");\n        this.name = name;\n    }\n\n    /**\n     * Return the name for this <code>AACSPrincipal</code>.\n     *\n     * <p>\n     *\n     * @return the name for this <code>AACSPrincipal</code>\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Return a string representation of this <code>AACSPrincipal</code>.\n     *\n     * <p>\n     *\n     * @return a string representation of this <code>AACSPrincipal</code>.\n     */\n    public String toString() {\n        return (\"AACSPrincipal:  \" + name);\n    }\n\n    /**\n     *  Compares the specified Object with this <code>AACSPrincipal</code>\n     *  for equality.  Returns true if the given object is also a\n     *  <code>AACSPrincipal</code> and the two AACSPrincipals\n     *  have the same name.\n     *\n     *  <p>\n     *\n     *  @param o Object to be compared for equality with this\n     * \t\t<code>AACSPrincipal</code>.\n     *\n     *  @return true if the specified Object is equal equal to this\n     * \t\t<code>AACSPrincipal</code>.\n     */\n    public boolean equals(Object o) {\n        if (o == null)\n            return false;\n        if (this == o)\n            return true;\n        if (!(o instanceof AACSPrincipal))\n            return false;\n        AACSPrincipal that = (AACSPrincipal) o;\n        if (this.getName().equals(that.getName()))\n            return true;\n        return false;\n    }\n\n    /**\n     * Return a hash code for this <code>AACSPrincipal</code>.\n     *\n     * <p>\n     *\n     * @return a hash code for this <code>AACSPrincipal</code>.\n     */\n    public int hashCode() {\n        return name.hashCode();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/jaas/AACSPrincipalTest1.java",
		"test_prompt": "// AACSPrincipalTest1.java\npackage com.browsersoft.jaas;\n\nimport java.security.Principal;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AACSPrincipal}.\n* It contains ten unit test cases for the {@link AACSPrincipal#hashCode()} method.\n*/\nclass AACSPrincipalTest1 {"
	},
	{
		"original_code": "// AACSLoginModule.java\n/*\n *   CVS $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\n\n/**\n * <p> This sample LoginModule authenticates users with a password.\n *\n * <p> This LoginModule only recognizes one user:\ttestUser\n * <p> testUser's password is:\ttestPassword\n *\n * <p> If testUser successfully authenticates itself,\n * an <code>AACSPrincipal</code> with the testUser's user name\n * is added to the Subject.\n *\n * <p> This LoginModule recognizes the debug option.\n * If set to true in the login Configuration,\n * debug messages will be output to the output stream, System.out.\n *\n * <p> The config option specifies the AACS Properties file,\n * without the assumed \".properties\" suffix.\n *\n * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $\n */\npublic class AACSLoginModule implements LoginModule {\n\n    // initial state\n    private Subject subject;\n\n    private CallbackHandler callbackHandler;\n\n    // shared between the LoginModules\n    private Map sharedState;\n\n    private Map options;\n\n    // configurable option\n    private boolean debug = false;\n\n    // the authentication status\n    private boolean succeeded = false;\n\n    private boolean commitSucceeded = false;\n\n    // username and password\n    private String username;\n\n    private char[] password;\n\n    // Principals\n    private AACSUserPrincipal userPrincipal;\n\n    private AACSRolePrincipal rolePrincipal;\n\n    // AACS Beans\n    private User user;\n\n    private Login login;\n\n    // Default and actual AACS properties file\n    private final static String aacsProps = \"/AACS\";\n\n    private static String propsfile = null;\n\n    /**\n     *  Initialize this <code>LoginModule</code>.\n     *\n     *  <p>\n     *\n     *  @param subject the <code>Subject</code> to be authenticated. <p>\n     *\n     *  @param callbackHandler a <code>CallbackHandler</code> for communicating\n     * \t\t\twith the end user (prompting for user names and\n     * \t\t\tpasswords, for example). <p>\n     *\n     *  @param sharedState shared <code>LoginModule</code> state. <p>\n     *\n     *  @param options options specified in the login\n     * \t\t\t<code>Configuration</code> for this particular\n     * \t\t\t<code>LoginModule</code>.\n     */\n    public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {\n        this.subject = subject;\n        this.callbackHandler = callbackHandler;\n        this.sharedState = sharedState;\n        this.options = options;\n        user = null;\n        login = null;\n        // initialize any configured options\n        debug = \"true\".equalsIgnoreCase((String) options.get(\"debug\"));\n        if (propsfile == null) {\n            // only do the first time\n            propsfile = (String) options.get(\"config\");\n            if (propsfile == null)\n                propsfile = aacsProps;\n            Login.setConfigFile(propsfile);\n            Login.init();\n        }\n        if (debug)\n            System.out.println(\"AACSLoginModule initialized\");\n    }\n\n    /**\n     *  Authenticate the user with a user name and password.\n     *\n     *  <p>\n     *\n     *  @return true in all cases since this <code>LoginModule</code>\n     * \t\tshould not be ignored.\n     *\n     *  @exception FailedLoginException if the authentication fails. <p>\n     *\n     *  @exception LoginException if this <code>LoginModule</code>\n     * \t\tis unable to perform the authentication.\n     */\n    public boolean login() throws LoginException {\n        if (debug)\n            System.out.println(\"AACSLoginModule login() called\");\n        // prompt for a user name and password\n        if (callbackHandler == null)\n            throw new LoginException(\"Error: no CallbackHandler available \" + \"to garner authentication information from the user\");\n        Callback[] callbacks = new Callback[2];\n        callbacks[0] = new NameCallback(\"user name: \");\n        callbacks[1] = new PasswordCallback(\"password: \", false);\n        try {\n            callbackHandler.handle(callbacks);\n            username = ((NameCallback) callbacks[0]).getName();\n            char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();\n            if (tmpPassword == null) {\n                // treat a NULL password as an empty password\n                tmpPassword = new char[0];\n            }\n            password = new char[tmpPassword.length];\n            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);\n            ((PasswordCallback) callbacks[1]).clearPassword();\n        } catch (java.io.IOException ioe) {\n            throw new LoginException(ioe.toString());\n        } catch (UnsupportedCallbackException uce) {\n            throw new LoginException(\"Error: \" + uce.getCallback().toString() + \" not available to garner authentication information \" + \"from the user\");\n        }\n        // print debugging information\n        if (debug) {\n            System.out.println(\"\\t\\t[AACSLoginModule] \" + \"user entered user name: \" + username);\n            System.out.print(\"\\t\\t[AACSLoginModule] \" + \"user entered password: \");\n            for (int i = 0; i < password.length; i++) System.out.print(password[i]);\n            System.out.println();\n        }\n        // verify the username/password\n        login = new Login(username);\n        login.setPassword(new String(password));\n        user = login.authenticate();\n        if (user != null) {\n            if (debug)\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"authentication succeeded\");\n            succeeded = true;\n            return true;\n        } else {\n            // authentication failed -- clean out state\n            if (debug)\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"authentication failed\");\n            succeeded = false;\n            username = null;\n            for (int i = 0; i < password.length; i++) password[i] = ' ';\n            password = null;\n            throw new FailedLoginException(\"Login Incorrect\");\n        }\n    }\n\n    /**\n     *  <p> This method is called if the LoginContext's\n     *  overall authentication succeeded\n     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n     *  succeeded).\n     *\n     *  <p> If this LoginModule's own authentication attempt\n     *  succeeded (checked by retrieving the private state saved by the\n     *  <code>login</code> method), then this method associates a\n     *  <code>AACSUserPrincipal</code> and <code>AACSRolePrincipal</code>\n     *  with the <code>Subject</code> located in the\n     *  <code>LoginModule</code>.  If this LoginModule's own\n     *  authentication attempted failed, then this method removes\n     *  any state that was originally saved.\n     *\n     *  <p>\n     *\n     *  @exception LoginException if the commit fails.\n     *\n     *  @return true if this LoginModule's own login and commit\n     * \t\tattempts succeeded, or false otherwise.\n     */\n    public boolean commit() throws LoginException {\n        if (succeeded == false) {\n            return false;\n        } else {\n            // add a Principal (authenticated identity)\n            // to the Subject\n            // add an AACSUserPrincipal to the Subject\n            userPrincipal = new AACSUserPrincipal(username);\n            if (!subject.getPrincipals().contains(userPrincipal))\n                subject.getPrincipals().add(userPrincipal);\n            if (debug) {\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"added AACSUserPrincipal [\" + userPrincipal + \"] to Subject\");\n            }\n            // add the \"aacs_role\" to the Subject\n            rolePrincipal = new AACSRolePrincipal(\"aacs_role\");\n            if (!subject.getPrincipals().contains(rolePrincipal))\n                subject.getPrincipals().add(rolePrincipal);\n            if (debug) {\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"added AACSRolePrincipal [\" + rolePrincipal + \"] to Subject\");\n            }\n            // in any case, clean out state\n            username = null;\n            for (int i = 0; i < password.length; i++) password[i] = ' ';\n            password = null;\n            commitSucceeded = true;\n            return true;\n        }\n    }\n\n    /**\n     *  <p> This method is called if the LoginContext's\n     *  overall authentication failed.\n     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n     *  did not succeed).\n     *\n     *  <p> If this LoginModule's own authentication attempt\n     *  succeeded (checked by retrieving the private state saved by the\n     *  <code>login</code> and <code>commit</code> methods),\n     *  then this method cleans up any state that was originally saved.\n     *\n     *  <p>\n     *\n     *  @exception LoginException if the abort fails.\n     *\n     *  @return false if this LoginModule's own login and/or commit attempts\n     * \t\tfailed, and true otherwise.\n     */\n    public boolean abort() throws LoginException {\n        if (succeeded == false) {\n            return false;\n        } else if (succeeded == true && commitSucceeded == false) {\n            // login succeeded but overall authentication failed\n            succeeded = false;\n            username = null;\n            if (password != null) {\n                for (int i = 0; i < password.length; i++) password[i] = ' ';\n                password = null;\n            }\n            userPrincipal = null;\n            rolePrincipal = null;\n        } else {\n            // overall authentication succeeded and commit succeeded,\n            // but someone else's commit failed\n            logout();\n        }\n        return true;\n    }\n\n    /**\n     * Logout the user.\n     *\n     * <p> This method removes the <code>AACSPrincipal</code>\n     * that was added by the <code>commit</code> method.\n     *\n     * <p>\n     *\n     * @exception LoginException if the logout fails.\n     *\n     * @return true in all cases since this <code>LoginModule</code>\n     *          should not be ignored.\n     */\n    public boolean logout() throws LoginException {\n        subject.getPrincipals().remove(userPrincipal);\n        succeeded = false;\n        succeeded = commitSucceeded;\n        username = null;\n        if (password != null) {\n            for (int i = 0; i < password.length; i++) password[i] = ' ';\n            password = null;\n        }\n        userPrincipal = null;\n        rolePrincipal = null;\n        user = null;\n        login = null;\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModuleTest0.java",
		"test_prompt": "// AACSLoginModuleTest0.java\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AACSLoginModule}.\n* It contains ten unit test cases for the {@link AACSLoginModule#login()} method.\n*/\nclass AACSLoginModuleTest0 {"
	},
	{
		"original_code": "// AACSLoginModule.java\n/*\n *   CVS $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\n\n/**\n * <p> This sample LoginModule authenticates users with a password.\n *\n * <p> This LoginModule only recognizes one user:\ttestUser\n * <p> testUser's password is:\ttestPassword\n *\n * <p> If testUser successfully authenticates itself,\n * an <code>AACSPrincipal</code> with the testUser's user name\n * is added to the Subject.\n *\n * <p> This LoginModule recognizes the debug option.\n * If set to true in the login Configuration,\n * debug messages will be output to the output stream, System.out.\n *\n * <p> The config option specifies the AACS Properties file,\n * without the assumed \".properties\" suffix.\n *\n * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $\n */\npublic class AACSLoginModule implements LoginModule {\n\n    // initial state\n    private Subject subject;\n\n    private CallbackHandler callbackHandler;\n\n    // shared between the LoginModules\n    private Map sharedState;\n\n    private Map options;\n\n    // configurable option\n    private boolean debug = false;\n\n    // the authentication status\n    private boolean succeeded = false;\n\n    private boolean commitSucceeded = false;\n\n    // username and password\n    private String username;\n\n    private char[] password;\n\n    // Principals\n    private AACSUserPrincipal userPrincipal;\n\n    private AACSRolePrincipal rolePrincipal;\n\n    // AACS Beans\n    private User user;\n\n    private Login login;\n\n    // Default and actual AACS properties file\n    private final static String aacsProps = \"/AACS\";\n\n    private static String propsfile = null;\n\n    /**\n     *  Initialize this <code>LoginModule</code>.\n     *\n     *  <p>\n     *\n     *  @param subject the <code>Subject</code> to be authenticated. <p>\n     *\n     *  @param callbackHandler a <code>CallbackHandler</code> for communicating\n     * \t\t\twith the end user (prompting for user names and\n     * \t\t\tpasswords, for example). <p>\n     *\n     *  @param sharedState shared <code>LoginModule</code> state. <p>\n     *\n     *  @param options options specified in the login\n     * \t\t\t<code>Configuration</code> for this particular\n     * \t\t\t<code>LoginModule</code>.\n     */\n    public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {\n        this.subject = subject;\n        this.callbackHandler = callbackHandler;\n        this.sharedState = sharedState;\n        this.options = options;\n        user = null;\n        login = null;\n        // initialize any configured options\n        debug = \"true\".equalsIgnoreCase((String) options.get(\"debug\"));\n        if (propsfile == null) {\n            // only do the first time\n            propsfile = (String) options.get(\"config\");\n            if (propsfile == null)\n                propsfile = aacsProps;\n            Login.setConfigFile(propsfile);\n            Login.init();\n        }\n        if (debug)\n            System.out.println(\"AACSLoginModule initialized\");\n    }\n\n    /**\n     *  Authenticate the user with a user name and password.\n     *\n     *  <p>\n     *\n     *  @return true in all cases since this <code>LoginModule</code>\n     * \t\tshould not be ignored.\n     *\n     *  @exception FailedLoginException if the authentication fails. <p>\n     *\n     *  @exception LoginException if this <code>LoginModule</code>\n     * \t\tis unable to perform the authentication.\n     */\n    public boolean login() throws LoginException {\n        if (debug)\n            System.out.println(\"AACSLoginModule login() called\");\n        // prompt for a user name and password\n        if (callbackHandler == null)\n            throw new LoginException(\"Error: no CallbackHandler available \" + \"to garner authentication information from the user\");\n        Callback[] callbacks = new Callback[2];\n        callbacks[0] = new NameCallback(\"user name: \");\n        callbacks[1] = new PasswordCallback(\"password: \", false);\n        try {\n            callbackHandler.handle(callbacks);\n            username = ((NameCallback) callbacks[0]).getName();\n            char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();\n            if (tmpPassword == null) {\n                // treat a NULL password as an empty password\n                tmpPassword = new char[0];\n            }\n            password = new char[tmpPassword.length];\n            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);\n            ((PasswordCallback) callbacks[1]).clearPassword();\n        } catch (java.io.IOException ioe) {\n            throw new LoginException(ioe.toString());\n        } catch (UnsupportedCallbackException uce) {\n            throw new LoginException(\"Error: \" + uce.getCallback().toString() + \" not available to garner authentication information \" + \"from the user\");\n        }\n        // print debugging information\n        if (debug) {\n            System.out.println(\"\\t\\t[AACSLoginModule] \" + \"user entered user name: \" + username);\n            System.out.print(\"\\t\\t[AACSLoginModule] \" + \"user entered password: \");\n            for (int i = 0; i < password.length; i++) System.out.print(password[i]);\n            System.out.println();\n        }\n        // verify the username/password\n        login = new Login(username);\n        login.setPassword(new String(password));\n        user = login.authenticate();\n        if (user != null) {\n            if (debug)\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"authentication succeeded\");\n            succeeded = true;\n            return true;\n        } else {\n            // authentication failed -- clean out state\n            if (debug)\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"authentication failed\");\n            succeeded = false;\n            username = null;\n            for (int i = 0; i < password.length; i++) password[i] = ' ';\n            password = null;\n            throw new FailedLoginException(\"Login Incorrect\");\n        }\n    }\n\n    /**\n     *  <p> This method is called if the LoginContext's\n     *  overall authentication succeeded\n     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n     *  succeeded).\n     *\n     *  <p> If this LoginModule's own authentication attempt\n     *  succeeded (checked by retrieving the private state saved by the\n     *  <code>login</code> method), then this method associates a\n     *  <code>AACSUserPrincipal</code> and <code>AACSRolePrincipal</code>\n     *  with the <code>Subject</code> located in the\n     *  <code>LoginModule</code>.  If this LoginModule's own\n     *  authentication attempted failed, then this method removes\n     *  any state that was originally saved.\n     *\n     *  <p>\n     *\n     *  @exception LoginException if the commit fails.\n     *\n     *  @return true if this LoginModule's own login and commit\n     * \t\tattempts succeeded, or false otherwise.\n     */\n    public boolean commit() throws LoginException {\n        if (succeeded == false) {\n            return false;\n        } else {\n            // add a Principal (authenticated identity)\n            // to the Subject\n            // add an AACSUserPrincipal to the Subject\n            userPrincipal = new AACSUserPrincipal(username);\n            if (!subject.getPrincipals().contains(userPrincipal))\n                subject.getPrincipals().add(userPrincipal);\n            if (debug) {\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"added AACSUserPrincipal [\" + userPrincipal + \"] to Subject\");\n            }\n            // add the \"aacs_role\" to the Subject\n            rolePrincipal = new AACSRolePrincipal(\"aacs_role\");\n            if (!subject.getPrincipals().contains(rolePrincipal))\n                subject.getPrincipals().add(rolePrincipal);\n            if (debug) {\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"added AACSRolePrincipal [\" + rolePrincipal + \"] to Subject\");\n            }\n            // in any case, clean out state\n            username = null;\n            for (int i = 0; i < password.length; i++) password[i] = ' ';\n            password = null;\n            commitSucceeded = true;\n            return true;\n        }\n    }\n\n    /**\n     *  <p> This method is called if the LoginContext's\n     *  overall authentication failed.\n     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n     *  did not succeed).\n     *\n     *  <p> If this LoginModule's own authentication attempt\n     *  succeeded (checked by retrieving the private state saved by the\n     *  <code>login</code> and <code>commit</code> methods),\n     *  then this method cleans up any state that was originally saved.\n     *\n     *  <p>\n     *\n     *  @exception LoginException if the abort fails.\n     *\n     *  @return false if this LoginModule's own login and/or commit attempts\n     * \t\tfailed, and true otherwise.\n     */\n    public boolean abort() throws LoginException {\n        if (succeeded == false) {\n            return false;\n        } else if (succeeded == true && commitSucceeded == false) {\n            // login succeeded but overall authentication failed\n            succeeded = false;\n            username = null;\n            if (password != null) {\n                for (int i = 0; i < password.length; i++) password[i] = ' ';\n                password = null;\n            }\n            userPrincipal = null;\n            rolePrincipal = null;\n        } else {\n            // overall authentication succeeded and commit succeeded,\n            // but someone else's commit failed\n            logout();\n        }\n        return true;\n    }\n\n    /**\n     * Logout the user.\n     *\n     * <p> This method removes the <code>AACSPrincipal</code>\n     * that was added by the <code>commit</code> method.\n     *\n     * <p>\n     *\n     * @exception LoginException if the logout fails.\n     *\n     * @return true in all cases since this <code>LoginModule</code>\n     *          should not be ignored.\n     */\n    public boolean logout() throws LoginException {\n        subject.getPrincipals().remove(userPrincipal);\n        succeeded = false;\n        succeeded = commitSucceeded;\n        username = null;\n        if (password != null) {\n            for (int i = 0; i < password.length; i++) password[i] = ' ';\n            password = null;\n        }\n        userPrincipal = null;\n        rolePrincipal = null;\n        user = null;\n        login = null;\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModuleTest1.java",
		"test_prompt": "// AACSLoginModuleTest1.java\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AACSLoginModule}.\n* It contains ten unit test cases for the {@link AACSLoginModule#commit()} method.\n*/\nclass AACSLoginModuleTest1 {"
	},
	{
		"original_code": "// AACSLoginModule.java\n/*\n *   CVS $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\n\n/**\n * <p> This sample LoginModule authenticates users with a password.\n *\n * <p> This LoginModule only recognizes one user:\ttestUser\n * <p> testUser's password is:\ttestPassword\n *\n * <p> If testUser successfully authenticates itself,\n * an <code>AACSPrincipal</code> with the testUser's user name\n * is added to the Subject.\n *\n * <p> This LoginModule recognizes the debug option.\n * If set to true in the login Configuration,\n * debug messages will be output to the output stream, System.out.\n *\n * <p> The config option specifies the AACS Properties file,\n * without the assumed \".properties\" suffix.\n *\n * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $\n */\npublic class AACSLoginModule implements LoginModule {\n\n    // initial state\n    private Subject subject;\n\n    private CallbackHandler callbackHandler;\n\n    // shared between the LoginModules\n    private Map sharedState;\n\n    private Map options;\n\n    // configurable option\n    private boolean debug = false;\n\n    // the authentication status\n    private boolean succeeded = false;\n\n    private boolean commitSucceeded = false;\n\n    // username and password\n    private String username;\n\n    private char[] password;\n\n    // Principals\n    private AACSUserPrincipal userPrincipal;\n\n    private AACSRolePrincipal rolePrincipal;\n\n    // AACS Beans\n    private User user;\n\n    private Login login;\n\n    // Default and actual AACS properties file\n    private final static String aacsProps = \"/AACS\";\n\n    private static String propsfile = null;\n\n    /**\n     *  Initialize this <code>LoginModule</code>.\n     *\n     *  <p>\n     *\n     *  @param subject the <code>Subject</code> to be authenticated. <p>\n     *\n     *  @param callbackHandler a <code>CallbackHandler</code> for communicating\n     * \t\t\twith the end user (prompting for user names and\n     * \t\t\tpasswords, for example). <p>\n     *\n     *  @param sharedState shared <code>LoginModule</code> state. <p>\n     *\n     *  @param options options specified in the login\n     * \t\t\t<code>Configuration</code> for this particular\n     * \t\t\t<code>LoginModule</code>.\n     */\n    public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {\n        this.subject = subject;\n        this.callbackHandler = callbackHandler;\n        this.sharedState = sharedState;\n        this.options = options;\n        user = null;\n        login = null;\n        // initialize any configured options\n        debug = \"true\".equalsIgnoreCase((String) options.get(\"debug\"));\n        if (propsfile == null) {\n            // only do the first time\n            propsfile = (String) options.get(\"config\");\n            if (propsfile == null)\n                propsfile = aacsProps;\n            Login.setConfigFile(propsfile);\n            Login.init();\n        }\n        if (debug)\n            System.out.println(\"AACSLoginModule initialized\");\n    }\n\n    /**\n     *  Authenticate the user with a user name and password.\n     *\n     *  <p>\n     *\n     *  @return true in all cases since this <code>LoginModule</code>\n     * \t\tshould not be ignored.\n     *\n     *  @exception FailedLoginException if the authentication fails. <p>\n     *\n     *  @exception LoginException if this <code>LoginModule</code>\n     * \t\tis unable to perform the authentication.\n     */\n    public boolean login() throws LoginException {\n        if (debug)\n            System.out.println(\"AACSLoginModule login() called\");\n        // prompt for a user name and password\n        if (callbackHandler == null)\n            throw new LoginException(\"Error: no CallbackHandler available \" + \"to garner authentication information from the user\");\n        Callback[] callbacks = new Callback[2];\n        callbacks[0] = new NameCallback(\"user name: \");\n        callbacks[1] = new PasswordCallback(\"password: \", false);\n        try {\n            callbackHandler.handle(callbacks);\n            username = ((NameCallback) callbacks[0]).getName();\n            char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();\n            if (tmpPassword == null) {\n                // treat a NULL password as an empty password\n                tmpPassword = new char[0];\n            }\n            password = new char[tmpPassword.length];\n            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);\n            ((PasswordCallback) callbacks[1]).clearPassword();\n        } catch (java.io.IOException ioe) {\n            throw new LoginException(ioe.toString());\n        } catch (UnsupportedCallbackException uce) {\n            throw new LoginException(\"Error: \" + uce.getCallback().toString() + \" not available to garner authentication information \" + \"from the user\");\n        }\n        // print debugging information\n        if (debug) {\n            System.out.println(\"\\t\\t[AACSLoginModule] \" + \"user entered user name: \" + username);\n            System.out.print(\"\\t\\t[AACSLoginModule] \" + \"user entered password: \");\n            for (int i = 0; i < password.length; i++) System.out.print(password[i]);\n            System.out.println();\n        }\n        // verify the username/password\n        login = new Login(username);\n        login.setPassword(new String(password));\n        user = login.authenticate();\n        if (user != null) {\n            if (debug)\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"authentication succeeded\");\n            succeeded = true;\n            return true;\n        } else {\n            // authentication failed -- clean out state\n            if (debug)\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"authentication failed\");\n            succeeded = false;\n            username = null;\n            for (int i = 0; i < password.length; i++) password[i] = ' ';\n            password = null;\n            throw new FailedLoginException(\"Login Incorrect\");\n        }\n    }\n\n    /**\n     *  <p> This method is called if the LoginContext's\n     *  overall authentication succeeded\n     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n     *  succeeded).\n     *\n     *  <p> If this LoginModule's own authentication attempt\n     *  succeeded (checked by retrieving the private state saved by the\n     *  <code>login</code> method), then this method associates a\n     *  <code>AACSUserPrincipal</code> and <code>AACSRolePrincipal</code>\n     *  with the <code>Subject</code> located in the\n     *  <code>LoginModule</code>.  If this LoginModule's own\n     *  authentication attempted failed, then this method removes\n     *  any state that was originally saved.\n     *\n     *  <p>\n     *\n     *  @exception LoginException if the commit fails.\n     *\n     *  @return true if this LoginModule's own login and commit\n     * \t\tattempts succeeded, or false otherwise.\n     */\n    public boolean commit() throws LoginException {\n        if (succeeded == false) {\n            return false;\n        } else {\n            // add a Principal (authenticated identity)\n            // to the Subject\n            // add an AACSUserPrincipal to the Subject\n            userPrincipal = new AACSUserPrincipal(username);\n            if (!subject.getPrincipals().contains(userPrincipal))\n                subject.getPrincipals().add(userPrincipal);\n            if (debug) {\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"added AACSUserPrincipal [\" + userPrincipal + \"] to Subject\");\n            }\n            // add the \"aacs_role\" to the Subject\n            rolePrincipal = new AACSRolePrincipal(\"aacs_role\");\n            if (!subject.getPrincipals().contains(rolePrincipal))\n                subject.getPrincipals().add(rolePrincipal);\n            if (debug) {\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"added AACSRolePrincipal [\" + rolePrincipal + \"] to Subject\");\n            }\n            // in any case, clean out state\n            username = null;\n            for (int i = 0; i < password.length; i++) password[i] = ' ';\n            password = null;\n            commitSucceeded = true;\n            return true;\n        }\n    }\n\n    /**\n     *  <p> This method is called if the LoginContext's\n     *  overall authentication failed.\n     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n     *  did not succeed).\n     *\n     *  <p> If this LoginModule's own authentication attempt\n     *  succeeded (checked by retrieving the private state saved by the\n     *  <code>login</code> and <code>commit</code> methods),\n     *  then this method cleans up any state that was originally saved.\n     *\n     *  <p>\n     *\n     *  @exception LoginException if the abort fails.\n     *\n     *  @return false if this LoginModule's own login and/or commit attempts\n     * \t\tfailed, and true otherwise.\n     */\n    public boolean abort() throws LoginException {\n        if (succeeded == false) {\n            return false;\n        } else if (succeeded == true && commitSucceeded == false) {\n            // login succeeded but overall authentication failed\n            succeeded = false;\n            username = null;\n            if (password != null) {\n                for (int i = 0; i < password.length; i++) password[i] = ' ';\n                password = null;\n            }\n            userPrincipal = null;\n            rolePrincipal = null;\n        } else {\n            // overall authentication succeeded and commit succeeded,\n            // but someone else's commit failed\n            logout();\n        }\n        return true;\n    }\n\n    /**\n     * Logout the user.\n     *\n     * <p> This method removes the <code>AACSPrincipal</code>\n     * that was added by the <code>commit</code> method.\n     *\n     * <p>\n     *\n     * @exception LoginException if the logout fails.\n     *\n     * @return true in all cases since this <code>LoginModule</code>\n     *          should not be ignored.\n     */\n    public boolean logout() throws LoginException {\n        subject.getPrincipals().remove(userPrincipal);\n        succeeded = false;\n        succeeded = commitSucceeded;\n        username = null;\n        if (password != null) {\n            for (int i = 0; i < password.length; i++) password[i] = ' ';\n            password = null;\n        }\n        userPrincipal = null;\n        rolePrincipal = null;\n        user = null;\n        login = null;\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModuleTest2.java",
		"test_prompt": "// AACSLoginModuleTest2.java\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AACSLoginModule}.\n* It contains ten unit test cases for the {@link AACSLoginModule#abort()} method.\n*/\nclass AACSLoginModuleTest2 {"
	},
	{
		"original_code": "// AACSLoginModule.java\n/*\n *   CVS $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $\n * \n *   ====================================================================\n *                 Open Source Health Records Exchange\n *   ====================================================================\n *\n *   Copyright (C) 2005 Browsersoft Inc.\n *\n *   This program is free software; you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License, version 2, \n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   The GNU General Public License is available at\n *   http://www.fsf.org/licensing/licenses/gpl.html\n *\n *   Email: info@openhre.org\n *   Web:   http://www.openhre.org\n */\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\n\n/**\n * <p> This sample LoginModule authenticates users with a password.\n *\n * <p> This LoginModule only recognizes one user:\ttestUser\n * <p> testUser's password is:\ttestPassword\n *\n * <p> If testUser successfully authenticates itself,\n * an <code>AACSPrincipal</code> with the testUser's user name\n * is added to the Subject.\n *\n * <p> This LoginModule recognizes the debug option.\n * If set to true in the login Configuration,\n * debug messages will be output to the output stream, System.out.\n *\n * <p> The config option specifies the AACS Properties file,\n * without the assumed \".properties\" suffix.\n *\n * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $\n */\npublic class AACSLoginModule implements LoginModule {\n\n    // initial state\n    private Subject subject;\n\n    private CallbackHandler callbackHandler;\n\n    // shared between the LoginModules\n    private Map sharedState;\n\n    private Map options;\n\n    // configurable option\n    private boolean debug = false;\n\n    // the authentication status\n    private boolean succeeded = false;\n\n    private boolean commitSucceeded = false;\n\n    // username and password\n    private String username;\n\n    private char[] password;\n\n    // Principals\n    private AACSUserPrincipal userPrincipal;\n\n    private AACSRolePrincipal rolePrincipal;\n\n    // AACS Beans\n    private User user;\n\n    private Login login;\n\n    // Default and actual AACS properties file\n    private final static String aacsProps = \"/AACS\";\n\n    private static String propsfile = null;\n\n    /**\n     *  Initialize this <code>LoginModule</code>.\n     *\n     *  <p>\n     *\n     *  @param subject the <code>Subject</code> to be authenticated. <p>\n     *\n     *  @param callbackHandler a <code>CallbackHandler</code> for communicating\n     * \t\t\twith the end user (prompting for user names and\n     * \t\t\tpasswords, for example). <p>\n     *\n     *  @param sharedState shared <code>LoginModule</code> state. <p>\n     *\n     *  @param options options specified in the login\n     * \t\t\t<code>Configuration</code> for this particular\n     * \t\t\t<code>LoginModule</code>.\n     */\n    public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {\n        this.subject = subject;\n        this.callbackHandler = callbackHandler;\n        this.sharedState = sharedState;\n        this.options = options;\n        user = null;\n        login = null;\n        // initialize any configured options\n        debug = \"true\".equalsIgnoreCase((String) options.get(\"debug\"));\n        if (propsfile == null) {\n            // only do the first time\n            propsfile = (String) options.get(\"config\");\n            if (propsfile == null)\n                propsfile = aacsProps;\n            Login.setConfigFile(propsfile);\n            Login.init();\n        }\n        if (debug)\n            System.out.println(\"AACSLoginModule initialized\");\n    }\n\n    /**\n     *  Authenticate the user with a user name and password.\n     *\n     *  <p>\n     *\n     *  @return true in all cases since this <code>LoginModule</code>\n     * \t\tshould not be ignored.\n     *\n     *  @exception FailedLoginException if the authentication fails. <p>\n     *\n     *  @exception LoginException if this <code>LoginModule</code>\n     * \t\tis unable to perform the authentication.\n     */\n    public boolean login() throws LoginException {\n        if (debug)\n            System.out.println(\"AACSLoginModule login() called\");\n        // prompt for a user name and password\n        if (callbackHandler == null)\n            throw new LoginException(\"Error: no CallbackHandler available \" + \"to garner authentication information from the user\");\n        Callback[] callbacks = new Callback[2];\n        callbacks[0] = new NameCallback(\"user name: \");\n        callbacks[1] = new PasswordCallback(\"password: \", false);\n        try {\n            callbackHandler.handle(callbacks);\n            username = ((NameCallback) callbacks[0]).getName();\n            char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();\n            if (tmpPassword == null) {\n                // treat a NULL password as an empty password\n                tmpPassword = new char[0];\n            }\n            password = new char[tmpPassword.length];\n            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);\n            ((PasswordCallback) callbacks[1]).clearPassword();\n        } catch (java.io.IOException ioe) {\n            throw new LoginException(ioe.toString());\n        } catch (UnsupportedCallbackException uce) {\n            throw new LoginException(\"Error: \" + uce.getCallback().toString() + \" not available to garner authentication information \" + \"from the user\");\n        }\n        // print debugging information\n        if (debug) {\n            System.out.println(\"\\t\\t[AACSLoginModule] \" + \"user entered user name: \" + username);\n            System.out.print(\"\\t\\t[AACSLoginModule] \" + \"user entered password: \");\n            for (int i = 0; i < password.length; i++) System.out.print(password[i]);\n            System.out.println();\n        }\n        // verify the username/password\n        login = new Login(username);\n        login.setPassword(new String(password));\n        user = login.authenticate();\n        if (user != null) {\n            if (debug)\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"authentication succeeded\");\n            succeeded = true;\n            return true;\n        } else {\n            // authentication failed -- clean out state\n            if (debug)\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"authentication failed\");\n            succeeded = false;\n            username = null;\n            for (int i = 0; i < password.length; i++) password[i] = ' ';\n            password = null;\n            throw new FailedLoginException(\"Login Incorrect\");\n        }\n    }\n\n    /**\n     *  <p> This method is called if the LoginContext's\n     *  overall authentication succeeded\n     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n     *  succeeded).\n     *\n     *  <p> If this LoginModule's own authentication attempt\n     *  succeeded (checked by retrieving the private state saved by the\n     *  <code>login</code> method), then this method associates a\n     *  <code>AACSUserPrincipal</code> and <code>AACSRolePrincipal</code>\n     *  with the <code>Subject</code> located in the\n     *  <code>LoginModule</code>.  If this LoginModule's own\n     *  authentication attempted failed, then this method removes\n     *  any state that was originally saved.\n     *\n     *  <p>\n     *\n     *  @exception LoginException if the commit fails.\n     *\n     *  @return true if this LoginModule's own login and commit\n     * \t\tattempts succeeded, or false otherwise.\n     */\n    public boolean commit() throws LoginException {\n        if (succeeded == false) {\n            return false;\n        } else {\n            // add a Principal (authenticated identity)\n            // to the Subject\n            // add an AACSUserPrincipal to the Subject\n            userPrincipal = new AACSUserPrincipal(username);\n            if (!subject.getPrincipals().contains(userPrincipal))\n                subject.getPrincipals().add(userPrincipal);\n            if (debug) {\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"added AACSUserPrincipal [\" + userPrincipal + \"] to Subject\");\n            }\n            // add the \"aacs_role\" to the Subject\n            rolePrincipal = new AACSRolePrincipal(\"aacs_role\");\n            if (!subject.getPrincipals().contains(rolePrincipal))\n                subject.getPrincipals().add(rolePrincipal);\n            if (debug) {\n                System.out.println(\"\\t\\t[AACSLoginModule] \" + \"added AACSRolePrincipal [\" + rolePrincipal + \"] to Subject\");\n            }\n            // in any case, clean out state\n            username = null;\n            for (int i = 0; i < password.length; i++) password[i] = ' ';\n            password = null;\n            commitSucceeded = true;\n            return true;\n        }\n    }\n\n    /**\n     *  <p> This method is called if the LoginContext's\n     *  overall authentication failed.\n     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules\n     *  did not succeed).\n     *\n     *  <p> If this LoginModule's own authentication attempt\n     *  succeeded (checked by retrieving the private state saved by the\n     *  <code>login</code> and <code>commit</code> methods),\n     *  then this method cleans up any state that was originally saved.\n     *\n     *  <p>\n     *\n     *  @exception LoginException if the abort fails.\n     *\n     *  @return false if this LoginModule's own login and/or commit attempts\n     * \t\tfailed, and true otherwise.\n     */\n    public boolean abort() throws LoginException {\n        if (succeeded == false) {\n            return false;\n        } else if (succeeded == true && commitSucceeded == false) {\n            // login succeeded but overall authentication failed\n            succeeded = false;\n            username = null;\n            if (password != null) {\n                for (int i = 0; i < password.length; i++) password[i] = ' ';\n                password = null;\n            }\n            userPrincipal = null;\n            rolePrincipal = null;\n        } else {\n            // overall authentication succeeded and commit succeeded,\n            // but someone else's commit failed\n            logout();\n        }\n        return true;\n    }\n\n    /**\n     * Logout the user.\n     *\n     * <p> This method removes the <code>AACSPrincipal</code>\n     * that was added by the <code>commit</code> method.\n     *\n     * <p>\n     *\n     * @exception LoginException if the logout fails.\n     *\n     * @return true in all cases since this <code>LoginModule</code>\n     *          should not be ignored.\n     */\n    public boolean logout() throws LoginException {\n        subject.getPrincipals().remove(userPrincipal);\n        succeeded = false;\n        succeeded = commitSucceeded;\n        username = null;\n        if (password != null) {\n            for (int i = 0; i < password.length; i++) password[i] = ' ';\n            password = null;\n        }\n        userPrincipal = null;\n        rolePrincipal = null;\n        user = null;\n        login = null;\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModuleTest3.java",
		"test_prompt": "// AACSLoginModuleTest3.java\npackage com.browsersoft.jaas;\n\nimport java.util.*;\nimport java.io.IOException;\nimport javax.security.auth.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.spi.*;\nimport com.browsersoft.aacs.Login;\nimport com.browsersoft.aacs.User;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AACSLoginModule}.\n* It contains ten unit test cases for the {@link AACSLoginModule#logout()} method.\n*/\nclass AACSLoginModuleTest3 {"
	}
]