[
	{
		"original_code": "// CurrentURLBO.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.bo;\r\n\r\nimport java.util.Collection;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\nimport net.sourceforge.ext4j.taglib.bo.Request;\r\nimport net.sourceforge.ext4j.taglib.bo.RequestParam;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class CurrentURLBO {\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_QMARK = \"?\";\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.web.module.IWebModule#register(javax.servlet.http.HttpServletRequest)\r\n\t */\r\n    public static IRequest getCurrentURL(HttpServletRequest pRequest) {\r\n        String oURL = pRequest.getRequestURI() + ((pRequest.getQueryString() != null) ? STRING_QMARK + pRequest.getQueryString() : STRING_EMPTY);\r\n        IRequest oReq = new Request(oURL);\r\n        return new RootRequest(oReq);\r\n    }\r\n\r\n    /**\r\n     * Returns clone to so we can keep using the same variable on the page.\r\n     * WARNING: calls to getParam():RequestParam won't return a clone and thus will affect the page variable.\r\n     * @author luc\r\n     */\r\n    static class RootRequest implements IRequest {\r\n\r\n        private IRequest mRoot;\r\n\r\n        public RootRequest(IRequest pOriginal) {\r\n            mRoot = pOriginal;\r\n        }\r\n\r\n        public IRequest addParam(String pName, String pValue) {\r\n            return mRoot.clone().addParam(pName, pValue);\r\n        }\r\n\r\n        public IRequest cleanEmptyParams() {\r\n            return mRoot.cleanEmptyParams();\r\n        }\r\n\r\n        public String getBaseURL() {\r\n            return mRoot.getBaseURL();\r\n        }\r\n\r\n        public String getHashValue() {\r\n            return mRoot.getHashValue();\r\n        }\r\n\r\n        public RequestParam getParam(String pName, boolean pIgnoreCase) {\r\n            return mRoot.getParam(pName, pIgnoreCase);\r\n        }\r\n\r\n        public RequestParam getParam(String pName) {\r\n            return mRoot.getParam(pName);\r\n        }\r\n\r\n        public Collection<RequestParam> getParams() {\r\n            return mRoot.getParams();\r\n        }\r\n\r\n        public String getQueryString() {\r\n            return mRoot.getQueryString();\r\n        }\r\n\r\n        public int getValue(String pName, int pDefault) {\r\n            return mRoot.getValue(pName, pDefault);\r\n        }\r\n\r\n        public String getValue(String pName, String pDefault) {\r\n            return mRoot.getValue(pName, pDefault);\r\n        }\r\n\r\n        public boolean isWebRequest() {\r\n            return mRoot.isWebRequest();\r\n        }\r\n\r\n        public IRequest removeParam(String pName) {\r\n            return mRoot.clone().removeParam(pName);\r\n        }\r\n\r\n        public IRequest setBaseURL(String pBaseURL) {\r\n            return mRoot.clone().setBaseURL(pBaseURL);\r\n        }\r\n\r\n        public IRequest setHashValue(String pValue) {\r\n            return mRoot.clone().setHashValue(pValue);\r\n        }\r\n\r\n        public IRequest setParam(RequestParam pParam) {\r\n            return mRoot.clone().setParam(pParam);\r\n        }\r\n\r\n        public IRequest setParam(String pName, String pValue) {\r\n            return mRoot.clone().setParam(pName, pValue);\r\n        }\r\n\r\n        public IRequest toBaseURL() {\r\n            return mRoot.toBaseURL();\r\n        }\r\n\r\n        public IRequest clone() {\r\n            return mRoot;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return mRoot.toString();\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/CurrentURLBOTest.java",
		"test_prompt": "// CurrentURLBOTest.java\npackage net.sourceforge.ext4j.taglib.bo;\n\nimport java.util.Collection;\nimport javax.servlet.http.HttpServletRequest;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport net.sourceforge.ext4j.taglib.bo.Request;\nimport net.sourceforge.ext4j.taglib.bo.RequestParam;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CurrentURLBO}.\n* It contains ten unit test cases for the {@link CurrentURLBO#getCurrentURL(HttpServletRequest)} method.\n*/\nclass CurrentURLBOTest {"
	},
	{
		"original_code": "// TagUtil.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.bo;\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport javax.servlet.jsp.PageContext;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class TagUtil {\r\n\r\n    private static final String SLASH = \"/\";\r\n\r\n    /**\r\n     * (from ImportTag, standard taglib 1.0, apache)\r\n     * <p>\r\n     * Valid characters in a scheme.\r\n     * </p>\r\n     * <p>\r\n     * RFC 1738 says the following:\r\n     * </p>\r\n     * <blockquote> Scheme names consist of a sequence of characters. The lower\r\n     * case letters \"a\"--\"z\", digits, and the characters plus (\"+\"), period\r\n     * (\".\"), and hyphen (\"-\") are allowed. For resiliency, programs\r\n     * interpreting URLs should treat upper case letters as equivalent to lower\r\n     * case in scheme names (e.g., allow \"HTTP\" as well as \"http\").\r\n     * </blockquote>\r\n     * <p>\r\n     * We treat as absolute any URL that begins with such a scheme name,\r\n     * followed by a colon.\r\n     * </p>\r\n     */\r\n    public static final String VALID_SCHEME_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+.-\";\r\n\r\n    /**\r\n     * (from ImportTag, standard taglib 1.0, apache) Returns <tt>true</tt> if\r\n     * our current URL is absolute, <tt>false</tt> otherwise.\r\n     */\r\n    public static boolean isAbsoluteUrl(String url) {\r\n        // a null URL is not absolute, by our definition\r\n        if (url == null)\r\n            return false;\r\n        // do a fast, simple check first\r\n        int colonPos;\r\n        if ((colonPos = url.indexOf(\":\")) == -1)\r\n            return false;\r\n        // if we DO have a colon, make sure that every character\r\n        // leading up to it is a valid scheme character\r\n        for (int i = 0; i < colonPos; i++) if (VALID_SCHEME_CHARS.indexOf(url.charAt(i)) == -1)\r\n            return false;\r\n        // if so, we've got an absolute url\r\n        return true;\r\n    }\r\n\r\n    public static String resolveUrl(String pURL, String pContext, PageContext pPageContext) throws JspException {\r\n        if (pPageContext == null)\r\n            return pURL;\r\n        // don't touch absolute URLs\r\n        if (isAbsoluteUrl(pURL))\r\n            return pURL;\r\n        // normalize relative URLs against a context root\r\n        HttpServletRequest request = (HttpServletRequest) pPageContext.getRequest();\r\n        if (pContext == null) {\r\n            if (pURL.startsWith(SLASH)) {\r\n                return (request.getContextPath() + pURL);\r\n            } else {\r\n                return pURL;\r\n            }\r\n        } else {\r\n            if (!pContext.startsWith(SLASH) || !pURL.startsWith(SLASH))\r\n                throw new JspTagException(\"Invalid context\");\r\n            return (pContext + pURL);\r\n        }\r\n    }\r\n\r\n    public static String rewriteURL(String pURL, PageContext pPageContext) throws JspException {\r\n        if (pPageContext == null)\r\n            return pURL;\r\n        // add (already encoded) parameters\r\n        String oBaseUrl = resolveUrl(pURL, null, pPageContext);\r\n        String oResult = oBaseUrl;\r\n        // String oResult = params.aggregateParams(baseUrl);\r\n        // if the URL is relative, rewrite it\r\n        if (!isAbsoluteUrl(oResult)) {\r\n            HttpServletResponse response = ((HttpServletResponse) pPageContext.getResponse());\r\n            oResult = response.encodeURL(oResult);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    public static class ParamManager {\r\n\r\n        private static final String QUESTION_MARK = \"?\";\r\n\r\n        private static final String AMPERSAND = \"&\";\r\n\r\n        private static final String EMPTY = \"\";\r\n\r\n        private List<String> mNames = new LinkedList<String>();\r\n\r\n        private List<String> mValues = new LinkedList<String>();\r\n\r\n        private boolean mDone = false;\r\n\r\n        /**\r\n         * Adds a new parameter to the list.\r\n         *\r\n         * @param pName\r\n         * @param pValue\r\n         */\r\n        public void addParameter(String pName, String pValue) {\r\n            if (mDone)\r\n                throw new IllegalStateException();\r\n            if (pName != null) {\r\n                mNames.add(pName);\r\n                if (pValue != null)\r\n                    mValues.add(pValue);\r\n                else\r\n                    mValues.add(EMPTY);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Produces a new URL with the stored parameters, in the appropriate\r\n         * order.\r\n         */\r\n        public String aggregateParams(String pURL) {\r\n            /*\r\n\t\t\t * Since for efficiency we're destructive to the param lists, we\r\n\t\t\t * don't want to run multiple times.\r\n\t\t\t */\r\n            if (mDone)\r\n                throw new IllegalStateException();\r\n            mDone = true;\r\n            // // reverse the order of our two lists\r\n            // Collections.reverse(this.names);\r\n            // Collections.reverse(this.values);\r\n            // build a string from the parameter list\r\n            StringBuffer oNewParams = new StringBuffer();\r\n            for (int i = 0; i < mNames.size(); i++) {\r\n                oNewParams.append(mNames.get(i) + \"=\" + mValues.get(i));\r\n                if (i < (mNames.size() - 1))\r\n                    oNewParams.append(AMPERSAND);\r\n            }\r\n            // insert these parameters into the URL as appropriate\r\n            if (oNewParams.length() > 0) {\r\n                int oQuestionMark = pURL.indexOf(QUESTION_MARK);\r\n                if (oQuestionMark == -1) {\r\n                    return (pURL + QUESTION_MARK + oNewParams);\r\n                } else {\r\n                    StringBuffer oWorkingUrl = new StringBuffer(pURL);\r\n                    oWorkingUrl.insert(oQuestionMark + 1, (oNewParams + AMPERSAND));\r\n                    return oWorkingUrl.toString();\r\n                }\r\n            } else {\r\n                return pURL;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/TagUtilTest0.java",
		"test_prompt": "// TagUtilTest0.java\npackage net.sourceforge.ext4j.taglib.bo;\n\nimport java.util.LinkedList;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspTagException;\nimport javax.servlet.jsp.PageContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TagUtil}.\n* It contains ten unit test cases for the {@link TagUtil#isAbsoluteUrl(String)} method.\n*/\nclass TagUtilTest0 {"
	},
	{
		"original_code": "// TagUtil.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.bo;\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport javax.servlet.jsp.PageContext;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class TagUtil {\r\n\r\n    private static final String SLASH = \"/\";\r\n\r\n    /**\r\n     * (from ImportTag, standard taglib 1.0, apache)\r\n     * <p>\r\n     * Valid characters in a scheme.\r\n     * </p>\r\n     * <p>\r\n     * RFC 1738 says the following:\r\n     * </p>\r\n     * <blockquote> Scheme names consist of a sequence of characters. The lower\r\n     * case letters \"a\"--\"z\", digits, and the characters plus (\"+\"), period\r\n     * (\".\"), and hyphen (\"-\") are allowed. For resiliency, programs\r\n     * interpreting URLs should treat upper case letters as equivalent to lower\r\n     * case in scheme names (e.g., allow \"HTTP\" as well as \"http\").\r\n     * </blockquote>\r\n     * <p>\r\n     * We treat as absolute any URL that begins with such a scheme name,\r\n     * followed by a colon.\r\n     * </p>\r\n     */\r\n    public static final String VALID_SCHEME_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+.-\";\r\n\r\n    /**\r\n     * (from ImportTag, standard taglib 1.0, apache) Returns <tt>true</tt> if\r\n     * our current URL is absolute, <tt>false</tt> otherwise.\r\n     */\r\n    public static boolean isAbsoluteUrl(String url) {\r\n        // a null URL is not absolute, by our definition\r\n        if (url == null)\r\n            return false;\r\n        // do a fast, simple check first\r\n        int colonPos;\r\n        if ((colonPos = url.indexOf(\":\")) == -1)\r\n            return false;\r\n        // if we DO have a colon, make sure that every character\r\n        // leading up to it is a valid scheme character\r\n        for (int i = 0; i < colonPos; i++) if (VALID_SCHEME_CHARS.indexOf(url.charAt(i)) == -1)\r\n            return false;\r\n        // if so, we've got an absolute url\r\n        return true;\r\n    }\r\n\r\n    public static String resolveUrl(String pURL, String pContext, PageContext pPageContext) throws JspException {\r\n        if (pPageContext == null)\r\n            return pURL;\r\n        // don't touch absolute URLs\r\n        if (isAbsoluteUrl(pURL))\r\n            return pURL;\r\n        // normalize relative URLs against a context root\r\n        HttpServletRequest request = (HttpServletRequest) pPageContext.getRequest();\r\n        if (pContext == null) {\r\n            if (pURL.startsWith(SLASH)) {\r\n                return (request.getContextPath() + pURL);\r\n            } else {\r\n                return pURL;\r\n            }\r\n        } else {\r\n            if (!pContext.startsWith(SLASH) || !pURL.startsWith(SLASH))\r\n                throw new JspTagException(\"Invalid context\");\r\n            return (pContext + pURL);\r\n        }\r\n    }\r\n\r\n    public static String rewriteURL(String pURL, PageContext pPageContext) throws JspException {\r\n        if (pPageContext == null)\r\n            return pURL;\r\n        // add (already encoded) parameters\r\n        String oBaseUrl = resolveUrl(pURL, null, pPageContext);\r\n        String oResult = oBaseUrl;\r\n        // String oResult = params.aggregateParams(baseUrl);\r\n        // if the URL is relative, rewrite it\r\n        if (!isAbsoluteUrl(oResult)) {\r\n            HttpServletResponse response = ((HttpServletResponse) pPageContext.getResponse());\r\n            oResult = response.encodeURL(oResult);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    public static class ParamManager {\r\n\r\n        private static final String QUESTION_MARK = \"?\";\r\n\r\n        private static final String AMPERSAND = \"&\";\r\n\r\n        private static final String EMPTY = \"\";\r\n\r\n        private List<String> mNames = new LinkedList<String>();\r\n\r\n        private List<String> mValues = new LinkedList<String>();\r\n\r\n        private boolean mDone = false;\r\n\r\n        /**\r\n         * Adds a new parameter to the list.\r\n         *\r\n         * @param pName\r\n         * @param pValue\r\n         */\r\n        public void addParameter(String pName, String pValue) {\r\n            if (mDone)\r\n                throw new IllegalStateException();\r\n            if (pName != null) {\r\n                mNames.add(pName);\r\n                if (pValue != null)\r\n                    mValues.add(pValue);\r\n                else\r\n                    mValues.add(EMPTY);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Produces a new URL with the stored parameters, in the appropriate\r\n         * order.\r\n         */\r\n        public String aggregateParams(String pURL) {\r\n            /*\r\n\t\t\t * Since for efficiency we're destructive to the param lists, we\r\n\t\t\t * don't want to run multiple times.\r\n\t\t\t */\r\n            if (mDone)\r\n                throw new IllegalStateException();\r\n            mDone = true;\r\n            // // reverse the order of our two lists\r\n            // Collections.reverse(this.names);\r\n            // Collections.reverse(this.values);\r\n            // build a string from the parameter list\r\n            StringBuffer oNewParams = new StringBuffer();\r\n            for (int i = 0; i < mNames.size(); i++) {\r\n                oNewParams.append(mNames.get(i) + \"=\" + mValues.get(i));\r\n                if (i < (mNames.size() - 1))\r\n                    oNewParams.append(AMPERSAND);\r\n            }\r\n            // insert these parameters into the URL as appropriate\r\n            if (oNewParams.length() > 0) {\r\n                int oQuestionMark = pURL.indexOf(QUESTION_MARK);\r\n                if (oQuestionMark == -1) {\r\n                    return (pURL + QUESTION_MARK + oNewParams);\r\n                } else {\r\n                    StringBuffer oWorkingUrl = new StringBuffer(pURL);\r\n                    oWorkingUrl.insert(oQuestionMark + 1, (oNewParams + AMPERSAND));\r\n                    return oWorkingUrl.toString();\r\n                }\r\n            } else {\r\n                return pURL;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/TagUtilTest1.java",
		"test_prompt": "// TagUtilTest1.java\npackage net.sourceforge.ext4j.taglib.bo;\n\nimport java.util.LinkedList;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspTagException;\nimport javax.servlet.jsp.PageContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TagUtil}.\n* It contains ten unit test cases for the {@link TagUtil#resolveUrl(String, String, PageContext)} method.\n*/\nclass TagUtilTest1 {"
	},
	{
		"original_code": "// TagUtil.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.bo;\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport javax.servlet.jsp.PageContext;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class TagUtil {\r\n\r\n    private static final String SLASH = \"/\";\r\n\r\n    /**\r\n     * (from ImportTag, standard taglib 1.0, apache)\r\n     * <p>\r\n     * Valid characters in a scheme.\r\n     * </p>\r\n     * <p>\r\n     * RFC 1738 says the following:\r\n     * </p>\r\n     * <blockquote> Scheme names consist of a sequence of characters. The lower\r\n     * case letters \"a\"--\"z\", digits, and the characters plus (\"+\"), period\r\n     * (\".\"), and hyphen (\"-\") are allowed. For resiliency, programs\r\n     * interpreting URLs should treat upper case letters as equivalent to lower\r\n     * case in scheme names (e.g., allow \"HTTP\" as well as \"http\").\r\n     * </blockquote>\r\n     * <p>\r\n     * We treat as absolute any URL that begins with such a scheme name,\r\n     * followed by a colon.\r\n     * </p>\r\n     */\r\n    public static final String VALID_SCHEME_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+.-\";\r\n\r\n    /**\r\n     * (from ImportTag, standard taglib 1.0, apache) Returns <tt>true</tt> if\r\n     * our current URL is absolute, <tt>false</tt> otherwise.\r\n     */\r\n    public static boolean isAbsoluteUrl(String url) {\r\n        // a null URL is not absolute, by our definition\r\n        if (url == null)\r\n            return false;\r\n        // do a fast, simple check first\r\n        int colonPos;\r\n        if ((colonPos = url.indexOf(\":\")) == -1)\r\n            return false;\r\n        // if we DO have a colon, make sure that every character\r\n        // leading up to it is a valid scheme character\r\n        for (int i = 0; i < colonPos; i++) if (VALID_SCHEME_CHARS.indexOf(url.charAt(i)) == -1)\r\n            return false;\r\n        // if so, we've got an absolute url\r\n        return true;\r\n    }\r\n\r\n    public static String resolveUrl(String pURL, String pContext, PageContext pPageContext) throws JspException {\r\n        if (pPageContext == null)\r\n            return pURL;\r\n        // don't touch absolute URLs\r\n        if (isAbsoluteUrl(pURL))\r\n            return pURL;\r\n        // normalize relative URLs against a context root\r\n        HttpServletRequest request = (HttpServletRequest) pPageContext.getRequest();\r\n        if (pContext == null) {\r\n            if (pURL.startsWith(SLASH)) {\r\n                return (request.getContextPath() + pURL);\r\n            } else {\r\n                return pURL;\r\n            }\r\n        } else {\r\n            if (!pContext.startsWith(SLASH) || !pURL.startsWith(SLASH))\r\n                throw new JspTagException(\"Invalid context\");\r\n            return (pContext + pURL);\r\n        }\r\n    }\r\n\r\n    public static String rewriteURL(String pURL, PageContext pPageContext) throws JspException {\r\n        if (pPageContext == null)\r\n            return pURL;\r\n        // add (already encoded) parameters\r\n        String oBaseUrl = resolveUrl(pURL, null, pPageContext);\r\n        String oResult = oBaseUrl;\r\n        // String oResult = params.aggregateParams(baseUrl);\r\n        // if the URL is relative, rewrite it\r\n        if (!isAbsoluteUrl(oResult)) {\r\n            HttpServletResponse response = ((HttpServletResponse) pPageContext.getResponse());\r\n            oResult = response.encodeURL(oResult);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    public static class ParamManager {\r\n\r\n        private static final String QUESTION_MARK = \"?\";\r\n\r\n        private static final String AMPERSAND = \"&\";\r\n\r\n        private static final String EMPTY = \"\";\r\n\r\n        private List<String> mNames = new LinkedList<String>();\r\n\r\n        private List<String> mValues = new LinkedList<String>();\r\n\r\n        private boolean mDone = false;\r\n\r\n        /**\r\n         * Adds a new parameter to the list.\r\n         *\r\n         * @param pName\r\n         * @param pValue\r\n         */\r\n        public void addParameter(String pName, String pValue) {\r\n            if (mDone)\r\n                throw new IllegalStateException();\r\n            if (pName != null) {\r\n                mNames.add(pName);\r\n                if (pValue != null)\r\n                    mValues.add(pValue);\r\n                else\r\n                    mValues.add(EMPTY);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Produces a new URL with the stored parameters, in the appropriate\r\n         * order.\r\n         */\r\n        public String aggregateParams(String pURL) {\r\n            /*\r\n\t\t\t * Since for efficiency we're destructive to the param lists, we\r\n\t\t\t * don't want to run multiple times.\r\n\t\t\t */\r\n            if (mDone)\r\n                throw new IllegalStateException();\r\n            mDone = true;\r\n            // // reverse the order of our two lists\r\n            // Collections.reverse(this.names);\r\n            // Collections.reverse(this.values);\r\n            // build a string from the parameter list\r\n            StringBuffer oNewParams = new StringBuffer();\r\n            for (int i = 0; i < mNames.size(); i++) {\r\n                oNewParams.append(mNames.get(i) + \"=\" + mValues.get(i));\r\n                if (i < (mNames.size() - 1))\r\n                    oNewParams.append(AMPERSAND);\r\n            }\r\n            // insert these parameters into the URL as appropriate\r\n            if (oNewParams.length() > 0) {\r\n                int oQuestionMark = pURL.indexOf(QUESTION_MARK);\r\n                if (oQuestionMark == -1) {\r\n                    return (pURL + QUESTION_MARK + oNewParams);\r\n                } else {\r\n                    StringBuffer oWorkingUrl = new StringBuffer(pURL);\r\n                    oWorkingUrl.insert(oQuestionMark + 1, (oNewParams + AMPERSAND));\r\n                    return oWorkingUrl.toString();\r\n                }\r\n            } else {\r\n                return pURL;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/TagUtilTest2.java",
		"test_prompt": "// TagUtilTest2.java\npackage net.sourceforge.ext4j.taglib.bo;\n\nimport java.util.LinkedList;\nimport java.util.List;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspTagException;\nimport javax.servlet.jsp.PageContext;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TagUtil}.\n* It contains ten unit test cases for the {@link TagUtil#rewriteURL(String, PageContext)} method.\n*/\nclass TagUtilTest2 {"
	},
	{
		"original_code": "// Request.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.bo;\r\n\r\nimport java.util.Collection;\r\nimport java.util.HashSet;\r\nimport java.util.Hashtable;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Request implements IRequest {\r\n\r\n    private static final String FILE_SCHEME = \"file:/\";\r\n\r\n    private static final String STRING_QMARK = \"?\";\r\n\r\n    private static final String STRING_HASH = \"#\";\r\n\r\n    private static final String STRING_AND = \"&\";\r\n\r\n    private static final String STRING_EQUAL = \"=\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private Map<String, RequestParam> mParams = new Hashtable<String, RequestParam>();\r\n\r\n    private boolean mIsWebRequest = false;\r\n\r\n    private String mBaseURL;\r\n\r\n    // string after the hash (#) sign\r\n    private String mHashValue;\r\n\r\n    private boolean mNoEmptyParams = false;\r\n\r\n    private Log mLogger = LogFactory.getLog(Request.class);\r\n\r\n    /**\r\n     */\r\n    public Request() {\r\n        this((String) null, false);\r\n    }\r\n\r\n    public Request(boolean pNoEmptyParams) {\r\n        this((String) null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(HttpServletRequest pRequest) {\r\n        this(pRequest, false);\r\n    }\r\n\r\n    public Request(HttpServletRequest pOrig, boolean pNoEmptyParams) {\r\n        this((pOrig != null) ? pOrig.getRequestURL().toString() + ((pOrig.getQueryString() != null) ? STRING_QMARK + pOrig.getQueryString() : STRING_EMPTY) : null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(String pUrl) {\r\n        this(pUrl, false);\r\n    }\r\n\r\n    public Request(String pUrl, boolean pNoEmptyParams) {\r\n        mNoEmptyParams = pNoEmptyParams;\r\n        if (pUrl != null)\r\n            parse(pUrl);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#cleanEmptyParams()\r\n\t */\r\n    public IRequest cleanEmptyParams() {\r\n        RequestParam oParam = null;\r\n        Set<String> oKeys = new HashSet<String>();\r\n        oKeys.addAll(mParams.keySet());\r\n        for (String oName : oKeys) {\r\n            oParam = mParams.get(oName);\r\n            if (oParam.getTotalValues() == 0) {\r\n                mParams.remove(oName);\r\n                continue;\r\n            }\r\n            boolean oEmpty = false;\r\n            for (int i = 0; i < oParam.getTotalValues() && !oEmpty; i++) {\r\n                oEmpty = ((oParam.getValue(i) == null) || (oParam.getValue(i).trim().length() == 0));\r\n            }\r\n            if (oEmpty)\r\n                mParams.remove(oName);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getBaseURL()\r\n\t */\r\n    public String getBaseURL() {\r\n        return mBaseURL;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setBaseURL(java.lang.String)\r\n\t */\r\n    public IRequest setBaseURL(String pBaseURL) {\r\n        mBaseURL = pBaseURL;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#isWebRequest()\r\n\t */\r\n    public boolean isWebRequest() {\r\n        return mIsWebRequest;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParams()\r\n\t */\r\n    public Collection<RequestParam> getParams() {\r\n        return mParams.values();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String)\r\n\t */\r\n    public RequestParam getParam(String pName) {\r\n        return getParam(pName, true);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String, boolean)\r\n\t */\r\n    public RequestParam getParam(String pName, boolean pIgnoreCase) {\r\n        if (pName == null)\r\n            return null;\r\n        if (!pIgnoreCase) {\r\n            return mParams.get(pName);\r\n        }\r\n        RequestParam oResult = null;\r\n        for (String oKey : mParams.keySet()) {\r\n            if (pName.equalsIgnoreCase(oKey)) {\r\n                oResult = mParams.get(oKey);\r\n                break;\r\n            }\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toBaseURL()\r\n\t */\r\n    public IRequest toBaseURL() {\r\n        mParams = new Hashtable<String, RequestParam>();\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, java.lang.String)\r\n\t */\r\n    public String getValue(String pName, String pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        String oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0);\r\n        return URLDecode(oResult);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, int)\r\n\t */\r\n    public int getValue(String pName, int pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        int oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0, pDefault);\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getHashValue()\r\n\t */\r\n    public String getHashValue() {\r\n        return mHashValue;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setHashValue(java.lang.String)\r\n\t */\r\n    public Request setHashValue(String pValue) {\r\n        mHashValue = pValue;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#removeParam(java.lang.String)\r\n\t */\r\n    public IRequest removeParam(String pName) {\r\n        if (mParams.size() > 0) {\r\n            RequestParam oParam = getParam(pName, true);\r\n            if (oParam != null)\r\n                mParams.remove(oParam.getName());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#addParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest addParam(String pName, String pValue) {\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam == null) {\r\n            oParam = new RequestParam(pName);\r\n            mParams.put(pName, oParam);\r\n        }\r\n        oParam.addValue(URLEncode(pValue));\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest setParam(String pName, String pValue) {\r\n        RequestParam oParam = new RequestParam(pName);\r\n        oParam.addValue(URLEncode(pValue));\r\n        return setParam(oParam);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(com.tripfilms.webtool.businessobject.Request.RequestParam)\r\n\t */\r\n    public IRequest setParam(RequestParam pParam) {\r\n        if (pParam == null)\r\n            return this;\r\n        mParams.put(pParam.getName(), pParam);\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getQueryString()\r\n\t */\r\n    public String getQueryString() {\r\n        StringBuilder oQS = new StringBuilder();\r\n        RequestParam oParam = null;\r\n        boolean oFirstPass = true;\r\n        for (String oName : mParams.keySet()) {\r\n            oParam = mParams.get(oName);\r\n            for (int i = 0; i < oParam.getTotalValues(); i++) {\r\n                if (oFirstPass) {\r\n                    oQS.append(STRING_QMARK);\r\n                } else {\r\n                    oQS.append(STRING_AND);\r\n                }\r\n                oFirstPass = false;\r\n                oQS.append(oParam.getName() + STRING_EQUAL + oParam.getValue(i));\r\n            }\r\n        }\r\n        return oQS.toString();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toString()\r\n\t */\r\n    @Override\r\n    public String toString() {\r\n        return getBaseURL() + getQueryString() + ((mHashValue != null) ? STRING_HASH + mHashValue : STRING_EMPTY);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object pObj) {\r\n        if (!(pObj instanceof Request))\r\n            return false;\r\n        IRequest oComparedTo = (IRequest) pObj;\r\n        // check if same base url\r\n        if ((mBaseURL != null && oComparedTo.getBaseURL() == null) || (mBaseURL == null && oComparedTo.getBaseURL() != null) || (!mBaseURL.equalsIgnoreCase(oComparedTo.getBaseURL())))\r\n            return false;\r\n        Collection<RequestParam> oParams = oComparedTo.getParams();\r\n        // check if same number of params\r\n        if (oParams.size() != getParams().size())\r\n            return false;\r\n        // check each parameter\r\n        for (RequestParam oParam : oParams) {\r\n            RequestParam oMyParam = getParam(oParam.getName(), true);\r\n            if (oMyParam == null)\r\n                return false;\r\n            // check number of values\r\n            if (oMyParam.getTotalValues() != oParam.getTotalValues())\r\n                return false;\r\n            // check values\r\n            for (int i = 0; i < oMyParam.getTotalValues(); i++) {\r\n                String oMyVal = oMyParam.getValue(i);\r\n                boolean oFound = false;\r\n                for (int j = 0; j < oParam.getTotalValues(); j++) {\r\n                    if (oParam.getValue(j).equals(oMyVal)) {\r\n                        oFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!oFound)\r\n                    return false;\r\n            }\r\n        }\r\n        if (!(mHashValue == null && oComparedTo.getHashValue() == null) && !(mHashValue.equals(oComparedTo.getHashValue())))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        return toString().hashCode();\r\n    }\r\n\r\n    protected void parse(String pUrl) {\r\n        if (pUrl == null)\r\n            return;\r\n        if (pUrl.startsWith(FILE_SCHEME)) {\r\n            return;\r\n        } else {\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Url \\\"\" + pUrl + \"\\\" is a web request\");\r\n            mIsWebRequest = true;\r\n        }\r\n        // Process \"#\" anchor\r\n        String oUrl = pUrl;\r\n        int oHashIndex = oUrl.indexOf(STRING_HASH);\r\n        if (oHashIndex > 0) {\r\n            if (oHashIndex < oUrl.length()) {\r\n                mHashValue = oUrl.substring(oHashIndex + 1);\r\n            }\r\n            oUrl = oUrl.substring(0, oHashIndex);\r\n        }\r\n        mBaseURL = oUrl;\r\n        // no query string to parse\r\n        if (oUrl.indexOf(STRING_QMARK) < 0)\r\n            return;\r\n        // Parsing query string\r\n        mBaseURL = oUrl.substring(0, oUrl.indexOf(STRING_QMARK));\r\n        String oQueryString = oUrl.substring(oUrl.indexOf(STRING_QMARK) + 1).trim();\r\n        if (oQueryString.length() == 0)\r\n            return;\r\n        String[] oPairs = oQueryString.split(STRING_AND);\r\n        for (String oName : oPairs) {\r\n            String[] oParam = oName.split(STRING_EQUAL);\r\n            // case: ?&from=1\r\n            if (oParam == null || oParam.length == 0)\r\n                continue;\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Param/Value found for pair \\\"\" + oName + \"\\\" = \" + oParam.length);\r\n            // avoid adding empty params\r\n            if (oParam.length == 1 && mNoEmptyParams)\r\n                continue;\r\n            String oEncodedValue = ((oParam.length == 2) ? URLEncode(oParam[1]) : STRING_EMPTY);\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Adding param \\\"\" + oParam[0] + \"\\\" with value \\\"\" + oEncodedValue + \"\\\".\");\r\n            addParam(oParam[0], oEncodedValue);\r\n        }\r\n    }\r\n\r\n    protected String URLEncode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            // Problem with the following: it will encode something already encoded\r\n            //oResult = URLEncoder.encode(pValue, \"UTF-8\");\r\n            // New Version: encode manually the special characters\r\n            oResult = pValue.replaceAll(\"&\", \"%26\").replaceAll(\"\\\\?\", \"%3F\").replaceAll(\"#\", \"%23\").replaceAll(\"=\", \"%3D\").replaceAll(\"\\\\s\", \"+\");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not encode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    protected String URLDecode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            oResult = pValue.replaceAll(\"%26\", \"&\").replaceAll(\"%3F\", \"\\\\?\").replaceAll(\"%23\", \"#\").replaceAll(\"%3D\", \"=\").replaceAll(\"\\\\+\", \" \");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not decode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#clone()\r\n\t */\r\n    @Override\r\n    public IRequest clone() {\r\n        IRequest oClone = new Request(getBaseURL() + getQueryString());\r\n        return oClone;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/RequestTest0.java",
		"test_prompt": "// RequestTest0.java\npackage net.sourceforge.ext4j.taglib.bo;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Request}.\n* It contains ten unit test cases for the {@link Request#cleanEmptyParams()} method.\n*/\nclass RequestTest0 {"
	},
	{
		"original_code": "// Request.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.bo;\r\n\r\nimport java.util.Collection;\r\nimport java.util.HashSet;\r\nimport java.util.Hashtable;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Request implements IRequest {\r\n\r\n    private static final String FILE_SCHEME = \"file:/\";\r\n\r\n    private static final String STRING_QMARK = \"?\";\r\n\r\n    private static final String STRING_HASH = \"#\";\r\n\r\n    private static final String STRING_AND = \"&\";\r\n\r\n    private static final String STRING_EQUAL = \"=\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private Map<String, RequestParam> mParams = new Hashtable<String, RequestParam>();\r\n\r\n    private boolean mIsWebRequest = false;\r\n\r\n    private String mBaseURL;\r\n\r\n    // string after the hash (#) sign\r\n    private String mHashValue;\r\n\r\n    private boolean mNoEmptyParams = false;\r\n\r\n    private Log mLogger = LogFactory.getLog(Request.class);\r\n\r\n    /**\r\n     */\r\n    public Request() {\r\n        this((String) null, false);\r\n    }\r\n\r\n    public Request(boolean pNoEmptyParams) {\r\n        this((String) null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(HttpServletRequest pRequest) {\r\n        this(pRequest, false);\r\n    }\r\n\r\n    public Request(HttpServletRequest pOrig, boolean pNoEmptyParams) {\r\n        this((pOrig != null) ? pOrig.getRequestURL().toString() + ((pOrig.getQueryString() != null) ? STRING_QMARK + pOrig.getQueryString() : STRING_EMPTY) : null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(String pUrl) {\r\n        this(pUrl, false);\r\n    }\r\n\r\n    public Request(String pUrl, boolean pNoEmptyParams) {\r\n        mNoEmptyParams = pNoEmptyParams;\r\n        if (pUrl != null)\r\n            parse(pUrl);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#cleanEmptyParams()\r\n\t */\r\n    public IRequest cleanEmptyParams() {\r\n        RequestParam oParam = null;\r\n        Set<String> oKeys = new HashSet<String>();\r\n        oKeys.addAll(mParams.keySet());\r\n        for (String oName : oKeys) {\r\n            oParam = mParams.get(oName);\r\n            if (oParam.getTotalValues() == 0) {\r\n                mParams.remove(oName);\r\n                continue;\r\n            }\r\n            boolean oEmpty = false;\r\n            for (int i = 0; i < oParam.getTotalValues() && !oEmpty; i++) {\r\n                oEmpty = ((oParam.getValue(i) == null) || (oParam.getValue(i).trim().length() == 0));\r\n            }\r\n            if (oEmpty)\r\n                mParams.remove(oName);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getBaseURL()\r\n\t */\r\n    public String getBaseURL() {\r\n        return mBaseURL;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setBaseURL(java.lang.String)\r\n\t */\r\n    public IRequest setBaseURL(String pBaseURL) {\r\n        mBaseURL = pBaseURL;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#isWebRequest()\r\n\t */\r\n    public boolean isWebRequest() {\r\n        return mIsWebRequest;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParams()\r\n\t */\r\n    public Collection<RequestParam> getParams() {\r\n        return mParams.values();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String)\r\n\t */\r\n    public RequestParam getParam(String pName) {\r\n        return getParam(pName, true);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String, boolean)\r\n\t */\r\n    public RequestParam getParam(String pName, boolean pIgnoreCase) {\r\n        if (pName == null)\r\n            return null;\r\n        if (!pIgnoreCase) {\r\n            return mParams.get(pName);\r\n        }\r\n        RequestParam oResult = null;\r\n        for (String oKey : mParams.keySet()) {\r\n            if (pName.equalsIgnoreCase(oKey)) {\r\n                oResult = mParams.get(oKey);\r\n                break;\r\n            }\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toBaseURL()\r\n\t */\r\n    public IRequest toBaseURL() {\r\n        mParams = new Hashtable<String, RequestParam>();\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, java.lang.String)\r\n\t */\r\n    public String getValue(String pName, String pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        String oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0);\r\n        return URLDecode(oResult);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, int)\r\n\t */\r\n    public int getValue(String pName, int pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        int oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0, pDefault);\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getHashValue()\r\n\t */\r\n    public String getHashValue() {\r\n        return mHashValue;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setHashValue(java.lang.String)\r\n\t */\r\n    public Request setHashValue(String pValue) {\r\n        mHashValue = pValue;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#removeParam(java.lang.String)\r\n\t */\r\n    public IRequest removeParam(String pName) {\r\n        if (mParams.size() > 0) {\r\n            RequestParam oParam = getParam(pName, true);\r\n            if (oParam != null)\r\n                mParams.remove(oParam.getName());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#addParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest addParam(String pName, String pValue) {\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam == null) {\r\n            oParam = new RequestParam(pName);\r\n            mParams.put(pName, oParam);\r\n        }\r\n        oParam.addValue(URLEncode(pValue));\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest setParam(String pName, String pValue) {\r\n        RequestParam oParam = new RequestParam(pName);\r\n        oParam.addValue(URLEncode(pValue));\r\n        return setParam(oParam);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(com.tripfilms.webtool.businessobject.Request.RequestParam)\r\n\t */\r\n    public IRequest setParam(RequestParam pParam) {\r\n        if (pParam == null)\r\n            return this;\r\n        mParams.put(pParam.getName(), pParam);\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getQueryString()\r\n\t */\r\n    public String getQueryString() {\r\n        StringBuilder oQS = new StringBuilder();\r\n        RequestParam oParam = null;\r\n        boolean oFirstPass = true;\r\n        for (String oName : mParams.keySet()) {\r\n            oParam = mParams.get(oName);\r\n            for (int i = 0; i < oParam.getTotalValues(); i++) {\r\n                if (oFirstPass) {\r\n                    oQS.append(STRING_QMARK);\r\n                } else {\r\n                    oQS.append(STRING_AND);\r\n                }\r\n                oFirstPass = false;\r\n                oQS.append(oParam.getName() + STRING_EQUAL + oParam.getValue(i));\r\n            }\r\n        }\r\n        return oQS.toString();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toString()\r\n\t */\r\n    @Override\r\n    public String toString() {\r\n        return getBaseURL() + getQueryString() + ((mHashValue != null) ? STRING_HASH + mHashValue : STRING_EMPTY);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object pObj) {\r\n        if (!(pObj instanceof Request))\r\n            return false;\r\n        IRequest oComparedTo = (IRequest) pObj;\r\n        // check if same base url\r\n        if ((mBaseURL != null && oComparedTo.getBaseURL() == null) || (mBaseURL == null && oComparedTo.getBaseURL() != null) || (!mBaseURL.equalsIgnoreCase(oComparedTo.getBaseURL())))\r\n            return false;\r\n        Collection<RequestParam> oParams = oComparedTo.getParams();\r\n        // check if same number of params\r\n        if (oParams.size() != getParams().size())\r\n            return false;\r\n        // check each parameter\r\n        for (RequestParam oParam : oParams) {\r\n            RequestParam oMyParam = getParam(oParam.getName(), true);\r\n            if (oMyParam == null)\r\n                return false;\r\n            // check number of values\r\n            if (oMyParam.getTotalValues() != oParam.getTotalValues())\r\n                return false;\r\n            // check values\r\n            for (int i = 0; i < oMyParam.getTotalValues(); i++) {\r\n                String oMyVal = oMyParam.getValue(i);\r\n                boolean oFound = false;\r\n                for (int j = 0; j < oParam.getTotalValues(); j++) {\r\n                    if (oParam.getValue(j).equals(oMyVal)) {\r\n                        oFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!oFound)\r\n                    return false;\r\n            }\r\n        }\r\n        if (!(mHashValue == null && oComparedTo.getHashValue() == null) && !(mHashValue.equals(oComparedTo.getHashValue())))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        return toString().hashCode();\r\n    }\r\n\r\n    protected void parse(String pUrl) {\r\n        if (pUrl == null)\r\n            return;\r\n        if (pUrl.startsWith(FILE_SCHEME)) {\r\n            return;\r\n        } else {\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Url \\\"\" + pUrl + \"\\\" is a web request\");\r\n            mIsWebRequest = true;\r\n        }\r\n        // Process \"#\" anchor\r\n        String oUrl = pUrl;\r\n        int oHashIndex = oUrl.indexOf(STRING_HASH);\r\n        if (oHashIndex > 0) {\r\n            if (oHashIndex < oUrl.length()) {\r\n                mHashValue = oUrl.substring(oHashIndex + 1);\r\n            }\r\n            oUrl = oUrl.substring(0, oHashIndex);\r\n        }\r\n        mBaseURL = oUrl;\r\n        // no query string to parse\r\n        if (oUrl.indexOf(STRING_QMARK) < 0)\r\n            return;\r\n        // Parsing query string\r\n        mBaseURL = oUrl.substring(0, oUrl.indexOf(STRING_QMARK));\r\n        String oQueryString = oUrl.substring(oUrl.indexOf(STRING_QMARK) + 1).trim();\r\n        if (oQueryString.length() == 0)\r\n            return;\r\n        String[] oPairs = oQueryString.split(STRING_AND);\r\n        for (String oName : oPairs) {\r\n            String[] oParam = oName.split(STRING_EQUAL);\r\n            // case: ?&from=1\r\n            if (oParam == null || oParam.length == 0)\r\n                continue;\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Param/Value found for pair \\\"\" + oName + \"\\\" = \" + oParam.length);\r\n            // avoid adding empty params\r\n            if (oParam.length == 1 && mNoEmptyParams)\r\n                continue;\r\n            String oEncodedValue = ((oParam.length == 2) ? URLEncode(oParam[1]) : STRING_EMPTY);\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Adding param \\\"\" + oParam[0] + \"\\\" with value \\\"\" + oEncodedValue + \"\\\".\");\r\n            addParam(oParam[0], oEncodedValue);\r\n        }\r\n    }\r\n\r\n    protected String URLEncode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            // Problem with the following: it will encode something already encoded\r\n            //oResult = URLEncoder.encode(pValue, \"UTF-8\");\r\n            // New Version: encode manually the special characters\r\n            oResult = pValue.replaceAll(\"&\", \"%26\").replaceAll(\"\\\\?\", \"%3F\").replaceAll(\"#\", \"%23\").replaceAll(\"=\", \"%3D\").replaceAll(\"\\\\s\", \"+\");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not encode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    protected String URLDecode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            oResult = pValue.replaceAll(\"%26\", \"&\").replaceAll(\"%3F\", \"\\\\?\").replaceAll(\"%23\", \"#\").replaceAll(\"%3D\", \"=\").replaceAll(\"\\\\+\", \" \");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not decode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#clone()\r\n\t */\r\n    @Override\r\n    public IRequest clone() {\r\n        IRequest oClone = new Request(getBaseURL() + getQueryString());\r\n        return oClone;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/RequestTest1.java",
		"test_prompt": "// RequestTest1.java\npackage net.sourceforge.ext4j.taglib.bo;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Request}.\n* It contains ten unit test cases for the {@link Request#isWebRequest()} method.\n*/\nclass RequestTest1 {"
	},
	{
		"original_code": "// Request.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.bo;\r\n\r\nimport java.util.Collection;\r\nimport java.util.HashSet;\r\nimport java.util.Hashtable;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Request implements IRequest {\r\n\r\n    private static final String FILE_SCHEME = \"file:/\";\r\n\r\n    private static final String STRING_QMARK = \"?\";\r\n\r\n    private static final String STRING_HASH = \"#\";\r\n\r\n    private static final String STRING_AND = \"&\";\r\n\r\n    private static final String STRING_EQUAL = \"=\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private Map<String, RequestParam> mParams = new Hashtable<String, RequestParam>();\r\n\r\n    private boolean mIsWebRequest = false;\r\n\r\n    private String mBaseURL;\r\n\r\n    // string after the hash (#) sign\r\n    private String mHashValue;\r\n\r\n    private boolean mNoEmptyParams = false;\r\n\r\n    private Log mLogger = LogFactory.getLog(Request.class);\r\n\r\n    /**\r\n     */\r\n    public Request() {\r\n        this((String) null, false);\r\n    }\r\n\r\n    public Request(boolean pNoEmptyParams) {\r\n        this((String) null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(HttpServletRequest pRequest) {\r\n        this(pRequest, false);\r\n    }\r\n\r\n    public Request(HttpServletRequest pOrig, boolean pNoEmptyParams) {\r\n        this((pOrig != null) ? pOrig.getRequestURL().toString() + ((pOrig.getQueryString() != null) ? STRING_QMARK + pOrig.getQueryString() : STRING_EMPTY) : null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(String pUrl) {\r\n        this(pUrl, false);\r\n    }\r\n\r\n    public Request(String pUrl, boolean pNoEmptyParams) {\r\n        mNoEmptyParams = pNoEmptyParams;\r\n        if (pUrl != null)\r\n            parse(pUrl);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#cleanEmptyParams()\r\n\t */\r\n    public IRequest cleanEmptyParams() {\r\n        RequestParam oParam = null;\r\n        Set<String> oKeys = new HashSet<String>();\r\n        oKeys.addAll(mParams.keySet());\r\n        for (String oName : oKeys) {\r\n            oParam = mParams.get(oName);\r\n            if (oParam.getTotalValues() == 0) {\r\n                mParams.remove(oName);\r\n                continue;\r\n            }\r\n            boolean oEmpty = false;\r\n            for (int i = 0; i < oParam.getTotalValues() && !oEmpty; i++) {\r\n                oEmpty = ((oParam.getValue(i) == null) || (oParam.getValue(i).trim().length() == 0));\r\n            }\r\n            if (oEmpty)\r\n                mParams.remove(oName);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getBaseURL()\r\n\t */\r\n    public String getBaseURL() {\r\n        return mBaseURL;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setBaseURL(java.lang.String)\r\n\t */\r\n    public IRequest setBaseURL(String pBaseURL) {\r\n        mBaseURL = pBaseURL;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#isWebRequest()\r\n\t */\r\n    public boolean isWebRequest() {\r\n        return mIsWebRequest;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParams()\r\n\t */\r\n    public Collection<RequestParam> getParams() {\r\n        return mParams.values();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String)\r\n\t */\r\n    public RequestParam getParam(String pName) {\r\n        return getParam(pName, true);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String, boolean)\r\n\t */\r\n    public RequestParam getParam(String pName, boolean pIgnoreCase) {\r\n        if (pName == null)\r\n            return null;\r\n        if (!pIgnoreCase) {\r\n            return mParams.get(pName);\r\n        }\r\n        RequestParam oResult = null;\r\n        for (String oKey : mParams.keySet()) {\r\n            if (pName.equalsIgnoreCase(oKey)) {\r\n                oResult = mParams.get(oKey);\r\n                break;\r\n            }\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toBaseURL()\r\n\t */\r\n    public IRequest toBaseURL() {\r\n        mParams = new Hashtable<String, RequestParam>();\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, java.lang.String)\r\n\t */\r\n    public String getValue(String pName, String pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        String oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0);\r\n        return URLDecode(oResult);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, int)\r\n\t */\r\n    public int getValue(String pName, int pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        int oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0, pDefault);\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getHashValue()\r\n\t */\r\n    public String getHashValue() {\r\n        return mHashValue;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setHashValue(java.lang.String)\r\n\t */\r\n    public Request setHashValue(String pValue) {\r\n        mHashValue = pValue;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#removeParam(java.lang.String)\r\n\t */\r\n    public IRequest removeParam(String pName) {\r\n        if (mParams.size() > 0) {\r\n            RequestParam oParam = getParam(pName, true);\r\n            if (oParam != null)\r\n                mParams.remove(oParam.getName());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#addParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest addParam(String pName, String pValue) {\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam == null) {\r\n            oParam = new RequestParam(pName);\r\n            mParams.put(pName, oParam);\r\n        }\r\n        oParam.addValue(URLEncode(pValue));\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest setParam(String pName, String pValue) {\r\n        RequestParam oParam = new RequestParam(pName);\r\n        oParam.addValue(URLEncode(pValue));\r\n        return setParam(oParam);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(com.tripfilms.webtool.businessobject.Request.RequestParam)\r\n\t */\r\n    public IRequest setParam(RequestParam pParam) {\r\n        if (pParam == null)\r\n            return this;\r\n        mParams.put(pParam.getName(), pParam);\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getQueryString()\r\n\t */\r\n    public String getQueryString() {\r\n        StringBuilder oQS = new StringBuilder();\r\n        RequestParam oParam = null;\r\n        boolean oFirstPass = true;\r\n        for (String oName : mParams.keySet()) {\r\n            oParam = mParams.get(oName);\r\n            for (int i = 0; i < oParam.getTotalValues(); i++) {\r\n                if (oFirstPass) {\r\n                    oQS.append(STRING_QMARK);\r\n                } else {\r\n                    oQS.append(STRING_AND);\r\n                }\r\n                oFirstPass = false;\r\n                oQS.append(oParam.getName() + STRING_EQUAL + oParam.getValue(i));\r\n            }\r\n        }\r\n        return oQS.toString();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toString()\r\n\t */\r\n    @Override\r\n    public String toString() {\r\n        return getBaseURL() + getQueryString() + ((mHashValue != null) ? STRING_HASH + mHashValue : STRING_EMPTY);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object pObj) {\r\n        if (!(pObj instanceof Request))\r\n            return false;\r\n        IRequest oComparedTo = (IRequest) pObj;\r\n        // check if same base url\r\n        if ((mBaseURL != null && oComparedTo.getBaseURL() == null) || (mBaseURL == null && oComparedTo.getBaseURL() != null) || (!mBaseURL.equalsIgnoreCase(oComparedTo.getBaseURL())))\r\n            return false;\r\n        Collection<RequestParam> oParams = oComparedTo.getParams();\r\n        // check if same number of params\r\n        if (oParams.size() != getParams().size())\r\n            return false;\r\n        // check each parameter\r\n        for (RequestParam oParam : oParams) {\r\n            RequestParam oMyParam = getParam(oParam.getName(), true);\r\n            if (oMyParam == null)\r\n                return false;\r\n            // check number of values\r\n            if (oMyParam.getTotalValues() != oParam.getTotalValues())\r\n                return false;\r\n            // check values\r\n            for (int i = 0; i < oMyParam.getTotalValues(); i++) {\r\n                String oMyVal = oMyParam.getValue(i);\r\n                boolean oFound = false;\r\n                for (int j = 0; j < oParam.getTotalValues(); j++) {\r\n                    if (oParam.getValue(j).equals(oMyVal)) {\r\n                        oFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!oFound)\r\n                    return false;\r\n            }\r\n        }\r\n        if (!(mHashValue == null && oComparedTo.getHashValue() == null) && !(mHashValue.equals(oComparedTo.getHashValue())))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        return toString().hashCode();\r\n    }\r\n\r\n    protected void parse(String pUrl) {\r\n        if (pUrl == null)\r\n            return;\r\n        if (pUrl.startsWith(FILE_SCHEME)) {\r\n            return;\r\n        } else {\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Url \\\"\" + pUrl + \"\\\" is a web request\");\r\n            mIsWebRequest = true;\r\n        }\r\n        // Process \"#\" anchor\r\n        String oUrl = pUrl;\r\n        int oHashIndex = oUrl.indexOf(STRING_HASH);\r\n        if (oHashIndex > 0) {\r\n            if (oHashIndex < oUrl.length()) {\r\n                mHashValue = oUrl.substring(oHashIndex + 1);\r\n            }\r\n            oUrl = oUrl.substring(0, oHashIndex);\r\n        }\r\n        mBaseURL = oUrl;\r\n        // no query string to parse\r\n        if (oUrl.indexOf(STRING_QMARK) < 0)\r\n            return;\r\n        // Parsing query string\r\n        mBaseURL = oUrl.substring(0, oUrl.indexOf(STRING_QMARK));\r\n        String oQueryString = oUrl.substring(oUrl.indexOf(STRING_QMARK) + 1).trim();\r\n        if (oQueryString.length() == 0)\r\n            return;\r\n        String[] oPairs = oQueryString.split(STRING_AND);\r\n        for (String oName : oPairs) {\r\n            String[] oParam = oName.split(STRING_EQUAL);\r\n            // case: ?&from=1\r\n            if (oParam == null || oParam.length == 0)\r\n                continue;\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Param/Value found for pair \\\"\" + oName + \"\\\" = \" + oParam.length);\r\n            // avoid adding empty params\r\n            if (oParam.length == 1 && mNoEmptyParams)\r\n                continue;\r\n            String oEncodedValue = ((oParam.length == 2) ? URLEncode(oParam[1]) : STRING_EMPTY);\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Adding param \\\"\" + oParam[0] + \"\\\" with value \\\"\" + oEncodedValue + \"\\\".\");\r\n            addParam(oParam[0], oEncodedValue);\r\n        }\r\n    }\r\n\r\n    protected String URLEncode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            // Problem with the following: it will encode something already encoded\r\n            //oResult = URLEncoder.encode(pValue, \"UTF-8\");\r\n            // New Version: encode manually the special characters\r\n            oResult = pValue.replaceAll(\"&\", \"%26\").replaceAll(\"\\\\?\", \"%3F\").replaceAll(\"#\", \"%23\").replaceAll(\"=\", \"%3D\").replaceAll(\"\\\\s\", \"+\");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not encode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    protected String URLDecode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            oResult = pValue.replaceAll(\"%26\", \"&\").replaceAll(\"%3F\", \"\\\\?\").replaceAll(\"%23\", \"#\").replaceAll(\"%3D\", \"=\").replaceAll(\"\\\\+\", \" \");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not decode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#clone()\r\n\t */\r\n    @Override\r\n    public IRequest clone() {\r\n        IRequest oClone = new Request(getBaseURL() + getQueryString());\r\n        return oClone;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/RequestTest2.java",
		"test_prompt": "// RequestTest2.java\npackage net.sourceforge.ext4j.taglib.bo;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Request}.\n* It contains ten unit test cases for the {@link Request#toBaseURL()} method.\n*/\nclass RequestTest2 {"
	},
	{
		"original_code": "// Request.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.bo;\r\n\r\nimport java.util.Collection;\r\nimport java.util.HashSet;\r\nimport java.util.Hashtable;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Request implements IRequest {\r\n\r\n    private static final String FILE_SCHEME = \"file:/\";\r\n\r\n    private static final String STRING_QMARK = \"?\";\r\n\r\n    private static final String STRING_HASH = \"#\";\r\n\r\n    private static final String STRING_AND = \"&\";\r\n\r\n    private static final String STRING_EQUAL = \"=\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private Map<String, RequestParam> mParams = new Hashtable<String, RequestParam>();\r\n\r\n    private boolean mIsWebRequest = false;\r\n\r\n    private String mBaseURL;\r\n\r\n    // string after the hash (#) sign\r\n    private String mHashValue;\r\n\r\n    private boolean mNoEmptyParams = false;\r\n\r\n    private Log mLogger = LogFactory.getLog(Request.class);\r\n\r\n    /**\r\n     */\r\n    public Request() {\r\n        this((String) null, false);\r\n    }\r\n\r\n    public Request(boolean pNoEmptyParams) {\r\n        this((String) null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(HttpServletRequest pRequest) {\r\n        this(pRequest, false);\r\n    }\r\n\r\n    public Request(HttpServletRequest pOrig, boolean pNoEmptyParams) {\r\n        this((pOrig != null) ? pOrig.getRequestURL().toString() + ((pOrig.getQueryString() != null) ? STRING_QMARK + pOrig.getQueryString() : STRING_EMPTY) : null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(String pUrl) {\r\n        this(pUrl, false);\r\n    }\r\n\r\n    public Request(String pUrl, boolean pNoEmptyParams) {\r\n        mNoEmptyParams = pNoEmptyParams;\r\n        if (pUrl != null)\r\n            parse(pUrl);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#cleanEmptyParams()\r\n\t */\r\n    public IRequest cleanEmptyParams() {\r\n        RequestParam oParam = null;\r\n        Set<String> oKeys = new HashSet<String>();\r\n        oKeys.addAll(mParams.keySet());\r\n        for (String oName : oKeys) {\r\n            oParam = mParams.get(oName);\r\n            if (oParam.getTotalValues() == 0) {\r\n                mParams.remove(oName);\r\n                continue;\r\n            }\r\n            boolean oEmpty = false;\r\n            for (int i = 0; i < oParam.getTotalValues() && !oEmpty; i++) {\r\n                oEmpty = ((oParam.getValue(i) == null) || (oParam.getValue(i).trim().length() == 0));\r\n            }\r\n            if (oEmpty)\r\n                mParams.remove(oName);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getBaseURL()\r\n\t */\r\n    public String getBaseURL() {\r\n        return mBaseURL;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setBaseURL(java.lang.String)\r\n\t */\r\n    public IRequest setBaseURL(String pBaseURL) {\r\n        mBaseURL = pBaseURL;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#isWebRequest()\r\n\t */\r\n    public boolean isWebRequest() {\r\n        return mIsWebRequest;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParams()\r\n\t */\r\n    public Collection<RequestParam> getParams() {\r\n        return mParams.values();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String)\r\n\t */\r\n    public RequestParam getParam(String pName) {\r\n        return getParam(pName, true);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String, boolean)\r\n\t */\r\n    public RequestParam getParam(String pName, boolean pIgnoreCase) {\r\n        if (pName == null)\r\n            return null;\r\n        if (!pIgnoreCase) {\r\n            return mParams.get(pName);\r\n        }\r\n        RequestParam oResult = null;\r\n        for (String oKey : mParams.keySet()) {\r\n            if (pName.equalsIgnoreCase(oKey)) {\r\n                oResult = mParams.get(oKey);\r\n                break;\r\n            }\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toBaseURL()\r\n\t */\r\n    public IRequest toBaseURL() {\r\n        mParams = new Hashtable<String, RequestParam>();\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, java.lang.String)\r\n\t */\r\n    public String getValue(String pName, String pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        String oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0);\r\n        return URLDecode(oResult);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, int)\r\n\t */\r\n    public int getValue(String pName, int pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        int oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0, pDefault);\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getHashValue()\r\n\t */\r\n    public String getHashValue() {\r\n        return mHashValue;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setHashValue(java.lang.String)\r\n\t */\r\n    public Request setHashValue(String pValue) {\r\n        mHashValue = pValue;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#removeParam(java.lang.String)\r\n\t */\r\n    public IRequest removeParam(String pName) {\r\n        if (mParams.size() > 0) {\r\n            RequestParam oParam = getParam(pName, true);\r\n            if (oParam != null)\r\n                mParams.remove(oParam.getName());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#addParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest addParam(String pName, String pValue) {\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam == null) {\r\n            oParam = new RequestParam(pName);\r\n            mParams.put(pName, oParam);\r\n        }\r\n        oParam.addValue(URLEncode(pValue));\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest setParam(String pName, String pValue) {\r\n        RequestParam oParam = new RequestParam(pName);\r\n        oParam.addValue(URLEncode(pValue));\r\n        return setParam(oParam);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(com.tripfilms.webtool.businessobject.Request.RequestParam)\r\n\t */\r\n    public IRequest setParam(RequestParam pParam) {\r\n        if (pParam == null)\r\n            return this;\r\n        mParams.put(pParam.getName(), pParam);\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getQueryString()\r\n\t */\r\n    public String getQueryString() {\r\n        StringBuilder oQS = new StringBuilder();\r\n        RequestParam oParam = null;\r\n        boolean oFirstPass = true;\r\n        for (String oName : mParams.keySet()) {\r\n            oParam = mParams.get(oName);\r\n            for (int i = 0; i < oParam.getTotalValues(); i++) {\r\n                if (oFirstPass) {\r\n                    oQS.append(STRING_QMARK);\r\n                } else {\r\n                    oQS.append(STRING_AND);\r\n                }\r\n                oFirstPass = false;\r\n                oQS.append(oParam.getName() + STRING_EQUAL + oParam.getValue(i));\r\n            }\r\n        }\r\n        return oQS.toString();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toString()\r\n\t */\r\n    @Override\r\n    public String toString() {\r\n        return getBaseURL() + getQueryString() + ((mHashValue != null) ? STRING_HASH + mHashValue : STRING_EMPTY);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object pObj) {\r\n        if (!(pObj instanceof Request))\r\n            return false;\r\n        IRequest oComparedTo = (IRequest) pObj;\r\n        // check if same base url\r\n        if ((mBaseURL != null && oComparedTo.getBaseURL() == null) || (mBaseURL == null && oComparedTo.getBaseURL() != null) || (!mBaseURL.equalsIgnoreCase(oComparedTo.getBaseURL())))\r\n            return false;\r\n        Collection<RequestParam> oParams = oComparedTo.getParams();\r\n        // check if same number of params\r\n        if (oParams.size() != getParams().size())\r\n            return false;\r\n        // check each parameter\r\n        for (RequestParam oParam : oParams) {\r\n            RequestParam oMyParam = getParam(oParam.getName(), true);\r\n            if (oMyParam == null)\r\n                return false;\r\n            // check number of values\r\n            if (oMyParam.getTotalValues() != oParam.getTotalValues())\r\n                return false;\r\n            // check values\r\n            for (int i = 0; i < oMyParam.getTotalValues(); i++) {\r\n                String oMyVal = oMyParam.getValue(i);\r\n                boolean oFound = false;\r\n                for (int j = 0; j < oParam.getTotalValues(); j++) {\r\n                    if (oParam.getValue(j).equals(oMyVal)) {\r\n                        oFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!oFound)\r\n                    return false;\r\n            }\r\n        }\r\n        if (!(mHashValue == null && oComparedTo.getHashValue() == null) && !(mHashValue.equals(oComparedTo.getHashValue())))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        return toString().hashCode();\r\n    }\r\n\r\n    protected void parse(String pUrl) {\r\n        if (pUrl == null)\r\n            return;\r\n        if (pUrl.startsWith(FILE_SCHEME)) {\r\n            return;\r\n        } else {\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Url \\\"\" + pUrl + \"\\\" is a web request\");\r\n            mIsWebRequest = true;\r\n        }\r\n        // Process \"#\" anchor\r\n        String oUrl = pUrl;\r\n        int oHashIndex = oUrl.indexOf(STRING_HASH);\r\n        if (oHashIndex > 0) {\r\n            if (oHashIndex < oUrl.length()) {\r\n                mHashValue = oUrl.substring(oHashIndex + 1);\r\n            }\r\n            oUrl = oUrl.substring(0, oHashIndex);\r\n        }\r\n        mBaseURL = oUrl;\r\n        // no query string to parse\r\n        if (oUrl.indexOf(STRING_QMARK) < 0)\r\n            return;\r\n        // Parsing query string\r\n        mBaseURL = oUrl.substring(0, oUrl.indexOf(STRING_QMARK));\r\n        String oQueryString = oUrl.substring(oUrl.indexOf(STRING_QMARK) + 1).trim();\r\n        if (oQueryString.length() == 0)\r\n            return;\r\n        String[] oPairs = oQueryString.split(STRING_AND);\r\n        for (String oName : oPairs) {\r\n            String[] oParam = oName.split(STRING_EQUAL);\r\n            // case: ?&from=1\r\n            if (oParam == null || oParam.length == 0)\r\n                continue;\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Param/Value found for pair \\\"\" + oName + \"\\\" = \" + oParam.length);\r\n            // avoid adding empty params\r\n            if (oParam.length == 1 && mNoEmptyParams)\r\n                continue;\r\n            String oEncodedValue = ((oParam.length == 2) ? URLEncode(oParam[1]) : STRING_EMPTY);\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Adding param \\\"\" + oParam[0] + \"\\\" with value \\\"\" + oEncodedValue + \"\\\".\");\r\n            addParam(oParam[0], oEncodedValue);\r\n        }\r\n    }\r\n\r\n    protected String URLEncode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            // Problem with the following: it will encode something already encoded\r\n            //oResult = URLEncoder.encode(pValue, \"UTF-8\");\r\n            // New Version: encode manually the special characters\r\n            oResult = pValue.replaceAll(\"&\", \"%26\").replaceAll(\"\\\\?\", \"%3F\").replaceAll(\"#\", \"%23\").replaceAll(\"=\", \"%3D\").replaceAll(\"\\\\s\", \"+\");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not encode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    protected String URLDecode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            oResult = pValue.replaceAll(\"%26\", \"&\").replaceAll(\"%3F\", \"\\\\?\").replaceAll(\"%23\", \"#\").replaceAll(\"%3D\", \"=\").replaceAll(\"\\\\+\", \" \");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not decode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#clone()\r\n\t */\r\n    @Override\r\n    public IRequest clone() {\r\n        IRequest oClone = new Request(getBaseURL() + getQueryString());\r\n        return oClone;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/RequestTest3.java",
		"test_prompt": "// RequestTest3.java\npackage net.sourceforge.ext4j.taglib.bo;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Request}.\n* It contains ten unit test cases for the {@link Request#removeParam(String)} method.\n*/\nclass RequestTest3 {"
	},
	{
		"original_code": "// Request.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.bo;\r\n\r\nimport java.util.Collection;\r\nimport java.util.HashSet;\r\nimport java.util.Hashtable;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Request implements IRequest {\r\n\r\n    private static final String FILE_SCHEME = \"file:/\";\r\n\r\n    private static final String STRING_QMARK = \"?\";\r\n\r\n    private static final String STRING_HASH = \"#\";\r\n\r\n    private static final String STRING_AND = \"&\";\r\n\r\n    private static final String STRING_EQUAL = \"=\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private Map<String, RequestParam> mParams = new Hashtable<String, RequestParam>();\r\n\r\n    private boolean mIsWebRequest = false;\r\n\r\n    private String mBaseURL;\r\n\r\n    // string after the hash (#) sign\r\n    private String mHashValue;\r\n\r\n    private boolean mNoEmptyParams = false;\r\n\r\n    private Log mLogger = LogFactory.getLog(Request.class);\r\n\r\n    /**\r\n     */\r\n    public Request() {\r\n        this((String) null, false);\r\n    }\r\n\r\n    public Request(boolean pNoEmptyParams) {\r\n        this((String) null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(HttpServletRequest pRequest) {\r\n        this(pRequest, false);\r\n    }\r\n\r\n    public Request(HttpServletRequest pOrig, boolean pNoEmptyParams) {\r\n        this((pOrig != null) ? pOrig.getRequestURL().toString() + ((pOrig.getQueryString() != null) ? STRING_QMARK + pOrig.getQueryString() : STRING_EMPTY) : null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(String pUrl) {\r\n        this(pUrl, false);\r\n    }\r\n\r\n    public Request(String pUrl, boolean pNoEmptyParams) {\r\n        mNoEmptyParams = pNoEmptyParams;\r\n        if (pUrl != null)\r\n            parse(pUrl);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#cleanEmptyParams()\r\n\t */\r\n    public IRequest cleanEmptyParams() {\r\n        RequestParam oParam = null;\r\n        Set<String> oKeys = new HashSet<String>();\r\n        oKeys.addAll(mParams.keySet());\r\n        for (String oName : oKeys) {\r\n            oParam = mParams.get(oName);\r\n            if (oParam.getTotalValues() == 0) {\r\n                mParams.remove(oName);\r\n                continue;\r\n            }\r\n            boolean oEmpty = false;\r\n            for (int i = 0; i < oParam.getTotalValues() && !oEmpty; i++) {\r\n                oEmpty = ((oParam.getValue(i) == null) || (oParam.getValue(i).trim().length() == 0));\r\n            }\r\n            if (oEmpty)\r\n                mParams.remove(oName);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getBaseURL()\r\n\t */\r\n    public String getBaseURL() {\r\n        return mBaseURL;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setBaseURL(java.lang.String)\r\n\t */\r\n    public IRequest setBaseURL(String pBaseURL) {\r\n        mBaseURL = pBaseURL;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#isWebRequest()\r\n\t */\r\n    public boolean isWebRequest() {\r\n        return mIsWebRequest;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParams()\r\n\t */\r\n    public Collection<RequestParam> getParams() {\r\n        return mParams.values();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String)\r\n\t */\r\n    public RequestParam getParam(String pName) {\r\n        return getParam(pName, true);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String, boolean)\r\n\t */\r\n    public RequestParam getParam(String pName, boolean pIgnoreCase) {\r\n        if (pName == null)\r\n            return null;\r\n        if (!pIgnoreCase) {\r\n            return mParams.get(pName);\r\n        }\r\n        RequestParam oResult = null;\r\n        for (String oKey : mParams.keySet()) {\r\n            if (pName.equalsIgnoreCase(oKey)) {\r\n                oResult = mParams.get(oKey);\r\n                break;\r\n            }\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toBaseURL()\r\n\t */\r\n    public IRequest toBaseURL() {\r\n        mParams = new Hashtable<String, RequestParam>();\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, java.lang.String)\r\n\t */\r\n    public String getValue(String pName, String pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        String oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0);\r\n        return URLDecode(oResult);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, int)\r\n\t */\r\n    public int getValue(String pName, int pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        int oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0, pDefault);\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getHashValue()\r\n\t */\r\n    public String getHashValue() {\r\n        return mHashValue;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setHashValue(java.lang.String)\r\n\t */\r\n    public Request setHashValue(String pValue) {\r\n        mHashValue = pValue;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#removeParam(java.lang.String)\r\n\t */\r\n    public IRequest removeParam(String pName) {\r\n        if (mParams.size() > 0) {\r\n            RequestParam oParam = getParam(pName, true);\r\n            if (oParam != null)\r\n                mParams.remove(oParam.getName());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#addParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest addParam(String pName, String pValue) {\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam == null) {\r\n            oParam = new RequestParam(pName);\r\n            mParams.put(pName, oParam);\r\n        }\r\n        oParam.addValue(URLEncode(pValue));\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest setParam(String pName, String pValue) {\r\n        RequestParam oParam = new RequestParam(pName);\r\n        oParam.addValue(URLEncode(pValue));\r\n        return setParam(oParam);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(com.tripfilms.webtool.businessobject.Request.RequestParam)\r\n\t */\r\n    public IRequest setParam(RequestParam pParam) {\r\n        if (pParam == null)\r\n            return this;\r\n        mParams.put(pParam.getName(), pParam);\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getQueryString()\r\n\t */\r\n    public String getQueryString() {\r\n        StringBuilder oQS = new StringBuilder();\r\n        RequestParam oParam = null;\r\n        boolean oFirstPass = true;\r\n        for (String oName : mParams.keySet()) {\r\n            oParam = mParams.get(oName);\r\n            for (int i = 0; i < oParam.getTotalValues(); i++) {\r\n                if (oFirstPass) {\r\n                    oQS.append(STRING_QMARK);\r\n                } else {\r\n                    oQS.append(STRING_AND);\r\n                }\r\n                oFirstPass = false;\r\n                oQS.append(oParam.getName() + STRING_EQUAL + oParam.getValue(i));\r\n            }\r\n        }\r\n        return oQS.toString();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toString()\r\n\t */\r\n    @Override\r\n    public String toString() {\r\n        return getBaseURL() + getQueryString() + ((mHashValue != null) ? STRING_HASH + mHashValue : STRING_EMPTY);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object pObj) {\r\n        if (!(pObj instanceof Request))\r\n            return false;\r\n        IRequest oComparedTo = (IRequest) pObj;\r\n        // check if same base url\r\n        if ((mBaseURL != null && oComparedTo.getBaseURL() == null) || (mBaseURL == null && oComparedTo.getBaseURL() != null) || (!mBaseURL.equalsIgnoreCase(oComparedTo.getBaseURL())))\r\n            return false;\r\n        Collection<RequestParam> oParams = oComparedTo.getParams();\r\n        // check if same number of params\r\n        if (oParams.size() != getParams().size())\r\n            return false;\r\n        // check each parameter\r\n        for (RequestParam oParam : oParams) {\r\n            RequestParam oMyParam = getParam(oParam.getName(), true);\r\n            if (oMyParam == null)\r\n                return false;\r\n            // check number of values\r\n            if (oMyParam.getTotalValues() != oParam.getTotalValues())\r\n                return false;\r\n            // check values\r\n            for (int i = 0; i < oMyParam.getTotalValues(); i++) {\r\n                String oMyVal = oMyParam.getValue(i);\r\n                boolean oFound = false;\r\n                for (int j = 0; j < oParam.getTotalValues(); j++) {\r\n                    if (oParam.getValue(j).equals(oMyVal)) {\r\n                        oFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!oFound)\r\n                    return false;\r\n            }\r\n        }\r\n        if (!(mHashValue == null && oComparedTo.getHashValue() == null) && !(mHashValue.equals(oComparedTo.getHashValue())))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        return toString().hashCode();\r\n    }\r\n\r\n    protected void parse(String pUrl) {\r\n        if (pUrl == null)\r\n            return;\r\n        if (pUrl.startsWith(FILE_SCHEME)) {\r\n            return;\r\n        } else {\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Url \\\"\" + pUrl + \"\\\" is a web request\");\r\n            mIsWebRequest = true;\r\n        }\r\n        // Process \"#\" anchor\r\n        String oUrl = pUrl;\r\n        int oHashIndex = oUrl.indexOf(STRING_HASH);\r\n        if (oHashIndex > 0) {\r\n            if (oHashIndex < oUrl.length()) {\r\n                mHashValue = oUrl.substring(oHashIndex + 1);\r\n            }\r\n            oUrl = oUrl.substring(0, oHashIndex);\r\n        }\r\n        mBaseURL = oUrl;\r\n        // no query string to parse\r\n        if (oUrl.indexOf(STRING_QMARK) < 0)\r\n            return;\r\n        // Parsing query string\r\n        mBaseURL = oUrl.substring(0, oUrl.indexOf(STRING_QMARK));\r\n        String oQueryString = oUrl.substring(oUrl.indexOf(STRING_QMARK) + 1).trim();\r\n        if (oQueryString.length() == 0)\r\n            return;\r\n        String[] oPairs = oQueryString.split(STRING_AND);\r\n        for (String oName : oPairs) {\r\n            String[] oParam = oName.split(STRING_EQUAL);\r\n            // case: ?&from=1\r\n            if (oParam == null || oParam.length == 0)\r\n                continue;\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Param/Value found for pair \\\"\" + oName + \"\\\" = \" + oParam.length);\r\n            // avoid adding empty params\r\n            if (oParam.length == 1 && mNoEmptyParams)\r\n                continue;\r\n            String oEncodedValue = ((oParam.length == 2) ? URLEncode(oParam[1]) : STRING_EMPTY);\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Adding param \\\"\" + oParam[0] + \"\\\" with value \\\"\" + oEncodedValue + \"\\\".\");\r\n            addParam(oParam[0], oEncodedValue);\r\n        }\r\n    }\r\n\r\n    protected String URLEncode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            // Problem with the following: it will encode something already encoded\r\n            //oResult = URLEncoder.encode(pValue, \"UTF-8\");\r\n            // New Version: encode manually the special characters\r\n            oResult = pValue.replaceAll(\"&\", \"%26\").replaceAll(\"\\\\?\", \"%3F\").replaceAll(\"#\", \"%23\").replaceAll(\"=\", \"%3D\").replaceAll(\"\\\\s\", \"+\");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not encode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    protected String URLDecode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            oResult = pValue.replaceAll(\"%26\", \"&\").replaceAll(\"%3F\", \"\\\\?\").replaceAll(\"%23\", \"#\").replaceAll(\"%3D\", \"=\").replaceAll(\"\\\\+\", \" \");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not decode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#clone()\r\n\t */\r\n    @Override\r\n    public IRequest clone() {\r\n        IRequest oClone = new Request(getBaseURL() + getQueryString());\r\n        return oClone;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/RequestTest4.java",
		"test_prompt": "// RequestTest4.java\npackage net.sourceforge.ext4j.taglib.bo;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Request}.\n* It contains ten unit test cases for the {@link Request#addParam(String, String)} method.\n*/\nclass RequestTest4 {"
	},
	{
		"original_code": "// Request.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.bo;\r\n\r\nimport java.util.Collection;\r\nimport java.util.HashSet;\r\nimport java.util.Hashtable;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Request implements IRequest {\r\n\r\n    private static final String FILE_SCHEME = \"file:/\";\r\n\r\n    private static final String STRING_QMARK = \"?\";\r\n\r\n    private static final String STRING_HASH = \"#\";\r\n\r\n    private static final String STRING_AND = \"&\";\r\n\r\n    private static final String STRING_EQUAL = \"=\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private Map<String, RequestParam> mParams = new Hashtable<String, RequestParam>();\r\n\r\n    private boolean mIsWebRequest = false;\r\n\r\n    private String mBaseURL;\r\n\r\n    // string after the hash (#) sign\r\n    private String mHashValue;\r\n\r\n    private boolean mNoEmptyParams = false;\r\n\r\n    private Log mLogger = LogFactory.getLog(Request.class);\r\n\r\n    /**\r\n     */\r\n    public Request() {\r\n        this((String) null, false);\r\n    }\r\n\r\n    public Request(boolean pNoEmptyParams) {\r\n        this((String) null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(HttpServletRequest pRequest) {\r\n        this(pRequest, false);\r\n    }\r\n\r\n    public Request(HttpServletRequest pOrig, boolean pNoEmptyParams) {\r\n        this((pOrig != null) ? pOrig.getRequestURL().toString() + ((pOrig.getQueryString() != null) ? STRING_QMARK + pOrig.getQueryString() : STRING_EMPTY) : null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(String pUrl) {\r\n        this(pUrl, false);\r\n    }\r\n\r\n    public Request(String pUrl, boolean pNoEmptyParams) {\r\n        mNoEmptyParams = pNoEmptyParams;\r\n        if (pUrl != null)\r\n            parse(pUrl);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#cleanEmptyParams()\r\n\t */\r\n    public IRequest cleanEmptyParams() {\r\n        RequestParam oParam = null;\r\n        Set<String> oKeys = new HashSet<String>();\r\n        oKeys.addAll(mParams.keySet());\r\n        for (String oName : oKeys) {\r\n            oParam = mParams.get(oName);\r\n            if (oParam.getTotalValues() == 0) {\r\n                mParams.remove(oName);\r\n                continue;\r\n            }\r\n            boolean oEmpty = false;\r\n            for (int i = 0; i < oParam.getTotalValues() && !oEmpty; i++) {\r\n                oEmpty = ((oParam.getValue(i) == null) || (oParam.getValue(i).trim().length() == 0));\r\n            }\r\n            if (oEmpty)\r\n                mParams.remove(oName);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getBaseURL()\r\n\t */\r\n    public String getBaseURL() {\r\n        return mBaseURL;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setBaseURL(java.lang.String)\r\n\t */\r\n    public IRequest setBaseURL(String pBaseURL) {\r\n        mBaseURL = pBaseURL;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#isWebRequest()\r\n\t */\r\n    public boolean isWebRequest() {\r\n        return mIsWebRequest;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParams()\r\n\t */\r\n    public Collection<RequestParam> getParams() {\r\n        return mParams.values();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String)\r\n\t */\r\n    public RequestParam getParam(String pName) {\r\n        return getParam(pName, true);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String, boolean)\r\n\t */\r\n    public RequestParam getParam(String pName, boolean pIgnoreCase) {\r\n        if (pName == null)\r\n            return null;\r\n        if (!pIgnoreCase) {\r\n            return mParams.get(pName);\r\n        }\r\n        RequestParam oResult = null;\r\n        for (String oKey : mParams.keySet()) {\r\n            if (pName.equalsIgnoreCase(oKey)) {\r\n                oResult = mParams.get(oKey);\r\n                break;\r\n            }\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toBaseURL()\r\n\t */\r\n    public IRequest toBaseURL() {\r\n        mParams = new Hashtable<String, RequestParam>();\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, java.lang.String)\r\n\t */\r\n    public String getValue(String pName, String pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        String oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0);\r\n        return URLDecode(oResult);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, int)\r\n\t */\r\n    public int getValue(String pName, int pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        int oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0, pDefault);\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getHashValue()\r\n\t */\r\n    public String getHashValue() {\r\n        return mHashValue;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setHashValue(java.lang.String)\r\n\t */\r\n    public Request setHashValue(String pValue) {\r\n        mHashValue = pValue;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#removeParam(java.lang.String)\r\n\t */\r\n    public IRequest removeParam(String pName) {\r\n        if (mParams.size() > 0) {\r\n            RequestParam oParam = getParam(pName, true);\r\n            if (oParam != null)\r\n                mParams.remove(oParam.getName());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#addParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest addParam(String pName, String pValue) {\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam == null) {\r\n            oParam = new RequestParam(pName);\r\n            mParams.put(pName, oParam);\r\n        }\r\n        oParam.addValue(URLEncode(pValue));\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest setParam(String pName, String pValue) {\r\n        RequestParam oParam = new RequestParam(pName);\r\n        oParam.addValue(URLEncode(pValue));\r\n        return setParam(oParam);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(com.tripfilms.webtool.businessobject.Request.RequestParam)\r\n\t */\r\n    public IRequest setParam(RequestParam pParam) {\r\n        if (pParam == null)\r\n            return this;\r\n        mParams.put(pParam.getName(), pParam);\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getQueryString()\r\n\t */\r\n    public String getQueryString() {\r\n        StringBuilder oQS = new StringBuilder();\r\n        RequestParam oParam = null;\r\n        boolean oFirstPass = true;\r\n        for (String oName : mParams.keySet()) {\r\n            oParam = mParams.get(oName);\r\n            for (int i = 0; i < oParam.getTotalValues(); i++) {\r\n                if (oFirstPass) {\r\n                    oQS.append(STRING_QMARK);\r\n                } else {\r\n                    oQS.append(STRING_AND);\r\n                }\r\n                oFirstPass = false;\r\n                oQS.append(oParam.getName() + STRING_EQUAL + oParam.getValue(i));\r\n            }\r\n        }\r\n        return oQS.toString();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toString()\r\n\t */\r\n    @Override\r\n    public String toString() {\r\n        return getBaseURL() + getQueryString() + ((mHashValue != null) ? STRING_HASH + mHashValue : STRING_EMPTY);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object pObj) {\r\n        if (!(pObj instanceof Request))\r\n            return false;\r\n        IRequest oComparedTo = (IRequest) pObj;\r\n        // check if same base url\r\n        if ((mBaseURL != null && oComparedTo.getBaseURL() == null) || (mBaseURL == null && oComparedTo.getBaseURL() != null) || (!mBaseURL.equalsIgnoreCase(oComparedTo.getBaseURL())))\r\n            return false;\r\n        Collection<RequestParam> oParams = oComparedTo.getParams();\r\n        // check if same number of params\r\n        if (oParams.size() != getParams().size())\r\n            return false;\r\n        // check each parameter\r\n        for (RequestParam oParam : oParams) {\r\n            RequestParam oMyParam = getParam(oParam.getName(), true);\r\n            if (oMyParam == null)\r\n                return false;\r\n            // check number of values\r\n            if (oMyParam.getTotalValues() != oParam.getTotalValues())\r\n                return false;\r\n            // check values\r\n            for (int i = 0; i < oMyParam.getTotalValues(); i++) {\r\n                String oMyVal = oMyParam.getValue(i);\r\n                boolean oFound = false;\r\n                for (int j = 0; j < oParam.getTotalValues(); j++) {\r\n                    if (oParam.getValue(j).equals(oMyVal)) {\r\n                        oFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!oFound)\r\n                    return false;\r\n            }\r\n        }\r\n        if (!(mHashValue == null && oComparedTo.getHashValue() == null) && !(mHashValue.equals(oComparedTo.getHashValue())))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        return toString().hashCode();\r\n    }\r\n\r\n    protected void parse(String pUrl) {\r\n        if (pUrl == null)\r\n            return;\r\n        if (pUrl.startsWith(FILE_SCHEME)) {\r\n            return;\r\n        } else {\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Url \\\"\" + pUrl + \"\\\" is a web request\");\r\n            mIsWebRequest = true;\r\n        }\r\n        // Process \"#\" anchor\r\n        String oUrl = pUrl;\r\n        int oHashIndex = oUrl.indexOf(STRING_HASH);\r\n        if (oHashIndex > 0) {\r\n            if (oHashIndex < oUrl.length()) {\r\n                mHashValue = oUrl.substring(oHashIndex + 1);\r\n            }\r\n            oUrl = oUrl.substring(0, oHashIndex);\r\n        }\r\n        mBaseURL = oUrl;\r\n        // no query string to parse\r\n        if (oUrl.indexOf(STRING_QMARK) < 0)\r\n            return;\r\n        // Parsing query string\r\n        mBaseURL = oUrl.substring(0, oUrl.indexOf(STRING_QMARK));\r\n        String oQueryString = oUrl.substring(oUrl.indexOf(STRING_QMARK) + 1).trim();\r\n        if (oQueryString.length() == 0)\r\n            return;\r\n        String[] oPairs = oQueryString.split(STRING_AND);\r\n        for (String oName : oPairs) {\r\n            String[] oParam = oName.split(STRING_EQUAL);\r\n            // case: ?&from=1\r\n            if (oParam == null || oParam.length == 0)\r\n                continue;\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Param/Value found for pair \\\"\" + oName + \"\\\" = \" + oParam.length);\r\n            // avoid adding empty params\r\n            if (oParam.length == 1 && mNoEmptyParams)\r\n                continue;\r\n            String oEncodedValue = ((oParam.length == 2) ? URLEncode(oParam[1]) : STRING_EMPTY);\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Adding param \\\"\" + oParam[0] + \"\\\" with value \\\"\" + oEncodedValue + \"\\\".\");\r\n            addParam(oParam[0], oEncodedValue);\r\n        }\r\n    }\r\n\r\n    protected String URLEncode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            // Problem with the following: it will encode something already encoded\r\n            //oResult = URLEncoder.encode(pValue, \"UTF-8\");\r\n            // New Version: encode manually the special characters\r\n            oResult = pValue.replaceAll(\"&\", \"%26\").replaceAll(\"\\\\?\", \"%3F\").replaceAll(\"#\", \"%23\").replaceAll(\"=\", \"%3D\").replaceAll(\"\\\\s\", \"+\");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not encode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    protected String URLDecode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            oResult = pValue.replaceAll(\"%26\", \"&\").replaceAll(\"%3F\", \"\\\\?\").replaceAll(\"%23\", \"#\").replaceAll(\"%3D\", \"=\").replaceAll(\"\\\\+\", \" \");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not decode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#clone()\r\n\t */\r\n    @Override\r\n    public IRequest clone() {\r\n        IRequest oClone = new Request(getBaseURL() + getQueryString());\r\n        return oClone;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/RequestTest5.java",
		"test_prompt": "// RequestTest5.java\npackage net.sourceforge.ext4j.taglib.bo;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Request}.\n* It contains ten unit test cases for the {@link Request#equals(Object)} method.\n*/\nclass RequestTest5 {"
	},
	{
		"original_code": "// Request.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.bo;\r\n\r\nimport java.util.Collection;\r\nimport java.util.HashSet;\r\nimport java.util.Hashtable;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Request implements IRequest {\r\n\r\n    private static final String FILE_SCHEME = \"file:/\";\r\n\r\n    private static final String STRING_QMARK = \"?\";\r\n\r\n    private static final String STRING_HASH = \"#\";\r\n\r\n    private static final String STRING_AND = \"&\";\r\n\r\n    private static final String STRING_EQUAL = \"=\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private Map<String, RequestParam> mParams = new Hashtable<String, RequestParam>();\r\n\r\n    private boolean mIsWebRequest = false;\r\n\r\n    private String mBaseURL;\r\n\r\n    // string after the hash (#) sign\r\n    private String mHashValue;\r\n\r\n    private boolean mNoEmptyParams = false;\r\n\r\n    private Log mLogger = LogFactory.getLog(Request.class);\r\n\r\n    /**\r\n     */\r\n    public Request() {\r\n        this((String) null, false);\r\n    }\r\n\r\n    public Request(boolean pNoEmptyParams) {\r\n        this((String) null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(HttpServletRequest pRequest) {\r\n        this(pRequest, false);\r\n    }\r\n\r\n    public Request(HttpServletRequest pOrig, boolean pNoEmptyParams) {\r\n        this((pOrig != null) ? pOrig.getRequestURL().toString() + ((pOrig.getQueryString() != null) ? STRING_QMARK + pOrig.getQueryString() : STRING_EMPTY) : null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(String pUrl) {\r\n        this(pUrl, false);\r\n    }\r\n\r\n    public Request(String pUrl, boolean pNoEmptyParams) {\r\n        mNoEmptyParams = pNoEmptyParams;\r\n        if (pUrl != null)\r\n            parse(pUrl);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#cleanEmptyParams()\r\n\t */\r\n    public IRequest cleanEmptyParams() {\r\n        RequestParam oParam = null;\r\n        Set<String> oKeys = new HashSet<String>();\r\n        oKeys.addAll(mParams.keySet());\r\n        for (String oName : oKeys) {\r\n            oParam = mParams.get(oName);\r\n            if (oParam.getTotalValues() == 0) {\r\n                mParams.remove(oName);\r\n                continue;\r\n            }\r\n            boolean oEmpty = false;\r\n            for (int i = 0; i < oParam.getTotalValues() && !oEmpty; i++) {\r\n                oEmpty = ((oParam.getValue(i) == null) || (oParam.getValue(i).trim().length() == 0));\r\n            }\r\n            if (oEmpty)\r\n                mParams.remove(oName);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getBaseURL()\r\n\t */\r\n    public String getBaseURL() {\r\n        return mBaseURL;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setBaseURL(java.lang.String)\r\n\t */\r\n    public IRequest setBaseURL(String pBaseURL) {\r\n        mBaseURL = pBaseURL;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#isWebRequest()\r\n\t */\r\n    public boolean isWebRequest() {\r\n        return mIsWebRequest;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParams()\r\n\t */\r\n    public Collection<RequestParam> getParams() {\r\n        return mParams.values();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String)\r\n\t */\r\n    public RequestParam getParam(String pName) {\r\n        return getParam(pName, true);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String, boolean)\r\n\t */\r\n    public RequestParam getParam(String pName, boolean pIgnoreCase) {\r\n        if (pName == null)\r\n            return null;\r\n        if (!pIgnoreCase) {\r\n            return mParams.get(pName);\r\n        }\r\n        RequestParam oResult = null;\r\n        for (String oKey : mParams.keySet()) {\r\n            if (pName.equalsIgnoreCase(oKey)) {\r\n                oResult = mParams.get(oKey);\r\n                break;\r\n            }\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toBaseURL()\r\n\t */\r\n    public IRequest toBaseURL() {\r\n        mParams = new Hashtable<String, RequestParam>();\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, java.lang.String)\r\n\t */\r\n    public String getValue(String pName, String pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        String oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0);\r\n        return URLDecode(oResult);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, int)\r\n\t */\r\n    public int getValue(String pName, int pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        int oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0, pDefault);\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getHashValue()\r\n\t */\r\n    public String getHashValue() {\r\n        return mHashValue;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setHashValue(java.lang.String)\r\n\t */\r\n    public Request setHashValue(String pValue) {\r\n        mHashValue = pValue;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#removeParam(java.lang.String)\r\n\t */\r\n    public IRequest removeParam(String pName) {\r\n        if (mParams.size() > 0) {\r\n            RequestParam oParam = getParam(pName, true);\r\n            if (oParam != null)\r\n                mParams.remove(oParam.getName());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#addParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest addParam(String pName, String pValue) {\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam == null) {\r\n            oParam = new RequestParam(pName);\r\n            mParams.put(pName, oParam);\r\n        }\r\n        oParam.addValue(URLEncode(pValue));\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest setParam(String pName, String pValue) {\r\n        RequestParam oParam = new RequestParam(pName);\r\n        oParam.addValue(URLEncode(pValue));\r\n        return setParam(oParam);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(com.tripfilms.webtool.businessobject.Request.RequestParam)\r\n\t */\r\n    public IRequest setParam(RequestParam pParam) {\r\n        if (pParam == null)\r\n            return this;\r\n        mParams.put(pParam.getName(), pParam);\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getQueryString()\r\n\t */\r\n    public String getQueryString() {\r\n        StringBuilder oQS = new StringBuilder();\r\n        RequestParam oParam = null;\r\n        boolean oFirstPass = true;\r\n        for (String oName : mParams.keySet()) {\r\n            oParam = mParams.get(oName);\r\n            for (int i = 0; i < oParam.getTotalValues(); i++) {\r\n                if (oFirstPass) {\r\n                    oQS.append(STRING_QMARK);\r\n                } else {\r\n                    oQS.append(STRING_AND);\r\n                }\r\n                oFirstPass = false;\r\n                oQS.append(oParam.getName() + STRING_EQUAL + oParam.getValue(i));\r\n            }\r\n        }\r\n        return oQS.toString();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toString()\r\n\t */\r\n    @Override\r\n    public String toString() {\r\n        return getBaseURL() + getQueryString() + ((mHashValue != null) ? STRING_HASH + mHashValue : STRING_EMPTY);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object pObj) {\r\n        if (!(pObj instanceof Request))\r\n            return false;\r\n        IRequest oComparedTo = (IRequest) pObj;\r\n        // check if same base url\r\n        if ((mBaseURL != null && oComparedTo.getBaseURL() == null) || (mBaseURL == null && oComparedTo.getBaseURL() != null) || (!mBaseURL.equalsIgnoreCase(oComparedTo.getBaseURL())))\r\n            return false;\r\n        Collection<RequestParam> oParams = oComparedTo.getParams();\r\n        // check if same number of params\r\n        if (oParams.size() != getParams().size())\r\n            return false;\r\n        // check each parameter\r\n        for (RequestParam oParam : oParams) {\r\n            RequestParam oMyParam = getParam(oParam.getName(), true);\r\n            if (oMyParam == null)\r\n                return false;\r\n            // check number of values\r\n            if (oMyParam.getTotalValues() != oParam.getTotalValues())\r\n                return false;\r\n            // check values\r\n            for (int i = 0; i < oMyParam.getTotalValues(); i++) {\r\n                String oMyVal = oMyParam.getValue(i);\r\n                boolean oFound = false;\r\n                for (int j = 0; j < oParam.getTotalValues(); j++) {\r\n                    if (oParam.getValue(j).equals(oMyVal)) {\r\n                        oFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!oFound)\r\n                    return false;\r\n            }\r\n        }\r\n        if (!(mHashValue == null && oComparedTo.getHashValue() == null) && !(mHashValue.equals(oComparedTo.getHashValue())))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        return toString().hashCode();\r\n    }\r\n\r\n    protected void parse(String pUrl) {\r\n        if (pUrl == null)\r\n            return;\r\n        if (pUrl.startsWith(FILE_SCHEME)) {\r\n            return;\r\n        } else {\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Url \\\"\" + pUrl + \"\\\" is a web request\");\r\n            mIsWebRequest = true;\r\n        }\r\n        // Process \"#\" anchor\r\n        String oUrl = pUrl;\r\n        int oHashIndex = oUrl.indexOf(STRING_HASH);\r\n        if (oHashIndex > 0) {\r\n            if (oHashIndex < oUrl.length()) {\r\n                mHashValue = oUrl.substring(oHashIndex + 1);\r\n            }\r\n            oUrl = oUrl.substring(0, oHashIndex);\r\n        }\r\n        mBaseURL = oUrl;\r\n        // no query string to parse\r\n        if (oUrl.indexOf(STRING_QMARK) < 0)\r\n            return;\r\n        // Parsing query string\r\n        mBaseURL = oUrl.substring(0, oUrl.indexOf(STRING_QMARK));\r\n        String oQueryString = oUrl.substring(oUrl.indexOf(STRING_QMARK) + 1).trim();\r\n        if (oQueryString.length() == 0)\r\n            return;\r\n        String[] oPairs = oQueryString.split(STRING_AND);\r\n        for (String oName : oPairs) {\r\n            String[] oParam = oName.split(STRING_EQUAL);\r\n            // case: ?&from=1\r\n            if (oParam == null || oParam.length == 0)\r\n                continue;\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Param/Value found for pair \\\"\" + oName + \"\\\" = \" + oParam.length);\r\n            // avoid adding empty params\r\n            if (oParam.length == 1 && mNoEmptyParams)\r\n                continue;\r\n            String oEncodedValue = ((oParam.length == 2) ? URLEncode(oParam[1]) : STRING_EMPTY);\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Adding param \\\"\" + oParam[0] + \"\\\" with value \\\"\" + oEncodedValue + \"\\\".\");\r\n            addParam(oParam[0], oEncodedValue);\r\n        }\r\n    }\r\n\r\n    protected String URLEncode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            // Problem with the following: it will encode something already encoded\r\n            //oResult = URLEncoder.encode(pValue, \"UTF-8\");\r\n            // New Version: encode manually the special characters\r\n            oResult = pValue.replaceAll(\"&\", \"%26\").replaceAll(\"\\\\?\", \"%3F\").replaceAll(\"#\", \"%23\").replaceAll(\"=\", \"%3D\").replaceAll(\"\\\\s\", \"+\");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not encode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    protected String URLDecode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            oResult = pValue.replaceAll(\"%26\", \"&\").replaceAll(\"%3F\", \"\\\\?\").replaceAll(\"%23\", \"#\").replaceAll(\"%3D\", \"=\").replaceAll(\"\\\\+\", \" \");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not decode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#clone()\r\n\t */\r\n    @Override\r\n    public IRequest clone() {\r\n        IRequest oClone = new Request(getBaseURL() + getQueryString());\r\n        return oClone;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/RequestTest6.java",
		"test_prompt": "// RequestTest6.java\npackage net.sourceforge.ext4j.taglib.bo;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Request}.\n* It contains ten unit test cases for the {@link Request#hashCode()} method.\n*/\nclass RequestTest6 {"
	},
	{
		"original_code": "// Request.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.bo;\r\n\r\nimport java.util.Collection;\r\nimport java.util.HashSet;\r\nimport java.util.Hashtable;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Request implements IRequest {\r\n\r\n    private static final String FILE_SCHEME = \"file:/\";\r\n\r\n    private static final String STRING_QMARK = \"?\";\r\n\r\n    private static final String STRING_HASH = \"#\";\r\n\r\n    private static final String STRING_AND = \"&\";\r\n\r\n    private static final String STRING_EQUAL = \"=\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private Map<String, RequestParam> mParams = new Hashtable<String, RequestParam>();\r\n\r\n    private boolean mIsWebRequest = false;\r\n\r\n    private String mBaseURL;\r\n\r\n    // string after the hash (#) sign\r\n    private String mHashValue;\r\n\r\n    private boolean mNoEmptyParams = false;\r\n\r\n    private Log mLogger = LogFactory.getLog(Request.class);\r\n\r\n    /**\r\n     */\r\n    public Request() {\r\n        this((String) null, false);\r\n    }\r\n\r\n    public Request(boolean pNoEmptyParams) {\r\n        this((String) null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(HttpServletRequest pRequest) {\r\n        this(pRequest, false);\r\n    }\r\n\r\n    public Request(HttpServletRequest pOrig, boolean pNoEmptyParams) {\r\n        this((pOrig != null) ? pOrig.getRequestURL().toString() + ((pOrig.getQueryString() != null) ? STRING_QMARK + pOrig.getQueryString() : STRING_EMPTY) : null, pNoEmptyParams);\r\n    }\r\n\r\n    public Request(String pUrl) {\r\n        this(pUrl, false);\r\n    }\r\n\r\n    public Request(String pUrl, boolean pNoEmptyParams) {\r\n        mNoEmptyParams = pNoEmptyParams;\r\n        if (pUrl != null)\r\n            parse(pUrl);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#cleanEmptyParams()\r\n\t */\r\n    public IRequest cleanEmptyParams() {\r\n        RequestParam oParam = null;\r\n        Set<String> oKeys = new HashSet<String>();\r\n        oKeys.addAll(mParams.keySet());\r\n        for (String oName : oKeys) {\r\n            oParam = mParams.get(oName);\r\n            if (oParam.getTotalValues() == 0) {\r\n                mParams.remove(oName);\r\n                continue;\r\n            }\r\n            boolean oEmpty = false;\r\n            for (int i = 0; i < oParam.getTotalValues() && !oEmpty; i++) {\r\n                oEmpty = ((oParam.getValue(i) == null) || (oParam.getValue(i).trim().length() == 0));\r\n            }\r\n            if (oEmpty)\r\n                mParams.remove(oName);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getBaseURL()\r\n\t */\r\n    public String getBaseURL() {\r\n        return mBaseURL;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setBaseURL(java.lang.String)\r\n\t */\r\n    public IRequest setBaseURL(String pBaseURL) {\r\n        mBaseURL = pBaseURL;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#isWebRequest()\r\n\t */\r\n    public boolean isWebRequest() {\r\n        return mIsWebRequest;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParams()\r\n\t */\r\n    public Collection<RequestParam> getParams() {\r\n        return mParams.values();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String)\r\n\t */\r\n    public RequestParam getParam(String pName) {\r\n        return getParam(pName, true);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getParam(java.lang.String, boolean)\r\n\t */\r\n    public RequestParam getParam(String pName, boolean pIgnoreCase) {\r\n        if (pName == null)\r\n            return null;\r\n        if (!pIgnoreCase) {\r\n            return mParams.get(pName);\r\n        }\r\n        RequestParam oResult = null;\r\n        for (String oKey : mParams.keySet()) {\r\n            if (pName.equalsIgnoreCase(oKey)) {\r\n                oResult = mParams.get(oKey);\r\n                break;\r\n            }\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toBaseURL()\r\n\t */\r\n    public IRequest toBaseURL() {\r\n        mParams = new Hashtable<String, RequestParam>();\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, java.lang.String)\r\n\t */\r\n    public String getValue(String pName, String pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        String oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0);\r\n        return URLDecode(oResult);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getValue(java.lang.String, int)\r\n\t */\r\n    public int getValue(String pName, int pDefault) {\r\n        if (mParams.size() == 0)\r\n            return pDefault;\r\n        int oResult = pDefault;\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam != null && oParam.getTotalValues() > 0)\r\n            oResult = oParam.getValue(0, pDefault);\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getHashValue()\r\n\t */\r\n    public String getHashValue() {\r\n        return mHashValue;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setHashValue(java.lang.String)\r\n\t */\r\n    public Request setHashValue(String pValue) {\r\n        mHashValue = pValue;\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#removeParam(java.lang.String)\r\n\t */\r\n    public IRequest removeParam(String pName) {\r\n        if (mParams.size() > 0) {\r\n            RequestParam oParam = getParam(pName, true);\r\n            if (oParam != null)\r\n                mParams.remove(oParam.getName());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#addParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest addParam(String pName, String pValue) {\r\n        RequestParam oParam = getParam(pName, true);\r\n        if (oParam == null) {\r\n            oParam = new RequestParam(pName);\r\n            mParams.put(pName, oParam);\r\n        }\r\n        oParam.addValue(URLEncode(pValue));\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(java.lang.String, java.lang.String)\r\n\t */\r\n    public IRequest setParam(String pName, String pValue) {\r\n        RequestParam oParam = new RequestParam(pName);\r\n        oParam.addValue(URLEncode(pValue));\r\n        return setParam(oParam);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#setParam(com.tripfilms.webtool.businessobject.Request.RequestParam)\r\n\t */\r\n    public IRequest setParam(RequestParam pParam) {\r\n        if (pParam == null)\r\n            return this;\r\n        mParams.put(pParam.getName(), pParam);\r\n        return this;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#getQueryString()\r\n\t */\r\n    public String getQueryString() {\r\n        StringBuilder oQS = new StringBuilder();\r\n        RequestParam oParam = null;\r\n        boolean oFirstPass = true;\r\n        for (String oName : mParams.keySet()) {\r\n            oParam = mParams.get(oName);\r\n            for (int i = 0; i < oParam.getTotalValues(); i++) {\r\n                if (oFirstPass) {\r\n                    oQS.append(STRING_QMARK);\r\n                } else {\r\n                    oQS.append(STRING_AND);\r\n                }\r\n                oFirstPass = false;\r\n                oQS.append(oParam.getName() + STRING_EQUAL + oParam.getValue(i));\r\n            }\r\n        }\r\n        return oQS.toString();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#toString()\r\n\t */\r\n    @Override\r\n    public String toString() {\r\n        return getBaseURL() + getQueryString() + ((mHashValue != null) ? STRING_HASH + mHashValue : STRING_EMPTY);\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#equals(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public boolean equals(Object pObj) {\r\n        if (!(pObj instanceof Request))\r\n            return false;\r\n        IRequest oComparedTo = (IRequest) pObj;\r\n        // check if same base url\r\n        if ((mBaseURL != null && oComparedTo.getBaseURL() == null) || (mBaseURL == null && oComparedTo.getBaseURL() != null) || (!mBaseURL.equalsIgnoreCase(oComparedTo.getBaseURL())))\r\n            return false;\r\n        Collection<RequestParam> oParams = oComparedTo.getParams();\r\n        // check if same number of params\r\n        if (oParams.size() != getParams().size())\r\n            return false;\r\n        // check each parameter\r\n        for (RequestParam oParam : oParams) {\r\n            RequestParam oMyParam = getParam(oParam.getName(), true);\r\n            if (oMyParam == null)\r\n                return false;\r\n            // check number of values\r\n            if (oMyParam.getTotalValues() != oParam.getTotalValues())\r\n                return false;\r\n            // check values\r\n            for (int i = 0; i < oMyParam.getTotalValues(); i++) {\r\n                String oMyVal = oMyParam.getValue(i);\r\n                boolean oFound = false;\r\n                for (int j = 0; j < oParam.getTotalValues(); j++) {\r\n                    if (oParam.getValue(j).equals(oMyVal)) {\r\n                        oFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!oFound)\r\n                    return false;\r\n            }\r\n        }\r\n        if (!(mHashValue == null && oComparedTo.getHashValue() == null) && !(mHashValue.equals(oComparedTo.getHashValue())))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#hashCode()\r\n\t */\r\n    @Override\r\n    public int hashCode() {\r\n        return toString().hashCode();\r\n    }\r\n\r\n    protected void parse(String pUrl) {\r\n        if (pUrl == null)\r\n            return;\r\n        if (pUrl.startsWith(FILE_SCHEME)) {\r\n            return;\r\n        } else {\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Url \\\"\" + pUrl + \"\\\" is a web request\");\r\n            mIsWebRequest = true;\r\n        }\r\n        // Process \"#\" anchor\r\n        String oUrl = pUrl;\r\n        int oHashIndex = oUrl.indexOf(STRING_HASH);\r\n        if (oHashIndex > 0) {\r\n            if (oHashIndex < oUrl.length()) {\r\n                mHashValue = oUrl.substring(oHashIndex + 1);\r\n            }\r\n            oUrl = oUrl.substring(0, oHashIndex);\r\n        }\r\n        mBaseURL = oUrl;\r\n        // no query string to parse\r\n        if (oUrl.indexOf(STRING_QMARK) < 0)\r\n            return;\r\n        // Parsing query string\r\n        mBaseURL = oUrl.substring(0, oUrl.indexOf(STRING_QMARK));\r\n        String oQueryString = oUrl.substring(oUrl.indexOf(STRING_QMARK) + 1).trim();\r\n        if (oQueryString.length() == 0)\r\n            return;\r\n        String[] oPairs = oQueryString.split(STRING_AND);\r\n        for (String oName : oPairs) {\r\n            String[] oParam = oName.split(STRING_EQUAL);\r\n            // case: ?&from=1\r\n            if (oParam == null || oParam.length == 0)\r\n                continue;\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Param/Value found for pair \\\"\" + oName + \"\\\" = \" + oParam.length);\r\n            // avoid adding empty params\r\n            if (oParam.length == 1 && mNoEmptyParams)\r\n                continue;\r\n            String oEncodedValue = ((oParam.length == 2) ? URLEncode(oParam[1]) : STRING_EMPTY);\r\n            if (mLogger.isDebugEnabled())\r\n                mLogger.debug(\"Adding param \\\"\" + oParam[0] + \"\\\" with value \\\"\" + oEncodedValue + \"\\\".\");\r\n            addParam(oParam[0], oEncodedValue);\r\n        }\r\n    }\r\n\r\n    protected String URLEncode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            // Problem with the following: it will encode something already encoded\r\n            //oResult = URLEncoder.encode(pValue, \"UTF-8\");\r\n            // New Version: encode manually the special characters\r\n            oResult = pValue.replaceAll(\"&\", \"%26\").replaceAll(\"\\\\?\", \"%3F\").replaceAll(\"#\", \"%23\").replaceAll(\"=\", \"%3D\").replaceAll(\"\\\\s\", \"+\");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not encode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    protected String URLDecode(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        try {\r\n            oResult = pValue.replaceAll(\"%26\", \"&\").replaceAll(\"%3F\", \"\\\\?\").replaceAll(\"%23\", \"#\").replaceAll(\"%3D\", \"=\").replaceAll(\"\\\\+\", \" \");\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Could not decode \\\"\" + pValue + \"\\\".\", e);\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.businessobject.IRequest#clone()\r\n\t */\r\n    @Override\r\n    public IRequest clone() {\r\n        IRequest oClone = new Request(getBaseURL() + getQueryString());\r\n        return oClone;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/RequestTest7.java",
		"test_prompt": "// RequestTest7.java\npackage net.sourceforge.ext4j.taglib.bo;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Request}.\n* It contains ten unit test cases for the {@link Request#clone()} method.\n*/\nclass RequestTest7 {"
	},
	{
		"original_code": "// SimpleBreadcrumbsTag.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.JspWriter;\r\nimport javax.servlet.jsp.PageContext;\r\nimport javax.servlet.jsp.tagext.BodyTagSupport;\r\nimport net.sourceforge.ext4j.taglib.bo.TagUtil;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class SimpleBreadcrumbsTag extends BodyTagSupport {\r\n\r\n    private static final long serialVersionUID = 7704402082885653130L;\r\n\r\n    private Log mLogger = LogFactory.getLog(this.getClass());\r\n\r\n    private List<Breadcrumb> mBreadcrumbs;\r\n\r\n    private String mSeparator;\r\n\r\n    public static final String DEFAULT_TEMPLATE_LAST_CRUMB = \"<a class='current'>%s</a>\";\r\n\r\n    public static final String DEFAULT_TEMPLATE_CRUMB_WITHOUT_LINK = \"<a>%s</a>\";\r\n\r\n    public static final String DEFAULT_TEMPLATE_CRUMB_WITH_LINK = \"<a href='%s'>%s</a>\";\r\n\r\n    public static final String PROP_TEMPLATE_LAST_CRUMB = \"SimpleBreadcrumbsTag.Template.LastCrumb\";\r\n\r\n    public static final String PROP_TEMPLATE_CRUMB_WITH_LINK = \"SimpleBreadcrumbsTag.Template.CrumbWithLink\";\r\n\r\n    public static final String PROP_TEMPLATE_CRUMB_WITHOUT_LINK = \"SimpleBreadcrumbsTag.Template.CrumbWithoutLink\";\r\n\r\n    /**\r\n     */\r\n    public SimpleBreadcrumbsTag() {\r\n        super();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doAfterBody()\r\n\t */\r\n    @Override\r\n    public int doAfterBody() throws JspException {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doEndTag()\r\n\t */\r\n    @Override\r\n    public int doEndTag() throws JspException {\r\n        try {\r\n            renderTag(pageContext.getOut());\r\n        } catch (IOException oIOE) {\r\n            mLogger.error(\"Couldn't render tag\", oIOE);\r\n        } catch (Throwable t) {\r\n            mLogger.fatal(\"Error while rendering tag\", t);\r\n        }\r\n        return EVAL_PAGE;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doInitBody()\r\n\t */\r\n    @Override\r\n    public void doInitBody() throws JspException {\r\n        super.doInitBody();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doStartTag()\r\n\t */\r\n    @Override\r\n    public int doStartTag() throws JspException {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.TagSupport#setPageContext(javax.servlet.jsp.PageContext)\r\n\t */\r\n    @Override\r\n    public void setPageContext(PageContext pContext) {\r\n        pageContext = pContext;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.tag.BaseSingleBox#renderTag(javax.servlet.jsp.JspWriter)\r\n\t */\r\n    public void renderTag(JspWriter pOut) throws JspException, IOException {\r\n        if (mBreadcrumbs != null) {\r\n            StringBuilder oBuf = new StringBuilder();\r\n            for (int i = 0; i < mBreadcrumbs.size(); i++) {\r\n                Breadcrumb oCrumb = mBreadcrumbs.get(i);\r\n                String oCrumbLabel = Functions.capFirstLetters(oCrumb.getName());\r\n                if (i == (mBreadcrumbs.size() - 1)) {\r\n                    oBuf.append(String.format(TagLibConfig.getProperty(PROP_TEMPLATE_LAST_CRUMB, DEFAULT_TEMPLATE_LAST_CRUMB), oCrumbLabel));\r\n                } else {\r\n                    if (oCrumb.getURL() != null) {\r\n                        oBuf.append(String.format(TagLibConfig.getProperty(PROP_TEMPLATE_CRUMB_WITH_LINK, DEFAULT_TEMPLATE_CRUMB_WITH_LINK), createURL(oCrumb), oCrumbLabel));\r\n                    } else {\r\n                        oBuf.append(String.format(TagLibConfig.getProperty(PROP_TEMPLATE_CRUMB_WITHOUT_LINK, DEFAULT_TEMPLATE_CRUMB_WITHOUT_LINK), oCrumbLabel));\r\n                    }\r\n                }\r\n                oBuf.append(mSeparator);\r\n            }\r\n            pOut.write(oBuf.toString());\r\n        }\r\n    }\r\n\r\n    private String createURL(Breadcrumb pCrumb) {\r\n        try {\r\n            String oURL = TagUtil.resolveUrl(pCrumb.getURL(), null, pageContext);\r\n            oURL = new TagUtil.ParamManager().aggregateParams(oURL);\r\n            HttpServletResponse response = ((HttpServletResponse) pageContext.getResponse());\r\n            oURL = response.encodeURL(oURL);\r\n            return oURL;\r\n        } catch (Exception e) {\r\n            mLogger.error(\"Error creating link for url \\\"\" + pCrumb.getURL() + \"\\\".\", e);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the breadcrumbs.\r\n     */\r\n    public List<Breadcrumb> getBreadcrumbs() {\r\n        return mBreadcrumbs;\r\n    }\r\n\r\n    /**\r\n     * @param pBreadcrumbs The breadcrumbs to set.\r\n     */\r\n    public void setBreadcrumbs(List<Breadcrumb> pBreadcrumbs) {\r\n        mBreadcrumbs = pBreadcrumbs;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the separator.\r\n     */\r\n    public String getSeparator() {\r\n        return mSeparator;\r\n    }\r\n\r\n    /**\r\n     * @param pSeparator The separator to set.\r\n     */\r\n    public void setSeparator(String pSeparator) {\r\n        mSeparator = pSeparator;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/SimpleBreadcrumbsTagTest0.java",
		"test_prompt": "// SimpleBreadcrumbsTagTest0.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.io.IOException;\nimport java.util.List;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.PageContext;\nimport javax.servlet.jsp.tagext.BodyTagSupport;\nimport net.sourceforge.ext4j.taglib.bo.TagUtil;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleBreadcrumbsTag}.\n* It contains ten unit test cases for the {@link SimpleBreadcrumbsTag#doAfterBody()} method.\n*/\nclass SimpleBreadcrumbsTagTest0 {"
	},
	{
		"original_code": "// SimpleBreadcrumbsTag.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.JspWriter;\r\nimport javax.servlet.jsp.PageContext;\r\nimport javax.servlet.jsp.tagext.BodyTagSupport;\r\nimport net.sourceforge.ext4j.taglib.bo.TagUtil;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class SimpleBreadcrumbsTag extends BodyTagSupport {\r\n\r\n    private static final long serialVersionUID = 7704402082885653130L;\r\n\r\n    private Log mLogger = LogFactory.getLog(this.getClass());\r\n\r\n    private List<Breadcrumb> mBreadcrumbs;\r\n\r\n    private String mSeparator;\r\n\r\n    public static final String DEFAULT_TEMPLATE_LAST_CRUMB = \"<a class='current'>%s</a>\";\r\n\r\n    public static final String DEFAULT_TEMPLATE_CRUMB_WITHOUT_LINK = \"<a>%s</a>\";\r\n\r\n    public static final String DEFAULT_TEMPLATE_CRUMB_WITH_LINK = \"<a href='%s'>%s</a>\";\r\n\r\n    public static final String PROP_TEMPLATE_LAST_CRUMB = \"SimpleBreadcrumbsTag.Template.LastCrumb\";\r\n\r\n    public static final String PROP_TEMPLATE_CRUMB_WITH_LINK = \"SimpleBreadcrumbsTag.Template.CrumbWithLink\";\r\n\r\n    public static final String PROP_TEMPLATE_CRUMB_WITHOUT_LINK = \"SimpleBreadcrumbsTag.Template.CrumbWithoutLink\";\r\n\r\n    /**\r\n     */\r\n    public SimpleBreadcrumbsTag() {\r\n        super();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doAfterBody()\r\n\t */\r\n    @Override\r\n    public int doAfterBody() throws JspException {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doEndTag()\r\n\t */\r\n    @Override\r\n    public int doEndTag() throws JspException {\r\n        try {\r\n            renderTag(pageContext.getOut());\r\n        } catch (IOException oIOE) {\r\n            mLogger.error(\"Couldn't render tag\", oIOE);\r\n        } catch (Throwable t) {\r\n            mLogger.fatal(\"Error while rendering tag\", t);\r\n        }\r\n        return EVAL_PAGE;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doInitBody()\r\n\t */\r\n    @Override\r\n    public void doInitBody() throws JspException {\r\n        super.doInitBody();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doStartTag()\r\n\t */\r\n    @Override\r\n    public int doStartTag() throws JspException {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.TagSupport#setPageContext(javax.servlet.jsp.PageContext)\r\n\t */\r\n    @Override\r\n    public void setPageContext(PageContext pContext) {\r\n        pageContext = pContext;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.tag.BaseSingleBox#renderTag(javax.servlet.jsp.JspWriter)\r\n\t */\r\n    public void renderTag(JspWriter pOut) throws JspException, IOException {\r\n        if (mBreadcrumbs != null) {\r\n            StringBuilder oBuf = new StringBuilder();\r\n            for (int i = 0; i < mBreadcrumbs.size(); i++) {\r\n                Breadcrumb oCrumb = mBreadcrumbs.get(i);\r\n                String oCrumbLabel = Functions.capFirstLetters(oCrumb.getName());\r\n                if (i == (mBreadcrumbs.size() - 1)) {\r\n                    oBuf.append(String.format(TagLibConfig.getProperty(PROP_TEMPLATE_LAST_CRUMB, DEFAULT_TEMPLATE_LAST_CRUMB), oCrumbLabel));\r\n                } else {\r\n                    if (oCrumb.getURL() != null) {\r\n                        oBuf.append(String.format(TagLibConfig.getProperty(PROP_TEMPLATE_CRUMB_WITH_LINK, DEFAULT_TEMPLATE_CRUMB_WITH_LINK), createURL(oCrumb), oCrumbLabel));\r\n                    } else {\r\n                        oBuf.append(String.format(TagLibConfig.getProperty(PROP_TEMPLATE_CRUMB_WITHOUT_LINK, DEFAULT_TEMPLATE_CRUMB_WITHOUT_LINK), oCrumbLabel));\r\n                    }\r\n                }\r\n                oBuf.append(mSeparator);\r\n            }\r\n            pOut.write(oBuf.toString());\r\n        }\r\n    }\r\n\r\n    private String createURL(Breadcrumb pCrumb) {\r\n        try {\r\n            String oURL = TagUtil.resolveUrl(pCrumb.getURL(), null, pageContext);\r\n            oURL = new TagUtil.ParamManager().aggregateParams(oURL);\r\n            HttpServletResponse response = ((HttpServletResponse) pageContext.getResponse());\r\n            oURL = response.encodeURL(oURL);\r\n            return oURL;\r\n        } catch (Exception e) {\r\n            mLogger.error(\"Error creating link for url \\\"\" + pCrumb.getURL() + \"\\\".\", e);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the breadcrumbs.\r\n     */\r\n    public List<Breadcrumb> getBreadcrumbs() {\r\n        return mBreadcrumbs;\r\n    }\r\n\r\n    /**\r\n     * @param pBreadcrumbs The breadcrumbs to set.\r\n     */\r\n    public void setBreadcrumbs(List<Breadcrumb> pBreadcrumbs) {\r\n        mBreadcrumbs = pBreadcrumbs;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the separator.\r\n     */\r\n    public String getSeparator() {\r\n        return mSeparator;\r\n    }\r\n\r\n    /**\r\n     * @param pSeparator The separator to set.\r\n     */\r\n    public void setSeparator(String pSeparator) {\r\n        mSeparator = pSeparator;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/SimpleBreadcrumbsTagTest1.java",
		"test_prompt": "// SimpleBreadcrumbsTagTest1.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.io.IOException;\nimport java.util.List;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.PageContext;\nimport javax.servlet.jsp.tagext.BodyTagSupport;\nimport net.sourceforge.ext4j.taglib.bo.TagUtil;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleBreadcrumbsTag}.\n* It contains ten unit test cases for the {@link SimpleBreadcrumbsTag#doEndTag()} method.\n*/\nclass SimpleBreadcrumbsTagTest1 {"
	},
	{
		"original_code": "// SimpleBreadcrumbsTag.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.JspWriter;\r\nimport javax.servlet.jsp.PageContext;\r\nimport javax.servlet.jsp.tagext.BodyTagSupport;\r\nimport net.sourceforge.ext4j.taglib.bo.TagUtil;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class SimpleBreadcrumbsTag extends BodyTagSupport {\r\n\r\n    private static final long serialVersionUID = 7704402082885653130L;\r\n\r\n    private Log mLogger = LogFactory.getLog(this.getClass());\r\n\r\n    private List<Breadcrumb> mBreadcrumbs;\r\n\r\n    private String mSeparator;\r\n\r\n    public static final String DEFAULT_TEMPLATE_LAST_CRUMB = \"<a class='current'>%s</a>\";\r\n\r\n    public static final String DEFAULT_TEMPLATE_CRUMB_WITHOUT_LINK = \"<a>%s</a>\";\r\n\r\n    public static final String DEFAULT_TEMPLATE_CRUMB_WITH_LINK = \"<a href='%s'>%s</a>\";\r\n\r\n    public static final String PROP_TEMPLATE_LAST_CRUMB = \"SimpleBreadcrumbsTag.Template.LastCrumb\";\r\n\r\n    public static final String PROP_TEMPLATE_CRUMB_WITH_LINK = \"SimpleBreadcrumbsTag.Template.CrumbWithLink\";\r\n\r\n    public static final String PROP_TEMPLATE_CRUMB_WITHOUT_LINK = \"SimpleBreadcrumbsTag.Template.CrumbWithoutLink\";\r\n\r\n    /**\r\n     */\r\n    public SimpleBreadcrumbsTag() {\r\n        super();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doAfterBody()\r\n\t */\r\n    @Override\r\n    public int doAfterBody() throws JspException {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doEndTag()\r\n\t */\r\n    @Override\r\n    public int doEndTag() throws JspException {\r\n        try {\r\n            renderTag(pageContext.getOut());\r\n        } catch (IOException oIOE) {\r\n            mLogger.error(\"Couldn't render tag\", oIOE);\r\n        } catch (Throwable t) {\r\n            mLogger.fatal(\"Error while rendering tag\", t);\r\n        }\r\n        return EVAL_PAGE;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doInitBody()\r\n\t */\r\n    @Override\r\n    public void doInitBody() throws JspException {\r\n        super.doInitBody();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doStartTag()\r\n\t */\r\n    @Override\r\n    public int doStartTag() throws JspException {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.TagSupport#setPageContext(javax.servlet.jsp.PageContext)\r\n\t */\r\n    @Override\r\n    public void setPageContext(PageContext pContext) {\r\n        pageContext = pContext;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see com.tripfilms.webtool.tag.BaseSingleBox#renderTag(javax.servlet.jsp.JspWriter)\r\n\t */\r\n    public void renderTag(JspWriter pOut) throws JspException, IOException {\r\n        if (mBreadcrumbs != null) {\r\n            StringBuilder oBuf = new StringBuilder();\r\n            for (int i = 0; i < mBreadcrumbs.size(); i++) {\r\n                Breadcrumb oCrumb = mBreadcrumbs.get(i);\r\n                String oCrumbLabel = Functions.capFirstLetters(oCrumb.getName());\r\n                if (i == (mBreadcrumbs.size() - 1)) {\r\n                    oBuf.append(String.format(TagLibConfig.getProperty(PROP_TEMPLATE_LAST_CRUMB, DEFAULT_TEMPLATE_LAST_CRUMB), oCrumbLabel));\r\n                } else {\r\n                    if (oCrumb.getURL() != null) {\r\n                        oBuf.append(String.format(TagLibConfig.getProperty(PROP_TEMPLATE_CRUMB_WITH_LINK, DEFAULT_TEMPLATE_CRUMB_WITH_LINK), createURL(oCrumb), oCrumbLabel));\r\n                    } else {\r\n                        oBuf.append(String.format(TagLibConfig.getProperty(PROP_TEMPLATE_CRUMB_WITHOUT_LINK, DEFAULT_TEMPLATE_CRUMB_WITHOUT_LINK), oCrumbLabel));\r\n                    }\r\n                }\r\n                oBuf.append(mSeparator);\r\n            }\r\n            pOut.write(oBuf.toString());\r\n        }\r\n    }\r\n\r\n    private String createURL(Breadcrumb pCrumb) {\r\n        try {\r\n            String oURL = TagUtil.resolveUrl(pCrumb.getURL(), null, pageContext);\r\n            oURL = new TagUtil.ParamManager().aggregateParams(oURL);\r\n            HttpServletResponse response = ((HttpServletResponse) pageContext.getResponse());\r\n            oURL = response.encodeURL(oURL);\r\n            return oURL;\r\n        } catch (Exception e) {\r\n            mLogger.error(\"Error creating link for url \\\"\" + pCrumb.getURL() + \"\\\".\", e);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the breadcrumbs.\r\n     */\r\n    public List<Breadcrumb> getBreadcrumbs() {\r\n        return mBreadcrumbs;\r\n    }\r\n\r\n    /**\r\n     * @param pBreadcrumbs The breadcrumbs to set.\r\n     */\r\n    public void setBreadcrumbs(List<Breadcrumb> pBreadcrumbs) {\r\n        mBreadcrumbs = pBreadcrumbs;\r\n    }\r\n\r\n    /**\r\n     * @return Returns the separator.\r\n     */\r\n    public String getSeparator() {\r\n        return mSeparator;\r\n    }\r\n\r\n    /**\r\n     * @param pSeparator The separator to set.\r\n     */\r\n    public void setSeparator(String pSeparator) {\r\n        mSeparator = pSeparator;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/SimpleBreadcrumbsTagTest2.java",
		"test_prompt": "// SimpleBreadcrumbsTagTest2.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.io.IOException;\nimport java.util.List;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.PageContext;\nimport javax.servlet.jsp.tagext.BodyTagSupport;\nimport net.sourceforge.ext4j.taglib.bo.TagUtil;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleBreadcrumbsTag}.\n* It contains ten unit test cases for the {@link SimpleBreadcrumbsTag#doStartTag()} method.\n*/\nclass SimpleBreadcrumbsTagTest2 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest0.java",
		"test_prompt": "// FunctionsTest0.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#year(int)} method.\n*/\nclass FunctionsTest0 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest1.java",
		"test_prompt": "// FunctionsTest1.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#toUpper(char)} method.\n*/\nclass FunctionsTest1 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest2.java",
		"test_prompt": "// FunctionsTest2.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#forDigit(int, int)} method.\n*/\nclass FunctionsTest2 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest3.java",
		"test_prompt": "// FunctionsTest3.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#length(Object)} method.\n*/\nclass FunctionsTest3 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest4.java",
		"test_prompt": "// FunctionsTest4.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#join(String[], String)} method.\n*/\nclass FunctionsTest4 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest5.java",
		"test_prompt": "// FunctionsTest5.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#seo(String)} method.\n*/\nclass FunctionsTest5 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest6.java",
		"test_prompt": "// FunctionsTest6.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#round(double)} method.\n*/\nclass FunctionsTest6 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest7.java",
		"test_prompt": "// FunctionsTest7.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#stripHTML(String)} method.\n*/\nclass FunctionsTest7 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest8.java",
		"test_prompt": "// FunctionsTest8.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#blurb(String, int)} method.\n*/\nclass FunctionsTest8 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest9.java",
		"test_prompt": "// FunctionsTest9.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#blurbHTML(String, int)} method.\n*/\nclass FunctionsTest9 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest10.java",
		"test_prompt": "// FunctionsTest10.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#since(Date)} method.\n*/\nclass FunctionsTest10 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest11.java",
		"test_prompt": "// FunctionsTest11.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#decimalFormat(double, String)} method.\n*/\nclass FunctionsTest11 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest12.java",
		"test_prompt": "// FunctionsTest12.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.\n*/\nclass FunctionsTest12 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest13.java",
		"test_prompt": "// FunctionsTest13.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#addS(String)} method.\n*/\nclass FunctionsTest13 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest14.java",
		"test_prompt": "// FunctionsTest14.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#blurbChar(String, int)} method.\n*/\nclass FunctionsTest14 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest15.java",
		"test_prompt": "// FunctionsTest15.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#cutWordCR(String, int)} method.\n*/\nclass FunctionsTest15 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest16.java",
		"test_prompt": "// FunctionsTest16.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#cutWordCRText(String, int)} method.\n*/\nclass FunctionsTest16 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest17.java",
		"test_prompt": "// FunctionsTest17.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#replaceCRWithBR(String)} method.\n*/\nclass FunctionsTest17 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest18.java",
		"test_prompt": "// FunctionsTest18.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.\n*/\nclass FunctionsTest18 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest19.java",
		"test_prompt": "// FunctionsTest19.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#orderWords(String, String)} method.\n*/\nclass FunctionsTest19 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest20.java",
		"test_prompt": "// FunctionsTest20.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#capFirstLetters(String)} method.\n*/\nclass FunctionsTest20 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest21.java",
		"test_prompt": "// FunctionsTest21.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#numberInWord(int)} method.\n*/\nclass FunctionsTest21 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest22.java",
		"test_prompt": "// FunctionsTest22.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#ordinal(int)} method.\n*/\nclass FunctionsTest22 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest23.java",
		"test_prompt": "// FunctionsTest23.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#removeParam(String, IRequest)} method.\n*/\nclass FunctionsTest23 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest24.java",
		"test_prompt": "// FunctionsTest24.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#addParam(String, String, IRequest)} method.\n*/\nclass FunctionsTest24 {"
	},
	{
		"original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger = LogFactory.getLog(Functions.class);\r\n    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();\r\n\r\n    private static final String UNDERSCORE = \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE = \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE = { \"-\", \":\", \",\", \"'\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX = \"...\";\r\n\r\n    private static final String STRING_SPACE = \" \";\r\n\r\n    private static final String STRING_DOT = \".\";\r\n\r\n    private static final String STRING_COMMA = \",\";\r\n\r\n    private static final String STRING_EMPTY = \"\";\r\n\r\n    private static final String STRING_HTML_CR = \"<br />\";\r\n\r\n    //private static final String STRING_CR = System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX = \"\\n\";\r\n\r\n    private final static String EOL_WIN32 = \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY = \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX = \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX = \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c = Calendar.getInstance();\r\n        int oYear = c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection == null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable<Object> oIterable = (Iterable<Object>) pCollection;\r\n            int oSize = 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings == null || pStrings.length == 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < pStrings.length; i++) {\r\n            if (oBuf.length() > 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue == null)\r\n            return pValue;\r\n        String oResult = pValue;\r\n        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i = 0; i < TO_REPLACE.length; i++) {\r\n            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s == null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\<[^>]*\\\\>\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = stripHTML(s);\r\n        if (oResult.length() < pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf = new StringBuilder();\r\n        String[] oWords = oResult.split(STRING_SPACE);\r\n        int i = 0;\r\n        while (i < oWords.length && oBuf.length() < pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult = oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult = oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult = stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        String oResult = s.replaceAll(\"<p>\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"</p>\", STRING_EMPTY);\r\n        oResult = oResult.replaceAll(\"<br />\", STRING_SPACE);\r\n        oResult = oResult.replaceAll(\"<br>\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom == null)\r\n            return \"\";\r\n        String oCaption = null;\r\n        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed <= 1) {\r\n            long oMinutesPassed = oDiff / (1000 * 60);\r\n            if (oMinutesPassed <= 1) {\r\n                oCaption = \"1 minute ago\";\r\n            } else if (oMinutesPassed <= 5) {\r\n                oCaption = \"5 minutes ago\";\r\n            } else if (oMinutesPassed <= 30) {\r\n                oCaption = \"30 minutes ago\";\r\n            }\r\n            long oHours = oMinutesPassed / 60;\r\n            if (oHours <= 1) {\r\n                oCaption = \"1 hour ago\";\r\n            } else if (oHours <= 11) {\r\n                oCaption = oHours + \" hours ago\";\r\n            } else {\r\n                oCaption = \"today\";\r\n            }\r\n        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {\r\n            oCaption = \"yesterday\";\r\n        } else if (oDaysPassed <= 7) {\r\n            oCaption = \"this week\";\r\n        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {\r\n            oCaption = \"last week\";\r\n        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {\r\n            oCaption = \"2 weeks ago\";\r\n        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {\r\n            oCaption = \"3 weeks ago\";\r\n        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {\r\n            oCaption = \"last month\";\r\n        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {\r\n            int oMonths = ((int) oDaysPassed) / 30;\r\n            oCaption = oMonths + \" months ago\";\r\n        } else {\r\n            oCaption = \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter = new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime == null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add 's or ' at the end of the text, for example \"James'\" for \"James\" or \"Daniel's\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with 's or '\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText == null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) == 's')\r\n            return pText + \"'\";\r\n        else\r\n            return pText + \"'s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        //\t\tif (s.length() < pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() < pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s == null)\r\n            return null;\r\n        if (s.length() < pMaxLength)\r\n            return s;\r\n        String oString = s;\r\n        String oReturn = \"\";\r\n        do {\r\n            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString = oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() > pMaxLength);\r\n        if (oString.trim().length() == 0) {\r\n            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn = oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText == null)\r\n            return null;\r\n        if (pText.length() < pMaxLength)\r\n            return pText;\r\n        String oReturn = \"\";\r\n        int c = 0;\r\n        for (int i = 0; i < pText.length(); i++) {\r\n            if (pText.charAt(i) == ' ')\r\n                c = 0;\r\n            else if (c >= pMaxLength) {\r\n                oReturn = oReturn + STRING_HTML_CR;\r\n                c = 0;\r\n            } else\r\n                c++;\r\n            oReturn = oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText == null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"<br />\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime == null)\r\n            return 0;\r\n        Calendar c = Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords = s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        for (int i = 0; i < oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) < oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s == null || s.trim().length() == 0)\r\n            return s;\r\n        String oLowerCase = s.toLowerCase();\r\n        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf = new StringBuffer();\r\n        String oToken = null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken = oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i = 1; i < 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord = NUMBERS_WORD.get(pValue);\r\n        if (oWord == null)\r\n            oWord = Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit = getLastDigit(pInteger);\r\n        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s = Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/FunctionsTest25.java",
		"test_prompt": "// FunctionsTest25.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#setParam(String, String, IRequest)} method.\n*/\nclass FunctionsTest25 {"
	},
	{
		"original_code": "// BaseSingleBox.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.io.IOException;\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.JspWriter;\r\nimport javax.servlet.jsp.PageContext;\r\nimport javax.servlet.jsp.tagext.BodyTagSupport;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic abstract class BaseSingleBox extends BodyTagSupport {\r\n\r\n    private static final long serialVersionUID = 172403171446868250L;\r\n\r\n    private Log mLogger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     */\r\n    public BaseSingleBox() {\r\n        super();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doAfterBody()\r\n\t */\r\n    @Override\r\n    public int doAfterBody() throws JspException {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doEndTag()\r\n\t */\r\n    @Override\r\n    public int doEndTag() throws JspException {\r\n        try {\r\n            renderTag(pageContext.getOut());\r\n        } catch (IOException oIOE) {\r\n            mLogger.error(\"Couldn't render tag\", oIOE);\r\n        } catch (Throwable t) {\r\n            mLogger.fatal(\"Error while rendering tag\", t);\r\n        }\r\n        return EVAL_PAGE;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doInitBody()\r\n\t */\r\n    @Override\r\n    public void doInitBody() throws JspException {\r\n        super.doInitBody();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doStartTag()\r\n\t */\r\n    @Override\r\n    public int doStartTag() throws JspException {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.TagSupport#setPageContext(javax.servlet.jsp.PageContext)\r\n\t */\r\n    @Override\r\n    public void setPageContext(PageContext pContext) {\r\n        pageContext = pContext;\r\n    }\r\n\r\n    public abstract void renderTag(JspWriter pOut) throws JspException, IOException;\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/BaseSingleBoxTest0.java",
		"test_prompt": "// BaseSingleBoxTest0.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.io.IOException;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.PageContext;\nimport javax.servlet.jsp.tagext.BodyTagSupport;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BaseSingleBox}.\n* It contains ten unit test cases for the {@link BaseSingleBox#doAfterBody()} method.\n*/\nclass BaseSingleBoxTest0 {"
	},
	{
		"original_code": "// BaseSingleBox.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.io.IOException;\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.JspWriter;\r\nimport javax.servlet.jsp.PageContext;\r\nimport javax.servlet.jsp.tagext.BodyTagSupport;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic abstract class BaseSingleBox extends BodyTagSupport {\r\n\r\n    private static final long serialVersionUID = 172403171446868250L;\r\n\r\n    private Log mLogger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     */\r\n    public BaseSingleBox() {\r\n        super();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doAfterBody()\r\n\t */\r\n    @Override\r\n    public int doAfterBody() throws JspException {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doEndTag()\r\n\t */\r\n    @Override\r\n    public int doEndTag() throws JspException {\r\n        try {\r\n            renderTag(pageContext.getOut());\r\n        } catch (IOException oIOE) {\r\n            mLogger.error(\"Couldn't render tag\", oIOE);\r\n        } catch (Throwable t) {\r\n            mLogger.fatal(\"Error while rendering tag\", t);\r\n        }\r\n        return EVAL_PAGE;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doInitBody()\r\n\t */\r\n    @Override\r\n    public void doInitBody() throws JspException {\r\n        super.doInitBody();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doStartTag()\r\n\t */\r\n    @Override\r\n    public int doStartTag() throws JspException {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.TagSupport#setPageContext(javax.servlet.jsp.PageContext)\r\n\t */\r\n    @Override\r\n    public void setPageContext(PageContext pContext) {\r\n        pageContext = pContext;\r\n    }\r\n\r\n    public abstract void renderTag(JspWriter pOut) throws JspException, IOException;\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/BaseSingleBoxTest1.java",
		"test_prompt": "// BaseSingleBoxTest1.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.io.IOException;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.PageContext;\nimport javax.servlet.jsp.tagext.BodyTagSupport;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BaseSingleBox}.\n* It contains ten unit test cases for the {@link BaseSingleBox#doEndTag()} method.\n*/\nclass BaseSingleBoxTest1 {"
	},
	{
		"original_code": "// BaseSingleBox.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.io.IOException;\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.JspWriter;\r\nimport javax.servlet.jsp.PageContext;\r\nimport javax.servlet.jsp.tagext.BodyTagSupport;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic abstract class BaseSingleBox extends BodyTagSupport {\r\n\r\n    private static final long serialVersionUID = 172403171446868250L;\r\n\r\n    private Log mLogger = LogFactory.getLog(this.getClass());\r\n\r\n    /**\r\n     */\r\n    public BaseSingleBox() {\r\n        super();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doAfterBody()\r\n\t */\r\n    @Override\r\n    public int doAfterBody() throws JspException {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doEndTag()\r\n\t */\r\n    @Override\r\n    public int doEndTag() throws JspException {\r\n        try {\r\n            renderTag(pageContext.getOut());\r\n        } catch (IOException oIOE) {\r\n            mLogger.error(\"Couldn't render tag\", oIOE);\r\n        } catch (Throwable t) {\r\n            mLogger.fatal(\"Error while rendering tag\", t);\r\n        }\r\n        return EVAL_PAGE;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doInitBody()\r\n\t */\r\n    @Override\r\n    public void doInitBody() throws JspException {\r\n        super.doInitBody();\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.BodyTagSupport#doStartTag()\r\n\t */\r\n    @Override\r\n    public int doStartTag() throws JspException {\r\n        return SKIP_BODY;\r\n    }\r\n\r\n    /* (non-Javadoc)\r\n\t * @see javax.servlet.jsp.tagext.TagSupport#setPageContext(javax.servlet.jsp.PageContext)\r\n\t */\r\n    @Override\r\n    public void setPageContext(PageContext pContext) {\r\n        pageContext = pContext;\r\n    }\r\n\r\n    public abstract void renderTag(JspWriter pOut) throws JspException, IOException;\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/BaseSingleBoxTest2.java",
		"test_prompt": "// BaseSingleBoxTest2.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.io.IOException;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.servlet.jsp.PageContext;\nimport javax.servlet.jsp.tagext.BodyTagSupport;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BaseSingleBox}.\n* It contains ten unit test cases for the {@link BaseSingleBox#doStartTag()} method.\n*/\nclass BaseSingleBoxTest2 {"
	},
	{
		"original_code": "// Breadcrumbs.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Breadcrumbs implements Iterable<Breadcrumb> {\r\n\r\n    private List<Breadcrumb> mCrumbs = new ArrayList<Breadcrumb>();\r\n\r\n    public Iterator<Breadcrumb> iterator() {\r\n        return mCrumbs.iterator();\r\n    }\r\n\r\n    public Breadcrumbs add(String pName, String pURL) {\r\n        mCrumbs.add(new Breadcrumb(pName, pURL));\r\n        return this;\r\n    }\r\n\r\n    public Breadcrumbs add(String pName) {\r\n        mCrumbs.add(new Breadcrumb(pName));\r\n        return this;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/BreadcrumbsTest0.java",
		"test_prompt": "// BreadcrumbsTest0.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Breadcrumbs}.\n* It contains ten unit test cases for the {@link Breadcrumbs#iterator()} method.\n*/\nclass BreadcrumbsTest0 {"
	},
	{
		"original_code": "// Breadcrumbs.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Breadcrumbs implements Iterable<Breadcrumb> {\r\n\r\n    private List<Breadcrumb> mCrumbs = new ArrayList<Breadcrumb>();\r\n\r\n    public Iterator<Breadcrumb> iterator() {\r\n        return mCrumbs.iterator();\r\n    }\r\n\r\n    public Breadcrumbs add(String pName, String pURL) {\r\n        mCrumbs.add(new Breadcrumb(pName, pURL));\r\n        return this;\r\n    }\r\n\r\n    public Breadcrumbs add(String pName) {\r\n        mCrumbs.add(new Breadcrumb(pName));\r\n        return this;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/BreadcrumbsTest1.java",
		"test_prompt": "// BreadcrumbsTest1.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Breadcrumbs}.\n* It contains ten unit test cases for the {@link Breadcrumbs#add(String, String)} method.\n*/\nclass BreadcrumbsTest1 {"
	},
	{
		"original_code": "// Breadcrumbs.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Breadcrumbs implements Iterable<Breadcrumb> {\r\n\r\n    private List<Breadcrumb> mCrumbs = new ArrayList<Breadcrumb>();\r\n\r\n    public Iterator<Breadcrumb> iterator() {\r\n        return mCrumbs.iterator();\r\n    }\r\n\r\n    public Breadcrumbs add(String pName, String pURL) {\r\n        mCrumbs.add(new Breadcrumb(pName, pURL));\r\n        return this;\r\n    }\r\n\r\n    public Breadcrumbs add(String pName) {\r\n        mCrumbs.add(new Breadcrumb(pName));\r\n        return this;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/BreadcrumbsTest2.java",
		"test_prompt": "// BreadcrumbsTest2.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Breadcrumbs}.\n* It contains ten unit test cases for the {@link Breadcrumbs#add(String)} method.\n*/\nclass BreadcrumbsTest2 {"
	},
	{
		"original_code": "// TagLibConfig.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.util.Properties;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class TagLibConfig {\r\n\r\n    private static Properties mConfig = new Properties();\r\n\r\n    public static Properties getConfig() {\r\n        return mConfig;\r\n    }\r\n\r\n    public void setConfig(Properties pProperties) {\r\n        mConfig = pProperties;\r\n    }\r\n\r\n    public static String getProperty(String pKey, String pDefault) {\r\n        return mConfig.getProperty(pKey, pDefault);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/TagLibConfigTest0.java",
		"test_prompt": "// TagLibConfigTest0.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TagLibConfig}.\n* It contains ten unit test cases for the {@link TagLibConfig#getConfig()} method.\n*/\nclass TagLibConfigTest0 {"
	},
	{
		"original_code": "// TagLibConfig.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.util.Properties;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class TagLibConfig {\r\n\r\n    private static Properties mConfig = new Properties();\r\n\r\n    public static Properties getConfig() {\r\n        return mConfig;\r\n    }\r\n\r\n    public void setConfig(Properties pProperties) {\r\n        mConfig = pProperties;\r\n    }\r\n\r\n    public static String getProperty(String pKey, String pDefault) {\r\n        return mConfig.getProperty(pKey, pDefault);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/TagLibConfigTest1.java",
		"test_prompt": "// TagLibConfigTest1.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TagLibConfig}.\n* It contains ten unit test cases for the {@link TagLibConfig#getProperty(String, String)} method.\n*/\nclass TagLibConfigTest1 {"
	},
	{
		"original_code": "// PaginationTag.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.io.IOException;\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.JspWriter;\r\nimport javax.xml.bind.JAXBContext;\r\nimport javax.xml.bind.JAXBException;\r\nimport javax.xml.bind.Marshaller;\r\nimport javax.xml.transform.Result;\r\nimport javax.xml.transform.Source;\r\nimport javax.xml.transform.Templates;\r\nimport javax.xml.transform.TransformerConfigurationException;\r\nimport javax.xml.transform.TransformerFactory;\r\nimport javax.xml.transform.TransformerFactoryConfigurationError;\r\nimport javax.xml.transform.sax.SAXTransformerFactory;\r\nimport javax.xml.transform.sax.TransformerHandler;\r\nimport javax.xml.transform.stream.StreamResult;\r\nimport javax.xml.transform.stream.StreamSource;\r\nimport net.sourceforge.ext4j.taglib.bo.DefaultResourceLoader;\r\nimport net.sourceforge.ext4j.taglib.bo.TagUtil;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport com.tripfilms.os.exttaglib.pagination.datatype.Page;\r\nimport com.tripfilms.os.exttaglib.pagination.datatype.Pages;\r\nimport com.tripfilms.os.exttaglib.pagination.datatype.Pagination;\r\nimport com.tripfilms.os.exttaglib.pagination.datatype.StaticPage;\r\n\r\n/**\r\n * @author Luc Pezet <lpezet@gmail.com>\r\n */\r\npublic class PaginationTag extends BaseSingleBox {\r\n\r\n    private static final String DEFAULT_XSL = \"classpath:/net/sourceforge/ext4j/taglib/simple_pagination.xsl\";\r\n\r\n    private static final long serialVersionUID = 4722503210539035774L;\r\n\r\n    private static final String EQUALS = \"=\";\r\n\r\n    private static final String AMPERSAND = \"&\";\r\n\r\n    private static final String QUESTION_MARK = \"?\";\r\n\r\n    private static final String DEFAULT_FROM_PARAM_NAME = \"from\";\r\n\r\n    private static final String DEFAULT_TO_PARAM_NAME = \"to\";\r\n\r\n    private int mFrom;\r\n\r\n    private int mTotal;\r\n\r\n    private int mByPage;\r\n\r\n    private int mPages;\r\n\r\n    private String mUrl;\r\n\r\n    private String mFromParamName = DEFAULT_FROM_PARAM_NAME;\r\n\r\n    private String mToParamName = DEFAULT_TO_PARAM_NAME;\r\n\r\n    private boolean mUseFromToOnFirstPage = false;\r\n\r\n    private Log mLogger = LogFactory.getLog(PaginationTag.class);\r\n\r\n    private static JAXBContext mJAXBContext;\r\n\r\n    private static Templates mTemplate;\r\n\r\n    static {\r\n        try {\r\n            mJAXBContext = JAXBContext.newInstance(\"com.tripfilms.os.exttaglib.pagination.datatype\");\r\n        } catch (JAXBException e) {\r\n            throw new RuntimeException(\"Error initializing JAXB for PaginationTag.\", e);\r\n        }\r\n        try {\r\n            mTemplate = loadTemplate(DEFAULT_XSL);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(\"Error loading XSL for PaginationTag.\", e);\r\n        }\r\n    }\r\n\r\n    /*\r\n\t * (non-Javadoc)\r\n\t *\r\n\t * @see\r\n\t * com.tripfilms.os.exttaglib.BaseSingleBox#renderTag(javax.servlet.jsp.\r\n\t * JspWriter)\r\n\t */\r\n    @Override\r\n    public void renderTag(JspWriter pOut) throws JspException, IOException {\r\n        Pagination oPagination = getPagination();\r\n        try {\r\n            Marshaller oMarshaller = mJAXBContext.createMarshaller();\r\n            TransformerFactory oTxFactory = TransformerFactory.newInstance();\r\n            Result oResult = new StreamResult(pOut);\r\n            TransformerHandler oHandler = ((SAXTransformerFactory) oTxFactory).newTransformerHandler(mTemplate);\r\n            oHandler.setResult(oResult);\r\n            oMarshaller.marshal(oPagination, oHandler);\r\n        } catch (JAXBException e) {\r\n            mLogger.fatal(\"Error initializing JAXBContext to create Pagination XML.\", e);\r\n            throw new JspException(e);\r\n        } catch (TransformerConfigurationException e) {\r\n            mLogger.fatal(\"Error with SAX.\", e);\r\n            throw new JspException(e);\r\n        } catch (Exception e) {\r\n            mLogger.fatal(\"Unexpected error.\", e);\r\n            throw new JspException(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper to set XSL template to a different one than the default one.\r\n     * WARNING: This will set the XSL template for all PaginationTag (static).\r\n     *\r\n     * @param pTemplateLocation\r\n     */\r\n    public void setTemplate(String pTemplateLocation) throws Exception {\r\n        Templates oNewTemplate = null;\r\n        try {\r\n            oNewTemplate = loadTemplate(pTemplateLocation);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        mTemplate = oNewTemplate;\r\n    }\r\n\r\n    private static Templates loadTemplate(String pTemplateLocation) throws TransformerFactoryConfigurationError, TransformerConfigurationException {\r\n        TransformerFactory oTxFactory = TransformerFactory.newInstance();\r\n        DefaultResourceLoader oResourceLoader = new DefaultResourceLoader();\r\n        Source oSource = new StreamSource(oResourceLoader.getResource(pTemplateLocation).toExternalForm());\r\n        return oTxFactory.newTemplates(oSource);\r\n    }\r\n\r\n    public Pagination getPagination() throws JspException {\r\n        Pagination oResult = new Pagination();\r\n        if (mTotal <= 0)\r\n            return oResult;\r\n        if (mByPage < 1)\r\n            mByPage = 10;\r\n        if (// then we consider it's the last page\r\n        mFrom > mTotal)\r\n            mFrom = mTotal - 1;\r\n        if (mFrom < 1)\r\n            mFrom = 1;\r\n        int oNbPages = mTotal / mByPage;\r\n        if (// if any reminder...\r\n        mTotal % mByPage > 0)\r\n            // ...we'll include them in an extra page\r\n            oNbPages++;\r\n        // number of pages to display\r\n        if (oNbPages < mPages) {\r\n            mPages = oNbPages;\r\n        }\r\n        oResult.setTotalPages(oNbPages);\r\n        int oCurrentPage = (mFrom - 1) / mByPage + 1;\r\n        oResult.setCurrentPage(oCurrentPage);\r\n        // first page to display in the list\r\n        int oFirstLink = oCurrentPage - (mPages / 2);\r\n        if (oFirstLink < 1)\r\n            oFirstLink = 1;\r\n        if (oCurrentPage > oNbPages - (mPages / 2))\r\n            oFirstLink = oNbPages - mPages + 1;\r\n        String oLink = null;\r\n        // First & Prev\r\n        oLink = addFromTo(mUrl, 1, mByPage);\r\n        if (oCurrentPage > 1) {\r\n            oResult.setFirstPage(newStaticPage(oLink));\r\n            oLink = addFromTo(mUrl, mByPage * (oCurrentPage - 1 - 1) + 1, mByPage * (oCurrentPage - 1));\r\n            oResult.setPreviousPage(newStaticPage(oLink));\r\n        }\r\n        // Pages\r\n        oResult.setPages(new Pages());\r\n        for (int i = oFirstLink; i < (oFirstLink + mPages); i++) {\r\n            oLink = addFromTo(mUrl, i * mByPage - mByPage + 1, i * mByPage);\r\n            oResult.getPages().getPage().add(newPage(i, oLink));\r\n        }\r\n        // Next & Last\r\n        if (oCurrentPage < oNbPages) {\r\n            oLink = addFromTo(mUrl, mByPage * (oCurrentPage + 1 - 1) + 1, mByPage * (oCurrentPage + 1));\r\n            oResult.setNextPage(newStaticPage(oLink));\r\n            oLink = addFromTo(mUrl, (oNbPages - 1) * mByPage + 1, mByPage * oNbPages);\r\n            oResult.setLastPage(newStaticPage(oLink));\r\n        }\r\n        return oResult;\r\n    }\r\n\r\n    private Page newPage(int pNumber, String pLink) throws JspException {\r\n        Page oResult = new Page();\r\n        oResult.setN(pNumber);\r\n        oResult.setUrl(TagUtil.rewriteURL(pLink, pageContext));\r\n        return oResult;\r\n    }\r\n\r\n    private StaticPage newStaticPage(String pLink) throws JspException {\r\n        StaticPage oResult = new StaticPage();\r\n        oResult.setUrl(TagUtil.rewriteURL(pLink, pageContext));\r\n        return oResult;\r\n    }\r\n\r\n    private String addFromTo(String pURL, int pFrom, int pTo) {\r\n        String oResult = pURL;\r\n        if (pFrom <= 1 && !mUseFromToOnFirstPage)\r\n            return oResult;\r\n        if (oResult.indexOf(QUESTION_MARK) < 0)\r\n            oResult += QUESTION_MARK;\r\n        oResult += AMPERSAND + mFromParamName + EQUALS + pFrom + AMPERSAND + mToParamName + EQUALS + pTo;\r\n        return oResult;\r\n    }\r\n\r\n    public int getFrom() {\r\n        return mFrom;\r\n    }\r\n\r\n    public void setFrom(int pFrom) {\r\n        mFrom = pFrom;\r\n    }\r\n\r\n    public int getTotal() {\r\n        return mTotal;\r\n    }\r\n\r\n    public void setTotal(int pTotal) {\r\n        mTotal = pTotal;\r\n    }\r\n\r\n    public int getByPage() {\r\n        return mByPage;\r\n    }\r\n\r\n    public void setByPage(int pByPage) {\r\n        mByPage = pByPage;\r\n    }\r\n\r\n    public int getPages() {\r\n        return mPages;\r\n    }\r\n\r\n    public void setPages(int pPages) {\r\n        mPages = pPages;\r\n    }\r\n\r\n    public String getUrl() {\r\n        return mUrl;\r\n    }\r\n\r\n    public void setUrl(String pUrl) {\r\n        mUrl = pUrl;\r\n    }\r\n\r\n    public String getFromParamName() {\r\n        return mFromParamName;\r\n    }\r\n\r\n    public void setFromParamName(String pFromParamName) {\r\n        mFromParamName = pFromParamName;\r\n    }\r\n\r\n    public String getToParamName() {\r\n        return mToParamName;\r\n    }\r\n\r\n    public void setToParamName(String pToParamName) {\r\n        mToParamName = pToParamName;\r\n    }\r\n\r\n    public boolean isUseFromToOnFirstPage() {\r\n        return mUseFromToOnFirstPage;\r\n    }\r\n\r\n    public void setUseFromToOnFirstPage(boolean pUseFromToOnFirstPage) {\r\n        mUseFromToOnFirstPage = pUseFromToOnFirstPage;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/PaginationTagTest.java",
		"test_prompt": "// PaginationTagTest.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.io.IOException;\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.JspWriter;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Templates;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.TransformerFactoryConfigurationError;\nimport javax.xml.transform.sax.SAXTransformerFactory;\nimport javax.xml.transform.sax.TransformerHandler;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.stream.StreamSource;\nimport net.sourceforge.ext4j.taglib.bo.DefaultResourceLoader;\nimport net.sourceforge.ext4j.taglib.bo.TagUtil;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport com.tripfilms.os.exttaglib.pagination.datatype.Page;\nimport com.tripfilms.os.exttaglib.pagination.datatype.Pages;\nimport com.tripfilms.os.exttaglib.pagination.datatype.Pagination;\nimport com.tripfilms.os.exttaglib.pagination.datatype.StaticPage;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PaginationTag}.\n* It contains ten unit test cases for the {@link PaginationTag#isUseFromToOnFirstPage()} method.\n*/\nclass PaginationTagTest {"
	},
	{
		"original_code": "// FooterTemplateTag.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag.repeater;\r\n\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.jstl.core.LoopTag;\r\nimport javax.servlet.jsp.tagext.TagSupport;\r\n\r\n/**\r\n * Renders body only when dealing with last element from loop.\r\n * Port of ASP.NET Control \"Repeater\" element.\r\n * @author Luc Pezet <lpezet@gmail.com>\r\n */\r\npublic class FooterTemplateTag extends TagSupport {\r\n\r\n    private static final long serialVersionUID = -2810849883535324606L;\r\n\r\n    @Override\r\n    public int doStartTag() throws JspException {\r\n        if (!(getParent() instanceof RepeaterTag)) {\r\n            throw new JspException(\"Must be used inside a RepeaterTag.\");\r\n        }\r\n        LoopTag parent = (LoopTag) getParent();\r\n        if (parent.getLoopStatus() == null) {\r\n            throw new JspException(\"'varStatus' must be specified to be able to use it. Consider using RepeaterTag or set 'varStatus' attribute to your loop tag.\");\r\n        }\r\n        if (parent.getLoopStatus().isLast()) {\r\n            return EVAL_BODY_INCLUDE;\r\n        } else {\r\n            return SKIP_BODY;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/repeater/FooterTemplateTagTest.java",
		"test_prompt": "// FooterTemplateTagTest.java\npackage net.sourceforge.ext4j.taglib.tag.repeater;\n\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.jstl.core.LoopTag;\nimport javax.servlet.jsp.tagext.TagSupport;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FooterTemplateTag}.\n* It contains ten unit test cases for the {@link FooterTemplateTag#doStartTag()} method.\n*/\nclass FooterTemplateTagTest {"
	},
	{
		"original_code": "// HeaderTemplateTag.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag.repeater;\r\n\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.jstl.core.LoopTag;\r\nimport javax.servlet.jsp.tagext.TagSupport;\r\n\r\n/**\r\n * Renders body only when dealing with first element from loop.\r\n * Advantage is that it won't render anything if there are no iteration (e.g. empty list).\r\n * Port of ASP.NET Control \"Repeater\" element.\r\n * @author Luc Pezet <lpezet@gmail.com>\r\n */\r\npublic class HeaderTemplateTag extends TagSupport {\r\n\r\n    private static final long serialVersionUID = -3077174534867551778L;\r\n\r\n    @Override\r\n    public int doStartTag() throws JspException {\r\n        if (!(getParent() instanceof LoopTag)) {\r\n            throw new JspException(\"Must be used inside a LoopTag.\");\r\n        }\r\n        LoopTag parent = (LoopTag) getParent();\r\n        if (parent.getLoopStatus() == null) {\r\n            throw new JspException(\"'varStatus' must be specified to be able to use it. Consider using RepeaterTag or set 'varStatus' attribute to your loop tag.\");\r\n        }\r\n        if (parent.getLoopStatus().isFirst()) {\r\n            return EVAL_BODY_INCLUDE;\r\n        } else {\r\n            return SKIP_BODY;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/repeater/HeaderTemplateTagTest.java",
		"test_prompt": "// HeaderTemplateTagTest.java\npackage net.sourceforge.ext4j.taglib.tag.repeater;\n\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.jstl.core.LoopTag;\nimport javax.servlet.jsp.tagext.TagSupport;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HeaderTemplateTag}.\n* It contains ten unit test cases for the {@link HeaderTemplateTag#doStartTag()} method.\n*/\nclass HeaderTemplateTagTest {"
	},
	{
		"original_code": "// ItemTemplateTag.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag.repeater;\r\n\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.jstl.core.LoopTag;\r\nimport javax.servlet.jsp.tagext.TagSupport;\r\n\r\n/**\r\n * Renders current item.\r\n * Port of ASP.NET Control \"Repeater\" element.\r\n * @author Luc Pezet <lpezet@gmail.com>\r\n */\r\npublic class ItemTemplateTag extends TagSupport {\r\n\r\n    private static final long serialVersionUID = -5366648898715981947L;\r\n\r\n    @Override\r\n    public int doStartTag() throws JspException {\r\n        if (!(getParent() instanceof LoopTag)) {\r\n            throw new JspException(\"Must be used inside a LoopTag.\");\r\n        }\r\n        return EVAL_BODY_INCLUDE;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/repeater/ItemTemplateTagTest.java",
		"test_prompt": "// ItemTemplateTagTest.java\npackage net.sourceforge.ext4j.taglib.tag.repeater;\n\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.jstl.core.LoopTag;\nimport javax.servlet.jsp.tagext.TagSupport;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ItemTemplateTag}.\n* It contains ten unit test cases for the {@link ItemTemplateTag#doStartTag()} method.\n*/\nclass ItemTemplateTagTest {"
	},
	{
		"original_code": "// SeparatorTemplateTag.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag.repeater;\r\n\r\nimport javax.servlet.jsp.JspException;\r\nimport javax.servlet.jsp.jstl.core.LoopTag;\r\nimport javax.servlet.jsp.tagext.TagSupport;\r\n\r\n/**\r\n * Renders body between elements. It then renders after each element, except the last one.\r\n * Port of ASP.NET Control \"Repeater\" element.\r\n * @author Luc Pezet <lpezet@gmail.com>\r\n */\r\npublic class SeparatorTemplateTag extends TagSupport {\r\n\r\n    /**\r\n     */\r\n    private static final long serialVersionUID = -1549850629972367184L;\r\n\r\n    @Override\r\n    public int doStartTag() throws JspException {\r\n        if (!(getParent() instanceof RepeaterTag)) {\r\n            throw new JspException(\"Must be used inside a RepeaterTag.\");\r\n        }\r\n        LoopTag parent = (LoopTag) getParent();\r\n        if (parent.getLoopStatus() == null) {\r\n            throw new JspException(\"'varStatus' must be specified to be able to use it. Consider using RepeaterTag or set 'varStatus' attribute to your loop tag.\");\r\n        }\r\n        if (!parent.getLoopStatus().isLast()) {\r\n            return EVAL_BODY_INCLUDE;\r\n        } else {\r\n            return SKIP_BODY;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/repeater/SeparatorTemplateTagTest.java",
		"test_prompt": "// SeparatorTemplateTagTest.java\npackage net.sourceforge.ext4j.taglib.tag.repeater;\n\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.jstl.core.LoopTag;\nimport javax.servlet.jsp.tagext.TagSupport;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SeparatorTemplateTag}.\n* It contains ten unit test cases for the {@link SeparatorTemplateTag#doStartTag()} method.\n*/\nclass SeparatorTemplateTagTest {"
	},
	{
		"original_code": "// ExecutionContext.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.log;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\n/**\r\n * @author Luc Pezet <lpezet@gmail.com>\r\n */\r\npublic class ExecutionContext {\r\n\r\n    private static ThreadLocal<HttpServletRequest> mCurrentRequest = new ThreadLocal<HttpServletRequest>();\r\n\r\n    public static HttpServletRequest getCurrentRequest() {\r\n        return mCurrentRequest.get();\r\n    }\r\n\r\n    public static void setCurrentRequest(HttpServletRequest pRequest) {\r\n        mCurrentRequest.set(pRequest);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/log/ExecutionContextTest.java",
		"test_prompt": "// ExecutionContextTest.java\npackage net.sourceforge.ext4j.log;\n\nimport javax.servlet.http.HttpServletRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExecutionContext}.\n* It contains ten unit test cases for the {@link ExecutionContext#getCurrentRequest()} method.\n*/\nclass ExecutionContextTest {"
	},
	{
		"original_code": "// ProtocolConverter.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.log.logback.converter;\r\n\r\nimport net.sourceforge.ext4j.log.logback.RequestInfoExtractorFactory;\r\nimport ch.qos.logback.classic.pattern.ClassicConverter;\r\nimport ch.qos.logback.classic.spi.ILoggingEvent;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class ProtocolConverter extends ClassicConverter {\r\n\r\n    /* (non-Javadoc)\r\n\t * @see ch.qos.logback.core.pattern.Converter#convert(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public String convert(ILoggingEvent pArg0) {\r\n        return RequestInfoExtractorFactory.getExtractorInstance().getProtocol();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/log/logback/converter/ProtocolConverterTest.java",
		"test_prompt": "// ProtocolConverterTest.java\npackage net.sourceforge.ext4j.log.logback.converter;\n\nimport net.sourceforge.ext4j.log.logback.RequestInfoExtractorFactory;\nimport ch.qos.logback.classic.pattern.ClassicConverter;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProtocolConverter}.\n* It contains ten unit test cases for the {@link ProtocolConverter#convert(ILoggingEvent)} method.\n*/\nclass ProtocolConverterTest {"
	},
	{
		"original_code": "// RequestMethodConverter.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.log.logback.converter;\r\n\r\nimport net.sourceforge.ext4j.log.logback.RequestInfoExtractorFactory;\r\nimport ch.qos.logback.classic.pattern.ClassicConverter;\r\nimport ch.qos.logback.classic.spi.ILoggingEvent;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class RequestMethodConverter extends ClassicConverter {\r\n\r\n    /* (non-Javadoc)\r\n\t * @see ch.qos.logback.core.pattern.Converter#convert(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public String convert(ILoggingEvent pArg0) {\r\n        return RequestInfoExtractorFactory.getExtractorInstance().getMethod();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/log/logback/converter/RequestMethodConverterTest.java",
		"test_prompt": "// RequestMethodConverterTest.java\npackage net.sourceforge.ext4j.log.logback.converter;\n\nimport net.sourceforge.ext4j.log.logback.RequestInfoExtractorFactory;\nimport ch.qos.logback.classic.pattern.ClassicConverter;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RequestMethodConverter}.\n* It contains ten unit test cases for the {@link RequestMethodConverter#convert(ILoggingEvent)} method.\n*/\nclass RequestMethodConverterTest {"
	},
	{
		"original_code": "// RequestURLConverter.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.log.logback.converter;\r\n\r\nimport net.sourceforge.ext4j.log.logback.RequestInfoExtractorFactory;\r\nimport ch.qos.logback.classic.pattern.ClassicConverter;\r\nimport ch.qos.logback.classic.spi.ILoggingEvent;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class RequestURLConverter extends ClassicConverter {\r\n\r\n    /* (non-Javadoc)\r\n\t * @see ch.qos.logback.core.pattern.Converter#convert(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public String convert(ILoggingEvent pArg0) {\r\n        return RequestInfoExtractorFactory.getExtractorInstance().getRequestURL();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/log/logback/converter/RequestURLConverterTest.java",
		"test_prompt": "// RequestURLConverterTest.java\npackage net.sourceforge.ext4j.log.logback.converter;\n\nimport net.sourceforge.ext4j.log.logback.RequestInfoExtractorFactory;\nimport ch.qos.logback.classic.pattern.ClassicConverter;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RequestURLConverter}.\n* It contains ten unit test cases for the {@link RequestURLConverter#convert(ILoggingEvent)} method.\n*/\nclass RequestURLConverterTest {"
	},
	{
		"original_code": "// CookieConverter.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.log.logback.converter;\r\n\r\nimport net.sourceforge.ext4j.log.logback.RequestInfoExtractorFactory;\r\nimport ch.qos.logback.classic.pattern.ClassicConverter;\r\nimport ch.qos.logback.classic.spi.ILoggingEvent;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class CookieConverter extends ClassicConverter {\r\n\r\n    private static final String NA = \"NA\";\r\n\r\n    /* (non-Javadoc)\r\n\t * @see ch.qos.logback.core.pattern.Converter#convert(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public String convert(ILoggingEvent pEvent) {\r\n        if (pEvent.getArgumentArray() != null && pEvent.getArgumentArray().length > 0) {\r\n            String oCookieName = (String) pEvent.getArgumentArray()[0];\r\n            return RequestInfoExtractorFactory.getExtractorInstance().getCookie(oCookieName);\r\n        }\r\n        return NA;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/log/logback/converter/CookieConverterTest.java",
		"test_prompt": "// CookieConverterTest.java\npackage net.sourceforge.ext4j.log.logback.converter;\n\nimport net.sourceforge.ext4j.log.logback.RequestInfoExtractorFactory;\nimport ch.qos.logback.classic.pattern.ClassicConverter;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CookieConverter}.\n* It contains ten unit test cases for the {@link CookieConverter#convert(ILoggingEvent)} method.\n*/\nclass CookieConverterTest {"
	},
	{
		"original_code": "// RemoteAddrConverter.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.log.logback.converter;\r\n\r\nimport net.sourceforge.ext4j.log.logback.RequestInfoExtractorFactory;\r\nimport ch.qos.logback.classic.pattern.ClassicConverter;\r\nimport ch.qos.logback.classic.spi.ILoggingEvent;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class RemoteAddrConverter extends ClassicConverter {\r\n\r\n    /* (non-Javadoc)\r\n\t * @see ch.qos.logback.core.pattern.Converter#convert(java.lang.Object)\r\n\t */\r\n    @Override\r\n    public String convert(ILoggingEvent pArg0) {\r\n        return RequestInfoExtractorFactory.getExtractorInstance().getRemoteAddr();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/log/logback/converter/RemoteAddrConverterTest.java",
		"test_prompt": "// RemoteAddrConverterTest.java\npackage net.sourceforge.ext4j.log.logback.converter;\n\nimport net.sourceforge.ext4j.log.logback.RequestInfoExtractorFactory;\nimport ch.qos.logback.classic.pattern.ClassicConverter;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RemoteAddrConverter}.\n* It contains ten unit test cases for the {@link RemoteAddrConverter#convert(ILoggingEvent)} method.\n*/\nclass RemoteAddrConverterTest {"
	},
	{
		"original_code": "// RequestInfoExtractorFactory.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.log.logback;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class RequestInfoExtractorFactory {\r\n\r\n    private static IRequestInfoExtractor mInstance;\r\n\r\n    static {\r\n        initInstance();\r\n    }\r\n\r\n    public static IRequestInfoExtractor getExtractorInstance() {\r\n        return mInstance;\r\n    }\r\n\r\n    private static void initInstance() {\r\n        if (!useSpring()) {\r\n            mInstance = new StubRequestInfoExtractor();\r\n        }\r\n    }\r\n\r\n    private static boolean useSpring() {\r\n        Class c = load(\"org.springframework.web.context.request.RequestContextHolder\");\r\n        if (c == null)\r\n            return false;\r\n        c = load(\"net.sourceforge.ext4j.log.logback.SpringRequestInfoExtractor\");\r\n        setInstance(c);\r\n        return true;\r\n    }\r\n\r\n    private static Class load(String pClassName) {\r\n        try {\r\n            return RequestInfoExtractorFactory.class.getClassLoader().loadClass(pClassName);\r\n            //return Class.forName(pClassName);\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static void setInstance(Class pClass) {\r\n        try {\r\n            mInstance = (IRequestInfoExtractor) pClass.newInstance();\r\n        } catch (InstantiationException e) {\r\n            e.printStackTrace();\r\n            throw new RuntimeException(e);\r\n        } catch (IllegalAccessException e) {\r\n            e.printStackTrace();\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/log/logback/RequestInfoExtractorFactoryTest.java",
		"test_prompt": "// RequestInfoExtractorFactoryTest.java\npackage net.sourceforge.ext4j.log.logback;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RequestInfoExtractorFactory}.\n* It contains ten unit test cases for the {@link RequestInfoExtractorFactory#getExtractorInstance()} method.\n*/\nclass RequestInfoExtractorFactoryTest {"
	},
	{
		"original_code": "// Server.java\n/**\r\n */\r\npackage net.sourceforge.ext4j.log;\r\n\r\n/**\r\n * @author Luc Pezet <lpezet@gmail.com>\r\n */\r\npublic class Server {\r\n\r\n    private static Server mInstance = new Server();\r\n\r\n    private String mPublicIP = \"NA\";\r\n\r\n    private String mCurrentHost = \"NA\";\r\n\r\n    private String mInfo = \"NA\";\r\n\r\n    private Server() {\r\n    }\r\n\r\n    public static Server getInstance() {\r\n        return mInstance;\r\n    }\r\n\r\n    public String getPublicIP() {\r\n        return mPublicIP;\r\n    }\r\n\r\n    public void setPublicIP(String pPublicIP) {\r\n        mPublicIP = pPublicIP;\r\n    }\r\n\r\n    public String getCurrentHost() {\r\n        return mCurrentHost;\r\n    }\r\n\r\n    public void setCurrentHost(String pCurrentHost) {\r\n        mCurrentHost = pCurrentHost;\r\n    }\r\n\r\n    public String getInfo() {\r\n        return mInfo;\r\n    }\r\n\r\n    protected void setInfo(String pInfo) {\r\n        mInfo = pInfo;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/log/ServerTest.java",
		"test_prompt": "// ServerTest.java\npackage net.sourceforge.ext4j.log;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Server}.\n* It contains ten unit test cases for the {@link Server#getInstance()} method.\n*/\nclass ServerTest {"
	},
	{
		"original_code": "// ObjectFactory.java\n//\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a>\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\n\n/**\n * This object contains factory methods for each\n * Java content interface and Java element interface\n * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.\n * <p>An ObjectFactory allows you to programatically\n * construct new instances of the Java representation\n * for XML content. The Java representation of XML\n * content can consist of schema derived interfaces\n * and classes representing the binding of schema\n * type definitions, element declarations and model\n * groups.  Factory methods for each of these are\n * provided in this class.\n */\n@XmlRegistry\npublic class ObjectFactory {\n\n    /**\n     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype\n     */\n    public ObjectFactory() {\n    }\n\n    /**\n     * Create an instance of {@link Page }\n     */\n    public Page createPage() {\n        return new Page();\n    }\n\n    /**\n     * Create an instance of {@link StaticPage }\n     */\n    public StaticPage createStaticPage() {\n        return new StaticPage();\n    }\n\n    /**\n     * Create an instance of {@link Pagination }\n     */\n    public Pagination createPagination() {\n        return new Pagination();\n    }\n\n    /**\n     * Create an instance of {@link Pages }\n     */\n    public Pages createPages() {\n        return new Pages();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactoryTest0.java",
		"test_prompt": "// ObjectFactoryTest0.java\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a>\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ObjectFactory}.\n* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.\n*/\nclass ObjectFactoryTest0 {"
	},
	{
		"original_code": "// ObjectFactory.java\n//\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a>\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\n\n/**\n * This object contains factory methods for each\n * Java content interface and Java element interface\n * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.\n * <p>An ObjectFactory allows you to programatically\n * construct new instances of the Java representation\n * for XML content. The Java representation of XML\n * content can consist of schema derived interfaces\n * and classes representing the binding of schema\n * type definitions, element declarations and model\n * groups.  Factory methods for each of these are\n * provided in this class.\n */\n@XmlRegistry\npublic class ObjectFactory {\n\n    /**\n     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype\n     */\n    public ObjectFactory() {\n    }\n\n    /**\n     * Create an instance of {@link Page }\n     */\n    public Page createPage() {\n        return new Page();\n    }\n\n    /**\n     * Create an instance of {@link StaticPage }\n     */\n    public StaticPage createStaticPage() {\n        return new StaticPage();\n    }\n\n    /**\n     * Create an instance of {@link Pagination }\n     */\n    public Pagination createPagination() {\n        return new Pagination();\n    }\n\n    /**\n     * Create an instance of {@link Pages }\n     */\n    public Pages createPages() {\n        return new Pages();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactoryTest1.java",
		"test_prompt": "// ObjectFactoryTest1.java\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a>\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ObjectFactory}.\n* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.\n*/\nclass ObjectFactoryTest1 {"
	},
	{
		"original_code": "// ObjectFactory.java\n//\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a>\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\n\n/**\n * This object contains factory methods for each\n * Java content interface and Java element interface\n * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.\n * <p>An ObjectFactory allows you to programatically\n * construct new instances of the Java representation\n * for XML content. The Java representation of XML\n * content can consist of schema derived interfaces\n * and classes representing the binding of schema\n * type definitions, element declarations and model\n * groups.  Factory methods for each of these are\n * provided in this class.\n */\n@XmlRegistry\npublic class ObjectFactory {\n\n    /**\n     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype\n     */\n    public ObjectFactory() {\n    }\n\n    /**\n     * Create an instance of {@link Page }\n     */\n    public Page createPage() {\n        return new Page();\n    }\n\n    /**\n     * Create an instance of {@link StaticPage }\n     */\n    public StaticPage createStaticPage() {\n        return new StaticPage();\n    }\n\n    /**\n     * Create an instance of {@link Pagination }\n     */\n    public Pagination createPagination() {\n        return new Pagination();\n    }\n\n    /**\n     * Create an instance of {@link Pages }\n     */\n    public Pages createPages() {\n        return new Pages();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactoryTest2.java",
		"test_prompt": "// ObjectFactoryTest2.java\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a>\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ObjectFactory}.\n* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.\n*/\nclass ObjectFactoryTest2 {"
	},
	{
		"original_code": "// ObjectFactory.java\n//\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a>\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\n\n/**\n * This object contains factory methods for each\n * Java content interface and Java element interface\n * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.\n * <p>An ObjectFactory allows you to programatically\n * construct new instances of the Java representation\n * for XML content. The Java representation of XML\n * content can consist of schema derived interfaces\n * and classes representing the binding of schema\n * type definitions, element declarations and model\n * groups.  Factory methods for each of these are\n * provided in this class.\n */\n@XmlRegistry\npublic class ObjectFactory {\n\n    /**\n     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype\n     */\n    public ObjectFactory() {\n    }\n\n    /**\n     * Create an instance of {@link Page }\n     */\n    public Page createPage() {\n        return new Page();\n    }\n\n    /**\n     * Create an instance of {@link StaticPage }\n     */\n    public StaticPage createStaticPage() {\n        return new StaticPage();\n    }\n\n    /**\n     * Create an instance of {@link Pagination }\n     */\n    public Pagination createPagination() {\n        return new Pagination();\n    }\n\n    /**\n     * Create an instance of {@link Pages }\n     */\n    public Pages createPages() {\n        return new Pages();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactoryTest3.java",
		"test_prompt": "// ObjectFactoryTest3.java\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a>\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ObjectFactory}.\n* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.\n*/\nclass ObjectFactoryTest3 {"
	}
]