[
	{
		"original_code": "// MDate.java\npackage com.imsmart.misc;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n\r\npublic class MDate {\r\n\r\n    public static final String DATE_WITH_TIME = \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n    public static final String DATE_ONLY = \"yyyy_MM_dd\";\r\n\r\n    public static final String TIME_ONLY = \"HH:mm:ss\";\r\n\r\n    public static final String YYYYMMDD = \"yyyyMMDD\";\r\n\r\n    public static final String MM_DD_YYYY = \"MM/DD/yyyy\";\r\n\r\n    public static String now(String dateTimeFormat) {\r\n        Calendar cal = Calendar.getInstance();\r\n        SimpleDateFormat sdf = new SimpleDateFormat(dateTimeFormat);\r\n        return sdf.format(cal.getTime());\r\n    }\r\n\r\n    public static String getFormattedDate(Date date, String dateTimeFormat) {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(dateTimeFormat);\r\n        return sdf.format(date);\r\n    }\r\n\r\n    public static Date parseDate(String strDate, String format) throws Exception {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(format);\r\n        Date date = sdf.parse(strDate);\r\n        return date;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/misc/MDateTest0.java",
		"test_prompt": "// MDateTest0.java\npackage com.imsmart.misc;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MDate}.\n* It contains ten unit test cases for the {@link MDate#now(String)} method.\n*/\nclass MDateTest0 {"
	},
	{
		"original_code": "// MDate.java\npackage com.imsmart.misc;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n\r\npublic class MDate {\r\n\r\n    public static final String DATE_WITH_TIME = \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n    public static final String DATE_ONLY = \"yyyy_MM_dd\";\r\n\r\n    public static final String TIME_ONLY = \"HH:mm:ss\";\r\n\r\n    public static final String YYYYMMDD = \"yyyyMMDD\";\r\n\r\n    public static final String MM_DD_YYYY = \"MM/DD/yyyy\";\r\n\r\n    public static String now(String dateTimeFormat) {\r\n        Calendar cal = Calendar.getInstance();\r\n        SimpleDateFormat sdf = new SimpleDateFormat(dateTimeFormat);\r\n        return sdf.format(cal.getTime());\r\n    }\r\n\r\n    public static String getFormattedDate(Date date, String dateTimeFormat) {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(dateTimeFormat);\r\n        return sdf.format(date);\r\n    }\r\n\r\n    public static Date parseDate(String strDate, String format) throws Exception {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(format);\r\n        Date date = sdf.parse(strDate);\r\n        return date;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/misc/MDateTest1.java",
		"test_prompt": "// MDateTest1.java\npackage com.imsmart.misc;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MDate}.\n* It contains ten unit test cases for the {@link MDate#getFormattedDate(Date, String)} method.\n*/\nclass MDateTest1 {"
	},
	{
		"original_code": "// MDate.java\npackage com.imsmart.misc;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n\r\npublic class MDate {\r\n\r\n    public static final String DATE_WITH_TIME = \"yyyy-MM-dd HH:mm:ss\";\r\n\r\n    public static final String DATE_ONLY = \"yyyy_MM_dd\";\r\n\r\n    public static final String TIME_ONLY = \"HH:mm:ss\";\r\n\r\n    public static final String YYYYMMDD = \"yyyyMMDD\";\r\n\r\n    public static final String MM_DD_YYYY = \"MM/DD/yyyy\";\r\n\r\n    public static String now(String dateTimeFormat) {\r\n        Calendar cal = Calendar.getInstance();\r\n        SimpleDateFormat sdf = new SimpleDateFormat(dateTimeFormat);\r\n        return sdf.format(cal.getTime());\r\n    }\r\n\r\n    public static String getFormattedDate(Date date, String dateTimeFormat) {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(dateTimeFormat);\r\n        return sdf.format(date);\r\n    }\r\n\r\n    public static Date parseDate(String strDate, String format) throws Exception {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(format);\r\n        Date date = sdf.parse(strDate);\r\n        return date;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/misc/MDateTest2.java",
		"test_prompt": "// MDateTest2.java\npackage com.imsmart.misc;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MDate}.\n* It contains ten unit test cases for the {@link MDate#parseDate(String, String)} method.\n*/\nclass MDateTest2 {"
	},
	{
		"original_code": "// MLog.java\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage com.imsmart.misc;\n\nimport java.io.IOException;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\n\n/**\n * @author gowerdh\n */\npublic class MLog {\n\n    private static Logger logger = Logger.getLogger(\"com.smart\");\n\n    private static MLog mLog = null;\n\n    private MLog() {\n        try {\n            MProperties properties = MProperties.getInstance();\n            String strLogDir = properties.getPropertyValue(MProperties.LOG_DIR);\n            String logFileName = \"migration_\" + MDate.now(MDate.DATE_ONLY) + \".log\";\n            FileHandler handler = new FileHandler(strLogDir + \"/\" + logFileName, true);\n            handler.setFormatter(new SimpleFormatter());\n            // Add to the desired logger\n            logger = Logger.getLogger(\"com.smart\");\n            logger.addHandler(handler);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static MLog getInstance() {\n        if (mLog == null) {\n            mLog = new MLog();\n        }\n        return mLog;\n    }\n\n    public void info(String info) {\n        logger.log(Level.INFO, info);\n    }\n\n    public void warning(String warning) {\n        logger.log(Level.WARNING, warning);\n    }\n\n    public void error(String exception) {\n        logger.log(Level.SEVERE, exception);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/misc/MLogTest.java",
		"test_prompt": "// MLogTest.java\npackage com.imsmart.misc;\n\nimport java.io.IOException;\nimport java.util.logging.FileHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.logging.SimpleFormatter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MLog}.\n* It contains ten unit test cases for the {@link MLog#getInstance()} method.\n*/\nclass MLogTest {"
	},
	{
		"original_code": "// MProperties.java\npackage com.imsmart.misc;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.util.Properties;\r\n\r\npublic class MProperties {\r\n\r\n    private static final String INPUT_DETAILS_PROPERTIES = \"properties/migrater.properties\";\r\n\r\n    public static final String DOC_CLASS = \"doc_class\";\r\n\r\n    public static final String MAIL_FROM_ADDRESS = \"mail_from_address\";\r\n\r\n    public static final String MAIL_TO_ADDRESS = \"mail_to_address\";\r\n\r\n    public static final String MAIL_SUBJECT = \"mail_subject\";\r\n\r\n    public static final String MAIL_BODY = \"mail_body\";\r\n\r\n    public static final String SMTP_HOST = \"smtp_host\";\r\n\r\n    public static final String THREAD_COUNT = \"thread_count\";\r\n\r\n    public static final String LOG_DIR = \"log_dir\";\r\n\r\n    public static final String REPORT_DIR = \"report_dir\";\r\n\r\n    public static final String IMAGE_DIR = \"image_dir\";\r\n\r\n    public static final String PLUG_IN_CLASS_DIR = \"plug_in_class_dir\";\r\n\r\n    public static final String CMS_CLASS = \"cms_class\";\r\n\r\n    public static final String METADATA_FILE_TYPE = \"metadata_file_type\";\r\n\r\n    public static final String METADATA_SEPERATOR = \"metadata_seperator\";\r\n\r\n    public static final String METADATA_FILE = \"metadata_file\";\r\n\r\n    public static final String METADATA_LIST = \"metadata_list\";\r\n\r\n    public static final String CMS_USER_NAME = \"cms_user_name\";\r\n\r\n    public static final String CMS_USER_PASSWORD = \"cms_user_password\";\r\n\r\n    private static MProperties mProperties = null;\r\n\r\n    public static final String MERGED_DIR = \"merged_dir\";\r\n\r\n    public static final String OPERATION = \"operation\";\r\n\r\n    Properties prop = new Properties();\r\n\r\n    private MProperties() {\r\n        try {\r\n            prop.load(new FileInputStream(INPUT_DETAILS_PROPERTIES));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static MProperties getInstance() {\r\n        if (mProperties == null) {\r\n            mProperties = new MProperties();\r\n        }\r\n        return mProperties;\r\n    }\r\n\r\n    public String getPropertyValue(String property) {\r\n        String value = prop.getProperty(property);\r\n        return value;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/misc/MPropertiesTest.java",
		"test_prompt": "// MPropertiesTest.java\npackage com.imsmart.misc;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Properties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MProperties}.\n* It contains ten unit test cases for the {@link MProperties#getInstance()} method.\n*/\nclass MPropertiesTest {"
	},
	{
		"original_code": "// HTMLFilter.java\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one or more\r\n* contributor license agreements.  See the NOTICE file distributed with\r\n* this work for additional information regarding copyright ownership.\r\n* The ASF licenses this file to You under the Apache License, Version 2.0\r\n* (the \"License\"); you may not use this file except in compliance with\r\n* the License.  You may obtain a copy of the License at\r\n*\r\n*     http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\npackage com.imsmart.servlet;\r\n\r\n/**\r\n * HTML filter utility.\r\n *\r\n * @author Craig R. McClanahan\r\n * @author Tim Tye\r\n * @version $Revision: 467217 $ $Date: 2006-10-24 05:14:34 +0200 (mar., 24 oct. 2006) $\r\n */\r\npublic final class HTMLFilter {\r\n\r\n    /**\r\n     * Filter the specified message string for characters that are sensitive\r\n     * in HTML.  This avoids potential attacks caused by including JavaScript\r\n     * codes in the request URL that is often reported in error messages.\r\n     *\r\n     * @param message The message string to be filtered\r\n     */\r\n    public static String filter(String message) {\r\n        if (message == null)\r\n            return (null);\r\n        char[] content = new char[message.length()];\r\n        message.getChars(0, message.length(), content, 0);\r\n        StringBuffer result = new StringBuffer(content.length + 50);\r\n        for (int i = 0; i < content.length; i++) {\r\n            switch(content[i]) {\r\n                case '<':\r\n                    result.append(\"&lt;\");\r\n                    break;\r\n                case '>':\r\n                    result.append(\"&gt;\");\r\n                    break;\r\n                case '&':\r\n                    result.append(\"&amp;\");\r\n                    break;\r\n                case '\"':\r\n                    result.append(\"&quot;\");\r\n                    break;\r\n                default:\r\n                    result.append(content[i]);\r\n            }\r\n        }\r\n        return (result.toString());\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/servlet/HTMLFilterTest.java",
		"test_prompt": "// HTMLFilterTest.java\npackage com.imsmart.servlet;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HTMLFilter}.\n* It contains ten unit test cases for the {@link HTMLFilter#filter(String)} method.\n*/\nclass HTMLFilterTest {"
	},
	{
		"original_code": "// MParserFactory.java\npackage com.imsmart.parser;\r\n\r\nimport com.imsmart.misc.MLog;\r\nimport com.imsmart.misc.MProperties;\r\n\r\npublic class MParserFactory {\r\n\r\n    private MLog logger = MLog.getInstance();\r\n\r\n    public static MParser getParser() {\r\n        String fileType = MProperties.getInstance().getPropertyValue(MProperties.METADATA_FILE_TYPE);\r\n        if (fileType.equalsIgnoreCase(\"CSV\")) {\r\n            MCSVParser parser = new MCSVParser();\r\n            String seperator = MProperties.getInstance().getPropertyValue(MProperties.METADATA_SEPERATOR);\r\n            parser.setSeparator(seperator);\r\n            return parser;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/parser/MParserFactoryTest.java",
		"test_prompt": "// MParserFactoryTest.java\npackage com.imsmart.parser;\n\nimport com.imsmart.misc.MLog;\nimport com.imsmart.misc.MProperties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MParserFactory}.\n* It contains ten unit test cases for the {@link MParserFactory#getParser()} method.\n*/\nclass MParserFactoryTest {"
	},
	{
		"original_code": "// MCSVParser.java\npackage com.imsmart.parser;\r\n\r\nimport com.imsmart.misc.MLog;\r\nimport com.imsmart.misc.MProperties;\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class MCSVParser implements MParser {\r\n\r\n    private String dataSeparator;\r\n\r\n    private MLog logger = MLog.getInstance();\r\n\r\n    public MCSVParser() {\r\n        // if nothing is set then its the default Separator\r\n        dataSeparator = \",\";\r\n    }\r\n\r\n    public void setSeparator(String separator) {\r\n        //this.dataSeparator = separator;\r\n    }\r\n\r\n    public List parseAsList(String fileNameWithPath) {\r\n        List parsedList = new ArrayList();\r\n        BufferedReader reader = null;\r\n        File csvFile = new File(fileNameWithPath);\r\n        try {\r\n            String line = \"\";\r\n            reader = new BufferedReader(new FileReader(csvFile));\r\n            while ((line = reader.readLine()) != null) {\r\n                List row = new ArrayList();\r\n                StringTokenizer t = new StringTokenizer(line, \"|\");\r\n                while (t.hasMoreElements()) {\r\n                    String value = (String) t.nextElement();\r\n                    row.add(value);\r\n                }\r\n                parsedList.add(row);\r\n            }\r\n        } catch (Exception ex) {\r\n            logger.error(ex.getMessage());\r\n            ex.printStackTrace();\r\n        }\r\n        return parsedList;\r\n    }\r\n\r\n    public HashMap parseAsMap(String fileNameWithPath) {\r\n        MProperties properties = MProperties.getInstance();\r\n        HashMap parsedMap = new HashMap();\r\n        BufferedReader reader = null;\r\n        File csvFile = new File(fileNameWithPath);\r\n        try {\r\n            String line = \"\";\r\n            reader = new BufferedReader(new FileReader(csvFile));\r\n            while ((line = reader.readLine()) != null) {\r\n                List row = new ArrayList();\r\n                String spliter = properties.getPropertyValue(MProperties.METADATA_SEPERATOR);\r\n                StringTokenizer t = new StringTokenizer(line, spliter);\r\n                while (t.hasMoreElements()) {\r\n                    String value = (String) t.nextElement();\r\n                    row.add(value);\r\n                }\r\n                String primaryIndex = (String) row.get(0);\r\n                parsedMap.put(primaryIndex, row);\r\n            }\r\n        } catch (Exception ex) {\r\n            logger.error(ex.getMessage());\r\n            ex.printStackTrace();\r\n        }\r\n        return parsedMap;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/parser/MCSVParserTest0.java",
		"test_prompt": "// MCSVParserTest0.java\npackage com.imsmart.parser;\n\nimport com.imsmart.misc.MLog;\nimport com.imsmart.misc.MProperties;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MCSVParser}.\n* It contains ten unit test cases for the {@link MCSVParser#parseAsList(String)} method.\n*/\nclass MCSVParserTest0 {"
	},
	{
		"original_code": "// MCSVParser.java\npackage com.imsmart.parser;\r\n\r\nimport com.imsmart.misc.MLog;\r\nimport com.imsmart.misc.MProperties;\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class MCSVParser implements MParser {\r\n\r\n    private String dataSeparator;\r\n\r\n    private MLog logger = MLog.getInstance();\r\n\r\n    public MCSVParser() {\r\n        // if nothing is set then its the default Separator\r\n        dataSeparator = \",\";\r\n    }\r\n\r\n    public void setSeparator(String separator) {\r\n        //this.dataSeparator = separator;\r\n    }\r\n\r\n    public List parseAsList(String fileNameWithPath) {\r\n        List parsedList = new ArrayList();\r\n        BufferedReader reader = null;\r\n        File csvFile = new File(fileNameWithPath);\r\n        try {\r\n            String line = \"\";\r\n            reader = new BufferedReader(new FileReader(csvFile));\r\n            while ((line = reader.readLine()) != null) {\r\n                List row = new ArrayList();\r\n                StringTokenizer t = new StringTokenizer(line, \"|\");\r\n                while (t.hasMoreElements()) {\r\n                    String value = (String) t.nextElement();\r\n                    row.add(value);\r\n                }\r\n                parsedList.add(row);\r\n            }\r\n        } catch (Exception ex) {\r\n            logger.error(ex.getMessage());\r\n            ex.printStackTrace();\r\n        }\r\n        return parsedList;\r\n    }\r\n\r\n    public HashMap parseAsMap(String fileNameWithPath) {\r\n        MProperties properties = MProperties.getInstance();\r\n        HashMap parsedMap = new HashMap();\r\n        BufferedReader reader = null;\r\n        File csvFile = new File(fileNameWithPath);\r\n        try {\r\n            String line = \"\";\r\n            reader = new BufferedReader(new FileReader(csvFile));\r\n            while ((line = reader.readLine()) != null) {\r\n                List row = new ArrayList();\r\n                String spliter = properties.getPropertyValue(MProperties.METADATA_SEPERATOR);\r\n                StringTokenizer t = new StringTokenizer(line, spliter);\r\n                while (t.hasMoreElements()) {\r\n                    String value = (String) t.nextElement();\r\n                    row.add(value);\r\n                }\r\n                String primaryIndex = (String) row.get(0);\r\n                parsedMap.put(primaryIndex, row);\r\n            }\r\n        } catch (Exception ex) {\r\n            logger.error(ex.getMessage());\r\n            ex.printStackTrace();\r\n        }\r\n        return parsedMap;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/parser/MCSVParserTest1.java",
		"test_prompt": "// MCSVParserTest1.java\npackage com.imsmart.parser;\n\nimport com.imsmart.misc.MLog;\nimport com.imsmart.misc.MProperties;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MCSVParser}.\n* It contains ten unit test cases for the {@link MCSVParser#parseAsMap(String)} method.\n*/\nclass MCSVParserTest1 {"
	},
	{
		"original_code": "// MContentManagerFileNet.java\npackage com.imsmart.cms;\r\n\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport com.momed.cms.filenet.session.CEConnectionManager;\r\nimport com.momed.cms.filenet.session.CESession;\r\nimport com.momed.cms.filenet.util.CEImport;\r\nimport com.momed.cms.filenet.util.CEProperties;\r\nimport com.imsmart.misc.MDate;\r\nimport com.imsmart.misc.MLog;\r\nimport com.imsmart.misc.MProperties;\r\nimport java.util.Date;\r\nimport java.util.Map;\r\n\r\npublic class MContentManagerFileNet implements MContentManager {\r\n\r\n    private CESession session;\r\n\r\n    private CEConnectionManager manager;\r\n\r\n    private Map metadataMap;\r\n\r\n    private MLog logger = MLog.getInstance();\r\n\r\n    CEProperties properties = CEProperties.getInstance();\r\n\r\n    @Override\r\n    public void setMetadataMap(Map metadataMap) {\r\n        this.metadataMap = metadataMap;\r\n    }\r\n\r\n    @Override\r\n    public boolean checkInContent(File content) throws Exception {\r\n        CEImport ceImport = new CEImport(manager);\r\n        String docNameWithExtension = content.getAbsoluteFile().getName();\r\n        if (!docNameWithExtension.equalsIgnoreCase(\"Thumbs.db\")) {\r\n            int dotIndex = docNameWithExtension.indexOf(\".\");\r\n            String docFirstName = docNameWithExtension.substring(0, dotIndex);\r\n            //String docClassRegionCode = docFirstName.substring(0, 2);\r\n            //String docClass = properties.getPropertyValue(docClassRegionCode);\r\n            //logger.info(\"Document Name: \"+docFirstName+\" docClassRegionCode: \"+docClassRegionCode+\" Doc Class: \"+docClass);\r\n            List metadataValueList = (List) metadataMap.get(docFirstName);\r\n            List metadataList = (List) metadataMap.get(MProperties.METADATA_LIST);\r\n            //Getting doc class\r\n            String plexusDocClass = (String) metadataValueList.get(1);\r\n            String docClass = getDocClass(plexusDocClass);\r\n            String checkInFolder = properties.getPropertyValue(docClass);\r\n            HashMap map = new HashMap();\r\n            map.put(\"DocumentTitle\", docFirstName);\r\n            map.put(\"Primary_Index\", docFirstName);\r\n            //map.put((String)metadataList.get(0), docNameWithExtension);\r\n            for (int i = 0; i < metadataValueList.size(); i++) {\r\n                //Created_On|DATE|MM/DD/yyyy\r\n                String metadataWithType = (String) metadataList.get(i);\r\n                //DATE|MM/DD/yyyy\r\n                String dataType = metadataWithType.substring(metadataWithType.indexOf(\"|\") + 1, metadataWithType.length());\r\n                //Checks whether format is specified for this datatype. useful specially for Date\r\n                String format = \"\";\r\n                if (dataType.indexOf(\"|\") != -1) {\r\n                    //MM/DD/yyyy\r\n                    format = dataType.substring(dataType.indexOf(\"|\") + 1, dataType.length());\r\n                    //DATE\r\n                    dataType = dataType.substring(0, dataType.indexOf(\"|\"));\r\n                }\r\n                String metadataName = metadataWithType.substring(0, metadataWithType.indexOf(\"|\"));\r\n                String value = (String) metadataValueList.get(i);\r\n                if (value != null || !value.equals(\"\")) {\r\n                    if (\"STRING\".equalsIgnoreCase(dataType)) {\r\n                        map.put(metadataName, value);\r\n                    } else if (\"DATE\".equalsIgnoreCase(dataType)) {\r\n                        //if (value.indexOf(\"/\") != -1) {\r\n                        Date dateValue = MDate.parseDate(value, format);\r\n                        map.put(metadataName, dateValue);\r\n                        //} else {\r\n                        //    Date dateValue = MDate.parseDate(value, MDate.YYYYMMDD);\r\n                        //    map.put(metadataName, dateValue);\r\n                        //}\r\n                    } else if (\"BOOLEAN\".equalsIgnoreCase(dataType)) {\r\n                        if (metadataName.equalsIgnoreCase(\"Red_Filter\")) {\r\n                            if (value.indexOf(\"NOVL\") != -1) {\r\n                                map.put(metadataName, new Boolean(false));\r\n                            } else {\r\n                                map.put(metadataName, new Boolean(true));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            ceImport.uploadDocument(content, docNameWithExtension, docClass, checkInFolder, map, properties.getPropertyValue(CEProperties.MIME_TYPE));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private String getDocClass(String plexusDocClass) {\r\n        String subName;\r\n        int i = plexusDocClass.indexOf(\"NOVL\");\r\n        if (i != -1) {\r\n            subName = plexusDocClass.substring(2, i);\r\n        } else {\r\n            subName = plexusDocClass.substring(2);\r\n        }\r\n        String docClassName = properties.getPropertyValue(subName);\r\n        return docClassName;\r\n    }\r\n\r\n    @Override\r\n    public void connect(String userName, String password) {\r\n        manager = CEConnectionManager.getConnectionManager(userName, password);\r\n        session = new CESession(manager);\r\n    }\r\n\r\n    @Override\r\n    public boolean createFolder(String parentFolder, String folder) {\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/cms/MContentManagerFileNetTest0.java",
		"test_prompt": "// MContentManagerFileNetTest0.java\npackage com.imsmart.cms;\n\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.List;\nimport com.momed.cms.filenet.session.CEConnectionManager;\nimport com.momed.cms.filenet.session.CESession;\nimport com.momed.cms.filenet.util.CEImport;\nimport com.momed.cms.filenet.util.CEProperties;\nimport com.imsmart.misc.MDate;\nimport com.imsmart.misc.MLog;\nimport com.imsmart.misc.MProperties;\nimport java.util.Date;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MContentManagerFileNet}.\n* It contains ten unit test cases for the {@link MContentManagerFileNet#checkInContent(File)} method.\n*/\nclass MContentManagerFileNetTest0 {"
	},
	{
		"original_code": "// MContentManagerFileNet.java\npackage com.imsmart.cms;\r\n\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport com.momed.cms.filenet.session.CEConnectionManager;\r\nimport com.momed.cms.filenet.session.CESession;\r\nimport com.momed.cms.filenet.util.CEImport;\r\nimport com.momed.cms.filenet.util.CEProperties;\r\nimport com.imsmart.misc.MDate;\r\nimport com.imsmart.misc.MLog;\r\nimport com.imsmart.misc.MProperties;\r\nimport java.util.Date;\r\nimport java.util.Map;\r\n\r\npublic class MContentManagerFileNet implements MContentManager {\r\n\r\n    private CESession session;\r\n\r\n    private CEConnectionManager manager;\r\n\r\n    private Map metadataMap;\r\n\r\n    private MLog logger = MLog.getInstance();\r\n\r\n    CEProperties properties = CEProperties.getInstance();\r\n\r\n    @Override\r\n    public void setMetadataMap(Map metadataMap) {\r\n        this.metadataMap = metadataMap;\r\n    }\r\n\r\n    @Override\r\n    public boolean checkInContent(File content) throws Exception {\r\n        CEImport ceImport = new CEImport(manager);\r\n        String docNameWithExtension = content.getAbsoluteFile().getName();\r\n        if (!docNameWithExtension.equalsIgnoreCase(\"Thumbs.db\")) {\r\n            int dotIndex = docNameWithExtension.indexOf(\".\");\r\n            String docFirstName = docNameWithExtension.substring(0, dotIndex);\r\n            //String docClassRegionCode = docFirstName.substring(0, 2);\r\n            //String docClass = properties.getPropertyValue(docClassRegionCode);\r\n            //logger.info(\"Document Name: \"+docFirstName+\" docClassRegionCode: \"+docClassRegionCode+\" Doc Class: \"+docClass);\r\n            List metadataValueList = (List) metadataMap.get(docFirstName);\r\n            List metadataList = (List) metadataMap.get(MProperties.METADATA_LIST);\r\n            //Getting doc class\r\n            String plexusDocClass = (String) metadataValueList.get(1);\r\n            String docClass = getDocClass(plexusDocClass);\r\n            String checkInFolder = properties.getPropertyValue(docClass);\r\n            HashMap map = new HashMap();\r\n            map.put(\"DocumentTitle\", docFirstName);\r\n            map.put(\"Primary_Index\", docFirstName);\r\n            //map.put((String)metadataList.get(0), docNameWithExtension);\r\n            for (int i = 0; i < metadataValueList.size(); i++) {\r\n                //Created_On|DATE|MM/DD/yyyy\r\n                String metadataWithType = (String) metadataList.get(i);\r\n                //DATE|MM/DD/yyyy\r\n                String dataType = metadataWithType.substring(metadataWithType.indexOf(\"|\") + 1, metadataWithType.length());\r\n                //Checks whether format is specified for this datatype. useful specially for Date\r\n                String format = \"\";\r\n                if (dataType.indexOf(\"|\") != -1) {\r\n                    //MM/DD/yyyy\r\n                    format = dataType.substring(dataType.indexOf(\"|\") + 1, dataType.length());\r\n                    //DATE\r\n                    dataType = dataType.substring(0, dataType.indexOf(\"|\"));\r\n                }\r\n                String metadataName = metadataWithType.substring(0, metadataWithType.indexOf(\"|\"));\r\n                String value = (String) metadataValueList.get(i);\r\n                if (value != null || !value.equals(\"\")) {\r\n                    if (\"STRING\".equalsIgnoreCase(dataType)) {\r\n                        map.put(metadataName, value);\r\n                    } else if (\"DATE\".equalsIgnoreCase(dataType)) {\r\n                        //if (value.indexOf(\"/\") != -1) {\r\n                        Date dateValue = MDate.parseDate(value, format);\r\n                        map.put(metadataName, dateValue);\r\n                        //} else {\r\n                        //    Date dateValue = MDate.parseDate(value, MDate.YYYYMMDD);\r\n                        //    map.put(metadataName, dateValue);\r\n                        //}\r\n                    } else if (\"BOOLEAN\".equalsIgnoreCase(dataType)) {\r\n                        if (metadataName.equalsIgnoreCase(\"Red_Filter\")) {\r\n                            if (value.indexOf(\"NOVL\") != -1) {\r\n                                map.put(metadataName, new Boolean(false));\r\n                            } else {\r\n                                map.put(metadataName, new Boolean(true));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            ceImport.uploadDocument(content, docNameWithExtension, docClass, checkInFolder, map, properties.getPropertyValue(CEProperties.MIME_TYPE));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private String getDocClass(String plexusDocClass) {\r\n        String subName;\r\n        int i = plexusDocClass.indexOf(\"NOVL\");\r\n        if (i != -1) {\r\n            subName = plexusDocClass.substring(2, i);\r\n        } else {\r\n            subName = plexusDocClass.substring(2);\r\n        }\r\n        String docClassName = properties.getPropertyValue(subName);\r\n        return docClassName;\r\n    }\r\n\r\n    @Override\r\n    public void connect(String userName, String password) {\r\n        manager = CEConnectionManager.getConnectionManager(userName, password);\r\n        session = new CESession(manager);\r\n    }\r\n\r\n    @Override\r\n    public boolean createFolder(String parentFolder, String folder) {\r\n        return false;\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/cms/MContentManagerFileNetTest1.java",
		"test_prompt": "// MContentManagerFileNetTest1.java\npackage com.imsmart.cms;\n\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.List;\nimport com.momed.cms.filenet.session.CEConnectionManager;\nimport com.momed.cms.filenet.session.CESession;\nimport com.momed.cms.filenet.util.CEImport;\nimport com.momed.cms.filenet.util.CEProperties;\nimport com.imsmart.misc.MDate;\nimport com.imsmart.misc.MLog;\nimport com.imsmart.misc.MProperties;\nimport java.util.Date;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MContentManagerFileNet}.\n* It contains ten unit test cases for the {@link MContentManagerFileNet#createFolder(String, String)} method.\n*/\nclass MContentManagerFileNetTest1 {"
	},
	{
		"original_code": "// MReportCSV.java\npackage com.imsmart.report;\r\n\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport com.imsmart.misc.MDate;\r\nimport com.imsmart.misc.MProperties;\r\n\r\npublic class MReportCSV implements MReport {\r\n\r\n    private String reportFilePath;\r\n\r\n    private MProperties properties;\r\n\r\n    public MReportCSV() {\r\n        properties = MProperties.getInstance();\r\n        reportFilePath = properties.getPropertyValue(MProperties.REPORT_DIR);\r\n        // TODO Auto-generated constructor stub\r\n    }\r\n\r\n    @Override\r\n    public void addLine(List columns) {\r\n        String reportFileName = MDate.now(MDate.DATE_ONLY) + \".csv\";\r\n        try {\r\n            PrintWriter out = openReportFile(reportFileName);\r\n            StringBuffer line = new StringBuffer();\r\n            for (Iterator iterator = columns.iterator(); iterator.hasNext(); ) {\r\n                Object column = (Object) iterator.next();\r\n                line.append(column.toString());\r\n                if (iterator.hasNext()) {\r\n                    line.append(\",\");\r\n                }\r\n            }\r\n            out.println(line.toString());\r\n            closeReportFile(out);\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public PrintWriter openReportFile(String fileName) throws Exception {\r\n        FileWriter output = new FileWriter(reportFilePath + \"/\" + fileName, true);\r\n        PrintWriter out = new PrintWriter(output, true);\r\n        return out;\r\n    }\r\n\r\n    public void closeReportFile(PrintWriter out) throws Exception {\r\n        out.close();\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/report/MReportCSVTest.java",
		"test_prompt": "// MReportCSVTest.java\npackage com.imsmart.report;\n\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.Iterator;\nimport java.util.List;\nimport com.imsmart.misc.MDate;\nimport com.imsmart.misc.MProperties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MReportCSV}.\n* It contains ten unit test cases for the {@link MReportCSV#openReportFile(String)} method.\n*/\nclass MReportCSVTest {"
	},
	{
		"original_code": "// MReportHTML.java\npackage com.imsmart.report;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileWriter;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.Date;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport com.imsmart.misc.MDate;\r\nimport com.imsmart.misc.MProperties;\r\n\r\npublic class MReportHTML implements MReport {\r\n\r\n    MProperties properties;\r\n\r\n    String reportFilePath;\r\n\r\n    public MReportHTML() {\r\n        properties = MProperties.getInstance();\r\n        reportFilePath = properties.getPropertyValue(MProperties.REPORT_DIR);\r\n        // TODO Auto-generated constructor stub\r\n    }\r\n\r\n    @Override\r\n    public void addLine(List columns) throws Exception {\r\n        // TODO Auto-generated method stub\r\n    }\r\n\r\n    @Override\r\n    public PrintWriter openReportFile(String fileName) throws Exception {\r\n        // TODO Auto-generated method stub\r\n        return null;\r\n    }\r\n\r\n    public void generateHTML_old(String csvFileNameWithPath) {\r\n        String htmlFileName = MDate.now(MDate.DATE_ONLY) + \".html\";\r\n        StringBuffer html = new StringBuffer();\r\n        html.append(\"<html><body>\");\r\n        html.append(\"<center>\");\r\n        html.append(\"<table border=\\\"1\\\" width=\\\"75%\\\" CELLSPACING=0>\");\r\n        try {\r\n            FileInputStream fis = new FileInputStream(reportFilePath + \"/\" + csvFileNameWithPath);\r\n            InputStreamReader isr = new InputStreamReader(fis);\r\n            BufferedReader br = new BufferedReader(isr);\r\n            String line = \"\";\r\n            FileWriter output = new FileWriter(reportFilePath + \"/\" + htmlFileName);\r\n            PrintWriter out = new PrintWriter(output, true);\r\n            while ((line = br.readLine()) != null) {\r\n                String[] cols = line.split(\",\");\r\n                html.append(\"<tr>\");\r\n                for (int i = 0; i < cols.length; i++) {\r\n                    html.append(\"<td>\");\r\n                    html.append(cols[i]);\r\n                    html.append(\"</td>\");\r\n                }\r\n                html.append(\"</tr>\");\r\n            }\r\n            html.append(\"</center></table></body></html>\");\r\n            out.println(html);\r\n            out.close();\r\n            br.close();\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/report/MReportHTMLTest.java",
		"test_prompt": "// MReportHTMLTest.java\npackage com.imsmart.report;\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\nimport com.imsmart.misc.MDate;\nimport com.imsmart.misc.MProperties;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MReportHTML}.\n* It contains ten unit test cases for the {@link MReportHTML#openReportFile(String)} method.\n*/\nclass MReportHTMLTest {"
	},
	{
		"original_code": "// MSession.java\npackage com.imsmart.main;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class MSession {\r\n\r\n    public static final String USER_NAME = \"user\";\r\n\r\n    public static final String USER_PASSWORD = \"password\";\r\n\r\n    private static MSession mSession = null;\r\n\r\n    private Map sessionMap = null;\r\n\r\n    private MSession() {\r\n        sessionMap = new HashMap();\r\n    }\r\n\r\n    public static MSession getInstance() {\r\n        if (mSession == null) {\r\n            mSession = new MSession();\r\n        }\r\n        return mSession;\r\n    }\r\n\r\n    public void setAttribute(String attribute, Object obj) {\r\n        sessionMap.put(attribute, obj);\r\n    }\r\n\r\n    public Object getAttribute(String attribute) {\r\n        return sessionMap.get(attribute);\r\n    }\r\n}\r\n",
		"id": "EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/main/MSessionTest.java",
		"test_prompt": "// MSessionTest.java\npackage com.imsmart.main;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MSession}.\n* It contains ten unit test cases for the {@link MSession#getInstance()} method.\n*/\nclass MSessionTest {"
	}
]