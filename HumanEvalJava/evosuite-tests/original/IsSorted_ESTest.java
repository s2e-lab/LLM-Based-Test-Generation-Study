/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 26 20:07:49 GMT 2023
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.IsSorted;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IsSorted_ESTest extends IsSorted_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-346));
      linkedList0.add((Object) integer0);
      Integer integer1 = new Integer(2943);
      linkedList0.add((Object) integer1);
      Boolean boolean0 = IsSorted.isSorted(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(408);
      linkedList0.add((Object) integer0);
      linkedList0.add((Object) null);
      // Undeclared exception!
      try { 
        IsSorted.isSorted(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.IsSorted", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(255);
      linkedList0.add((Object) integer0);
      Boolean boolean0 = IsSorted.isSorted(linkedList0);
      linkedList0.add((Object) boolean0);
      // Undeclared exception!
      try { 
        IsSorted.isSorted(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.Integer
         //
         verifyException("original.IsSorted", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(280);
      linkedList0.add((Object) integer0);
      Integer integer1 = new Integer((-3401));
      linkedList0.add((Object) integer1);
      Boolean boolean0 = IsSorted.isSorted(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1127));
      linkedList0.addFirst(integer0);
      linkedList0.offerFirst(integer0);
      linkedList0.add((Object) integer0);
      linkedList0.add((Object) integer0);
      Boolean boolean0 = IsSorted.isSorted(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(408);
      linkedList0.add((Object) integer0);
      linkedList0.add((Object) integer0);
      Boolean boolean0 = IsSorted.isSorted(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IsSorted isSorted0 = new IsSorted();
  }
}
