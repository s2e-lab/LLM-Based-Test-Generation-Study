/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 26 22:43:10 GMT 2023
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Intersection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Intersection_ESTest extends Intersection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2);
      linkedList0.push(integer0);
      Integer integer1 = new Integer(0);
      linkedList0.push(integer1);
      String string0 = Intersection.intersection(linkedList0, linkedList0);
      assertEquals("YES", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2033095894));
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-1902720461));
      linkedList0.add(integer1);
      // Undeclared exception!
      Intersection.intersection(linkedList0, linkedList0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intersection.intersection((List<Integer>) null, (List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Intersection", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        Intersection.intersection(linkedList0, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-17));
      linkedList0.add(integer0);
      Integer integer1 = new Integer(8);
      linkedList0.add(integer1);
      String string0 = Intersection.intersection(linkedList0, linkedList0);
      assertEquals("NO", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-2026570448));
      linkedList0.add(integer1);
      String string0 = Intersection.intersection(linkedList0, linkedList0);
      assertEquals("NO", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-17));
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      String string0 = Intersection.intersection(linkedList0, linkedList0);
      assertEquals("NO", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Intersection intersection0 = new Intersection();
  }
}
