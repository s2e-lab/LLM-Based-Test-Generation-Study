/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 26 21:45:42 GMT 2023
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Minpath;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Minpath_ESTest extends Minpath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      List<Integer> list0 = Minpath.minpath(linkedList0, 3505);
      linkedList0.offer(list0);
      linkedList0.add(list0);
      linkedList0.add(list0);
      List<Integer> list1 = Minpath.minpath(linkedList0, 2847);
      assertFalse(list1.contains(3505));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      Minpath.minpath(linkedList0, 5173);
      // Undeclared exception!
      Minpath.minpath(linkedList0, 5173);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      linkedList0.offer((List<Integer>) null);
      // Undeclared exception!
      try { 
        Minpath.minpath(linkedList0, 699);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.offer(linkedList1);
      // Undeclared exception!
      try { 
        Minpath.minpath(linkedList0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(3418);
      linkedList1.add(integer0);
      linkedList0.add((List<Integer>) linkedList1);
      List<Integer> list0 = Minpath.minpath(linkedList0, (-2559));
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      List<Integer> list0 = Minpath.minpath(linkedList0, 3505);
      linkedList0.offer(list0);
      // Undeclared exception!
      try { 
        Minpath.minpath(linkedList0, 3505);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Minpath minpath0 = new Minpath();
  }
}
