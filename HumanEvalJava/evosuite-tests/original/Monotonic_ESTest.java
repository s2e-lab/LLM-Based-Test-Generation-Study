/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 26 22:10:11 GMT 2023
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Monotonic;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Monotonic_ESTest extends Monotonic_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2021));
      Integer integer1 = new Integer(1);
      linkedList0.add(integer1);
      linkedList0.add(integer0);
      Integer integer2 = new Integer((-2023));
      linkedList0.add(integer2);
      Boolean boolean0 = Monotonic.monotonic(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2021));
      linkedList0.addFirst(integer0);
      Integer integer1 = new Integer(1);
      linkedList0.add(integer1);
      Integer integer2 = new Integer(2251);
      linkedList0.add(integer2);
      Boolean boolean0 = Monotonic.monotonic(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2021));
      Integer integer1 = new Integer(1);
      linkedList0.add(integer1);
      linkedList0.add(integer1);
      linkedList0.add(integer0);
      Boolean boolean0 = Monotonic.monotonic(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      List<Integer> list0 = linkedList0.subList(1, 1);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        Monotonic.monotonic(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Monotonic.monotonic((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Monotonic", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2021));
      Integer integer1 = new Integer(1);
      linkedList0.add(integer1);
      linkedList0.add(integer0);
      linkedList0.add(integer1);
      Boolean boolean0 = Monotonic.monotonic(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2021));
      linkedList0.addFirst(integer0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer(1);
      linkedList0.add(integer2);
      linkedList0.add(integer1);
      Boolean boolean0 = Monotonic.monotonic(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2021));
      Integer integer1 = new Integer(1);
      linkedList0.add(integer1);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      Boolean boolean0 = Monotonic.monotonic(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2021));
      linkedList0.addFirst(integer0);
      Integer integer1 = new Integer(1);
      linkedList0.add(integer1);
      linkedList0.add(integer0);
      Boolean boolean0 = Monotonic.monotonic(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-14));
      linkedList0.add(integer0);
      Boolean boolean0 = Monotonic.monotonic(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        Monotonic.monotonic(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Monotonic monotonic0 = new Monotonic();
  }
}
