/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 26 22:13:42 GMT 2023
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.MatchParens;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MatchParens_ESTest extends MatchParens_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("!}jpbXv['|$7-9S9");
      linkedList0.removeFirst();
      linkedList0.add("/)QT4UO,$Z;bu%{d3");
      linkedList0.add("!}jpbXv['|$7-9S9");
      String string0 = MatchParens.matchParens(linkedList0);
      assertEquals("No", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("!}jpbXv['|$7-9S9");
      linkedList0.add("/)QT4UO,$Z;bu%{d3");
      String string0 = MatchParens.matchParens(linkedList0);
      assertEquals("No", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        MatchParens.matchParens((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.MatchParens", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        MatchParens.matchParens(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("(fAC");
      linkedList0.add("");
      String string0 = MatchParens.matchParens(linkedList0);
      assertEquals("No", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("");
      linkedList0.add("");
      String string0 = MatchParens.matchParens(linkedList0);
      assertEquals("Yes", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("C");
      linkedList0.add("(");
      String string0 = MatchParens.matchParens(linkedList0);
      assertEquals("Yes", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offer("(");
      linkedList0.add("(");
      String string0 = MatchParens.matchParens(linkedList0);
      assertEquals("No", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MatchParens matchParens0 = new MatchParens();
  }
}
