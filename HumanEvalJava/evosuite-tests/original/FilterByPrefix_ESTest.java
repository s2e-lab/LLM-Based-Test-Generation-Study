/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 26 19:33:44 GMT 2023
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.FilterByPrefix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FilterByPrefix_ESTest extends FilterByPrefix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      Object object0 = new Object();
      linkedList0.add(object0);
      // Undeclared exception!
      try { 
        FilterByPrefix.filterByPrefix(list0, "yTVY-E");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilterByPrefix.filterByPrefix((List<Object>) null, ":<0nvyA9~\u0007wi+,ziW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.FilterByPrefix", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push("");
      List<Object> list0 = FilterByPrefix.filterByPrefix(linkedList0, "");
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.push("java.lang.Object@0000000001");
      List<Object> list0 = FilterByPrefix.filterByPrefix(linkedList0, "java.lang.Object@0000000001");
      assertFalse(list0.contains("java.lang.Object@0000000001"));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FilterByPrefix filterByPrefix0 = new FilterByPrefix();
  }
}
