/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 26 22:29:28 GMT 2023
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Pluck;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pluck_ESTest extends Pluck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1332));
      linkedList0.add((Object) integer0);
      List<Object> list0 = Pluck.pluck(linkedList0);
      List<Object> list1 = Pluck.pluck(list0);
      assertTrue(list1.contains((-1332)));
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(3761);
      linkedList0.add((Object) integer0);
      List<Object> list0 = Pluck.pluck(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      linkedList0.add(object0);
      List<Object> list0 = linkedList0.subList(2, 2);
      linkedList0.add(object0);
      // Undeclared exception!
      try { 
        Pluck.pluck(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Pluck.pluck((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Pluck", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1));
      linkedList0.add((Object) integer0);
      List<Object> list0 = Pluck.pluck(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      List<Object> list0 = Pluck.pluck(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(0);
      linkedList0.offerFirst(integer0);
      List<Object> list0 = Pluck.pluck(linkedList0);
      List<Object> list1 = Pluck.pluck(list0);
      assertTrue(list1.contains(0));
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Pluck pluck0 = new Pluck();
  }
}
