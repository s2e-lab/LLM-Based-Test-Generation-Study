/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 26 19:35:47 GMT 2023
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Encode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Encode_ESTest extends Encode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = Encode.encode("!J8?m%YtzfW*YE'.|");
      assertEquals("!j8?M%yTZFw*yg'.|", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = Encode.encode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Encode.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Encode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = Encode.encode("original.Encode");
      assertEquals("QRKGKNCL.gNCQDG", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = Encode.encode("`L$U1'+");
      assertEquals("`l$w1'+", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Encode.encode(">'go.\"+O-K#C6o6B");
      assertEquals(">'GQ.\"+q-k#c6Q6b", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = Encode.encode("Iy~|Pp`");
      assertEquals("kY~|pP`", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = Encode.encode("CZPEBL.]2JC");
      assertEquals("czpgbl.]2jc", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = Encode.encode("es\"oA#{");
      assertEquals("GS\"Qc#{", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = Encode.encode(" lTu&r~b");
      assertEquals(" LtW&R~B", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encode encode0 = new Encode();
  }
}
