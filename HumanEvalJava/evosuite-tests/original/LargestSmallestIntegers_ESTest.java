/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 26 20:53:35 GMT 2023
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.LargestSmallestIntegers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LargestSmallestIntegers_ESTest extends LargestSmallestIntegers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(2621);
      Integer integer1 = new Integer(6);
      linkedList0.offer(integer1);
      linkedList0.add((Object) integer0);
      List<Integer> list0 = LargestSmallestIntegers.largestSmallestIntegers(linkedList0);
      assertTrue(list0.contains(6));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-43));
      Integer integer1 = new Integer((-1));
      linkedList0.offer(integer1);
      linkedList0.add((Object) integer0);
      List<Integer> list0 = LargestSmallestIntegers.largestSmallestIntegers(linkedList0);
      assertTrue(list0.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      Integer integer0 = Integer.valueOf(0);
      linkedList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        LargestSmallestIntegers.largestSmallestIntegers(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        LargestSmallestIntegers.largestSmallestIntegers((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.LargestSmallestIntegers", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(0);
      linkedList0.add((Object) integer0);
      List<Integer> list0 = LargestSmallestIntegers.largestSmallestIntegers(linkedList0);
      assertFalse(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1));
      linkedList0.offer(integer0);
      linkedList0.add((Object) integer0);
      List<Integer> list0 = LargestSmallestIntegers.largestSmallestIntegers(linkedList0);
      assertTrue(list0.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      linkedList0.add((Object) integer0);
      List<Integer> list0 = LargestSmallestIntegers.largestSmallestIntegers(linkedList0);
      assertFalse(list0.contains(Integer.MAX_VALUE));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Integer> list0 = LargestSmallestIntegers.largestSmallestIntegers(linkedList0);
      linkedList0.add((Object) list0);
      // Undeclared exception!
      try { 
        LargestSmallestIntegers.largestSmallestIntegers(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to java.lang.Integer
         //
         verifyException("original.LargestSmallestIntegers", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LargestSmallestIntegers largestSmallestIntegers0 = new LargestSmallestIntegers();
  }
}
