/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 26 19:54:41 GMT 2023
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.NextSmallest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NextSmallest_ESTest extends NextSmallest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1141));
      linkedList0.add((Object) integer0);
      Integer integer1 = new Integer((-1141));
      linkedList0.add((Object) integer1);
      Integer integer2 = new Integer((-653));
      linkedList0.add((Object) integer2);
      Integer integer3 = NextSmallest.nextSmallest(linkedList0);
      assertEquals((-1141), (int)integer3);
      assertNotNull(integer3);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = Integer.valueOf(0);
      linkedList0.add((Object) integer0);
      List<Object> list0 = linkedList0.subList(0, 1);
      linkedList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        NextSmallest.nextSmallest(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      linkedList0.add((Object) null);
      // Undeclared exception!
      try { 
        NextSmallest.nextSmallest(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.NextSmallest", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(0);
      linkedList0.offer(linkedList0);
      linkedList0.push(integer0);
      // Undeclared exception!
      try { 
        NextSmallest.nextSmallest(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.lang.Integer
         //
         verifyException("original.NextSmallest", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(3603);
      linkedList0.add((Object) integer0);
      Integer integer1 = new Integer(3603);
      linkedList0.add((Object) integer1);
      Integer integer2 = NextSmallest.nextSmallest(linkedList0);
      assertEquals(3603, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(0);
      linkedList0.add((Object) integer0);
      Integer integer1 = new Integer((-1141));
      linkedList0.add((Object) integer1);
      linkedList0.add((Object) integer0);
      Integer integer2 = NextSmallest.nextSmallest(linkedList0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1));
      linkedList0.add((Object) integer0);
      Integer integer1 = Integer.valueOf((-2858));
      linkedList0.add((Object) integer1);
      linkedList0.add((Object) integer1);
      Integer integer2 = NextSmallest.nextSmallest(linkedList0);
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = NextSmallest.nextSmallest(linkedList0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NextSmallest nextSmallest0 = new NextSmallest();
  }
}
