ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6tTbUW73KQW298s8guLE3b4WrPUWD,/HumanEvalJava/src/main/java/original/id_0.java,58.05214333534241,length,"// HasCloseElements.java
package original;

import java.util.List;

class HasCloseElements {

    /**
     * Check if in given list of numbers, are any two numbers closer to each other than the given threshold.
     *
     * > hasCloseElements([1.0, 2.0, 3.0], 0.5)
     * false
     * > hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
     * true
     * > hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)
     * true
     * > hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)
     * false
     * > hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)
     * true
     * > hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)
     * false
     * > hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)
     * true
     * > hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)
     * true
     * > hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)
     * false
     */
    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {
        for (int i = 0; i < numbers.size(); i++) {
            for (int j = i + 1; j < numbers.size(); j++) {
                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {
                    return true;
                }
            }
        }
        return false;
    }
}
","// HasCloseElementsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HasCloseElements}.
* It contains ten unit test cases for the {@link HasCloseElements#hasCloseElements(List, Double)} method.
*/
class HasCloseElementsTest {","// HasCloseElementsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HasCloseElements}.
* It contains ten unit test cases for the {@link HasCloseElements#hasCloseElements(List, Double)} method.
*/
class HasCloseElementsTest {

	@Test
	void testHasCloseElements1() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0);
		Double threshold = 0.5;
		assertFalse(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements2() {
		List<Double> numbers = List.of(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);
		Double threshold = 0.3;
		assertTrue(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements3() {
		List<Double> numbers = List.of(1.0, 2.0, 3.9, 4.0, 5.0, 2.2);
		Double threshold = 0.3;
		assertTrue(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements4() {
		List<Double> numbers = List.of(1.0, 2.0, 3.9, 4.0, 5.0, 2.2);
		Double threshold = 0.05;
		assertFalse(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements5() {
		List<Double> numbers = List.of(1.0, 2.0, 5.9, 4.0, 5.0);
		Double threshold = 0.95;
		assertTrue(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements6() {
		List<Double> numbers = List.of(1.0, 2.0, 5.9, 4.0, 5.0);
		Double threshold = 0.8;
		assertFalse(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements7() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);
		Double threshold = 0.1;
		assertTrue(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements8() {
		List<Double> numbers = List.of(1.1, 2.2, 3.1, 4.1, 5.1);
		Double threshold = 1.0;
		assertTrue(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements9() {
		List<Double> numbers = List.of(1.1, 2.2, 3.1, 4.1, 5.1);
		Double threshold = 0.5;
		assertFalse(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements10() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);
		Double threshold = 0.1;
		assertTrue(HasCloseElements.hasCloseElements(numbers, threshold));
	}
}

// HasCloseElements.java
package refactored;

import java.util.List;

class HasCloseElements {

    /**
     * Check if in given list of numbers, are any two numbers closer to each other than the given threshold.
     *
     * > hasCloseElements([1.0, 2.0, 3.0], 0.5)
     * false
     * > hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
     * true
     * > hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)
     * true
     * > hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)
     * false
     * > hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)
     * true
     * > hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)
     * false
     * > hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)
     * true
     * > hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)
     * true
     * > hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)
     * false
     */
    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {
        for (int i = 0; i < numbers.size(); i++) {
            for (int j = i + 1; j < numbers.size(); j++) {
                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {
                    return true;
                }
            }
        }
        return false;
    }
}

// HasCloseElementsTest.java
package refactored;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HasCloseElements}.
* It contains ten unit test cases for the {@link HasCloseElements#hasCloseElements(List, Double)} method.
*/
class HasCloseElementsTest {
		
	@Test
	void testHasCloseElements1() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0);
		Double threshold = 0.5;
		assertFalse(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements2() {
		List<Double> numbers = List.of(1.0, 2.8, 3.0, 4.0, 5.0, 2.0);
		Double threshold = 0.3;
		assertTrue(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements3() {
		List<Double> numbers = List.of(1.0, 2.0, 3.9, 4.0, 5.0, 2.2);
		Double threshold = 0.3;
		assertTrue(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements4() {
		List<Double> numbers = List.of(1.0, 2.0, 3.9, 4.0, 5.0, 2.2);
		Double threshold = 0.05;
		assertFalse(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements5() {
		List<Double> numbers = List.of(1.0, 2.0, 5.9, 4.0, 5.0);
		Double threshold = 0.95;
		assertTrue(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseElements6() {
		List<Double> numbers = List.of(1.0, 2.0, 5.9, 4.0, 5.0);
		Double threshold = 0.8;
		assertFalse(HasCloseElements.hasCloseElements(numbers, threshold));
	}
	
	@Test
	void testHasCloseE"
cmpl-6tTcXEEizDZ3K5bLJCnByT9BLlhqY,/HumanEvalJava/src/main/java/original/id_1.java,50.009817600250244,stop,"// SeparateParenGroups.java
package original;

import java.util.ArrayList;
import java.util.List;

class SeparateParenGroups {

    /**
     * Input to this function is a string containing multiple groups of nested parentheses.
     * Your goal is to separate those group into separate strings and return the list of those.
     * Separate groups are balanced (each open brace is properly closed) and not nested within each other.
     * Ignore any spaces in the input string.
     *
     * > separateParenGroups(""(()()) ((())) () ((())()())"")
     * [""(()())"", ""((()))"", ""()"", ""((())()())""]
     * > separateParenGroups(""() (()) ((())) (((())))"")
     * [""()"", ""(())"", ""((()))"", ""(((())))""]
     * > separateParenGroups(""(()(())((())))"")
     * [""(()(())((())))""]
     * > separateParenGroups(""( ) (( )) (( )( ))"")
     * [""()"", ""(())"", ""(()())""]
     */
    public static List<String> separateParenGroups(String parenString) {
        List<String> result = new ArrayList<String>();
        int count = 0;
        StringBuilder curString = new StringBuilder();
        for (int i = 0; i < parenString.length(); i++) {
            if (parenString.charAt(i) == '(') {
                count++;
                curString.append('(');
            } else if (parenString.charAt(i) == ')') {
                count--;
                curString.append(')');
                if (count == 0) {
                    result.add(curString.toString());
                    curString = new StringBuilder();
                }
            }
        }
        return result;
    }
}
","// SeparateParenGroupsTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SeparateParenGroups}.
* It contains ten unit test cases for the {@link SeparateParenGroups#separateParenGroups(String)} method.
*/
class SeparateParenGroupsTest {","// SeparateParenGroupsTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SeparateParenGroups}.
* It contains ten unit test cases for the {@link SeparateParenGroups#separateParenGroups(String)} method.
*/
class SeparateParenGroupsTest {

	/**
	* Test case for {@link SeparateParenGroups#separateParenGroups(String)} method.
	* It tests the method with a string containing multiple groups of nested parentheses.
	* The method should return a list of those groups.
	*/
	@Test
	void testSeparateParenGroups() {
		List<String> expected = new ArrayList<String>();
		expected.add(""(()())"");
		expected.add(""((()))"");
		expected.add(""()"");
		expected.add(""((())()())"");
		List<String> actual = SeparateParenGroups.separateParenGroups(""(()()) ((())) () ((())()())"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SeparateParenGroups#separateParenGroups(String)} method.
	* It tests the method with a string containing multiple groups of nested parentheses.
	* The method should return a list of those groups.
	*/
	@Test
	void testSeparateParenGroups2() {
		List<String> expected = new ArrayList<String>();
		expected.add(""()"");
		expected.add(""(())"");
		expected.add(""((()))"");
		expected.add(""(((())))"");
		List<String> actual = SeparateParenGroups.separateParenGroups(""() (()) ((())) (((())))"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SeparateParenGroups#separateParenGroups(String)} method.
	* It tests the method with a string containing multiple groups of nested parentheses.
	* The method should return a list of those groups.
	*/
	@Test
	void testSeparateParenGroups3() {
		List<String> expected = new ArrayList<String>();
		expected.add(""(()(())((())))"");
		List<String> actual = SeparateParenGroups.separateParenGroups(""(()(())((())))"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SeparateParenGroups#separateParenGroups(String)} method.
	* It tests the method with a string containing multiple groups of nested parentheses.
	* The method should return a list of those groups.
	*/
	@Test
	void testSeparateParenGroups4() {
		List<String> expected = new ArrayList<String>();
		expected.add(""()"");
		expected.add(""(())"");
		expected.add(""(()())"");
		List<String> actual = SeparateParenGroups.separateParenGroups(""( ) (( )) (( )( ))"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SeparateParenGroups#separateParenGroups(String)} method.
	* It tests the method with a string containing multiple groups of nested parentheses.
	* The method should return a list of those groups.
	*/
	@Test
	void testSeparateParenGroups5() {
		List<String> expected = new ArrayList<String>();
		expected.add(""(()())"");
		expected.add(""((()))"");
		expected.add(""()"");
		expected.add(""((())()())"");
		List<String> actual = SeparateParenGroups.separateParenGroups(""(()()) ((())) () ((())()())"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SeparateParenGroups#separateParenGroups(String)} method.
	* It tests the method with a string containing multiple groups of nested parentheses.
	* The method should return a list of those groups.
	*/
	@Test
	void testSeparateParenGroups6() {
		List<String> expected = new ArrayList<String>();
		expected.add(""()"");
		expected.add(""(())"");
		expected.add(""((()))"");
		expected.add(""(((())))"");
		List<String> actual = SeparateParenGroups.separateParenGroups(""() (()) ((())) (((())))"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SeparateParenGroups#separateParenGroups(String)} method.
	* It tests the method with a string containing multiple groups of nested parentheses.
	* The method should return a list of those groups.
	*/
	@Test
	void testSeparateParenGroups7() {
		List<String> expected = new ArrayList<String>();
		expected.add(""(()(())((())))"");
		List<String> actual = SeparateParenGroups.separateParenGroups(""(()(())((())))"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SeparateParenGroups#separateParenGroups(String)} method.
	* It tests the method with a string containing multiple groups of nested parentheses.
	* The method should return a list of those groups.
	*/
	@Test
	void testSeparateParenGroups8() {
		List<String> expected = new ArrayList<String>();
		expected.add(""()"");
		expected.add(""(())"");
		expected.add(""(()())"");
		List<String> actual = SeparateParenGroups.separateParenGroups(""( ) (( )) (( )( ))"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SeparateParenGroups#separateParenGroups(String)} method.
	* It tests the method with a string containing multiple groups of nested parentheses.
	* The method should return a list of those groups.
	*/
	@Test
	void testSeparateParenGroups9() {
		List<String> expected = new ArrayList<String>();
		expected.add(""(()())"");
		expected.add(""((()))"");
		expected.add(""()"");
		expected.add(""((())()())"");
		List<String> actual = SeparateParenGroups.separateParenGroups(""(()()) ((())) () ((())()())"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SeparateParenGroups#separateParenGroups(String)} method.
	* It tests the method with a string containing multiple groups of nested parentheses.
	* The method should return a list of those groups.
	*/
	@Test
	void testSeparateParenGroups10() {
		List<String> expected = new ArrayList<String>();
		expected.add(""()"");
		expected.add(""(())"");
		expected.add(""((()))"");
		expected.add(""(((())))"");
		List<String> actual = SeparateParenGroups.separateParenGroups(""() (()) ((())) (((())))"");
		assertEquals(expected, actual);
	}
}"
cmpl-6tTda9QEuSlHUV6ddhXxYNDl0iFZU,/HumanEvalJava/src/main/java/original/id_10.java,6.316598415374756,stop,"// MakePalindrome.java
package original;

class MakePalindrome {

    /**
     * Find the shortest palindrome that begins with a supplied string.
     * Algorithm idea is simple:
     * - Find the longest postfix of supplied string that is a palindrome.
     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
     *
     * > makePalindrome("""")
     * """"
     * > makePalindrome(""cat"")
     * ""catac""
     * > makePalindrome(""cata"")
     * ""catac""
     * > makePalindrome("""")
     * """"
     * > makePalindrome(""x"")
     * ""x""
     * > makePalindrome(""xyz"")
     * ""xyzyx""
     * > makePalindrome(""xyx"")
     * ""xyx""
     * > makePalindrome(""jerry"")
     * ""jerryrrej""
     */
    public static String makePalindrome(String string) {
        if (string.length() == 0) {
            return """";
        }
        String reversed = new StringBuilder(string).reverse().toString();
        for (int i = 0; i < string.length(); i++) {
            if (string.substring(i).equals(reversed.substring(0, string.length() - i))) {
                return string + reversed.substring(string.length() - i);
            }
        }
        return null;
    }
}
","// MakePalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MakePalindrome}.
* It contains ten unit test cases for the {@link MakePalindrome#makePalindrome(String)} method.
*/
class MakePalindromeTest {","// MakePalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MakePalindrome}.
* It contains ten unit test cases for the {@link MakePalindrome#makePalindrome(String)} method.
*/
class MakePalindromeTest {

	@Test
	void testMakePalindrome() {
		assertEquals("""", MakePalindrome.makePalindrome(""""));
		assertEquals(""catac"", MakePalindrome.makePalindrome(""cat""));
		assertEquals(""catac"", MakePalindrome.makePalindrome(""cata""));
		assertEquals("""", MakePalindrome.makePalindrome(""""));
		assertEquals(""x"", MakePalindrome.makePalindrome(""x""));
		assertEquals(""xyzyx"", MakePalindrome.makePalindrome(""xyz""));
		assertEquals(""xyx"", MakePalindrome.makePalindrome(""xyx""));
		assertEquals(""jerryrrej"", MakePalindrome.makePalindrome(""jerry""));
	}
}"
cmpl-6tTedOn2kqtKoRJhHt7VVLJwbnpGp,/HumanEvalJava/src/main/java/original/id_100.java,57.06968069076538,stop,"// MakeAPile.java
package original;

import java.util.ArrayList;
import java.util.List;

class MakeAPile {

    /**
     * * Given a positive integer n, you have to make a pile of n levels of stones.
     * The first level has n stones.
     * The number of stones in the next level is:
     * - the next odd number if n is odd.
     * - the next even number if n is even.
     * Return the number of stones in each level in a list, where element at index
     * i represents the number of stones in the level (i+1).
     *
     * Examples:
     * >>> makeAPile(3)
     * [3, 5, 7]
     *
     * > makeAPile(3)
     * [3, 5, 7]
     * > makeAPile(4)
     * [4, 6, 8, 10]
     * > makeAPile(5)
     * [5, 7, 9, 11, 13]
     * > makeAPile(6)
     * [6, 8, 10, 12, 14, 16]
     * > makeAPile(8)
     * [8, 10, 12, 14, 16, 18, 20, 22]
     */
    public static List<Integer> makeAPile(int n) {
        List<Integer> result = new ArrayList<Integer>();
        int i = 1;
        while (i <= n) {
            if (i == 1) {
                result.add(n);
            } else {
                if (n % 2 == 0) {
                    result.add(result.get(i - 2) + 2);
                } else {
                    result.add(result.get(i - 2) + 2);
                }
            }
            i++;
        }
        return result;
    }
}
","// MakeAPileTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MakeAPile}.
* It contains ten unit test cases for the {@link MakeAPile#makeAPile(int)} method.
*/
class MakeAPileTest {","// MakeAPileTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MakeAPile}.
* It contains ten unit test cases for the {@link MakeAPile#makeAPile(int)} method.
*/
class MakeAPileTest {

	@Test
	void testMakeAPile() {
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(3);
		expected.add(5);
		expected.add(7);
		assertEquals(expected, MakeAPile.makeAPile(3));
		
		expected = new ArrayList<Integer>();
		expected.add(4);
		expected.add(6);
		expected.add(8);
		expected.add(10);
		assertEquals(expected, MakeAPile.makeAPile(4));
		
		expected = new ArrayList<Integer>();
		expected.add(5);
		expected.add(7);
		expected.add(9);
		expected.add(11);
		expected.add(13);
		assertEquals(expected, MakeAPile.makeAPile(5));
		
		expected = new ArrayList<Integer>();
		expected.add(6);
		expected.add(8);
		expected.add(10);
		expected.add(12);
		expected.add(14);
		expected.add(16);
		assertEquals(expected, MakeAPile.makeAPile(6));
		
		expected = new ArrayList<Integer>();
		expected.add(7);
		expected.add(9);
		expected.add(11);
		expected.add(13);
		expected.add(15);
		expected.add(17);
		expected.add(19);
		assertEquals(expected, MakeAPile.makeAPile(7));
		
		expected = new ArrayList<Integer>();
		expected.add(8);
		expected.add(10);
		expected.add(12);
		expected.add(14);
		expected.add(16);
		expected.add(18);
		expected.add(20);
		expected.add(22);
		assertEquals(expected, MakeAPile.makeAPile(8));
		
		expected = new ArrayList<Integer>();
		expected.add(9);
		expected.add(11);
		expected.add(13);
		expected.add(15);
		expected.add(17);
		expected.add(19);
		expected.add(21);
		expected.add(23);
		expected.add(25);
		assertEquals(expected, MakeAPile.makeAPile(9));
		
		expected = new ArrayList<Integer>();
		expected.add(10);
		expected.add(12);
		expected.add(14);
		expected.add(16);
		expected.add(18);
		expected.add(20);
		expected.add(22);
		expected.add(24);
		expected.add(26);
		expected.add(28);
		assertEquals(expected, MakeAPile.makeAPile(10));
		
		expected = new ArrayList<Integer>();
		expected.add(11);
		expected.add(13);
		expected.add(15);
		expected.add(17);
		expected.add(19);
		expected.add(21);
		expected.add(23);
		expected.add(25);
		expected.add(27);
		expected.add(29);
		expected.add(31);
		assertEquals(expected, MakeAPile.makeAPile(11));
		
		expected = new ArrayList<Integer>();
		expected.add(12);
		expected.add(14);
		expected.add(16);
		expected.add(18);
		expected.add(20);
		expected.add(22);
		expected.add(24);
		expected.add(26);
		expected.add(28);
		expected.add(30);
		expected.add(32);
		expected.add(34);
		assertEquals(expected, MakeAPile.makeAPile(12));
	}
}"
cmpl-6tTfg6eB0aOpGNGwPSRFokEp4uFCo,/HumanEvalJava/src/main/java/original/id_101.java,23.885757446289062,,"// WordsString.java
package original;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class WordsString {

    /**
     * * You will be given a string of words separated by commas or spaces. Your task is
     * to split the string into words and return an array of the words.
     *
     * For example:
     * wordsString(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
     * wordsString(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
     *
     * > wordsString(""Hi, my name is John"")
     * [""Hi"", ""my"", ""name"", ""is"", ""John""]
     * > wordsString(""One, two, three, four, five, six"")
     * [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
     * > wordsString(""Hi, my name"")
     * [""Hi"", ""my"", ""name""]
     * > wordsString(""One,, two, three, four, five, six,"")
     * [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
     * > wordsString("""")
     * []
     * > wordsString(""ahmed     , gamal"")
     * [""ahmed"", ""gamal""]
     */
    public static List<Object> wordsString(String s) {
        if (s.length() == 0)
            return new ArrayList<Object>();
        String[] words = s.split(""[, ]+"");
        return Arrays.asList(words);
    }
}
","// WordsStringTest.java
package original;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsString}.
* It contains ten unit test cases for the {@link WordsString#wordsString(String)} method.
*/
class WordsStringTest {","// WordsStringTest.java
package original;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsString}.
* It contains ten unit test cases for the {@link WordsString#wordsString(String)} method.
*/
class WordsStringTest {

	@Test
	void testWordsString() {
		List<Object> expected = new ArrayList<Object>(Arrays.asList(""Hi"", ""my"", ""name"", ""is"", ""John""));
		List<Object> actual = WordsString.wordsString(""Hi, my name is John"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testWordsString2() {
		List<Object> expected = new ArrayList<Object>(Arrays.asList(""One"", ""two"", ""three"", ""four"", ""five"", ""six""));
		List<Object> actual = WordsString.wordsString(""One, two, three, four, five, six"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testWordsString3() {
		List<Object> expected = new ArrayList<Object>(Arrays.asList(""Hi"", ""my"", ""name""));
		List<Object> actual = WordsString.wordsString(""Hi, my name"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testWordsString4() {
		List<Object> expected = new ArrayList<Object>(Arrays.asList(""One"", ""two"", ""three"", ""four"", ""five"", ""six""));
		List<Object> actual = WordsString.wordsString(""One,, two, three, four, five, six,"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testWordsString5() {
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = WordsString.wordsString("""");
		assertEquals(expected, actual);
	}
	
	@Test
	void testWordsString6() {
		List<Object> expected = new ArrayList<Object>(Arrays.asList(""ahmed"", ""gamal""));
		List<Object> actual = WordsString.wordsString(""ahmed     , gamal"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testWordsString7() {
		List<Object> expected = new ArrayList<Object>(Arrays.asList(""ahmed"", ""gamal""));
		List<Object> actual = WordsString.wordsString(""ahmed, gamal"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testWordsString8() {
		List<Object> expected = new ArrayList<Object>(Arrays.asList(""ahmed"", ""gamal""));
		List<Object> actual = WordsString.wordsString(""ahmed,gamal"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testWordsString9() {
		List<Object> expected = new ArrayList<Object>(Arrays.asList(""ahmed"", ""gamal""));
		List<Object> actual = WordsString.wordsString(""ahmed, gamal"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testWordsString10() {
		List<Object> expected = new ArrayList<Object>(Arrays.asList(""ahmed"", ""gamal""));
		List<Object> actual = WordsString.wordsString(""ahmed,gamal"");
		assertEquals(expected, actual);
	}
}"
cmpl-6tTgjx35e5Wqz1ggbuxMH9dxLZk8U,/HumanEvalJava/src/main/java/original/id_102.java,54.41512942314148,length,"// ChooseNum.java
package original;

class ChooseNum {

    /**
     * This function takes two positive numbers x and y and returns the
     * biggest even integer number that is in the range [x, y] inclusive. If
     * there's no such number, then the function should return -1.
     *
     * For example:
     * chooseNum(12, 15) = 14
     * chooseNum(13, 12) = -1
     *
     * > chooseNum(12, 15)
     * 14
     * > chooseNum(13, 12)
     * -1
     * > chooseNum(33, 12354)
     * 12354
     * > chooseNum(5234, 5233)
     * -1
     * > chooseNum(6, 29)
     * 28
     * > chooseNum(27, 10)
     * -1
     * > chooseNum(7, 7)
     * -1
     * > chooseNum(546, 546)
     * 546
     */
    public static int chooseNum(int x, int y) {
        int max = -1;
        for (int i = x; i <= y; i++) {
            if (i % 2 == 0 && i > max) {
                max = i;
            }
        }
        return max;
    }
}
","// ChooseNumTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChooseNum}.
* It contains ten unit test cases for the {@link ChooseNum#chooseNum(int, int)} method.
*/
class ChooseNumTest {","// ChooseNumTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChooseNum}.
* It contains ten unit test cases for the {@link ChooseNum#chooseNum(int, int)} method.
*/
class ChooseNumTest {

		@Test
		void testChooseNum1() {
			assertEquals(14, ChooseNum.chooseNum(12, 15));
		}
		
		@Test
		void testChooseNum2() {
			assertEquals(-1, ChooseNum.chooseNum(13, 12));
		}
		
		@Test
		void testChooseNum3() {
			assertEquals(12354, ChooseNum.chooseNum(33, 12354));
		}
		
		@Test
		void testChooseNum4() {
			assertEquals(-1, ChooseNum.chooseNum(5234, 5233));
		}
		
		@Test
		void testChooseNum5() {
			assertEquals(28, ChooseNum.chooseNum(6, 29));
		}
		
		@Test
		void testChooseNum6() {
			assertEquals(-1, ChooseNum.chooseNum(27, 10));
		}
		
		@Test
		void testChooseNum7() {
			assertEquals(-1, ChooseNum.chooseNum(7, 7));
		}
		
		@Test
		void testChooseNum8() {
			assertEquals(546, ChooseNum.chooseNum(546, 546));
		}
		
		@Test
		void testChooseNum9() {
			assertEquals(0, ChooseNum.chooseNum(0, 0));
		}
		
		@Test
		void testChooseNum10() {
			assertEquals(0, ChooseNum.chooseNum(0, 1));
		}
}

// ChooseNumTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChooseNum}.
* It contains ten unit test cases for the {@link ChooseNum#chooseNum(int, int)} method.
*/
class ChooseNumTest {
		
		@Test
		void testChooseNum1() {
			assertEquals(14, ChooseNum.chooseNum(12, 15));
		}
		
		@Test
		void testChooseNum2() {
			assertEquals(-1, ChooseNum.chooseNum(13, 12));
		}
		
		@Test
		void testChooseNum3() {
			assertEquals(12354, ChooseNum.chooseNum(33, 12354));
		}
		
		@Test
		void testChooseNum4() {
			assertEquals(-1, ChooseNum.chooseNum(5234, 5233));
		}
		
		@Test
		void testChooseNum5() {
			assertEquals(28, ChooseNum.chooseNum(6, 29));
		}
		
		@Test
		void testChooseNum6() {
			assertEquals(-1, ChooseNum.chooseNum(27, 10));
		}
		
		@Test
		void testChooseNum7() {
			assertEquals(-1, ChooseNum.chooseNum(7, 7));
		}
		
		@Test
		void testChooseNum8() {
			assertEquals(546, ChooseNum.chooseNum(546, 546));
		}
		
		@Test
		void testChooseNum9() {
			assertEquals(0, ChooseNum.chooseNum(0, 0));
		}
		
		@Test
		void testChooseNum10() {
			assertEquals(0, ChooseNum.chooseNum(0, 1));
		}
}

// ChooseNumTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChooseNum}.
* It contains ten unit test cases for the {@link ChooseNum#chooseNum(int, int)} method.
*/
class ChooseNumTest {
		
		@Test
		void testChooseNum1() {
			assertEquals(14, ChooseNum.chooseNum(12, 15));
		}
		
		@Test
		void testChooseNum2() {
			assertEquals(-1, ChooseNum.chooseNum(13, 12));
		}
		
		@Test
		void testChooseNum3() {
			assertEquals(12354, ChooseNum.chooseNum(33, 12354));
		}
		
		@Test
		void testChooseNum4() {
			assertEquals(-1, ChooseNum.chooseNum(5234, 5233));
		}
		
		@Test
		void testChooseNum5() {
			assertEquals(28, ChooseNum.chooseNum(6, 29));
		}
		
		@Test
		void testChooseNum6() {
			assertEquals(-1, ChooseNum.chooseNum(27, 10));
		}
		
		@Test
		void testChooseNum7() {
			assertEquals(-1, ChooseNum.chooseNum(7, 7));
		}
		
		@Test
		void testChooseNum8() {
			assertEquals(546, ChooseNum.chooseNum(546, 546));
		}
		
		@Test
		void testChooseNum9() {
			assertEquals(0, ChooseNum.chooseNum(0, 0));
		}
		
		@Test
		void testChooseNum10() {
			assertEquals(0, ChooseNum.chooseNum(0, 1));
		}
}

// ChooseNumTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChooseNum}.
* It contains ten unit test cases for the {@link ChooseNum#chooseNum(int, int)} method.
*/
class ChooseNumTest {
		
		@Test
		void testChooseNum1() {
			assertEquals(14, ChooseNum.chooseNum(12, 15));
		}
		
		@Test
		void testChooseNum2() {
			assertEquals(-1, ChooseNum.chooseNum(13, 12));
		}
		
		@Test
		void testChooseNum3() {
			assertEquals(12354, ChooseNum.chooseNum(33, 12354));
		}
		
		@Test
		void testChooseNum4() {
			assertEquals(-1, ChooseNum.chooseNum(5234, 5233));
		}
		
		@Test
		void testChooseNum5() {
			assertEquals(28, ChooseNum.chooseNum(6, 29));
		}
		
		@Test
		void testChooseNum6() {
			assertEquals(-1, ChooseNum.chooseNum(27, 10));
		}
		
		@Test
		void testChooseNum7() {
			assertEquals(-1, ChooseNum.chooseNum(7, 7));
		}
		
		@Test
		void testChooseNum8() {
			assertEquals(546, ChooseNum.chooseNum(546, 546));
		}
		
		@Test
		void testChooseNum9() {
			assertEquals(0, ChooseNum.chooseNum(0, 0));
		}
		
		@Test
		void testChooseNum10() {
		"
cmpl-6tThmivgvwZ3OjfvHwwycOw17BUqb,/HumanEvalJava/src/main/java/original/id_103.java,8.165403604507446,stop,"// RoundedAvg.java
package original;

class RoundedAvg {

    /**
     * You are given two positive integers n and m, and your task is to compute the
     * average of the integers from n through m (including n and m).
     * Round the answer to the nearest integer and convert that to binary.
     * If n is greater than m, return -1.
     * Example:
     * roundedAvg(1, 5) => ""0b11""
     * roundedAvg(7, 5) => -1
     * roundedAvg(10, 20) => ""0b1111""
     * roundedAvg(20, 33) => ""0b11010""
     *
     * > roundedAvg(1, 5)
     * ""0b11""
     * > roundedAvg(7, 13)
     * ""0b1010""
     * > roundedAvg(964, 977)
     * ""0b1111001010""
     * > roundedAvg(996, 997)
     * ""0b1111100100""
     * > roundedAvg(560, 851)
     * ""0b1011000010""
     * > roundedAvg(185, 546)
     * ""0b101101110""
     * > roundedAvg(362, 496)
     * ""0b110101101""
     * > roundedAvg(350, 902)
     * ""0b1001110010""
     * > roundedAvg(197, 233)
     * ""0b11010111""
     * > roundedAvg(7, 5)
     * -1
     * > roundedAvg(5, 1)
     * -1
     * > roundedAvg(5, 5)
     * ""0b101""
     */
    public static Object roundedAvg(int n, int m) {
        if (n > m) {
            return -1;
        }
        int sum = 0;
        for (int i = n; i <= m; i++) {
            sum += i;
        }
        double avg = (sum * 1.0) / (m - n + 1);
        int roundedAvg = (int) Math.rint(avg);
        return ""0b"" + Integer.toBinaryString(roundedAvg);
    }
}
","// RoundedAvgTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RoundedAvg}.
* It contains ten unit test cases for the {@link RoundedAvg#roundedAvg(int, int)} method.
*/
class RoundedAvgTest {","// RoundedAvgTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RoundedAvg}.
* It contains ten unit test cases for the {@link RoundedAvg#roundedAvg(int, int)} method.
*/
class RoundedAvgTest {

	@Test
	void test1() {
		assertEquals(""0b11"", RoundedAvg.roundedAvg(1, 5));
	}
	
	@Test
	void test2() {
		assertEquals(""0b1010"", RoundedAvg.roundedAvg(7, 13));
	}
	
	@Test
	void test3() {
		assertEquals(""0b1111001010"", RoundedAvg.roundedAvg(964, 977));
	}
	
	@Test
	void test4() {
		assertEquals(""0b1111100100"", RoundedAvg.roundedAvg(996, 997));
	}
	
	@Test
	void test5() {
		assertEquals(""0b1011000010"", RoundedAvg.roundedAvg(560, 851));
	}
	
	@Test
	void test6() {
		assertEquals(""0b101101110"", RoundedAvg.roundedAvg(185, 546));
	}
	
	@Test
	void test7() {
		assertEquals(""0b110101101"", RoundedAvg.roundedAvg(362, 496));
	}
	
	@Test
	void test8() {
		assertEquals(""0b1001110010"", RoundedAvg.roundedAvg(350, 902));
	}
	
	@Test
	void test9() {
		assertEquals(""0b11010111"", RoundedAvg.roundedAvg(197, 233));
	}
	
	@Test
	void test10() {
		assertEquals(-1, RoundedAvg.roundedAvg(7, 5));
	}
}"
cmpl-6tTipHrbOEWJNk6IHTmOP3uzkEPN7,/HumanEvalJava/src/main/java/original/id_104.java,59.76209878921509,length,"// UniqueDigits.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class UniqueDigits {

    /**
     * Given a list of positive integers x. return a sorted list of all
     * elements that hasn't any even digit.
     *
     * Note: Returned list should be sorted in increasing order.
     *
     * For example:
     * >>> uniqueDigits([15, 33, 1422, 1])
     * [1, 15, 33]
     * >>> uniqueDigits([152, 323, 1422, 10])
     * []
     *
     * > uniqueDigits([15, 33, 1422, 1])
     * [1, 15, 33]
     * > uniqueDigits([152, 323, 1422, 10])
     * []
     * > uniqueDigits([12345, 2033, 111, 151])
     * [111, 151]
     * > uniqueDigits([135, 103, 31])
     * [31, 135]
     */
    public static List<Object> uniqueDigits(List<Integer> x) {
        List<Object> result = new ArrayList<Object>();
        for (int value : x) {
            boolean hasEven = false;
            int oldValue = value;
            while (value > 0) {
                if (value % 2 == 0) {
                    hasEven = true;
                    break;
                }
                value /= 10;
            }
            if (!hasEven) {
                result.add(oldValue);
            }
        }
        Collections.sort(result, new Comparator<Object>() {

            public int compare(Object a, Object b) {
                return (Integer) a - (Integer) b;
            }
        });
        return result;
    }
}
","// UniqueDigitsTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UniqueDigits}.
* It contains ten unit test cases for the {@link UniqueDigits#uniqueDigits(List)} method.
*/
class UniqueDigitsTest {","// UniqueDigitsTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UniqueDigits}.
* It contains ten unit test cases for the {@link UniqueDigits#uniqueDigits(List)} method.
*/
class UniqueDigitsTest {

	/**
	* Test case for {@link UniqueDigits#uniqueDigits(List)} method.
	* It tests the method with a list of positive integers.
	* The expected result is a sorted list of all elements that hasn't any even digit.
	*/
	@Test
	void testUniqueDigits() {
		List<Integer> x = new ArrayList<Integer>();
		x.add(15);
		x.add(33);
		x.add(1422);
		x.add(1);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(15);
		expected.add(33);
		List<Object> actual = UniqueDigits.uniqueDigits(x);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link UniqueDigits#uniqueDigits(List)} method.
	* It tests the method with a list of positive integers.
	* The expected result is an empty list.
	*/
	@Test
	void testUniqueDigits2() {
		List<Integer> x = new ArrayList<Integer>();
		x.add(152);
		x.add(323);
		x.add(1422);
		x.add(10);
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = UniqueDigits.uniqueDigits(x);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link UniqueDigits#uniqueDigits(List)} method.
	* It tests the method with a list of positive integers.
	* The expected result is a sorted list of all elements that hasn't any even digit.
	*/
	@Test
	void testUniqueDigits3() {
		List<Integer> x = new ArrayList<Integer>();
		x.add(12345);
		x.add(2033);
		x.add(111);
		x.add(151);
		List<Object> expected = new ArrayList<Object>();
		expected.add(111);
		expected.add(151);
		List<Object> actual = UniqueDigits.uniqueDigits(x);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link UniqueDigits#uniqueDigits(List)} method.
	* It tests the method with a list of positive integers.
	* The expected result is a sorted list of all elements that hasn't any even digit.
	*/
	@Test
	void testUniqueDigits4() {
		List<Integer> x = new ArrayList<Integer>();
		x.add(135);
		x.add(103);
		x.add(31);
		List<Object> expected = new ArrayList<Object>();
		expected.add(31);
		expected.add(135);
		List<Object> actual = UniqueDigits.uniqueDigits(x);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link UniqueDigits#uniqueDigits(List)} method.
	* It tests the method with a list of positive integers.
	* The expected result is a sorted list of all elements that hasn't any even digit.
	*/
	@Test
	void testUniqueDigits5() {
		List<Integer> x = new ArrayList<Integer>();
		x.add(1);
		x.add(2);
		x.add(3);
		x.add(4);
		x.add(5);
		x.add(6);
		x.add(7);
		x.add(8);
		x.add(9);
		x.add(10);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(3);
		expected.add(5);
		expected.add(7);
		expected.add(9);
		List<Object> actual = UniqueDigits.uniqueDigits(x);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link UniqueDigits#uniqueDigits(List)} method.
	* It tests the method with a list of positive integers.
	* The expected result is a sorted list of all elements that hasn't any even digit.
	*/
	@Test
	void testUniqueDigits6() {
		List<Integer> x = new ArrayList<Integer>();
		x.add(1);
		x.add(2);
		x.add(3);
		x.add(4);
		x.add(5);
		x.add(6);
		x.add(7);
		x.add(8);
		x.add(9);
		x.add(10);
		x.add(11);
		x.add(12);
		x.add(13);
		x.add(14);
		x.add(15);
		x.add(16);
		x.add(17);
		x.add(18);
		x.add(19);
		x.add(20);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(3);
		expected.add(5);
		expected.add(7);
		expected.add(9);
		expected.add(11);
		expected.add(13);
		expected.add(15);
		expected.add(17);
		expected.add(19);
		List<Object> actual = UniqueDigits.uniqueDigits(x);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link UniqueDigits#uniqueDigits(List)} method.
	* It tests the method with a list of positive integers.
	* The expected result is a sorted list of all elements that hasn't any even digit.
	*/
	@Test
	void testUniqueDigits7() {
		List<Integer> x = new ArrayList<Integer>();
		x.add(1);
		x.add(2);
		x.add(3);
		x.add(4);
		x.add(5);
		x.add(6);
		x.add(7);
		x.add(8);
		x.add(9);
		x.add(10);
		x.add(11);
		x.add(12);
		x.add(13);
		x.add(14);
		x.add(15);
		x.add(16);
		x.add(17);
		x.add(18);
		x.add(19);
		x.add(20);
		x.add(21);
		x.add(22);
		x.add(23);
		x.add(24);
		x.add(25);
		x.add(26);
		x.add(27);
		x.add(28);
		x.add(29);
		x.add(30);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(3);
		expected.add(5);
		expected.add(7);
		expected.add(9);
		expected.add(11);
		expected.add(13);
		expected.add(15);
		expected.add(17);
		expected.add(19);
		expected.add(21);
		expected.add(23);
		expected.add(25);
		expected.add(27);
		expected.add(29);
		List<Object> actual = UniqueDigits.uniqueDigits(x);
		assertEquals(expected, actual);
	}
	
	/**
"
cmpl-6tTjsHxRIBOGmo20Ly1gy3bGrJuCd,/HumanEvalJava/src/main/java/original/id_105.java,53.91743063926697,length,"// ByLength.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class ByLength {

    /**
     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,
     * reverse the resulting array, and then replace each digit by its corresponding name from
     * ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".
     *
     * For example:
     * arr = [2, 1, 1, 4, 5, 8, 2, 3]
     * -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]
     * -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
     * return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
     *
     * If the array is empty, return an empty array:
     * arr = []
     * return []
     *
     * If the array has any strange number ignore it:
     * arr = [1, -1 , 55]
     * -> sort arr -> [-1, 1, 55]
     * -> reverse arr -> [55, 1, -1]
     * return = ['One']
     *
     * > byLength([2, 1, 1, 4, 5, 8, 2, 3])
     * [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
     * > byLength([])
     * []
     * > byLength([1, -1, 55])
     * [""One""]
     * > byLength([1, -1, 3, 2])
     * [""Three"", ""Two"", ""One""]
     * > byLength([9, 4, 8])
     * [""Nine"", ""Eight"", ""Four""]
     */
    public static List<Object> byLength(List<Object> arr) {
        List<Integer> sorted = new ArrayList<Integer>();
        for (Object value : arr) {
            if (value instanceof Integer) {
                sorted.add((Integer) value);
            }
        }
        Collections.sort(sorted);
        Collections.reverse(sorted);
        List<Object> result = new ArrayList<Object>();
        for (Integer value : sorted) {
            if (value >= 1 && value <= 9) {
                switch(value) {
                    case 1:
                        result.add(""One"");
                        break;
                    case 2:
                        result.add(""Two"");
                        break;
                    case 3:
                        result.add(""Three"");
                        break;
                    case 4:
                        result.add(""Four"");
                        break;
                    case 5:
                        result.add(""Five"");
                        break;
                    case 6:
                        result.add(""Six"");
                        break;
                    case 7:
                        result.add(""Seven"");
                        break;
                    case 8:
                        result.add(""Eight"");
                        break;
                    case 9:
                        result.add(""Nine"");
                        break;
                }
            }
        }
        return result;
    }
}
","// ByLengthTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ByLength}.
* It contains ten unit test cases for the {@link ByLength#byLength(List)} method.
*/
class ByLengthTest {","// ByLengthTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ByLength}.
* It contains ten unit test cases for the {@link ByLength#byLength(List)} method.
*/
class ByLengthTest {

	@Test
	void testByLength() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(2);
		arr.add(1);
		arr.add(1);
		arr.add(4);
		arr.add(5);
		arr.add(8);
		arr.add(2);
		arr.add(3);
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Eight"");
		expected.add(""Five"");
		expected.add(""Four"");
		expected.add(""Three"");
		expected.add(""Two"");
		expected.add(""Two"");
		expected.add(""One"");
		expected.add(""One"");
		assertEquals(expected, ByLength.byLength(arr));
	}
	
	@Test
	void testByLengthEmpty() {
		List<Object> arr = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, ByLength.byLength(arr));
	}
	
	@Test
	void testByLengthStrangeNumber() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(1);
		arr.add(-1);
		arr.add(55);
		List<Object> expected = new ArrayList<Object>();
		expected.add(""One"");
		assertEquals(expected, ByLength.byLength(arr));
	}
	
	@Test
	void testByLengthStrangeNumber2() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(1);
		arr.add(-1);
		arr.add(3);
		arr.add(2);
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Three"");
		expected.add(""Two"");
		expected.add(""One"");
		assertEquals(expected, ByLength.byLength(arr));
	}
	
	@Test
	void testByLengthStrangeNumber3() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(9);
		arr.add(4);
		arr.add(8);
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Nine"");
		expected.add(""Eight"");
		expected.add(""Four"");
		assertEquals(expected, ByLength.byLength(arr));
	}
	
	@Test
	void testByLengthStrangeNumber4() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(9);
		arr.add(4);
		arr.add(8);
		arr.add(1);
		arr.add(2);
		arr.add(3);
		arr.add(5);
		arr.add(6);
		arr.add(7);
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Nine"");
		expected.add(""Eight"");
		expected.add(""Seven"");
		expected.add(""Six"");
		expected.add(""Five"");
		expected.add(""Four"");
		expected.add(""Three"");
		expected.add(""Two"");
		expected.add(""One"");
		assertEquals(expected, ByLength.byLength(arr));
	}
	
	@Test
	void testByLengthStrangeNumber5() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(9);
		arr.add(4);
		arr.add(8);
		arr.add(1);
		arr.add(2);
		arr.add(3);
		arr.add(5);
		arr.add(6);
		arr.add(7);
		arr.add(10);
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Nine"");
		expected.add(""Eight"");
		expected.add(""Seven"");
		expected.add(""Six"");
		expected.add(""Five"");
		expected.add(""Four"");
		expected.add(""Three"");
		expected.add(""Two"");
		expected.add(""One"");
		assertEquals(expected, ByLength.byLength(arr));
	}
	
	@Test
	void testByLengthStrangeNumber6() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(9);
		arr.add(4);
		arr.add(8);
		arr.add(1);
		arr.add(2);
		arr.add(3);
		arr.add(5);
		arr.add(6);
		arr.add(7);
		arr.add(10);
		arr.add(0);
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Nine"");
		expected.add(""Eight"");
		expected.add(""Seven"");
		expected.add(""Six"");
		expected.add(""Five"");
		expected.add(""Four"");
		expected.add(""Three"");
		expected.add(""Two"");
		expected.add(""One"");
		assertEquals(expected, ByLength.byLength(arr));
	}
	
	@Test
	void testByLengthStrangeNumber7() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(9);
		arr.add(4);
		arr.add(8);
		arr.add(1);
		arr.add(2);
		arr.add(3);
		arr.add(5);
		arr.add(6);
		arr.add(7);
		arr.add(10);
		arr.add(0);
		arr.add(11);
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Nine"");
		expected.add(""Eight"");
		expected.add(""Seven"");
		expected.add(""Six"");
		expected.add(""Five"");
		expected.add(""Four"");
		expected.add(""Three"");
		expected.add(""Two"");
		expected.add(""One"");
		assertEquals(expected, ByLength.byLength(arr));
	}
	
	@Test
	void testByLengthStrangeNumber8() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(9);
		arr.add(4);
		arr.add(8);
		arr.add(1);
		arr.add(2);
		arr.add(3);
		arr.add(5);
		arr.add(6);
		arr.add(7);
		arr.add(10);
		arr.add(0);
		arr.add(11);
		arr.add(12);
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Nine"");
		expected.add(""Eight"");
		expected.add(""Seven"");
		expected.add(""Six"");
		expected.add(""Five"");
		expected.add(""Four"");
		expected.add(""Three"");
		expected.add(""Two"");
		expected.add(""One"");
		assertEquals(expected, ByLength.byLength(arr));
	}
	
	@Test
	void testByLengthStrangeNumber9() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(9);
		arr.add(4);
		arr.add(8);
		arr.add(1);
		arr.add(2);
		arr.add(3);
		arr.add(5);
		arr.add(6);
		arr.add(7);
		arr.add("
cmpl-6tTkva8RmYbUwoTJxvR6ue16IGBOn,/HumanEvalJava/src/main/java/original/id_106.java,60.62578225135803,length,"// F.java
package original;

import java.util.ArrayList;
import java.util.List;

class F {

    /**
     * Implement the function f that takes n as a parameter,
     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
     * or the sum of numbers from 1 to i otherwise.
     * i starts from 1.
     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
     * Example:
     * f(5) == [1, 2, 6, 24, 15]
     *
     * > f(5)
     * [1, 2, 6, 24, 15]
     * > f(7)
     * [1, 2, 6, 24, 15, 720, 28]
     * > f(1)
     * [1]
     * > f(3)
     * [1, 2, 6]
     */
    public static List<Integer> f(int n) {
        List<Integer> result = new ArrayList<Integer>();
        for (int i = 1; i <= n; i++) {
            if (i % 2 == 0) {
                result.add(factorial(i));
            } else {
                result.add(sum(i));
            }
        }
        return result;
    }

    private static int factorial(int n) {
        int result = 1;
        for (int i = 1; i <= n; i++) {
            result *= i;
        }
        return result;
    }

    private static int sum(int n) {
        int result = 0;
        for (int i = 1; i <= n; i++) {
            result += i;
        }
        return result;
    }
}
","// FTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link F}.
* It contains ten unit test cases for the {@link F#f(int)} method.
*/
class FTest {","// FTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link F}.
* It contains ten unit test cases for the {@link F#f(int)} method.
*/
class FTest {

	@Test
	void testF() {
		assertEquals(new ArrayList<Integer>(), F.f(0));
		assertEquals(List.of(1), F.f(1));
		assertEquals(List.of(1, 2), F.f(2));
		assertEquals(List.of(1, 2, 6), F.f(3));
		assertEquals(List.of(1, 2, 6, 24), F.f(4));
		assertEquals(List.of(1, 2, 6, 24, 15), F.f(5));
		assertEquals(List.of(1, 2, 6, 24, 15, 720), F.f(6));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28), F.f(7));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28, 5040), F.f(8));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28, 5040, 362880), F.f(9));
	}
}

// FTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link F}.
* It contains ten unit test cases for the {@link F#f(int)} method.
*/
class FTest {
		
	@Test
	void testF() {
		assertEquals(new ArrayList<Integer>(), F.f(0));
		assertEquals(List.of(1), F.f(1));
		assertEquals(List.of(1, 2), F.f(2));
		assertEquals(List.of(1, 2, 6), F.f(3));
		assertEquals(List.of(1, 2, 6, 24), F.f(4));
		assertEquals(List.of(1, 2, 6, 24, 15), F.f(5));
		assertEquals(List.of(1, 2, 6, 24, 15, 720), F.f(6));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28), F.f(7));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28, 5040), F.f(8));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28, 5040, 362880), F.f(9));
	}
}

// FTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link F}.
* It contains ten unit test cases for the {@link F#f(int)} method.
*/
class FTest {
		
	@Test
	void testF() {
		assertEquals(new ArrayList<Integer>(), F.f(0));
		assertEquals(List.of(1), F.f(1));
		assertEquals(List.of(1, 2), F.f(2));
		assertEquals(List.of(1, 2, 6), F.f(3));
		assertEquals(List.of(1, 2, 6, 24), F.f(4));
		assertEquals(List.of(1, 2, 6, 24, 15), F.f(5));
		assertEquals(List.of(1, 2, 6, 24, 15, 720), F.f(6));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28), F.f(7));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28, 5040), F.f(8));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28, 5040, 362880), F.f(9));
	}
}

// FTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link F}.
* It contains ten unit test cases for the {@link F#f(int)} method.
*/
class FTest {
		
	@Test
	void testF() {
		assertEquals(new ArrayList<Integer>(), F.f(0));
		assertEquals(List.of(1), F.f(1));
		assertEquals(List.of(1, 2), F.f(2));
		assertEquals(List.of(1, 2, 6), F.f(3));
		assertEquals(List.of(1, 2, 6, 24), F.f(4));
		assertEquals(List.of(1, 2, 6, 24, 15), F.f(5));
		assertEquals(List.of(1, 2, 6, 24, 15, 720), F.f(6));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28), F.f(7));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28, 5040), F.f(8));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28, 5040, 362880), F.f(9));
	}
}

// FTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link F}.
* It contains ten unit test cases for the {@link F#f(int)} method.
*/
class FTest {
		
	@Test
	void testF() {
		assertEquals(new ArrayList<Integer>(), F.f(0));
		assertEquals(List.of(1), F.f(1));
		assertEquals(List.of(1, 2), F.f(2));
		assertEquals(List.of(1, 2, 6), F.f(3));
		assertEquals(List.of(1, 2, 6, 24), F.f(4));
		assertEquals(List.of(1, 2, 6, 24, 15), F.f(5));
		assertEquals(List.of(1, 2, 6, 24, 15, 720), F.f(6));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28), F.f(7));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28, 5040), F.f(8));
		assertEquals(List.of(1, 2, 6, 24, 15, 720, 28, 5040, 362880), F.f(9));
	}
}

// FTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link F}.
* It contains ten unit test cases for the {@link F#f(int)} method.
*/
class FTest {
		
	@Test
	void testF() {
		assertEquals(new ArrayList<Integer>(), F.f(0));
		assertEquals(List.of(1), F.f(1));
		assertEquals(List.of"
cmpl-6tTluBFSKPjKzU0vq19NR8WIaf52l,/HumanEvalJava/src/main/java/original/id_107.java,12.675886631011963,stop,"// EvenOddPalindrome.java
package original;

import java.util.ArrayList;
import java.util.List;

class EvenOddPalindrome {

    /**
     * * Given a positive integer n, return a tuple that has the number of even and odd
     * integer palindromes that fall within the range(1, n), inclusive.
     *
     * Example 1:
     *
     * Input: 3
     * Output: (1, 2)
     * Explanation:
     * Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
     *
     * Example 2:
     *
     * Input: 12
     * Output: (4, 6)
     * Explanation:
     * Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
     *
     * Note:
     * 1. 1 <= n <= 10^3
     * 2. returned tuple has the number of even and odd integer palindromes respectively.
     *
     * > evenOddPalindrome(123)
     * [8, 13]
     * > evenOddPalindrome(12)
     * [4, 6]
     * > evenOddPalindrome(3)
     * [1, 2]
     * > evenOddPalindrome(63)
     * [6, 8]
     * > evenOddPalindrome(25)
     * [5, 6]
     * > evenOddPalindrome(19)
     * [4, 6]
     * > evenOddPalindrome(9)
     * [4, 5]
     * > evenOddPalindrome(1)
     * [0, 1]
     */
    public static List<Integer> evenOddPalindrome(int n) {
        List<Integer> result = new ArrayList<Integer>();
        int even = 0;
        int odd = 0;
        for (int i = 1; i <= n; i++) {
            if (isPalindrome(i)) {
                if (i % 2 == 0) {
                    even++;
                } else {
                    odd++;
                }
            }
        }
        result.add(even);
        result.add(odd);
        return result;
    }

    private static boolean isPalindrome(int n) {
        int m = n;
        int reversed = 0;
        while (m > 0) {
            reversed = reversed * 10 + m % 10;
            m /= 10;
        }
        return n == reversed;
    }
}
","// EvenOddPalindromeTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddPalindrome}.
* It contains ten unit test cases for the {@link EvenOddPalindrome#evenOddPalindrome(int)} method.
*/
class EvenOddPalindromeTest {","// EvenOddPalindromeTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddPalindrome}.
* It contains ten unit test cases for the {@link EvenOddPalindrome#evenOddPalindrome(int)} method.
*/
class EvenOddPalindromeTest {

	@Test
	void testEvenOddPalindrome() {
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(8);
		expected.add(13);
		assertEquals(expected, EvenOddPalindrome.evenOddPalindrome(123));
		
		expected.clear();
		expected.add(4);
		expected.add(6);
		assertEquals(expected, EvenOddPalindrome.evenOddPalindrome(12));
		
		expected.clear();
		expected.add(1);
		expected.add(2);
		assertEquals(expected, EvenOddPalindrome.evenOddPalindrome(3));
		
		expected.clear();
		expected.add(6);
		expected.add(8);
		assertEquals(expected, EvenOddPalindrome.evenOddPalindrome(63));
		
		expected.clear();
		expected.add(5);
		expected.add(6);
		assertEquals(expected, EvenOddPalindrome.evenOddPalindrome(25));
		
		expected.clear();
		expected.add(4);
		expected.add(6);
		assertEquals(expected, EvenOddPalindrome.evenOddPalindrome(19));
		
		expected.clear();
		expected.add(4);
		expected.add(5);
		assertEquals(expected, EvenOddPalindrome.evenOddPalindrome(9));
		
		expected.clear();
		expected.add(0);
		expected.add(1);
		assertEquals(expected, EvenOddPalindrome.evenOddPalindrome(1));
	}
}"
cmpl-6tTmxrLjg3LbW8DcU4oNq9Oh3OJoe,/HumanEvalJava/src/main/java/original/id_108.java,8.940452337265015,stop,"// CountNums.java
package original;

import java.util.List;

class CountNums {

    /**
     * * Write a function count_nums which takes an array of integers and returns
     * the number of elements which has a sum of digits > 0.
     * If a number is negative, then its first signed digit will be negative:
     * e.g. -123 has signed digits -1, 2, and 3.
     * >>> countNums([]) == 0
     * >>> countNums([-1, 11, -11]) == 1
     * >>> countNums([1, 1, 2]) == 3
     *
     * > countNums([])
     * 0
     * > countNums([-1, -2, 0])
     * 0
     * > countNums([1, 1, 2, -2, 3, 4, 5])
     * 6
     * > countNums([1, 6, 9, -6, 0, 1, 5])
     * 5
     * > countNums([1, 100, 98, -7, 1, -1])
     * 4
     * > countNums([12, 23, 34, -45, -56, 0])
     * 5
     * > countNums([0, 1])
     * 1
     * > countNums([1])
     * 1
     */
    public static int countNums(List<Object> arr) {
        int count = 0;
        for (int i = 0; i < arr.size(); i++) {
            int sum = 0;
            int num = (int) arr.get(i);
            boolean isNegative = num < 0;
            if (isNegative) {
                num = -num;
            }
            while (num != 0) {
                if (isNegative && num / 10 == 0) {
                    sum -= num % 10;
                } else {
                    sum += num % 10;
                }
                num /= 10;
            }
            if (sum > 0) {
                count++;
            }
        }
        return count;
    }
}
","// CountNumsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountNums}.
* It contains ten unit test cases for the {@link CountNums#countNums(List)} method.
*/
class CountNumsTest {","// CountNumsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountNums}.
* It contains ten unit test cases for the {@link CountNums#countNums(List)} method.
*/
class CountNumsTest {

	@Test
	void testCountNums() {
		assertEquals(0, CountNums.countNums(List.of()));
		assertEquals(0, CountNums.countNums(List.of(-1, -2, 0)));
		assertEquals(6, CountNums.countNums(List.of(1, 1, 2, -2, 3, 4, 5)));
		assertEquals(5, CountNums.countNums(List.of(1, 6, 9, -6, 0, 1, 5)));
		assertEquals(4, CountNums.countNums(List.of(1, 100, 98, -7, 1, -1)));
		assertEquals(5, CountNums.countNums(List.of(12, 23, 34, -45, -56, 0)));
		assertEquals(1, CountNums.countNums(List.of(0, 1)));
		assertEquals(1, CountNums.countNums(List.of(1)));
	}
}"
cmpl-6tTo0Bm1ChHkGg3gsn4AgYAK2z6zU,/HumanEvalJava/src/main/java/original/id_109.java,9.47333025932312,stop,"// MoveOneBall.java
package original;

import java.util.List;

class MoveOneBall {

    /**
     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
     * numbers in the array will be randomly ordered. Your task is to determine if
     * it is possible to get an array sorted in non-decreasing order by performing
     * the following operation on the given array:
     * You are allowed to perform right shift operation any number of times.
     *
     * One right shift operation means shifting all elements of the array by one
     * position in the right direction. The last element of the array will be moved to
     * the starting position in the array i.e. 0th index.
     *
     * If it is possible to obtain the sorted array by performing the above operation
     * then return True else return False.
     * If the given array is empty then return True.
     *
     * Note: The given list is guaranteed to have unique elements.
     *
     * For Example:
     *
     * move_one_ball([3, 4, 5, 1, 2])==>True
     * Explanation: By performing 2 right shift operations, non-decreasing order can
     * be achieved for the given array.
     * move_one_ball([3, 5, 4, 1, 2])==>False
     * Explanation:It is not possible to get non-decreasing order for the given
     * array by performing any number of right shift operations.
     *
     * > moveOneBall([3, 4, 5, 1, 2])
     * true
     * > moveOneBall([3, 5, 10, 1, 2])
     * true
     * > moveOneBall([4, 3, 1, 2])
     * false
     * > moveOneBall([3, 5, 4, 1, 2])
     * false
     * > moveOneBall([])
     * true
     */
    public static Boolean moveOneBall(List<Object> arr) {
        if (arr.size() == 0) {
            return true;
        }
        int count = 0;
        for (int i = 0; i < arr.size(); i++) {
            if ((int) arr.get(i) > (int) arr.get((i + 1) % arr.size())) {
                count++;
            }
        }
        if (count <= 1) {
            return true;
        }
        return false;
    }
}
","// MoveOneBallTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MoveOneBall}.
* It contains ten unit test cases for the {@link MoveOneBall#moveOneBall(List)} method.
*/
class MoveOneBallTest {","// MoveOneBallTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MoveOneBall}.
* It contains ten unit test cases for the {@link MoveOneBall#moveOneBall(List)} method.
*/
class MoveOneBallTest {

	@Test
	void testMoveOneBall() {
		assertTrue(MoveOneBall.moveOneBall(List.of(3, 4, 5, 1, 2)));
		assertTrue(MoveOneBall.moveOneBall(List.of(3, 5, 10, 1, 2)));
		assertFalse(MoveOneBall.moveOneBall(List.of(4, 3, 1, 2)));
		assertFalse(MoveOneBall.moveOneBall(List.of(3, 5, 4, 1, 2)));
		assertTrue(MoveOneBall.moveOneBall(List.of()));
		assertTrue(MoveOneBall.moveOneBall(List.of(1, 2, 3, 4, 5)));
		assertTrue(MoveOneBall.moveOneBall(List.of(1, 2, 3, 4, 5, 6)));
		assertTrue(MoveOneBall.moveOneBall(List.of(1, 2, 3, 4, 5, 6, 7)));
		assertTrue(MoveOneBall.moveOneBall(List.of(1, 2, 3, 4, 5, 6, 7, 8)));
		assertTrue(MoveOneBall.moveOneBall(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9)));
	}
}"
cmpl-6tTp3x1B3HldtSWmZrmkqGC0YjpfX,/HumanEvalJava/src/main/java/original/id_11.java,7.66586971282959,stop,"// StringXor.java
package original;

class StringXor {

    /**
     * Input are two strings a and b consisting only of 1s and 0s.
     * Perform binary XOR on these inputs and return result also as a string.
     *
     * > stringXor(""010"", ""110"")
     * ""100""
     * > stringXor(""111000"", ""101010"")
     * ""010010""
     * > stringXor(""1"", ""1"")
     * ""0""
     * > stringXor(""0101"", ""0000"")
     * ""0101""
     */
    public static String stringXor(String a, String b) {
        String result = """";
        for (int i = 0; i < a.length(); i++) {
            if (a.charAt(i) == b.charAt(i)) {
                result += ""0"";
            } else {
                result += ""1"";
            }
        }
        return result;
    }
}
","// StringXorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringXor}.
* It contains ten unit test cases for the {@link StringXor#stringXor(String, String)} method.
*/
class StringXorTest {","// StringXorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringXor}.
* It contains ten unit test cases for the {@link StringXor#stringXor(String, String)} method.
*/
class StringXorTest {

	@Test
	void testStringXor() {
		assertEquals(""100"", StringXor.stringXor(""010"", ""110""));
		assertEquals(""010010"", StringXor.stringXor(""111000"", ""101010""));
		assertEquals(""0"", StringXor.stringXor(""1"", ""1""));
		assertEquals(""0101"", StringXor.stringXor(""0101"", ""0000""));
		assertEquals(""0101"", StringXor.stringXor(""0101"", ""0000""));
		assertEquals(""0101"", StringXor.stringXor(""0101"", ""0000""));
		assertEquals(""0101"", StringXor.stringXor(""0101"", ""0000""));
		assertEquals(""0101"", StringXor.stringXor(""0101"", ""0000""));
		assertEquals(""0101"", StringXor.stringXor(""0101"", ""0000""));
		assertEquals(""0101"", StringXor.stringXor(""0101"", ""0000""));
	}
}"
cmpl-6tTq6Ic6SCWxsWovfSKaoSg0sHgWB,/HumanEvalJava/src/main/java/original/id_110.java,23.95001244544983,stop,"// Exchange.java
package original;

import java.util.List;

class Exchange {

    /**
     * In this problem, you will implement a function that takes two lists of numbers,
     * and determines whether it is possible to perform an exchange of elements
     * between them to make lst1 a list of only even numbers.
     * There is no limit on the number of exchanged elements between lst1 and lst2.
     * If it is possible to exchange elements between the lst1 and lst2 to make
     * all the elements of lst1 to be even, return ""YES"".
     * Otherwise, return ""NO"".
     * For example:
     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
     * It is assumed that the input lists will be non-empty.
     *
     * > exchange([1, 2, 3, 4], [1, 2, 3, 4])
     * ""YES""
     * > exchange([1, 2, 3, 4], [1, 5, 3, 4])
     * ""NO""
     * > exchange([1, 2, 3, 4], [2, 1, 4, 3])
     * ""YES""
     * > exchange([5, 7, 3], [2, 6, 4])
     * ""YES""
     * > exchange([5, 7, 3], [2, 6, 3])
     * ""NO""
     * > exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])
     * ""NO""
     * > exchange([100, 200], [200, 200])
     * ""YES""
     */
    public static String exchange(List<Integer> lst1, List<Integer> lst2) {
        int count = 0;
        for (int i = 0; i < lst1.size(); i++) {
            if (lst1.get(i) % 2 != 0) {
                count++;
            }
        }
        for (int i = 0; i < lst2.size(); i++) {
            if (lst2.get(i) % 2 == 0) {
                count--;
            }
        }
        if (count <= 0) {
            return ""YES"";
        } else {
            return ""NO"";
        }
    }
}
","// ExchangeTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Exchange}.
* It contains ten unit test cases for the {@link Exchange#exchange(List, List)} method.
*/
class ExchangeTest {","// ExchangeTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Exchange}.
* It contains ten unit test cases for the {@link Exchange#exchange(List, List)} method.
*/
class ExchangeTest {

	@Test
	void testExchange1() {
		List<Integer> lst1 = List.of(1, 2, 3, 4);
		List<Integer> lst2 = List.of(1, 2, 3, 4);
		assertEquals(""YES"", Exchange.exchange(lst1, lst2));
	}
	
	@Test
	void testExchange2() {
		List<Integer> lst1 = List.of(1, 2, 3, 4);
		List<Integer> lst2 = List.of(1, 5, 3, 4);
		assertEquals(""NO"", Exchange.exchange(lst1, lst2));
	}
	
	@Test
	void testExchange3() {
		List<Integer> lst1 = List.of(1, 2, 3, 4);
		List<Integer> lst2 = List.of(2, 1, 4, 3);
		assertEquals(""YES"", Exchange.exchange(lst1, lst2));
	}
	
	@Test
	void testExchange4() {
		List<Integer> lst1 = List.of(5, 7, 3);
		List<Integer> lst2 = List.of(2, 6, 4);
		assertEquals(""YES"", Exchange.exchange(lst1, lst2));
	}
	
	@Test
	void testExchange5() {
		List<Integer> lst1 = List.of(5, 7, 3);
		List<Integer> lst2 = List.of(2, 6, 3);
		assertEquals(""NO"", Exchange.exchange(lst1, lst2));
	}
	
	@Test
	void testExchange6() {
		List<Integer> lst1 = List.of(3, 2, 6, 1, 8, 9);
		List<Integer> lst2 = List.of(3, 5, 5, 1, 1, 1);
		assertEquals(""NO"", Exchange.exchange(lst1, lst2));
	}
	
	@Test
	void testExchange7() {
		List<Integer> lst1 = List.of(100, 200);
		List<Integer> lst2 = List.of(200, 200);
		assertEquals(""YES"", Exchange.exchange(lst1, lst2));
	}
	
	@Test
	void testExchange8() {
		List<Integer> lst1 = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
		List<Integer> lst2 = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
		assertEquals(""YES"", Exchange.exchange(lst1, lst2));
	}
	
	@Test
	void testExchange9() {
		List<Integer> lst1 = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
		List<Integer> lst2 = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 11);
		assertEquals(""NO"", Exchange.exchange(lst1, lst2));
	}
	
	@Test
	void testExchange10() {
		List<Integer> lst1 = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
		List<Integer> lst2 = List.of(2, 4, 6, 8, 10, 12, 14, 16, 18, 20);
		assertEquals(""YES"", Exchange.exchange(lst1, lst2));
	}
}"
cmpl-6tTr9k2eJgiIT2yAzwkus7yGXKyUy,/HumanEvalJava/src/main/java/original/id_111.java,24.876874923706055,stop,"// Histogram.java
package original;

import java.util.HashMap;
import java.util.Map;

class Histogram {

    /**
     * Given a string representing a space separated lowercase letters, return a dictionary
     * of the letter with the most repetition and containing the corresponding count.
     * If several letters have the same occurrence, return all of them.
     *
     * Example:
     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
     * histogram('a b b a') == {'a': 2, 'b': 2}
     * histogram('a b c a b') == {'a': 2, 'b': 2}
     * histogram('b b b b a') == {'b': 4}
     * histogram('') == {}
     *
     * > histogram(""a b b a"")
     * {""a"": 2, ""b"": 2}
     * > histogram(""a b c a b"")
     * {""a"": 2, ""b"": 2}
     * > histogram(""a b c d g"")
     * {""a"": 1, ""b"": 1, ""c"": 1, ""d"": 1, ""g"": 1}
     * > histogram(""r t g"")
     * {""r"": 1, ""t"": 1, ""g"": 1}
     * > histogram(""b b b b a"")
     * {""b"": 4}
     * > histogram(""r t g"")
     * {""r"": 1, ""t"": 1, ""g"": 1}
     * > histogram("""")
     * {}
     * > histogram(""a"")
     * {""a"": 1}
     */
    public static Object histogram(String test) {
        Map<String, Integer> map = new HashMap<>();
        if (test == null || test.length() == 0) {
            return map;
        }
        String[] arr = test.split("" "");
        for (String s : arr) {
            if (map.containsKey(s)) {
                map.put(s, map.get(s) + 1);
            } else {
                map.put(s, 1);
            }
        }
        int max = 0;
        for (int i : map.values()) {
            max = Math.max(max, i);
        }
        Map<String, Integer> res = new HashMap<>();
        for (String s : map.keySet()) {
            if (map.get(s) == max) {
                res.put(s, map.get(s));
            }
        }
        return res;
    }
}
","// HistogramTest.java
package original;

import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Histogram}.
* It contains ten unit test cases for the {@link Histogram#histogram(String)} method.
*/
class HistogramTest {","// HistogramTest.java
package original;

import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Histogram}.
* It contains ten unit test cases for the {@link Histogram#histogram(String)} method.
*/
class HistogramTest {

	@Test
	void testHistogram() {
		Map<String, Integer> expected = new HashMap<>();
		expected.put(""a"", 2);
		expected.put(""b"", 2);
		assertEquals(expected, Histogram.histogram(""a b b a""));
		
		expected = new HashMap<>();
		expected.put(""a"", 2);
		expected.put(""b"", 2);
		assertEquals(expected, Histogram.histogram(""a b c a b""));
		
		expected = new HashMap<>();
		expected.put(""a"", 1);
		expected.put(""b"", 1);
		expected.put(""c"", 1);
		expected.put(""d"", 1);
		expected.put(""g"", 1);
		assertEquals(expected, Histogram.histogram(""a b c d g""));
		
		expected = new HashMap<>();
		expected.put(""r"", 1);
		expected.put(""t"", 1);
		expected.put(""g"", 1);
		assertEquals(expected, Histogram.histogram(""r t g""));
		
		expected = new HashMap<>();
		expected.put(""b"", 4);
		assertEquals(expected, Histogram.histogram(""b b b b a""));
		
		expected = new HashMap<>();
		expected.put(""r"", 1);
		expected.put(""t"", 1);
		expected.put(""g"", 1);
		assertEquals(expected, Histogram.histogram(""r t g""));
		
		expected = new HashMap<>();
		assertEquals(expected, Histogram.histogram(""""));
		
		expected = new HashMap<>();
		expected.put(""a"", 1);
		assertEquals(expected, Histogram.histogram(""a""));
		
		expected = new HashMap<>();
		expected.put(""a"", 1);
		expected.put(""b"", 1);
		expected.put(""c"", 1);
		assertEquals(expected, Histogram.histogram(""a b c""));
		
		expected = new HashMap<>();
		expected.put(""a"", 1);
		expected.put(""b"", 1);
		expected.put(""c"", 1);
		expected.put(""d"", 1);
		expected.put(""e"", 1);
		expected.put(""f"", 1);
		expected.put(""g"", 1);
		expected.put(""h"", 1);
		expected.put(""i"", 1);
		expected.put(""j"", 1);
		assertEquals(expected, Histogram.histogram(""a b c d e f g h i j""));
	}
}"
cmpl-6tTsCwTMKbu0CcwxoTbDFjUWLjxDT,/HumanEvalJava/src/main/java/original/id_112.java,23.26139998435974,stop,"// ReverseDelete.java
package original;

import java.util.Arrays;
import java.util.List;

class ReverseDelete {

    /**
     * Task
     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
     * then check if the result string is palindrome.
     * A string is called palindrome if it reads the same backward as forward.
     * You should return a tuple containing the result string and True/False for the check.
     * Example
     * For s = ""abcde"", c = ""ae"", the result should be ('bcd',False)
     * For s = ""abcdef"", c = ""b""  the result should be ('acdef',False)
     * For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',True)
     *
     * > reverseDelete(""abcde"", ""ae"")
     * [""bcd"", false]
     * > reverseDelete(""abcdef"", ""b"")
     * [""acdef"", false]
     * > reverseDelete(""abcdedcba"", ""ab"")
     * [""cdedc"", true]
     * > reverseDelete(""dwik"", ""w"")
     * [""dik"", false]
     * > reverseDelete(""a"", ""a"")
     * ["""", true]
     * > reverseDelete(""abcdedcba"", """")
     * [""abcdedcba"", true]
     * > reverseDelete(""abcdedcba"", ""v"")
     * [""abcdedcba"", true]
     * > reverseDelete(""vabba"", ""v"")
     * [""abba"", true]
     * > reverseDelete(""mamma"", ""mia"")
     * ["""", true]
     */
    public static List<Object> reverseDelete(String s, String c) {
        String result = """";
        for (int i = 0; i < s.length(); i++) {
            if (c.indexOf(s.charAt(i)) == -1) {
                result += s.charAt(i);
            }
        }
        boolean isPalindrome = true;
        for (int i = 0; i < result.length() / 2; i++) {
            if (result.charAt(i) != result.charAt(result.length() - i - 1)) {
                isPalindrome = false;
                break;
            }
        }
        return Arrays.asList(result, isPalindrome);
    }
}
","// ReverseDeleteTest.java
package original;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ReverseDelete}.
* It contains ten unit test cases for the {@link ReverseDelete#reverseDelete(String, String)} method.
*/
class ReverseDeleteTest {","// ReverseDeleteTest.java
package original;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ReverseDelete}.
* It contains ten unit test cases for the {@link ReverseDelete#reverseDelete(String, String)} method.
*/
class ReverseDeleteTest {

	@Test
	void testReverseDelete() {
		List<Object> expected = Arrays.asList(""bcd"", false);
		List<Object> actual = ReverseDelete.reverseDelete(""abcde"", ""ae"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testReverseDelete2() {
		List<Object> expected = Arrays.asList(""acdef"", false);
		List<Object> actual = ReverseDelete.reverseDelete(""abcdef"", ""b"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testReverseDelete3() {
		List<Object> expected = Arrays.asList(""cdedc"", true);
		List<Object> actual = ReverseDelete.reverseDelete(""abcdedcba"", ""ab"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testReverseDelete4() {
		List<Object> expected = Arrays.asList(""dik"", false);
		List<Object> actual = ReverseDelete.reverseDelete(""dwik"", ""w"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testReverseDelete5() {
		List<Object> expected = Arrays.asList("""", true);
		List<Object> actual = ReverseDelete.reverseDelete(""a"", ""a"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testReverseDelete6() {
		List<Object> expected = Arrays.asList(""abcdedcba"", true);
		List<Object> actual = ReverseDelete.reverseDelete(""abcdedcba"", """");
		assertEquals(expected, actual);
	}
	
	@Test
	void testReverseDelete7() {
		List<Object> expected = Arrays.asList(""abcdedcba"", true);
		List<Object> actual = ReverseDelete.reverseDelete(""abcdedcba"", ""v"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testReverseDelete8() {
		List<Object> expected = Arrays.asList(""abba"", true);
		List<Object> actual = ReverseDelete.reverseDelete(""vabba"", ""v"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testReverseDelete9() {
		List<Object> expected = Arrays.asList("""", true);
		List<Object> actual = ReverseDelete.reverseDelete(""mamma"", ""mia"");
		assertEquals(expected, actual);
	}
	
	@Test
	void testReverseDelete10() {
		List<Object> expected = Arrays.asList("""", true);
		List<Object> actual = ReverseDelete.reverseDelete("""", ""a"");
		assertEquals(expected, actual);
	}
}"
cmpl-6tTtFZgY1XStyQl8UrDGbj5pFCLpu,/HumanEvalJava/src/main/java/original/id_113.java,58.99807024002075,length,"// OddCount.java
package original;

import java.util.ArrayList;
import java.util.List;

class OddCount {

    /**
     * Given a list of strings, where each string consists of only digits, return a list.
     * Each element i of the output should be ""the number of odd elements in the
     * string i of the input."" where all the i's should be replaced by the number
     * of odd digits in the i'th string of the input.
     *
     * >>> oddCount(['1234567'])
     * [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
     * >>> oddCount(['3',""11111111""])
     * [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     * ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
     *
     * > oddCount([""1234567""])
     * [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
     * > oddCount([""3"", ""11111111""])
     * [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
     * > oddCount([""271"", ""137"", ""314""])
     * [""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""]
     */
    public static List<String> oddCount(List<String> lst) {
        List<String> result = new ArrayList<String>();
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.get(i).length(); j++) {
                if (Integer.parseInt(lst.get(i).substring(j, j + 1)) % 2 != 0) {
                    count++;
                }
            }
            result.add(""the number of odd elements "" + count + ""n the str"" + count + ""ng "" + count + "" of the "" + count + ""nput."");
        }
        return result;
    }
}
","// OddCountTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OddCount}.
* It contains ten unit test cases for the {@link OddCount#oddCount(List)} method.
*/
class OddCountTest {","// OddCountTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OddCount}.
* It contains ten unit test cases for the {@link OddCount#oddCount(List)} method.
*/
class OddCountTest {

	/**
	* Test case for {@link OddCount#oddCount(List)} method.
	* It tests the method with a list of one string.
	*/
	@Test
	void testOddCount_1() {
		List<String> lst = new ArrayList<String>();
		lst.add(""1234567"");
		List<String> expected = new ArrayList<String>();
		expected.add(""the number of odd elements 4n the str4ng 4 of the 4nput."");
		assertEquals(expected, OddCount.oddCount(lst));
	}
	
	/**
	* Test case for {@link OddCount#oddCount(List)} method.
	* It tests the method with a list of two strings.
	*/
	@Test
	void testOddCount_2() {
		List<String> lst = new ArrayList<String>();
		lst.add(""3"");
		lst.add(""11111111"");
		List<String> expected = new ArrayList<String>();
		expected.add(""the number of odd elements 1n the str1ng 1 of the 1nput."");
		expected.add(""the number of odd elements 8n the str8ng 8 of the 8nput."");
		assertEquals(expected, OddCount.oddCount(lst));
	}
	
	/**
	* Test case for {@link OddCount#oddCount(List)} method.
	* It tests the method with a list of three strings.
	*/
	@Test
	void testOddCount_3() {
		List<String> lst = new ArrayList<String>();
		lst.add(""271"");
		lst.add(""137"");
		lst.add(""314"");
		List<String> expected = new ArrayList<String>();
		expected.add(""the number of odd elements 2n the str2ng 2 of the 2nput."");
		expected.add(""the number of odd elements 3n the str3ng 3 of the 3nput."");
		expected.add(""the number of odd elements 2n the str2ng 2 of the 2nput."");
		assertEquals(expected, OddCount.oddCount(lst));
	}
	
	/**
	* Test case for {@link OddCount#oddCount(List)} method.
	* It tests the method with a list of four strings.
	*/
	@Test
	void testOddCount_4() {
		List<String> lst = new ArrayList<String>();
		lst.add(""1234567"");
		lst.add(""3"");
		lst.add(""11111111"");
		lst.add(""271"");
		List<String> expected = new ArrayList<String>();
		expected.add(""the number of odd elements 4n the str4ng 4 of the 4nput."");
		expected.add(""the number of odd elements 1n the str1ng 1 of the 1nput."");
		expected.add(""the number of odd elements 8n the str8ng 8 of the 8nput."");
		expected.add(""the number of odd elements 2n the str2ng 2 of the 2nput."");
		assertEquals(expected, OddCount.oddCount(lst));
	}
	
	/**
	* Test case for {@link OddCount#oddCount(List)} method.
	* It tests the method with a list of five strings.
	*/
	@Test
	void testOddCount_5() {
		List<String> lst = new ArrayList<String>();
		lst.add(""1234567"");
		lst.add(""3"");
		lst.add(""11111111"");
		lst.add(""271"");
		lst.add(""137"");
		List<String> expected = new ArrayList<String>();
		expected.add(""the number of odd elements 4n the str4ng 4 of the 4nput."");
		expected.add(""the number of odd elements 1n the str1ng 1 of the 1nput."");
		expected.add(""the number of odd elements 8n the str8ng 8 of the 8nput."");
		expected.add(""the number of odd elements 2n the str2ng 2 of the 2nput."");
		expected.add(""the number of odd elements 3n the str3ng 3 of the 3nput."");
		assertEquals(expected, OddCount.oddCount(lst));
	}
	
	/**
	* Test case for {@link OddCount#oddCount(List)} method.
	* It tests the method with a list of six strings.
	*/
	@Test
	void testOddCount_6() {
		List<String> lst = new ArrayList<String>();
		lst.add(""1234567"");
		lst.add(""3"");
		lst.add(""11111111"");
		lst.add(""271"");
		lst.add(""137"");
		lst.add(""314"");
		List<String> expected = new ArrayList<String>();
		expected.add(""the number of odd elements 4n the str4ng 4 of the 4nput."");
		expected.add(""the number of odd elements 1n the str1ng 1 of the 1nput."");
		expected.add(""the number of odd elements 8n the str8ng 8 of the 8nput."");
		expected.add(""the number of odd elements 2n the str2ng 2 of the 2nput."");
		expected.add(""the number of odd elements 3n the str3ng 3 of the 3nput."");
		expected.add(""the number of odd elements 2n the str2ng 2 of the 2nput."");
		assertEquals(expected, OddCount.oddCount(lst));
	}
	
	/**
	* Test case for {@link OddCount#oddCount(List)} method.
	* It tests the method with a list of seven strings.
	*/
	@Test
	void testOddCount_7() {
		List<String> lst = new ArrayList<String>();
		lst.add(""1234567"");
		lst.add(""3"");
		lst.add(""11111111"");
		lst.add(""271"");
		lst.add(""137"");
		lst.add(""314"");
		lst.add(""1234567"");
		List<String> expected = new ArrayList<String>();
		expected.add(""the number of odd elements 4n the str4ng 4 of the 4nput."");
		expected.add(""the number of odd elements 1n the str1ng 1 of the 1nput."");
		expected.add(""the number of odd elements 8n the str8ng 8 of the 8nput."");
		expected.add(""the number of odd elements 2n the str2ng 2 of the 2nput."");
		expected.add(""the number of odd elements 3n the str3ng 3 of the 3nput."");
		expected.add(""the number of odd elements 2n the str2ng 2 of the 2nput."");
		expected.add(""the number of odd elements 4n the str4ng 4 of the 4nput."");
		assertEquals(expected, OddCount.oddCount(lst));
	}
	
	/**
	* Test case for {@link OddCount#oddCount(List)} method.
	* It tests the method with a list of eight strings.
	*/
	@Test
	void testOddCount_8() {
		List<String> lst = new ArrayList<String>();
		lst.add(""1234567"");
		lst.add(""3"");
		lst.add(""11111111"");
		lst.add(""271"");
		lst.add(""137"");
		lst.add(""314"");
		lst.add(""1234567"");
		lst.add(""3"");
		List<String> expected = new ArrayList<String>();
		expected.add(""the number of odd elements 4n the str4ng 4 of the 4nput."");
		expected.add("""
cmpl-6tTuIl4CM2qRh6zZF2cLADcAT1zLk,/HumanEvalJava/src/main/java/original/id_114.java,50.48373985290527,length,"// Minsubarraysum.java
package original;

import java.util.List;

class Minsubarraysum {

    /**
     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array
     * of nums.
     * Example
     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
     * minSubArraySum([-1, -2, -3]) == -6
     *
     * > minsubarraysum([2, 3, 4, 1, 2, 4])
     * 1
     * > minsubarraysum([-1, -2, -3])
     * -6
     * > minsubarraysum([-1, -2, -3, 2, -10])
     * -14
     * > minsubarraysum([-9999999999999999L])
     * -9999999999999999L
     * > minsubarraysum([0, 10, 20, 1000000])
     * 0
     * > minsubarraysum([-1, -2, -3, 10, -5])
     * -6
     * > minsubarraysum([100, -1, -2, -3, 10, -5])
     * -6
     * > minsubarraysum([10, 11, 13, 8, 3, 4])
     * 3
     * > minsubarraysum([100, -33, 32, -1, 0, -2])
     * -33
     * > minsubarraysum([-10])
     * -10
     * > minsubarraysum([7])
     * 7
     * > minsubarraysum([1, -1])
     * -1
     */
    public static long minsubarraysum(List<Object> nums) {
        long s = 0;
        long max_sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            long num = ((Number) nums.get(i)).longValue();
            s -= num;
            if (s < 0) {
                s = 0;
            }
            max_sum = Math.max(s, max_sum);
        }
        if (max_sum == 0) {
            max_sum = -((Number) nums.get(0)).longValue();
            for (int i = 0; i < nums.size(); i++) {
                max_sum = Math.max(-((Number) nums.get(i)).longValue(), max_sum);
            }
        }
        long min_sum = -max_sum;
        return min_sum;
    }
}
","// MinsubarraysumTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Minsubarraysum}.
* It contains ten unit test cases for the {@link Minsubarraysum#minsubarraysum(List)} method.
*/
class MinsubarraysumTest {","// MinsubarraysumTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Minsubarraysum}.
* It contains ten unit test cases for the {@link Minsubarraysum#minsubarraysum(List)} method.
*/
class MinsubarraysumTest {

	@Test
	void testMinsubarraysum() {
		assertEquals(1, Minsubarraysum.minsubarraysum(List.of(2, 3, 4, 1, 2, 4)));
		assertEquals(-6, Minsubarraysum.minsubarraysum(List.of(-1, -2, -3)));
		assertEquals(-14, Minsubarraysum.minsubarraysum(List.of(-1, -2, -3, 2, -10)));
		assertEquals(-9999999999999999L, Minsubarraysum.minsubarraysum(List.of(-9999999999999999L)));
		assertEquals(0, Minsubarraysum.minsubarraysum(List.of(0, 10, 20, 1000000)));
		assertEquals(-6, Minsubarraysum.minsubarraysum(List.of(-1, -2, -3, 10, -5)));
		assertEquals(-6, Minsubarraysum.minsubarraysum(List.of(100, -1, -2, -3, 10, -5)));
		assertEquals(3, Minsubarraysum.minsubarraysum(List.of(10, 11, 13, 8, 3, 4)));
		assertEquals(-33, Minsubarraysum.minsubarraysum(List.of(100, -33, 32, -1, 0, -2)));
		assertEquals(-10, Minsubarraysum.minsubarraysum(List.of(-10)));
		assertEquals(7, Minsubarraysum.minsubarraysum(List.of(7)));
		assertEquals(-1, Minsubarraysum.minsubarraysum(List.of(1, -1)));
	}
}

// Minsubarraysum.java
package refactored;

import java.util.List;

class Minsubarraysum {

    /**
     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array
     * of nums.
     * Example
     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
     * minSubArraySum([-1, -2, -3]) == -6
     *
     * > minsubarraysum([2, 3, 4, 1, 2, 4])
     * 1
     * > minsubarraysum([-1, -2, -3])
     * -6
     * > minsubarraysum([-1, -2, -3, 2, -10])
     * -14
     * > minsubarraysum([-9999999999999999L])
     * -9999999999999999L
     * > minsubarraysum([0, 10, 20, 1000000])
     * 0
     * > minsubarraysum([-1, -2, -3, 10, -5])
     * -6
     * > minsubarraysum([100, -1, -2, -3, 10, -5])
     * -6
     * > minsubarraysum([10, 11, 13, 8, 3, 4])
     * 3
     * > minsubarraysum([100, -33, 32, -1, 0, -2])
     * -33
     * > minsubarraysum([-10])
     * -10
     * > minsubarraysum([7])
     * 7
     * > minsubarraysum([1, -1])
     * -1
     */
    public static long minsubarraysum(List<Object> nums) {
        long s = 0;
        long max_sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            long num = ((Number) nums.get(i)).longValue();
            s -= num;
            if (s < 0) {
                s = 0;
            }
            max_sum = Math.max(s, max_sum);
        }
        if (max_sum == 0) {
            max_sum = -((Number) nums.get(0)).longValue();
            for (int i = 0; i < nums.size(); i++) {
                max_sum = Math.max(-((Number) nums.get(i)).longValue(), max_sum);
            }
        }
        long min_sum = -max_sum;
        return min_sum;
    }
}

// MinsubarraysumTest.java
package refactored;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Minsubarraysum}.
* It contains ten unit test cases for the {@link Minsubarraysum#minsubarraysum(List)} method.
*/
class MinsubarraysumTest {
		
	@Test
	void testMinsubarraysum() {
		assertEquals(1, Minsubarraysum.minsubarraysum(List.of(2, 3, 4, 1, 2, 4)));
		assertEquals(-6, Minsubarraysum.minsubarraysum(List.of(-1, -2, -3)));
		assertEquals(-14, Minsubarraysum.minsubarraysum(List.of(-1, -2, -3, 2, -10)));
		assertEquals(-9999999999999999L, Minsubarraysum.minsubarraysum(List.of(-9999999999999999L)));
		assertEquals(0, Minsubarraysum.minsubarraysum(List.of(0, 10, 20, 1000000)));
		assertEquals(-6, Minsubarraysum.minsubarraysum(List.of(-1, -2, -3, 10, -5)));
		assertEquals(-6, Minsubarraysum.minsubarraysum(List.of(100, -1, -2, -3, 10, -5)));
		assertEquals(3, Minsubarraysum.minsubarraysum(List.of(10, 11, 13, 8, 3, 4)));
		assertEquals(-33, Minsubarraysum.minsubarraysum(List.of(100, -33, 32, -1, 0, -2)));
		assertEquals(-10, Minsubarraysum.minsubarraysum(List.of(-10)));
		assertEquals(7, Minsubarraysum.minsubarraysum(List.of(7)));
		assertEquals(-1, Minsubarraysum.minsubarraysum(List.of(1, -1)));
	}
}

// Minsubarraysum.java
package refactored;

import java.util.List;

class Minsubarraysum {

    /**
     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array
     * of nums.
     * Example
     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
     * minSubArraySum([-1, -2, -3]) == -6
     *
     * > minsubarraysum([2, 3, 4, 1, 2, 4])
     * 1
     * > minsubarraysum([-1, -2, -3])
     * -6
     * > minsubarraysum([-1, -2, -3, 2, -10])
     * -14
     * > minsubarraysum([-9999999999999999L])
     * -9999999999999999L
     * > minsubarraysum([0, 10, 20, 1000000])
     * 0
     * > minsubarraysum([-1, -2, -3, 10, -5])
     * -6
     * > minsubarraysum([100, -1, -2, -3, 10, -5])
     * -6
     * > min"
cmpl-6tTvLDR2C5tYpvKyb8Z7ogw0iwSJp,/HumanEvalJava/src/main/java/original/id_115.java,18.768312454223633,stop,"// MaxFill.java
package original;

import java.util.List;

class MaxFill {

    /**
     * * You are given a rectangular grid of wells. Each row represents a single well,
     * and each 1 in a row represents a single unit of water.
     * Each well has a corresponding bucket that can be used to extract water from it,
     * and all buckets have the same capacity.
     * Your task is to use the buckets to empty the wells.
     * Output the number of times you need to lower the buckets.
     *
     * Example 1:
     * Input:
     * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
     * bucket_capacity : 1
     * Output: 6
     *
     * Example 2:
     * Input:
     * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
     * bucket_capacity : 2
     * Output: 5
     *
     * Example 3:
     * Input:
     * grid : [[0,0,0], [0,0,0]]
     * bucket_capacity : 5
     * Output: 0
     *
     * Constraints:
     * * all wells have the same length
     * * 1 <= grid.length <= 10^2
     * * 1 <= grid[:,1].length <= 10^2
     * * grid[i][j] -> 0 | 1
     * * 1 <= capacity <= 10
     *
     * > maxFill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)
     * 6
     * > maxFill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)
     * 5
     * > maxFill([[0, 0, 0], [0, 0, 0]], 5)
     * 0
     * > maxFill([[1, 1, 1, 1], [1, 1, 1, 1]], 2)
     * 4
     * > maxFill([[1, 1, 1, 1], [1, 1, 1, 1]], 9)
     * 2
     */
    public static int maxFill(List<List<Integer>> grid, int capacity) {
        int sum = 0;
        for (List<Integer> arr : grid) {
            int sumArr = 0;
            for (Integer i : arr) {
                sumArr += i;
            }
            sum += Math.ceil((double) sumArr / capacity);
        }
        return sum;
    }
}
","// MaxFillTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxFill}.
* It contains ten unit test cases for the {@link MaxFill#maxFill(List, int)} method.
*/
class MaxFillTest {","// MaxFillTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxFill}.
* It contains ten unit test cases for the {@link MaxFill#maxFill(List, int)} method.
*/
class MaxFillTest {

	@Test
	void testMaxFill() {
		List<List<Integer>> grid = List.of(List.of(0, 0, 1, 0), List.of(0, 1, 0, 0), List.of(1, 1, 1, 1));
		assertEquals(6, MaxFill.maxFill(grid, 1));
		
		grid = List.of(List.of(0, 0, 1, 1), List.of(0, 0, 0, 0), List.of(1, 1, 1, 1), List.of(0, 1, 1, 1));
		assertEquals(5, MaxFill.maxFill(grid, 2));
		
		grid = List.of(List.of(0, 0, 0), List.of(0, 0, 0));
		assertEquals(0, MaxFill.maxFill(grid, 5));
		
		grid = List.of(List.of(1, 1, 1, 1), List.of(1, 1, 1, 1));
		assertEquals(4, MaxFill.maxFill(grid, 2));
		
		grid = List.of(List.of(1, 1, 1, 1), List.of(1, 1, 1, 1));
		assertEquals(2, MaxFill.maxFill(grid, 9));
		
		grid = List.of(List.of(0, 0, 0, 0), List.of(0, 0, 0, 0), List.of(0, 0, 0, 0), List.of(0, 0, 0, 0));
		assertEquals(0, MaxFill.maxFill(grid, 1));
		
		grid = List.of(List.of(0, 0, 0, 0), List.of(0, 0, 0, 0), List.of(0, 0, 0, 0), List.of(0, 0, 0, 0));
		assertEquals(0, MaxFill.maxFill(grid, 2));
		
		grid = List.of(List.of(0, 0, 0, 0), List.of(0, 0, 0, 0), List.of(0, 0, 0, 0), List.of(0, 0, 0, 0));
		assertEquals(0, MaxFill.maxFill(grid, 3));
		
		grid = List.of(List.of(0, 0, 0, 0), List.of(0, 0, 0, 0), List.of(0, 0, 0, 0), List.of(0, 0, 0, 0));
		assertEquals(0, MaxFill.maxFill(grid, 4));
		
		grid = List.of(List.of(0, 0, 0, 0), List.of(0, 0, 0, 0), List.of(0, 0, 0, 0), List.of(0, 0, 0, 0));
		assertEquals(0, MaxFill.maxFill(grid, 5));
	}
}"
cmpl-6tTwOAD66hRWBFCxwszZ6T1zpuvnp,/HumanEvalJava/src/main/java/original/id_116.java,47.84584355354309,,"// SortArray.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class SortArray {

    /**
     * * In this Kata, you have to sort an array of non-negative integers according to
     * number of ones in their binary representation in ascending order.
     * For similar number of ones, sort based on decimal value.
     *
     * It must be implemented like this:
     * >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
     * >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
     *
     * > sortArray([1, 5, 2, 3, 4])
     * [1, 2, 4, 3, 5]
     * > sortArray([1, 0, 2, 3, 4])
     * [0, 1, 2, 4, 3]
     * > sortArray([])
     * []
     * > sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])
     * [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
     * > sortArray([3, 6, 44, 12, 32, 5])
     * [32, 3, 5, 6, 12, 44]
     * > sortArray([2, 4, 8, 16, 32])
     * [2, 4, 8, 16, 32]
     * > sortArray([2, 4, 8, 16, 32])
     * [2, 4, 8, 16, 32]
     */
    public static List<Object> sortArray(List<Object> arr) {
        List<Object> sorted = new ArrayList<Object>();
        for (int i = 0; i < arr.size(); i++) {
            int num = ((Number) arr.get(i)).intValue();
            int ones = 0;
            while (num > 0) {
                ones += num % 2;
                num /= 2;
            }
            sorted.add(new int[] { ones, ((Number) arr.get(i)).intValue() });
        }
        Collections.sort(sorted, new Comparator<Object>() {

            public int compare(Object o1, Object o2) {
                int[] a1 = (int[]) o1;
                int[] a2 = (int[]) o2;
                if (a1[0] == a2[0]) {
                    return a1[1] - a2[1];
                }
                return a1[0] - a2[0];
            }
        });
        List<Object> result = new ArrayList<Object>();
        for (int i = 0; i < sorted.size(); i++) {
            result.add(((int[]) sorted.get(i))[1]);
        }
        return result;
    }
}
","// SortArrayTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortArray}.
* It contains ten unit test cases for the {@link SortArray#sortArray(List)} method.
*/
class SortArrayTest {","// SortArrayTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortArray}.
* It contains ten unit test cases for the {@link SortArray#sortArray(List)} method.
*/
class SortArrayTest {

	@Test
	void testSortArray() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(1);
		arr.add(5);
		arr.add(2);
		arr.add(3);
		arr.add(4);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		expected.add(5);
		assertEquals(expected, SortArray.sortArray(arr));
	}
	
	@Test
	void testSortArray2() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(1);
		arr.add(0);
		arr.add(2);
		arr.add(3);
		arr.add(4);
		List<Object> expected = new ArrayList<Object>();
		expected.add(0);
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		assertEquals(expected, SortArray.sortArray(arr));
	}
	
	@Test
	void testSortArray3() {
		List<Object> arr = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, SortArray.sortArray(arr));
	}
	
	@Test
	void testSortArray4() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(2);
		arr.add(5);
		arr.add(77);
		arr.add(4);
		arr.add(5);
		arr.add(3);
		arr.add(5);
		arr.add(7);
		arr.add(2);
		arr.add(3);
		arr.add(4);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(2);
		expected.add(4);
		expected.add(4);
		expected.add(3);
		expected.add(3);
		expected.add(5);
		expected.add(5);
		expected.add(5);
		expected.add(7);
		expected.add(77);
		assertEquals(expected, SortArray.sortArray(arr));
	}
	
	@Test
	void testSortArray5() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(3);
		arr.add(6);
		arr.add(44);
		arr.add(12);
		arr.add(32);
		arr.add(5);
		List<Object> expected = new ArrayList<Object>();
		expected.add(32);
		expected.add(3);
		expected.add(5);
		expected.add(6);
		expected.add(12);
		expected.add(44);
		assertEquals(expected, SortArray.sortArray(arr));
	}
	
	@Test
	void testSortArray6() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(2);
		arr.add(4);
		arr.add(8);
		arr.add(16);
		arr.add(32);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(4);
		expected.add(8);
		expected.add(16);
		expected.add(32);
		assertEquals(expected, SortArray.sortArray(arr));
	}
	
	@Test
	void testSortArray7() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(2);
		arr.add(4);
		arr.add(8);
		arr.add(16);
		arr.add(32);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(4);
		expected.add(8);
		expected.add(16);
		expected.add(32);
		assertEquals(expected, SortArray.sortArray(arr));
	}
	
	@Test
	void testSortArray8() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(2);
		arr.add(4);
		arr.add(8);
		arr.add(16);
		arr.add(32);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(4);
		expected.add(8);
		expected.add(16);
		expected.add(32);
		assertEquals(expected, SortArray.sortArray(arr));
	}
	
	@Test
	void testSortArray9() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(2);
		arr.add(4);
		arr.add(8);
		arr.add(16);
		arr.add(32);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(4);
		expected.add(8);
		expected.add(16);
		expected.add(32);
		assertEquals(expected, SortArray.sortArray(arr));
	}
	
	@Test
	void testSortArray10() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(2);
		arr.add(4);
		arr.add(8);
		arr.add(16);
		arr.add(32);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(4);
		expected.add(8);
		expected.add(16);
		expected.add(32);
		assertEquals(expected, SortArray.sortArray(arr));
	}
}"
cmpl-6tTxRA7jNdUv3HZ6bwIiShuhUck55,/HumanEvalJava/src/main/java/original/id_117.java,28.275729417800903,stop,"// SelectWords.java
package original;

import java.util.ArrayList;
import java.util.List;

class SelectWords {

    /**
     * Given a string s and a natural number n, you have been tasked to implement
     * a function that returns a list of all words from string s that contain exactly
     * n consonants, in order these words appear in the string s.
     * If the string s is empty then the function should return an empty list.
     * Note: you may assume the input string contains only letters and spaces.
     * Examples:
     * selectWords(""Mary had a little lamb"", 4) ==> [""little""]
     * selectWords(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
     * selectWords(""simple white space"", 2) ==> []
     * selectWords(""Hello world"", 4) ==> [""world""]
     * selectWords(""Uncle sam"", 3) ==> [""Uncle""]
     *
     * > selectWords(""Mary had a little lamb"", 4)
     * [""little""]
     * > selectWords(""Mary had a little lamb"", 3)
     * [""Mary"", ""lamb""]
     * > selectWords(""simple white space"", 2)
     * []
     * > selectWords(""Hello world"", 4)
     * [""world""]
     * > selectWords(""Uncle sam"", 3)
     * [""Uncle""]
     * > selectWords("""", 4)
     * []
     * > selectWords(""a b c d e f"", 1)
     * [""b"", ""c"", ""d"", ""f""]
     */
    public static List<Object> selectWords(String s, int n) {
        List<Object> result = new ArrayList<>();
        String[] words = s.split("" "");
        for (String word : words) {
            int consonants = 0;
            for (int i = 0; i < word.length(); i++) {
                char c = word.charAt(i);
                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {
                    consonants++;
                }
            }
            if (consonants == n) {
                result.add(word);
            }
        }
        return result;
    }
}
","// SelectWordsTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SelectWords}.
* It contains ten unit test cases for the {@link SelectWords#selectWords(String, int)} method.
*/
class SelectWordsTest {","// SelectWordsTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SelectWords}.
* It contains ten unit test cases for the {@link SelectWords#selectWords(String, int)} method.
*/
class SelectWordsTest {

	@Test
	void testSelectWords1() {
		String s = ""Mary had a little lamb"";
		int n = 4;
		List<Object> expected = new ArrayList<>();
		expected.add(""little"");
		List<Object> actual = SelectWords.selectWords(s, n);
		assertEquals(expected, actual);
	}
	
	@Test
	void testSelectWords2() {
		String s = ""Mary had a little lamb"";
		int n = 3;
		List<Object> expected = new ArrayList<>();
		expected.add(""Mary"");
		expected.add(""lamb"");
		List<Object> actual = SelectWords.selectWords(s, n);
		assertEquals(expected, actual);
	}
	
	@Test
	void testSelectWords3() {
		String s = ""simple white space"";
		int n = 2;
		List<Object> expected = new ArrayList<>();
		List<Object> actual = SelectWords.selectWords(s, n);
		assertEquals(expected, actual);
	}
	
	@Test
	void testSelectWords4() {
		String s = ""Hello world"";
		int n = 4;
		List<Object> expected = new ArrayList<>();
		expected.add(""world"");
		List<Object> actual = SelectWords.selectWords(s, n);
		assertEquals(expected, actual);
	}
	
	@Test
	void testSelectWords5() {
		String s = ""Uncle sam"";
		int n = 3;
		List<Object> expected = new ArrayList<>();
		expected.add(""Uncle"");
		List<Object> actual = SelectWords.selectWords(s, n);
		assertEquals(expected, actual);
	}
	
	@Test
	void testSelectWords6() {
		String s = """";
		int n = 4;
		List<Object> expected = new ArrayList<>();
		List<Object> actual = SelectWords.selectWords(s, n);
		assertEquals(expected, actual);
	}
	
	@Test
	void testSelectWords7() {
		String s = ""a b c d e f"";
		int n = 1;
		List<Object> expected = new ArrayList<>();
		expected.add(""b"");
		expected.add(""c"");
		expected.add(""d"");
		expected.add(""f"");
		List<Object> actual = SelectWords.selectWords(s, n);
		assertEquals(expected, actual);
	}
	
	@Test
	void testSelectWords8() {
		String s = ""a b c d e f"";
		int n = 0;
		List<Object> expected = new ArrayList<>();
		expected.add(""a"");
		expected.add(""e"");
		List<Object> actual = SelectWords.selectWords(s, n);
		assertEquals(expected, actual);
	}
	
	@Test
	void testSelectWords9() {
		String s = ""a b c d e f"";
		int n = 2;
		List<Object> expected = new ArrayList<>();
		expected.add(""c"");
		List<Object> actual = SelectWords.selectWords(s, n);
		assertEquals(expected, actual);
	}
	
	@Test
	void testSelectWords10() {
		String s = ""a b c d e f"";
		int n = 3;
		List<Object> expected = new ArrayList<>();
		List<Object> actual = SelectWords.selectWords(s, n);
		assertEquals(expected, actual);
	}
}"
cmpl-6tTyUuAuxePCEkerVmlAxyvaCBVPq,/HumanEvalJava/src/main/java/original/id_118.java,54.49499583244324,length,"// GetClosestVowel.java
package original;

class GetClosestVowel {

    /**
     * You are given a word. Your task is to find the closest vowel that stands between
     * two consonants from the right side of the word (case sensitive).
     *
     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't
     * find any vowel met the above condition.
     *
     * You may assume that the given string contains English letter only.
     *
     * Example:
     * getClosestVowel(""yogurt"") ==> ""u""
     * getClosestVowel(""FULL"") ==> ""U""
     * getClosestVowel(""quick"") ==> """"
     * getClosestVowel(""ab"") ==> """"
     *
     * > getClosestVowel(""yogurt"")
     * ""u""
     * > getClosestVowel(""full"")
     * ""u""
     * > getClosestVowel(""easy"")
     * """"
     * > getClosestVowel(""eAsy"")
     * """"
     * > getClosestVowel(""ali"")
     * """"
     * > getClosestVowel(""bad"")
     * ""a""
     * > getClosestVowel(""most"")
     * ""o""
     * > getClosestVowel(""ab"")
     * """"
     * > getClosestVowel(""ba"")
     * """"
     * > getClosestVowel(""quick"")
     * """"
     * > getClosestVowel(""anime"")
     * ""i""
     * > getClosestVowel(""Asia"")
     * """"
     * > getClosestVowel(""Above"")
     * ""o""
     */
    public static String getClosestVowel(String word) {
        String vowels = ""aeiouAEIOU"";
        int i = word.length() - 2;
        while (i > 0) {
            if (vowels.indexOf(word.charAt(i)) != -1) {
                if (vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {
                    return word.substring(i, i + 1);
                }
            }
            i--;
        }
        return """";
    }
}
","// GetClosestVowelTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetClosestVowel}.
* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.
*/
class GetClosestVowelTest {","// GetClosestVowelTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetClosestVowel}.
* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.
*/
class GetClosestVowelTest {

	@Test
	void testGetClosestVowel() {
		assertEquals(""u"", GetClosestVowel.getClosestVowel(""yogurt""));
		assertEquals(""u"", GetClosestVowel.getClosestVowel(""full""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""easy""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""eAsy""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""ali""));
		assertEquals(""a"", GetClosestVowel.getClosestVowel(""bad""));
		assertEquals(""o"", GetClosestVowel.getClosestVowel(""most""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""ab""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""ba""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""quick""));
		assertEquals(""i"", GetClosestVowel.getClosestVowel(""anime""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""Asia""));
		assertEquals(""o"", GetClosestVowel.getClosestVowel(""Above""));
	}
}

// GetClosestVowelTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetClosestVowel}.
* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.
*/
class GetClosestVowelTest {
		
	@Test
	void testGetClosestVowel() {
		assertEquals(""u"", GetClosestVowel.getClosestVowel(""yogurt""));
		assertEquals(""u"", GetClosestVowel.getClosestVowel(""full""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""easy""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""eAsy""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""ali""));
		assertEquals(""a"", GetClosestVowel.getClosestVowel(""bad""));
		assertEquals(""o"", GetClosestVowel.getClosestVowel(""most""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""ab""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""ba""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""quick""));
		assertEquals(""i"", GetClosestVowel.getClosestVowel(""anime""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""Asia""));
		assertEquals(""o"", GetClosestVowel.getClosestVowel(""Above""));
	}
}

// GetClosestVowelTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetClosestVowel}.
* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.
*/
class GetClosestVowelTest {
		
	@Test
	void testGetClosestVowel() {
		assertEquals(""u"", GetClosestVowel.getClosestVowel(""yogurt""));
		assertEquals(""u"", GetClosestVowel.getClosestVowel(""full""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""easy""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""eAsy""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""ali""));
		assertEquals(""a"", GetClosestVowel.getClosestVowel(""bad""));
		assertEquals(""o"", GetClosestVowel.getClosestVowel(""most""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""ab""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""ba""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""quick""));
		assertEquals(""i"", GetClosestVowel.getClosestVowel(""anime""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""Asia""));
		assertEquals(""o"", GetClosestVowel.getClosestVowel(""Above""));
	}
}

// GetClosestVowelTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetClosestVowel}.
* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.
*/
class GetClosestVowelTest {
		
	@Test
	void testGetClosestVowel() {
		assertEquals(""u"", GetClosestVowel.getClosestVowel(""yogurt""));
		assertEquals(""u"", GetClosestVowel.getClosestVowel(""full""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""easy""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""eAsy""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""ali""));
		assertEquals(""a"", GetClosestVowel.getClosestVowel(""bad""));
		assertEquals(""o"", GetClosestVowel.getClosestVowel(""most""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""ab""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""ba""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""quick""));
		assertEquals(""i"", GetClosestVowel.getClosestVowel(""anime""));
		assertEquals("""", GetClosestVowel.getClosestVowel(""Asia""));
		assertEquals(""o"", GetClosestVowel.getClosestVowel(""Above""));
	}
}

// GetClosestVowelTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetClosestVowel}.
* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.
*/
class GetClosest"
cmpl-6tTzXksYI9a08impfZ0vf74ngti38,/HumanEvalJava/src/main/java/original/id_119.java,51.53955388069153,length,"// MatchParens.java
package original;

import java.util.List;

class MatchParens {

    /**
     * * You are given a list of two strings, both strings consist of open
     * parentheses '(' or close parentheses ')' only.
     * Your job is to check if it is possible to concatenate the two strings in
     * some order, that the resulting string will be good.
     * A string S is considered to be good if and only if all parentheses in S
     * are balanced. For example: the string '(())()' is good, while the string
     * '())' is not.
     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
     *
     * Examples:
     * matchParens(['()(', ')']) == 'Yes'
     * matchParens([')', ')']) == 'No'
     *
     * > matchParens([""()("", "")""])
     * ""Yes""
     * > matchParens(["")"", "")""])
     * ""No""
     * > matchParens([""(()(())"", ""())())""])
     * ""No""
     * > matchParens(["")())"", ""(()()(""])
     * ""Yes""
     * > matchParens([""(())))"", ""(()())((""])
     * ""Yes""
     * > matchParens([""()"", ""())""])
     * ""No""
     * > matchParens([""(()("", ""()))()""])
     * ""Yes""
     * > matchParens([""(((("", ""((())""])
     * ""No""
     * > matchParens(["")(()"", ""(()(""])
     * ""No""
     * > matchParens(["")("", "")(""])
     * ""No""
     * > matchParens([""("", "")""])
     * ""Yes""
     * > matchParens(["")"", ""(""])
     * ""Yes""
     */
    public static String matchParens(List<String> lst) {
        String s1 = lst.get(0);
        String s2 = lst.get(1);
        String s1s2 = s1 + s2;
        String s2s1 = s2 + s1;
        int count = 0;
        boolean flag = true;
        for (int i = 0; i < s1s2.length(); i++) {
            if (s1s2.charAt(i) == '(') {
                count++;
            } else {
                count--;
            }
            if (count < 0) {
                flag = false;
            }
        }
        if (flag && count == 0) {
            return ""Yes"";
        }
        count = 0;
        for (int i = 0; i < s2s1.length(); i++) {
            if (s2s1.charAt(i) == '(') {
                count++;
            } else {
                count--;
            }
            if (count < 0) {
                return ""No"";
            }
        }
        if (count == 0) {
            return ""Yes"";
        } else {
            return ""No"";
        }
    }
}
","// MatchParensTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MatchParens}.
* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.
*/
class MatchParensTest {","// MatchParensTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MatchParens}.
* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.
*/
class MatchParensTest {

	@Test
	void testMatchParens() {
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""()("", "")"")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")"", "")"")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""(()(())"", ""())())"")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of("")())"", ""(()()("")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""(())))"", ""(()())(("")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""()"", ""())()"")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""(()("", ""()))()"")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""(((("", ""((())()"")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")(()"", ""(()("")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")("", "")("")));
	}
}

// MatchParensTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MatchParens}.
* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.
*/
class MatchParensTest {
		
	@Test
	void testMatchParens() {
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""()("", "")"")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")"", "")"")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""(()(())"", ""())())"")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of("")())"", ""(()()("")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""(())))"", ""(()())(("")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""()"", ""())()"")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""(()("", ""()))()"")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""(((("", ""((())()"")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")(()"", ""(()("")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")("", "")("")));
	}
}

// MatchParensTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MatchParens}.
* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.
*/
class MatchParensTest {
		
	@Test
	void testMatchParens() {
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""()("", "")"")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")"", "")"")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""(()(())"", ""())())"")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of("")())"", ""(()()("")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""(())))"", ""(()())(("")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""()"", ""())()"")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""(()("", ""()))()"")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""(((("", ""((())()"")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")(()"", ""(()("")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")("", "")("")));
	}
}

// MatchParensTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MatchParens}.
* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.
*/
class MatchParensTest {
		
	@Test
	void testMatchParens() {
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""()("", "")"")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")"", "")"")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""(()(())"", ""())())"")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of("")())"", ""(()()("")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""(())))"", ""(()())(("")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""()"", ""())()"")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""(()("", ""()))()"")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""(((("", ""((())()"")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")(()"", ""(()("")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")("", "")("")));
	}
}

// MatchParensTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MatchParens}.
* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.
*/
class MatchParensTest {
		
	@Test
	void testMatchParens() {
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""()("", "")"")));
		assertEquals(""No"", MatchParens.matchParens(List.of("")"", "")"")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""(()(())"", ""())())"")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of("")())"", ""(()()("")));
		assertEquals(""Yes"", MatchParens.matchParens(List.of(""(())))"", ""(()())(("")));
		assertEquals(""No"", MatchParens.matchParens(List.of(""()"", ""())()"")));
		assertEquals(""Yes"", MatchParens"
cmpl-6tU0abitINC3RpSruyOPDYYsia9pT,/HumanEvalJava/src/main/java/original/id_12.java,26.488137006759644,stop,"// Longest.java
package original;

import java.util.List;

class Longest {

    /**
     * Out of list of strings, return the longest one. Return the first one in case of multiple
     * strings of the same length. Return null in case the input list is empty.
     *
     * > longest([""a"", ""b"", ""c""])
     * ""a""
     * > longest([""a"", ""bb"", ""ccc""])
     * ""ccc""
     * > longest([])
     * null
     * > longest([""x"", ""y"", ""z""])
     * ""x""
     * > longest([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""])
     * ""zzzz""
     */
    public static String longest(List<Object> strings) {
        if (strings.size() == 0) {
            return null;
        }
        String longest = strings.get(0).toString();
        for (int i = 1; i < strings.size(); i++) {
            if (strings.get(i).toString().length() > longest.length()) {
                longest = strings.get(i).toString();
            }
        }
        return longest;
    }
}
","// LongestTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Longest}.
* It contains ten unit test cases for the {@link Longest#longest(List)} method.
*/
class LongestTest {","// LongestTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Longest}.
* It contains ten unit test cases for the {@link Longest#longest(List)} method.
*/
class LongestTest {

	@Test
	void testLongest_1() {
		List<Object> strings = List.of(""a"", ""b"", ""c"");
		assertEquals(""a"", Longest.longest(strings));
	}
	
	@Test
	void testLongest_2() {
		List<Object> strings = List.of(""a"", ""bb"", ""ccc"");
		assertEquals(""ccc"", Longest.longest(strings));
	}
	
	@Test
	void testLongest_3() {
		List<Object> strings = List.of();
		assertEquals(null, Longest.longest(strings));
	}
	
	@Test
	void testLongest_4() {
		List<Object> strings = List.of(""x"", ""y"", ""z"");
		assertEquals(""x"", Longest.longest(strings));
	}
	
	@Test
	void testLongest_5() {
		List<Object> strings = List.of(""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc"");
		assertEquals(""zzzz"", Longest.longest(strings));
	}
	
	@Test
	void testLongest_6() {
		List<Object> strings = List.of(""a"", ""bb"", ""ccc"", ""dddd"", ""eeeee"", ""ffffff"", ""ggggggg"", ""hhhhhhhh"", ""iiiiiiiii"", ""jjjjjjjjjj"");
		assertEquals(""jjjjjjjjjj"", Longest.longest(strings));
	}
	
	@Test
	void testLongest_7() {
		List<Object> strings = List.of(""a"", ""bb"", ""ccc"", ""dddd"", ""eeeee"", ""ffffff"", ""ggggggg"", ""hhhhhhhh"", ""iiiiiiiii"", ""jjjjjjjjjj"", ""kkkkkkkkkkk"");
		assertEquals(""kkkkkkkkkkk"", Longest.longest(strings));
	}
	
	@Test
	void testLongest_8() {
		List<Object> strings = List.of(""a"", ""bb"", ""ccc"", ""dddd"", ""eeeee"", ""ffffff"", ""ggggggg"", ""hhhhhhhh"", ""iiiiiiiii"", ""jjjjjjjjjj"", ""kkkkkkkkkkk"", ""llllllllllll"");
		assertEquals(""llllllllllll"", Longest.longest(strings));
	}
	
	@Test
	void testLongest_9() {
		List<Object> strings = List.of(""a"", ""bb"", ""ccc"", ""dddd"", ""eeeee"", ""ffffff"", ""ggggggg"", ""hhhhhhhh"", ""iiiiiiiii"", ""jjjjjjjjjj"", ""kkkkkkkkkkk"", ""llllllllllll"", ""mmmmmmmmmmmmmm"");
		assertEquals(""mmmmmmmmmmmmmm"", Longest.longest(strings));
	}
	
	@Test
	void testLongest_10() {
		List<Object> strings = List.of(""a"", ""bb"", ""ccc"", ""dddd"", ""eeeee"", ""ffffff"", ""ggggggg"", ""hhhhhhhh"", ""iiiiiiiii"", ""jjjjjjjjjj"", ""kkkkkkkkkkk"", ""llllllllllll"", ""mmmmmmmmmmmmmm"", ""nnnnnnnnnnnnnnn"");
		assertEquals(""nnnnnnnnnnnnnnn"", Longest.longest(strings));
	}
}"
cmpl-6tU1d405GMPXggjv8irlBoAqwFJ8S,/HumanEvalJava/src/main/java/original/id_120.java,29.290985107421875,stop,"// Maximum1.java
package original;

import java.util.*;

class Maximum1 {

    /**
     * * Given an array arr of integers and a positive integer k, return a sorted list
     * of length k with the maximum k numbers in arr.
     *
     * Example 1:
     *
     * Input: arr = [-3, -4, 5], k = 3
     * Output: [-4, -3, 5]
     *
     * Example 2:
     *
     * Input: arr = [4, -4, 4], k = 2
     * Output: [4, 4]
     *
     * Example 3:
     *
     * Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
     * Output: [2]
     *
     * Note:
     * 1. The length of the array will be in the range of [1, 1000].
     * 2. The elements in the array will be in the range of [-1000, 1000].
     * 3. 0 <= k <= len(arr)
     *
     * > maximum([-3, -4, 5], 3)
     * [-4, -3, 5]
     * > maximum([4, -4, 4], 2)
     * [4, 4]
     * > maximum([-3, 2, 1, 2, -1, -2, 1], 1)
     * [2]
     * > maximum([123, -123, 20, 0, 1, 2, -3], 3)
     * [2, 20, 123]
     * > maximum([-123, 20, 0, 1, 2, -3], 4)
     * [0, 1, 2, 20]
     * > maximum([5, 15, 0, 3, -13, -8, 0], 7)
     * [-13, -8, 0, 0, 3, 5, 15]
     * > maximum([-1, 0, 2, 5, 3, -10], 2)
     * [3, 5]
     * > maximum([1, 0, 5, -7], 1)
     * [5]
     * > maximum([4, -4], 2)
     * [-4, 4]
     * > maximum([-10, 10], 2)
     * [-10, 10]
     * > maximum([1, 2, 3, -23, 243, -400, 0], 0)
     * []
     */
    public static List<Object> maximum(List<Integer> arr, int k) {
        int n = arr.size();
        if (n == 0 || k == 0) {
            return new ArrayList<Object>();
        }
        if (n <= k) {
            Collections.sort(arr);
            return new ArrayList<Object>(arr);
        }
        List<Object> res = new ArrayList<Object>();
        PriorityQueue<Integer> heap = new PriorityQueue<Integer>(k);
        for (int i = 0; i < n; i++) {
            if (i < k) {
                heap.add(arr.get(i));
            } else {
                if (arr.get(i) > heap.peek()) {
                    heap.poll();
                    heap.add(arr.get(i));
                }
            }
        }
        for (int i = 0; i < k; i++) {
            res.add(heap.poll());
        }
        Collections.sort(res, new Comparator<Object>() {

            public int compare(Object o1, Object o2) {
                return (int) o1 - (int) o2;
            }
        });
        return res;
    }
}
","// Maximum1Test.java
package original;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Maximum1}.
* It contains ten unit test cases for the {@link Maximum1#maximum(List, int)} method.
*/
class Maximum1Test {","// Maximum1Test.java
package original;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Maximum1}.
* It contains ten unit test cases for the {@link Maximum1#maximum(List, int)} method.
*/
class Maximum1Test {

	@Test
	void testMaximum1() {
		List<Integer> arr = Arrays.asList(-3, -4, 5);
		List<Object> res = Maximum1.maximum(arr, 3);
		List<Object> expected = Arrays.asList(-4, -3, 5);
		assertEquals(expected, res);
	}
	
	@Test
	void testMaximum2() {
		List<Integer> arr = Arrays.asList(4, -4, 4);
		List<Object> res = Maximum1.maximum(arr, 2);
		List<Object> expected = Arrays.asList(4, 4);
		assertEquals(expected, res);
	}
	
	@Test
	void testMaximum3() {
		List<Integer> arr = Arrays.asList(-3, 2, 1, 2, -1, -2, 1);
		List<Object> res = Maximum1.maximum(arr, 1);
		List<Object> expected = Arrays.asList(2);
		assertEquals(expected, res);
	}
	
	@Test
	void testMaximum4() {
		List<Integer> arr = Arrays.asList(123, -123, 20, 0, 1, 2, -3);
		List<Object> res = Maximum1.maximum(arr, 3);
		List<Object> expected = Arrays.asList(2, 20, 123);
		assertEquals(expected, res);
	}
	
	@Test
	void testMaximum5() {
		List<Integer> arr = Arrays.asList(-123, 20, 0, 1, 2, -3);
		List<Object> res = Maximum1.maximum(arr, 4);
		List<Object> expected = Arrays.asList(0, 1, 2, 20);
		assertEquals(expected, res);
	}
	
	@Test
	void testMaximum6() {
		List<Integer> arr = Arrays.asList(5, 15, 0, 3, -13, -8, 0);
		List<Object> res = Maximum1.maximum(arr, 7);
		List<Object> expected = Arrays.asList(-13, -8, 0, 0, 3, 5, 15);
		assertEquals(expected, res);
	}
	
	@Test
	void testMaximum7() {
		List<Integer> arr = Arrays.asList(-1, 0, 2, 5, 3, -10);
		List<Object> res = Maximum1.maximum(arr, 2);
		List<Object> expected = Arrays.asList(3, 5);
		assertEquals(expected, res);
	}
	
	@Test
	void testMaximum8() {
		List<Integer> arr = Arrays.asList(1, 0, 5, -7);
		List<Object> res = Maximum1.maximum(arr, 1);
		List<Object> expected = Arrays.asList(5);
		assertEquals(expected, res);
	}
	
	@Test
	void testMaximum9() {
		List<Integer> arr = Arrays.asList(4, -4);
		List<Object> res = Maximum1.maximum(arr, 2);
		List<Object> expected = Arrays.asList(-4, 4);
		assertEquals(expected, res);
	}
	
	@Test
	void testMaximum10() {
		List<Integer> arr = Arrays.asList(-10, 10);
		List<Object> res = Maximum1.maximum(arr, 2);
		List<Object> expected = Arrays.asList(-10, 10);
		assertEquals(expected, res);
	}
}"
cmpl-6tU2gYrnooSWztLUVCXdZGU5TFeNz,/HumanEvalJava/src/main/java/original/id_121.java,7.7360453605651855,stop,"// Solution.java
package original;

import java.util.List;

class Solution {

    /**
     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
     *
     * Examples
     * solution([5, 8, 7, 1]) ==> 12
     * solution([3, 3, 3, 3, 3]) ==> 9
     * solution([30, 13, 24, 321]) ==>0
     *
     * > solution([3, 3, 3, 3, 3])
     * 9
     * > solution([30, 13, 24, 321])
     * 0
     * > solution([5, 9])
     * 5
     * > solution([2, 4, 8])
     * 0
     * > solution([30, 13, 23, 32])
     * 23
     * > solution([3, 13, 2, 9])
     * 3
     */
    public static int solution(List<Integer> lst) {
        int sum = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (i % 2 == 0 && lst.get(i) % 2 == 1) {
                sum += lst.get(i);
            }
        }
        return sum;
    }
}
","// SolutionTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solution}.
* It contains ten unit test cases for the {@link Solution#solution(List)} method.
*/
class SolutionTest {","// SolutionTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solution}.
* It contains ten unit test cases for the {@link Solution#solution(List)} method.
*/
class SolutionTest {

	@Test
	void testSolution() {
		assertEquals(12, Solution.solution(List.of(5, 8, 7, 1)));
		assertEquals(9, Solution.solution(List.of(3, 3, 3, 3, 3)));
		assertEquals(0, Solution.solution(List.of(30, 13, 24, 321)));
		assertEquals(5, Solution.solution(List.of(5, 9)));
		assertEquals(0, Solution.solution(List.of(2, 4, 8)));
		assertEquals(23, Solution.solution(List.of(30, 13, 23, 32)));
		assertEquals(3, Solution.solution(List.of(3, 13, 2, 9)));
		assertEquals(0, Solution.solution(List.of(2, 4, 6, 8)));
		assertEquals(0, Solution.solution(List.of(2, 4, 6, 8, 10)));
		assertEquals(0, Solution.solution(List.of(2, 4, 6, 8, 10, 12)));
	}
}"
cmpl-6tU3jsDqIw6adDWlYuaTjWcXYXb7v,/HumanEvalJava/src/main/java/original/id_122.java,62.64297437667847,length,"// AddElements.java
package original;

import java.util.List;

class AddElements {

    /**
     * * Given a non-empty array of integers arr and an integer k, return
     * the sum of the elements with at most two digits from the first k elements of arr.
     *
     * Example:
     *
     * Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
     * Output: 24 # sum of 21 + 3
     *
     * Constraints:
     * 1. 1 <= len(arr) <= 100
     * 2. 1 <= k <= len(arr)
     *
     * > addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3)
     * -4
     * > addElements([111, 121, 3, 4000, 5, 6], 2)
     * 0
     * > addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)
     * 125
     * > addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)
     * 24
     * > addElements([1], 1)
     * 1
     */
    public static int addElements(List<Integer> arr, int k) {
        int sum = 0;
        for (int i = 0; i < k; i++) {
            if (arr.get(i) < 100) {
                sum += arr.get(i);
            }
        }
        return sum;
    }
}
","// AddElementsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AddElements}.
* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.
*/
class AddElementsTest {","// AddElementsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AddElements}.
* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.
*/
class AddElementsTest {

	@Test
	void testAddElements() {
		assertEquals(-4, AddElements.addElements(List.of(1, -2, -3, 41, 57, 76, 87, 88, 99), 3));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), 2));
		assertEquals(125, AddElements.addElements(List.of(11, 21, 3, 90, 5, 6, 7, 8, 9), 4));
		assertEquals(24, AddElements.addElements(List.of(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4));
		assertEquals(1, AddElements.addElements(List.of(1), 1));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), 0));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -1));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -2));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -3));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -4));
	}
}

// AddElementsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AddElements}.
* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.
*/
class AddElementsTest {
		
	@Test
	void testAddElements() {
		assertEquals(-4, AddElements.addElements(List.of(1, -2, -3, 41, 57, 76, 87, 88, 99), 3));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), 2));
		assertEquals(125, AddElements.addElements(List.of(11, 21, 3, 90, 5, 6, 7, 8, 9), 4));
		assertEquals(24, AddElements.addElements(List.of(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4));
		assertEquals(1, AddElements.addElements(List.of(1), 1));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), 0));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -1));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -2));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -3));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -4));
	}
}

// AddElementsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AddElements}.
* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.
*/
class AddElementsTest {
		
	@Test
	void testAddElements() {
		assertEquals(-4, AddElements.addElements(List.of(1, -2, -3, 41, 57, 76, 87, 88, 99), 3));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), 2));
		assertEquals(125, AddElements.addElements(List.of(11, 21, 3, 90, 5, 6, 7, 8, 9), 4));
		assertEquals(24, AddElements.addElements(List.of(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4));
		assertEquals(1, AddElements.addElements(List.of(1), 1));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), 0));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -1));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -2));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -3));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -4));
	}
}

// AddElementsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AddElements}.
* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.
*/
class AddElementsTest {
		
	@Test
	void testAddElements() {
		assertEquals(-4, AddElements.addElements(List.of(1, -2, -3, 41, 57, 76, 87, 88, 99), 3));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), 2));
		assertEquals(125, AddElements.addElements(List.of(11, 21, 3, 90, 5, 6, 7, 8, 9), 4));
		assertEquals(24, AddElements.addElements(List.of(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4));
		assertEquals(1, AddElements.addElements(List.of(1), 1));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), 0));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -1));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -2));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -3));
		assertEquals(0, AddElements.addElements(List.of(111, 121, 3, 4000, 5, 6), -4));
	}
}

// AddElementsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AddElements}.
* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.
*/
class AddElementsTest {
		
	@Test
	void testAddElements() {
		assertEquals(-4, AddElements.addElements(List.of(1, -2, -"
cmpl-6tU4kwEtCYDgWsGC6Rg6Vs2FM3pvJ,/HumanEvalJava/src/main/java/original/id_123.java,67.99101257324219,length,"// GetOddCollatz.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class GetOddCollatz {

    /**
     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.
     *
     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
     * as follows: start with any positive integer n. Then each term is obtained from the
     * previous term as follows: if the previous term is even, the next term is one half of
     * the previous term. If the previous term is odd, the next term is 3 times the previous
     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.
     *
     * Note:
     * 1. Collatz(1) is [1].
     * 2. returned list sorted in increasing order.
     *
     * For example:
     * getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
     *
     * > getOddCollatz(14)
     * [1, 5, 7, 11, 13, 17]
     * > getOddCollatz(5)
     * [1, 5]
     * > getOddCollatz(12)
     * [1, 3, 5]
     * > getOddCollatz(1)
     * [1]
     */
    public static List<Integer> getOddCollatz(int n) {
        List<Integer> result = new ArrayList<Integer>();
        while (n != 1) {
            if (n % 2 == 1) {
                result.add(n);
            }
            if (n % 2 == 0) {
                n = n / 2;
            } else {
                n = 3 * n + 1;
            }
        }
        result.add(1);
        Collections.sort(result);
        return result;
    }
}
","// GetOddCollatzTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetOddCollatz}.
* It contains ten unit test cases for the {@link GetOddCollatz#getOddCollatz(int)} method.
*/
class GetOddCollatzTest {","// GetOddCollatzTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetOddCollatz}.
* It contains ten unit test cases for the {@link GetOddCollatz#getOddCollatz(int)} method.
*/
class GetOddCollatzTest {

	/**
	* Test case for {@link GetOddCollatz#getOddCollatz(int)} method.
	* It tests the method with a positive integer n.
	* The expected result is a sorted list that has the odd numbers in collatz sequence.
	*/
	@Test
	void testGetOddCollatz() {
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(1);
		expected.add(5);
		expected.add(7);
		expected.add(11);
		expected.add(13);
		expected.add(17);
		List<Integer> actual = GetOddCollatz.getOddCollatz(14);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetOddCollatz#getOddCollatz(int)} method.
	* It tests the method with a positive integer n.
	* The expected result is a sorted list that has the odd numbers in collatz sequence.
	*/
	@Test
	void testGetOddCollatz2() {
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(1);
		expected.add(5);
		List<Integer> actual = GetOddCollatz.getOddCollatz(5);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetOddCollatz#getOddCollatz(int)} method.
	* It tests the method with a positive integer n.
	* The expected result is a sorted list that has the odd numbers in collatz sequence.
	*/
	@Test
	void testGetOddCollatz3() {
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(1);
		expected.add(3);
		expected.add(5);
		List<Integer> actual = GetOddCollatz.getOddCollatz(12);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetOddCollatz#getOddCollatz(int)} method.
	* It tests the method with a positive integer n.
	* The expected result is a sorted list that has the odd numbers in collatz sequence.
	*/
	@Test
	void testGetOddCollatz4() {
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(1);
		List<Integer> actual = GetOddCollatz.getOddCollatz(1);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetOddCollatz#getOddCollatz(int)} method.
	* It tests the method with a positive integer n.
	* The expected result is a sorted list that has the odd numbers in collatz sequence.
	*/
	@Test
	void testGetOddCollatz5() {
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(1);
		expected.add(3);
		expected.add(5);
		expected.add(7);
		expected.add(9);
		expected.add(11);
		expected.add(13);
		expected.add(15);
		expected.add(17);
		expected.add(19);
		expected.add(21);
		expected.add(23);
		expected.add(25);
		expected.add(27);
		expected.add(29);
		expected.add(31);
		expected.add(33);
		expected.add(35);
		expected.add(37);
		expected.add(39);
		expected.add(41);
		expected.add(43);
		expected.add(45);
		expected.add(47);
		expected.add(49);
		expected.add(51);
		expected.add(53);
		expected.add(55);
		expected.add(57);
		expected.add(59);
		expected.add(61);
		expected.add(63);
		expected.add(65);
		expected.add(67);
		expected.add(69);
		expected.add(71);
		expected.add(73);
		expected.add(75);
		expected.add(77);
		expected.add(79);
		expected.add(81);
		expected.add(83);
		expected.add(85);
		expected.add(87);
		expected.add(89);
		expected.add(91);
		expected.add(93);
		expected.add(95);
		expected.add(97);
		expected.add(99);
		expected.add(101);
		expected.add(103);
		expected.add(105);
		expected.add(107);
		expected.add(109);
		expected.add(111);
		expected.add(113);
		expected.add(115);
		expected.add(117);
		expected.add(119);
		expected.add(121);
		expected.add(123);
		expected.add(125);
		expected.add(127);
		expected.add(129);
		expected.add(131);
		expected.add(133);
		expected.add(135);
		expected.add(137);
		expected.add(139);
		expected.add(141);
		expected.add(143);
		expected.add(145);
		expected.add(147);
		expected.add(149);
		expected.add(151);
		expected.add(153);
		expected.add(155);
		expected.add(157);
		expected.add(159);
		expected.add(161);
		expected.add(163);
		expected.add(165);
		expected.add(167);
		expected.add(169);
		expected.add(171);
		expected.add(173);
		expected.add(175);
		expected.add(177);
		expected.add(179);
		expected.add(181);
		expected.add(183);
		expected.add(185);
		expected.add(187);
		expected.add(189);
		expected.add(191);
		expected.add(193);
		expected.add(195);
		expected.add(197);
		expected.add(199);
		expected.add(201);
		expected.add(203);
		expected.add(205);
		expected.add(207);
		expected.add(209);
		expected.add(211);
		expected.add(213);
		expected.add(215);
		expected.add(217);
		expected.add(219);
		expected.add(221);
		expected.add(223);
		expected.add(225);
		expected.add(227);
		expected.add(229);
		expected.add(231);
		expected.add(233);
		expected.add(235);
		expected.add(237);
		expected.add(239);
		expected.add(241);
		expected.add(243);
		expected.add(245);
		expected.add(247);
		expected.add(249);
		expected.add(251);
		expected.add(253);
		expected.add(255);
		expected.add(257);
		expected.add(259);
		expected.add(261);
		expected.add(263);
		expected.add(265);
		expected.add(267);
		expected.add(269);
		expected.add(271);
		expected.add(273);
		expected.add(275);
		expected.add(277);
		expected.add"
cmpl-6tU5qIPNoD34VmFFrA8RJGL9Rwx0D,/HumanEvalJava/src/main/java/original/id_124.java,53.09444546699524,length,"// ValidDate.java
package original;

class ValidDate {

    /**
     * You have to write a function which validates a given date string and
     * returns True if the date is valid otherwise False.
     * The date is valid if all of the following rules are satisfied:
     * 1. The date string is not empty.
     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
     * 3. The months should not be less than 1 or higher than 12.
     * 4. The date should be in the format: mm-dd-yyyy
     *
     * for example:
     * validDate('03-11-2000') => True
     *
     * validDate('15-01-2012') => False
     *
     * validDate('04-0-2040') => False
     *
     * validDate('06-04-2020') => True
     *
     * validDate('06/04/2020') => False
     *
     * > validDate(""03-11-2000"")
     * true
     * > validDate(""15-01-2012"")
     * false
     * > validDate(""04-0-2040"")
     * false
     * > validDate(""06-04-2020"")
     * true
     * > validDate(""01-01-2007"")
     * true
     * > validDate(""03-32-2011"")
     * false
     * > validDate("""")
     * false
     * > validDate(""04-31-3000"")
     * false
     * > validDate(""06-06-2005"")
     * true
     * > validDate(""21-31-2000"")
     * false
     * > validDate(""04-12-2003"")
     * true
     * > validDate(""04122003"")
     * false
     * > validDate(""20030412"")
     * false
     * > validDate(""2003-04"")
     * false
     * > validDate(""2003-04-12"")
     * false
     * > validDate(""04-2003"")
     * false
     */
    public static Boolean validDate(String date) {
        if (date.length() != 10) {
            return false;
        }
        String[] dateArr = date.split(""-"");
        if (dateArr.length != 3) {
            return false;
        }
        int month = Integer.parseInt(dateArr[0]);
        int day = Integer.parseInt(dateArr[1]);
        int year = Integer.parseInt(dateArr[2]);
        if (month < 1 || month > 12) {
            return false;
        }
        if (month == 2) {
            if (day < 1 || day > 29) {
                return false;
            }
        } else if (month == 4 || month == 6 || month == 9 || month == 11) {
            if (day < 1 || day > 30) {
                return false;
            }
        } else {
            if (day < 1 || day > 31) {
                return false;
            }
        }
        return true;
    }
}
","// ValidDateTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ValidDate}.
* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.
*/
class ValidDateTest {","// ValidDateTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ValidDate}.
* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.
*/
class ValidDateTest {

		@Test
		void testValidDate() {
				assertTrue(ValidDate.validDate(""03-11-2000""));
				assertFalse(ValidDate.validDate(""15-01-2012""));
				assertFalse(ValidDate.validDate(""04-0-2040""));
				assertTrue(ValidDate.validDate(""06-04-2020""));
				assertFalse(ValidDate.validDate(""06/04/2020""));
				assertTrue(ValidDate.validDate(""01-01-2007""));
				assertFalse(ValidDate.validDate(""03-32-2011""));
				assertFalse(ValidDate.validDate(""""));
				assertFalse(ValidDate.validDate(""04-31-3000""));
				assertTrue(ValidDate.validDate(""06-06-2005""));
				assertFalse(ValidDate.validDate(""21-31-2000""));
				assertTrue(ValidDate.validDate(""04-12-2003""));
				assertFalse(ValidDate.validDate(""04122003""));
				assertFalse(ValidDate.validDate(""20030412""));
				assertFalse(ValidDate.validDate(""2003-04""));
				assertFalse(ValidDate.validDate(""2003-04-12""));
				assertFalse(ValidDate.validDate(""04-2003""));
		}
}

// ValidDateTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ValidDate}.
* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.
*/
class ValidDateTest {
		
		@Test
		void testValidDate() {
				assertTrue(ValidDate.validDate(""03-11-2000""));
				assertFalse(ValidDate.validDate(""15-01-2012""));
				assertFalse(ValidDate.validDate(""04-0-2040""));
				assertTrue(ValidDate.validDate(""06-04-2020""));
				assertFalse(ValidDate.validDate(""06/04/2020""));
				assertTrue(ValidDate.validDate(""01-01-2007""));
				assertFalse(ValidDate.validDate(""03-32-2011""));
				assertFalse(ValidDate.validDate(""""));
				assertFalse(ValidDate.validDate(""04-31-3000""));
				assertTrue(ValidDate.validDate(""06-06-2005""));
				assertFalse(ValidDate.validDate(""21-31-2000""));
				assertTrue(ValidDate.validDate(""04-12-2003""));
				assertFalse(ValidDate.validDate(""04122003""));
				assertFalse(ValidDate.validDate(""20030412""));
				assertFalse(ValidDate.validDate(""2003-04""));
				assertFalse(ValidDate.validDate(""2003-04-12""));
				assertFalse(ValidDate.validDate(""04-2003""));
		}
}

// ValidDateTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ValidDate}.
* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.
*/
class ValidDateTest {
		
		@Test
		void testValidDate() {
				assertTrue(ValidDate.validDate(""03-11-2000""));
				assertFalse(ValidDate.validDate(""15-01-2012""));
				assertFalse(ValidDate.validDate(""04-0-2040""));
				assertTrue(ValidDate.validDate(""06-04-2020""));
				assertFalse(ValidDate.validDate(""06/04/2020""));
				assertTrue(ValidDate.validDate(""01-01-2007""));
				assertFalse(ValidDate.validDate(""03-32-2011""));
				assertFalse(ValidDate.validDate(""""));
				assertFalse(ValidDate.validDate(""04-31-3000""));
				assertTrue(ValidDate.validDate(""06-06-2005""));
				assertFalse(ValidDate.validDate(""21-31-2000""));
				assertTrue(ValidDate.validDate(""04-12-2003""));
				assertFalse(ValidDate.validDate(""04122003""));
				assertFalse(ValidDate.validDate(""20030412""));
				assertFalse(ValidDate.validDate(""2003-04""));
				assertFalse(ValidDate.validDate(""2003-04-12""));
				assertFalse(ValidDate.validDate(""04-2003""));
		}
}

// ValidDateTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ValidDate}.
* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.
*/
class ValidDateTest {
		
		@Test
		void testValidDate() {
				assertTrue(ValidDate.validDate(""03-11-2000""));
				assertFalse(ValidDate.validDate(""15-01-2012""));
				assertFalse(ValidDate.validDate(""04-0-2040""));
				assertTrue(ValidDate.validDate(""06-04-2020""));
				assertFalse(ValidDate.validDate(""06/04/2020""));
				assertTrue(ValidDate.validDate(""01-01-2007""));
				assertFalse(ValidDate.validDate(""03-32-2011""));
				assertFalse(ValidDate.validDate(""""));
				assertFalse(ValidDate.validDate(""04-31-3000""));
				assertTrue(ValidDate.validDate(""06-06-2005""));
				assertFalse(ValidDate.validDate(""21-31-2000""));
				assertTrue(ValidDate.validDate(""04-12-2003""));
				assertFalse(ValidDate.validDate(""04122003""));
				assertFalse(ValidDate.validDate(""20030412""));
				assertFalse(ValidDate.validDate(""2003-04""));
				assertFalse(ValidDate.validDate(""2003-04-12""));
				assertFalse(ValidDate.validDate(""04-2003""));
		}
}

// ValidDateTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ValidDate}.
* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.
*/
class ValidDateTest {
		
		@Test
		void testValidDate() {
				assertTrue(ValidDate.validDate(""03-11-2000""));
				assertFalse(ValidDate.validDate(""15-01-2012""));
				assertFalse(ValidDate.validDate(""04-0-2040""));
				assertTrue(ValidDate.validDate(""06-04-2020""));
				assertFalse(ValidDate.validDate(""06/04/2020""));
				assertTrue(ValidDate.validDate(""01-01-2007""));
				assertFalse(ValidDate.validDate(""03-32-2011""));
				assert"
cmpl-6tU6tBP7CUwEfRY21PAPA1Uzirktl,/HumanEvalJava/src/main/java/original/id_125.java,27.371949672698975,stop,"// SplitWords.java
package original;

import java.util.Arrays;

class SplitWords {

    /**
     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
     * Examples
     * splitWords(""Hello world!"") ➞ [""Hello"", ""world!""]
     * splitWords(""Hello,world!"") ➞ [""Hello"", ""world!""]
     * splitWords(""abcdef"") == 3
     *
     * > splitWords(""Hello world!"")
     * [""Hello"", ""world!""]
     * > splitWords(""Hello,world!"")
     * [""Hello"", ""world!""]
     * > splitWords(""Hello world,!"")
     * [""Hello"", ""world,!""]
     * > splitWords(""Hello,Hello,world !"")
     * [""Hello,Hello,world"", ""!""]
     * > splitWords(""abcdef"")
     * 3
     * > splitWords(""aaabb"")
     * 2
     * > splitWords(""aaaBb"")
     * 1
     * > splitWords("""")
     * 0
     */
    public static Object splitWords(String txt) {
        if (txt.contains("" "")) {
            return Arrays.asList(txt.split("" ""));
        } else if (txt.contains("","")) {
            return Arrays.asList(txt.split("",""));
        } else {
            int count = 0;
            for (int i = 0; i < txt.length(); i++) {
                if (txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z' && (txt.charAt(i) - 'a') % 2 == 1) {
                    count++;
                }
            }
            return count;
        }
    }
}
","// SplitWordsTest.java
package original;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SplitWords}.
* It contains ten unit test cases for the {@link SplitWords#splitWords(String)} method.
*/
class SplitWordsTest {","// SplitWordsTest.java
package original;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SplitWords}.
* It contains ten unit test cases for the {@link SplitWords#splitWords(String)} method.
*/
class SplitWordsTest {

	@Test
	void testSplitWords() {
		assertEquals(Arrays.asList(""Hello"", ""world!""), SplitWords.splitWords(""Hello world!""));
		assertEquals(Arrays.asList(""Hello"", ""world!""), SplitWords.splitWords(""Hello,world!""));
		assertEquals(Arrays.asList(""Hello"", ""world,!""), SplitWords.splitWords(""Hello world,!""));
		assertEquals(Arrays.asList(""Hello,Hello,world"", ""!""), SplitWords.splitWords(""Hello,Hello,world !""));
		assertEquals(3, SplitWords.splitWords(""abcdef""));
		assertEquals(2, SplitWords.splitWords(""aaabb""));
		assertEquals(1, SplitWords.splitWords(""aaaBb""));
		assertEquals(0, SplitWords.splitWords(""""));
		assertEquals(Arrays.asList(""Hello"", ""world!""), SplitWords.splitWords(""Hello world!""));
		assertEquals(Arrays.asList(""Hello"", ""world!""), SplitWords.splitWords(""Hello,world!""));
	}
}

// SplitWordsTest.java
package refactored;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SplitWords}.
* It contains ten unit test cases for the {@link SplitWords#splitWords(String)} method.
*/
class SplitWordsTest {
		
	@Test
	void testSplitWords() {
		assertEquals(Arrays.asList(""Hello"", ""world!""), SplitWords.splitWords(""Hello world!""));
		assertEquals(Arrays.asList(""Hello"", ""world!""), SplitWords.splitWords(""Hello,world!""));
		assertEquals(Arrays.asList(""Hello"", ""world,!""), SplitWords.splitWords(""Hello world,!""));
		assertEquals(Arrays.asList(""Hello,Hello,world"", ""!""), SplitWords.splitWords(""Hello,Hello,world !""));
		assertEquals(3, SplitWords.splitWords(""abcdef""));
		assertEquals(2, SplitWords.splitWords(""aaabb""));
		assertEquals(1, SplitWords.splitWords(""aaaBb""));
		assertEquals(0, SplitWords.splitWords(""""));
		assertEquals(Arrays.asList(""Hello"", ""world!""), SplitWords.splitWords(""Hello world!""));
		assertEquals(Arrays.asList(""Hello"", ""world!""), SplitWords.splitWords(""Hello,world!""));
	}
}

// SplitWords.java
package refactored;

import java.util.Arrays;

class SplitWords {

    /**
     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
     * Examples
     * splitWords(""Hello world!"") ➞ [""Hello"", ""world!""]
     * splitWords(""Hello,world!"") ➞ [""Hello"", ""world!""]
     * splitWords(""abcdef"") == 3
     *
     * > splitWords(""Hello world!"")
     * [""Hello"", ""world!""]
     * > splitWords(""Hello,world!"")
     * [""Hello"", ""world!""]
     * > splitWords(""Hello world,!"")
     * [""Hello"", ""world,!""]
     * > splitWords(""Hello,Hello,world !"")
     * [""Hello,Hello,world"", ""!""]
     * > splitWords(""abcdef"")
     * 3
     * > splitWords(""aaabb"")
     * 2
     * > splitWords(""aaaBb"")
     * 1
     * > splitWords("""")
     * 0
     */
    public static Object splitWords(String txt) {
        if (txt.contains("" "")) {
            return Arrays.asList(txt.split("" ""));
        } else if (txt.contains("","")) {
            return Arrays.asList(txt.split("",""));
        } else {
            int count = 0;
            for (int i = 0; i < txt.length(); i++) {
                if (txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z' && (txt.charAt(i) - 'a') % 2 == 1) {
                    count++;
                }
            }
            return count;
        }
    }
}"
cmpl-6tU7wSiviTGriguCzaYbW7oHbyJAR,/HumanEvalJava/src/main/java/original/id_126.java,38.52924370765686,stop,"// IsSorted.java
package original;

import java.util.HashMap;
import java.util.List;

class IsSorted {

    /**
     * * Given a list of numbers, return whether or not they are sorted
     * in ascending order. If list has more than 1 duplicate of the same
     * number, return False. Assume no negative numbers and only integers.
     *
     * Examples
     * isSorted([5]) ➞ True
     * isSorted([1, 2, 3, 4, 5]) ➞ True
     * isSorted([1, 3, 2, 4, 5]) ➞ False
     * isSorted([1, 2, 3, 4, 5, 6]) ➞ True
     * isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
     * isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
     * isSorted([1, 2, 2, 3, 3, 4]) ➞ True
     * isSorted([1, 2, 2, 2, 3, 4]) ➞ False
     *
     * > isSorted([5])
     * true
     * > isSorted([1, 2, 3, 4, 5])
     * true
     * > isSorted([1, 3, 2, 4, 5])
     * false
     * > isSorted([1, 2, 3, 4, 5, 6])
     * true
     * > isSorted([1, 2, 3, 4, 5, 6, 7])
     * true
     * > isSorted([1, 3, 2, 4, 5, 6, 7])
     * false
     * > isSorted([])
     * true
     * > isSorted([1])
     * true
     * > isSorted([3, 2, 1])
     * false
     * > isSorted([1, 2, 2, 2, 3, 4])
     * false
     * > isSorted([1, 2, 3, 3, 3, 4])
     * false
     * > isSorted([1, 2, 2, 3, 3, 4])
     * true
     * > isSorted([1, 2, 3, 4])
     * true
     */
    public static Boolean isSorted(List<Object> lst) {
        if (lst.size() <= 1) {
            return true;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < lst.size() - 1; i++) {
            int curr = (int) lst.get(i);
            map.put(curr, map.getOrDefault(curr, 0) + 1);
            if (map.get(curr) > 2) {
                return false;
            }
        }
        int prev = (int) lst.get(0);
        for (int i = 1; i < lst.size(); i++) {
            int curr = (int) lst.get(i);
            if (curr < prev) {
                return false;
            }
            prev = curr;
        }
        return true;
    }
}
","// IsSortedTest.java
package original;

import java.util.HashMap;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSorted}.
* It contains ten unit test cases for the {@link IsSorted#isSorted(List)} method.
*/
class IsSortedTest {","// IsSortedTest.java
package original;

import java.util.HashMap;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSorted}.
* It contains ten unit test cases for the {@link IsSorted#isSorted(List)} method.
*/
class IsSortedTest {

	/**
	* Test case for {@link IsSorted#isSorted(List)} method.
	* It tests if the method returns true when the list is empty.
	*/
	@Test
	void testIsSorted_EmptyList() {
		List<Object> lst = List.of();
		assertTrue(IsSorted.isSorted(lst));
	}
	
	/**
	* Test case for {@link IsSorted#isSorted(List)} method.
	* It tests if the method returns true when the list has only one element.
	*/
	@Test
	void testIsSorted_OneElement() {
		List<Object> lst = List.of(1);
		assertTrue(IsSorted.isSorted(lst));
	}
	
	/**
	* Test case for {@link IsSorted#isSorted(List)} method.
	* It tests if the method returns true when the list is sorted in ascending order.
	*/
	@Test
	void testIsSorted_AscendingOrder() {
		List<Object> lst = List.of(1, 2, 3, 4, 5);
		assertTrue(IsSorted.isSorted(lst));
	}
	
	/**
	* Test case for {@link IsSorted#isSorted(List)} method.
	* It tests if the method returns false when the list is not sorted in ascending order.
	*/
	@Test
	void testIsSorted_NotAscendingOrder() {
		List<Object> lst = List.of(1, 3, 2, 4, 5);
		assertFalse(IsSorted.isSorted(lst));
	}
	
	/**
	* Test case for {@link IsSorted#isSorted(List)} method.
	* It tests if the method returns false when the list has more than one duplicate of the same number.
	*/
	@Test
	void testIsSorted_MoreThanOneDuplicate() {
		List<Object> lst = List.of(1, 2, 2, 2, 3, 4);
		assertFalse(IsSorted.isSorted(lst));
	}
	
	/**
	* Test case for {@link IsSorted#isSorted(List)} method.
	* It tests if the method returns true when the list has only one duplicate of the same number.
	*/
	@Test
	void testIsSorted_OneDuplicate() {
		List<Object> lst = List.of(1, 2, 2, 3, 3, 4);
		assertTrue(IsSorted.isSorted(lst));
	}
	
	/**
	* Test case for {@link IsSorted#isSorted(List)} method.
	* It tests if the method returns true when the list has no duplicate of the same number.
	*/
	@Test
	void testIsSorted_NoDuplicate() {
		List<Object> lst = List.of(1, 2, 3, 4);
		assertTrue(IsSorted.isSorted(lst));
	}
	
	/**
	* Test case for {@link IsSorted#isSorted(List)} method.
	* It tests if the method returns true when the list has more than one duplicate of the same number.
	*/
	@Test
	void testIsSorted_MoreThanOneDuplicate2() {
		List<Object> lst = List.of(1, 2, 3, 3, 3, 4);
		assertFalse(IsSorted.isSorted(lst));
	}
	
	/**
	* Test case for {@link IsSorted#isSorted(List)} method.
	* It tests if the method returns true when the list has more than one duplicate of the same number.
	*/
	@Test
	void testIsSorted_MoreThanOneDuplicate3() {
		List<Object> lst = List.of(1, 2, 2, 3, 3, 4);
		assertTrue(IsSorted.isSorted(lst));
	}
	
	/**
	* Test case for {@link IsSorted#isSorted(List)} method.
	* It tests if the method returns true when the list has more than one duplicate of the same number.
	*/
	@Test
	void testIsSorted_MoreThanOneDuplicate4() {
		List<Object> lst = List.of(1, 2, 2, 2, 3, 4);
		assertFalse(IsSorted.isSorted(lst));
	}
}"
cmpl-6tU8zzBXrScSCrbMsrsONjSudTnzL,/HumanEvalJava/src/main/java/original/id_127.java,55.60311675071716,length,"// Intersection.java
package original;

import java.util.List;

class Intersection {

    /**
     * You are given two intervals,
     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
     * The given intervals are closed which means that the interval (start, end)
     * includes both start and end.
     * For each given interval, it is assumed that its start is less or equal its end.
     * Your task is to determine whether the length of intersection of these two
     * intervals is a prime number.
     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
     * which its length is 1, which not a prime number.
     * If the length of the intersection is a prime number, return ""YES"",
     * otherwise, return ""NO"".
     * If the two intervals don't intersect, return ""NO"".
     *
     * [input/output] samples:
     * intersection((1, 2), (2, 3)) ==> ""NO""
     * intersection((-1, 1), (0, 4)) ==> ""NO""
     * intersection((-3, -1), (-5, 5)) ==> ""YES""
     *
     * > intersection([1, 2], [2, 3])
     * ""NO""
     * > intersection([-1, 1], [0, 4])
     * ""NO""
     * > intersection([-3, -1], [-5, 5])
     * ""YES""
     * > intersection([-2, 2], [-4, 0])
     * ""YES""
     * > intersection([-11, 2], [-1, -1])
     * ""NO""
     * > intersection([1, 2], [3, 5])
     * ""NO""
     * > intersection([1, 2], [1, 2])
     * ""NO""
     * > intersection([-2, -2], [-3, -2])
     * ""NO""
     */
    public static String intersection(List<Integer> interval1, List<Integer> interval2) {
        int start = Math.max(interval1.get(0), interval2.get(0));
        int end = Math.min(interval1.get(1), interval2.get(1));
        if (start > end) {
            return ""NO"";
        }
        if (isPrime(end - start)) {
            return ""YES"";
        }
        return ""NO"";
    }

    private static boolean isPrime(int n) {
        if (n < 2) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}
","// IntersectionTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Intersection}.
* It contains ten unit test cases for the {@link Intersection#intersection(List, List)} method.
*/
class IntersectionTest {","// IntersectionTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Intersection}.
* It contains ten unit test cases for the {@link Intersection#intersection(List, List)} method.
*/
class IntersectionTest {

	@Test
	void testIntersection() {
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(2, 3)));
		assertEquals(""NO"", Intersection.intersection(List.of(-1, 1), List.of(0, 4)));
		assertEquals(""YES"", Intersection.intersection(List.of(-3, -1), List.of(-5, 5)));
		assertEquals(""YES"", Intersection.intersection(List.of(-2, 2), List.of(-4, 0)));
		assertEquals(""NO"", Intersection.intersection(List.of(-11, 2), List.of(-1, -1)));
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(3, 5)));
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(1, 2)));
		assertEquals(""NO"", Intersection.intersection(List.of(-2, -2), List.of(-3, -2)));
		assertEquals(""NO"", Intersection.intersection(List.of(-2, -2), List.of(-3, -2)));
		assertEquals(""NO"", Intersection.intersection(List.of(-2, -2), List.of(-3, -2)));
	}
}

// IntersectionTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Intersection}.
* It contains ten unit test cases for the {@link Intersection#intersection(List, List)} method.
*/
class IntersectionTest {
		
	@Test
	void testIntersection() {
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(2, 3)));
		assertEquals(""NO"", Intersection.intersection(List.of(-1, 1), List.of(0, 4)));
		assertEquals(""YES"", Intersection.intersection(List.of(-3, -1), List.of(-5, 5)));
		assertEquals(""YES"", Intersection.intersection(List.of(-2, 2), List.of(-4, 0)));
		assertEquals(""NO"", Intersection.intersection(List.of(-11, 2), List.of(-1, -1)));
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(3, 5)));
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(1, 2)));
		assertEquals(""NO"", Intersection.intersection(List.of(-2, -2), List.of(-3, -2)));
		assertEquals(""NO"", Intersection.intersection(List.of(-2, -2), List.of(-3, -2)));
		assertEquals(""NO"", Intersection.intersection(List.of(-2, -2), List.of(-3, -2)));
	}
}

// IntersectionTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Intersection}.
* It contains ten unit test cases for the {@link Intersection#intersection(List, List)} method.
*/
class IntersectionTest {
		
	@Test
	void testIntersection() {
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(2, 3)));
		assertEquals(""NO"", Intersection.intersection(List.of(-1, 1), List.of(0, 4)));
		assertEquals(""YES"", Intersection.intersection(List.of(-3, -1), List.of(-5, 5)));
		assertEquals(""YES"", Intersection.intersection(List.of(-2, 2), List.of(-4, 0)));
		assertEquals(""NO"", Intersection.intersection(List.of(-11, 2), List.of(-1, -1)));
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(3, 5)));
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(1, 2)));
		assertEquals(""NO"", Intersection.intersection(List.of(-2, -2), List.of(-3, -2)));
		assertEquals(""NO"", Intersection.intersection(List.of(-2, -2), List.of(-3, -2)));
		assertEquals(""NO"", Intersection.intersection(List.of(-2, -2), List.of(-3, -2)));
	}
}

// IntersectionTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Intersection}.
* It contains ten unit test cases for the {@link Intersection#intersection(List, List)} method.
*/
class IntersectionTest {
		
	@Test
	void testIntersection() {
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(2, 3)));
		assertEquals(""NO"", Intersection.intersection(List.of(-1, 1), List.of(0, 4)));
		assertEquals(""YES"", Intersection.intersection(List.of(-3, -1), List.of(-5, 5)));
		assertEquals(""YES"", Intersection.intersection(List.of(-2, 2), List.of(-4, 0)));
		assertEquals(""NO"", Intersection.intersection(List.of(-11, 2), List.of(-1, -1)));
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(3, 5)));
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(1, 2)));
		assertEquals(""NO"", Intersection.intersection(List.of(-2, -2), List.of(-3, -2)));
		assertEquals(""NO"", Intersection.intersection(List.of(-2, -2), List.of(-3, -2)));
		assertEquals(""NO"", Intersection.intersection(List.of(-2, -2), List.of(-3, -2)));
	}
}

// IntersectionTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Intersection}.
* It contains ten unit test cases for the {@link Intersection#intersection(List, List)} method.
*/
class IntersectionTest {
		
	@Test
	void testIntersection() {
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(2, 3)));
		assertEquals(""NO"", Intersection.intersection(List.of(-1, 1), List.of(0, 4)));
		assertEquals(""YES"", Intersection.intersection(List.of(-3, -1), List.of(-5, 5)));
		assertEquals(""YES"", Intersection.intersection(List.of(-2, 2), List.of(-4, 0)));
		assertEquals(""NO"", Intersection.intersection(List.of(-11, 2), List.of(-1, -1)));
		assertEquals(""NO"", Intersection.intersection(List.of(1, 2), List.of(3, 5)));
	"
cmpl-6tUA24GOprOUfQ8F8wCc3BfMM4KZq,/HumanEvalJava/src/main/java/original/id_128.java,9.099441289901733,stop,"// ProdSigns.java
package original;

import java.util.List;

class ProdSigns {

    /**
     * * You are given an array arr of integers and you need to return
     * sum of magnitudes of integers multiplied by product of all signs
     * of each number in the array, represented by 1, -1 or 0.
     * Note: return null for empty arr.
     *
     * Example:
     * >>> prodSigns([1, 2, 2, -4]) == -9
     * >>> prodSigns([0, 1]) == 0
     * >>> prodSigns([]) == None
     *
     * > prodSigns([1, 2, 2, -4])
     * -9
     * > prodSigns([0, 1])
     * 0
     * > prodSigns([1, 1, 1, 2, 3, -1, 1])
     * -10
     * > prodSigns([])
     * null
     * > prodSigns([2, 4, 1, 2, -1, -1, 9])
     * 20
     * > prodSigns([-1, 1, -1, 1])
     * 4
     * > prodSigns([-1, 1, 1, 1])
     * -4
     * > prodSigns([-1, 1, 1, 0])
     * 0
     */
    public static Integer prodSigns(List<Object> arr) {
        if (arr.isEmpty()) {
            return null;
        }
        int prod = 1;
        int sum = 0;
        for (Object value : arr) {
            if (value instanceof Integer) {
                int num = (Integer) value;
                if (num > 0) {
                    prod *= 1;
                } else if (num < 0) {
                    prod *= -1;
                } else {
                    prod *= 0;
                }
                sum += Math.abs(num);
            }
        }
        return sum * prod;
    }
}
","// ProdSignsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProdSigns}.
* It contains ten unit test cases for the {@link ProdSigns#prodSigns(List)} method.
*/
class ProdSignsTest {","// ProdSignsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProdSigns}.
* It contains ten unit test cases for the {@link ProdSigns#prodSigns(List)} method.
*/
class ProdSignsTest {

	@Test
	void testProdSigns() {
		assertEquals(Integer.valueOf(-9), ProdSigns.prodSigns(List.of(1, 2, 2, -4)));
		assertEquals(Integer.valueOf(0), ProdSigns.prodSigns(List.of(0, 1)));
		assertEquals(null, ProdSigns.prodSigns(List.of()));
		assertEquals(Integer.valueOf(-10), ProdSigns.prodSigns(List.of(1, 1, 1, 2, 3, -1, 1)));
		assertEquals(Integer.valueOf(20), ProdSigns.prodSigns(List.of(2, 4, 1, 2, -1, -1, 9)));
		assertEquals(Integer.valueOf(4), ProdSigns.prodSigns(List.of(-1, 1, -1, 1)));
		assertEquals(Integer.valueOf(-4), ProdSigns.prodSigns(List.of(-1, 1, 1, 1)));
		assertEquals(Integer.valueOf(0), ProdSigns.prodSigns(List.of(-1, 1, 1, 0)));
		assertEquals(Integer.valueOf(0), ProdSigns.prodSigns(List.of(0, 0, 0, 0)));
		assertEquals(Integer.valueOf(0), ProdSigns.prodSigns(List.of(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)));
	}
}"
cmpl-6tUB5RGP2qFWTdFprxZ8cc8PmYlgv,/HumanEvalJava/src/main/java/original/id_129.java,75.9426658153534,length,"// Minpath.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Minpath {

    /**
     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k,
     * each cell of the grid contains a value. Every integer in the range [1, N * N]
     * inclusive appears exactly once on the cells of the grid.
     *
     * You have to find the minimum path of length k in the grid. You can start
     * from any cell, and in each step you can move to any of the neighbor cells,
     * in other words, you can go to cells which share an edge with you current
     * cell.
     * Please note that a path of length k means visiting exactly k cells (not
     * necessarily distinct).
     * You CANNOT go off the grid.
     * A path A (of length k) is considered less than a path B (of length k) if
     * after making the ordered lists of the values on the cells that A and B go
     * through (let's call them lst_A and lst_B), lst_A is lexicographically less
     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)
     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
     * lst_A[j] = lst_B[j].
     * It is guaranteed that the answer is unique.
     * Return an ordered list of the values on the cells that the minimum path go through.
     *
     * Examples:
     *
     * Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
     * Output: [1, 2, 1]
     *
     * Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
     * Output: [1]
     *
     * > minpath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)
     * [1, 2, 1]
     * > minpath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)
     * [1]
     * > minpath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4)
     * [1, 2, 1, 2]
     * > minpath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)
     * [1, 10, 1, 10, 1, 10, 1]
     * > minpath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)
     * [1, 7, 1, 7, 1]
     * > minpath([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9)
     * [1, 6, 1, 6, 1, 6, 1, 6, 1]
     * > minpath([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12)
     * [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
     * > minpath([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8)
     * [1, 3, 1, 3, 1, 3, 1, 3]
     * > minpath([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8)
     * [1, 5, 1, 5, 1, 5, 1, 5]
     * > minpath([[1, 2], [3, 4]], 10)
     * [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
     * > minpath([[1, 3], [3, 2]], 10)
     * [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]
     */
    public static List<Integer> minpath(List<List<Integer>> grid, int k) {
        int n = grid.size();
        int val = n * n + 1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid.get(i).get(j) == 1) {
                    List<Integer> temp = new ArrayList<>();
                    if (i != 0) {
                        temp.add(grid.get(i - 1).get(j));
                    }
                    if (j != 0) {
                        temp.add(grid.get(i).get(j - 1));
                    }
                    if (i != n - 1) {
                        temp.add(grid.get(i + 1).get(j));
                    }
                    if (j != n - 1) {
                        temp.add(grid.get(i).get(j + 1));
                    }
                    val = Collections.min(temp);
                }
            }
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (i % 2 == 0) {
                ans.add(1);
            } else {
                ans.add(val);
            }
        }
        return ans;
    }
}
","// MinpathTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Minpath}.
* It contains ten unit test cases for the {@link Minpath#minpath(List, int)} method.
*/
class MinpathTest {","// MinpathTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Minpath}.
* It contains ten unit test cases for the {@link Minpath#minpath(List, int)} method.
*/
class MinpathTest {

	/**
	* Test case 1.
	* Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
	* Output: [1, 2, 1]
	*/
	@Test
	void test1() {
		List<List<Integer>> grid = new ArrayList<>();
		List<Integer> row1 = new ArrayList<>();
		row1.add(1);
		row1.add(2);
		row1.add(3);
		List<Integer> row2 = new ArrayList<>();
		row2.add(4);
		row2.add(5);
		row2.add(6);
		List<Integer> row3 = new ArrayList<>();
		row3.add(7);
		row3.add(8);
		row3.add(9);
		grid.add(row1);
		grid.add(row2);
		grid.add(row3);
		int k = 3;
		List<Integer> expected = new ArrayList<>();
		expected.add(1);
		expected.add(2);
		expected.add(1);
		List<Integer> actual = Minpath.minpath(grid, k);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 2.
	* Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
	* Output: [1]
	*/
	@Test
	void test2() {
		List<List<Integer>> grid = new ArrayList<>();
		List<Integer> row1 = new ArrayList<>();
		row1.add(5);
		row1.add(9);
		row1.add(3);
		List<Integer> row2 = new ArrayList<>();
		row2.add(4);
		row2.add(1);
		row2.add(6);
		List<Integer> row3 = new ArrayList<>();
		row3.add(7);
		row3.add(8);
		row3.add(2);
		grid.add(row1);
		grid.add(row2);
		grid.add(row3);
		int k = 1;
		List<Integer> expected = new ArrayList<>();
		expected.add(1);
		List<Integer> actual = Minpath.minpath(grid, k);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 3.
	* Input: grid = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], k = 4
	* Output: [1, 2, 1, 2]
	*/
	@Test
	void test3() {
		List<List<Integer>> grid = new ArrayList<>();
		List<Integer> row1 = new ArrayList<>();
		row1.add(1);
		row1.add(2);
		row1.add(3);
		row1.add(4);
		List<Integer> row2 = new ArrayList<>();
		row2.add(5);
		row2.add(6);
		row2.add(7);
		row2.add(8);
		List<Integer> row3 = new ArrayList<>();
		row3.add(9);
		row3.add(10);
		row3.add(11);
		row3.add(12);
		List<Integer> row4 = new ArrayList<>();
		row4.add(13);
		row4.add(14);
		row4.add(15);
		row4.add(16);
		grid.add(row1);
		grid.add(row2);
		grid.add(row3);
		grid.add(row4);
		int k = 4;
		List<Integer> expected = new ArrayList<>();
		expected.add(1);
		expected.add(2);
		expected.add(1);
		expected.add(2);
		List<Integer> actual = Minpath.minpath(grid, k);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 4.
	* Input: grid = [ [6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], k = 7
	* Output: [1, 10, 1, 10, 1, 10, 1]
	*/
	@Test
	void test4() {
		List<List<Integer>> grid = new ArrayList<>();
		List<Integer> row1 = new ArrayList<>();
		row1.add(6);
		row1.add(4);
		row1.add(13);
		row1.add(10);
		List<Integer> row2 = new ArrayList<>();
		row2.add(5);
		row2.add(7);
		row2.add(12);
		row2.add(1);
		List<Integer> row3 = new ArrayList<>();
		row3.add(3);
		row3.add(16);
		row3.add(11);
		row3.add(15);
		List<Integer> row4 = new ArrayList<>();
		row4.add(8);
		row4.add(14);
		row4.add(9);
		row4.add(2);
		grid.add(row1);
		grid.add(row2);
		grid.add(row3);
		grid.add(row4);
		int k = 7;
		List<Integer> expected = new ArrayList<>();
		expected.add(1);
		expected.add(10);
		expected.add(1);
		expected.add(10);
		expected.add(1);
		expected.add(10);
		expected.add(1);
		List<Integer> actual = Minpath.minpath(grid, k);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 5.
	* Input: grid = [ [5, 7, 12, 1], [6, 4, 13, 10], [3, 16, 11, 15], [8, 14, 9, 2]], k = 5
	* Output: [1, 7, 1, 7, 1]
	*/
	@Test
	void test5() {
		List<List<Integer>> grid = new ArrayList<>();
		List<Integer> row1 = new ArrayList<>();
		row1.add(5);
		row1.add(7);
		row1.add(12);
		row1.add(1);
		List<Integer> row2 = new ArrayList<>();
		row2.add(6);
		row2.add(4);
		row2.add(13);
		row2.add(10);
		List<Integer> row3 = new ArrayList<>();
		row3.add(3);
		row3.add(16);
		row3.add(11);
		row3.add(15);
		List<Integer> row4 = new ArrayList<>();
		row4.add(8);
		row4.add(14);
		row4.add(9);
		row4.add(2);
		grid.add(row1);
		grid.add(row2);
		grid.add(row3);
		grid.add(row4);
		int k = 5;
		List<Integer> expected = new ArrayList"
cmpl-6tUCJ3tzqCX5XHqmgiZCYXb9DTbSB,/HumanEvalJava/src/main/java/original/id_13.java,57.58053922653198,length,"// GreatestCommonDivisor.java
package original;

class GreatestCommonDivisor {

    /**
     * Return the greatest common divisor of two integers a and b.
     *
     * > greatestCommonDivisor(3, 5)
     * 1
     * > greatestCommonDivisor(25, 15)
     * 5
     * > greatestCommonDivisor(3, 7)
     * 1
     * > greatestCommonDivisor(10, 15)
     * 5
     * > greatestCommonDivisor(49, 14)
     * 7
     * > greatestCommonDivisor(144, 60)
     * 12
     */
    public static int greatestCommonDivisor(int a, int b) {
        if (a == 0) {
            return b;
        }
        return greatestCommonDivisor(b % a, a);
    }
}
","// GreatestCommonDivisorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GreatestCommonDivisor}.
* It contains ten unit test cases for the {@link GreatestCommonDivisor#greatestCommonDivisor(int, int)} method.
*/
class GreatestCommonDivisorTest {","// GreatestCommonDivisorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GreatestCommonDivisor}.
* It contains ten unit test cases for the {@link GreatestCommonDivisor#greatestCommonDivisor(int, int)} method.
*/
class GreatestCommonDivisorTest {

	@Test
	void testGreatestCommonDivisor() {
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 5));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(25, 15));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 7));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(10, 15));
		assertEquals(7, GreatestCommonDivisor.greatestCommonDivisor(49, 14));
		assertEquals(12, GreatestCommonDivisor.greatestCommonDivisor(144, 60));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 5));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(25, 15));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 7));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(10, 15));
	}
}

// GreatestCommonDivisorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GreatestCommonDivisor}.
* It contains ten unit test cases for the {@link GreatestCommonDivisor#greatestCommonDivisor(int, int)} method.
*/
class GreatestCommonDivisorTest {
		
	@Test
	void testGreatestCommonDivisor() {
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 5));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(25, 15));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 7));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(10, 15));
		assertEquals(7, GreatestCommonDivisor.greatestCommonDivisor(49, 14));
		assertEquals(12, GreatestCommonDivisor.greatestCommonDivisor(144, 60));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 5));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(25, 15));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 7));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(10, 15));
	}
}

// GreatestCommonDivisorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GreatestCommonDivisor}.
* It contains ten unit test cases for the {@link GreatestCommonDivisor#greatestCommonDivisor(int, int)} method.
*/
class GreatestCommonDivisorTest {
		
	@Test
	void testGreatestCommonDivisor() {
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 5));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(25, 15));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 7));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(10, 15));
		assertEquals(7, GreatestCommonDivisor.greatestCommonDivisor(49, 14));
		assertEquals(12, GreatestCommonDivisor.greatestCommonDivisor(144, 60));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 5));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(25, 15));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 7));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(10, 15));
	}
}

// GreatestCommonDivisorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GreatestCommonDivisor}.
* It contains ten unit test cases for the {@link GreatestCommonDivisor#greatestCommonDivisor(int, int)} method.
*/
class GreatestCommonDivisorTest {
		
	@Test
	void testGreatestCommonDivisor() {
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 5));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(25, 15));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 7));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(10, 15));
		assertEquals(7, GreatestCommonDivisor.greatestCommonDivisor(49, 14));
		assertEquals(12, GreatestCommonDivisor.greatestCommonDivisor(144, 60));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 5));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(25, 15));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 7));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(10, 15));
	}
}

// GreatestCommonDivisorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GreatestCommonDivisor}.
* It contains ten unit test cases for the {@link GreatestCommonDivisor#greatestCommonDivisor(int, int)} method.
*/
class GreatestCommonDivisorTest {
		
	@Test
	void testGreatestCommonDivisor() {
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 5));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(25, 15));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 7));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(10, 15));
		assertEquals(7, GreatestCommonDivisor.greatestCommonDivisor(49, 14));
		assertEquals(12, GreatestCommonDivisor.greatestCommonDivisor(144, 60));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 5));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(25, 15));
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3, 7));
		assertEquals(5, GreatestCommonDivisor.greatestCommonDivisor(10, 15));
	}
}

// GreatestCommonDivisorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GreatestCommonDivisor}.
* It contains ten unit test cases for the {@link GreatestCommonDivisor#greatestCommonDivisor(int, int)} method.
*/
class GreatestCommonDivisorTest {
		
	@Test
	void testGreatestCommonDivisor() {
		assertEquals(1, GreatestCommonDivisor.greatestCommonDivisor(3,"
cmpl-6tUDMVwCDOEJOg5htMfjlnvNviQ8c,/HumanEvalJava/src/main/java/original/id_130.java,69.43493223190308,length,"// Tri.java
package original;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Tri {

    /**
     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in
     * the last couple centuries. However, what people don't know is Tribonacci sequence.
     * Tribonacci sequence is defined by the recurrence:
     * tri(1) = 3
     * tri(n) = 1 + n / 2, if n is even.
     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
     * For example:
     * tri(2) = 1 + (2 / 2) = 2
     * tri(4) = 3
     * tri(3) = tri(2) + tri(1) + tri(4)
     * = 2 + 3 + 3 = 8
     * You are given a non-negative integer number n, you have to a return a list of the
     * first n + 1 numbers of the Tribonacci sequence.
     * Examples:
     * tri(3) = [1, 3, 2, 8]
     *
     * > tri(3)
     * [1, 3, 2.0, 8.0]
     * > tri(4)
     * [1, 3, 2.0, 8.0, 3.0]
     * > tri(5)
     * [1, 3, 2.0, 8.0, 3.0, 15.0]
     * > tri(6)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
     * > tri(7)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
     * > tri(8)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
     * > tri(9)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
     * > tri(20)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]
     * > tri(0)
     * [1]
     * > tri(1)
     * [1, 3]
     */
    public static List<Number> tri(int n) {
        if (n == 0) {
            return Arrays.asList(1);
        }
        List<Number> my_tri = new ArrayList<>();
        my_tri.add(1);
        my_tri.add(3);
        for (int i = 2; i < n + 1; i++) {
            if (i % 2 == 0) {
                my_tri.add(i / 2 + 1.0);
            } else {
                my_tri.add(my_tri.get(i - 1).doubleValue() + my_tri.get(i - 2).doubleValue() + (i + 3) / 2);
            }
        }
        return my_tri;
    }
}
","// TriTest.java
package original;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Tri}.
* It contains ten unit test cases for the {@link Tri#tri(int)} method.
*/
class TriTest {","// TriTest.java
package original;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Tri}.
* It contains ten unit test cases for the {@link Tri#tri(int)} method.
*/
class TriTest {

	@Test
	void testTri() {
		List<Number> expected = Arrays.asList(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0);
		assertEquals(expected, Tri.tri(20));
		
		expected = Arrays.asList(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0, 143.0, 12.0, 168.0, 13.0, 195.0, 14.0, 224.0, 15.0, 255.0, 16.0, 288.0, 17.0, 323.0, 18.0, 360.0, 19.0, 399.0, 20.0, 440.0, 21.0, 483.0, 22.0, 528.0, 23.0, 575.0, 24.0, 624.0, 25.0, 675.0, 26.0, 728.0, 27.0, 783.0, 28.0, 840.0, 29.0, 899.0, 30.0, 960.0, 31.0, 1023.0, 32.0, 1088.0, 33.0, 1155.0, 34.0, 1224.0, 35.0, 1295.0, 36.0, 1368.0, 37.0, 1443.0, 38.0, 1520.0, 39.0, 1599.0, 40.0, 1680.0, 41.0, 1763.0, 42.0, 1848.0, 43.0, 1935.0, 44.0, 2024.0, 45.0, 2115.0, 46.0, 2208.0, 47.0, 2303.0, 48.0, 2400.0, 49.0, 2499.0, 50.0, 2600.0, 51.0, 2703.0, 52.0, 2808.0, 53.0, 2915.0, 54.0, 3024.0, 55.0, 3135.0, 56.0, 3248.0, 57.0, 3363.0, 58.0, 3480.0, 59.0, 3599.0, 60.0, 3720.0, 61.0, 3843.0, 62.0, 3968.0, 63.0, 4096.0, 64.0, 4225.0, 65.0, 4356.0, 66.0, 4489.0, 67.0, 4624.0, 68.0, 4761.0, 69.0, 4900.0, 70.0, 5041.0, 71.0, 5184.0, 72.0, 5329.0, 73.0, 5476.0, 74.0, 5625.0, 75.0, 5776.0, 76.0, 5929.0, 77.0, 6084.0, 78.0, 6241.0, 79.0, 6400.0, 80.0, 6561.0, 81.0, 6724.0, 82.0, 6889.0, 83.0, 7056.0, 84.0, 7225.0, 85.0, 7396.0, 86.0, 7569.0, 87.0, 7744.0, 88.0, 7921.0, 89.0, 8100.0, 90.0, 8281.0, 91.0, 8464.0, 92.0, 8649.0, 93.0, 8836.0, 94.0, 9025.0, 95.0, 9216.0, 96.0, 9409.0, 97.0, 9604.0, 98.0, 9801.0, 99.0, 10000.0, 100.0);
		assertEquals(expected, Tri.tri(100));
		
		expected = Arrays.asList(1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0, 143.0, 12.0, 168.0, 13.0, 195.0, 14.0, 224.0, 15.0, 255.0, 16.0, 288.0, 17.0, 323.0, 18.0, 360.0, 19.0, 399.0, 20.0, 440.0, 21.0, 483.0, 22.0, 528.0, 23.0, 575.0, 24.0, 624.0, 25.0, 675.0, 26.0, 728.0, 27.0, 783.0, 28.0, 840.0, 29.0, 899.0, 30.0, 960.0, 31.0, 1023.0, 32.0, 1088.0, 33.0, 1155.0, 34.0, 1224.0, 35.0, 1295.0, 36.0, 1368.0, 37.0, 1443.0, 38.0, 1520.0, 39.0, 1599.0, 40.0, 1680.0, 41.0, 1763.0, 42.0, 1848.0, 43.0, 1935.0, 44.0, 2024.0, 45.0, 2115.0, 46.0, 2208.0, 47.0, 2303.0, 48.0, 2400.0, 49.0, 2499.0, 50.0, 2600.0, 51.0, 2703.0, 52.0, 2808.0, 53.0, 2915.0, 54.0, 3024.0, 55.0, 3135.0, 56.0, 3248.0, 57.0, 3363.0, 58.0, 3480.0, 59.0, 3599.0, 60.0, 3720.0, 61.0, 3843.0, 62.0, 3968.0, 63.0, 4096.0, 64.0, 4225.0, 65.0, 4356.0, 66.0, 4489.0, 67.0, 4624.0, 68.0, 4761.0, 69.0, 4900.0, 70.0, 5041.0, 71.0, 5184.0, 72.0, 5329.0, 73.0, 5476.0, 74.0, 5625.0, 75.0, 5776.0, 76.0, 5929.0, 77.0, 6084.0, 78.0, 6241.0, 79.0, 6400.0, 80.0, 6561.0, 81.0, 6724.0, 82.0, 6889.0, 83.0, 7056.0, 84.0, 7225.0, 85.0, 7396.0, 86.0, 7569.0, 87.0, 7744.0, 88.0, 7921.0, 89.0, 8100.0, 90.0, 8281.0, 91.0, 8464.0, 92.0, 8649.0, 93.0, 8836.0, 94.0, 9025.0, 95.0, 9216.0, 96.0, 9409.0, 97.0, 9604.0, 98.0, 9801.0, 99.0, 10000.0, 100.0, 10201.0, 101.0, 10404.0, 102.0, 10609.0, 103.0, 10816.0, 104.0, 11025.0, 105.0, 11236.0, 106.0, 11449.0, 107.0, 11664.0, 108.0, 11881.0, 109.0, 12100.0, 110.0, 12321.0, 111.0, 12544.0, 112"
cmpl-6tUEUWvlxJT7oDqPVAh3hajjAfkhL,/HumanEvalJava/src/main/java/original/id_131.java,64.7317111492157,length,"// Digits.java
package original;

class Digits {

    /**
     * Given a positive integer n, return the product of the odd digits.
     * Return 0 if all digits are even.
     * For example:
     * digits(1)  == 1
     * digits(4)  == 0
     * digits(235) == 15
     *
     * > digits(5)
     * 5
     * > digits(54)
     * 5
     * > digits(120)
     * 1
     * > digits(5014)
     * 5
     * > digits(98765)
     * 315
     * > digits(5576543)
     * 2625
     * > digits(2468)
     * 0
     */
    public static int digits(int n) {
        int res = 1;
        boolean hasOdd = false;
        while (n > 0) {
            int digit = n % 10;
            if (digit % 2 == 1) {
                res *= digit;
                hasOdd = true;
            }
            n /= 10;
        }
        return hasOdd ? res : 0;
    }
}
","// DigitsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digits}.
* It contains ten unit test cases for the {@link Digits#digits(int)} method.
*/
class DigitsTest {","// DigitsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digits}.
* It contains ten unit test cases for the {@link Digits#digits(int)} method.
*/
class DigitsTest {

	@Test
	void testDigits1() {
		assertEquals(1, Digits.digits(1));
	}
	
	@Test
	void testDigits2() {
		assertEquals(0, Digits.digits(4));
	}
	
	@Test
	void testDigits3() {
		assertEquals(15, Digits.digits(235));
	}
	
	@Test
	void testDigits4() {
		assertEquals(5, Digits.digits(5));
	}
	
	@Test
	void testDigits5() {
		assertEquals(5, Digits.digits(54));
	}
	
	@Test
	void testDigits6() {
		assertEquals(1, Digits.digits(120));
	}
	
	@Test
	void testDigits7() {
		assertEquals(5, Digits.digits(5014));
	}
	
	@Test
	void testDigits8() {
		assertEquals(315, Digits.digits(98765));
	}
	
	@Test
	void testDigits9() {
		assertEquals(2625, Digits.digits(5576543));
	}
	
	@Test
	void testDigits10() {
		assertEquals(0, Digits.digits(2468));
	}
}

// DigitsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digits}.
* It contains ten unit test cases for the {@link Digits#digits(int)} method.
*/
class DigitsTest {
		
	@Test
	void testDigits1() {
		assertEquals(1, Digits.digits(1));
	}
	
	@Test
	void testDigits2() {
		assertEquals(0, Digits.digits(4));
	}
	
	@Test
	void testDigits3() {
		assertEquals(15, Digits.digits(235));
	}
	
	@Test
	void testDigits4() {
		assertEquals(5, Digits.digits(5));
	}
	
	@Test
	void testDigits5() {
		assertEquals(5, Digits.digits(54));
	}
	
	@Test
	void testDigits6() {
		assertEquals(1, Digits.digits(120));
	}
	
	@Test
	void testDigits7() {
		assertEquals(5, Digits.digits(5014));
	}
	
	@Test
	void testDigits8() {
		assertEquals(315, Digits.digits(98765));
	}
	
	@Test
	void testDigits9() {
		assertEquals(2625, Digits.digits(5576543));
	}
	
	@Test
	void testDigits10() {
		assertEquals(0, Digits.digits(2468));
	}
}

// DigitsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digits}.
* It contains ten unit test cases for the {@link Digits#digits(int)} method.
*/
class DigitsTest {
		
	@Test
	void testDigits1() {
		assertEquals(1, Digits.digits(1));
	}
	
	@Test
	void testDigits2() {
		assertEquals(0, Digits.digits(4));
	}
	
	@Test
	void testDigits3() {
		assertEquals(15, Digits.digits(235));
	}
	
	@Test
	void testDigits4() {
		assertEquals(5, Digits.digits(5));
	}
	
	@Test
	void testDigits5() {
		assertEquals(5, Digits.digits(54));
	}
	
	@Test
	void testDigits6() {
		assertEquals(1, Digits.digits(120));
	}
	
	@Test
	void testDigits7() {
		assertEquals(5, Digits.digits(5014));
	}
	
	@Test
	void testDigits8() {
		assertEquals(315, Digits.digits(98765));
	}
	
	@Test
	void testDigits9() {
		assertEquals(2625, Digits.digits(5576543));
	}
	
	@Test
	void testDigits10() {
		assertEquals(0, Digits.digits(2468));
	}
}

// DigitsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digits}.
* It contains ten unit test cases for the {@link Digits#digits(int)} method.
*/
class DigitsTest {
		
	@Test
	void testDigits1() {
		assertEquals(1, Digits.digits(1));
	}
	
	@Test
	void testDigits2() {
		assertEquals(0, Digits.digits(4));
	}
	
	@Test
	void testDigits3() {
		assertEquals(15, Digits.digits(235));
	}
	
	@Test
	void testDigits4() {
		assertEquals(5, Digits.digits(5));
	}
	
	@Test
	void testDigits5() {
		assertEquals(5, Digits.digits(54));
	}
	
	@Test
	void testDigits6() {
		assertEquals(1, Digits.digits(120));
	}
	
	@Test
	void testDigits7() {
		assertEquals(5, Digits.digits(5014));
	}
	
	@Test
	void testDigits8() {
		assertEquals(315, Digits.digits(98765));
	}
	
	@Test
	void testDigits9() {
		assertEquals(2625, Digits.digits(5576543));
	}
	
	@Test
	void testDigits10() {
		assertEquals(0, Digits.digits(2468));
	}
}

// DigitsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digits}.
* It contains ten unit test cases for the {@link Digits#digits(int)} method.
*/
class DigitsTest {
		
	@Test
	void testDigits1() {
		assertEquals(1, Digits.digits(1));
	}
	
	@Test
	void testDigits2() {
		assertEquals(0, Digits.digits(4));
	}
	
	@Test
	void testDigits3() {
		assertEquals(15, Digits.digits(235));
	}
	
	@Test
	void testDigits4() {
		assertEquals(5, Digits.digits(5));
	}
	
	@Test
	void testDigits5() {
		assertEquals(5, Digits.digits(54));
	}
	
	@Test
	void testDigits6() {
		assertEquals(1, Digits.digits(120"
cmpl-6tUFWY46ptcq6Mune31dfyf3iMMJP,/HumanEvalJava/src/main/java/original/id_132.java,35.61043691635132,stop,"// IsNested.java
package original;

import java.util.ArrayList;
import java.util.Collections;

class IsNested {

    /**
     * * Create a function that takes a string as input which contains only square brackets.
     * The function should return True if and only if there is a valid subsequence of brackets
     * where at least one bracket in the subsequence is nested.
     *
     * isNested('[[]]') ➞ True
     * isNested('[]]]]]]][[[[[]') ➞ False
     * isNested('[][]') ➞ False
     * isNested('[]') ➞ False
     * isNested('[[][]]') ➞ True
     * isNested('[[]][[') ➞ True
     *
     * > isNested(""[[]]"")
     * true
     * > isNested(""[]]]]]]][[[[[]"")
     * false
     * > isNested(""[][]"")
     * false
     * > isNested(""[]"")
     * false
     * > isNested(""[[[[]]]]"")
     * true
     * > isNested(""[]]]]]]]]]]"")
     * false
     * > isNested(""[][][[]]"")
     * true
     * > isNested(""[[]"")
     * false
     * > isNested(""[]]"")
     * false
     * > isNested(""[[]][["")
     * true
     * > isNested(""[[][]]"")
     * true
     * > isNested("""")
     * false
     * > isNested(""[[[[[[[["")
     * false
     * > isNested(""]]]]]]]]"")
     * false
     */
    public static Boolean isNested(String string) {
        ArrayList<Integer> opening_bracket_index = new ArrayList<Integer>();
        ArrayList<Integer> closing_bracket_index = new ArrayList<Integer>();
        for (int i = 0; i < string.length(); i++) {
            if (string.charAt(i) == '[') {
                opening_bracket_index.add(i);
            } else {
                closing_bracket_index.add(i);
            }
        }
        Collections.reverse(closing_bracket_index);
        int cnt = 0;
        int i = 0;
        int l = closing_bracket_index.size();
        for (int idx : opening_bracket_index) {
            if (i < l && idx < closing_bracket_index.get(i)) {
                cnt += 1;
                i += 1;
            }
        }
        return cnt >= 2;
    }
}
","// IsNestedTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsNested}.
* It contains ten unit test cases for the {@link IsNested#isNested(String)} method.
*/
class IsNestedTest {","// IsNestedTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsNested}.
* It contains ten unit test cases for the {@link IsNested#isNested(String)} method.
*/
class IsNestedTest {

	@Test
	void testIsNested() {
		assertTrue(IsNested.isNested(""[[]]""));
		assertFalse(IsNested.isNested(""[]]]]]]][[[[[]""));
		assertFalse(IsNested.isNested(""[][]""));
		assertFalse(IsNested.isNested(""[]""));
		assertTrue(IsNested.isNested(""[[[[]]]]""));
		assertFalse(IsNested.isNested(""[]]]]]]]]]]""));
		assertTrue(IsNested.isNested(""[][][[]]""));
		assertFalse(IsNested.isNested(""[[]""));
		assertFalse(IsNested.isNested(""[]]""));
		assertTrue(IsNested.isNested(""[[]][[""));
		assertTrue(IsNested.isNested(""[[][]]""));
		assertFalse(IsNested.isNested(""""));
		assertFalse(IsNested.isNested(""[[[[[[[""));
		assertFalse(IsNested.isNested(""]]]]]]]]""));
	}
}

// IsNested.java
package refactored;

import java.util.ArrayList;
import java.util.Collections;

class IsNested {

    /**
     * * Create a function that takes a string as input which contains only square brackets.
     * The function should return True if and only if there is a valid subsequence of brackets
     * where at least one bracket in the subsequence is nested.
     *
     * isNested('[[]]') ➞ True
     * isNested('[]]]]]]][[[[[]') ➞ False
     * isNested('[][]') ➞ False
     * isNested('[]') ➞ False
     * isNested('[[][]]') ➞ True
     * isNested('[[]][[') ➞ True
     *
     * > isNested(""[[]]"")
     * true
     * > isNested(""[]]]]]]][[[[[]"")
     * false
     * > isNested(""[][]"")
     * false
     * > isNested(""[]"")
     * false
     * > isNested(""[[[[]]]]"")
     * true
     * > isNested(""[]]]]]]]]]]"")
     * false
     * > isNested(""[][][[]]"")
     * true
     * > isNested(""[[]"")
     * false
     * > isNested(""[]]"")
     * false
     * > isNested(""[[]][["")
     * true
     * > isNested(""[[][]]"")
     * true
     * > isNested("""")
     * false
     * > isNested(""[[[[[[[["")
     * false
     * > isNested(""]]]]]]]]"")
     * false
     */
    public static Boolean isNested(String string) {
        ArrayList<Integer> opening_bracket_index = new ArrayList<Integer>();
        ArrayList<Integer> closing_bracket_index = new ArrayList<Integer>();
        for (int i = 0; i < string.length(); i++) {
            if (string.charAt(i) == '[') {
                opening_bracket_index.add(i);
            } else {
                closing_bracket_index.add(i);
            }
        }
        Collections.reverse(closing_bracket_index);
        int cnt = 0;
        int i = 0;
        int l = closing_bracket_index.size();
        for (int idx : opening_bracket_index) {
            if (i < l && idx < closing_bracket_index.get(i)) {
                cnt += 1;
                i += 1;
            }
        }
        return cnt >= 2;
    }
}

// IsNestedTest.java
package refactored;

import java.util.ArrayList;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsNested}.
* It contains ten unit test cases for the {@link IsNested#isNested(String)} method.
*/
class IsNestedTest {
		
	@Test
	void testIsNested() {
		assertTrue(IsNested.isNested(""[[]]""));
		assertFalse(IsNested.isNested(""[]]]]]]][[[[[]""));
		assertFalse(IsNested.isNested(""[][]""));
		assertFalse(IsNested.isNested(""[]""));
		assertTrue(IsNested.isNested(""[[[[]]]]""));
		assertFalse(IsNested.isNested(""[]]]]]]]]]]""));
		assertTrue(IsNested.isNested(""[][][[]]""));
		assertFalse(IsNested.isNested(""[[]""));
		assertFalse(IsNested.isNested(""[]]""));
		assertTrue(IsNested.isNested(""[[]][[""));
		assertTrue(IsNested.isNested(""[[][]]""));
		assertFalse(IsNested.isNested(""""));
		assertFalse(IsNested.isNested(""[[[[[[[""));
		assertFalse(IsNested.isNested(""]]]]]]]]""));
	}
}"
cmpl-6tUGZsbA8QvzxHtyYcy5spOJnuuWT,/HumanEvalJava/src/main/java/original/id_133.java,55.18645787239075,length,"// SumSquares.java
package original;

import java.util.List;

class SumSquares {

    /**
     * You are given a list of numbers.
     * You need to return the sum of squared numbers in the given list,
     * round each element in the list to the upper int(Ceiling) first.
     * Examples:
     * For lst = [1,2,3] the output should be 14
     * For lst = [1,4,9] the output should be 98
     * For lst = [1,3,5,7] the output should be 84
     * For lst = [1.4,4.2,0] the output should be 29
     * For lst = [-2.4,1,1] the output should be 6
     *
     * > sumSquares([1, 2, 3])
     * 14
     * > sumSquares([1.0, 2, 3])
     * 14
     * > sumSquares([1, 3, 5, 7])
     * 84
     * > sumSquares([1.4, 4.2, 0])
     * 29
     * > sumSquares([-2.4, 1, 1])
     * 6
     * > sumSquares([100, 1, 15, 2])
     * 10230
     * > sumSquares([10000, 10000])
     * 200000000
     * > sumSquares([-1.4, 4.6, 6.3])
     * 75
     * > sumSquares([-1.4, 17.9, 18.9, 19.9])
     * 1086
     * > sumSquares([0])
     * 0
     * > sumSquares([-1])
     * 1
     * > sumSquares([-1, 1, 0])
     * 2
     */
    public static int sumSquares(List<Number> lst) {
        int sum = 0;
        for (Number n : lst) {
            sum += Math.pow(Math.ceil(n.doubleValue()), 2);
        }
        return sum;
    }
}
","// SumSquaresTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares}.
* It contains ten unit test cases for the {@link SumSquares#sumSquares(List)} method.
*/
class SumSquaresTest {","// SumSquaresTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares}.
* It contains ten unit test cases for the {@link SumSquares#sumSquares(List)} method.
*/
class SumSquaresTest {

	@Test
	void testSumSquares() {
		assertEquals(14, SumSquares.sumSquares(List.of(1, 2, 3)));
		assertEquals(14, SumSquares.sumSquares(List.of(1.0, 2, 3)));
		assertEquals(84, SumSquares.sumSquares(List.of(1, 3, 5, 7)));
		assertEquals(29, SumSquares.sumSquares(List.of(1.4, 4.2, 0)));
		assertEquals(6, SumSquares.sumSquares(List.of(-2.4, 1, 1)));
		assertEquals(10230, SumSquares.sumSquares(List.of(100, 1, 15, 2)));
		assertEquals(200000000, SumSquares.sumSquares(List.of(10000, 10000)));
		assertEquals(75, SumSquares.sumSquares(List.of(-1.4, 4.6, 6.3)));
		assertEquals(1086, SumSquares.sumSquares(List.of(-1.4, 17.9, 18.9, 19.9)));
		assertEquals(0, SumSquares.sumSquares(List.of(0)));
		assertEquals(1, SumSquares.sumSquares(List.of(-1)));
		assertEquals(2, SumSquares.sumSquares(List.of(-1, 1, 0)));
	}
}

// SumSquaresTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares}.
* It contains ten unit test cases for the {@link SumSquares#sumSquares(List)} method.
*/
class SumSquaresTest {
		
	@Test
	void testSumSquares() {
		assertEquals(14, SumSquares.sumSquares(List.of(1, 2, 3)));
		assertEquals(14, SumSquares.sumSquares(List.of(1.0, 2, 3)));
		assertEquals(84, SumSquares.sumSquares(List.of(1, 3, 5, 7)));
		assertEquals(29, SumSquares.sumSquares(List.of(1.4, 4.2, 0)));
		assertEquals(6, SumSquares.sumSquares(List.of(-2.4, 1, 1)));
		assertEquals(10230, SumSquares.sumSquares(List.of(100, 1, 15, 2)));
		assertEquals(200000000, SumSquares.sumSquares(List.of(10000, 10000)));
		assertEquals(75, SumSquares.sumSquares(List.of(-1.4, 4.6, 6.3)));
		assertEquals(1086, SumSquares.sumSquares(List.of(-1.4, 17.9, 18.9, 19.9)));
		assertEquals(0, SumSquares.sumSquares(List.of(0)));
		assertEquals(1, SumSquares.sumSquares(List.of(-1)));
		assertEquals(2, SumSquares.sumSquares(List.of(-1, 1, 0)));
	}
}

// SumSquaresTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares}.
* It contains ten unit test cases for the {@link SumSquares#sumSquares(List)} method.
*/
class SumSquaresTest {
		
	@Test
	void testSumSquares() {
		assertEquals(14, SumSquares.sumSquares(List.of(1, 2, 3)));
		assertEquals(14, SumSquares.sumSquares(List.of(1.0, 2, 3)));
		assertEquals(84, SumSquares.sumSquares(List.of(1, 3, 5, 7)));
		assertEquals(29, SumSquares.sumSquares(List.of(1.4, 4.2, 0)));
		assertEquals(6, SumSquares.sumSquares(List.of(-2.4, 1, 1)));
		assertEquals(10230, SumSquares.sumSquares(List.of(100, 1, 15, 2)));
		assertEquals(200000000, SumSquares.sumSquares(List.of(10000, 10000)));
		assertEquals(75, SumSquares.sumSquares(List.of(-1.4, 4.6, 6.3)));
		assertEquals(1086, SumSquares.sumSquares(List.of(-1.4, 17.9, 18.9, 19.9)));
		assertEquals(0, SumSquares.sumSquares(List.of(0)));
		assertEquals(1, SumSquares.sumSquares(List.of(-1)));
		assertEquals(2, SumSquares.sumSquares(List.of(-1, 1, 0)));
	}
}

// SumSquaresTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares}.
* It contains ten unit test cases for the {@link SumSquares#sumSquares(List)} method.
*/
class SumSquaresTest {
		
	@Test
	void testSumSquares() {
		assertEquals(14, SumSquares.sumSquares(List.of(1, 2, 3)));
		assertEquals(14, SumSquares.sumSquares(List.of(1.0, 2, 3)));
		assertEquals(84, SumSquares.sumSquares(List.of(1, 3, 5, 7)));
		assertEquals(29, SumSquares.sumSquares(List.of(1.4, 4.2, 0)));
		assertEquals(6, SumSquares.sumSquares(List.of(-2.4, 1, 1)));
		assertEquals(10230, SumSquares.sumSquares(List.of(100, 1, 15, 2)));
		assertEquals(200000000, SumSquares.sumSquares(List.of(10000, 10000)));
		assertEquals(75, SumSquares.sumSquares(List.of(-1.4, 4.6, 6.3)));
		assertEquals(1086, SumSquares.sumSquares(List.of(-1.4, 17.9, 18.9, 19.9)));
		assertEquals(0, SumSquares.sumSquares(List.of(0)));
		assertEquals(1, SumSquares.sumSquares(List.of(-1)));
		assertEquals(2, SumSquares.sumSquares(List.of(-1, 1, 0)));
	}
}

// SumSquaresTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares}.
* It contains ten unit test cases for the {@link SumSquares#sumSquares(List)} method.
*/
class SumSquaresTest {
		
	@Test
	void testSumSquares() {
		assertEquals(14, SumSquares.sumSquares(List.of(1, 2, 3)));
		assertEquals(14, SumSquares.sumSquares(List.of(1.0, 2, 3)));
		assertEqu"
cmpl-6tUHcKs7MwW8TLYyW4JPGpd310KVZ,/HumanEvalJava/src/main/java/original/id_134.java,68.86666941642761,length,"// CheckIfLastCharIsALetter.java
package original;

class CheckIfLastCharIsALetter {

    /**
     * * Create a function that returns True if the last character
     * of a given string is an alphabetical character and is not
     * a part of a word, and False otherwise.
     * Note: ""word"" is a group of characters separated by space.
     *
     * Examples:
     * checkIfLastCharIsALetter(""apple pie"") ➞ False
     * checkIfLastCharIsALetter(""apple pi e"") ➞ True
     * checkIfLastCharIsALetter(""apple pi e "") ➞ False
     * checkIfLastCharIsALetter("""") ➞ False
     *
     * > checkIfLastCharIsALetter(""apple"")
     * false
     * > checkIfLastCharIsALetter(""apple pi e"")
     * true
     * > checkIfLastCharIsALetter(""eeeee"")
     * false
     * > checkIfLastCharIsALetter(""A"")
     * true
     * > checkIfLastCharIsALetter(""Pumpkin pie "")
     * false
     * > checkIfLastCharIsALetter(""Pumpkin pie 1"")
     * false
     * > checkIfLastCharIsALetter("""")
     * false
     * > checkIfLastCharIsALetter(""eeeee e "")
     * false
     * > checkIfLastCharIsALetter(""apple pie"")
     * false
     * > checkIfLastCharIsALetter(""apple pi e "")
     * false
     */
    public static Boolean checkIfLastCharIsALetter(String txt) {
        if (txt.length() == 0) {
            return false;
        }
        char lastChar = txt.charAt(txt.length() - 1);
        if (Character.isLetter(lastChar)) {
            if (txt.length() == 1) {
                return true;
            }
            char secondLastChar = txt.charAt(txt.length() - 2);
            if (Character.isLetter(secondLastChar)) {
                return false;
            }
            return true;
        }
        return false;
    }
}
","// CheckIfLastCharIsALetterTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckIfLastCharIsALetter}.
* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.
*/
class CheckIfLastCharIsALetterTest {","// CheckIfLastCharIsALetterTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckIfLastCharIsALetter}.
* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.
*/
class CheckIfLastCharIsALetterTest {

	@Test
	void testCheckIfLastCharIsALetter() {
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple""));
		assertEquals(true, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pi e""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""eeeee""));
		assertEquals(true, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""A""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Pumpkin pie ""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Pumpkin pie 1""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""eeeee e ""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pie""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pi e ""));
	}
}

// CheckIfLastCharIsALetterTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckIfLastCharIsALetter}.
* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.
*/
class CheckIfLastCharIsALetterTest {
		
	@Test
	void testCheckIfLastCharIsALetter() {
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple""));
		assertEquals(true, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pi e""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""eeeee""));
		assertEquals(true, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""A""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Pumpkin pie ""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Pumpkin pie 1""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""eeeee e ""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pie""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pi e ""));
	}
}

// CheckIfLastCharIsALetterTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckIfLastCharIsALetter}.
* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.
*/
class CheckIfLastCharIsALetterTest {
		
	@Test
	void testCheckIfLastCharIsALetter() {
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple""));
		assertEquals(true, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pi e""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""eeeee""));
		assertEquals(true, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""A""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Pumpkin pie ""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Pumpkin pie 1""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""eeeee e ""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pie""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pi e ""));
	}
}

// CheckIfLastCharIsALetterTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckIfLastCharIsALetter}.
* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.
*/
class CheckIfLastCharIsALetterTest {
		
	@Test
	void testCheckIfLastCharIsALetter() {
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple""));
		assertEquals(true, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pi e""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""eeeee""));
		assertEquals(true, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""A""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Pumpkin pie ""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Pumpkin pie 1""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""eeeee e ""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pie""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pi e ""));
	}
}

// CheckIfLastCharIsALetterTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckIfLastCharIsALetter}.
* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.
*/
class CheckIfLastCharIsALetterTest {
		
	@Test
	void testCheckIfLastCharIsALetter() {
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple""));
		assertEquals(true, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""apple pi e""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""eeeee""));
		assertEquals(true, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""A""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Pumpkin pie ""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""Pumpkin pie 1""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""""));
		assertEquals(false, CheckIfLastCharIsALetter.checkIfLastCharIsALetter(""eeeee e ""));
		assertEquals(false, CheckIfLast"
cmpl-6tUIjd4SeS6r5zmizvij6xk20Kjw3,/HumanEvalJava/src/main/java/original/id_135.java,42.0574471950531,,"// CanArrange.java
package original;

import java.util.List;

class CanArrange {

    /**
     * Create a function which returns the largest index of an element which
     * is not greater than or equal to the element immediately preceding it. If
     * no such element exists then return -1. The given array will not contain
     * duplicate values.
     *
     * Examples:
     * canArrange([1,2,4,3,5]) = 3
     * canArrange([1,2,3]) = -1
     *
     * > canArrange([1, 2, 4, 3, 5])
     * 3
     * > canArrange([1, 2, 4, 5])
     * -1
     * > canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10])
     * 2
     * > canArrange([4, 8, 5, 7, 3])
     * 4
     * > canArrange([])
     * -1
     */
    public static int canArrange(List<Object> arr) {
        int max = -1;
        for (int i = 0; i < arr.size(); i++) {
            if (arr.get(i) instanceof Integer) {
                if (i > 0 && (int) arr.get(i) < (int) arr.get(i - 1)) {
                    max = i;
                }
            }
        }
        return max;
    }
}
","// CanArrangeTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CanArrange}.
* It contains ten unit test cases for the {@link CanArrange#canArrange(List)} method.
*/
class CanArrangeTest {","// CanArrangeTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CanArrange}.
* It contains ten unit test cases for the {@link CanArrange#canArrange(List)} method.
*/
class CanArrangeTest {

	/**
	* Test case for {@link CanArrange#canArrange(List)} method.
	* The test case checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
	* The test case passes if the method returns the correct index.
	*/
	@Test
	void testCanArrange() {
		List<Object> arr = List.of(1, 2, 4, 3, 5);
		int expected = 3;
		int actual = CanArrange.canArrange(arr);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link CanArrange#canArrange(List)} method.
	* The test case checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
	* The test case passes if the method returns the correct index.
	*/
	@Test
	void testCanArrange2() {
		List<Object> arr = List.of(1, 2, 4, 5);
		int expected = -1;
		int actual = CanArrange.canArrange(arr);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link CanArrange#canArrange(List)} method.
	* The test case checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
	* The test case passes if the method returns the correct index.
	*/
	@Test
	void testCanArrange3() {
		List<Object> arr = List.of(1, 4, 2, 5, 6, 7, 8, 9, 10);
		int expected = 2;
		int actual = CanArrange.canArrange(arr);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link CanArrange#canArrange(List)} method.
	* The test case checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
	* The test case passes if the method returns the correct index.
	*/
	@Test
	void testCanArrange4() {
		List<Object> arr = List.of(4, 8, 5, 7, 3);
		int expected = 4;
		int actual = CanArrange.canArrange(arr);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link CanArrange#canArrange(List)} method.
	* The test case checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
	* The test case passes if the method returns the correct index.
	*/
	@Test
	void testCanArrange5() {
		List<Object> arr = List.of(1, 2, 3);
		int expected = -1;
		int actual = CanArrange.canArrange(arr);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link CanArrange#canArrange(List)} method.
	* The test case checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
	* The test case passes if the method returns the correct index.
	*/
	@Test
	void testCanArrange6() {
		List<Object> arr = List.of(1, 2, 4, 3, 5, 6, 7, 8, 9, 10);
		int expected = 3;
		int actual = CanArrange.canArrange(arr);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link CanArrange#canArrange(List)} method.
	* The test case checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
	* The test case passes if the method returns the correct index.
	*/
	@Test
	void testCanArrange7() {
		List<Object> arr = List.of(1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);
		int expected = 3;
		int actual = CanArrange.canArrange(arr);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link CanArrange#canArrange(List)} method.
	* The test case checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
	* The test case passes if the method returns the correct index.
	*/
	@Test
	void testCanArrange8() {
		List<Object> arr = List.of(1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30);
		int expected = 3;
		int actual = CanArrange.canArrange(arr);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link CanArrange#canArrange(List)} method.
	* The test case checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
	* The test case passes if the method returns the correct index.
	*/
	@Test
	void testCanArrange9() {
		List<Object> arr = List.of(1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40);
		int expected = 3;
		int actual = CanArrange.canArrange(arr);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link CanArrange#canArrange(List)} method.
	* The test case checks if the method returns the correct index of the element which is not greater than or equal to the element immediately preceding it.
	* The test case passes if the method returns the correct index.
	*/
	@Test
	void testCanArrange10() {
		List<Object> arr = List.of();
		int expected = -1;
		int actual = CanArrange.canArrange(arr);
		assertEquals(expected, actual);
	}
}"
cmpl-6tUJmXV6wIBHWShzSLQiKCujWsiBj,/HumanEvalJava/src/main/java/original/id_136.java,53.009697914123535,stop,"// LargestSmallestIntegers.java
package original;

import java.util.ArrayList;
import java.util.List;

class LargestSmallestIntegers {

    /**
     * * Create a function that returns a tuple (a, b), where 'a' is
     * the largest of negative integers, and 'b' is the smallest
     * of positive integers in a list.
     * If there is no negative or positive integers, return them as None.
     *
     * Examples:
     * largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)
     * largestSmallestIntegers([]) == (None, None)
     * largestSmallestIntegers([0]) == (None, None)
     *
     * > largestSmallestIntegers([2, 4, 1, 3, 5, 7])
     * [null, 1]
     * > largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])
     * [null, 1]
     * > largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])
     * [-2, 1]
     * > largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])
     * [-7, 2]
     * > largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])
     * [-9, 2]
     * > largestSmallestIntegers([])
     * [null, null]
     * > largestSmallestIntegers([0])
     * [null, null]
     * > largestSmallestIntegers([-1, -3, -5, -6])
     * [-1, null]
     * > largestSmallestIntegers([-1, -3, -5, -6, 0])
     * [-1, null]
     * > largestSmallestIntegers([-6, -4, -4, -3, 1])
     * [-3, 1]
     * > largestSmallestIntegers([-6, -4, -4, -3, -100, 1])
     * [-3, 1]
     */
    public static List<Integer> largestSmallestIntegers(List<Object> lst) {
        List<Integer> result = new ArrayList<Integer>();
        int largestNegative = Integer.MIN_VALUE;
        int smallestPositive = Integer.MAX_VALUE;
        for (int i = 0; i < lst.size(); i++) {
            int curr = (Integer) lst.get(i);
            if (curr < 0) {
                if (curr > largestNegative) {
                    largestNegative = curr;
                }
            } else if (curr > 0) {
                if (curr < smallestPositive) {
                    smallestPositive = curr;
                }
            }
        }
        if (largestNegative == Integer.MIN_VALUE) {
            result.add(null);
        } else {
            result.add(largestNegative);
        }
        if (smallestPositive == Integer.MAX_VALUE) {
            result.add(null);
        } else {
            result.add(smallestPositive);
        }
        return result;
    }
}
","// LargestSmallestIntegersTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestSmallestIntegers}.
* It contains ten unit test cases for the {@link LargestSmallestIntegers#largestSmallestIntegers(List)} method.
*/
class LargestSmallestIntegersTest {","// LargestSmallestIntegersTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestSmallestIntegers}.
* It contains ten unit test cases for the {@link LargestSmallestIntegers#largestSmallestIntegers(List)} method.
*/
class LargestSmallestIntegersTest {

	@Test
	void testLargestSmallestIntegers() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(2);
		lst.add(4);
		lst.add(1);
		lst.add(3);
		lst.add(5);
		lst.add(7);
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(null);
		expected.add(1);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
		
		lst = new ArrayList<Object>();
		expected = new ArrayList<Integer>();
		expected.add(null);
		expected.add(null);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
		
		lst = new ArrayList<Object>();
		lst.add(0);
		expected = new ArrayList<Integer>();
		expected.add(null);
		expected.add(null);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
		
		lst = new ArrayList<Object>();
		lst.add(2);
		lst.add(4);
		lst.add(1);
		lst.add(3);
		lst.add(5);
		lst.add(7);
		lst.add(0);
		expected = new ArrayList<Integer>();
		expected.add(null);
		expected.add(1);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
		
		lst = new ArrayList<Object>();
		lst.add(1);
		lst.add(3);
		lst.add(2);
		lst.add(4);
		lst.add(5);
		lst.add(6);
		lst.add(-2);
		expected = new ArrayList<Integer>();
		expected.add(-2);
		expected.add(1);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
		
		lst = new ArrayList<Object>();
		lst.add(4);
		lst.add(5);
		lst.add(3);
		lst.add(6);
		lst.add(2);
		lst.add(7);
		lst.add(-7);
		expected = new ArrayList<Integer>();
		expected.add(-7);
		expected.add(2);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
		
		lst = new ArrayList<Object>();
		lst.add(7);
		lst.add(3);
		lst.add(8);
		lst.add(4);
		lst.add(9);
		lst.add(2);
		lst.add(5);
		lst.add(-9);
		expected = new ArrayList<Integer>();
		expected.add(-9);
		expected.add(2);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
		
		lst = new ArrayList<Object>();
		expected = new ArrayList<Integer>();
		expected.add(null);
		expected.add(null);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
		
		lst = new ArrayList<Object>();
		lst.add(0);
		expected = new ArrayList<Integer>();
		expected.add(null);
		expected.add(null);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
		
		lst = new ArrayList<Object>();
		lst.add(-1);
		lst.add(-3);
		lst.add(-5);
		lst.add(-6);
		expected = new ArrayList<Integer>();
		expected.add(-1);
		expected.add(null);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
		
		lst = new ArrayList<Object>();
		lst.add(-1);
		lst.add(-3);
		lst.add(-5);
		lst.add(-6);
		lst.add(0);
		expected = new ArrayList<Integer>();
		expected.add(-1);
		expected.add(null);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
		
		lst = new ArrayList<Object>();
		lst.add(-6);
		lst.add(-4);
		lst.add(-4);
		lst.add(-3);
		lst.add(1);
		expected = new ArrayList<Integer>();
		expected.add(-3);
		expected.add(1);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
		
		lst = new ArrayList<Object>();
		lst.add(-6);
		lst.add(-4);
		lst.add(-4);
		lst.add(-3);
		lst.add(-100);
		lst.add(1);
		expected = new ArrayList<Integer>();
		expected.add(-3);
		expected.add(1);
		assertEquals(expected, LargestSmallestIntegers.largestSmallestIntegers(lst));
	}
}"
cmpl-6tUKp0uaYYUVi08lvDZUtur2l9xMf,/HumanEvalJava/src/main/java/original/id_137.java,55.888203859329224,length,"// CompareOne.java
package original;

class CompareOne {

    /**
     * Create a function that takes integers, floats, or strings representing
     * real numbers, and returns the larger variable in its given variable type.
     * Return null if the values are equal.
     * Note: If a real number is represented as a string, the floating point might be . or ,
     *
     * compareOne(1, 2.5) ➞ 2.5
     * compareOne(1, ""2,3"") ➞ ""2,3""
     * compareOne(""5,1"", ""6"") ➞ ""6""
     * compareOne(""1"", 1) ➞ None
     *
     * > compareOne(1, 2)
     * 2
     * > compareOne(1, 2.5)
     * 2.5
     * > compareOne(2, 3)
     * 3
     * > compareOne(5, 6)
     * 6
     * > compareOne(1, ""2,3"")
     * ""2,3""
     * > compareOne(""5,1"", ""6"")
     * ""6""
     * > compareOne(""1"", ""2"")
     * ""2""
     * > compareOne(""1"", 1)
     * null
     */
    public static Object compareOne(Object a, Object b) {
        Object temp_a = a;
        Object temp_b = b;
        if (temp_a instanceof String) {
            temp_a = ((String) temp_a).replace(',', '.');
        }
        if (temp_b instanceof String) {
            temp_b = ((String) temp_b).replace(',', '.');
        }
        if (Float.parseFloat(temp_a.toString()) == Float.parseFloat(temp_b.toString())) {
            return null;
        }
        return Float.parseFloat(temp_a.toString()) > Float.parseFloat(temp_b.toString()) ? a : b;
    }
}
","// CompareOneTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CompareOne}.
* It contains ten unit test cases for the {@link CompareOne#compareOne(Object, Object)} method.
*/
class CompareOneTest {","// CompareOneTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CompareOne}.
* It contains ten unit test cases for the {@link CompareOne#compareOne(Object, Object)} method.
*/
class CompareOneTest {

	@Test
	void testCompareOne() {
		assertEquals(2.5, CompareOne.compareOne(1, 2.5));
		assertEquals(""2,3"", CompareOne.compareOne(1, ""2,3""));
		assertEquals(""6"", CompareOne.compareOne(""5,1"", ""6""));
		assertEquals(null, CompareOne.compareOne(""1"", 1));
		assertEquals(2, CompareOne.compareOne(1, 2));
		assertEquals(2.5, CompareOne.compareOne(1, 2.5));
		assertEquals(3, CompareOne.compareOne(2, 3));
		assertEquals(6, CompareOne.compareOne(5, 6));
		assertEquals(""2,3"", CompareOne.compareOne(1, ""2,3""));
		assertEquals(""6"", CompareOne.compareOne(""5,1"", ""6""));
		assertEquals(""2"", CompareOne.compareOne(""1"", ""2""));
		assertEquals(null, CompareOne.compareOne(""1"", 1));
	}
}

// CompareOneTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CompareOne}.
* It contains ten unit test cases for the {@link CompareOne#compareOne(Object, Object)} method.
*/
class CompareOneTest {
		
	@Test
	void testCompareOne() {
		assertEquals(2.5, CompareOne.compareOne(1, 2.5));
		assertEquals(""2,3"", CompareOne.compareOne(1, ""2,3""));
		assertEquals(""6"", CompareOne.compareOne(""5,1"", ""6""));
		assertEquals(null, CompareOne.compareOne(""1"", 1));
		assertEquals(2, CompareOne.compareOne(1, 2));
		assertEquals(2.5, CompareOne.compareOne(1, 2.5));
		assertEquals(3, CompareOne.compareOne(2, 3));
		assertEquals(6, CompareOne.compareOne(5, 6));
		assertEquals(""2,3"", CompareOne.compareOne(1, ""2,3""));
		assertEquals(""6"", CompareOne.compareOne(""5,1"", ""6""));
		assertEquals(""2"", CompareOne.compareOne(""1"", ""2""));
		assertEquals(null, CompareOne.compareOne(""1"", 1));
	}
}

// CompareOneTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CompareOne}.
* It contains ten unit test cases for the {@link CompareOne#compareOne(Object, Object)} method.
*/
class CompareOneTest {
		
	@Test
	void testCompareOne() {
		assertEquals(2.5, CompareOne.compareOne(1, 2.5));
		assertEquals(""2,3"", CompareOne.compareOne(1, ""2,3""));
		assertEquals(""6"", CompareOne.compareOne(""5,1"", ""6""));
		assertEquals(null, CompareOne.compareOne(""1"", 1));
		assertEquals(2, CompareOne.compareOne(1, 2));
		assertEquals(2.5, CompareOne.compareOne(1, 2.5));
		assertEquals(3, CompareOne.compareOne(2, 3));
		assertEquals(6, CompareOne.compareOne(5, 6));
		assertEquals(""2,3"", CompareOne.compareOne(1, ""2,3""));
		assertEquals(""6"", CompareOne.compareOne(""5,1"", ""6""));
		assertEquals(""2"", CompareOne.compareOne(""1"", ""2""));
		assertEquals(null, CompareOne.compareOne(""1"", 1));
	}
}

// CompareOneTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CompareOne}.
* It contains ten unit test cases for the {@link CompareOne#compareOne(Object, Object)} method.
*/
class CompareOneTest {
		
	@Test
	void testCompareOne() {
		assertEquals(2.5, CompareOne.compareOne(1, 2.5));
		assertEquals(""2,3"", CompareOne.compareOne(1, ""2,3""));
		assertEquals(""6"", CompareOne.compareOne(""5,1"", ""6""));
		assertEquals(null, CompareOne.compareOne(""1"", 1));
		assertEquals(2, CompareOne.compareOne(1, 2));
		assertEquals(2.5, CompareOne.compareOne(1, 2.5));
		assertEquals(3, CompareOne.compareOne(2, 3));
		assertEquals(6, CompareOne.compareOne(5, 6));
		assertEquals(""2,3"", CompareOne.compareOne(1, ""2,3""));
		assertEquals(""6"", CompareOne.compareOne(""5,1"", ""6""));
		assertEquals(""2"", CompareOne.compareOne(""1"", ""2""));
		assertEquals(null, CompareOne.compareOne(""1"", 1));
	}
}

// CompareOneTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CompareOne}.
* It contains ten unit test cases for the {@link CompareOne#compareOne(Object, Object)} method.
*/
class CompareOneTest {
		
	@Test
	void testCompareOne() {
		assertEquals(2.5, CompareOne.compareOne(1, 2.5));
		assertEquals(""2,3"", CompareOne.compareOne(1, ""2,3""));
		assertEquals(""6"", CompareOne.compareOne(""5,1"", ""6""));
		assertEquals(null, CompareOne.compareOne(""1"", 1));
		assertEquals(2, CompareOne.compareOne(1, 2));
		assertEquals(2.5, CompareOne.compareOne(1, 2.5));
		assertEquals(3, CompareOne.compareOne(2, 3));
		assertEquals(6, CompareOne.compareOne(5, 6));
		assertEquals(""2,3"", CompareOne.compareOne(1, ""2,3""));
		assertEquals(""6"", CompareOne.compareOne(""5,1"", ""6""));
		assertEquals(""2"", CompareOne.compareOne(""1"", ""2""));
		assertEquals(null, CompareOne.compareOne(""1"", 1));
	}
}

// CompareOneTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CompareOne}.
* It contains ten unit test cases for the {@link CompareOne#compareOne(Object, Object)} method.
*/
class CompareOneTest {
		
	@Test
	void testCompareOne() {
		assertEquals(2.5, CompareOne.compareOne(1, 2.5));
		assertEquals(""2,3"", CompareOne.compareOne(1, ""2,3""));
		assertEquals(""6"", CompareOne.compareOne(""5,1"", ""6"")"
cmpl-6tULs8gtvukIuyACPec7jxCnQk8R4,/HumanEvalJava/src/main/java/original/id_138.java,55.94122672080994,length,"// IsEqualToSumEven.java
package original;

class IsEqualToSumEven {

    /**
     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
     * Example
     * isEqualToSumEven(4) == False
     * isEqualToSumEven(6) == False
     * isEqualToSumEven(8) == True
     *
     * > isEqualToSumEven(4)
     * false
     * > isEqualToSumEven(6)
     * false
     * > isEqualToSumEven(8)
     * true
     * > isEqualToSumEven(10)
     * true
     * > isEqualToSumEven(11)
     * false
     * > isEqualToSumEven(12)
     * true
     * > isEqualToSumEven(13)
     * false
     * > isEqualToSumEven(16)
     * true
     */
    public static Boolean isEqualToSumEven(int n) {
        if (n < 8) {
            return false;
        }
        return n % 2 == 0;
    }
}
","// IsEqualToSumEvenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsEqualToSumEven}.
* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.
*/
class IsEqualToSumEvenTest {","// IsEqualToSumEvenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsEqualToSumEven}.
* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.
*/
class IsEqualToSumEvenTest {

	@Test
	void testIsEqualToSumEven() {
		assertFalse(IsEqualToSumEven.isEqualToSumEven(4));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(6));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(8));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(10));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(11));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(12));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(13));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(16));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(17));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(18));
	}
}

// IsEqualToSumEvenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsEqualToSumEven}.
* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.
*/
class IsEqualToSumEvenTest {
		
	@Test
	void testIsEqualToSumEven() {
		assertFalse(IsEqualToSumEven.isEqualToSumEven(4));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(6));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(8));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(10));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(11));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(12));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(13));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(16));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(17));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(18));
	}
}

// IsEqualToSumEvenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsEqualToSumEven}.
* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.
*/
class IsEqualToSumEvenTest {
		
	@Test
	void testIsEqualToSumEven() {
		assertFalse(IsEqualToSumEven.isEqualToSumEven(4));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(6));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(8));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(10));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(11));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(12));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(13));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(16));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(17));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(18));
	}
}

// IsEqualToSumEvenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsEqualToSumEven}.
* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.
*/
class IsEqualToSumEvenTest {
		
	@Test
	void testIsEqualToSumEven() {
		assertFalse(IsEqualToSumEven.isEqualToSumEven(4));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(6));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(8));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(10));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(11));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(12));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(13));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(16));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(17));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(18));
	}
}

// IsEqualToSumEvenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsEqualToSumEven}.
* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.
*/
class IsEqualToSumEvenTest {
		
	@Test
	void testIsEqualToSumEven() {
		assertFalse(IsEqualToSumEven.isEqualToSumEven(4));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(6));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(8));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(10));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(11));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(12));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(13));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(16));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(17));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(18));
	}
}

// IsEqualToSumEvenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsEqualToSumEven}.
* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.
*/
class IsEqualToSumEvenTest {
		
	@Test
	void testIsEqualToSumEven() {
		assertFalse(IsEqualToSumEven.isEqualToSumEven(4));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(6));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(8));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(10));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(11));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(12));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(13));
		assertTrue(IsEqualToSumEven.isEqualToSumEven(16));
		assertFalse(IsEqualToSumEven.isEqualToSumEven(17));
		assertTrue(IsEqualToSumEven.isEqual"
cmpl-6tUMvR0p8gCCwZEkn4HMqnH2Fhal6,/HumanEvalJava/src/main/java/original/id_139.java,57.42897582054138,length,"// SpecialFactorial.java
package original;

class SpecialFactorial {

    /**
     * The Brazilian factorial is defined as:
     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
     * where n > 0
     *
     * For example:
     * >>> specialFactorial(4)
     * 288
     *
     * The function will receive an integer as input and should return the special
     * factorial of this integer.
     *
     * > specialFactorial(4)
     * 288
     * > specialFactorial(5)
     * 34560
     * > specialFactorial(7)
     * 125411328000L
     * > specialFactorial(1)
     * 1
     */
    public static long specialFactorial(int n) {
        long res = 1;
        for (int i = 1; i <= n; i++) {
            res *= factorial(i);
        }
        return res;
    }

    private static long factorial(int n) {
        long res = 1;
        for (int i = 1; i <= n; i++) {
            res *= i;
        }
        return res;
    }
}
","// SpecialFactorialTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SpecialFactorial}.
* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.
*/
class SpecialFactorialTest {","// SpecialFactorialTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SpecialFactorial}.
* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.
*/
class SpecialFactorialTest {

	@Test
	void testSpecialFactorial() {
		assertEquals(1, SpecialFactorial.specialFactorial(1));
		assertEquals(288, SpecialFactorial.specialFactorial(4));
		assertEquals(34560, SpecialFactorial.specialFactorial(5));
		assertEquals(125411328000L, SpecialFactorial.specialFactorial(7));
		assertEquals(1, SpecialFactorial.specialFactorial(0));
		assertEquals(1, SpecialFactorial.specialFactorial(-1));
		assertEquals(1, SpecialFactorial.specialFactorial(-2));
		assertEquals(1, SpecialFactorial.specialFactorial(-3));
		assertEquals(1, SpecialFactorial.specialFactorial(-4));
		assertEquals(1, SpecialFactorial.specialFactorial(-5));
	}
}

// SpecialFactorialTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SpecialFactorial}.
* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.
*/
class SpecialFactorialTest {
		
	@Test
	void testSpecialFactorial() {
		assertEquals(1, SpecialFactorial.specialFactorial(1));
		assertEquals(288, SpecialFactorial.specialFactorial(4));
		assertEquals(34560, SpecialFactorial.specialFactorial(5));
		assertEquals(125411328000L, SpecialFactorial.specialFactorial(7));
		assertEquals(1, SpecialFactorial.specialFactorial(0));
		assertEquals(1, SpecialFactorial.specialFactorial(-1));
		assertEquals(1, SpecialFactorial.specialFactorial(-2));
		assertEquals(1, SpecialFactorial.specialFactorial(-3));
		assertEquals(1, SpecialFactorial.specialFactorial(-4));
		assertEquals(1, SpecialFactorial.specialFactorial(-5));
	}
}

// SpecialFactorialTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SpecialFactorial}.
* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.
*/
class SpecialFactorialTest {
		
	@Test
	void testSpecialFactorial() {
		assertEquals(1, SpecialFactorial.specialFactorial(1));
		assertEquals(288, SpecialFactorial.specialFactorial(4));
		assertEquals(34560, SpecialFactorial.specialFactorial(5));
		assertEquals(125411328000L, SpecialFactorial.specialFactorial(7));
		assertEquals(1, SpecialFactorial.specialFactorial(0));
		assertEquals(1, SpecialFactorial.specialFactorial(-1));
		assertEquals(1, SpecialFactorial.specialFactorial(-2));
		assertEquals(1, SpecialFactorial.specialFactorial(-3));
		assertEquals(1, SpecialFactorial.specialFactorial(-4));
		assertEquals(1, SpecialFactorial.specialFactorial(-5));
	}
}

// SpecialFactorialTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SpecialFactorial}.
* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.
*/
class SpecialFactorialTest {
		
	@Test
	void testSpecialFactorial() {
		assertEquals(1, SpecialFactorial.specialFactorial(1));
		assertEquals(288, SpecialFactorial.specialFactorial(4));
		assertEquals(34560, SpecialFactorial.specialFactorial(5));
		assertEquals(125411328000L, SpecialFactorial.specialFactorial(7));
		assertEquals(1, SpecialFactorial.specialFactorial(0));
		assertEquals(1, SpecialFactorial.specialFactorial(-1));
		assertEquals(1, SpecialFactorial.specialFactorial(-2));
		assertEquals(1, SpecialFactorial.specialFactorial(-3));
		assertEquals(1, SpecialFactorial.specialFactorial(-4));
		assertEquals(1, SpecialFactorial.specialFactorial(-5));
	}
}

// SpecialFactorialTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SpecialFactorial}.
* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.
*/
class SpecialFactorialTest {
		
	@Test
	void testSpecialFactorial() {
		assertEquals(1, SpecialFactorial.specialFactorial(1));
		assertEquals(288, SpecialFactorial.specialFactorial(4));
		assertEquals(34560, SpecialFactorial.specialFactorial(5));
		assertEquals(125411328000L, SpecialFactorial.specialFactorial(7));
		assertEquals(1, SpecialFactorial.specialFactorial(0));
		assertEquals(1, SpecialFactorial.specialFactorial(-1));
		assertEquals(1, SpecialFactorial.specialFactorial(-2));
		assertEquals(1, SpecialFactorial.specialFactorial(-3));
		assertEquals(1, SpecialFactorial.specialFactorial(-4));
		assertEquals(1, SpecialFactorial.specialFactorial(-5));
	}
}

// SpecialFactorialTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SpecialFactorial}.
* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.
*/
class SpecialFactorialTest {
		
	@Test
	void testSpecialFactorial() {
		assertEquals(1, SpecialFactorial.specialFactorial(1));
		assertEquals(288, SpecialFactorial.specialFactorial(4));
		assertEquals(34560, SpecialFactorial.specialFactorial(5));
		assertEquals(125411328000L, SpecialFactorial.specialFactorial(7));
		assertEquals(1, SpecialFactorial.specialFactorial(0));
		assertEquals(1, SpecialFactorial.specialFactorial(-1));
		assertEquals(1, SpecialFactorial.specialFactorial(-2));
		assertEquals(1, SpecialFactorial.specialFactorial(-3));
		assertEquals(1, SpecialFactorial.specialFactorial(-4));
		assertEquals(1, SpecialFactorial.specialFactorial(-5));
	}
}

// SpecialFactorialTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SpecialFactorial}.
* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.
*/
class SpecialFactorialTest {
		
	@Test
	void testSpecialFactorial() {
		assertEquals(1, SpecialFactorial.specialFactorial(1));
		assertEquals(288, SpecialFactorial.specialFactorial(4));
		assertEquals(34560, SpecialFactorial.specialFactorial(5));
		assertEquals(125411328000L, SpecialFactorial.specialFactorial(7));
		assertEquals(1, SpecialFactorial.specialFactorial(0));
		assertEquals(1, SpecialFactorial.special"
cmpl-6tUNyg1EKiBB0hJffpr1i0IFkl2bZ,/HumanEvalJava/src/main/java/original/id_14.java,47.56126403808594,stop,"// AllPrefixes.java
package original;

import java.util.ArrayList;
import java.util.List;

class AllPrefixes {

    /**
     * Return list of all prefixes from shortest to longest of the input string.
     *
     * > allPrefixes(""abc"")
     * [""a"", ""ab"", ""abc""]
     * > allPrefixes("""")
     * []
     * > allPrefixes(""asdfgh"")
     * [""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""]
     * > allPrefixes(""WWW"")
     * [""W"", ""WW"", ""WWW""]
     */
    public static List<Object> allPrefixes(String string) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 0; i < string.length(); i++) {
            result.add(string.substring(0, i + 1));
        }
        return result;
    }
}
","// AllPrefixesTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AllPrefixes}.
* It contains ten unit test cases for the {@link AllPrefixes#allPrefixes(String)} method.
*/
class AllPrefixesTest {","// AllPrefixesTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AllPrefixes}.
* It contains ten unit test cases for the {@link AllPrefixes#allPrefixes(String)} method.
*/
class AllPrefixesTest {

		/**
		* Test case for {@link AllPrefixes#allPrefixes(String)} method.
		* It tests the method with a string of length 0.
		*/
		@Test
		void testAllPrefixes_EmptyString() {
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = AllPrefixes.allPrefixes("""");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link AllPrefixes#allPrefixes(String)} method.
		* It tests the method with a string of length 1.
		*/
		@Test
		void testAllPrefixes_StringOfLength1() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(""a"");
				List<Object> actual = AllPrefixes.allPrefixes(""a"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link AllPrefixes#allPrefixes(String)} method.
		* It tests the method with a string of length 2.
		*/
		@Test
		void testAllPrefixes_StringOfLength2() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(""a"");
				expected.add(""ab"");
				List<Object> actual = AllPrefixes.allPrefixes(""ab"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link AllPrefixes#allPrefixes(String)} method.
		* It tests the method with a string of length 3.
		*/
		@Test
		void testAllPrefixes_StringOfLength3() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(""a"");
				expected.add(""ab"");
				expected.add(""abc"");
				List<Object> actual = AllPrefixes.allPrefixes(""abc"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link AllPrefixes#allPrefixes(String)} method.
		* It tests the method with a string of length 4.
		*/
		@Test
		void testAllPrefixes_StringOfLength4() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(""a"");
				expected.add(""ab"");
				expected.add(""abc"");
				expected.add(""abcd"");
				List<Object> actual = AllPrefixes.allPrefixes(""abcd"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link AllPrefixes#allPrefixes(String)} method.
		* It tests the method with a string of length 5.
		*/
		@Test
		void testAllPrefixes_StringOfLength5() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(""a"");
				expected.add(""ab"");
				expected.add(""abc"");
				expected.add(""abcd"");
				expected.add(""abcde"");
				List<Object> actual = AllPrefixes.allPrefixes(""abcde"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link AllPrefixes#allPrefixes(String)} method.
		* It tests the method with a string of length 6.
		*/
		@Test
		void testAllPrefixes_StringOfLength6() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(""a"");
				expected.add(""ab"");
				expected.add(""abc"");
				expected.add(""abcd"");
				expected.add(""abcde"");
				expected.add(""abcdef"");
				List<Object> actual = AllPrefixes.allPrefixes(""abcdef"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link AllPrefixes#allPrefixes(String)} method.
		* It tests the method with a string of length 7.
		*/
		@Test
		void testAllPrefixes_StringOfLength7() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(""a"");
				expected.add(""ab"");
				expected.add(""abc"");
				expected.add(""abcd"");
				expected.add(""abcde"");
				expected.add(""abcdef"");
				expected.add(""abcdefg"");
				List<Object> actual = AllPrefixes.allPrefixes(""abcdefg"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link AllPrefixes#allPrefixes(String)} method.
		* It tests the method with a string of length 8.
		*/
		@Test
		void testAllPrefixes_StringOfLength8() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(""a"");
				expected.add(""ab"");
				expected.add(""abc"");
				expected.add(""abcd"");
				expected.add(""abcde"");
				expected.add(""abcdef"");
				expected.add(""abcdefg"");
				expected.add(""abcdefgh"");
				List<Object> actual = AllPrefixes.allPrefixes(""abcdefgh"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link AllPrefixes#allPrefixes(String)} method.
		* It tests the method with a string of length 9.
		*/
		@Test
		void testAllPrefixes_StringOfLength9() {
				List<Object> expected = new ArrayList<Object>();
				expected.add(""a"");
				expected.add(""ab"");
				expected.add(""abc"");
				expected.add(""abcd"");
				expected.add(""abcde"");
				expected.add(""abcdef"");
				expected.add(""abcdefg"");
				expected.add(""abcdefgh"");
				expected.add(""abcdefghi"");
				List<Object> actual = AllPrefixes.allPrefixes(""abcdefghi"");
				assertEquals(expected, actual);
		}
}"
cmpl-6tUP1lMCVRmLmb8Qav5n3rVVhqmuU,/HumanEvalJava/src/main/java/original/id_140.java,46.60327172279358,length,"// FixSpaces.java
package original;

class FixSpaces {

    /**
     * * Given a string text, replace all spaces in it with underscores,
     * and if a string has more than 2 consecutive spaces,
     * then replace all consecutive spaces with -
     *
     * fixSpaces(""Example"") == ""Example""
     * fixSpaces(""Example 1"") == ""Example_1""
     * fixSpaces("" Example 2"") == ""_Example_2""
     * fixSpaces("" Example   3"") == ""_Example-3""
     *
     * > fixSpaces(""Example"")
     * ""Example""
     * > fixSpaces(""Mudasir Hanif "")
     * ""Mudasir_Hanif_""
     * > fixSpaces(""Yellow Yellow  Dirty  Fellow"")
     * ""Yellow_Yellow__Dirty__Fellow""
     * > fixSpaces(""Exa   mple"")
     * ""Exa-mple""
     * > fixSpaces(""   Exa 1 2 2 mple"")
     * ""-Exa_1_2_2_mple""
     */
    public static String fixSpaces(String text) {
        String new_text = """";
        int i = 0;
        int start = 0;
        int end = 0;
        while (i < text.length()) {
            if (text.charAt(i) == ' ') {
                end += 1;
            } else {
                if (end - start > 2) {
                    new_text += ""-"" + text.charAt(i);
                } else if (end - start > 0) {
                    new_text += ""_"".repeat(end - start) + text.charAt(i);
                } else {
                    new_text += text.charAt(i);
                }
                start = i + 1;
                end = i + 1;
            }
            i += 1;
        }
        if (end - start > 2) {
            new_text += ""-"";
        } else if (end - start > 0) {
            new_text += ""_"";
        }
        return new_text;
    }
}
","// FixSpacesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FixSpaces}.
* It contains ten unit test cases for the {@link FixSpaces#fixSpaces(String)} method.
*/
class FixSpacesTest {","// FixSpacesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FixSpaces}.
* It contains ten unit test cases for the {@link FixSpaces#fixSpaces(String)} method.
*/
class FixSpacesTest {

		@Test
		void testFixSpaces() {
				assertEquals(""Example"", FixSpaces.fixSpaces(""Example""));
				assertEquals(""Example_1"", FixSpaces.fixSpaces(""Example 1""));
				assertEquals(""_Example_2"", FixSpaces.fixSpaces("" Example 2""));
				assertEquals(""_Example-3"", FixSpaces.fixSpaces("" Example   3""));
				assertEquals(""Mudasir_Hanif_"", FixSpaces.fixSpaces(""Mudasir Hanif ""));
				assertEquals(""Yellow_Yellow__Dirty__Fellow"", FixSpaces.fixSpaces(""Yellow Yellow  Dirty  Fellow""));
				assertEquals(""Exa-mple"", FixSpaces.fixSpaces(""Exa   mple""));
				assertEquals(""-Exa_1_2_2_mple"", FixSpaces.fixSpaces(""   Exa 1 2 2 mple""));
				assertEquals(""-"", FixSpaces.fixSpaces(""   ""));
				assertEquals("""", FixSpaces.fixSpaces(""""));
		}
}

// FixSpaces.java
package refactored;

class FixSpaces {

    /**
     * * Given a string text, replace all spaces in it with underscores,
     * and if a string has more than 2 consecutive spaces,
     * then replace all consecutive spaces with -
     *
     * fixSpaces(""Example"") == ""Example""
     * fixSpaces(""Example 1"") == ""Example_1""
     * fixSpaces("" Example 2"") == ""_Example_2""
     * fixSpaces("" Example   3"") == ""_Example-3""
     *
     * > fixSpaces(""Example"")
     * ""Example""
     * > fixSpaces(""Mudasir Hanif "")
     * ""Mudasir_Hanif_""
     * > fixSpaces(""Yellow Yellow  Dirty  Fellow"")
     * ""Yellow_Yellow__Dirty__Fellow""
     * > fixSpaces(""Exa   mple"")
     * ""Exa-mple""
     * > fixSpaces(""   Exa 1 2 2 mple"")
     * ""-Exa_1_2_2_mple""
     */
    public static String fixSpaces(String text) {
        String new_text = """";
        int i = 0;
        int start = 0;
        int end = 0;
        while (i < text.length()) {
            if (text.charAt(i) == ' ') {
                end += 1;
            } else {
                if (end - start > 2) {
                    new_text += ""-"" + text.charAt(i);
                } else if (end - start > 0) {
                    new_text += ""_"".repeat(end - start) + text.charAt(i);
                } else {
                    new_text += text.charAt(i);
                }
                start = i + 1;
                end = i + 1;
            }
            i += 1;
        }
        if (end - start > 2) {
            new_text += ""-"";
        } else if (end - start > 0) {
            new_text += ""_"";
        }
        return new_text;
    }
}

// FixSpacesTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FixSpaces}.
* It contains ten unit test cases for the {@link FixSpaces#fixSpaces(String)} method.
*/
class FixSpacesTest {
		
		@Test
		void testFixSpaces() {
				assertEquals(""Example"", FixSpaces.fixSpaces(""Example""));
				assertEquals(""Example_1"", FixSpaces.fixSpaces(""Example 1""));
				assertEquals(""_Example_2"", FixSpaces.fixSpaces("" Example 2""));
				assertEquals(""_Example-3"", FixSpaces.fixSpaces("" Example   3""));
				assertEquals(""Mudasir_Hanif_"", FixSpaces.fixSpaces(""Mudasir Hanif ""));
				assertEquals(""Yellow_Yellow__Dirty__Fellow"", FixSpaces.fixSpaces(""Yellow Yellow  Dirty  Fellow""));
				assertEquals(""Exa-mple"", FixSpaces.fixSpaces(""Exa   mple""));
				assertEquals(""-Exa_1_2_2_mple"", FixSpaces.fixSpaces(""   Exa 1 2 2 mple""));
				assertEquals(""-"", FixSpaces.fixSpaces(""   ""));
				assertEquals("""", FixSpaces.fixSpaces(""""));
		}
}

// FixSpaces.java
package refactored;

class FixSpaces {

    /**
     * * Given a string text, replace all spaces in it with underscores,
     * and if a string has more than 2 consecutive spaces,
     * then replace all consecutive spaces with -
     *
     * fixSpaces(""Example"") == ""Example""
     * fixSpaces(""Example 1"") == ""Example_1""
     * fixSpaces("" Example 2"") == ""_Example_2""
     * fixSpaces("" Example   3"") == ""_Example-3""
     *
     * > fixSpaces(""Example"")
     * ""Example""
     * > fixSpaces(""Mudasir Hanif "")
     * ""Mudasir_Hanif_""
     * > fixSpaces(""Yellow Yellow  Dirty  Fellow"")
     * ""Yellow_Yellow__Dirty__Fellow""
     * > fixSpaces(""Exa   mple"")
     * ""Exa-mple""
     * > fixSpaces(""   Exa 1 2 2 mple"")
     * ""-Exa_1_2_2_mple""
     */
    public static String fixSpaces(String text) {
        String new_text = """";
        int i = 0;
        int start = 0;
        int end = 0;
        while (i < text.length()) {
            if (text.charAt(i) == ' ') {
                end += 1;
            } else {
                if (end - start > 2) {
                    new_text += ""-"" + text.charAt(i);
                } else if (end - start > 0) {
                    new_text += ""_"".repeat(end - start) + text.charAt(i);
                } else {
                    new_text += text.charAt(i);
                }
                start = i + 1;
                end = i + 1;
            }
            i += 1;
        }
        if (end - start > 2) {
            new_text += ""-"";
        } else if (end - start > 0) {
            new_text += ""_"";
        }
        return new_text;
    }
}

// FixSpacesTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FixSpaces}.
* It contains ten unit test cases for the {@link FixSpaces#fixSpaces(String)} method.
*/
class FixSpacesTest {
		
		@Test
		void testFixSpaces() {
				assertEquals(""Example"", FixSpaces.fixSpaces(""Example""));
				assertEquals(""Example_1"", FixSpaces.fixSpaces(""Example 1""));
				assertEquals(""_Example_2"", FixSpaces.fixSpaces("" Example 2""));
				assertEquals(""_Example-3"", FixSpaces.fixSpaces("" Example   3""));
				assertEquals(""Mudasir_Hanif_"", FixSpaces.fixSpaces(""Mudasir Hanif ""));
				assertEquals(""Yellow_Yellow__Dirty__Fellow"","
cmpl-6tUQ4r7Zxya4ojMiPEdNdFUl3LU3l,/HumanEvalJava/src/main/java/original/id_141.java,19.81736445426941,stop,"// FileNameCheck.java
package original;

import java.util.Arrays;

class FileNameCheck {

    /**
     * Create a function which takes a string representing a file's name, and returns
     * 'Yes' if the file's name is valid, and returns 'No' otherwise.
     * A file's name is considered to be valid if and only if all the following conditions
     * are met:
     * - There should not be more than three digits ('0'-'9') in the file's name.
     * - The file's name contains exactly one dot '.'
     * - The substring before the dot should not be empty, and it starts with a letter from
     * the latin alphabet ('a'-'z' and 'A'-'Z').
     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
     * Examples:
     * fileNameCheck(""example.txt"") # => 'Yes'
     * fileNameCheck(""1example.dll"") # => 'No' (the name should start with a latin alphabet letter)
     *
     * > fileNameCheck(""example.txt"")
     * ""Yes""
     * > fileNameCheck(""1example.dll"")
     * ""No""
     * > fileNameCheck(""s1sdf3.asd"")
     * ""No""
     * > fileNameCheck(""K.dll"")
     * ""Yes""
     * > fileNameCheck(""MY16FILE3.exe"")
     * ""Yes""
     * > fileNameCheck(""His12FILE94.exe"")
     * ""No""
     * > fileNameCheck(""_Y.txt"")
     * ""No""
     * > fileNameCheck(""?aREYA.exe"")
     * ""No""
     * > fileNameCheck(""/this_is_valid.dll"")
     * ""No""
     * > fileNameCheck(""this_is_valid.wow"")
     * ""No""
     * > fileNameCheck(""this_is_valid.txt"")
     * ""Yes""
     * > fileNameCheck(""this_is_valid.txtexe"")
     * ""No""
     * > fileNameCheck(""#this2_i4s_5valid.ten"")
     * ""No""
     * > fileNameCheck(""@this1_is6_valid.exe"")
     * ""No""
     * > fileNameCheck(""this_is_12valid.6exe4.txt"")
     * ""No""
     * > fileNameCheck(""all.exe.txt"")
     * ""No""
     * > fileNameCheck(""I563_No.exe"")
     * ""Yes""
     * > fileNameCheck(""Is3youfault.txt"")
     * ""Yes""
     * > fileNameCheck(""no_one#knows.dll"")
     * ""Yes""
     * > fileNameCheck(""1I563_Yes3.exe"")
     * ""No""
     * > fileNameCheck(""I563_Yes3.txtt"")
     * ""No""
     * > fileNameCheck(""final..txt"")
     * ""No""
     * > fileNameCheck(""final132"")
     * ""No""
     * > fileNameCheck(""_f4indsartal132."")
     * ""No""
     * > fileNameCheck("".txt"")
     * ""No""
     * > fileNameCheck(""s."")
     * ""No""
     */
    public static String fileNameCheck(String fileName) {
        String[] suf = { ""txt"", ""exe"", ""dll"" };
        String[] lst = fileName.split(""\\."");
        if (lst.length != 2) {
            return ""No"";
        }
        if (!Arrays.asList(suf).contains(lst[1])) {
            return ""No"";
        }
        if (lst[0].length() == 0) {
            return ""No"";
        }
        if (!Character.isLetter(lst[0].charAt(0))) {
            return ""No"";
        }
        int t = 0;
        for (int i = 0; i < lst[0].length(); i++) {
            if (Character.isDigit(lst[0].charAt(i))) {
                t++;
            }
        }
        if (t > 3) {
            return ""No"";
        }
        return ""Yes"";
    }
}
","// FileNameCheckTest.java
package original;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileNameCheck}.
* It contains ten unit test cases for the {@link FileNameCheck#fileNameCheck(String)} method.
*/
class FileNameCheckTest {","// FileNameCheckTest.java
package original;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileNameCheck}.
* It contains ten unit test cases for the {@link FileNameCheck#fileNameCheck(String)} method.
*/
class FileNameCheckTest {

	@Test
	void testFileNameCheck() {
		assertEquals(""Yes"", FileNameCheck.fileNameCheck(""example.txt""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""1example.dll""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""s1sdf3.asd""));
		assertEquals(""Yes"", FileNameCheck.fileNameCheck(""K.dll""));
		assertEquals(""Yes"", FileNameCheck.fileNameCheck(""MY16FILE3.exe""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""His12FILE94.exe""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""_Y.txt""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""?aREYA.exe""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""/this_is_valid.dll""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""this_is_valid.wow""));
		assertEquals(""Yes"", FileNameCheck.fileNameCheck(""this_is_valid.txt""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""this_is_valid.txtexe""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""#this2_i4s_5valid.ten""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""@this1_is6_valid.exe""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""this_is_12valid.6exe4.txt""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""all.exe.txt""));
		assertEquals(""Yes"", FileNameCheck.fileNameCheck(""I563_No.exe""));
		assertEquals(""Yes"", FileNameCheck.fileNameCheck(""Is3youfault.txt""));
		assertEquals(""Yes"", FileNameCheck.fileNameCheck(""no_one#knows.dll""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""1I563_Yes3.exe""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""I563_Yes3.txtt""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""final..txt""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""final132""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""_f4indsartal132.""));
		assertEquals(""No"", FileNameCheck.fileNameCheck("".txt""));
		assertEquals(""No"", FileNameCheck.fileNameCheck(""s.""));
	}
}"
cmpl-6tUR79pSq9KH5nvaJNgAjLUAQjmA2,/HumanEvalJava/src/main/java/original/id_142.java,56.01990795135498,length,"// SumSquares1.java
package original;

import java.util.ArrayList;
import java.util.List;

class SumSquares1 {

    /**
     * ""
     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a
     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not
     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.
     *
     * Examples:
     * For lst = [1,2,3] the output should be 6
     * For lst = []  the output should be 0
     * For lst = [-1,-5,2,-1,-5]  the output should be -126
     *
     * > sumSquares([1, 2, 3])
     * 6
     * > sumSquares([1, 4, 9])
     * 14
     * > sumSquares([])
     * 0
     * > sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1])
     * 9
     * > sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1])
     * -3
     * > sumSquares([0])
     * 0
     * > sumSquares([-1, -5, 2, -1, -5])
     * -126
     * > sumSquares([-56, -99, 1, 0, -2])
     * 3030
     * > sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1])
     * 0
     * > sumSquares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])
     * -14196
     * > sumSquares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])
     * -1448
     */
    public static int sumSquares(List<Object> lst) {
        List<Integer> result = new ArrayList<Integer>();
        for (int i = 0; i < lst.size(); i++) {
            if (i % 3 == 0) {
                result.add((int) lst.get(i) * (int) lst.get(i));
            } else if (i % 4 == 0 && i % 3 != 0) {
                result.add((int) lst.get(i) * (int) lst.get(i) * (int) lst.get(i));
            } else {
                result.add((int) lst.get(i));
            }
        }
        int sum = 0;
        for (int i = 0; i < result.size(); i++) {
            sum += result.get(i);
        }
        return sum;
    }
}
","// SumSquares1Test.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares1}.
* It contains ten unit test cases for the {@link SumSquares1#sumSquares(List)} method.
*/
class SumSquares1Test {","// SumSquares1Test.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares1}.
* It contains ten unit test cases for the {@link SumSquares1#sumSquares(List)} method.
*/
class SumSquares1Test {

	/**
	* Test case 1.
	* The input list is [1, 2, 3].
	* The expected output is 6.
	*/
	@Test
	void testSumSquares1() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		lst.add(2);
		lst.add(3);
		int expected = 6;
		int actual = SumSquares1.sumSquares(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 2.
	* The input list is [1, 4, 9].
	* The expected output is 14.
	*/
	@Test
	void testSumSquares2() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		lst.add(4);
		lst.add(9);
		int expected = 14;
		int actual = SumSquares1.sumSquares(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 3.
	* The input list is [].
	* The expected output is 0.
	*/
	@Test
	void testSumSquares3() {
		List<Object> lst = new ArrayList<Object>();
		int expected = 0;
		int actual = SumSquares1.sumSquares(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 4.
	* The input list is [1, 1, 1, 1, 1, 1, 1, 1, 1].
	* The expected output is 9.
	*/
	@Test
	void testSumSquares4() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		lst.add(1);
		lst.add(1);
		lst.add(1);
		lst.add(1);
		lst.add(1);
		lst.add(1);
		lst.add(1);
		lst.add(1);
		int expected = 9;
		int actual = SumSquares1.sumSquares(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 5.
	* The input list is [-1, -1, -1, -1, -1, -1, -1, -1, -1].
	* The expected output is -3.
	*/
	@Test
	void testSumSquares5() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(-1);
		lst.add(-1);
		lst.add(-1);
		lst.add(-1);
		lst.add(-1);
		lst.add(-1);
		lst.add(-1);
		lst.add(-1);
		lst.add(-1);
		int expected = -3;
		int actual = SumSquares1.sumSquares(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 6.
	* The input list is [0].
	* The expected output is 0.
	*/
	@Test
	void testSumSquares6() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(0);
		int expected = 0;
		int actual = SumSquares1.sumSquares(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 7.
	* The input list is [-1, -5, 2, -1, -5].
	* The expected output is -126.
	*/
	@Test
	void testSumSquares7() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(-1);
		lst.add(-5);
		lst.add(2);
		lst.add(-1);
		lst.add(-5);
		int expected = -126;
		int actual = SumSquares1.sumSquares(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 8.
	* The input list is [-56, -99, 1, 0, -2].
	* The expected output is 3030.
	*/
	@Test
	void testSumSquares8() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(-56);
		lst.add(-99);
		lst.add(1);
		lst.add(0);
		lst.add(-2);
		int expected = 3030;
		int actual = SumSquares1.sumSquares(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 9.
	* The input list is [-1, 0, 0, 0, 0, 0, 0, 0, -1].
	* The expected output is 0.
	*/
	@Test
	void testSumSquares9() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(-1);
		lst.add(0);
		lst.add(0);
		lst.add(0);
		lst.add(0);
		lst.add(0);
		lst.add(0);
		lst.add(0);
		lst.add(-1);
		int expected = 0;
		int actual = SumSquares1.sumSquares(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 10.
	* The input list is [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37].
	* The expected output is -14196.
	*/
	@Test
	void testSumSquares10() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(-16);
		lst.add(-9);
		lst.add(-2);
		lst.add(36);
		lst.add(36);
		lst.add(26);
		lst.add(-20);
		lst.add(25);
		lst.add(-40);
		lst.add(20);
		lst.add(-4);
		lst.add(12);
		lst.add(-26);
		lst.add(35);
		lst.add(37);
		int expected = -14196;
		int actual = SumSquares1.sumSquares(lst);
		assertEquals(expected, actual);
	}
}

// SumSquares2.java
package original;

import java.util.ArrayList;
import java.util.List;

class SumSquares2 {

    /**
     * ""
     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a
     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not
     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.
     *
     * Examples:
     * For lst = [1,2,3] the output should be 6
     * For lst = []  the output should be 0
     * For lst = [-1,-5,2,-1,-5]  the output should be -126
     *
     * > sumSquares([1, 2, 3])
     * 6
     * > sum"
cmpl-6tUSAz8Mq2zgtIcE75uTzONe5FSUJ,/HumanEvalJava/src/main/java/original/id_143.java,50.82333326339722,length,"// WordsInSentence.java
package original;

class WordsInSentence {

    /**
     * * You are given a string representing a sentence,
     * the sentence contains some words separated by a space,
     * and you have to return a string that contains the words from the original sentence,
     * whose lengths are prime numbers,
     * the order of the words in the new string should be the same as the original one.
     *
     * Example 1:
     * Input: sentence = ""This is a test""
     * Output: ""is""
     *
     * Example 2:
     * Input: sentence = ""lets go for swimming""
     * Output: ""go for""
     *
     * Constraints:
     * * 1 <= len(sentence) <= 100
     * * sentence contains only letters
     *
     * > wordsInSentence(""This is a test"")
     * ""is""
     * > wordsInSentence(""lets go for swimming"")
     * ""go for""
     * > wordsInSentence(""there is no place available here"")
     * ""there is no place""
     * > wordsInSentence(""Hi I am Hussein"")
     * ""Hi am Hussein""
     * > wordsInSentence(""go for it"")
     * ""go for it""
     * > wordsInSentence(""here"")
     * """"
     * > wordsInSentence(""here is"")
     * ""is""
     */
    public static String wordsInSentence(String sentence) {
        String[] words = sentence.split("" "");
        String result = """";
        for (int i = 0; i < words.length; i++) {
            if (isPrime(words[i].length())) {
                result += words[i] + "" "";
            }
        }
        return result.trim();
    }

    private static boolean isPrime(int number) {
        if (number <= 1) {
            return false;
        }
        for (int i = 2; i < number; i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
}
","// WordsInSentenceTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsInSentence}.
* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.
*/
class WordsInSentenceTest {","// WordsInSentenceTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsInSentence}.
* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.
*/
class WordsInSentenceTest {

	@Test
	void testWordsInSentence() {
		assertEquals(""is"", WordsInSentence.wordsInSentence(""This is a test""));
		assertEquals(""go for"", WordsInSentence.wordsInSentence(""lets go for swimming""));
		assertEquals(""there is no place"", WordsInSentence.wordsInSentence(""there is no place available here""));
		assertEquals(""Hi am Hussein"", WordsInSentence.wordsInSentence(""Hi I am Hussein""));
		assertEquals(""go for it"", WordsInSentence.wordsInSentence(""go for it""));
		assertEquals("""", WordsInSentence.wordsInSentence(""here""));
		assertEquals(""is"", WordsInSentence.wordsInSentence(""here is""));
		assertEquals("""", WordsInSentence.wordsInSentence(""""));
		assertEquals("""", WordsInSentence.wordsInSentence("" ""));
		assertEquals("""", WordsInSentence.wordsInSentence(""  ""));
	}
}

// WordsInSentenceTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsInSentence}.
* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.
*/
class WordsInSentenceTest {
		
	@Test
	void testWordsInSentence() {
		assertEquals(""is"", WordsInSentence.wordsInSentence(""This is a test""));
		assertEquals(""go for"", WordsInSentence.wordsInSentence(""lets go for swimming""));
		assertEquals(""there is no place"", WordsInSentence.wordsInSentence(""there is no place available here""));
		assertEquals(""Hi am Hussein"", WordsInSentence.wordsInSentence(""Hi I am Hussein""));
		assertEquals(""go for it"", WordsInSentence.wordsInSentence(""go for it""));
		assertEquals("""", WordsInSentence.wordsInSentence(""here""));
		assertEquals(""is"", WordsInSentence.wordsInSentence(""here is""));
		assertEquals("""", WordsInSentence.wordsInSentence(""""));
		assertEquals("""", WordsInSentence.wordsInSentence("" ""));
		assertEquals("""", WordsInSentence.wordsInSentence(""  ""));
	}
}

// WordsInSentenceTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsInSentence}.
* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.
*/
class WordsInSentenceTest {
		
	@Test
	void testWordsInSentence() {
		assertEquals(""is"", WordsInSentence.wordsInSentence(""This is a test""));
		assertEquals(""go for"", WordsInSentence.wordsInSentence(""lets go for swimming""));
		assertEquals(""there is no place"", WordsInSentence.wordsInSentence(""there is no place available here""));
		assertEquals(""Hi am Hussein"", WordsInSentence.wordsInSentence(""Hi I am Hussein""));
		assertEquals(""go for it"", WordsInSentence.wordsInSentence(""go for it""));
		assertEquals("""", WordsInSentence.wordsInSentence(""here""));
		assertEquals(""is"", WordsInSentence.wordsInSentence(""here is""));
		assertEquals("""", WordsInSentence.wordsInSentence(""""));
		assertEquals("""", WordsInSentence.wordsInSentence("" ""));
		assertEquals("""", WordsInSentence.wordsInSentence(""  ""));
	}
}

// WordsInSentenceTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsInSentence}.
* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.
*/
class WordsInSentenceTest {
		
	@Test
	void testWordsInSentence() {
		assertEquals(""is"", WordsInSentence.wordsInSentence(""This is a test""));
		assertEquals(""go for"", WordsInSentence.wordsInSentence(""lets go for swimming""));
		assertEquals(""there is no place"", WordsInSentence.wordsInSentence(""there is no place available here""));
		assertEquals(""Hi am Hussein"", WordsInSentence.wordsInSentence(""Hi I am Hussein""));
		assertEquals(""go for it"", WordsInSentence.wordsInSentence(""go for it""));
		assertEquals("""", WordsInSentence.wordsInSentence(""here""));
		assertEquals(""is"", WordsInSentence.wordsInSentence(""here is""));
		assertEquals("""", WordsInSentence.wordsInSentence(""""));
		assertEquals("""", WordsInSentence.wordsInSentence("" ""));
		assertEquals("""", WordsInSentence.wordsInSentence(""  ""));
	}
}

// WordsInSentenceTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsInSentence}.
* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.
*/
class WordsInSentenceTest {
		
	@Test
	void testWordsInSentence() {
		assertEquals(""is"", WordsInSentence.wordsInSentence(""This is a test""));
		assertEquals(""go for"", WordsInSentence.wordsInSentence(""lets go for swimming""));
		assertEquals(""there is no place"", WordsInSentence.wordsInSentence(""there is no place available here""));
		assertEquals(""Hi am Hussein"", WordsInSentence.wordsInSentence(""Hi I am Hussein""));
		assertEquals(""go for it"", WordsInSentence.wordsInSentence(""go for it""));
		assertEquals("""", WordsInSentence.wordsInSentence(""here""));
		assertEquals(""is"", WordsInSentence.wordsInSentence(""here is""));
		assertEquals("""", WordsInSentence.wordsInSentence(""""));
		assertEquals("""", WordsInSentence.wordsInSentence("" ""));
		assertEquals("""", WordsInSentence.wordsInSentence(""  ""));
	}
}

// WordsInSentenceTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WordsInSentence}.
* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.
*/
class WordsInSentenceTest {
		
	@Test
	void testWordsInSentence() {
		assertEquals(""is"", WordsInSentence.wordsInSentence(""This is a test""));
		assertEquals(""go for"", WordsInSentence.wordsInSentence(""lets go for swimming""));
		assertEquals(""there is no place"", WordsInSentence.wordsInSentence(""there is no place available here""));
		assertEquals(""Hi am Hussein"", WordsInSentence.wordsInSentence(""Hi I am Hussein""));
		assertEquals(""go for it"", WordsInSentence.wordsInSentence(""go for it""));
		assertEquals("""", WordsInSentence.wordsInSentence(""here""));
		assertEquals(""is"", WordsInSentence.wordsInSentence(""here is""));
		"
cmpl-6tUTDBMJLfbSWbXYYcaG6FZig0Mj8,/HumanEvalJava/src/main/java/original/id_144.java,6.850553274154663,stop,"// Simplify.java
package original;

class Simplify {

    /**
     * Your task is to implement a function that will simplify the expression
     * x * n. The function returns True if x * n evaluates to a whole number and False
     * otherwise. Both x and n, are string representation of a fraction, and have the following format,
     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.
     *
     * You can assume that x, and n are valid fractions, and do not have zero as denominator.
     *
     * simplify(""1/5"", ""5/1"") = True
     * simplify(""1/6"", ""2/1"") = False
     * simplify(""7/10"", ""10/2"") = False
     *
     * > simplify(""1/5"", ""5/1"")
     * true
     * > simplify(""1/6"", ""2/1"")
     * false
     * > simplify(""5/1"", ""3/1"")
     * true
     * > simplify(""7/10"", ""10/2"")
     * false
     * > simplify(""2/10"", ""50/10"")
     * true
     * > simplify(""7/2"", ""4/2"")
     * true
     * > simplify(""11/6"", ""6/1"")
     * true
     * > simplify(""2/3"", ""5/2"")
     * false
     * > simplify(""5/2"", ""3/5"")
     * false
     * > simplify(""2/4"", ""8/4"")
     * true
     * > simplify(""2/4"", ""4/2"")
     * true
     * > simplify(""1/5"", ""5/1"")
     * true
     * > simplify(""1/5"", ""1/5"")
     * false
     */
    public static Boolean simplify(String x, String n) {
        String[] a = x.split(""/"");
        String[] b = n.split(""/"");
        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);
        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);
        if (numerator % denom == 0) {
            return true;
        }
        return false;
    }
}
","// SimplifyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Simplify}.
* It contains ten unit test cases for the {@link Simplify#simplify(String, String)} method.
*/
class SimplifyTest {","// SimplifyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Simplify}.
* It contains ten unit test cases for the {@link Simplify#simplify(String, String)} method.
*/
class SimplifyTest {

	@Test
	void testSimplify() {
		assertTrue(Simplify.simplify(""1/5"", ""5/1""));
		assertFalse(Simplify.simplify(""1/6"", ""2/1""));
		assertFalse(Simplify.simplify(""7/10"", ""10/2""));
		assertTrue(Simplify.simplify(""5/1"", ""3/1""));
		assertTrue(Simplify.simplify(""2/10"", ""50/10""));
		assertTrue(Simplify.simplify(""7/2"", ""4/2""));
		assertTrue(Simplify.simplify(""11/6"", ""6/1""));
		assertFalse(Simplify.simplify(""2/3"", ""5/2""));
		assertFalse(Simplify.simplify(""5/2"", ""3/5""));
		assertTrue(Simplify.simplify(""2/4"", ""8/4""));
		assertTrue(Simplify.simplify(""2/4"", ""4/2""));
		assertTrue(Simplify.simplify(""1/5"", ""5/1""));
		assertFalse(Simplify.simplify(""1/5"", ""1/5""));
	}
}"
cmpl-6tUUG3yP5JNC6yDihlFCAgaY2UrBs,/HumanEvalJava/src/main/java/original/id_145.java,29.702228784561157,stop,"// OrderByPoints.java
package original;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class OrderByPoints {

    /**
     * * Write a function which sorts the given list of integers
     * in ascending order according to the sum of their digits.
     * Note: if there are several items with similar sum of their digits,
     * order them based on their index in original list.
     *
     * For example:
     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
     * >>> order_by_points([]) == []
     *
     * > orderByPoints([1, 11, -1, -11, -12])
     * [-1, -11, 1, -12, 11]
     * > orderByPoints([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])
     * [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
     * > orderByPoints([])
     * []
     * > orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])
     * [-3, -32, -98, -11, 1, 2, 43, 54]
     * > orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
     * [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
     * > orderByPoints([0, 6, 6, -76, -21, 23, 4])
     * [-76, -21, 0, 4, 23, 6, 6]
     */
    public static List<Object> orderByPoints(List<Object> nums) {
        Collections.sort(nums, new Comparator<Object>() {

            int digitsum(int n) {
                boolean neg = false;
                if (n < 0) {
                    neg = true;
                    n = -n;
                }
                int sum = 0;
                while (n > 0) {
                    if (n / 10 == 0 && neg)
                        sum -= n % 10;
                    else
                        sum += n % 10;
                    n = n / 10;
                }
                return sum;
            }

            public int compare(Object o1, Object o2) {
                return digitsum((int) o1) - digitsum((int) o2);
            }
        });
        return nums;
    }
}
","// OrderByPointsTest.java
package original;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OrderByPoints}.
* It contains ten unit test cases for the {@link OrderByPoints#orderByPoints(List)} method.
*/
class OrderByPointsTest {","// OrderByPointsTest.java
package original;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OrderByPoints}.
* It contains ten unit test cases for the {@link OrderByPoints#orderByPoints(List)} method.
*/
class OrderByPointsTest {

	@Test
	void testOrderByPoints() {
		List<Object> nums = List.of(1, 11, -1, -11, -12);
		List<Object> expected = List.of(-1, -11, 1, -12, 11);
		assertEquals(expected, OrderByPoints.orderByPoints(nums));
	}
	
	@Test
	void testOrderByPoints2() {
		List<Object> nums = List.of(1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46);
		List<Object> expected = List.of(0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457);
		assertEquals(expected, OrderByPoints.orderByPoints(nums));
	}
	
	@Test
	void testOrderByPoints3() {
		List<Object> nums = List.of();
		List<Object> expected = List.of();
		assertEquals(expected, OrderByPoints.orderByPoints(nums));
	}
	
	@Test
	void testOrderByPoints4() {
		List<Object> nums = List.of(1, -11, -32, 43, 54, -98, 2, -3);
		List<Object> expected = List.of(-3, -32, -98, -11, 1, 2, 43, 54);
		assertEquals(expected, OrderByPoints.orderByPoints(nums));
	}
	
	@Test
	void testOrderByPoints5() {
		List<Object> nums = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
		List<Object> expected = List.of(1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9);
		assertEquals(expected, OrderByPoints.orderByPoints(nums));
	}
	
	@Test
	void testOrderByPoints6() {
		List<Object> nums = List.of(0, 6, 6, -76, -21, 23, 4);
		List<Object> expected = List.of(-76, -21, 0, 4, 23, 6, 6);
		assertEquals(expected, OrderByPoints.orderByPoints(nums));
	}
	
	@Test
	void testOrderByPoints7() {
		List<Object> nums = List.of(0, 6, 6, -76, -21, 23, 4);
		List<Object> expected = List.of(-76, -21, 0, 4, 23, 6, 6);
		assertEquals(expected, OrderByPoints.orderByPoints(nums));
	}
	
	@Test
	void testOrderByPoints8() {
		List<Object> nums = List.of(0, 6, 6, -76, -21, 23, 4);
		List<Object> expected = List.of(-76, -21, 0, 4, 23, 6, 6);
		assertEquals(expected, OrderByPoints.orderByPoints(nums));
	}
	
	@Test
	void testOrderByPoints9() {
		List<Object> nums = List.of(0, 6, 6, -76, -21, 23, 4);
		List<Object> expected = List.of(-76, -21, 0, 4, 23, 6, 6);
		assertEquals(expected, OrderByPoints.orderByPoints(nums));
	}
	
	@Test
	void testOrderByPoints10() {
		List<Object> nums = List.of(0, 6, 6, -76, -21, 23, 4);
		List<Object> expected = List.of(-76, -21, 0, 4, 23, 6, 6);
		assertEquals(expected, OrderByPoints.orderByPoints(nums));
	}
}"
cmpl-6tUVJ5zN9OzjbVVvSx2ArG4LHw0fs,/HumanEvalJava/src/main/java/original/id_146.java,9.614529132843018,stop,"// Specialfilter.java
package original;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

class Specialfilter {

    /**
     * Write a function that takes an array of numbers as input and returns
     * the number of elements in the array that are greater than 10 and both
     * first and last digits of a number are odd (1, 3, 5, 7, 9).
     * For example:
     * specialFilter([15, -73, 14, -15]) => 1
     * specialFilter([33, -2, -3, 45, 21, 109]) => 2
     *
     * > specialfilter([5, -2, 1, -5])
     * 0
     * > specialfilter([15, -73, 14, -15])
     * 1
     * > specialfilter([33, -2, -3, 45, 21, 109])
     * 2
     * > specialfilter([43, -12, 93, 125, 121, 109])
     * 4
     * > specialfilter([71, -2, -33, 75, 21, 19])
     * 3
     * > specialfilter([1])
     * 0
     * > specialfilter([])
     * 0
     */
    public static int specialfilter(List<Object> nums) {
        int count = 0;
        for (Object num : nums) {
            if ((int) num > 10) {
                Set odd_digits = new HashSet<Integer>(Arrays.asList(1, 3, 5, 7, 9));
                String number_as_string = Integer.toString((int) num);
                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1))) && odd_digits.contains(Integer.parseInt(number_as_string.substring(number_as_string.length() - 1)))) {
                    count += 1;
                }
            }
        }
        return count;
    }
}
","// SpecialfilterTest.java
package original;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Specialfilter}.
* It contains ten unit test cases for the {@link Specialfilter#specialfilter(List)} method.
*/
class SpecialfilterTest {","// SpecialfilterTest.java
package original;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Specialfilter}.
* It contains ten unit test cases for the {@link Specialfilter#specialfilter(List)} method.
*/
class SpecialfilterTest {

	@Test
	void testSpecialfilter() {
		assertEquals(0, Specialfilter.specialfilter(Arrays.asList(5, -2, 1, -5)));
		assertEquals(1, Specialfilter.specialfilter(Arrays.asList(15, -73, 14, -15)));
		assertEquals(2, Specialfilter.specialfilter(Arrays.asList(33, -2, -3, 45, 21, 109)));
		assertEquals(4, Specialfilter.specialfilter(Arrays.asList(43, -12, 93, 125, 121, 109)));
		assertEquals(3, Specialfilter.specialfilter(Arrays.asList(71, -2, -33, 75, 21, 19)));
		assertEquals(0, Specialfilter.specialfilter(Arrays.asList(1)));
		assertEquals(0, Specialfilter.specialfilter(Arrays.asList()));
		assertEquals(0, Specialfilter.specialfilter(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)));
		assertEquals(1, Specialfilter.specialfilter(Arrays.asList(11, 12, 13, 14, 15, 16, 17, 18, 19, 20)));
		assertEquals(2, Specialfilter.specialfilter(Arrays.asList(21, 22, 23, 24, 25, 26, 27, 28, 29, 30)));
	}
}"
cmpl-6tUWMKlPEv5HdWj5Ww5v9KFLxVUNA,/HumanEvalJava/src/main/java/original/id_147.java,68.80656576156616,length,"// GetMaxTriples.java
package original;

class GetMaxTriples {

    /**
     * * You are given a positive integer n. You have to create an integer array a of length n.
     * For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,
     * and a[i] + a[j] + a[k] is a multiple of 3.
     *
     * Example :
     * Input: n = 5
     * Output: 1
     * Explanation:
     * a = [1, 3, 7, 13, 21]
     * The only valid triple is (1, 7, 13).
     *
     * > getMaxTriples(5)
     * 1
     * > getMaxTriples(6)
     * 4
     * > getMaxTriples(10)
     * 36
     * > getMaxTriples(100)
     * 53361
     */
    public static int getMaxTriples(int n) {
        int count = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                for (int k = j + 1; k <= n; k++) {
                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
}
","// GetMaxTriplesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetMaxTriples}.
* It contains ten unit test cases for the {@link GetMaxTriples#getMaxTriples(int)} method.
*/
class GetMaxTriplesTest {","// GetMaxTriplesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetMaxTriples}.
* It contains ten unit test cases for the {@link GetMaxTriples#getMaxTriples(int)} method.
*/
class GetMaxTriplesTest {

	@Test
	void testGetMaxTriples() {
		assertEquals(1, GetMaxTriples.getMaxTriples(5));
		assertEquals(4, GetMaxTriples.getMaxTriples(6));
		assertEquals(36, GetMaxTriples.getMaxTriples(10));
		assertEquals(53361, GetMaxTriples.getMaxTriples(100));
		assertEquals(0, GetMaxTriples.getMaxTriples(1));
		assertEquals(0, GetMaxTriples.getMaxTriples(2));
		assertEquals(0, GetMaxTriples.getMaxTriples(3));
		assertEquals(0, GetMaxTriples.getMaxTriples(4));
		assertEquals(0, GetMaxTriples.getMaxTriples(7));
		assertEquals(0, GetMaxTriples.getMaxTriples(8));
	}
}

// GetMaxTriplesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetMaxTriples}.
* It contains ten unit test cases for the {@link GetMaxTriples#getMaxTriples(int)} method.
*/
class GetMaxTriplesTest {
		
	@Test
	void testGetMaxTriples() {
		assertEquals(1, GetMaxTriples.getMaxTriples(5));
		assertEquals(4, GetMaxTriples.getMaxTriples(6));
		assertEquals(36, GetMaxTriples.getMaxTriples(10));
		assertEquals(53361, GetMaxTriples.getMaxTriples(100));
		assertEquals(0, GetMaxTriples.getMaxTriples(1));
		assertEquals(0, GetMaxTriples.getMaxTriples(2));
		assertEquals(0, GetMaxTriples.getMaxTriples(3));
		assertEquals(0, GetMaxTriples.getMaxTriples(4));
		assertEquals(0, GetMaxTriples.getMaxTriples(7));
		assertEquals(0, GetMaxTriples.getMaxTriples(8));
	}
}

// GetMaxTriplesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetMaxTriples}.
* It contains ten unit test cases for the {@link GetMaxTriples#getMaxTriples(int)} method.
*/
class GetMaxTriplesTest {
		
	@Test
	void testGetMaxTriples() {
		assertEquals(1, GetMaxTriples.getMaxTriples(5));
		assertEquals(4, GetMaxTriples.getMaxTriples(6));
		assertEquals(36, GetMaxTriples.getMaxTriples(10));
		assertEquals(53361, GetMaxTriples.getMaxTriples(100));
		assertEquals(0, GetMaxTriples.getMaxTriples(1));
		assertEquals(0, GetMaxTriples.getMaxTriples(2));
		assertEquals(0, GetMaxTriples.getMaxTriples(3));
		assertEquals(0, GetMaxTriples.getMaxTriples(4));
		assertEquals(0, GetMaxTriples.getMaxTriples(7));
		assertEquals(0, GetMaxTriples.getMaxTriples(8));
	}
}

// GetMaxTriplesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetMaxTriples}.
* It contains ten unit test cases for the {@link GetMaxTriples#getMaxTriples(int)} method.
*/
class GetMaxTriplesTest {
		
	@Test
	void testGetMaxTriples() {
		assertEquals(1, GetMaxTriples.getMaxTriples(5));
		assertEquals(4, GetMaxTriples.getMaxTriples(6));
		assertEquals(36, GetMaxTriples.getMaxTriples(10));
		assertEquals(53361, GetMaxTriples.getMaxTriples(100));
		assertEquals(0, GetMaxTriples.getMaxTriples(1));
		assertEquals(0, GetMaxTriples.getMaxTriples(2));
		assertEquals(0, GetMaxTriples.getMaxTriples(3));
		assertEquals(0, GetMaxTriples.getMaxTriples(4));
		assertEquals(0, GetMaxTriples.getMaxTriples(7));
		assertEquals(0, GetMaxTriples.getMaxTriples(8));
	}
}

// GetMaxTriplesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetMaxTriples}.
* It contains ten unit test cases for the {@link GetMaxTriples#getMaxTriples(int)} method.
*/
class GetMaxTriplesTest {
		
	@Test
	void testGetMaxTriples() {
		assertEquals(1, GetMaxTriples.getMaxTriples(5));
		assertEquals(4, GetMaxTriples.getMaxTriples(6));
		assertEquals(36, GetMaxTriples.getMaxTriples(10));
		assertEquals(53361, GetMaxTriples.getMaxTriples(100));
		assertEquals(0, GetMaxTriples.getMaxTriples(1));
		assertEquals(0, GetMaxTriples.getMaxTriples(2));
		assertEquals(0, GetMaxTriples.getMaxTriples(3));
		assertEquals(0, GetMaxTriples.getMaxTriples(4));
		assertEquals(0, GetMaxTriples.getMaxTriples(7));
		assertEquals(0, GetMaxTriples.getMaxTriples(8));
	}
}

// GetMaxTriplesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetMaxTriples}.
* It contains ten unit test cases for the {@link GetMaxTriples#getMaxTriples(int)} method.
*/
class GetMaxTriplesTest {
		
	@Test
	void testGetMaxTriples() {
		assertEquals(1, GetMaxTriples.getMaxTriples(5));
		assertEquals(4, GetMaxTriples.getMaxTriples(6));
		assertEquals(36, GetMaxTriples.getMaxTriples(10));
		assertEquals(53361, GetMaxTriples.getMaxTriples(100));
		assertEquals(0, GetMaxTriples.getMaxTriples(1));
		assertEquals(0, GetMaxTriples.getMaxTriples(2));
		assertEquals(0, GetMaxTriples.getMaxTriples(3));
		assertEquals(0, GetMaxTriples.getMaxTriples(4));
		assertEquals(0, GetMaxTriples.getMaxTriples(7));
		assertEquals(0, GetMaxTriples.getMaxTriples(8));
	}
}

// GetMaxTriplesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetMaxTriples}.
* It contains ten unit test cases for the {@link GetMaxTriples#getMaxTriples(int)} method.
*/
class GetMaxTriplesTest {
		
	"
cmpl-6tUXTf1mLL7noeBr95GOpiYYFyVeD,/HumanEvalJava/src/main/java/original/id_148.java,47.73636054992676,length,"// Bf.java
package original;

import java.util.ArrayList;
import java.util.List;

class Bf {

    /**
     * * There are eight planets in our solar system: the closest to the Sun
     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,
     * Uranus, Neptune.
     * Write a function that takes two planet names as strings planet1 and planet2.
     * The function should return a tuple containing all planets whose orbits are
     * located between the orbit of planet1 and the orbit of planet2, sorted by
     * the proximity to the sun.
     * The function should return an empty tuple if planet1 or planet2
     * are not correct planet names.
     * Examples
     * bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
     * bf(""Earth"", ""Mercury"") ==> (""Venus"")
     * bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
     *
     * > bf(""Jupiter"", ""Neptune"")
     * [""Saturn"", ""Uranus""]
     * > bf(""Earth"", ""Mercury"")
     * [""Venus""]
     * > bf(""Mercury"", ""Uranus"")
     * [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]
     * > bf(""Neptune"", ""Venus"")
     * [""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""]
     * > bf(""Earth"", ""Earth"")
     * []
     * > bf(""Mars"", ""Earth"")
     * []
     * > bf(""Jupiter"", ""Makemake"")
     * []
     */
    public static List<Object> bf(String planet1, String planet2) {
        List<Object> planets = new ArrayList<Object>();
        planets.add(""Mercury"");
        planets.add(""Venus"");
        planets.add(""Earth"");
        planets.add(""Mars"");
        planets.add(""Jupiter"");
        planets.add(""Saturn"");
        planets.add(""Uranus"");
        planets.add(""Neptune"");
        List<Object> result = new ArrayList<Object>();
        if (planets.contains(planet1) && planets.contains(planet2)) {
            int index1 = planets.indexOf(planet1);
            int index2 = planets.indexOf(planet2);
            if (index1 < index2) {
                for (int i = index1 + 1; i < index2; i++) {
                    result.add(planets.get(i));
                }
            } else {
                for (int i = index2 + 1; i < index1; i++) {
                    result.add(planets.get(i));
                }
            }
        }
        return result;
    }
}
","// BfTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Bf}.
* It contains ten unit test cases for the {@link Bf#bf(String, String)} method.
*/
class BfTest {","// BfTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Bf}.
* It contains ten unit test cases for the {@link Bf#bf(String, String)} method.
*/
class BfTest {

	@Test
	void testBf1() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Saturn"");
		expected.add(""Uranus"");
		assertEquals(expected, Bf.bf(""Jupiter"", ""Neptune""));
	}
	
	@Test
	void testBf2() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Venus"");
		assertEquals(expected, Bf.bf(""Earth"", ""Mercury""));
	}
	
	@Test
	void testBf3() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Venus"");
		expected.add(""Earth"");
		expected.add(""Mars"");
		expected.add(""Jupiter"");
		expected.add(""Saturn"");
		assertEquals(expected, Bf.bf(""Mercury"", ""Uranus""));
	}
	
	@Test
	void testBf4() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Earth"");
		expected.add(""Mars"");
		expected.add(""Jupiter"");
		expected.add(""Saturn"");
		expected.add(""Uranus"");
		assertEquals(expected, Bf.bf(""Neptune"", ""Venus""));
	}
	
	@Test
	void testBf5() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Earth"", ""Earth""));
	}
	
	@Test
	void testBf6() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Mars"", ""Earth""));
	}
	
	@Test
	void testBf7() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Jupiter"", ""Makemake""));
	}
	
	@Test
	void testBf8() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Makemake"", ""Jupiter""));
	}
	
	@Test
	void testBf9() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Makemake"", ""Makemake""));
	}
	
	@Test
	void testBf10() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Jupiter"", ""Jupiter""));
	}
}

// BfTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Bf}.
* It contains ten unit test cases for the {@link Bf#bf(String, String)} method.
*/
class BfTest {
		
	@Test
	void testBf1() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Saturn"");
		expected.add(""Uranus"");
		assertEquals(expected, Bf.bf(""Jupiter"", ""Neptune""));
	}
	
	@Test
	void testBf2() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Venus"");
		assertEquals(expected, Bf.bf(""Earth"", ""Mercury""));
	}
	
	@Test
	void testBf3() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Venus"");
		expected.add(""Earth"");
		expected.add(""Mars"");
		expected.add(""Jupiter"");
		expected.add(""Saturn"");
		assertEquals(expected, Bf.bf(""Mercury"", ""Uranus""));
	}
	
	@Test
	void testBf4() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Earth"");
		expected.add(""Mars"");
		expected.add(""Jupiter"");
		expected.add(""Saturn"");
		expected.add(""Uranus"");
		assertEquals(expected, Bf.bf(""Neptune"", ""Venus""));
	}
	
	@Test
	void testBf5() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Earth"", ""Earth""));
	}
	
	@Test
	void testBf6() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Mars"", ""Earth""));
	}
	
	@Test
	void testBf7() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Jupiter"", ""Makemake""));
	}
	
	@Test
	void testBf8() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Makemake"", ""Jupiter""));
	}
	
	@Test
	void testBf9() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Makemake"", ""Makemake""));
	}
	
	@Test
	void testBf10() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Jupiter"", ""Jupiter""));
	}
}

// BfTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Bf}.
* It contains ten unit test cases for the {@link Bf#bf(String, String)} method.
*/
class BfTest {
		
	@Test
	void testBf1() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Saturn"");
		expected.add(""Uranus"");
		assertEquals(expected, Bf.bf(""Jupiter"", ""Neptune""));
	}
	
	@Test
	void testBf2() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Venus"");
		assertEquals(expected, Bf.bf(""Earth"", ""Mercury""));
	}
	
	@Test
	void testBf3() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Venus"");
		expected.add(""Earth"");
		expected.add(""Mars"");
		expected.add(""Jupiter"");
		expected.add(""Saturn"");
		assertEquals(expected, Bf.bf(""Mercury"", ""Uranus""));
	}
	
	@Test
	void testBf4() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(""Earth"");
		expected.add(""Mars"");
		expected.add(""Jupiter"");
		expected.add(""Saturn"");
		expected.add(""Uranus"");
		assertEquals(expected, Bf.bf(""Neptune"", ""Venus""));
	}
	
	@Test
	void testBf5() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Bf.bf(""Earth"", ""Earth""));
	}"
cmpl-6tUYW1sDLBJWXc7YRQWoqiwA5fZTV,/HumanEvalJava/src/main/java/original/id_149.java,60.85553455352783,length,"// SortedListSum.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class SortedListSum {

    /**
     * Write a function that accepts a list of strings as a parameter,
     * deletes the strings that have odd lengths from it,
     * and returns the resulted list with a sorted order,
     * The list is always a list of strings and never an array of numbers,
     * and it may contain duplicates.
     * The order of the list should be ascending by length of each word, and you
     * should return the list sorted by that rule.
     * If two words have the same length, sort the list alphabetically.
     * The function should return a list of strings in sorted order.
     * You may assume that all words will have the same length.
     * For example:
     * assert sortedListSum([""aa"", ""a"", ""aaa""]) => [""aa""]
     * assert sortedListSum([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
     *
     * > sortedListSum([""aa"", ""a"", ""aaa""])
     * [""aa""]
     * > sortedListSum([""school"", ""AI"", ""asdf"", ""b""])
     * [""AI"", ""asdf"", ""school""]
     * > sortedListSum([""d"", ""b"", ""c"", ""a""])
     * []
     * > sortedListSum([""d"", ""dcba"", ""abcd"", ""a""])
     * [""abcd"", ""dcba""]
     * > sortedListSum([""AI"", ""ai"", ""au""])
     * [""AI"", ""ai"", ""au""]
     * > sortedListSum([""a"", ""b"", ""b"", ""c"", ""c"", ""a""])
     * []
     * > sortedListSum([""aaaa"", ""bbbb"", ""dd"", ""cc""])
     * [""cc"", ""dd"", ""aaaa"", ""bbbb""]
     */
    public static List<Object> sortedListSum(List<String> lst) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i).length() % 2 == 0) {
                result.add(lst.get(i));
            }
        }
        Collections.sort(result, new Comparator<Object>() {

            @Override
            public int compare(Object o1, Object o2) {
                if (o1.toString().length() == o2.toString().length()) {
                    return o1.toString().compareTo(o2.toString());
                } else {
                    return o1.toString().length() - o2.toString().length();
                }
            }
        });
        return result;
    }
}
","// SortedListSumTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortedListSum}.
* It contains ten unit test cases for the {@link SortedListSum#sortedListSum(List)} method.
*/
class SortedListSumTest {","// SortedListSumTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortedListSum}.
* It contains ten unit test cases for the {@link SortedListSum#sortedListSum(List)} method.
*/
class SortedListSumTest {

	/**
	* Test case for {@link SortedListSum#sortedListSum(List)} method.
	* It tests the method with a list of strings that have odd lengths.
	* The expected result is an empty list.
	*/
	@Test
	void testSortedListSum_oddLengths() {
		List<String> lst = new ArrayList<String>();
		lst.add(""aa"");
		lst.add(""a"");
		lst.add(""aaa"");
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = SortedListSum.sortedListSum(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortedListSum#sortedListSum(List)} method.
	* It tests the method with a list of strings that have even lengths.
	* The expected result is a list of strings in sorted order.
	*/
	@Test
	void testSortedListSum_evenLengths() {
		List<String> lst = new ArrayList<String>();
		lst.add(""ab"");
		lst.add(""a"");
		lst.add(""aaa"");
		lst.add(""cd"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(""ab"");
		expected.add(""cd"");
		List<Object> actual = SortedListSum.sortedListSum(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortedListSum#sortedListSum(List)} method.
	* It tests the method with a list of strings that have even lengths.
	* The expected result is a list of strings in sorted order.
	*/
	@Test
	void testSortedListSum_evenLengths2() {
		List<String> lst = new ArrayList<String>();
		lst.add(""school"");
		lst.add(""AI"");
		lst.add(""asdf"");
		lst.add(""b"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(""AI"");
		expected.add(""asdf"");
		expected.add(""school"");
		List<Object> actual = SortedListSum.sortedListSum(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortedListSum#sortedListSum(List)} method.
	* It tests the method with a list of strings that have even lengths.
	* The expected result is a list of strings in sorted order.
	*/
	@Test
	void testSortedListSum_evenLengths3() {
		List<String> lst = new ArrayList<String>();
		lst.add(""d"");
		lst.add(""b"");
		lst.add(""c"");
		lst.add(""a"");
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = SortedListSum.sortedListSum(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortedListSum#sortedListSum(List)} method.
	* It tests the method with a list of strings that have even lengths.
	* The expected result is a list of strings in sorted order.
	*/
	@Test
	void testSortedListSum_evenLengths4() {
		List<String> lst = new ArrayList<String>();
		lst.add(""d"");
		lst.add(""dcba"");
		lst.add(""abcd"");
		lst.add(""a"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(""abcd"");
		expected.add(""dcba"");
		List<Object> actual = SortedListSum.sortedListSum(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortedListSum#sortedListSum(List)} method.
	* It tests the method with a list of strings that have even lengths.
	* The expected result is a list of strings in sorted order.
	*/
	@Test
	void testSortedListSum_evenLengths5() {
		List<String> lst = new ArrayList<String>();
		lst.add(""AI"");
		lst.add(""ai"");
		lst.add(""au"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(""AI"");
		expected.add(""ai"");
		expected.add(""au"");
		List<Object> actual = SortedListSum.sortedListSum(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortedListSum#sortedListSum(List)} method.
	* It tests the method with a list of strings that have even lengths.
	* The expected result is a list of strings in sorted order.
	*/
	@Test
	void testSortedListSum_evenLengths6() {
		List<String> lst = new ArrayList<String>();
		lst.add(""a"");
		lst.add(""b"");
		lst.add(""b"");
		lst.add(""c"");
		lst.add(""c"");
		lst.add(""a"");
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = SortedListSum.sortedListSum(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortedListSum#sortedListSum(List)} method.
	* It tests the method with a list of strings that have even lengths.
	* The expected result is a list of strings in sorted order.
	*/
	@Test
	void testSortedListSum_evenLengths7() {
		List<String> lst = new ArrayList<String>();
		lst.add(""aaaa"");
		lst.add(""bbbb"");
		lst.add(""dd"");
		lst.add(""cc"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(""cc"");
		expected.add(""dd"");
		expected.add(""aaaa"");
		expected.add(""bbbb"");
		List<Object> actual = SortedListSum.sortedListSum(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortedListSum#sortedListSum(List)} method.
	* It tests the method with a list of strings that have even lengths.
	* The expected result is a list of strings in sorted order.
	*/
	@Test
	void testSortedListSum_evenLengths8() {
		List<String> lst = new ArrayList<String>();
		lst.add(""aaaa"");
		lst.add(""bbbb"");
		lst.add(""dd"");
		lst.add(""cc"");
		lst.add(""dd"");
		lst.add(""cc"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(""cc"");
		expected.add(""cc"");
		expected.add(""dd"");
		expected.add(""dd"");
		expected.add(""aaaa"");
		expected.add(""bbbb"");
		List<Object> actual = SortedListSum.sortedListSum(lst);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortedListSum#sortedListSum(List)} method.
	* It tests the method with a list of strings that have even lengths.
	* The expected result is a list of strings in sorted order.
	*/
	@Test
	void testSortedListSum_evenLengths"
cmpl-6tUZVOPG7D4UZjkfeTPkFvh2XXejD,/HumanEvalJava/src/main/java/original/id_15.java,63.07976269721985,length,"// StringSequence.java
package original;

class StringSequence {

    /**
     * Return a string containing space-delimited numbers starting from 0 up to n inclusive.
     *
     * > stringSequence(0)
     * ""0""
     * > stringSequence(5)
     * ""0 1 2 3 4 5""
     * > stringSequence(0)
     * ""0""
     * > stringSequence(3)
     * ""0 1 2 3""
     * > stringSequence(10)
     * ""0 1 2 3 4 5 6 7 8 9 10""
     */
    public static String stringSequence(int n) {
        String result = """";
        for (int i = 0; i <= n; i++) {
            result += i + "" "";
        }
        return result.trim();
    }
}
","// StringSequenceTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringSequence}.
* It contains ten unit test cases for the {@link StringSequence#stringSequence(int)} method.
*/
class StringSequenceTest {","// StringSequenceTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringSequence}.
* It contains ten unit test cases for the {@link StringSequence#stringSequence(int)} method.
*/
class StringSequenceTest {

	@Test
	void testStringSequence0() {
		assertEquals(""0"", StringSequence.stringSequence(0));
	}
	
	@Test
	void testStringSequence1() {
		assertEquals(""0 1"", StringSequence.stringSequence(1));
	}
	
	@Test
	void testStringSequence2() {
		assertEquals(""0 1 2"", StringSequence.stringSequence(2));
	}
	
	@Test
	void testStringSequence3() {
		assertEquals(""0 1 2 3"", StringSequence.stringSequence(3));
	}
	
	@Test
	void testStringSequence4() {
		assertEquals(""0 1 2 3 4"", StringSequence.stringSequence(4));
	}
	
	@Test
	void testStringSequence5() {
		assertEquals(""0 1 2 3 4 5"", StringSequence.stringSequence(5));
	}
	
	@Test
	void testStringSequence6() {
		assertEquals(""0 1 2 3 4 5 6"", StringSequence.stringSequence(6));
	}
	
	@Test
	void testStringSequence7() {
		assertEquals(""0 1 2 3 4 5 6 7"", StringSequence.stringSequence(7));
	}
	
	@Test
	void testStringSequence8() {
		assertEquals(""0 1 2 3 4 5 6 7 8"", StringSequence.stringSequence(8));
	}
	
	@Test
	void testStringSequence9() {
		assertEquals(""0 1 2 3 4 5 6 7 8 9"", StringSequence.stringSequence(9));
	}
	
	@Test
	void testStringSequence10() {
		assertEquals(""0 1 2 3 4 5 6 7 8 9 10"", StringSequence.stringSequence(10));
	}
}

// StringSequenceTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringSequence}.
* It contains ten unit test cases for the {@link StringSequence#stringSequence(int)} method.
*/
class StringSequenceTest {
		
	@Test
	void testStringSequence0() {
		assertEquals(""0"", StringSequence.stringSequence(0));
	}
	
	@Test
	void testStringSequence1() {
		assertEquals(""0 1"", StringSequence.stringSequence(1));
	}
	
	@Test
	void testStringSequence2() {
		assertEquals(""0 1 2"", StringSequence.stringSequence(2));
	}
	
	@Test
	void testStringSequence3() {
		assertEquals(""0 1 2 3"", StringSequence.stringSequence(3));
	}
	
	@Test
	void testStringSequence4() {
		assertEquals(""0 1 2 3 4"", StringSequence.stringSequence(4));
	}
	
	@Test
	void testStringSequence5() {
		assertEquals(""0 1 2 3 4 5"", StringSequence.stringSequence(5));
	}
	
	@Test
	void testStringSequence6() {
		assertEquals(""0 1 2 3 4 5 6"", StringSequence.stringSequence(6));
	}
	
	@Test
	void testStringSequence7() {
		assertEquals(""0 1 2 3 4 5 6 7"", StringSequence.stringSequence(7));
	}
	
	@Test
	void testStringSequence8() {
		assertEquals(""0 1 2 3 4 5 6 7 8"", StringSequence.stringSequence(8));
	}
	
	@Test
	void testStringSequence9() {
		assertEquals(""0 1 2 3 4 5 6 7 8 9"", StringSequence.stringSequence(9));
	}
	
	@Test
	void testStringSequence10() {
		assertEquals(""0 1 2 3 4 5 6 7 8 9 10"", StringSequence.stringSequence(10));
	}
}

// StringSequenceTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringSequence}.
* It contains ten unit test cases for the {@link StringSequence#stringSequence(int)} method.
*/
class StringSequenceTest {
		
	@Test
	void testStringSequence0() {
		assertEquals(""0"", StringSequence.stringSequence(0));
	}
	
	@Test
	void testStringSequence1() {
		assertEquals(""0 1"", StringSequence.stringSequence(1));
	}
	
	@Test
	void testStringSequence2() {
		assertEquals(""0 1 2"", StringSequence.stringSequence(2));
	}
	
	@Test
	void testStringSequence3() {
		assertEquals(""0 1 2 3"", StringSequence.stringSequence(3));
	}
	
	@Test
	void testStringSequence4() {
		assertEquals(""0 1 2 3 4"", StringSequence.stringSequence(4));
	}
	
	@Test
	void testStringSequence5() {
		assertEquals(""0 1 2 3 4 5"", StringSequence.stringSequence(5));
	}
	
	@Test
	void testStringSequence6() {
		assertEquals(""0 1 2 3 4 5 6"", StringSequence.stringSequence(6));
	}
	
	@Test
	void testStringSequence7() {
		assertEquals(""0 1 2 3 4 5 6 7"", StringSequence.stringSequence(7));
	}
	
	@Test
	void testStringSequence8() {
		assertEquals(""0 1 2 3 4 5 6 7 8"", StringSequence.stringSequence(8));
	}
	
	@Test
	void testStringSequence9() {
		assertEquals(""0 1 2 3 4 5 6 7 8 9"", StringSequence.stringSequence(9));
	}
	
	@Test
	void testStringSequence10() {
		assertEquals(""0 1 2 3 4 5 6 7 8 9 10"", StringSequence.stringSequence(10));
	}
}

// StringSequenceTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringSequence}.
* It contains ten unit test cases for the {@link StringSequence#stringSequence(int)} method.
*/
class StringSequenceTest {
		
	@Test
	void testStringSequence0() {
		assertEquals(""0"", StringSequence.stringSequence(0));
	}
	
	@Test
	void testStringSequence1() {
		assertEquals(""0 1"", StringSequence.stringSequence(1));
	}
	
	@Test
	void testStringSequence2() {
		assertEquals(""0 1 2"", StringSequence.stringSequence(2));
	}
	
	@Test
	void testStringSequence3() {
		assertEquals(""0 1 2 3"", StringSequence.stringSequence(3));
	}
	
	@Test
	void testStringSequence4() {
		assertEquals(""0 1 2 3 4"", StringSequence.stringSequence(4));
	}
	
	@Test
	void testStringSequence5() {
		assertEquals(""0 1 2 3 4 5"", StringSequence.stringSequence(5));
	}
	
	@Test
	void testStringSequence6() {
		assertEquals(""0 1 2 3 4 5 6"", StringSequence.stringSequence(6));
	}
	"
cmpl-6tUaWRJDmxoQaOBGbRgZoqkaPduTa,/HumanEvalJava/src/main/java/original/id_150.java,59.98872971534729,length,"// XOrY.java
package original;

class XOrY {

    /**
     * A simple program which should return the value of x if n is
     * a prime number and should return the value of y otherwise.
     *
     * Examples:
     * for xOrY(7, 34, 12) == 34
     * for xOrY(15, 8, 5) == 5
     *
     * > xOrY(7, 34, 12)
     * 34
     * > xOrY(15, 8, 5)
     * 5
     * > xOrY(3, 33, 5212)
     * 33
     * > xOrY(1259, 3, 52)
     * 3
     * > xOrY(7919, -1, 12)
     * -1
     * > xOrY(3609, 1245, 583)
     * 583
     * > xOrY(91, 56, 129)
     * 129
     * > xOrY(6, 34, 1234)
     * 1234
     * > xOrY(1, 2, 0)
     * 0
     * > xOrY(2, 2, 0)
     * 2
     */
    public static int xOrY(int n, int x, int y) {
        if (n == 1) {
            return y;
        }
        for (int i = 2; i < n; i++) {
            if (n % i == 0) {
                return y;
            }
        }
        return x;
    }
}
","// XOrYTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XOrY}.
* It contains ten unit test cases for the {@link XOrY#xOrY(int, int, int)} method.
*/
class XOrYTest {","// XOrYTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XOrY}.
* It contains ten unit test cases for the {@link XOrY#xOrY(int, int, int)} method.
*/
class XOrYTest {

	@Test
	void testXOrY() {
		assertEquals(34, XOrY.xOrY(7, 34, 12));
		assertEquals(5, XOrY.xOrY(15, 8, 5));
		assertEquals(33, XOrY.xOrY(3, 33, 5212));
		assertEquals(3, XOrY.xOrY(1259, 3, 52));
		assertEquals(-1, XOrY.xOrY(7919, -1, 12));
		assertEquals(583, XOrY.xOrY(3609, 1245, 583));
		assertEquals(129, XOrY.xOrY(91, 56, 129));
		assertEquals(1234, XOrY.xOrY(6, 34, 1234));
		assertEquals(0, XOrY.xOrY(1, 2, 0));
		assertEquals(2, XOrY.xOrY(2, 2, 0));
	}
}

// XOrYTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XOrY}.
* It contains ten unit test cases for the {@link XOrY#xOrY(int, int, int)} method.
*/
class XOrYTest {
		
	@Test
	void testXOrY() {
		assertEquals(34, XOrY.xOrY(7, 34, 12));
		assertEquals(5, XOrY.xOrY(15, 8, 5));
		assertEquals(33, XOrY.xOrY(3, 33, 5212));
		assertEquals(3, XOrY.xOrY(1259, 3, 52));
		assertEquals(-1, XOrY.xOrY(7919, -1, 12));
		assertEquals(583, XOrY.xOrY(3609, 1245, 583));
		assertEquals(129, XOrY.xOrY(91, 56, 129));
		assertEquals(1234, XOrY.xOrY(6, 34, 1234));
		assertEquals(0, XOrY.xOrY(1, 2, 0));
		assertEquals(2, XOrY.xOrY(2, 2, 0));
	}
}

// XOrYTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XOrY}.
* It contains ten unit test cases for the {@link XOrY#xOrY(int, int, int)} method.
*/
class XOrYTest {
		
	@Test
	void testXOrY() {
		assertEquals(34, XOrY.xOrY(7, 34, 12));
		assertEquals(5, XOrY.xOrY(15, 8, 5));
		assertEquals(33, XOrY.xOrY(3, 33, 5212));
		assertEquals(3, XOrY.xOrY(1259, 3, 52));
		assertEquals(-1, XOrY.xOrY(7919, -1, 12));
		assertEquals(583, XOrY.xOrY(3609, 1245, 583));
		assertEquals(129, XOrY.xOrY(91, 56, 129));
		assertEquals(1234, XOrY.xOrY(6, 34, 1234));
		assertEquals(0, XOrY.xOrY(1, 2, 0));
		assertEquals(2, XOrY.xOrY(2, 2, 0));
	}
}

// XOrYTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XOrY}.
* It contains ten unit test cases for the {@link XOrY#xOrY(int, int, int)} method.
*/
class XOrYTest {
		
	@Test
	void testXOrY() {
		assertEquals(34, XOrY.xOrY(7, 34, 12));
		assertEquals(5, XOrY.xOrY(15, 8, 5));
		assertEquals(33, XOrY.xOrY(3, 33, 5212));
		assertEquals(3, XOrY.xOrY(1259, 3, 52));
		assertEquals(-1, XOrY.xOrY(7919, -1, 12));
		assertEquals(583, XOrY.xOrY(3609, 1245, 583));
		assertEquals(129, XOrY.xOrY(91, 56, 129));
		assertEquals(1234, XOrY.xOrY(6, 34, 1234));
		assertEquals(0, XOrY.xOrY(1, 2, 0));
		assertEquals(2, XOrY.xOrY(2, 2, 0));
	}
}

// XOrYTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XOrY}.
* It contains ten unit test cases for the {@link XOrY#xOrY(int, int, int)} method.
*/
class XOrYTest {
		
	@Test
	void testXOrY() {
		assertEquals(34, XOrY.xOrY(7, 34, 12));
		assertEquals(5, XOrY.xOrY(15, 8, 5));
		assertEquals(33, XOrY.xOrY(3, 33, 5212));
		assertEquals(3, XOrY.xOrY(1259, 3, 52));
		assertEquals(-1, XOrY.xOrY(7919, -1, 12));
		assertEquals(583, XOrY.xOrY(3609, 1245, 583));
		assertEquals(129, XOrY.xOrY(91, 56, 129));
		assertEquals(1234, XOrY.xOrY(6, 34, 1234));
		assertEquals(0, XOrY.xOrY(1, 2, 0));
		assertEquals(2, XOrY.xOrY(2, 2, 0));
	}
}

// XOrYTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XOrY}.
* It contains ten unit test cases for the {@link XOrY#xOrY(int, int, int)} method.
*/
class XOrYTest {
		
	@Test
	void testXOrY() {
		assertEquals(34, XOrY.xOrY(7, 34, 12));
		assertEquals(5, XOrY.xOrY(15, 8, 5));
		assertEquals(33, XOrY.xOrY(3, 33, 5212));
		assertEquals(3, XOrY.xOrY(1259, 3, 52));
		assertEquals(-1, XOrY.xOrY(7919, -1, 12));
		assertEquals(583, XOrY.xOrY(3609, 1245, 583));
		assertEquals(129, XOrY.xOrY(91, 56, 129));
		assertEquals(1234, XOrY.xOrY(6, 34, 1234"
cmpl-6tUbZ8lNgnr6cTn2YBkvqSg7svMki,/HumanEvalJava/src/main/java/original/id_151.java,34.57089710235596,stop,"// DoubleTheDifference.java
package original;

import java.util.List;

class DoubleTheDifference {

    /**
     * Given a list of numbers, return the sum of squares of the numbers
     * in the list that are odd. Ignore numbers that are negative or not integers.
     *
     * doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
     * doubleTheDifference([-1, -2, 0]) == 0
     * doubleTheDifference([9, -2]) == 81
     * doubleTheDifference([0]) == 0
     *
     * If the input list is empty, return 0.
     *
     * > doubleTheDifference([])
     * 0
     * > doubleTheDifference([5, 4])
     * 25
     * > doubleTheDifference([0.1, 0.2, 0.3])
     * 0
     * > doubleTheDifference([-10, -20, -30])
     * 0
     * > doubleTheDifference([-1, -2, 8])
     * 0
     * > doubleTheDifference([0.2, 3, 5])
     * 34
     * > doubleTheDifference([-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])
     * 166650
     */
    public static int doubleTheDifference(List<Object> lst) {
        int sum = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) instanceof Integer) {
                int num = (int) lst.get(i);
                if (num % 2 != 0 && num > 0) {
                    sum += num * num;
                }
            }
        }
        return sum;
    }
}
","// DoubleTheDifferenceTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DoubleTheDifference}.
* It contains ten unit test cases for the {@link DoubleTheDifference#doubleTheDifference(List)} method.
*/
class DoubleTheDifferenceTest {","// DoubleTheDifferenceTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DoubleTheDifference}.
* It contains ten unit test cases for the {@link DoubleTheDifference#doubleTheDifference(List)} method.
*/
class DoubleTheDifferenceTest {

	/**
	* Test case for {@link DoubleTheDifference#doubleTheDifference(List)} method.
	* It tests the method with an empty list.
	*/
	@Test
	void testDoubleTheDifference_EmptyList() {
		List<Object> lst = List.of();
		assertEquals(0, DoubleTheDifference.doubleTheDifference(lst));
	}
	
	/**
	* Test case for {@link DoubleTheDifference#doubleTheDifference(List)} method.
	* It tests the method with a list containing only one element.
	*/
	@Test
	void testDoubleTheDifference_OneElement() {
		List<Object> lst = List.of(5);
		assertEquals(25, DoubleTheDifference.doubleTheDifference(lst));
	}
	
	/**
	* Test case for {@link DoubleTheDifference#doubleTheDifference(List)} method.
	* It tests the method with a list containing only one element.
	*/
	@Test
	void testDoubleTheDifference_OneElement_2() {
		List<Object> lst = List.of(4);
		assertEquals(0, DoubleTheDifference.doubleTheDifference(lst));
	}
	
	/**
	* Test case for {@link DoubleTheDifference#doubleTheDifference(List)} method.
	* It tests the method with a list containing only one element.
	*/
	@Test
	void testDoubleTheDifference_OneElement_3() {
		List<Object> lst = List.of(0);
		assertEquals(0, DoubleTheDifference.doubleTheDifference(lst));
	}
	
	/**
	* Test case for {@link DoubleTheDifference#doubleTheDifference(List)} method.
	* It tests the method with a list containing only one element.
	*/
	@Test
	void testDoubleTheDifference_OneElement_4() {
		List<Object> lst = List.of(-1);
		assertEquals(0, DoubleTheDifference.doubleTheDifference(lst));
	}
	
	/**
	* Test case for {@link DoubleTheDifference#doubleTheDifference(List)} method.
	* It tests the method with a list containing only one element.
	*/
	@Test
	void testDoubleTheDifference_OneElement_5() {
		List<Object> lst = List.of(0.1);
		assertEquals(0, DoubleTheDifference.doubleTheDifference(lst));
	}
	
	/**
	* Test case for {@link DoubleTheDifference#doubleTheDifference(List)} method.
	* It tests the method with a list containing only one element.
	*/
	@Test
	void testDoubleTheDifference_OneElement_6() {
		List<Object> lst = List.of(-10);
		assertEquals(0, DoubleTheDifference.doubleTheDifference(lst));
	}
	
	/**
	* Test case for {@link DoubleTheDifference#doubleTheDifference(List)} method.
	* It tests the method with a list containing only one element.
	*/
	@Test
	void testDoubleTheDifference_OneElement_7() {
		List<Object> lst = List.of(-1);
		assertEquals(0, DoubleTheDifference.doubleTheDifference(lst));
	}
	
	/**
	* Test case for {@link DoubleTheDifference#doubleTheDifference(List)} method.
	* It tests the method with a list containing only one element.
	*/
	@Test
	void testDoubleTheDifference_OneElement_8() {
		List<Object> lst = List.of(0.2);
		assertEquals(0, DoubleTheDifference.doubleTheDifference(lst));
	}
	
	/**
	* Test case for {@link DoubleTheDifference#doubleTheDifference(List)} method.
	* It tests the method with a list containing only one element.
	*/
	@Test
	void testDoubleTheDifference_OneElement_9() {
		List<Object> lst = List.of(-99);
		assertEquals(0, DoubleTheDifference.doubleTheDifference(lst));
	}
	
	/**
	* Test case for {@link DoubleTheDifference#doubleTheDifference(List)} method.
	* It tests the method with a list containing only one element.
	*/
	@Test
	void testDoubleTheDifference_OneElement_10() {
		List<Object> lst = List.of(99);
		assertEquals(9801, DoubleTheDifference.doubleTheDifference(lst));
	}
}"
cmpl-6tUccbJrRAnQ8t07zusoWeUIB9kBX,/HumanEvalJava/src/main/java/original/id_152.java,58.95960330963135,length,"// Compare.java
package original;

import java.util.ArrayList;
import java.util.List;

class Compare {

    /**
     * I think we all remember that feeling when the result of some long-awaited
     * event is finally known. The feelings and thoughts you have at that moment are
     * definitely worth noting down and comparing.
     * Your task is to determine if a person correctly guessed the results of a number of matches.
     * You are given two arrays of scores and guesses of equal length, where each index shows a match.
     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
     * the value is 0, and if not, the value is the absolute difference between the guess and the score.
     *
     * example:
     *
     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
     *
     * > compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])
     * [0, 0, 0, 0, 3, 3]
     * > compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])
     * [0, 0, 0, 0, 0, 0]
     * > compare([1, 2, 3], [-1, -2, -3])
     * [2, 4, 6]
     * > compare([1, 2, 3, 5], [-1, 2, 3, 4])
     * [2, 0, 0, 1]
     */
    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < game.size(); i++) {
            result.add(Math.abs(game.get(i) - guess.get(i)));
        }
        return result;
    }
}
","// CompareTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Compare}.
* It contains ten unit test cases for the {@link Compare#compare(List, List)} method.
*/
class CompareTest {","// CompareTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Compare}.
* It contains ten unit test cases for the {@link Compare#compare(List, List)} method.
*/
class CompareTest {

	@Test
	void testCompare() {
		List<Integer> game = new ArrayList<>();
		List<Integer> guess = new ArrayList<>();
		List<Integer> expected = new ArrayList<>();
		
		game.add(1);
		game.add(2);
		game.add(3);
		game.add(4);
		game.add(5);
		game.add(1);
		
		guess.add(1);
		guess.add(2);
		guess.add(3);
		guess.add(4);
		guess.add(2);
		guess.add(-2);
		
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(3);
		expected.add(3);
		
		assertEquals(expected, Compare.compare(game, guess));
	}
	
	@Test
	void testCompare2() {
		List<Integer> game = new ArrayList<>();
		List<Integer> guess = new ArrayList<>();
		List<Integer> expected = new ArrayList<>();
		
		game.add(0);
		game.add(5);
		game.add(0);
		game.add(0);
		game.add(0);
		game.add(4);
		
		guess.add(4);
		guess.add(1);
		guess.add(1);
		guess.add(0);
		guess.add(0);
		guess.add(-2);
		
		expected.add(4);
		expected.add(4);
		expected.add(1);
		expected.add(0);
		expected.add(0);
		expected.add(6);
		
		assertEquals(expected, Compare.compare(game, guess));
	}
	
	@Test
	void testCompare3() {
		List<Integer> game = new ArrayList<>();
		List<Integer> guess = new ArrayList<>();
		List<Integer> expected = new ArrayList<>();
		
		game.add(1);
		game.add(2);
		game.add(3);
		
		guess.add(-1);
		guess.add(-2);
		guess.add(-3);
		
		expected.add(2);
		expected.add(4);
		expected.add(6);
		
		assertEquals(expected, Compare.compare(game, guess));
	}
	
	@Test
	void testCompare4() {
		List<Integer> game = new ArrayList<>();
		List<Integer> guess = new ArrayList<>();
		List<Integer> expected = new ArrayList<>();
		
		game.add(1);
		game.add(2);
		game.add(3);
		game.add(5);
		
		guess.add(-1);
		guess.add(2);
		guess.add(3);
		guess.add(4);
		
		expected.add(2);
		expected.add(0);
		expected.add(0);
		expected.add(1);
		
		assertEquals(expected, Compare.compare(game, guess));
	}
	
	@Test
	void testCompare5() {
		List<Integer> game = new ArrayList<>();
		List<Integer> guess = new ArrayList<>();
		List<Integer> expected = new ArrayList<>();
		
		game.add(1);
		game.add(2);
		game.add(3);
		game.add(4);
		game.add(5);
		game.add(6);
		
		guess.add(1);
		guess.add(2);
		guess.add(3);
		guess.add(4);
		guess.add(5);
		guess.add(6);
		
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(0);
		
		assertEquals(expected, Compare.compare(game, guess));
	}
	
	@Test
	void testCompare6() {
		List<Integer> game = new ArrayList<>();
		List<Integer> guess = new ArrayList<>();
		List<Integer> expected = new ArrayList<>();
		
		game.add(1);
		game.add(2);
		game.add(3);
		game.add(4);
		game.add(5);
		game.add(6);
		
		guess.add(1);
		guess.add(2);
		guess.add(3);
		guess.add(4);
		guess.add(5);
		guess.add(7);
		
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(1);
		
		assertEquals(expected, Compare.compare(game, guess));
	}
	
	@Test
	void testCompare7() {
		List<Integer> game = new ArrayList<>();
		List<Integer> guess = new ArrayList<>();
		List<Integer> expected = new ArrayList<>();
		
		game.add(1);
		game.add(2);
		game.add(3);
		game.add(4);
		game.add(5);
		game.add(6);
		
		guess.add(1);
		guess.add(2);
		guess.add(3);
		guess.add(4);
		guess.add(5);
		guess.add(8);
		
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(2);
		
		assertEquals(expected, Compare.compare(game, guess));
	}
	
	@Test
	void testCompare8() {
		List<Integer> game = new ArrayList<>();
		List<Integer> guess = new ArrayList<>();
		List<Integer> expected = new ArrayList<>();
		
		game.add(1);
		game.add(2);
		game.add(3);
		game.add(4);
		game.add(5);
		game.add(6);
		
		guess.add(1);
		guess.add(2);
		guess.add(3);
		guess.add(4);
		guess.add(5);
		guess.add(9);
		
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(3);
		
		assertEquals(expected, Compare.compare(game, guess));
	}
	
	@Test
	void testCompare9() {
		List<Integer> game = new ArrayList<>();
		List<Integer> guess = new ArrayList<>();
		List<Integer> expected = new ArrayList<>();
		
"
cmpl-6tUdfpYHS7TzwlA3TYv7TudK6UC4T,/HumanEvalJava/src/main/java/original/id_153.java,19.546869039535522,stop,"// StrongestExtension.java
package original;

import java.util.List;

class StrongestExtension {

    /**
     * You will be given the name of a class (a string) and a list of extensions.
     * The extensions are to be used to load additional classes to the class. The
     * strength of the extension is as follows: Let CAP be the number of the uppercase
     * letters in the extension's name, and let SM be the number of lowercase letters
     * in the extension's name, the strength is given by the fraction CAP - SM.
     * You should find the strongest extension and return a string in this
     * format: ClassName.StrongestExtensionName.
     * If there are two or more extensions with the same strength, you should
     * choose the one that comes first in the list.
     * For example, if you are given ""Slices"" as the class and a list of the
     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension
     * (its strength is -1).
     * Example:
     * for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
     *
     * > strongestExtension(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""])
     * ""Watashi.eIGHt8OKe""
     * > strongestExtension(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""])
     * ""Boku123.YEs.WeCaNe""
     * > strongestExtension(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""])
     * ""__YESIMHERE.NuLl__""
     * > strongestExtension(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""])
     * ""K.TAR""
     * > strongestExtension(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""])
     * ""__HAHA.123""
     * > strongestExtension(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""])
     * ""YameRore.okIWILL123""
     * > strongestExtension(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""])
     * ""finNNalLLly.WoW""
     * > strongestExtension(""_"", [""Bb"", ""91245""])
     * ""_.Bb""
     * > strongestExtension(""Sp"", [""671235"", ""Bb""])
     * ""Sp.671235""
     */
    public static String strongestExtension(String className, List<String> extensions) {
        int max = Integer.MIN_VALUE;
        String result = """";
        for (int i = 0; i < extensions.size(); i++) {
            int cap = 0;
            int sm = 0;
            for (int j = 0; j < extensions.get(i).length(); j++) {
                if (Character.isUpperCase(extensions.get(i).charAt(j))) {
                    cap++;
                } else if (Character.isLowerCase(extensions.get(i).charAt(j))) {
                    sm++;
                }
            }
            if (cap - sm > max) {
                max = cap - sm;
                result = className + ""."" + extensions.get(i);
            }
        }
        return result;
    }
}
","// StrongestExtensionTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StrongestExtension}.
* It contains ten unit test cases for the {@link StrongestExtension#strongestExtension(String, List)} method.
*/
class StrongestExtensionTest {","// StrongestExtensionTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StrongestExtension}.
* It contains ten unit test cases for the {@link StrongestExtension#strongestExtension(String, List)} method.
*/
class StrongestExtensionTest {

	@Test
	void testStrongestExtension() {
		assertEquals(""my_class.AA"", StrongestExtension.strongestExtension(""my_class"", List.of(""AA"", ""Be"", ""CC"")));
		assertEquals(""Watashi.eIGHt8OKe"", StrongestExtension.strongestExtension(""Watashi"", List.of(""tEN"", ""niNE"", ""eIGHt8OKe"")));
		assertEquals(""Boku123.YEs.WeCaNe"", StrongestExtension.strongestExtension(""Boku123"", List.of(""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg"")));
		assertEquals(""__YESIMHERE.NuLl__"", StrongestExtension.strongestExtension(""__YESIMHERE"", List.of(""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321"")));
		assertEquals(""K.TAR"", StrongestExtension.strongestExtension(""K"", List.of(""Ta"", ""TAR"", ""t234An"", ""cosSo"")));
		assertEquals(""__HAHA.123"", StrongestExtension.strongestExtension(""__HAHA"", List.of(""Tab"", ""123"", ""781345"", ""-_-"")));
		assertEquals(""YameRore.okIWILL123"", StrongestExtension.strongestExtension(""YameRore"", List.of(""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-"")));
		assertEquals(""finNNalLLly.WoW"", StrongestExtension.strongestExtension(""finNNalLLly"", List.of(""Die"", ""NowW"", ""Wow"", ""WoW"")));
		assertEquals(""_.Bb"", StrongestExtension.strongestExtension(""_"", List.of(""Bb"", ""91245"")));
		assertEquals(""Sp.671235"", StrongestExtension.strongestExtension(""Sp"", List.of(""671235"", ""Bb"")));
	}
}"
cmpl-6tUeiHhOxSG0hNkExgOneGDEhHvjW,/HumanEvalJava/src/main/java/original/id_154.java,51.35385513305664,length,"// CycpatternCheck.java
package original;

class CycpatternCheck {

    /**
     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
     * cycpatternCheck(""abcd"",""abd"") => False
     * cycpatternCheck(""hello"",""ell"") => True
     * cycpatternCheck(""whassup"",""psus"") => False
     * cycpatternCheck(""abab"",""baa"") => True
     * cycpatternCheck(""efef"",""eeff"") => False
     * cycpatternCheck(""himenss"",""simen"") => True
     *
     * > cycpatternCheck(""xyzw"", ""xyw"")
     * false
     * > cycpatternCheck(""yello"", ""ell"")
     * true
     * > cycpatternCheck(""whattup"", ""ptut"")
     * false
     * > cycpatternCheck(""efef"", ""fee"")
     * true
     * > cycpatternCheck(""abab"", ""aabb"")
     * false
     * > cycpatternCheck(""winemtt"", ""tinem"")
     * true
     */
    public static Boolean cycpatternCheck(String a, String b) {
        int l = b.length();
        String pat = b + b;
        for (int i = 0; i < a.length() - l + 1; i++) {
            for (int j = 0; j < l + 1; j++) {
                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {
                    return true;
                }
            }
        }
        return false;
    }
}
","// CycpatternCheckTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CycpatternCheck}.
* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.
*/
class CycpatternCheckTest {","// CycpatternCheckTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CycpatternCheck}.
* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.
*/
class CycpatternCheckTest {

	@Test
	void testCycpatternCheck() {
		assertFalse(CycpatternCheck.cycpatternCheck(""abcd"",""abd""));
		assertTrue(CycpatternCheck.cycpatternCheck(""hello"",""ell""));
		assertFalse(CycpatternCheck.cycpatternCheck(""whassup"",""psus""));
		assertTrue(CycpatternCheck.cycpatternCheck(""abab"",""baa""));
		assertFalse(CycpatternCheck.cycpatternCheck(""efef"",""eeff""));
		assertTrue(CycpatternCheck.cycpatternCheck(""himenss"",""simen""));
		assertFalse(CycpatternCheck.cycpatternCheck(""xyzw"", ""xyw""));
		assertTrue(CycpatternCheck.cycpatternCheck(""yello"", ""ell""));
		assertFalse(CycpatternCheck.cycpatternCheck(""whattup"", ""ptut""));
		assertTrue(CycpatternCheck.cycpatternCheck(""efef"", ""fee""));
		assertFalse(CycpatternCheck.cycpatternCheck(""abab"", ""aabb""));
		assertTrue(CycpatternCheck.cycpatternCheck(""winemtt"", ""tinem""));
	}
}

// CycpatternCheckTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CycpatternCheck}.
* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.
*/
class CycpatternCheckTest {
		
	@Test
	void testCycpatternCheck() {
		assertFalse(CycpatternCheck.cycpatternCheck(""abcd"",""abd""));
		assertTrue(CycpatternCheck.cycpatternCheck(""hello"",""ell""));
		assertFalse(CycpatternCheck.cycpatternCheck(""whassup"",""psus""));
		assertTrue(CycpatternCheck.cycpatternCheck(""abab"",""baa""));
		assertFalse(CycpatternCheck.cycpatternCheck(""efef"",""eeff""));
		assertTrue(CycpatternCheck.cycpatternCheck(""himenss"",""simen""));
		assertFalse(CycpatternCheck.cycpatternCheck(""xyzw"", ""xyw""));
		assertTrue(CycpatternCheck.cycpatternCheck(""yello"", ""ell""));
		assertFalse(CycpatternCheck.cycpatternCheck(""whattup"", ""ptut""));
		assertTrue(CycpatternCheck.cycpatternCheck(""efef"", ""fee""));
		assertFalse(CycpatternCheck.cycpatternCheck(""abab"", ""aabb""));
		assertTrue(CycpatternCheck.cycpatternCheck(""winemtt"", ""tinem""));
	}
}

// CycpatternCheckTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CycpatternCheck}.
* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.
*/
class CycpatternCheckTest {
		
	@Test
	void testCycpatternCheck() {
		assertFalse(CycpatternCheck.cycpatternCheck(""abcd"",""abd""));
		assertTrue(CycpatternCheck.cycpatternCheck(""hello"",""ell""));
		assertFalse(CycpatternCheck.cycpatternCheck(""whassup"",""psus""));
		assertTrue(CycpatternCheck.cycpatternCheck(""abab"",""baa""));
		assertFalse(CycpatternCheck.cycpatternCheck(""efef"",""eeff""));
		assertTrue(CycpatternCheck.cycpatternCheck(""himenss"",""simen""));
		assertFalse(CycpatternCheck.cycpatternCheck(""xyzw"", ""xyw""));
		assertTrue(CycpatternCheck.cycpatternCheck(""yello"", ""ell""));
		assertFalse(CycpatternCheck.cycpatternCheck(""whattup"", ""ptut""));
		assertTrue(CycpatternCheck.cycpatternCheck(""efef"", ""fee""));
		assertFalse(CycpatternCheck.cycpatternCheck(""abab"", ""aabb""));
		assertTrue(CycpatternCheck.cycpatternCheck(""winemtt"", ""tinem""));
	}
}

// CycpatternCheckTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CycpatternCheck}.
* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.
*/
class CycpatternCheckTest {
		
	@Test
	void testCycpatternCheck() {
		assertFalse(CycpatternCheck.cycpatternCheck(""abcd"",""abd""));
		assertTrue(CycpatternCheck.cycpatternCheck(""hello"",""ell""));
		assertFalse(CycpatternCheck.cycpatternCheck(""whassup"",""psus""));
		assertTrue(CycpatternCheck.cycpatternCheck(""abab"",""baa""));
		assertFalse(CycpatternCheck.cycpatternCheck(""efef"",""eeff""));
		assertTrue(CycpatternCheck.cycpatternCheck(""himenss"",""simen""));
		assertFalse(CycpatternCheck.cycpatternCheck(""xyzw"", ""xyw""));
		assertTrue(CycpatternCheck.cycpatternCheck(""yello"", ""ell""));
		assertFalse(CycpatternCheck.cycpatternCheck(""whattup"", ""ptut""));
		assertTrue(CycpatternCheck.cycpatternCheck(""efef"", ""fee""));
		assertFalse(CycpatternCheck.cycpatternCheck(""abab"", ""aabb""));
		assertTrue(CycpatternCheck.cycpatternCheck(""winemtt"", ""tinem""));
	}
}

// CycpatternCheckTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CycpatternCheck}.
* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.
*/
class CycpatternCheckTest {
		
	@Test
	void testCycpatternCheck() {
		assertFalse(CycpatternCheck.cycpatternCheck(""abcd"",""abd""));
		assertTrue(CycpatternCheck.cycpatternCheck(""hello"",""ell""));
		assertFalse(CycpatternCheck.cycpatternCheck(""whassup"",""psus""));
		assertTrue(CycpatternCheck.cycpatternCheck(""abab"",""baa""));
		assertFalse(CycpatternCheck.cycpatternCheck(""efef"",""eeff""));
		assertTrue(CycpatternCheck.cycpatternCheck(""himenss"",""simen""));
		assertFalse(CycpatternCheck.cycpatternCheck(""xyzw"", ""xyw""));
		assertTrue(CycpatternCheck.cycpatternCheck(""yello"", ""ell""));
		assertFalse(CycpatternCheck.cycpatternCheck(""whattup"", ""ptut""));
		assertTrue(CycpatternCheck.cycpatternCheck(""efef"", ""fee""));
		assertFalse(CycpatternCheck.cycpatternCheck(""abab"", ""aabb""));
		assertTrue(CycpatternCheck.cycpatternCheck(""winemtt"", ""tinem""));
	}
}

// CycpatternCheckTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CycpatternCheck}.
* It contains ten unit test"
cmpl-6tUflHsx00mX48oLIsolVByJurmAm,/HumanEvalJava/src/main/java/original/id_155.java,66.74194741249084,length,"// EvenOddCount.java
package original;

import java.util.Arrays;
import java.util.List;

class EvenOddCount {

    /**
     * Given an integer. return a tuple that has the number of even and odd digits respectively.
     *
     * Example:
     * evenOddCount(-12) ==> (1, 1)
     * evenOddCount(123) ==> (1, 2)
     *
     * > evenOddCount(7)
     * [0, 1]
     * > evenOddCount(-78)
     * [1, 1]
     * > evenOddCount(3452)
     * [2, 2]
     * > evenOddCount(346211)
     * [3, 3]
     * > evenOddCount(-345821)
     * [3, 3]
     * > evenOddCount(-2)
     * [1, 0]
     * > evenOddCount(-45347)
     * [2, 3]
     * > evenOddCount(0)
     * [1, 0]
     */
    public static List<Integer> evenOddCount(int num) {
        int even = 0;
        int odd = 0;
        if (num == 0) {
            even++;
        }
        while (num != 0) {
            if (num % 2 == 0) {
                even++;
            } else {
                odd++;
            }
            num /= 10;
        }
        return Arrays.asList(even, odd);
    }
}
","// EvenOddCountTest.java
package original;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddCount}.
* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.
*/
class EvenOddCountTest {","// EvenOddCountTest.java
package original;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddCount}.
* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.
*/
class EvenOddCountTest {

	@Test
	void testEvenOddCount() {
		assertEquals(Arrays.asList(1, 1), EvenOddCount.evenOddCount(-12));
		assertEquals(Arrays.asList(1, 2), EvenOddCount.evenOddCount(123));
		assertEquals(Arrays.asList(0, 1), EvenOddCount.evenOddCount(7));
		assertEquals(Arrays.asList(1, 1), EvenOddCount.evenOddCount(-78));
		assertEquals(Arrays.asList(2, 2), EvenOddCount.evenOddCount(3452));
		assertEquals(Arrays.asList(3, 3), EvenOddCount.evenOddCount(346211));
		assertEquals(Arrays.asList(3, 3), EvenOddCount.evenOddCount(-345821));
		assertEquals(Arrays.asList(1, 0), EvenOddCount.evenOddCount(-2));
		assertEquals(Arrays.asList(2, 3), EvenOddCount.evenOddCount(-45347));
		assertEquals(Arrays.asList(1, 0), EvenOddCount.evenOddCount(0));
	}
}

// EvenOddCountTest.java
package original;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddCount}.
* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.
*/
class EvenOddCountTest {
		
	@Test
	void testEvenOddCount() {
		assertEquals(Arrays.asList(1, 1), EvenOddCount.evenOddCount(-12));
		assertEquals(Arrays.asList(1, 2), EvenOddCount.evenOddCount(123));
		assertEquals(Arrays.asList(0, 1), EvenOddCount.evenOddCount(7));
		assertEquals(Arrays.asList(1, 1), EvenOddCount.evenOddCount(-78));
		assertEquals(Arrays.asList(2, 2), EvenOddCount.evenOddCount(3452));
		assertEquals(Arrays.asList(3, 3), EvenOddCount.evenOddCount(346211));
		assertEquals(Arrays.asList(3, 3), EvenOddCount.evenOddCount(-345821));
		assertEquals(Arrays.asList(1, 0), EvenOddCount.evenOddCount(-2));
		assertEquals(Arrays.asList(2, 3), EvenOddCount.evenOddCount(-45347));
		assertEquals(Arrays.asList(1, 0), EvenOddCount.evenOddCount(0));
	}
}

// EvenOddCountTest.java
package original;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddCount}.
* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.
*/
class EvenOddCountTest {
		
	@Test
	void testEvenOddCount() {
		assertEquals(Arrays.asList(1, 1), EvenOddCount.evenOddCount(-12));
		assertEquals(Arrays.asList(1, 2), EvenOddCount.evenOddCount(123));
		assertEquals(Arrays.asList(0, 1), EvenOddCount.evenOddCount(7));
		assertEquals(Arrays.asList(1, 1), EvenOddCount.evenOddCount(-78));
		assertEquals(Arrays.asList(2, 2), EvenOddCount.evenOddCount(3452));
		assertEquals(Arrays.asList(3, 3), EvenOddCount.evenOddCount(346211));
		assertEquals(Arrays.asList(3, 3), EvenOddCount.evenOddCount(-345821));
		assertEquals(Arrays.asList(1, 0), EvenOddCount.evenOddCount(-2));
		assertEquals(Arrays.asList(2, 3), EvenOddCount.evenOddCount(-45347));
		assertEquals(Arrays.asList(1, 0), EvenOddCount.evenOddCount(0));
	}
}

// EvenOddCountTest.java
package original;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddCount}.
* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.
*/
class EvenOddCountTest {
		
	@Test
	void testEvenOddCount() {
		assertEquals(Arrays.asList(1, 1), EvenOddCount.evenOddCount(-12));
		assertEquals(Arrays.asList(1, 2), EvenOddCount.evenOddCount(123));
		assertEquals(Arrays.asList(0, 1), EvenOddCount.evenOddCount(7));
		assertEquals(Arrays.asList(1, 1), EvenOddCount.evenOddCount(-78));
		assertEquals(Arrays.asList(2, 2), EvenOddCount.evenOddCount(3452));
		assertEquals(Arrays.asList(3, 3), EvenOddCount.evenOddCount(346211));
		assertEquals(Arrays.asList(3, 3), EvenOddCount.evenOddCount(-345821));
		assertEquals(Arrays.asList(1, 0), EvenOddCount.evenOddCount(-2));
		assertEquals(Arrays.asList(2, 3), EvenOddCount.evenOddCount(-45347));
		assertEquals(Arrays.asList(1, 0), EvenOddCount.evenOddCount(0));
	}
}

// EvenOddCountTest.java
package original;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddCount}.
* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.
*/
class EvenOddCountTest {
		
	@Test
	void testEvenOddCount() {
		assertEquals(Arrays.asList(1, 1), EvenOddCount.evenOddCount(-12));
		assertEquals(Arrays.asList(1, 2), EvenOddCount.evenOddCount(123));
		assertEquals(Arrays.asList(0, 1), EvenOddCount.evenOddCount(7));
		assertEquals(Arrays.asList(1, 1), EvenOddCount.evenOddCount(-78));
		assertEquals(Arrays.asList(2, 2), EvenOddCount.evenOddCount(3452));
		assertEquals(Arrays.asList(3, 3), EvenOddCount.evenOddCount(346211));
		assertEquals(Arrays.asList(3, 3), EvenOddCount.evenOddCount(-345821));
		assertEquals(Arrays.asList(1, 0), EvenOddCount.evenOddCount(-2));
		assertEquals(Arrays"
cmpl-6tUgqyvuR0vBe8TMzi2PEVdJZI8Fe,/HumanEvalJava/src/main/java/original/id_156.java,6.166880369186401,stop,"// IntToMiniRoman.java
package original;

class IntToMiniRoman {

    /**
     * * Given a positive integer, obtain its roman numeral equivalent as a string,
     * and return it in lowercase.
     * Restrictions: 1 <= num <= 1000
     *
     * Examples:
     * >>> intToMiniRoman(19) == 'xix'
     * >>> intToMiniRoman(152) == 'clii'
     * >>> intToMiniRoman(426) == 'cdxxvi'
     *
     * > intToMiniRoman(19)
     * ""xix""
     * > intToMiniRoman(152)
     * ""clii""
     * > intToMiniRoman(251)
     * ""ccli""
     * > intToMiniRoman(426)
     * ""cdxxvi""
     * > intToMiniRoman(500)
     * ""d""
     * > intToMiniRoman(1)
     * ""i""
     * > intToMiniRoman(4)
     * ""iv""
     * > intToMiniRoman(43)
     * ""xliii""
     * > intToMiniRoman(90)
     * ""xc""
     * > intToMiniRoman(94)
     * ""xciv""
     * > intToMiniRoman(532)
     * ""dxxxii""
     * > intToMiniRoman(900)
     * ""cm""
     * > intToMiniRoman(994)
     * ""cmxciv""
     * > intToMiniRoman(1000)
     * ""m""
     */
    public static String intToMiniRoman(int number) {
        String result = """";
        int[] values = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };
        String[] symbols = { ""m"", ""cm"", ""d"", ""cd"", ""c"", ""xc"", ""l"", ""xl"", ""x"", ""ix"", ""v"", ""iv"", ""i"" };
        for (int i = 0; i < values.length; i++) {
            while (number >= values[i]) {
                number -= values[i];
                result += symbols[i];
            }
        }
        return result;
    }
}
","// IntToMiniRomanTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IntToMiniRoman}.
* It contains ten unit test cases for the {@link IntToMiniRoman#intToMiniRoman(int)} method.
*/
class IntToMiniRomanTest {","// IntToMiniRomanTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IntToMiniRoman}.
* It contains ten unit test cases for the {@link IntToMiniRoman#intToMiniRoman(int)} method.
*/
class IntToMiniRomanTest {

	@Test
	void testIntToMiniRoman() {
		assertEquals(""xix"", IntToMiniRoman.intToMiniRoman(19));
		assertEquals(""clii"", IntToMiniRoman.intToMiniRoman(152));
		assertEquals(""ccli"", IntToMiniRoman.intToMiniRoman(251));
		assertEquals(""cdxxvi"", IntToMiniRoman.intToMiniRoman(426));
		assertEquals(""d"", IntToMiniRoman.intToMiniRoman(500));
		assertEquals(""i"", IntToMiniRoman.intToMiniRoman(1));
		assertEquals(""iv"", IntToMiniRoman.intToMiniRoman(4));
		assertEquals(""xliii"", IntToMiniRoman.intToMiniRoman(43));
		assertEquals(""xc"", IntToMiniRoman.intToMiniRoman(90));
		assertEquals(""xciv"", IntToMiniRoman.intToMiniRoman(94));
		assertEquals(""dxxxii"", IntToMiniRoman.intToMiniRoman(532));
		assertEquals(""cm"", IntToMiniRoman.intToMiniRoman(900));
		assertEquals(""cmxciv"", IntToMiniRoman.intToMiniRoman(994));
		assertEquals(""m"", IntToMiniRoman.intToMiniRoman(1000));
	}
}"
cmpl-6tUhtBtYfgiArC18X0qldW6GJvZTb,/HumanEvalJava/src/main/java/original/id_157.java,54.72170853614807,length,"// RightAngleTriangle.java
package original;

class RightAngleTriangle {

    /**
     * Given the lengths of the three sides of a triangle. Return True if the three
     * sides form a right-angled triangle, False otherwise.
     * A right-angled triangle is a triangle in which one angle is right angle or
     * 90 degree.
     * Example:
     * rightAngleTriangle(3, 4, 5) == True
     * rightAngleTriangle(1, 2, 3) == False
     *
     * > rightAngleTriangle(3, 4, 5)
     * true
     * > rightAngleTriangle(1, 2, 3)
     * false
     * > rightAngleTriangle(10, 6, 8)
     * true
     * > rightAngleTriangle(2, 2, 2)
     * false
     * > rightAngleTriangle(7, 24, 25)
     * true
     * > rightAngleTriangle(10, 5, 7)
     * false
     * > rightAngleTriangle(5, 12, 13)
     * true
     * > rightAngleTriangle(15, 8, 17)
     * true
     * > rightAngleTriangle(48, 55, 73)
     * true
     * > rightAngleTriangle(1, 1, 1)
     * false
     * > rightAngleTriangle(2, 2, 10)
     * false
     */
    public static Boolean rightAngleTriangle(int a, int b, int c) {
        if (a == b || b == c || a == c) {
            return false;
        }
        if (a > b && a > c) {
            return a * a == b * b + c * c;
        }
        if (b > a && b > c) {
            return b * b == a * a + c * c;
        }
        return c * c == a * a + b * b;
    }
}
","// RightAngleTriangleTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RightAngleTriangle}.
* It contains ten unit test cases for the {@link RightAngleTriangle#rightAngleTriangle(int, int, int)} method.
*/
class RightAngleTriangleTest {","// RightAngleTriangleTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RightAngleTriangle}.
* It contains ten unit test cases for the {@link RightAngleTriangle#rightAngleTriangle(int, int, int)} method.
*/
class RightAngleTriangleTest {

	@Test
	void testRightAngleTriangle() {
		assertTrue(RightAngleTriangle.rightAngleTriangle(3, 4, 5));
		assertFalse(RightAngleTriangle.rightAngleTriangle(1, 2, 3));
		assertTrue(RightAngleTriangle.rightAngleTriangle(10, 6, 8));
		assertFalse(RightAngleTriangle.rightAngleTriangle(2, 2, 2));
		assertTrue(RightAngleTriangle.rightAngleTriangle(7, 24, 25));
		assertFalse(RightAngleTriangle.rightAngleTriangle(10, 5, 7));
		assertTrue(RightAngleTriangle.rightAngleTriangle(5, 12, 13));
		assertTrue(RightAngleTriangle.rightAngleTriangle(15, 8, 17));
		assertTrue(RightAngleTriangle.rightAngleTriangle(48, 55, 73));
		assertFalse(RightAngleTriangle.rightAngleTriangle(1, 1, 1));
		assertFalse(RightAngleTriangle.rightAngleTriangle(2, 2, 10));
	}
}

// RightAngleTriangleTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RightAngleTriangle}.
* It contains ten unit test cases for the {@link RightAngleTriangle#rightAngleTriangle(int, int, int)} method.
*/
class RightAngleTriangleTest {
		
	@Test
	void testRightAngleTriangle() {
		assertTrue(RightAngleTriangle.rightAngleTriangle(3, 4, 5));
		assertFalse(RightAngleTriangle.rightAngleTriangle(1, 2, 3));
		assertTrue(RightAngleTriangle.rightAngleTriangle(10, 6, 8));
		assertFalse(RightAngleTriangle.rightAngleTriangle(2, 2, 2));
		assertTrue(RightAngleTriangle.rightAngleTriangle(7, 24, 25));
		assertFalse(RightAngleTriangle.rightAngleTriangle(10, 5, 7));
		assertTrue(RightAngleTriangle.rightAngleTriangle(5, 12, 13));
		assertTrue(RightAngleTriangle.rightAngleTriangle(15, 8, 17));
		assertTrue(RightAngleTriangle.rightAngleTriangle(48, 55, 73));
		assertFalse(RightAngleTriangle.rightAngleTriangle(1, 1, 1));
		assertFalse(RightAngleTriangle.rightAngleTriangle(2, 2, 10));
	}
}

// RightAngleTriangleTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RightAngleTriangle}.
* It contains ten unit test cases for the {@link RightAngleTriangle#rightAngleTriangle(int, int, int)} method.
*/
class RightAngleTriangleTest {
		
	@Test
	void testRightAngleTriangle() {
		assertTrue(RightAngleTriangle.rightAngleTriangle(3, 4, 5));
		assertFalse(RightAngleTriangle.rightAngleTriangle(1, 2, 3));
		assertTrue(RightAngleTriangle.rightAngleTriangle(10, 6, 8));
		assertFalse(RightAngleTriangle.rightAngleTriangle(2, 2, 2));
		assertTrue(RightAngleTriangle.rightAngleTriangle(7, 24, 25));
		assertFalse(RightAngleTriangle.rightAngleTriangle(10, 5, 7));
		assertTrue(RightAngleTriangle.rightAngleTriangle(5, 12, 13));
		assertTrue(RightAngleTriangle.rightAngleTriangle(15, 8, 17));
		assertTrue(RightAngleTriangle.rightAngleTriangle(48, 55, 73));
		assertFalse(RightAngleTriangle.rightAngleTriangle(1, 1, 1));
		assertFalse(RightAngleTriangle.rightAngleTriangle(2, 2, 10));
	}
}

// RightAngleTriangleTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RightAngleTriangle}.
* It contains ten unit test cases for the {@link RightAngleTriangle#rightAngleTriangle(int, int, int)} method.
*/
class RightAngleTriangleTest {
		
	@Test
	void testRightAngleTriangle() {
		assertTrue(RightAngleTriangle.rightAngleTriangle(3, 4, 5));
		assertFalse(RightAngleTriangle.rightAngleTriangle(1, 2, 3));
		assertTrue(RightAngleTriangle.rightAngleTriangle(10, 6, 8));
		assertFalse(RightAngleTriangle.rightAngleTriangle(2, 2, 2));
		assertTrue(RightAngleTriangle.rightAngleTriangle(7, 24, 25));
		assertFalse(RightAngleTriangle.rightAngleTriangle(10, 5, 7));
		assertTrue(RightAngleTriangle.rightAngleTriangle(5, 12, 13));
		assertTrue(RightAngleTriangle.rightAngleTriangle(15, 8, 17));
		assertTrue(RightAngleTriangle.rightAngleTriangle(48, 55, 73));
		assertFalse(RightAngleTriangle.rightAngleTriangle(1, 1, 1));
		assertFalse(RightAngleTriangle.rightAngleTriangle(2, 2, 10));
	}
}

// RightAngleTriangleTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RightAngleTriangle}.
* It contains ten unit test cases for the {@link RightAngleTriangle#rightAngleTriangle(int, int, int)} method.
*/
class RightAngleTriangleTest {
		
	@Test
	void testRightAngleTriangle() {
		assertTrue(RightAngleTriangle.rightAngleTriangle(3, 4, 5));
		assertFalse(RightAngleTriangle.rightAngleTriangle(1, 2, 3));
		assertTrue(RightAngleTriangle.rightAngleTriangle(10, 6, 8));
		assertFalse(RightAngleTriangle.rightAngleTriangle(2, 2, 2));
		assertTrue(RightAngleTriangle.rightAngleTriangle(7, 24, 25));
		assertFalse(RightAngleTriangle.rightAngleTriangle(10, 5, 7));
		assertTrue(RightAngleTriangle.rightAngleTriangle(5, 12, 13));
		assertTrue(RightAngleTriangle.rightAngleTriangle(15, 8, 17));
		assertTrue(RightAngleTriangle.rightAngleTriangle(48, 55, 73));
		assertFalse(RightAngleTriangle.rightAngleTriangle(1, 1, 1));
		assertFalse(RightAngleTriangle.rightAngleTriangle(2, 2, 10));
	}
}

// RightAngleTriangleTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RightAngleTriangle}.
* It contains ten unit test cases for the {@link RightAngleTriangle#rightAngleTriangle(int, int, int)} method.
*/
class RightAngleTriangleTest {
		
	@Test
	void testRightAngleTriangle() {
		assertTrue"
cmpl-6tUiwsNSDEr8u75bKZc7PyNryfNo5,/HumanEvalJava/src/main/java/original/id_158.java,73.44514346122742,length,"// FindMax.java
package original;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

class FindMax {

    /**
     * Write a function that accepts a list of strings.
     * The list contains different words. Return the word with maximum number
     * of unique characters. If multiple strings have maximum number of unique
     * characters, return the one which comes first in lexicographical order.
     *
     * findMax([""name"", ""of"", ""string""]) == ""string""
     * findMax([""name"", ""enam"", ""game""]) == ""enam""
     * findMax([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
     *
     * > findMax([""name"", ""of"", ""string""])
     * ""string""
     * > findMax([""name"", ""enam"", ""game""])
     * ""enam""
     * > findMax([""aaaaaaa"", ""bb"", ""cc""])
     * ""aaaaaaa""
     * > findMax([""abc"", ""cba""])
     * ""abc""
     * > findMax([""play"", ""this"", ""game"", ""of"", ""footbott""])
     * ""footbott""
     * > findMax([""we"", ""are"", ""gonna"", ""rock""])
     * ""gonna""
     * > findMax([""we"", ""are"", ""a"", ""mad"", ""nation""])
     * ""nation""
     * > findMax([""this"", ""is"", ""a"", ""prrk""])
     * ""this""
     * > findMax([""b""])
     * ""b""
     * > findMax([""play"", ""play"", ""play""])
     * ""play""
     */
    public static String findMax(List<String> words) {
        if (words == null || words.size() == 0) {
            return null;
        }
        String maxWord = words.get(0);
        int maxUnique = 0;
        for (String word : words) {
            Set<Character> seen = new HashSet<>();
            for (int i = 0; i < word.length(); i++) {
                seen.add(word.charAt(i));
            }
            if (seen.size() > maxUnique) {
                maxWord = word;
                maxUnique = seen.size();
            } else if (seen.size() == maxUnique && word.compareTo(maxWord) < 0) {
                maxWord = word;
            }
        }
        return maxWord;
    }
}
","// FindMaxTest.java
package original;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindMax}.
* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.
*/
class FindMaxTest {","// FindMaxTest.java
package original;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindMax}.
* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.
*/
class FindMaxTest {

	@Test
	void testFindMax() {
		assertEquals(""string"", FindMax.findMax(List.of(""name"", ""of"", ""string"")));
		assertEquals(""enam"", FindMax.findMax(List.of(""name"", ""enam"", ""game"")));
		assertEquals(""aaaaaaa"", FindMax.findMax(List.of(""aaaaaaa"", ""bb"", ""cc"")));
		assertEquals(""abc"", FindMax.findMax(List.of(""abc"", ""cba"")));
		assertEquals(""footbott"", FindMax.findMax(List.of(""play"", ""this"", ""game"", ""of"", ""footbott"")));
		assertEquals(""gonna"", FindMax.findMax(List.of(""we"", ""are"", ""gonna"", ""rock"")));
		assertEquals(""nation"", FindMax.findMax(List.of(""we"", ""are"", ""a"", ""mad"", ""nation"")));
		assertEquals(""this"", FindMax.findMax(List.of(""this"", ""is"", ""a"", ""prrk"")));
		assertEquals(""b"", FindMax.findMax(List.of(""b"")));
		assertEquals(""play"", FindMax.findMax(List.of(""play"", ""play"", ""play"")));
	}
}

// FindMaxTest.java
package original;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindMax}.
* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.
*/
class FindMaxTest {
		
	@Test
	void testFindMax() {
		assertEquals(""string"", FindMax.findMax(List.of(""name"", ""of"", ""string"")));
		assertEquals(""enam"", FindMax.findMax(List.of(""name"", ""enam"", ""game"")));
		assertEquals(""aaaaaaa"", FindMax.findMax(List.of(""aaaaaaa"", ""bb"", ""cc"")));
		assertEquals(""abc"", FindMax.findMax(List.of(""abc"", ""cba"")));
		assertEquals(""footbott"", FindMax.findMax(List.of(""play"", ""this"", ""game"", ""of"", ""footbott"")));
		assertEquals(""gonna"", FindMax.findMax(List.of(""we"", ""are"", ""gonna"", ""rock"")));
		assertEquals(""nation"", FindMax.findMax(List.of(""we"", ""are"", ""a"", ""mad"", ""nation"")));
		assertEquals(""this"", FindMax.findMax(List.of(""this"", ""is"", ""a"", ""prrk"")));
		assertEquals(""b"", FindMax.findMax(List.of(""b"")));
		assertEquals(""play"", FindMax.findMax(List.of(""play"", ""play"", ""play"")));
	}
}

// FindMaxTest.java
package original;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindMax}.
* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.
*/
class FindMaxTest {
		
	@Test
	void testFindMax() {
		assertEquals(""string"", FindMax.findMax(List.of(""name"", ""of"", ""string"")));
		assertEquals(""enam"", FindMax.findMax(List.of(""name"", ""enam"", ""game"")));
		assertEquals(""aaaaaaa"", FindMax.findMax(List.of(""aaaaaaa"", ""bb"", ""cc"")));
		assertEquals(""abc"", FindMax.findMax(List.of(""abc"", ""cba"")));
		assertEquals(""footbott"", FindMax.findMax(List.of(""play"", ""this"", ""game"", ""of"", ""footbott"")));
		assertEquals(""gonna"", FindMax.findMax(List.of(""we"", ""are"", ""gonna"", ""rock"")));
		assertEquals(""nation"", FindMax.findMax(List.of(""we"", ""are"", ""a"", ""mad"", ""nation"")));
		assertEquals(""this"", FindMax.findMax(List.of(""this"", ""is"", ""a"", ""prrk"")));
		assertEquals(""b"", FindMax.findMax(List.of(""b"")));
		assertEquals(""play"", FindMax.findMax(List.of(""play"", ""play"", ""play"")));
	}
}

// FindMaxTest.java
package original;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindMax}.
* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.
*/
class FindMaxTest {
		
	@Test
	void testFindMax() {
		assertEquals(""string"", FindMax.findMax(List.of(""name"", ""of"", ""string"")));
		assertEquals(""enam"", FindMax.findMax(List.of(""name"", ""enam"", ""game"")));
		assertEquals(""aaaaaaa"", FindMax.findMax(List.of(""aaaaaaa"", ""bb"", ""cc"")));
		assertEquals(""abc"", FindMax.findMax(List.of(""abc"", ""cba"")));
		assertEquals(""footbott"", FindMax.findMax(List.of(""play"", ""this"", ""game"", ""of"", ""footbott"")));
		assertEquals(""gonna"", FindMax.findMax(List.of(""we"", ""are"", ""gonna"", ""rock"")));
		assertEquals(""nation"", FindMax.findMax(List.of(""we"", ""are"", ""a"", ""mad"", ""nation"")));
		assertEquals(""this"", FindMax.findMax(List.of(""this"", ""is"", ""a"", ""prrk"")));
		assertEquals(""b"", FindMax.findMax(List.of(""b"")));
		assertEquals(""play"", FindMax.findMax(List.of(""play"", ""play"", ""play"")));
	}
}

// FindMaxTest.java
package original;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindMax}.
* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.
*/
class FindMaxTest {
		
	@Test
	void testFindMax() {
		assertEquals(""string"", FindMax.findMax(List.of(""name"", ""of"", ""string"")));
		assertEquals(""enam"", FindMax.findMax(List.of(""name"", ""enam"", ""game"")));
		assertEquals(""aaaaaaa"", FindMax.findMax(List.of(""aaaaaaa"", ""bb"", ""cc"")));
		assertEquals(""abc"", FindMax.findMax(List.of(""abc"", ""cba"")));
		assertEquals(""footbott"", FindMax.findMax(List.of(""play"", ""this"", ""game"", ""of"", ""footbott"")));
		assertEquals(""gonna"", FindMax.findMax(List.of(""we"", ""are"", ""gonna"", ""rock"")));
		assertEquals(""nation"", FindMax.findMax(List.of(""we"", ""are"", ""a"", ""mad"", ""nation"")));
		assertEquals(""this"", FindMax.findMax(List.of(""this"", ""is"", ""a"", ""prrk"
cmpl-6tUk8lagi46ApbXLDQL6AWaeVhZnB,/HumanEvalJava/src/main/java/original/id_159.java,66.34943532943726,length,"// Eat.java
package original;

import java.util.Arrays;
import java.util.List;

class Eat {

    /**
     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,
     * but now you need to eat more carrots to complete the day's meals.
     * you should return an array of [ total number of eaten carrots after your meals,
     * the number of carrots left after your meals ]
     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
     *
     * Example:
     * * eat(5, 6, 10) -> [11, 4]
     * * eat(4, 8, 9) -> [12, 1]
     * * eat(1, 10, 10) -> [11, 0]
     * * eat(2, 11, 5) -> [7, 0]
     *
     * Variables:
     *
     * @number : integer
     * the number of carrots that you have eaten.
     * @need : integer
     * the number of carrots that you need to eat.
     * @remaining : integer
     * the number of remaining carrots that exist in stock
     *
     * Constrain:
     * * 0 <= number <= 1000
     * * 0 <= need <= 1000
     * * 0 <= remaining <= 1000
     *
     * Have fun :)
     *
     * > eat(5, 6, 10)
     * [11, 4]
     * > eat(4, 8, 9)
     * [12, 1]
     * > eat(1, 10, 10)
     * [11, 0]
     * > eat(2, 11, 5)
     * [7, 0]
     * > eat(4, 5, 7)
     * [9, 2]
     * > eat(4, 5, 1)
     * [5, 0]
     */
    public static List<Integer> eat(int number, int need, int remaining) {
        if (need <= remaining) {
            return Arrays.asList(number + need, remaining - need);
        } else {
            return Arrays.asList(number + remaining, 0);
        }
    }
}
","// EatTest.java
package original;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Eat}.
* It contains ten unit test cases for the {@link Eat#eat(int, int, int)} method.
*/
class EatTest {","// EatTest.java
package original;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Eat}.
* It contains ten unit test cases for the {@link Eat#eat(int, int, int)} method.
*/
class EatTest {

	@Test
	void test1() {
		List<Integer> expected = Arrays.asList(11, 4);
		List<Integer> actual = Eat.eat(5, 6, 10);
		assertEquals(expected, actual);
	}
	
	@Test
	void test2() {
		List<Integer> expected = Arrays.asList(12, 1);
		List<Integer> actual = Eat.eat(4, 8, 9);
		assertEquals(expected, actual);
	}
	
	@Test
	void test3() {
		List<Integer> expected = Arrays.asList(11, 0);
		List<Integer> actual = Eat.eat(1, 10, 10);
		assertEquals(expected, actual);
	}
	
	@Test
	void test4() {
		List<Integer> expected = Arrays.asList(7, 0);
		List<Integer> actual = Eat.eat(2, 11, 5);
		assertEquals(expected, actual);
	}
	
	@Test
	void test5() {
		List<Integer> expected = Arrays.asList(9, 2);
		List<Integer> actual = Eat.eat(4, 5, 7);
		assertEquals(expected, actual);
	}
	
	@Test
	void test6() {
		List<Integer> expected = Arrays.asList(5, 0);
		List<Integer> actual = Eat.eat(4, 5, 1);
		assertEquals(expected, actual);
	}
	
	@Test
	void test7() {
		List<Integer> expected = Arrays.asList(0, 0);
		List<Integer> actual = Eat.eat(0, 0, 0);
		assertEquals(expected, actual);
	}
	
	@Test
	void test8() {
		List<Integer> expected = Arrays.asList(1000, 0);
		List<Integer> actual = Eat.eat(0, 1000, 1000);
		assertEquals(expected, actual);
	}
	
	@Test
	void test9() {
		List<Integer> expected = Arrays.asList(1000, 0);
		List<Integer> actual = Eat.eat(1000, 0, 1000);
		assertEquals(expected, actual);
	}
	
	@Test
	void test10() {
		List<Integer> expected = Arrays.asList(1000, 0);
		List<Integer> actual = Eat.eat(1000, 1000, 0);
		assertEquals(expected, actual);
	}
}

// EatTest.java
package original;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Eat}.
* It contains ten unit test cases for the {@link Eat#eat(int, int, int)} method.
*/
class EatTest {
		
	@Test
	void test1() {
		List<Integer> expected = Arrays.asList(11, 4);
		List<Integer> actual = Eat.eat(5, 6, 10);
		assertEquals(expected, actual);
	}
	
	@Test
	void test2() {
		List<Integer> expected = Arrays.asList(12, 1);
		List<Integer> actual = Eat.eat(4, 8, 9);
		assertEquals(expected, actual);
	}
	
	@Test
	void test3() {
		List<Integer> expected = Arrays.asList(11, 0);
		List<Integer> actual = Eat.eat(1, 10, 10);
		assertEquals(expected, actual);
	}
	
	@Test
	void test4() {
		List<Integer> expected = Arrays.asList(7, 0);
		List<Integer> actual = Eat.eat(2, 11, 5);
		assertEquals(expected, actual);
	}
	
	@Test
	void test5() {
		List<Integer> expected = Arrays.asList(9, 2);
		List<Integer> actual = Eat.eat(4, 5, 7);
		assertEquals(expected, actual);
	}
	
	@Test
	void test6() {
		List<Integer> expected = Arrays.asList(5, 0);
		List<Integer> actual = Eat.eat(4, 5, 1);
		assertEquals(expected, actual);
	}
	
	@Test
	void test7() {
		List<Integer> expected = Arrays.asList(0, 0);
		List<Integer> actual = Eat.eat(0, 0, 0);
		assertEquals(expected, actual);
	}
	
	@Test
	void test8() {
		List<Integer> expected = Arrays.asList(1000, 0);
		List<Integer> actual = Eat.eat(0, 1000, 1000);
		assertEquals(expected, actual);
	}
	
	@Test
	void test9() {
		List<Integer> expected = Arrays.asList(1000, 0);
		List<Integer> actual = Eat.eat(1000, 0, 1000);
		assertEquals(expected, actual);
	}
	
	@Test
	void test10() {
		List<Integer> expected = Arrays.asList(1000, 0);
		List<Integer> actual = Eat.eat(1000, 1000, 0);
		assertEquals(expected, actual);
	}
}

// EatTest.java
package original;

import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Eat}.
* It contains ten unit test cases for the {@link Eat#eat(int, int, int)} method.
*/
class EatTest {
		
	@Test
	void test1() {
		List<Integer> expected = Arrays.asList(11, 4);
		List<Integer> actual = Eat.eat(5, 6, 10);
		assertEquals(expected, actual);
	}
	
	@Test
	void test2() {
		List<Integer> expected = Arrays.asList(12, 1);
		List<Integer> actual = Eat.eat(4, 8, 9);
		assertEquals(expected, actual);
	}
	
	@Test
	void test3() {
		List<Integer> expected = Arrays.asList(11, 0);
		List<Integer> actual = Eat.eat(1, 10, 10);
		assertEquals(expected, actual);
	}
	
	@Test
	void test4() {
		List<Integer> expected = Arrays.asList(7, 0);
		List<Integer> actual = Eat.eat(2, 11, 5);
		assertEquals(expected, actual);
	}
	
	@Test
	void test5() {
		List<Integer> expected = Arrays.asList(9, 2);
		List<Integer> actual = Eat.eat(4, 5, 7);
		assertEquals(expected, actual);
	}
	
	@Test
	void test6() {
		List<Integer> expected = Arrays.asList(5, 0);
		List<Integer> actual = Eat.eat(4, 5, 1);
		assertEquals(expected, actual);
	}
	
	@Test
	void test7() {
		List<Integer> expected = Arrays.asList(0, 0);
		List<Integer> actual = Eat.eat(0, 0, 0);
		assertEquals(expected, actual);
	}
	
	@Test
	void test8() {
		List<Integer> expected = Arrays.asList(1000"
cmpl-6tUlCmlKWTYOS40hvdhm0piLizLaq,/HumanEvalJava/src/main/java/original/id_16.java,62.08506679534912,length,"// CountDistinctCharacters.java
package original;

import java.util.HashSet;
import java.util.Set;

class CountDistinctCharacters {

    /**
     * Given a string, find out how many distinct characters (regardless of case)  it consists  of.
     *
     * > countDistinctCharacters(""xyzXYZ"")
     * 3
     * > countDistinctCharacters(""Jerry"")
     * 4
     * > countDistinctCharacters("""")
     * 0
     * > countDistinctCharacters(""abcde"")
     * 5
     * > countDistinctCharacters(""abcdecadeCADE"")
     * 5
     * > countDistinctCharacters(""aaaaAAAAaaaa"")
     * 1
     * > countDistinctCharacters(""Jerry jERRY JeRRRY"")
     * 5
     */
    public static int countDistinctCharacters(String string) {
        Set<Character> distinctCharacters = new HashSet<Character>();
        for (int i = 0; i < string.length(); i++) {
            distinctCharacters.add(Character.toLowerCase(string.charAt(i)));
        }
        return distinctCharacters.size();
    }
}
","// CountDistinctCharactersTest.java
package original;

import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountDistinctCharacters}.
* It contains ten unit test cases for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.
*/
class CountDistinctCharactersTest {","// CountDistinctCharactersTest.java
package original;

import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountDistinctCharacters}.
* It contains ten unit test cases for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.
*/
class CountDistinctCharactersTest {

	@Test
	void testCountDistinctCharacters() {
		assertEquals(3, CountDistinctCharacters.countDistinctCharacters(""xyzXYZ""));
		assertEquals(4, CountDistinctCharacters.countDistinctCharacters(""Jerry""));
		assertEquals(0, CountDistinctCharacters.countDistinctCharacters(""""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcde""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcdecadeCADE""));
		assertEquals(1, CountDistinctCharacters.countDistinctCharacters(""aaaaAAAAaaaa""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""Jerry jERRY JeRRRY""));
	}
}

// CountDistinctCharactersTest.java
package original;

import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountDistinctCharacters}.
* It contains ten unit test cases for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.
*/
class CountDistinctCharactersTest {
		
	@Test
	void testCountDistinctCharacters() {
		assertEquals(3, CountDistinctCharacters.countDistinctCharacters(""xyzXYZ""));
		assertEquals(4, CountDistinctCharacters.countDistinctCharacters(""Jerry""));
		assertEquals(0, CountDistinctCharacters.countDistinctCharacters(""""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcde""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcdecadeCADE""));
		assertEquals(1, CountDistinctCharacters.countDistinctCharacters(""aaaaAAAAaaaa""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""Jerry jERRY JeRRRY""));
	}
}

// CountDistinctCharactersTest.java
package original;

import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountDistinctCharacters}.
* It contains ten unit test cases for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.
*/
class CountDistinctCharactersTest {
		
	@Test
	void testCountDistinctCharacters() {
		assertEquals(3, CountDistinctCharacters.countDistinctCharacters(""xyzXYZ""));
		assertEquals(4, CountDistinctCharacters.countDistinctCharacters(""Jerry""));
		assertEquals(0, CountDistinctCharacters.countDistinctCharacters(""""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcde""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcdecadeCADE""));
		assertEquals(1, CountDistinctCharacters.countDistinctCharacters(""aaaaAAAAaaaa""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""Jerry jERRY JeRRRY""));
	}
}

// CountDistinctCharactersTest.java
package original;

import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountDistinctCharacters}.
* It contains ten unit test cases for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.
*/
class CountDistinctCharactersTest {
		
	@Test
	void testCountDistinctCharacters() {
		assertEquals(3, CountDistinctCharacters.countDistinctCharacters(""xyzXYZ""));
		assertEquals(4, CountDistinctCharacters.countDistinctCharacters(""Jerry""));
		assertEquals(0, CountDistinctCharacters.countDistinctCharacters(""""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcde""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcdecadeCADE""));
		assertEquals(1, CountDistinctCharacters.countDistinctCharacters(""aaaaAAAAaaaa""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""Jerry jERRY JeRRRY""));
	}
}

// CountDistinctCharactersTest.java
package original;

import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountDistinctCharacters}.
* It contains ten unit test cases for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.
*/
class CountDistinctCharactersTest {
		
	@Test
	void testCountDistinctCharacters() {
		assertEquals(3, CountDistinctCharacters.countDistinctCharacters(""xyzXYZ""));
		assertEquals(4, CountDistinctCharacters.countDistinctCharacters(""Jerry""));
		assertEquals(0, CountDistinctCharacters.countDistinctCharacters(""""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcde""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcdecadeCADE""));
		assertEquals(1, CountDistinctCharacters.countDistinctCharacters(""aaaaAAAAaaaa""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""Jerry jERRY JeRRRY""));
	}
}

// CountDistinctCharactersTest.java
package original;

import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountDistinctCharacters}.
* It contains ten unit test cases for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.
*/
class CountDistinctCharactersTest {
		
	@Test
	void testCountDistinctCharacters() {
		assertEquals(3, CountDistinctCharacters.countDistinctCharacters(""xyzXYZ""));
		assertEquals(4, CountDistinctCharacters.countDistinctCharacters(""Jerry""));
		assertEquals(0, CountDistinctCharacters.countDistinctCharacters(""""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcde""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcdecadeCADE""));
		assertEquals(1, CountDistinctCharacters.countDistinctCharacters(""aaaaAAAAaaaa""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""Jerry jERRY JeRRRY""));
	}
}

// CountDistinctCharactersTest.java
package original;

import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountDistinctCharacters}.
* It contains ten unit test cases for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.
*/
class CountDistinctCharactersTest {
		
	@Test
	void testCountDistinctCharacters() {
		assertEquals(3, CountDistinctCharacters.countDistinctCharacters(""xyzXYZ""));
		assertEquals(4, CountDistinctCharacters.countDistinctCharacters(""Jerry""));
		assertEquals(0, CountDistinctCharacters.countDistinctCharacters(""""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcde""));
		assertEquals(5, CountDistinctCharacters.countDistinctCharacters(""abcdecadeCADE""));
		assertEquals(1, CountDistinctCharacters."
cmpl-6tUmCYjdiZGLoR3tlki1ULRqrVchW,/HumanEvalJava/src/main/java/original/id_161.java,11.922942876815796,,"// Solve.java
package original;

class Solve {

    /**
     * You are given a string s.
     * if s[i] is a letter, reverse its case from lower to upper or vise versa,
     * otherwise keep it as it is.
     * If the string contains no letters, reverse the string.
     * The function should return the resulted string.
     * Examples
     * solve(""1234"") = ""4321""
     * solve(""ab"") = ""AB""
     * solve(""#a@C"") = ""#A@c""
     *
     * > solve(""AsDf"")
     * ""aSdF""
     * > solve(""1234"")
     * ""4321""
     * > solve(""ab"")
     * ""AB""
     * > solve(""#a@C"")
     * ""#A@c""
     * > solve(""#AsdfW^45"")
     * ""#aSDFw^45""
     * > solve(""#6@2"")
     * ""2@6#""
     * > solve(""#$a^D"")
     * ""#$A^d""
     * > solve(""#ccc"")
     * ""#CCC""
     */
    public static String solve(String s) {
        String result = """";
        boolean hasLetters = false;
        for (int i = 0; i < s.length(); i++) {
            if (Character.isLetter(s.charAt(i))) {
                hasLetters = true;
                if (Character.isUpperCase(s.charAt(i))) {
                    result += Character.toLowerCase(s.charAt(i));
                } else {
                    result += Character.toUpperCase(s.charAt(i));
                }
            } else {
                result += s.charAt(i);
            }
        }
        if (!hasLetters) {
            result = new StringBuilder(result).reverse().toString();
        }
        return result;
    }
}
","// SolveTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solve}.
* It contains ten unit test cases for the {@link Solve#solve(String)} method.
*/
class SolveTest {","// SolveTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solve}.
* It contains ten unit test cases for the {@link Solve#solve(String)} method.
*/
class SolveTest {

	@Test
	void testSolve() {
		assertEquals(""aSdF"", Solve.solve(""AsDf""));
		assertEquals(""4321"", Solve.solve(""1234""));
		assertEquals(""AB"", Solve.solve(""ab""));
		assertEquals(""#A@c"", Solve.solve(""#a@C""));
		assertEquals(""#aSDFw^45"", Solve.solve(""#AsdfW^45""));
		assertEquals(""2@6#"", Solve.solve(""#6@2""));
		assertEquals(""#$A^d"", Solve.solve(""#$a^D""));
		assertEquals(""#CCC"", Solve.solve(""#ccc""));
		assertEquals(""#aSDFw^45"", Solve.solve(""#AsdfW^45""));
		assertEquals(""2@6#"", Solve.solve(""#6@2""));
	}
}"
cmpl-6tUnFSTk4MFfMVro9qhQFymx3CFyY,/HumanEvalJava/src/main/java/original/id_162.java,74.11082243919373,length,"// StringToMd5.java
package original;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

class StringToMd5 {

    /**
     * Given a string 'text', return its md5 hash equivalent string.
     * If 'text' is an empty string, return null.
     *
     * >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
     *
     * > stringToMd5(""Hello world"")
     * ""3e25960a79dbc69b674cd4ec67a72c62""
     * > stringToMd5("""")
     * null
     * > stringToMd5(""A B C"")
     * ""0ef78513b0cb8cef12743f5aeb35f888""
     * > stringToMd5(""password"")
     * ""5f4dcc3b5aa765d61d8327deb882cf99""
     */
    public static String stringToMd5(String text) {
        if (text.equals("""")) {
            return null;
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            byte[] messageDigest = md.digest(text.getBytes());
            BigInteger number = new BigInteger(1, messageDigest);
            String hashText = number.toString(16);
            while (hashText.length() < 32) {
                hashText = ""0"" + hashText;
            }
            return hashText;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
}
","// StringToMd5Test.java
package original;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringToMd5}.
* It contains ten unit test cases for the {@link StringToMd5#stringToMd5(String)} method.
*/
class StringToMd5Test {","// StringToMd5Test.java
package original;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringToMd5}.
* It contains ten unit test cases for the {@link StringToMd5#stringToMd5(String)} method.
*/
class StringToMd5Test {

	/**
	* Test case for {@link StringToMd5#stringToMd5(String)} method.
	* It checks if the method returns the correct md5 hash of the given string.
	*/
	@Test
	void testStringToMd5() {
		assertEquals(""3e25960a79dbc69b674cd4ec67a72c62"", StringToMd5.stringToMd5(""Hello world""));
		assertEquals(""0ef78513b0cb8cef12743f5aeb35f888"", StringToMd5.stringToMd5(""A B C""));
		assertEquals(""5f4dcc3b5aa765d61d8327deb882cf99"", StringToMd5.stringToMd5(""password""));
	}
	
	/**
	* Test case for {@link StringToMd5#stringToMd5(String)} method.
	* It checks if the method returns null when the given string is empty.
	*/
	@Test
	void testStringToMd5EmptyString() {
		assertNull(StringToMd5.stringToMd5(""""));
	}
	
	/**
	* Test case for {@link StringToMd5#stringToMd5(String)} method.
	* It checks if the method returns the correct md5 hash of the given string.
	*/
	@Test
	void testStringToMd5WithSpecialCharacters() {
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""!@#$%^&*()_+""));
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""!@#$%^&*()_+""));
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""!@#$%^&*()_+""));
	}
	
	/**
	* Test case for {@link StringToMd5#stringToMd5(String)} method.
	* It checks if the method returns the correct md5 hash of the given string.
	*/
	@Test
	void testStringToMd5WithNumbers() {
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""1234567890""));
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""1234567890""));
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""1234567890""));
	}
	
	/**
	* Test case for {@link StringToMd5#stringToMd5(String)} method.
	* It checks if the method returns the correct md5 hash of the given string.
	*/
	@Test
	void testStringToMd5WithUpperCase() {
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
	}
	
	/**
	* Test case for {@link StringToMd5#stringToMd5(String)} method.
	* It checks if the method returns the correct md5 hash of the given string.
	*/
	@Test
	void testStringToMd5WithLowerCase() {
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""abcdefghijklmnopqrstuvwxyz""));
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""abcdefghijklmnopqrstuvwxyz""));
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""abcdefghijklmnopqrstuvwxyz""));
	}
	
	/**
	* Test case for {@link StringToMd5#stringToMd5(String)} method.
	* It checks if the method returns the correct md5 hash of the given string.
	*/
	@Test
	void testStringToMd5WithMixedCase() {
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""AbCdEfGhIjKlMnOpQrStUvWxYz""));
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""AbCdEfGhIjKlMnOpQrStUvWxYz""));
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""AbCdEfGhIjKlMnOpQrStUvWxYz""));
	}
	
	/**
	* Test case for {@link StringToMd5#stringToMd5(String)} method.
	* It checks if the method returns the correct md5 hash of the given string.
	*/
	@Test
	void testStringToMd5WithMixedCharacters() {
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz""));
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz""));
		assertEquals(""f8d8f9b8e8c9a2fa2a9c8f9b8e8c9a2f"", StringToMd5.stringToMd5(""!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
cmpl-6tUoRgvr4nxE5DdLEP1UMTXB89DJn,/HumanEvalJava/src/main/java/original/id_163.java,37.23169231414795,,"// GenerateIntegers.java
package original;

import java.util.ArrayList;
import java.util.List;

class GenerateIntegers {

    /**
     * Given two positive integers a and b, return the even digits between a
     * and b, in ascending order.
     *
     * For example:
     * generateIntegers(2, 8) => [2, 4, 6, 8]
     * generateIntegers(8, 2) => [2, 4, 6, 8]
     * generateIntegers(10, 14) => []
     *
     * > generateIntegers(2, 10)
     * [2, 4, 6, 8]
     * > generateIntegers(10, 2)
     * [2, 4, 6, 8]
     * > generateIntegers(132, 2)
     * [2, 4, 6, 8]
     * > generateIntegers(17, 89)
     * []
     */
    public static List<Object> generateIntegers(int a, int b) {
        int lower = Math.max(2, Math.min(a, b));
        int upper = Math.min(8, Math.max(a, b));
        List<Object> result = new ArrayList<>();
        for (int i = lower; i <= upper; i++) {
            if (i % 2 == 0) {
                result.add(i);
            }
        }
        return result;
    }
}
","// GenerateIntegersTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GenerateIntegers}.
* It contains ten unit test cases for the {@link GenerateIntegers#generateIntegers(int, int)} method.
*/
class GenerateIntegersTest {","// GenerateIntegersTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GenerateIntegers}.
* It contains ten unit test cases for the {@link GenerateIntegers#generateIntegers(int, int)} method.
*/
class GenerateIntegersTest {

	@Test
	void testGenerateIntegers() {
		List<Object> expected = new ArrayList<>();
		expected.add(2);
		expected.add(4);
		expected.add(6);
		expected.add(8);
		assertEquals(expected, GenerateIntegers.generateIntegers(2, 10));
		assertEquals(expected, GenerateIntegers.generateIntegers(10, 2));
		assertEquals(expected, GenerateIntegers.generateIntegers(132, 2));
		assertEquals(new ArrayList<>(), GenerateIntegers.generateIntegers(17, 89));
	}
}

// GenerateIntegers.java
package refactored;

import java.util.ArrayList;
import java.util.List;

class GenerateIntegers {

    /**
     * Given two positive integers a and b, return the even digits between a
     * and b, in ascending order.
     *
     * For example:
     * generateIntegers(2, 8) => [2, 4, 6, 8]
     * generateIntegers(8, 2) => [2, 4, 6, 8]
     * generateIntegers(10, 14) => []
     *
     * > generateIntegers(2, 10)
     * [2, 4, 6, 8]
     * > generateIntegers(10, 2)
     * [2, 4, 6, 8]
     * > generateIntegers(132, 2)
     * [2, 4, 6, 8]
     * > generateIntegers(17, 89)
     * []
     */
    public static List<Object> generateIntegers(int a, int b) {
        int lower = Math.max(2, Math.min(a, b));
        int upper = Math.min(8, Math.max(a, b));
        List<Object> result = new ArrayList<>();
        for (int i = lower; i <= upper; i++) {
            if (i % 2 == 0) {
                result.add(i);
            }
        }
        return result;
    }
}

// GenerateIntegersTest.java
package refactored;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GenerateIntegers}.
* It contains ten unit test cases for the {@link GenerateIntegers#generateIntegers(int, int)} method.
*/
class GenerateIntegersTest {
		
	@Test
	void testGenerateIntegers() {
		List<Object> expected = new ArrayList<>();
		expected.add(2);
		expected.add(4);
		expected.add(6);
		expected.add(8);
		assertEquals(expected, GenerateIntegers.generateIntegers(2, 10));
		assertEquals(expected, GenerateIntegers.generateIntegers(10, 2));
		assertEquals(expected, GenerateIntegers.generateIntegers(132, 2));
		assertEquals(new ArrayList<>(), GenerateIntegers.generateIntegers(17, 89));
	}
}"
cmpl-6tUpUZALzl4TnmVNotRd7OQ54Umof,/HumanEvalJava/src/main/java/original/id_17.java,17.08540153503418,,"// ParseMusic.java
package original;

import java.util.ArrayList;
import java.util.List;

class ParseMusic {

    /**
     * Input to this function is a string representing musical notes in a special ASCII format.
     * Your task is to parse this string and return list of integers corresponding to how many beats  each does not last.
     * Here is a legend:
     * 'o' - whole note, lasts four beats
     * 'o|' - half note, lasts two beats
     * '.|' - quarter note, lasts one beat
     *
     * > parseMusic(""o o| .| o| o| .| .| .| .| o o"")
     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
     * > parseMusic("""")
     * []
     * > parseMusic(""o o o o"")
     * [4, 4, 4, 4]
     * > parseMusic("".| .| .| .|"")
     * [1, 1, 1, 1]
     * > parseMusic(""o| o| .| .| o o o o"")
     * [2, 2, 1, 1, 4, 4, 4, 4]
     * > parseMusic(""o| .| o| .| o o| o o|"")
     * [2, 1, 2, 1, 4, 2, 4, 2]
     */
    public static List<Object> parseMusic(String musicString) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 0; i < musicString.length(); i++) {
            if (musicString.charAt(i) == 'o') {
                if (i < musicString.length() - 1 && musicString.charAt(i + 1) == '|') {
                    result.add(2);
                    i++;
                } else {
                    result.add(4);
                }
            } else if (musicString.charAt(i) == '.') {
                result.add(1);
                i++;
            }
        }
        return result;
    }
}
","// ParseMusicTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParseMusic}.
* It contains ten unit test cases for the {@link ParseMusic#parseMusic(String)} method.
*/
class ParseMusicTest {","// ParseMusicTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParseMusic}.
* It contains ten unit test cases for the {@link ParseMusic#parseMusic(String)} method.
*/
class ParseMusicTest {

	@Test
	void testParseMusic() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(4);
		expected.add(2);
		expected.add(1);
		expected.add(2);
		expected.add(2);
		expected.add(1);
		expected.add(1);
		expected.add(1);
		expected.add(1);
		expected.add(4);
		expected.add(4);
		assertEquals(expected, ParseMusic.parseMusic(""o o| .| o| o| .| .| .| .| o o""));
		
		expected = new ArrayList<Object>();
		assertEquals(expected, ParseMusic.parseMusic(""""));
		
		expected = new ArrayList<Object>();
		expected.add(4);
		expected.add(4);
		expected.add(4);
		expected.add(4);
		assertEquals(expected, ParseMusic.parseMusic(""o o o o""));
		
		expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(1);
		expected.add(1);
		expected.add(1);
		assertEquals(expected, ParseMusic.parseMusic("".| .| .| .|""));
		
		expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(2);
		expected.add(1);
		expected.add(1);
		expected.add(4);
		expected.add(4);
		expected.add(4);
		expected.add(4);
		assertEquals(expected, ParseMusic.parseMusic(""o| o| .| .| o o o o""));
		
		expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(1);
		expected.add(2);
		expected.add(1);
		expected.add(4);
		expected.add(2);
		expected.add(4);
		expected.add(2);
		assertEquals(expected, ParseMusic.parseMusic(""o| .| o| .| o o| o o|""));
	}
}"
cmpl-6tUqXwRBTombowHSPo2aVG75vAb5B,/HumanEvalJava/src/main/java/original/id_18.java,51.248504400253296,length,"// HowManyTimes.java
package original;

class HowManyTimes {

    /**
     * Find how many times a given substring can be found in the original string. Count overlapping cases.
     *
     * > howManyTimes("""", ""a"")
     * 0
     * > howManyTimes(""aaa"", ""a"")
     * 3
     * > howManyTimes(""aaaa"", ""aa"")
     * 3
     * > howManyTimes("""", ""x"")
     * 0
     * > howManyTimes(""xyxyxyx"", ""x"")
     * 4
     * > howManyTimes(""cacacacac"", ""cac"")
     * 4
     * > howManyTimes(""john doe"", ""john"")
     * 1
     */
    public static int howManyTimes(String string, String substring) {
        int count = 0;
        int index = 0;
        while (index < string.length()) {
            index = string.indexOf(substring, index);
            if (index == -1) {
                break;
            }
            count++;
            index++;
        }
        return count;
    }
}
","// HowManyTimesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HowManyTimes}.
* It contains ten unit test cases for the {@link HowManyTimes#howManyTimes(String, String)} method.
*/
class HowManyTimesTest {","// HowManyTimesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HowManyTimes}.
* It contains ten unit test cases for the {@link HowManyTimes#howManyTimes(String, String)} method.
*/
class HowManyTimesTest {

	@Test
	void testEmptyString() {
		assertEquals(0, HowManyTimes.howManyTimes("""", ""a""));
	}
	
	@Test
	void testSingleChar() {
		assertEquals(3, HowManyTimes.howManyTimes(""aaa"", ""a""));
	}
	
	@Test
	void testDoubleChar() {
		assertEquals(3, HowManyTimes.howManyTimes(""aaaa"", ""aa""));
	}
	
	@Test
	void testEmptySubstring() {
		assertEquals(0, HowManyTimes.howManyTimes("""", ""x""));
	}
	
	@Test
	void testSingleCharSubstring() {
		assertEquals(4, HowManyTimes.howManyTimes(""xyxyxyx"", ""x""));
	}
	
	@Test
	void testDoubleCharSubstring() {
		assertEquals(4, HowManyTimes.howManyTimes(""cacacacac"", ""cac""));
	}
	
	@Test
	void testSingleOccurrence() {
		assertEquals(1, HowManyTimes.howManyTimes(""john doe"", ""john""));
	}
	
	@Test
	void testNoOccurrence() {
		assertEquals(0, HowManyTimes.howManyTimes(""john doe"", ""jane""));
	}
	
	@Test
	void testSingleCharOccurrence() {
		assertEquals(1, HowManyTimes.howManyTimes(""john doe"", ""j""));
	}
	
	@Test
	void testSingleCharNoOccurrence() {
		assertEquals(0, HowManyTimes.howManyTimes(""john doe"", ""x""));
	}
}

// HowManyTimesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HowManyTimes}.
* It contains ten unit test cases for the {@link HowManyTimes#howManyTimes(String, String)} method.
*/
class HowManyTimesTest {
		
	@Test
	void testEmptyString() {
		assertEquals(0, HowManyTimes.howManyTimes("""", ""a""));
	}
	
	@Test
	void testSingleChar() {
		assertEquals(3, HowManyTimes.howManyTimes(""aaa"", ""a""));
	}
	
	@Test
	void testDoubleChar() {
		assertEquals(3, HowManyTimes.howManyTimes(""aaaa"", ""aa""));
	}
	
	@Test
	void testEmptySubstring() {
		assertEquals(0, HowManyTimes.howManyTimes("""", ""x""));
	}
	
	@Test
	void testSingleCharSubstring() {
		assertEquals(4, HowManyTimes.howManyTimes(""xyxyxyx"", ""x""));
	}
	
	@Test
	void testDoubleCharSubstring() {
		assertEquals(4, HowManyTimes.howManyTimes(""cacacacac"", ""cac""));
	}
	
	@Test
	void testSingleOccurrence() {
		assertEquals(1, HowManyTimes.howManyTimes(""john doe"", ""john""));
	}
	
	@Test
	void testNoOccurrence() {
		assertEquals(0, HowManyTimes.howManyTimes(""john doe"", ""jane""));
	}
	
	@Test
	void testSingleCharOccurrence() {
		assertEquals(1, HowManyTimes.howManyTimes(""john doe"", ""j""));
	}
	
	@Test
	void testSingleCharNoOccurrence() {
		assertEquals(0, HowManyTimes.howManyTimes(""john doe"", ""x""));
	}
}

// HowManyTimesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HowManyTimes}.
* It contains ten unit test cases for the {@link HowManyTimes#howManyTimes(String, String)} method.
*/
class HowManyTimesTest {
		
	@Test
	void testEmptyString() {
		assertEquals(0, HowManyTimes.howManyTimes("""", ""a""));
	}
	
	@Test
	void testSingleChar() {
		assertEquals(3, HowManyTimes.howManyTimes(""aaa"", ""a""));
	}
	
	@Test
	void testDoubleChar() {
		assertEquals(3, HowManyTimes.howManyTimes(""aaaa"", ""aa""));
	}
	
	@Test
	void testEmptySubstring() {
		assertEquals(0, HowManyTimes.howManyTimes("""", ""x""));
	}
	
	@Test
	void testSingleCharSubstring() {
		assertEquals(4, HowManyTimes.howManyTimes(""xyxyxyx"", ""x""));
	}
	
	@Test
	void testDoubleCharSubstring() {
		assertEquals(4, HowManyTimes.howManyTimes(""cacacacac"", ""cac""));
	}
	
	@Test
	void testSingleOccurrence() {
		assertEquals(1, HowManyTimes.howManyTimes(""john doe"", ""john""));
	}
	
	@Test
	void testNoOccurrence() {
		assertEquals(0, HowManyTimes.howManyTimes(""john doe"", ""jane""));
	}
	
	@Test
	void testSingleCharOccurrence() {
		assertEquals(1, HowManyTimes.howManyTimes(""john doe"", ""j""));
	}
	
	@Test
	void testSingleCharNoOccurrence() {
		assertEquals(0, HowManyTimes.howManyTimes(""john doe"", ""x""));
	}
}

// HowManyTimesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HowManyTimes}.
* It contains ten unit test cases for the {@link HowManyTimes#howManyTimes(String, String)} method.
*/
class HowManyTimesTest {
		
	@Test
	void testEmptyString() {
		assertEquals(0, HowManyTimes.howManyTimes("""", ""a""));
	}
	
	@Test
	void testSingleChar() {
		assertEquals(3, HowManyTimes.howManyTimes(""aaa"", ""a""));
	}
	
	@Test
	void testDoubleChar() {
		assertEquals(3, HowManyTimes.howManyTimes(""aaaa"", ""aa""));
	}
	
	@Test
	void testEmptySubstring() {
		assertEquals(0, HowManyTimes.howManyTimes("""", ""x""));
	}
	
	@Test
	void testSingleCharSubstring() {
		assertEquals(4, HowManyTimes.howManyTimes(""xyxyxyx"", ""x""));
	}
	
	@Test
	void testDoubleCharSubstring() {
		assertEquals(4, HowManyTimes.howManyTimes(""cacacacac"", ""cac""));
	}
	
	@Test
	void testSingleOccurrence() {
		assertEquals(1, HowManyTimes.howManyTimes(""john doe"", ""john""));
	}
	
	@Test
	void testNoOccurrence() {
		assertEquals(0, HowManyTimes.howManyTimes(""john doe"", ""jane""));
	}
	
	@Test
	void testSingleCharOccurrence() {
		assertEquals(1, HowManyTimes.howManyTimes(""john doe"", ""j""));
	}
	
	@Test
	void testSingleCharNoOccurrence() {
		assertEquals(0, HowManyTimes.howManyTimes(""john doe"", """
cmpl-6tUraZlWv32wVlraw3nEsxG9Nqv9n,/HumanEvalJava/src/main/java/original/id_19.java,60.518617391586304,stop,"// SortNumbers.java
package original;

import java.util.Arrays;

class SortNumbers {

    /**
     * Input is a space-delimited string of numbers from 'zero' to 'nine'.
     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
     * Return the string with numbers sorted from smallest to largest
     *
     * > sortNumbers(""three one five"")
     * ""one three five""
     * > sortNumbers("""")
     * """"
     * > sortNumbers(""three"")
     * ""three""
     * > sortNumbers(""three five nine"")
     * ""three five nine""
     * > sortNumbers(""five zero four seven nine eight"")
     * ""zero four five seven eight nine""
     * > sortNumbers(""six five four three two one zero"")
     * ""zero one two three four five six""
     */
    public static String sortNumbers(String numbers) {
        String[] numbersArray = numbers.split("" "");
        int[] numbersInt = new int[numbersArray.length];
        for (int i = 0; i < numbersArray.length; i++) {
            if (numbersArray[i].equals(""zero"")) {
                numbersInt[i] = 0;
            } else if (numbersArray[i].equals(""one"")) {
                numbersInt[i] = 1;
            } else if (numbersArray[i].equals(""two"")) {
                numbersInt[i] = 2;
            } else if (numbersArray[i].equals(""three"")) {
                numbersInt[i] = 3;
            } else if (numbersArray[i].equals(""four"")) {
                numbersInt[i] = 4;
            } else if (numbersArray[i].equals(""five"")) {
                numbersInt[i] = 5;
            } else if (numbersArray[i].equals(""six"")) {
                numbersInt[i] = 6;
            } else if (numbersArray[i].equals(""seven"")) {
                numbersInt[i] = 7;
            } else if (numbersArray[i].equals(""eight"")) {
                numbersInt[i] = 8;
            } else if (numbersArray[i].equals(""nine"")) {
                numbersInt[i] = 9;
            } else {
                numbersInt[i] = -1;
            }
        }
        Arrays.sort(numbersInt);
        String result = """";
        for (int i = 0; i < numbersInt.length; i++) {
            if (numbersInt[i] == 0) {
                result += ""zero "";
            } else if (numbersInt[i] == 1) {
                result += ""one "";
            } else if (numbersInt[i] == 2) {
                result += ""two "";
            } else if (numbersInt[i] == 3) {
                result += ""three "";
            } else if (numbersInt[i] == 4) {
                result += ""four "";
            } else if (numbersInt[i] == 5) {
                result += ""five "";
            } else if (numbersInt[i] == 6) {
                result += ""six "";
            } else if (numbersInt[i] == 7) {
                result += ""seven "";
            } else if (numbersInt[i] == 8) {
                result += ""eight "";
            } else if (numbersInt[i] == 9) {
                result += ""nine "";
            }
        }
        return result.trim();
    }
}
","// SortNumbersTest.java
package original;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortNumbers}.
* It contains ten unit test cases for the {@link SortNumbers#sortNumbers(String)} method.
*/
class SortNumbersTest {","// SortNumbersTest.java
package original;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortNumbers}.
* It contains ten unit test cases for the {@link SortNumbers#sortNumbers(String)} method.
*/
class SortNumbersTest {

	/**
	* Test case for {@link SortNumbers#sortNumbers(String)} method.
	* Input is a space-delimited string of numbers from 'zero' to 'nine'.
	* Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
	* Return the string with numbers sorted from smallest to largest
	*
	* > sortNumbers(""three one five"")
	* ""one three five""
	*/
	@Test
	void testSortNumbers1() {
		String input = ""three one five"";
		String expected = ""one three five"";
		String actual = SortNumbers.sortNumbers(input);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortNumbers#sortNumbers(String)} method.
	* Input is a space-delimited string of numbers from 'zero' to 'nine'.
	* Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
	* Return the string with numbers sorted from smallest to largest
	*
	* > sortNumbers("""")
	* """"
	*/
	@Test
	void testSortNumbers2() {
		String input = """";
		String expected = """";
		String actual = SortNumbers.sortNumbers(input);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortNumbers#sortNumbers(String)} method.
	* Input is a space-delimited string of numbers from 'zero' to 'nine'.
	* Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
	* Return the string with numbers sorted from smallest to largest
	*
	* > sortNumbers(""three"")
	* ""three""
	*/
	@Test
	void testSortNumbers3() {
		String input = ""three"";
		String expected = ""three"";
		String actual = SortNumbers.sortNumbers(input);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortNumbers#sortNumbers(String)} method.
	* Input is a space-delimited string of numbers from 'zero' to 'nine'.
	* Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
	* Return the string with numbers sorted from smallest to largest
	*
	* > sortNumbers(""three five nine"")
	* ""three five nine""
	*/
	@Test
	void testSortNumbers4() {
		String input = ""three five nine"";
		String expected = ""three five nine"";
		String actual = SortNumbers.sortNumbers(input);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortNumbers#sortNumbers(String)} method.
	* Input is a space-delimited string of numbers from 'zero' to 'nine'.
	* Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
	* Return the string with numbers sorted from smallest to largest
	*
	* > sortNumbers(""five zero four seven nine eight"")
	* ""zero four five seven eight nine""
	*/
	@Test
	void testSortNumbers5() {
		String input = ""five zero four seven nine eight"";
		String expected = ""zero four five seven eight nine"";
		String actual = SortNumbers.sortNumbers(input);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortNumbers#sortNumbers(String)} method.
	* Input is a space-delimited string of numbers from 'zero' to 'nine'.
	* Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
	* Return the string with numbers sorted from smallest to largest
	*
	* > sortNumbers(""six five four three two one zero"")
	* ""zero one two three four five six""
	*/
	@Test
	void testSortNumbers6() {
		String input = ""six five four three two one zero"";
		String expected = ""zero one two three four five six"";
		String actual = SortNumbers.sortNumbers(input);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortNumbers#sortNumbers(String)} method.
	* Input is a space-delimited string of numbers from 'zero' to 'nine'.
	* Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
	* Return the string with numbers sorted from smallest to largest
	*
	* > sortNumbers(""six five four three two one zero"")
	* ""zero one two three four five six""
	*/
	@Test
	void testSortNumbers7() {
		String input = ""six five four three two one zero"";
		String expected = ""zero one two three four five six"";
		String actual = SortNumbers.sortNumbers(input);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortNumbers#sortNumbers(String)} method.
	* Input is a space-delimited string of numbers from 'zero' to 'nine'.
	* Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
	* Return the string with numbers sorted from smallest to largest
	*
	* > sortNumbers(""six five four three two one zero"")
	* ""zero one two three four five six""
	*/
	@Test
	void testSortNumbers8() {
		String input = ""six five four three two one zero"";
		String expected = ""zero one two three four five six"";
		String actual = SortNumbers.sortNumbers(input);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortNumbers#sortNumbers(String)} method.
	* Input is a space-delimited string of numbers from 'zero' to 'nine'.
	* Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
	* Return the string with numbers sorted from smallest to largest
	*
	* > sortNumbers(""six five four three two one zero"")
	* ""zero one two three four five six""
	*/
	@Test
	void testSortNumbers9() {
		String input = ""six five four three two one zero"";
		String expected = ""zero one two three four five six"";
		String actual = SortNumbers.sortNumbers(input);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link SortNumbers#sortNumbers(String)} method.
	* Input is a space-delimited string of numbers from 'zero' to 'nine'.
	* Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
	* Return the string with numbers sorted from smallest to largest
	*
	* > sortNumbers(""six five four three two one zero"")
	* ""zero one two three four five six""
	*/
	@Test
	void testSortNumbers10() {
		String input = ""six five four three two one zero"";
		String expected = ""zero one two three four five six"";
		String actual = SortNumbers.sortNumbers(input);
		assertEquals(expected, actual);
	}
}"
cmpl-6tUsZTg2USCSSxTlSUMlEnKorUV4f,/HumanEvalJava/src/main/java/original/id_2.java,67.57543849945068,length,"// TruncateNumber.java
package original;

class TruncateNumber {

    /**
     * Given a positive floating point number, it can be decomposed into and integer part
     * (the largest integer smaller than given number) and decimals (leftover part always smaller than 1).
     * Return the decimal part of the number.
     *
     * > truncateNumber(3.5)
     * 0.5
     * > truncateNumber(1.33)
     * 0.33
     * > truncateNumber(123.456)
     * 0.456
     */
    // write a code with solving floating point issue
    public static Double truncateNumber(Double number) {
        // return number - Math.floor(number);
        return Math.round((number - Math.floor(number)) * 1000.0) / 1000.0;
    }
}
","// TruncateNumberTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TruncateNumber}.
* It contains ten unit test cases for the {@link TruncateNumber#truncateNumber(Double)} method.
*/
class TruncateNumberTest {","// TruncateNumberTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TruncateNumber}.
* It contains ten unit test cases for the {@link TruncateNumber#truncateNumber(Double)} method.
*/
class TruncateNumberTest {

	@Test
	void testTruncateNumber() {
		assertEquals(0.5, TruncateNumber.truncateNumber(3.5));
		assertEquals(0.33, TruncateNumber.truncateNumber(1.33));
		assertEquals(0.456, TruncateNumber.truncateNumber(123.456));
		assertEquals(0.0, TruncateNumber.truncateNumber(1.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(0.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(-1.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(-0.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.NaN));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.POSITIVE_INFINITY));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.NEGATIVE_INFINITY));
	}
}

// TruncateNumberTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TruncateNumber}.
* It contains ten unit test cases for the {@link TruncateNumber#truncateNumber(Double)} method.
*/
class TruncateNumberTest {
		
	@Test
	void testTruncateNumber() {
		assertEquals(0.5, TruncateNumber.truncateNumber(3.5));
		assertEquals(0.33, TruncateNumber.truncateNumber(1.33));
		assertEquals(0.456, TruncateNumber.truncateNumber(123.456));
		assertEquals(0.0, TruncateNumber.truncateNumber(1.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(0.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(-1.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(-0.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.NaN));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.POSITIVE_INFINITY));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.NEGATIVE_INFINITY));
	}
}

// TruncateNumberTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TruncateNumber}.
* It contains ten unit test cases for the {@link TruncateNumber#truncateNumber(Double)} method.
*/
class TruncateNumberTest {
		
	@Test
	void testTruncateNumber() {
		assertEquals(0.5, TruncateNumber.truncateNumber(3.5));
		assertEquals(0.33, TruncateNumber.truncateNumber(1.33));
		assertEquals(0.456, TruncateNumber.truncateNumber(123.456));
		assertEquals(0.0, TruncateNumber.truncateNumber(1.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(0.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(-1.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(-0.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.NaN));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.POSITIVE_INFINITY));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.NEGATIVE_INFINITY));
	}
}

// TruncateNumberTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TruncateNumber}.
* It contains ten unit test cases for the {@link TruncateNumber#truncateNumber(Double)} method.
*/
class TruncateNumberTest {
		
	@Test
	void testTruncateNumber() {
		assertEquals(0.5, TruncateNumber.truncateNumber(3.5));
		assertEquals(0.33, TruncateNumber.truncateNumber(1.33));
		assertEquals(0.456, TruncateNumber.truncateNumber(123.456));
		assertEquals(0.0, TruncateNumber.truncateNumber(1.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(0.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(-1.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(-0.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.NaN));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.POSITIVE_INFINITY));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.NEGATIVE_INFINITY));
	}
}

// TruncateNumberTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TruncateNumber}.
* It contains ten unit test cases for the {@link TruncateNumber#truncateNumber(Double)} method.
*/
class TruncateNumberTest {
		
	@Test
	void testTruncateNumber() {
		assertEquals(0.5, TruncateNumber.truncateNumber(3.5));
		assertEquals(0.33, TruncateNumber.truncateNumber(1.33));
		assertEquals(0.456, TruncateNumber.truncateNumber(123.456));
		assertEquals(0.0, TruncateNumber.truncateNumber(1.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(0.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(-1.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(-0.0));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.NaN));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.POSITIVE_INFINITY));
		assertEquals(0.0, TruncateNumber.truncateNumber(Double.NEGATIVE_INFINITY));
	}
}

// TruncateNumberTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TruncateNumber}.
* It contains ten unit test cases for the {@link TruncateNumber#truncateNumber(Double)} method.
*/
class TruncateNumberTest {
		
	@Test
	void testTruncateNumber() {
		assertEquals(0.5, TruncateNumber.truncateNumber(3.5));
		assertEquals(0.33, TruncateNumber.truncateNumber(1.33));
		assertEquals(0.456,"
cmpl-6tUte2zkjmyyudC878w3CvuXJvM1W,/HumanEvalJava/src/main/java/original/id_20.java,64.99175763130188,length,"// FindClosestElements.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class FindClosestElements {

    /**
     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each
     * other and return them in order (smaller number, larger number).
     *
     * > findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])
     * [3.9, 4.0]
     * > findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])
     * [5.0, 5.9]
     * > findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
     * [2.0, 2.2]
     * > findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
     * [2.0, 2.0]
     * > findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])
     * [2.2, 3.1]
     */
    public static List<Double> findClosestElements(List<Double> numbers) {
        List<Double> result = new ArrayList<Double>();
        double minDiff = Double.MAX_VALUE;
        for (int i = 0; i < numbers.size(); i++) {
            for (int j = i + 1; j < numbers.size(); j++) {
                double diff = Math.abs(numbers.get(i) - numbers.get(j));
                if (diff < minDiff) {
                    minDiff = diff;
                    result.clear();
                    result.add(numbers.get(i));
                    result.add(numbers.get(j));
                }
            }
        }
        Collections.sort(result);
        return result;
    }
}
","// FindClosestElementsTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindClosestElements}.
* It contains ten unit test cases for the {@link FindClosestElements#findClosestElements(List)} method.
*/
class FindClosestElementsTest {","// FindClosestElementsTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FindClosestElements}.
* It contains ten unit test cases for the {@link FindClosestElements#findClosestElements(List)} method.
*/
class FindClosestElementsTest {

	@Test
	void testFindClosestElements() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(1.0);
		numbers.add(2.0);
		numbers.add(3.9);
		numbers.add(4.0);
		numbers.add(5.0);
		numbers.add(2.2);
		List<Double> expected = new ArrayList<Double>();
		expected.add(3.9);
		expected.add(4.0);
		assertEquals(expected, FindClosestElements.findClosestElements(numbers));
	}
	
	@Test
	void testFindClosestElements2() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(1.0);
		numbers.add(2.0);
		numbers.add(5.9);
		numbers.add(4.0);
		numbers.add(5.0);
		List<Double> expected = new ArrayList<Double>();
		expected.add(5.0);
		expected.add(5.9);
		assertEquals(expected, FindClosestElements.findClosestElements(numbers));
	}
	
	@Test
	void testFindClosestElements3() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(1.0);
		numbers.add(2.0);
		numbers.add(3.0);
		numbers.add(4.0);
		numbers.add(5.0);
		numbers.add(2.2);
		List<Double> expected = new ArrayList<Double>();
		expected.add(2.0);
		expected.add(2.2);
		assertEquals(expected, FindClosestElements.findClosestElements(numbers));
	}
	
	@Test
	void testFindClosestElements4() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(1.0);
		numbers.add(2.0);
		numbers.add(3.0);
		numbers.add(4.0);
		numbers.add(5.0);
		numbers.add(2.0);
		List<Double> expected = new ArrayList<Double>();
		expected.add(2.0);
		expected.add(2.0);
		assertEquals(expected, FindClosestElements.findClosestElements(numbers));
	}
	
	@Test
	void testFindClosestElements5() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(1.1);
		numbers.add(2.2);
		numbers.add(3.1);
		numbers.add(4.1);
		numbers.add(5.1);
		List<Double> expected = new ArrayList<Double>();
		expected.add(2.2);
		expected.add(3.1);
		assertEquals(expected, FindClosestElements.findClosestElements(numbers));
	}
	
	@Test
	void testFindClosestElements6() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(1.0);
		numbers.add(2.0);
		numbers.add(3.0);
		numbers.add(4.0);
		numbers.add(5.0);
		numbers.add(6.0);
		numbers.add(7.0);
		numbers.add(8.0);
		numbers.add(9.0);
		numbers.add(10.0);
		numbers.add(11.0);
		numbers.add(12.0);
		numbers.add(13.0);
		numbers.add(14.0);
		numbers.add(15.0);
		numbers.add(16.0);
		numbers.add(17.0);
		numbers.add(18.0);
		numbers.add(19.0);
		numbers.add(20.0);
		numbers.add(21.0);
		numbers.add(22.0);
		numbers.add(23.0);
		numbers.add(24.0);
		numbers.add(25.0);
		numbers.add(26.0);
		numbers.add(27.0);
		numbers.add(28.0);
		numbers.add(29.0);
		numbers.add(30.0);
		numbers.add(31.0);
		numbers.add(32.0);
		numbers.add(33.0);
		numbers.add(34.0);
		numbers.add(35.0);
		numbers.add(36.0);
		numbers.add(37.0);
		numbers.add(38.0);
		numbers.add(39.0);
		numbers.add(40.0);
		numbers.add(41.0);
		numbers.add(42.0);
		numbers.add(43.0);
		numbers.add(44.0);
		numbers.add(45.0);
		numbers.add(46.0);
		numbers.add(47.0);
		numbers.add(48.0);
		numbers.add(49.0);
		numbers.add(50.0);
		numbers.add(51.0);
		numbers.add(52.0);
		numbers.add(53.0);
		numbers.add(54.0);
		numbers.add(55.0);
		numbers.add(56.0);
		numbers.add(57.0);
		numbers.add(58.0);
		numbers.add(59.0);
		numbers.add(60.0);
		numbers.add(61.0);
		numbers.add(62.0);
		numbers.add(63.0);
		numbers.add(64.0);
		numbers.add(65.0);
		numbers.add(66.0);
		numbers.add(67.0);
		numbers.add(68.0);
		numbers.add(69.0);
		numbers.add(70.0);
		numbers.add(71.0);
		numbers.add(72.0);
		numbers.add(73.0);
		numbers.add(74.0);
		numbers.add(75.0);
		numbers.add(76.0);
		numbers.add(77.0);
		numbers.add(78.0);
		numbers.add(79.0);
		numbers.add(80.0);
		numbers.add(81.0);
		numbers.add(82.0);
		numbers.add(83.0);
		numbers.add(84.0);
		numbers.add(85.0);
		numbers.add(86.0);
		numbers.add(87.0);
		numbers.add(88.0);
		numbers.add(89.0);
		numbers.add(90.0);
		numbers.add(91.0);
		numbers.add(92.0);
		numbers.add(93.0);
		numbers."
cmpl-6tUuh3FRSzSRfPumHIYoPLxbNZmkV,/HumanEvalJava/src/main/java/original/id_21.java,61.23629927635193,length,"// RescaleToUnit.java
package original;

import java.util.ArrayList;
import java.util.List;

class RescaleToUnit {

    /**
     * Given list of numbers (of at least two elements), apply a linear transform to that list,
     * such that the smallest number will become 0 and the largest will become 1
     *
     * > rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])
     * [0.0, 0.25, 0.5, 0.75, 1.0]
     * > rescaleToUnit([2.0, 49.9])
     * [0.0, 1.0]
     * > rescaleToUnit([100.0, 49.9])
     * [1.0, 0.0]
     * > rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])
     * [0.0, 0.25, 0.5, 0.75, 1.0]
     * > rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])
     * [0.25, 0.0, 1.0, 0.5, 0.75]
     * > rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])
     * [0.25, 0.0, 1.0, 0.5, 0.75]
     */
    public static List<Double> rescaleToUnit(List<Double> numbers) {
        List<Double> result = new ArrayList<Double>();
        double min = Double.MAX_VALUE;
        double max = Double.MIN_VALUE;
        for (int i = 0; i < numbers.size(); i++) {
            if (numbers.get(i) < min) {
                min = numbers.get(i);
            }
            if (numbers.get(i) > max) {
                max = numbers.get(i);
            }
        }
        for (int i = 0; i < numbers.size(); i++) {
            result.add((numbers.get(i) - min) / (max - min));
        }
        return result;
    }
}
","// RescaleToUnitTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RescaleToUnit}.
* It contains ten unit test cases for the {@link RescaleToUnit#rescaleToUnit(List)} method.
*/
class RescaleToUnitTest {","// RescaleToUnitTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RescaleToUnit}.
* It contains ten unit test cases for the {@link RescaleToUnit#rescaleToUnit(List)} method.
*/
class RescaleToUnitTest {

	/**
	* Test case for {@link RescaleToUnit#rescaleToUnit(List)} method.
	* It tests the method with a list of numbers of at least two elements.
	* The smallest number will become 0 and the largest will become 1.
	*/
	@Test
	void testRescaleToUnit() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(1.0);
		numbers.add(2.0);
		numbers.add(3.0);
		numbers.add(4.0);
		numbers.add(5.0);
		List<Double> expected = new ArrayList<Double>();
		expected.add(0.0);
		expected.add(0.25);
		expected.add(0.5);
		expected.add(0.75);
		expected.add(1.0);
		List<Double> actual = RescaleToUnit.rescaleToUnit(numbers);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link RescaleToUnit#rescaleToUnit(List)} method.
	* It tests the method with a list of numbers of at least two elements.
	* The smallest number will become 0 and the largest will become 1.
	*/
	@Test
	void testRescaleToUnit2() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(2.0);
		numbers.add(49.9);
		List<Double> expected = new ArrayList<Double>();
		expected.add(0.0);
		expected.add(1.0);
		List<Double> actual = RescaleToUnit.rescaleToUnit(numbers);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link RescaleToUnit#rescaleToUnit(List)} method.
	* It tests the method with a list of numbers of at least two elements.
	* The smallest number will become 0 and the largest will become 1.
	*/
	@Test
	void testRescaleToUnit3() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(100.0);
		numbers.add(49.9);
		List<Double> expected = new ArrayList<Double>();
		expected.add(1.0);
		expected.add(0.0);
		List<Double> actual = RescaleToUnit.rescaleToUnit(numbers);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link RescaleToUnit#rescaleToUnit(List)} method.
	* It tests the method with a list of numbers of at least two elements.
	* The smallest number will become 0 and the largest will become 1.
	*/
	@Test
	void testRescaleToUnit4() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(1.0);
		numbers.add(2.0);
		numbers.add(3.0);
		numbers.add(4.0);
		numbers.add(5.0);
		List<Double> expected = new ArrayList<Double>();
		expected.add(0.0);
		expected.add(0.25);
		expected.add(0.5);
		expected.add(0.75);
		expected.add(1.0);
		List<Double> actual = RescaleToUnit.rescaleToUnit(numbers);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link RescaleToUnit#rescaleToUnit(List)} method.
	* It tests the method with a list of numbers of at least two elements.
	* The smallest number will become 0 and the largest will become 1.
	*/
	@Test
	void testRescaleToUnit5() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(2.0);
		numbers.add(1.0);
		numbers.add(5.0);
		numbers.add(3.0);
		numbers.add(4.0);
		List<Double> expected = new ArrayList<Double>();
		expected.add(0.25);
		expected.add(0.0);
		expected.add(1.0);
		expected.add(0.5);
		expected.add(0.75);
		List<Double> actual = RescaleToUnit.rescaleToUnit(numbers);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link RescaleToUnit#rescaleToUnit(List)} method.
	* It tests the method with a list of numbers of at least two elements.
	* The smallest number will become 0 and the largest will become 1.
	*/
	@Test
	void testRescaleToUnit6() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(12.0);
		numbers.add(11.0);
		numbers.add(15.0);
		numbers.add(13.0);
		numbers.add(14.0);
		List<Double> expected = new ArrayList<Double>();
		expected.add(0.25);
		expected.add(0.0);
		expected.add(1.0);
		expected.add(0.5);
		expected.add(0.75);
		List<Double> actual = RescaleToUnit.rescaleToUnit(numbers);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link RescaleToUnit#rescaleToUnit(List)} method.
	* It tests the method with a list of numbers of at least two elements.
	* The smallest number will become 0 and the largest will become 1.
	*/
	@Test
	void testRescaleToUnit7() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(1.0);
		numbers.add(2.0);
		numbers.add(3.0);
		numbers.add(4.0);
		numbers.add(5.0);
		List<Double> expected = new ArrayList<Double>();
		expected.add(0.0);
		expected.add(0.25);
		expected.add(0.5);
		expected.add(0.75);
		expected.add(1.0);
		List<Double> actual = RescaleToUnit.rescaleToUnit(numbers);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link RescaleToUnit#rescaleToUnit(List)} method.
	* It tests the method with a list of numbers of at least two elements.
	* The smallest number will become 0 and the largest will become 1.
	*/
	@Test
	void testRescaleToUnit8() {
		List<Double> numbers = new ArrayList<Double>();
		numbers.add(2.0);
		numbers.add(1.0);
		numbers.add(5.0);
		numbers.add(3.0);
		numbers.add(4.0);
		List<Double> expected = new ArrayList<Double>();
		expected.add(0.25);
		expected.add(0.0);
		expected.add(1.0);
		expected.add(0.5);
		expected.add(0.75);
		List<Double> actual = RescaleToUnit.rescaleToUnit(numbers);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link RescaleToUnit#rescaleToUnit(List)} method.
"
cmpl-6tUvhu59i25MiKoJqI7RN0Qb0qTzr,/HumanEvalJava/src/main/java/original/id_22.java,51.76031756401062,stop,"// FilterIntegers.java
package original;

import java.util.ArrayList;
import java.util.List;

class FilterIntegers {

    /**
     * Filter given list of any Java values only for integers.
     *
     * > filterIntegers([""a"", 3.14, 5])
     * [5]
     * > filterIntegers([1, 2, 3, ""abc"", {}, []])
     * [1, 2, 3]
     * > filterIntegers([])
     * []
     * > filterIntegers([4, {}, [], 23.2, 9, ""adasd""])
     * [4, 9]
     * > filterIntegers([3, ""c"", 3, 3, ""a"", ""b""])
     * [3, 3, 3]
     */
    public static List<Object> filterIntegers(List<Object> values) {
        List<Object> result = new ArrayList<Object>();
        for (Object value : values) {
            if (value instanceof Integer) {
                result.add(value);
            }
        }
        return result;
    }
}
","// FilterIntegersTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterIntegers}.
* It contains ten unit test cases for the {@link FilterIntegers#filterIntegers(List)} method.
*/
class FilterIntegersTest {","// FilterIntegersTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterIntegers}.
* It contains ten unit test cases for the {@link FilterIntegers#filterIntegers(List)} method.
*/
class FilterIntegersTest {

	@Test
	void testFilterIntegers_1() {
		List<Object> values = new ArrayList<Object>();
		values.add(""a"");
		values.add(3.14);
		values.add(5);
		List<Object> expected = new ArrayList<Object>();
		expected.add(5);
		List<Object> actual = FilterIntegers.filterIntegers(values);
		assertEquals(expected, actual);
	}
	
	@Test
	void testFilterIntegers_2() {
		List<Object> values = new ArrayList<Object>();
		values.add(1);
		values.add(2);
		values.add(3);
		values.add(""abc"");
		values.add(new Object());
		values.add(new ArrayList<Object>());
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		List<Object> actual = FilterIntegers.filterIntegers(values);
		assertEquals(expected, actual);
	}
	
	@Test
	void testFilterIntegers_3() {
		List<Object> values = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = FilterIntegers.filterIntegers(values);
		assertEquals(expected, actual);
	}
	
	@Test
	void testFilterIntegers_4() {
		List<Object> values = new ArrayList<Object>();
		values.add(4);
		values.add(new Object());
		values.add(new ArrayList<Object>());
		values.add(23.2);
		values.add(9);
		values.add(""adasd"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(4);
		expected.add(9);
		List<Object> actual = FilterIntegers.filterIntegers(values);
		assertEquals(expected, actual);
	}
	
	@Test
	void testFilterIntegers_5() {
		List<Object> values = new ArrayList<Object>();
		values.add(3);
		values.add(""c"");
		values.add(3);
		values.add(3);
		values.add(""a"");
		values.add(""b"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(3);
		expected.add(3);
		expected.add(3);
		List<Object> actual = FilterIntegers.filterIntegers(values);
		assertEquals(expected, actual);
	}
	
	@Test
	void testFilterIntegers_6() {
		List<Object> values = new ArrayList<Object>();
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		List<Object> expected = new ArrayList<Object>();
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		List<Object> actual = FilterIntegers.filterIntegers(values);
		assertEquals(expected, actual);
	}
	
	@Test
	void testFilterIntegers_7() {
		List<Object> values = new ArrayList<Object>();
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		List<Object> expected = new ArrayList<Object>();
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		List<Object> actual = FilterIntegers.filterIntegers(values);
		assertEquals(expected, actual);
	}
	
	@Test
	void testFilterIntegers_8() {
		List<Object> values = new ArrayList<Object>();
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		List<Object> expected = new ArrayList<Object>();
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		List<Object> actual = FilterIntegers.filterIntegers(values);
		assertEquals(expected, actual);
	}
	
	@Test
	void testFilterIntegers_9() {
		List<Object> values = new ArrayList<Object>();
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		List<Object> expected = new ArrayList<Object>();
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		List<Object> actual = FilterIntegers.filterIntegers(values);
		assertEquals(expected, actual);
	}
	
	@Test
	void testFilterIntegers_10() {
		List<Object> values = new ArrayList<Object>();
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		values.add(3);
		List<Object> expected = new ArrayList<Object>();
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		List<Object> actual = FilterIntegers.filterIntegers(values);
		assertEquals(expected, actual);
	}
}"
cmpl-6tUwkJZTNfuYxaMJ6DFsgJg3Rhdkq,/HumanEvalJava/src/main/java/original/id_23.java,52.54386353492737,length,"// Strlen.java
package original;

class Strlen {

    /**
     * Return length of given string
     *
     * > strlen("""")
     * 0
     * > strlen(""abc"")
     * 3
     * > strlen("""")
     * 0
     * > strlen(""x"")
     * 1
     * > strlen(""asdasnakj"")
     * 9
     */
    public static int strlen(String string) {
        return string.length();
    }
}
","// StrlenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {","// StrlenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {

	@Test
	void testStrlen() {
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(3, Strlen.strlen(""abc""));
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(1, Strlen.strlen(""x""));
		assertEquals(9, Strlen.strlen(""asdasnakj""));
	}
}

// StrlenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {
		
	@Test
	void testStrlen() {
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(3, Strlen.strlen(""abc""));
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(1, Strlen.strlen(""x""));
		assertEquals(9, Strlen.strlen(""asdasnakj""));
	}
}

// StrlenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {
		
	@Test
	void testStrlen() {
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(3, Strlen.strlen(""abc""));
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(1, Strlen.strlen(""x""));
		assertEquals(9, Strlen.strlen(""asdasnakj""));
	}
}

// StrlenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {
		
	@Test
	void testStrlen() {
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(3, Strlen.strlen(""abc""));
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(1, Strlen.strlen(""x""));
		assertEquals(9, Strlen.strlen(""asdasnakj""));
	}
}

// StrlenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {
		
	@Test
	void testStrlen() {
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(3, Strlen.strlen(""abc""));
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(1, Strlen.strlen(""x""));
		assertEquals(9, Strlen.strlen(""asdasnakj""));
	}
}

// StrlenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {
		
	@Test
	void testStrlen() {
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(3, Strlen.strlen(""abc""));
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(1, Strlen.strlen(""x""));
		assertEquals(9, Strlen.strlen(""asdasnakj""));
	}
}

// StrlenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {
		
	@Test
	void testStrlen() {
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(3, Strlen.strlen(""abc""));
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(1, Strlen.strlen(""x""));
		assertEquals(9, Strlen.strlen(""asdasnakj""));
	}
}

// StrlenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {
		
	@Test
	void testStrlen() {
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(3, Strlen.strlen(""abc""));
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(1, Strlen.strlen(""x""));
		assertEquals(9, Strlen.strlen(""asdasnakj""));
	}
}

// StrlenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {
		
	@Test
	void testStrlen() {
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(3, Strlen.strlen(""abc""));
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(1, Strlen.strlen(""x""));
		assertEquals(9, Strlen.strlen(""asdasnakj""));
	}
}

// StrlenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.
*/
class StrlenTest {
		
	@Test
	void testStrlen() {
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(3, Strlen.strlen(""abc""));
		assertEquals(0, Strlen.strlen(""""));
		assertEquals(1, Strlen.strlen(""x""));
		assertEquals(9, Strlen.strlen(""asdasnakj""));
	}
}

// StrlenTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Strlen}.
* It contains"
cmpl-6tUxnvDXPI6dSF8OrXUNSM5tKrif6,/HumanEvalJava/src/main/java/original/id_24.java,54.10567021369934,length,"// LargestDivisor.java
package original;

class LargestDivisor {

    /**
     * For a given number n, find the largest number that divides n evenly, smaller than n
     *
     * > largestDivisor(15)
     * 5
     * > largestDivisor(3)
     * 1
     * > largestDivisor(7)
     * 1
     * > largestDivisor(10)
     * 5
     * > largestDivisor(100)
     * 50
     * > largestDivisor(49)
     * 7
     */
    public static int largestDivisor(int n) {
        for (int i = n - 1; i > 0; i--) {
            if (n % i == 0) {
                return i;
            }
        }
        return 1;
    }
}
","// LargestDivisorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestDivisor}.
* It contains ten unit test cases for the {@link LargestDivisor#largestDivisor(int)} method.
*/
class LargestDivisorTest {","// LargestDivisorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestDivisor}.
* It contains ten unit test cases for the {@link LargestDivisor#largestDivisor(int)} method.
*/
class LargestDivisorTest {

	@Test
	void testLargestDivisor() {
		assertEquals(5, LargestDivisor.largestDivisor(15));
		assertEquals(1, LargestDivisor.largestDivisor(3));
		assertEquals(1, LargestDivisor.largestDivisor(7));
		assertEquals(5, LargestDivisor.largestDivisor(10));
		assertEquals(50, LargestDivisor.largestDivisor(100));
		assertEquals(7, LargestDivisor.largestDivisor(49));
		assertEquals(1, LargestDivisor.largestDivisor(1));
		assertEquals(2, LargestDivisor.largestDivisor(2));
		assertEquals(2, LargestDivisor.largestDivisor(4));
		assertEquals(3, LargestDivisor.largestDivisor(6));
	}
}

// LargestDivisor.java
package refactored;

class LargestDivisor {

    /**
     * For a given number n, find the largest number that divides n evenly, smaller than n
     *
     * > largestDivisor(15)
     * 5
     * > largestDivisor(3)
     * 1
     * > largestDivisor(7)
     * 1
     * > largestDivisor(10)
     * 5
     * > largestDivisor(100)
     * 50
     * > largestDivisor(49)
     * 7
     */
    public static int largestDivisor(int n) {
        for (int i = n - 1; i > 0; i--) {
            if (n % i == 0) {
                return i;
            }
        }
        return 1;
    }
}

// LargestDivisorTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestDivisor}.
* It contains ten unit test cases for the {@link LargestDivisor#largestDivisor(int)} method.
*/
class LargestDivisorTest {
		
	@Test
	void testLargestDivisor() {
		assertEquals(5, LargestDivisor.largestDivisor(15));
		assertEquals(1, LargestDivisor.largestDivisor(3));
		assertEquals(1, LargestDivisor.largestDivisor(7));
		assertEquals(5, LargestDivisor.largestDivisor(10));
		assertEquals(50, LargestDivisor.largestDivisor(100));
		assertEquals(7, LargestDivisor.largestDivisor(49));
		assertEquals(1, LargestDivisor.largestDivisor(1));
		assertEquals(2, LargestDivisor.largestDivisor(2));
		assertEquals(2, LargestDivisor.largestDivisor(4));
		assertEquals(3, LargestDivisor.largestDivisor(6));
	}
}

// LargestDivisor.java
package refactored;

class LargestDivisor {

    /**
     * For a given number n, find the largest number that divides n evenly, smaller than n
     *
     * > largestDivisor(15)
     * 5
     * > largestDivisor(3)
     * 1
     * > largestDivisor(7)
     * 1
     * > largestDivisor(10)
     * 5
     * > largestDivisor(100)
     * 50
     * > largestDivisor(49)
     * 7
     */
    public static int largestDivisor(int n) {
        for (int i = n - 1; i > 0; i--) {
            if (n % i == 0) {
                return i;
            }
        }
        return 1;
    }
}

// LargestDivisorTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestDivisor}.
* It contains ten unit test cases for the {@link LargestDivisor#largestDivisor(int)} method.
*/
class LargestDivisorTest {
		
	@Test
	void testLargestDivisor() {
		assertEquals(5, LargestDivisor.largestDivisor(15));
		assertEquals(1, LargestDivisor.largestDivisor(3));
		assertEquals(1, LargestDivisor.largestDivisor(7));
		assertEquals(5, LargestDivisor.largestDivisor(10));
		assertEquals(50, LargestDivisor.largestDivisor(100));
		assertEquals(7, LargestDivisor.largestDivisor(49));
		assertEquals(1, LargestDivisor.largestDivisor(1));
		assertEquals(2, LargestDivisor.largestDivisor(2));
		assertEquals(2, LargestDivisor.largestDivisor(4));
		assertEquals(3, LargestDivisor.largestDivisor(6));
	}
}

// LargestDivisor.java
package refactored;

class LargestDivisor {

    /**
     * For a given number n, find the largest number that divides n evenly, smaller than n
     *
     * > largestDivisor(15)
     * 5
     * > largestDivisor(3)
     * 1
     * > largestDivisor(7)
     * 1
     * > largestDivisor(10)
     * 5
     * > largestDivisor(100)
     * 50
     * > largestDivisor(49)
     * 7
     */
    public static int largestDivisor(int n) {
        for (int i = n - 1; i > 0; i--) {
            if (n % i == 0) {
                return i;
            }
        }
        return 1;
    }
}

// LargestDivisorTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestDivisor}.
* It contains ten unit test cases for the {@link LargestDivisor#largestDivisor(int)} method.
*/
class LargestDivisorTest {
		
	@Test
	void testLargestDivisor() {
		assertEquals(5, LargestDivisor.largestDivisor(15));
		assertEquals(1, LargestDivisor.largestDivisor(3));
		assertEquals(1, LargestDivisor.largestDivisor(7));
		assertEquals(5, LargestDivisor.largestDivisor(10));
		assertEquals(50, LargestDivisor.largestDivisor(100));
		assertEquals(7, LargestDivisor.largestDivisor(49));
		assertEquals(1, LargestDivisor.largestDivisor(1));
		assertEquals(2, LargestDivisor.largestDivisor(2));
		assertEquals(2, LargestDivisor.largestDivisor(4));
		assertEquals(3, LargestDivisor.largestDivisor(6));
	}
}

// LargestDivisor.java
package refactored;

class L"
cmpl-6tUyqgA3T5F0hrVMYLjvBTXyuMTOM,/HumanEvalJava/src/main/java/original/id_25.java,16.762402296066284,stop,"// Factorize.java
package original;

import java.util.ArrayList;
import java.util.List;

class Factorize {

    /**
     * Return list of prime factors of given integer in the order from smallest to largest.
     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.
     * Input number should be equal to the product of all factors
     *
     * > factorize(8)
     * [2, 2, 2]
     * > factorize(25)
     * [5, 5]
     * > factorize(70)
     * [2, 5, 7]
     * > factorize(2)
     * [2]
     * > factorize(4)
     * [2, 2]
     * > factorize(8)
     * [2, 2, 2]
     * > factorize(57)
     * [3, 19]
     * > factorize(3249)
     * [3, 3, 19, 19]
     * > factorize(185193)
     * [3, 3, 3, 19, 19, 19]
     * > factorize(20577)
     * [3, 19, 19, 19]
     * > factorize(18)
     * [2, 3, 3]
     */
    public static List<Integer> factorize(int n) {
        List<Integer> result = new ArrayList<Integer>();
        for (int i = 2; i <= n; i++) {
            while (n % i == 0) {
                result.add(i);
                n /= i;
            }
        }
        return result;
    }
}
","// FactorizeTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Factorize}.
* It contains ten unit test cases for the {@link Factorize#factorize(int)} method.
*/
class FactorizeTest {","// FactorizeTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Factorize}.
* It contains ten unit test cases for the {@link Factorize#factorize(int)} method.
*/
class FactorizeTest {

	@Test
	void testFactorize() {
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(2);
		expected.add(2);
		expected.add(2);
		assertEquals(expected, Factorize.factorize(8));
		
		expected = new ArrayList<Integer>();
		expected.add(5);
		expected.add(5);
		assertEquals(expected, Factorize.factorize(25));
		
		expected = new ArrayList<Integer>();
		expected.add(2);
		expected.add(5);
		expected.add(7);
		assertEquals(expected, Factorize.factorize(70));
		
		expected = new ArrayList<Integer>();
		expected.add(2);
		assertEquals(expected, Factorize.factorize(2));
		
		expected = new ArrayList<Integer>();
		expected.add(2);
		expected.add(2);
		assertEquals(expected, Factorize.factorize(4));
		
		expected = new ArrayList<Integer>();
		expected.add(2);
		expected.add(2);
		expected.add(2);
		assertEquals(expected, Factorize.factorize(8));
		
		expected = new ArrayList<Integer>();
		expected.add(3);
		expected.add(19);
		assertEquals(expected, Factorize.factorize(57));
		
		expected = new ArrayList<Integer>();
		expected.add(3);
		expected.add(3);
		expected.add(19);
		expected.add(19);
		assertEquals(expected, Factorize.factorize(3249));
		
		expected = new ArrayList<Integer>();
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(19);
		expected.add(19);
		expected.add(19);
		assertEquals(expected, Factorize.factorize(185193));
		
		expected = new ArrayList<Integer>();
		expected.add(3);
		expected.add(19);
		expected.add(19);
		expected.add(19);
		assertEquals(expected, Factorize.factorize(20577));
		
		expected = new ArrayList<Integer>();
		expected.add(2);
		expected.add(3);
		expected.add(3);
		assertEquals(expected, Factorize.factorize(18));
	}
}"
cmpl-6tUztkXT7GWLyQibSEoP582Mw0vNd,/HumanEvalJava/src/main/java/original/id_26.java,55.179182291030884,length,"// RemoveDuplicates.java
package original;

import java.util.ArrayList;
import java.util.List;

class RemoveDuplicates {

    /**
     * From a list of integers, remove all elements that occur more than once.
     * Keep order of elements left the same as in the input.
     *
     * > removeDuplicates([1, 2, 3, 2, 4])
     * [1, 3, 4]
     * > removeDuplicates([])
     * []
     * > removeDuplicates([1, 2, 3, 4])
     * [1, 2, 3, 4]
     * > removeDuplicates([1, 2, 3, 2, 4, 3, 5])
     * [1, 4, 5]
     */
    public static List<Object> removeDuplicates(List<Object> numbers) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 0; i < numbers.size(); i++) {
            if (numbers.indexOf(numbers.get(i)) == numbers.lastIndexOf(numbers.get(i))) {
                result.add(numbers.get(i));
            }
        }
        return result;
    }
}
","// RemoveDuplicatesTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveDuplicates}.
* It contains ten unit test cases for the {@link RemoveDuplicates#removeDuplicates(List)} method.
*/
class RemoveDuplicatesTest {","// RemoveDuplicatesTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveDuplicates}.
* It contains ten unit test cases for the {@link RemoveDuplicates#removeDuplicates(List)} method.
*/
class RemoveDuplicatesTest {

	/**
	* Test case for {@link RemoveDuplicates#removeDuplicates(List)} method.
	* It tests the method with a list of integers that contains duplicates.
	* The expected result is a list of integers that contains only the elements that occur once.
	*/
	@Test
	void testRemoveDuplicatesWithDuplicates() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(2);
		numbers.add(4);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(3);
		expected.add(4);
		List<Object> actual = RemoveDuplicates.removeDuplicates(numbers);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link RemoveDuplicates#removeDuplicates(List)} method.
	* It tests the method with an empty list.
	* The expected result is an empty list.
	*/
	@Test
	void testRemoveDuplicatesWithEmptyList() {
		List<Object> numbers = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = RemoveDuplicates.removeDuplicates(numbers);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link RemoveDuplicates#removeDuplicates(List)} method.
	* It tests the method with a list of integers that contains no duplicates.
	* The expected result is a list of integers that contains all the elements.
	*/
	@Test
	void testRemoveDuplicatesWithNoDuplicates() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(4);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		List<Object> actual = RemoveDuplicates.removeDuplicates(numbers);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link RemoveDuplicates#removeDuplicates(List)} method.
	* It tests the method with a list of integers that contains duplicates.
	* The expected result is a list of integers that contains only the elements that occur once.
	*/
	@Test
	void testRemoveDuplicatesWithDuplicates2() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(2);
		numbers.add(4);
		numbers.add(3);
		numbers.add(5);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(4);
		expected.add(5);
		List<Object> actual = RemoveDuplicates.removeDuplicates(numbers);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link RemoveDuplicates#removeDuplicates(List)} method.
	* It tests the method with a list of integers that contains duplicates.
	* The expected result is a list of integers that contains only the elements that occur once.
	*/
	@Test
	void testRemoveDuplicatesWithDuplicates3() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(2);
		numbers.add(4);
		numbers.add(3);
		numbers.add(5);
		numbers.add(6);
		numbers.add(7);
		numbers.add(8);
		numbers.add(9);
		numbers.add(10);
		numbers.add(11);
		numbers.add(12);
		numbers.add(13);
		numbers.add(14);
		numbers.add(15);
		numbers.add(16);
		numbers.add(17);
		numbers.add(18);
		numbers.add(19);
		numbers.add(20);
		numbers.add(21);
		numbers.add(22);
		numbers.add(23);
		numbers.add(24);
		numbers.add(25);
		numbers.add(26);
		numbers.add(27);
		numbers.add(28);
		numbers.add(29);
		numbers.add(30);
		numbers.add(31);
		numbers.add(32);
		numbers.add(33);
		numbers.add(34);
		numbers.add(35);
		numbers.add(36);
		numbers.add(37);
		numbers.add(38);
		numbers.add(39);
		numbers.add(40);
		numbers.add(41);
		numbers.add(42);
		numbers.add(43);
		numbers.add(44);
		numbers.add(45);
		numbers.add(46);
		numbers.add(47);
		numbers.add(48);
		numbers.add(49);
		numbers.add(50);
		numbers.add(51);
		numbers.add(52);
		numbers.add(53);
		numbers.add(54);
		numbers.add(55);
		numbers.add(56);
		numbers.add(57);
		numbers.add(58);
		numbers.add(59);
		numbers.add(60);
		numbers.add(61);
		numbers.add(62);
		numbers.add(63);
		numbers.add(64);
		numbers.add(65);
		numbers.add(66);
		numbers.add(67);
		numbers.add(68);
		numbers.add(69);
		numbers.add(70);
		numbers.add(71);
		numbers.add(72);
		numbers.add(73);
		numbers.add(74);
		numbers.add(75);
		numbers.add(76);
		numbers.add(77);
		numbers.add(78);
		numbers.add(79);
		numbers.add(80);
		numbers.add(81);
		numbers.add(82);
		numbers.add(83);
		numbers.add(84);
		numbers.add(85);
		numbers.add(86);
		numbers.add(87);
		numbers.add(88);
		numbers.add(89);
		numbers.add(90);
		numbers.add(91);
		numbers.add(92);
		numbers.add(93);
		numbers.add(94);
		numbers.add(95);
		numbers.add(96);
		numbers.add(97);
		numbers.add(98);
		numbers.add(99);
		numbers.add(100);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected"
cmpl-6tV0wTqZxsrHtIAueMzfCfwXm98SF,/HumanEvalJava/src/main/java/original/id_27.java,4.32172966003418,stop,"// FlipCase.java
package original;

class FlipCase {

    /**
     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
     *
     * > flipCase(""Hello"")
     * ""hELLO""
     * > flipCase("""")
     * """"
     * > flipCase(""Hello!"")
     * ""hELLO!""
     * > flipCase(""These violent delights have violent ends"")
     * ""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS""
     */
    public static String flipCase(String string) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < string.length(); i++) {
            char c = string.charAt(i);
            if (Character.isUpperCase(c)) {
                result.append(Character.toLowerCase(c));
            } else {
                result.append(Character.toUpperCase(c));
            }
        }
        return result.toString();
    }
}
","// FlipCaseTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FlipCase}.
* It contains ten unit test cases for the {@link FlipCase#flipCase(String)} method.
*/
class FlipCaseTest {","// FlipCaseTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FlipCase}.
* It contains ten unit test cases for the {@link FlipCase#flipCase(String)} method.
*/
class FlipCaseTest {

	@Test
	void testFlipCase() {
		assertEquals(""hELLO"", FlipCase.flipCase(""Hello""));
		assertEquals("""", FlipCase.flipCase(""""));
		assertEquals(""hELLO!"", FlipCase.flipCase(""Hello!""));
		assertEquals(""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"", FlipCase.flipCase(""These violent delights have violent ends""));
		assertEquals("""", FlipCase.flipCase(""""));
		assertEquals("""", FlipCase.flipCase(""""));
		assertEquals("""", FlipCase.flipCase(""""));
		assertEquals("""", FlipCase.flipCase(""""));
		assertEquals("""", FlipCase.flipCase(""""));
		assertEquals("""", FlipCase.flipCase(""""));
	}
}"
cmpl-6tV1z2os2M3Tse568HKsloxCKfzWY,/HumanEvalJava/src/main/java/original/id_28.java,60.50933575630188,length,"// Concatenate.java
package original;

import java.util.List;

class Concatenate {

    /**
     * Concatenate list of strings into a single string
     *
     * > concatenate([])
     * """"
     * > concatenate([""a"", ""b"", ""c""])
     * ""abc""
     * > concatenate([])
     * """"
     * > concatenate([""x"", ""y"", ""z""])
     * ""xyz""
     * > concatenate([""x"", ""y"", ""z"", ""w"", ""k""])
     * ""xyzwk""
     */
    public static String concatenate(List<Object> strings) {
        String result = """";
        for (Object string : strings) {
            result += string.toString();
        }
        return result;
    }
}
","// ConcatenateTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Concatenate}.
* It contains ten unit test cases for the {@link Concatenate#concatenate(List)} method.
*/
class ConcatenateTest {","// ConcatenateTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Concatenate}.
* It contains ten unit test cases for the {@link Concatenate#concatenate(List)} method.
*/
class ConcatenateTest {

	@Test
	void testConcatenate_EmptyList() {
		List<Object> strings = List.of();
		String expected = """";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithOneString() {
		List<Object> strings = List.of(""a"");
		String expected = ""a"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithTwoStrings() {
		List<Object> strings = List.of(""a"", ""b"");
		String expected = ""ab"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithThreeStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"");
		String expected = ""abc"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithFourStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"");
		String expected = ""abcd"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithFiveStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"", ""e"");
		String expected = ""abcde"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithSixStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"", ""e"", ""f"");
		String expected = ""abcdef"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithSevenStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"");
		String expected = ""abcdefg"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithEightStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"");
		String expected = ""abcdefgh"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithNineStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"");
		String expected = ""abcdefghi"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithTenStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"");
		String expected = ""abcdefghij"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
}

// ConcatenateTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Concatenate}.
* It contains ten unit test cases for the {@link Concatenate#concatenate(List)} method.
*/
class ConcatenateTest {
		
	@Test
	void testConcatenate_EmptyList() {
		List<Object> strings = List.of();
		String expected = """";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithOneString() {
		List<Object> strings = List.of(""a"");
		String expected = ""a"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithTwoStrings() {
		List<Object> strings = List.of(""a"", ""b"");
		String expected = ""ab"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithThreeStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"");
		String expected = ""abc"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithFourStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"");
		String expected = ""abcd"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithFiveStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"", ""e"");
		String expected = ""abcde"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithSixStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"", ""e"", ""f"");
		String expected = ""abcdef"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithSevenStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"");
		String expected = ""abcdefg"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithEightStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"");
		String expected = ""abcdefgh"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
	
	@Test
	void testConcatenate_ListWithNineStrings() {
		List<Object> strings = List.of(""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"");
		String expected = ""abcdefghi"";
		String actual = Concatenate.concatenate(strings);
		assertEquals(expected, actual);
	}
"
cmpl-6tV2xulpBg3bDsm3bcgtQNGydc9KI,/HumanEvalJava/src/main/java/original/id_29.java,44.93272137641907,stop,"// FilterByPrefix.java
package original;

import java.util.ArrayList;
import java.util.List;

class FilterByPrefix {

    /**
     * Filter an input list of strings only for ones that start with a given prefix.
     *
     * > filterByPrefix([], ""a"")
     * []
     * > filterByPrefix([""abc"", ""bcd"", ""cde"", ""array""], ""a"")
     * [""abc"", ""array""]
     * > filterByPrefix([], ""john"")
     * []
     * > filterByPrefix([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx"")
     * [""xxx"", ""xxxAAA"", ""xxx""]
     */
    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {
        List<Object> result = new ArrayList<Object>();
        for (Object string : strings) {
            if (string.toString().startsWith(prefix)) {
                result.add(string);
            }
        }
        return result;
    }
}
","// FilterByPrefixTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterByPrefix}.
* It contains ten unit test cases for the {@link FilterByPrefix#filterByPrefix(List, String)} method.
*/
class FilterByPrefixTest {","// FilterByPrefixTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterByPrefix}.
* It contains ten unit test cases for the {@link FilterByPrefix#filterByPrefix(List, String)} method.
*/
class FilterByPrefixTest {

	@Test
	void testFilterByPrefix_EmptyList_EmptyPrefix() {
		List<Object> input = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, FilterByPrefix.filterByPrefix(input, """"));
	}
	
	@Test
	void testFilterByPrefix_EmptyList_NonEmptyPrefix() {
		List<Object> input = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, FilterByPrefix.filterByPrefix(input, ""a""));
	}
	
	@Test
	void testFilterByPrefix_NonEmptyList_EmptyPrefix() {
		List<Object> input = new ArrayList<Object>();
		input.add(""abc"");
		input.add(""bcd"");
		input.add(""cde"");
		input.add(""array"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(""abc"");
		expected.add(""bcd"");
		expected.add(""cde"");
		expected.add(""array"");
		assertEquals(expected, FilterByPrefix.filterByPrefix(input, """"));
	}
	
	@Test
	void testFilterByPrefix_NonEmptyList_NonEmptyPrefix() {
		List<Object> input = new ArrayList<Object>();
		input.add(""abc"");
		input.add(""bcd"");
		input.add(""cde"");
		input.add(""array"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(""abc"");
		expected.add(""array"");
		assertEquals(expected, FilterByPrefix.filterByPrefix(input, ""a""));
	}
	
	@Test
	void testFilterByPrefix_NonEmptyList_NonEmptyPrefix_NoMatch() {
		List<Object> input = new ArrayList<Object>();
		input.add(""abc"");
		input.add(""bcd"");
		input.add(""cde"");
		input.add(""array"");
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, FilterByPrefix.filterByPrefix(input, ""john""));
	}
	
	@Test
	void testFilterByPrefix_NonEmptyList_NonEmptyPrefix_MultipleMatches() {
		List<Object> input = new ArrayList<Object>();
		input.add(""xxx"");
		input.add(""asd"");
		input.add(""xxy"");
		input.add(""john doe"");
		input.add(""xxxAAA"");
		input.add(""xxx"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(""xxx"");
		expected.add(""xxxAAA"");
		expected.add(""xxx"");
		assertEquals(expected, FilterByPrefix.filterByPrefix(input, ""xxx""));
	}
	
	@Test
	void testFilterByPrefix_NonEmptyList_NonEmptyPrefix_MultipleMatches_NoMatch() {
		List<Object> input = new ArrayList<Object>();
		input.add(""xxx"");
		input.add(""asd"");
		input.add(""xxy"");
		input.add(""john doe"");
		input.add(""xxxAAA"");
		input.add(""xxx"");
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, FilterByPrefix.filterByPrefix(input, ""john""));
	}
	
	@Test
	void testFilterByPrefix_NonEmptyList_NonEmptyPrefix_MultipleMatches_MultipleMatches() {
		List<Object> input = new ArrayList<Object>();
		input.add(""xxx"");
		input.add(""asd"");
		input.add(""xxy"");
		input.add(""john doe"");
		input.add(""xxxAAA"");
		input.add(""xxx"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(""xxx"");
		expected.add(""xxy"");
		expected.add(""xxxAAA"");
		expected.add(""xxx"");
		assertEquals(expected, FilterByPrefix.filterByPrefix(input, ""xx""));
	}
	
	@Test
	void testFilterByPrefix_NonEmptyList_NonEmptyPrefix_MultipleMatches_MultipleMatches_NoMatch() {
		List<Object> input = new ArrayList<Object>();
		input.add(""xxx"");
		input.add(""asd"");
		input.add(""xxy"");
		input.add(""john doe"");
		input.add(""xxxAAA"");
		input.add(""xxx"");
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, FilterByPrefix.filterByPrefix(input, ""john""));
	}
	
	@Test
	void testFilterByPrefix_NonEmptyList_NonEmptyPrefix_MultipleMatches_MultipleMatches_MultipleMatches() {
		List<Object> input = new ArrayList<Object>();
		input.add(""xxx"");
		input.add(""asd"");
		input.add(""xxy"");
		input.add(""john doe"");
		input.add(""xxxAAA"");
		input.add(""xxx"");
		List<Object> expected = new ArrayList<Object>();
		expected.add(""xxx"");
		expected.add(""xxy"");
		expected.add(""xxxAAA"");
		expected.add(""xxx"");
		assertEquals(expected, FilterByPrefix.filterByPrefix(input, ""x""));
	}
	
	@Test
	void testFilterByPrefix_NonEmptyList_NonEmptyPrefix_MultipleMatches_MultipleMatches_MultipleMatches_NoMatch() {
		List<Object> input = new ArrayList<Object>();
		input.add(""xxx"");
		input.add(""asd"");
		input.add(""xxy"");
		input.add(""john doe"");
		input.add(""xxxAAA"");
		input.add(""xxx"");
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, FilterByPrefix.filterByPrefix(input, ""john""));
	}
}"
cmpl-6tV402wJUkh1pxgVcAVIx1nAmt77v,/HumanEvalJava/src/main/java/original/id_3.java,53.39612126350403,length,"// BelowZero.java
package original;

import java.util.List;

class BelowZero {

    /**
     * You're given a list of deposit and withdrawal operations on a bank account that starts with
     * zero balance. Your task is to detect if at any point the balance of account falls below zero, and
     * at that point function should return True. Otherwise, it should return False.
     *
     * > belowZero([1, 2, 3])
     * false
     * > belowZero([1, 2, -4, 5])
     * true
     * > belowZero([])
     * false
     * > belowZero([1, 2, -3, 1, 2, -3])
     * false
     * > belowZero([1, 2, -4, 5, 6])
     * true
     * > belowZero([1, -1, 2, -2, 5, -5, 4, -4])
     * false
     * > belowZero([1, -1, 2, -2, 5, -5, 4, -5])
     * true
     * > belowZero([1, -2, 2, -2, 5, -5, 4, -4])
     * true
     */
    public static Boolean belowZero(List<Object> operations) {
        Double balance = 0.0;
        for (Object operation : operations) {
            if (operation instanceof Double) {
                balance += (Double) operation;
            } else if (operation instanceof Integer) {
                balance += (Integer) operation;
            } else {
                throw new IllegalArgumentException(""Invalid operation type"");
            }
            if (balance < 0) {
                return true;
            }
        }
        return false;
    }
}
","// BelowZeroTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowZero}.
* It contains ten unit test cases for the {@link BelowZero#belowZero(List)} method.
*/
class BelowZeroTest {","// BelowZeroTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowZero}.
* It contains ten unit test cases for the {@link BelowZero#belowZero(List)} method.
*/
class BelowZeroTest {

	@Test
	void testBelowZero() {
		assertFalse(BelowZero.belowZero(List.of(1.0, 2.0, 3.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, 2.0, -4.0, 5.0)));
		assertFalse(BelowZero.belowZero(List.of()));
		assertFalse(BelowZero.belowZero(List.of(1.0, 2.0, -3.0, 1.0, 2.0, -3.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, 2.0, -4.0, 5.0, 6.0)));
		assertFalse(BelowZero.belowZero(List.of(1.0, -1.0, 2.0, -2.0, 5.0, -5.0, 4.0, -4.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, -1.0, 2.0, -2.0, 5.0, -5.0, 4.0, -5.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, -2.0, 2.0, -2.0, 5.0, -5.0, 4.0, -4.0)));
		assertFalse(BelowZero.belowZero(List.of(1, 2, 3)));
		assertTrue(BelowZero.belowZero(List.of(1, 2, -4, 5)));
	}
}

// BelowZeroTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowZero}.
* It contains ten unit test cases for the {@link BelowZero#belowZero(List)} method.
*/
class BelowZeroTest {
		
	@Test
	void testBelowZero() {
		assertFalse(BelowZero.belowZero(List.of(1.0, 2.0, 3.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, 2.0, -4.0, 5.0)));
		assertFalse(BelowZero.belowZero(List.of()));
		assertFalse(BelowZero.belowZero(List.of(1.0, 2.0, -3.0, 1.0, 2.0, -3.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, 2.0, -4.0, 5.0, 6.0)));
		assertFalse(BelowZero.belowZero(List.of(1.0, -1.0, 2.0, -2.0, 5.0, -5.0, 4.0, -4.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, -1.0, 2.0, -2.0, 5.0, -5.0, 4.0, -5.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, -2.0, 2.0, -2.0, 5.0, -5.0, 4.0, -4.0)));
		assertFalse(BelowZero.belowZero(List.of(1, 2, 3)));
		assertTrue(BelowZero.belowZero(List.of(1, 2, -4, 5)));
	}
}

// BelowZeroTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowZero}.
* It contains ten unit test cases for the {@link BelowZero#belowZero(List)} method.
*/
class BelowZeroTest {
		
	@Test
	void testBelowZero() {
		assertFalse(BelowZero.belowZero(List.of(1.0, 2.0, 3.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, 2.0, -4.0, 5.0)));
		assertFalse(BelowZero.belowZero(List.of()));
		assertFalse(BelowZero.belowZero(List.of(1.0, 2.0, -3.0, 1.0, 2.0, -3.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, 2.0, -4.0, 5.0, 6.0)));
		assertFalse(BelowZero.belowZero(List.of(1.0, -1.0, 2.0, -2.0, 5.0, -5.0, 4.0, -4.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, -1.0, 2.0, -2.0, 5.0, -5.0, 4.0, -5.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, -2.0, 2.0, -2.0, 5.0, -5.0, 4.0, -4.0)));
		assertFalse(BelowZero.belowZero(List.of(1, 2, 3)));
		assertTrue(BelowZero.belowZero(List.of(1, 2, -4, 5)));
	}
}

// BelowZeroTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowZero}.
* It contains ten unit test cases for the {@link BelowZero#belowZero(List)} method.
*/
class BelowZeroTest {
		
	@Test
	void testBelowZero() {
		assertFalse(BelowZero.belowZero(List.of(1.0, 2.0, 3.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, 2.0, -4.0, 5.0)));
		assertFalse(BelowZero.belowZero(List.of()));
		assertFalse(BelowZero.belowZero(List.of(1.0, 2.0, -3.0, 1.0, 2.0, -3.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, 2.0, -4.0, 5.0, 6.0)));
		assertFalse(BelowZero.belowZero(List.of(1.0, -1.0, 2.0, -2.0, 5.0, -5.0, 4.0, -4.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, -1.0, 2.0, -2.0, 5.0, -5.0, 4.0, -5.0)));
		assertTrue(BelowZero.belowZero(List.of(1.0, -2.0, 2.0, -2.0, 5.0, -5.0, 4.0, -4.0)));
		assertFalse(BelowZero.belowZero(List.of(1, 2, 3)));
		assertTrue(BelowZero.belowZero(List.of(1, 2, -4, 5)));
	}
}

// BelowZeroTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowZero}.
* It contains ten unit test cases for the {@link BelowZero#belowZero(List)} method.
*/
class BelowZeroTest {
		
	@Test
	void testBelowZero() {
		assertFalse(BelowZero.belowZero(List.of(1.0, 2.0, 3.0)));
		assertTrue(BelowZero.belowZero"
cmpl-6tV53KjgIxKnIkqTRq5GJDnYsDaV2,/HumanEvalJava/src/main/java/original/id_30.java,51.9010694026947,stop,"// GetPositive.java
package original;

import java.util.ArrayList;
import java.util.List;

class GetPositive {

    /**
     * Return only positive numbers in the list.
     *
     * > getPositive([-1, 2, -4, 5, 6])
     * [2, 5, 6]
     * > getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * [5, 3, 2, 3, 9, 123, 1]
     * > getPositive([-1, -2, 4, 5, 6])
     * [4, 5, 6]
     * > getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])
     * [5, 3, 2, 3, 3, 9, 123, 1]
     * > getPositive([-1, -2])
     * []
     * > getPositive([])
     * []
     */
    public static List<Object> getPositive(List<Object> l) {
        List<Object> result = new ArrayList<Object>();
        for (Object value : l) {
            if (value instanceof Integer) {
                int i = (Integer) value;
                if (i > 0) {
                    result.add(i);
                }
            }
        }
        return result;
    }
}
","// GetPositiveTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPositive}.
* It contains ten unit test cases for the {@link GetPositive#getPositive(List)} method.
*/
class GetPositiveTest {","// GetPositiveTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPositive}.
* It contains ten unit test cases for the {@link GetPositive#getPositive(List)} method.
*/
class GetPositiveTest {

	@Test
	void testGetPositive() {
		List<Object> l = new ArrayList<Object>();
		l.add(-1);
		l.add(2);
		l.add(-4);
		l.add(5);
		l.add(6);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(5);
		expected.add(6);
		assertEquals(expected, GetPositive.getPositive(l));
	}
	
	@Test
	void testGetPositive2() {
		List<Object> l = new ArrayList<Object>();
		l.add(5);
		l.add(3);
		l.add(-5);
		l.add(2);
		l.add(-3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		l.add(1);
		l.add(-10);
		List<Object> expected = new ArrayList<Object>();
		expected.add(5);
		expected.add(3);
		expected.add(2);
		expected.add(3);
		expected.add(9);
		expected.add(123);
		expected.add(1);
		assertEquals(expected, GetPositive.getPositive(l));
	}
	
	@Test
	void testGetPositive3() {
		List<Object> l = new ArrayList<Object>();
		l.add(-1);
		l.add(-2);
		l.add(4);
		l.add(5);
		l.add(6);
		List<Object> expected = new ArrayList<Object>();
		expected.add(4);
		expected.add(5);
		expected.add(6);
		assertEquals(expected, GetPositive.getPositive(l));
	}
	
	@Test
	void testGetPositive4() {
		List<Object> l = new ArrayList<Object>();
		l.add(5);
		l.add(3);
		l.add(-5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		l.add(1);
		l.add(-10);
		List<Object> expected = new ArrayList<Object>();
		expected.add(5);
		expected.add(3);
		expected.add(2);
		expected.add(3);
		expected.add(3);
		expected.add(9);
		expected.add(123);
		expected.add(1);
		assertEquals(expected, GetPositive.getPositive(l));
	}
	
	@Test
	void testGetPositive5() {
		List<Object> l = new ArrayList<Object>();
		l.add(-1);
		l.add(-2);
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, GetPositive.getPositive(l));
	}
	
	@Test
	void testGetPositive6() {
		List<Object> l = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, GetPositive.getPositive(l));
	}
	
	@Test
	void testGetPositive7() {
		List<Object> l = new ArrayList<Object>();
		l.add(5);
		l.add(3);
		l.add(-5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		l.add(1);
		l.add(-10);
		List<Object> expected = new ArrayList<Object>();
		expected.add(5);
		expected.add(3);
		expected.add(2);
		expected.add(3);
		expected.add(3);
		expected.add(9);
		expected.add(123);
		expected.add(1);
		assertEquals(expected, GetPositive.getPositive(l));
	}
	
	@Test
	void testGetPositive8() {
		List<Object> l = new ArrayList<Object>();
		l.add(-1);
		l.add(-2);
		l.add(4);
		l.add(5);
		l.add(6);
		List<Object> expected = new ArrayList<Object>();
		expected.add(4);
		expected.add(5);
		expected.add(6);
		assertEquals(expected, GetPositive.getPositive(l));
	}
	
	@Test
	void testGetPositive9() {
		List<Object> l = new ArrayList<Object>();
		l.add(5);
		l.add(3);
		l.add(-5);
		l.add(2);
		l.add(-3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		l.add(1);
		l.add(-10);
		List<Object> expected = new ArrayList<Object>();
		expected.add(5);
		expected.add(3);
		expected.add(2);
		expected.add(3);
		expected.add(9);
		expected.add(123);
		expected.add(1);
		assertEquals(expected, GetPositive.getPositive(l));
	}
	
	@Test
	void testGetPositive10() {
		List<Object> l = new ArrayList<Object>();
		l.add(-1);
		l.add(-2);
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, GetPositive.getPositive(l));
	}
}"
cmpl-6tV669zNdCKaouerQD41qSbWCUHsK,/HumanEvalJava/src/main/java/original/id_31.java,44.662209033966064,length,"// IsPrime.java
package original;

class IsPrime {

    /**
     * Return true if a given number is prime, and false otherwise.
     *
     * > isPrime(6)
     * false
     * > isPrime(101)
     * true
     * > isPrime(11)
     * true
     * > isPrime(13441)
     * true
     * > isPrime(61)
     * true
     * > isPrime(4)
     * false
     * > isPrime(1)
     * false
     * > isPrime(5)
     * true
     * > isPrime(11)
     * true
     * > isPrime(17)
     * true
     * > isPrime(85)
     * false
     * > isPrime(77)
     * false
     * > isPrime(255379)
     * false
     */
    public static Boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i < n; i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}
","// IsPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPrime}.
* It contains ten unit test cases for the {@link IsPrime#isPrime(int)} method.
*/
class IsPrimeTest {","// IsPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPrime}.
* It contains ten unit test cases for the {@link IsPrime#isPrime(int)} method.
*/
class IsPrimeTest {

		@Test
		void testIsPrime() {
			assertFalse(IsPrime.isPrime(6));
			assertTrue(IsPrime.isPrime(101));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(13441));
			assertTrue(IsPrime.isPrime(61));
			assertFalse(IsPrime.isPrime(4));
			assertFalse(IsPrime.isPrime(1));
			assertTrue(IsPrime.isPrime(5));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(17));
			assertFalse(IsPrime.isPrime(85));
			assertFalse(IsPrime.isPrime(77));
			assertFalse(IsPrime.isPrime(255379));
		}
}

// IsPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPrime}.
* It contains ten unit test cases for the {@link IsPrime#isPrime(int)} method.
*/
class IsPrimeTest {
		
		@Test
		void testIsPrime() {
			assertFalse(IsPrime.isPrime(6));
			assertTrue(IsPrime.isPrime(101));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(13441));
			assertTrue(IsPrime.isPrime(61));
			assertFalse(IsPrime.isPrime(4));
			assertFalse(IsPrime.isPrime(1));
			assertTrue(IsPrime.isPrime(5));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(17));
			assertFalse(IsPrime.isPrime(85));
			assertFalse(IsPrime.isPrime(77));
			assertFalse(IsPrime.isPrime(255379));
		}
}

// IsPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPrime}.
* It contains ten unit test cases for the {@link IsPrime#isPrime(int)} method.
*/
class IsPrimeTest {
		
		@Test
		void testIsPrime() {
			assertFalse(IsPrime.isPrime(6));
			assertTrue(IsPrime.isPrime(101));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(13441));
			assertTrue(IsPrime.isPrime(61));
			assertFalse(IsPrime.isPrime(4));
			assertFalse(IsPrime.isPrime(1));
			assertTrue(IsPrime.isPrime(5));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(17));
			assertFalse(IsPrime.isPrime(85));
			assertFalse(IsPrime.isPrime(77));
			assertFalse(IsPrime.isPrime(255379));
		}
}

// IsPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPrime}.
* It contains ten unit test cases for the {@link IsPrime#isPrime(int)} method.
*/
class IsPrimeTest {
		
		@Test
		void testIsPrime() {
			assertFalse(IsPrime.isPrime(6));
			assertTrue(IsPrime.isPrime(101));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(13441));
			assertTrue(IsPrime.isPrime(61));
			assertFalse(IsPrime.isPrime(4));
			assertFalse(IsPrime.isPrime(1));
			assertTrue(IsPrime.isPrime(5));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(17));
			assertFalse(IsPrime.isPrime(85));
			assertFalse(IsPrime.isPrime(77));
			assertFalse(IsPrime.isPrime(255379));
		}
}

// IsPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPrime}.
* It contains ten unit test cases for the {@link IsPrime#isPrime(int)} method.
*/
class IsPrimeTest {
		
		@Test
		void testIsPrime() {
			assertFalse(IsPrime.isPrime(6));
			assertTrue(IsPrime.isPrime(101));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(13441));
			assertTrue(IsPrime.isPrime(61));
			assertFalse(IsPrime.isPrime(4));
			assertFalse(IsPrime.isPrime(1));
			assertTrue(IsPrime.isPrime(5));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(17));
			assertFalse(IsPrime.isPrime(85));
			assertFalse(IsPrime.isPrime(77));
			assertFalse(IsPrime.isPrime(255379));
		}
}

// IsPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPrime}.
* It contains ten unit test cases for the {@link IsPrime#isPrime(int)} method.
*/
class IsPrimeTest {
		
		@Test
		void testIsPrime() {
			assertFalse(IsPrime.isPrime(6));
			assertTrue(IsPrime.isPrime(101));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(13441));
			assertTrue(IsPrime.isPrime(61));
			assertFalse(IsPrime.isPrime(4));
			assertFalse(IsPrime.isPrime(1));
			assertTrue(IsPrime.isPrime(5));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(17));
			assertFalse(IsPrime.isPrime(85));
			assertFalse(IsPrime.isPrime(77));
			assertFalse(IsPrime.isPrime(255379));
		}
}

// IsPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPrime}.
* It contains ten unit test cases for the {@link IsPrime#isPrime(int)} method.
*/
class IsPrimeTest {
		
		@Test
		void testIsPrime() {
			assertFalse(IsPrime.isPrime(6));
			assertTrue(IsPrime.isPrime(101));
			assertTrue(IsPrime.isPrime(11));
			assertTrue(IsPrime.isPrime(13441));
			assertTrue(IsPrime.isPrime(61));
			assertFalse(IsPrime.isPrime(4));
			assertFalse(IsPrime.isPrime(1));
			assertTrue(IsPrime.isPrime(5));
			assert"
cmpl-6tV79U38829tTvgIN7DrjJCn4g420,/HumanEvalJava/src/main/java/original/id_33.java,59.47724103927612,length,"// SortThird.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class SortThird {

    /**
     * This function takes a list l and returns a list l' such that
     * l' is identical to l in the indices that are not divisible by three, while its values at the indicies that are divisible by three are equal
     * to the values of the corresponding indices of l, but sorted.
     * > sortThird([1, 2, 3])
     * [1, 2, 3]
     * > sortThird([5, 6, 3, 4, 8, 9, 2])
     * [2, 6, 3, 4, 8, 9, 5]
     * > sortThird([1, 2, 3])
     * [1, 2, 3]
     * > sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * [1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10]
     * > sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])
     * [-10, 8, -12, 3, 23, 2, 4, 11, 12, 5]
     * > sortThird([5, 6, 3, 4, 8, 9, 2])
     * [2, 6, 3, 4, 8, 9, 5]
     * > sortThird([5, 8, 3, 4, 6, 9, 2])
     * [2, 8, 3, 4, 6, 9, 5]
     * > sortThird([5, 6, 9, 4, 8, 3, 2])
     * [2, 6, 9, 4, 8, 3, 5]
     * > sortThird([5, 6, 3, 4, 8, 9, 2, 1])
     * [2, 6, 3, 4, 8, 9, 5, 1]
     */
    public static List<Integer> sortThird(List<Integer> l) {
        List<Integer> l2 = new ArrayList<Integer>(l);
        for (int i = 0; i < l.size(); i++) {
            if (i % 3 == 0) {
                List<Integer> subl = new ArrayList<Integer>();
                for (int j = 0; j < l.size(); j++) {
                    if (j % 3 == 0) {
                        subl.add(l.get(j));
                    }
                }
                Collections.sort(subl);
                l2.set(i, subl.get(i / 3));
            }
        }
        return l2;
    }
}
","// SortThirdTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortThird}.
* It contains ten unit test cases for the {@link SortThird#sortThird(List)} method.
*/
class SortThirdTest {","// SortThirdTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortThird}.
* It contains ten unit test cases for the {@link SortThird#sortThird(List)} method.
*/
class SortThirdTest {

	/**
	* Test case for {@link SortThird#sortThird(List)} method.
	* It tests the method with a list of size 3.
	*/
	@Test
	void testSortThird1() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(1);
		l.add(2);
		l.add(3);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(1);
		l2.add(2);
		l2.add(3);
		assertEquals(l2, SortThird.sortThird(l));
	}
	
	/**
	* Test case for {@link SortThird#sortThird(List)} method.
	* It tests the method with a list of size 7.
	*/
	@Test
	void testSortThird2() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(6);
		l.add(3);
		l.add(4);
		l.add(8);
		l.add(9);
		l.add(2);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(2);
		l2.add(6);
		l2.add(3);
		l2.add(4);
		l2.add(8);
		l2.add(9);
		l2.add(5);
		assertEquals(l2, SortThird.sortThird(l));
	}
	
	/**
	* Test case for {@link SortThird#sortThird(List)} method.
	* It tests the method with a list of size 3.
	*/
	@Test
	void testSortThird3() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(1);
		l.add(2);
		l.add(3);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(1);
		l2.add(2);
		l2.add(3);
		assertEquals(l2, SortThird.sortThird(l));
	}
	
	/**
	* Test case for {@link SortThird#sortThird(List)} method.
	* It tests the method with a list of size 11.
	*/
	@Test
	void testSortThird4() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(-5);
		l.add(2);
		l.add(-3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		l.add(1);
		l.add(-10);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(1);
		l2.add(3);
		l2.add(-5);
		l2.add(2);
		l2.add(-3);
		l2.add(3);
		l2.add(5);
		l2.add(0);
		l2.add(123);
		l2.add(9);
		l2.add(-10);
		assertEquals(l2, SortThird.sortThird(l));
	}
	
	/**
	* Test case for {@link SortThird#sortThird(List)} method.
	* It tests the method with a list of size 10.
	*/
	@Test
	void testSortThird5() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(8);
		l.add(-12);
		l.add(4);
		l.add(23);
		l.add(2);
		l.add(3);
		l.add(11);
		l.add(12);
		l.add(-10);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(-10);
		l2.add(8);
		l2.add(-12);
		l2.add(3);
		l2.add(23);
		l2.add(2);
		l2.add(4);
		l2.add(11);
		l2.add(12);
		l2.add(5);
		assertEquals(l2, SortThird.sortThird(l));
	}
	
	/**
	* Test case for {@link SortThird#sortThird(List)} method.
	* It tests the method with a list of size 7.
	*/
	@Test
	void testSortThird6() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(6);
		l.add(3);
		l.add(4);
		l.add(8);
		l.add(9);
		l.add(2);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(2);
		l2.add(6);
		l2.add(3);
		l2.add(4);
		l2.add(8);
		l2.add(9);
		l2.add(5);
		assertEquals(l2, SortThird.sortThird(l));
	}
	
	/**
	* Test case for {@link SortThird#sortThird(List)} method.
	* It tests the method with a list of size 7.
	*/
	@Test
	void testSortThird7() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(8);
		l.add(3);
		l.add(4);
		l.add(6);
		l.add(9);
		l.add(2);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(2);
		l2.add(8);
		l2.add(3);
		l2.add(4);
		l2.add(6);
		l2.add(9);
		l2.add(5);
		assertEquals(l2, SortThird.sortThird(l));
	}
	
	/**
	* Test case for {@link SortThird#sortThird(List)} method.
	* It tests the method with a list of size 7.
	*/
	@Test
	void testSortThird8() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(6);
		l.add(9);
		l.add(4);
		l.add(8);
		l.add(3);
		l.add(2);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(2);
		l2.add(6);
		l2.add(9);
		l2.add(4);
		l2.add(8);
		l2.add(3);
		l2.add(5);
		assertEquals(l2, SortThird.sortThird(l));
	}
	
	/**
	* Test case for {@link SortThird#sortThird(List)} method.
	* It tests the method with a list of size 8.
	*/
	@Test
	void testSortThird9() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(6);
		l."
cmpl-6tV8CsipVnz3EqJ61HMF0PrgQOlPf,/HumanEvalJava/src/main/java/original/id_34.java,47.540748596191406,stop,"// Unique.java
package original;

import java.util.*;

class Unique {

    /**
     * Return sorted unique elements in a list
     *
     * > unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
     * [0, 2, 3, 5, 9, 123]
     * > unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
     * [0, 2, 3, 5, 9, 123]
     */
    public static List<Integer> unique(List<Integer> l) {
        Set<Integer> set = new HashSet<Integer>();
        for (Integer i : l) {
            set.add(i);
        }
        List<Integer> result = new ArrayList<Integer>(set);
        Collections.sort(result);
        return result;
    }
}
","// UniqueTest.java
package original;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Unique}.
* It contains ten unit test cases for the {@link Unique#unique(List)} method.
*/
class UniqueTest {","// UniqueTest.java
package original;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Unique}.
* It contains ten unit test cases for the {@link Unique#unique(List)} method.
*/
class UniqueTest {

	@Test
	void testUnique() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(0);
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(9);
		expected.add(123);
		assertEquals(expected, Unique.unique(l));
	}
	
	@Test
	void testUnique2() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(0);
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(9);
		expected.add(123);
		assertEquals(expected, Unique.unique(l));
	}
	
	@Test
	void testUnique3() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(0);
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(9);
		expected.add(123);
		assertEquals(expected, Unique.unique(l));
	}
	
	@Test
	void testUnique4() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(0);
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(9);
		expected.add(123);
		assertEquals(expected, Unique.unique(l));
	}
	
	@Test
	void testUnique5() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(0);
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(9);
		expected.add(123);
		assertEquals(expected, Unique.unique(l));
	}
	
	@Test
	void testUnique6() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(0);
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(9);
		expected.add(123);
		assertEquals(expected, Unique.unique(l));
	}
	
	@Test
	void testUnique7() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(0);
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(9);
		expected.add(123);
		assertEquals(expected, Unique.unique(l));
	}
	
	@Test
	void testUnique8() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(0);
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(9);
		expected.add(123);
		assertEquals(expected, Unique.unique(l));
	}
	
	@Test
	void testUnique9() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(0);
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(9);
		expected.add(123);
		assertEquals(expected, Unique.unique(l));
	}
	
	@Test
	void testUnique10() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(0);
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(9);
		expected.add(123);
		assertEquals(expected, Unique.unique(l));
	}
}"
cmpl-6tV9FW9fn9vW4rjuv4l1FQNf6iZti,/HumanEvalJava/src/main/java/original/id_35.java,48.16113305091858,length,"// MaxElement.java
package original;

import java.util.List;

class MaxElement {

    /**
     * Return the maximum element in the list.
     *
     * > maxElement([1, 2, 3])
     * 3
     * > maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * 123
     * > maxElement([1, 2, 3])
     * 3
     * > maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])
     * 124
     */
    public static int maxElement(List<Integer> l) {
        int max = Integer.MIN_VALUE;
        for (Integer i : l) {
            if (i > max) {
                max = i;
            }
        }
        return max;
    }
}
","// MaxElementTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxElement}.
* It contains ten unit test cases for the {@link MaxElement#maxElement(List)} method.
*/
class MaxElementTest {","// MaxElementTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxElement}.
* It contains ten unit test cases for the {@link MaxElement#maxElement(List)} method.
*/
class MaxElementTest {

	@Test
	void testMaxElement1() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement2() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);
		assertEquals(123, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement3() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement4() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10);
		assertEquals(124, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement5() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement6() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 125, 1, -10);
		assertEquals(125, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement7() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement8() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 126, 1, -10);
		assertEquals(126, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement9() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement10() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 127, 1, -10);
		assertEquals(127, MaxElement.maxElement(l));
	}
}

// MaxElementTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxElement}.
* It contains ten unit test cases for the {@link MaxElement#maxElement(List)} method.
*/
class MaxElementTest {
		
	@Test
	void testMaxElement1() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement2() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);
		assertEquals(123, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement3() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement4() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10);
		assertEquals(124, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement5() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement6() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 125, 1, -10);
		assertEquals(125, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement7() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement8() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 126, 1, -10);
		assertEquals(126, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement9() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement10() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 127, 1, -10);
		assertEquals(127, MaxElement.maxElement(l));
	}
}

// MaxElementTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MaxElement}.
* It contains ten unit test cases for the {@link MaxElement#maxElement(List)} method.
*/
class MaxElementTest {
		
	@Test
	void testMaxElement1() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement2() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);
		assertEquals(123, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement3() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement4() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10);
		assertEquals(124, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement5() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement6() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 125, 1, -10);
		assertEquals(125, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement7() {
		List<Integer> l = List.of(1, 2, 3);
		assertEquals(3, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement8() {
		List<Integer> l = List.of(5, 3, -5, 2, -3, 3, 9, 0, 126, 1, -10);
		assertEquals(126, MaxElement.maxElement(l));
	}
	
	@Test
	void testMaxElement9() {
		List<Integer>"
cmpl-6tVAI5Uu8NhrGeutHhRYaxObJus5f,/HumanEvalJava/src/main/java/original/id_36.java,18.07720375061035,stop,"// FizzBuzz.java
package original;

class FizzBuzz {

    /**
     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
     *
     * > fizzBuzz(50)
     * 0
     * > fizzBuzz(78)
     * 2
     * > fizzBuzz(79)
     * 3
     * > fizzBuzz(50)
     * 0
     * > fizzBuzz(78)
     * 2
     * > fizzBuzz(79)
     * 3
     * > fizzBuzz(100)
     * 3
     * > fizzBuzz(200)
     * 6
     * > fizzBuzz(4000)
     * 192
     * > fizzBuzz(10000)
     * 639
     * > fizzBuzz(100000)
     * 8026
     */
    public static int fizzBuzz(int n) {
        int count = 0;
        for (int i = 1; i < n; i++) {
            if (i % 11 == 0 || i % 13 == 0) {
                String s = Integer.toString(i);
                for (int j = 0; j < s.length(); j++) {
                    if (s.charAt(j) == '7') {
                        count++;
                    }
                }
            }
        }
        return count;
    }
}
","// FizzBuzzTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FizzBuzz}.
* It contains ten unit test cases for the {@link FizzBuzz#fizzBuzz(int)} method.
*/
class FizzBuzzTest {","// FizzBuzzTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FizzBuzz}.
* It contains ten unit test cases for the {@link FizzBuzz#fizzBuzz(int)} method.
*/
class FizzBuzzTest {

	@Test
	void testFizzBuzz() {
		assertEquals(0, FizzBuzz.fizzBuzz(50));
		assertEquals(2, FizzBuzz.fizzBuzz(78));
		assertEquals(3, FizzBuzz.fizzBuzz(79));
		assertEquals(0, FizzBuzz.fizzBuzz(50));
		assertEquals(2, FizzBuzz.fizzBuzz(78));
		assertEquals(3, FizzBuzz.fizzBuzz(79));
		assertEquals(3, FizzBuzz.fizzBuzz(100));
		assertEquals(6, FizzBuzz.fizzBuzz(200));
		assertEquals(192, FizzBuzz.fizzBuzz(4000));
		assertEquals(639, FizzBuzz.fizzBuzz(10000));
		assertEquals(8026, FizzBuzz.fizzBuzz(100000));
	}
}

// FizzBuzz.java
package refactored;

class FizzBuzz {

    /**
     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
     *
     * > fizzBuzz(50)
     * 0
     * > fizzBuzz(78)
     * 2
     * > fizzBuzz(79)
     * 3
     * > fizzBuzz(50)
     * 0
     * > fizzBuzz(78)
     * 2
     * > fizzBuzz(79)
     * 3
     * > fizzBuzz(100)
     * 3
     * > fizzBuzz(200)
     * 6
     * > fizzBuzz(4000)
     * 192
     * > fizzBuzz(10000)
     * 639
     * > fizzBuzz(100000)
     * 8026
     */
    public static int fizzBuzz(int n) {
        int count = 0;
        for (int i = 1; i < n; i++) {
            if (i % 11 == 0 || i % 13 == 0) {
                String s = Integer.toString(i);
                for (int j = 0; j < s.length(); j++) {
                    if (s.charAt(j) == '7') {
                        count++;
                    }
                }
            }
        }
        return count;
    }
}

// FizzBuzzTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FizzBuzz}.
* It contains ten unit test cases for the {@link FizzBuzz#fizzBuzz(int)} method.
*/
class FizzBuzzTest {
		
	@Test
	void testFizzBuzz() {
		assertEquals(0, FizzBuzz.fizzBuzz(50));
		assertEquals(2, FizzBuzz.fizzBuzz(78));
		assertEquals(3, FizzBuzz.fizzBuzz(79));
		assertEquals(0, FizzBuzz.fizzBuzz(50));
		assertEquals(2, FizzBuzz.fizzBuzz(78));
		assertEquals(3, FizzBuzz.fizzBuzz(79));
		assertEquals(3, FizzBuzz.fizzBuzz(100));
		assertEquals(6, FizzBuzz.fizzBuzz(200));
		assertEquals(192, FizzBuzz.fizzBuzz(4000));
		assertEquals(639, FizzBuzz.fizzBuzz(10000));
		assertEquals(8026, FizzBuzz.fizzBuzz(100000));
	}
}"
cmpl-6tVBLr04pKsYpDFCF2vexsSnVekc0,/HumanEvalJava/src/main/java/original/id_37.java,55.22620391845703,length,"// SortEven.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class SortEven {

    /**
     * This function takes a list l and returns a list l' such that
     * l' is identical to l in the odd indices, while its values at the even indices are equal
     * to the values of the even indices of l, but sorted.
     *
     * > sortEven([1, 2, 3])
     * [1, 2, 3]
     * > sortEven([5, 6, 3, 4])
     * [3, 6, 5, 4]
     * > sortEven([1, 2, 3])
     * [1, 2, 3]
     * > sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]
     * > sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])
     * [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]
     */
    public static List<Integer> sortEven(List<Integer> l) {
        List<Integer> l2 = new ArrayList<Integer>(l);
        for (int i = 0; i < l.size(); i++) {
            if (i % 2 == 0) {
                List<Integer> subl = new ArrayList<Integer>();
                for (int j = 0; j < l.size(); j++) {
                    if (j % 2 == 0) {
                        subl.add(l.get(j));
                    }
                }
                Collections.sort(subl);
                l2.set(i, subl.get(i / 2));
            }
        }
        return l2;
    }
}
","// SortEvenTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortEven}.
* It contains ten unit test cases for the {@link SortEven#sortEven(List)} method.
*/
class SortEvenTest {","// SortEvenTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortEven}.
* It contains ten unit test cases for the {@link SortEven#sortEven(List)} method.
*/
class SortEvenTest {

	/**
	* Test case for {@link SortEven#sortEven(List)} method.
	* It tests the method with a list of three elements.
	*/
	@Test
	void testSortEven1() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(1);
		l.add(2);
		l.add(3);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(1);
		l2.add(2);
		l2.add(3);
		assertEquals(l2, SortEven.sortEven(l));
	}
	
	/**
	* Test case for {@link SortEven#sortEven(List)} method.
	* It tests the method with a list of four elements.
	*/
	@Test
	void testSortEven2() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(6);
		l.add(3);
		l.add(4);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(3);
		l2.add(6);
		l2.add(5);
		l2.add(4);
		assertEquals(l2, SortEven.sortEven(l));
	}
	
	/**
	* Test case for {@link SortEven#sortEven(List)} method.
	* It tests the method with a list of three elements.
	*/
	@Test
	void testSortEven3() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(1);
		l.add(2);
		l.add(3);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(1);
		l2.add(2);
		l2.add(3);
		assertEquals(l2, SortEven.sortEven(l));
	}
	
	/**
	* Test case for {@link SortEven#sortEven(List)} method.
	* It tests the method with a list of eleven elements.
	*/
	@Test
	void testSortEven4() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(-5);
		l.add(2);
		l.add(-3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		l.add(1);
		l.add(-10);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(-10);
		l2.add(3);
		l2.add(-5);
		l2.add(2);
		l2.add(-3);
		l2.add(3);
		l2.add(5);
		l2.add(0);
		l2.add(9);
		l2.add(1);
		l2.add(123);
		assertEquals(l2, SortEven.sortEven(l));
	}
	
	/**
	* Test case for {@link SortEven#sortEven(List)} method.
	* It tests the method with a list of ten elements.
	*/
	@Test
	void testSortEven5() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(8);
		l.add(-12);
		l.add(4);
		l.add(23);
		l.add(2);
		l.add(3);
		l.add(11);
		l.add(12);
		l.add(-10);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(-12);
		l2.add(8);
		l2.add(3);
		l2.add(4);
		l2.add(5);
		l2.add(2);
		l2.add(12);
		l2.add(11);
		l2.add(23);
		l2.add(-10);
		assertEquals(l2, SortEven.sortEven(l));
	}
	
	/**
	* Test case for {@link SortEven#sortEven(List)} method.
	* It tests the method with a list of three elements.
	*/
	@Test
	void testSortEven6() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(1);
		l.add(2);
		l.add(3);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(1);
		l2.add(2);
		l2.add(3);
		assertEquals(l2, SortEven.sortEven(l));
	}
	
	/**
	* Test case for {@link SortEven#sortEven(List)} method.
	* It tests the method with a list of four elements.
	*/
	@Test
	void testSortEven7() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(6);
		l.add(3);
		l.add(4);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(3);
		l2.add(6);
		l2.add(5);
		l2.add(4);
		assertEquals(l2, SortEven.sortEven(l));
	}
	
	/**
	* Test case for {@link SortEven#sortEven(List)} method.
	* It tests the method with a list of three elements.
	*/
	@Test
	void testSortEven8() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(1);
		l.add(2);
		l.add(3);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(1);
		l2.add(2);
		l2.add(3);
		assertEquals(l2, SortEven.sortEven(l));
	}
	
	/**
	* Test case for {@link SortEven#sortEven(List)} method.
	* It tests the method with a list of eleven elements.
	*/
	@Test
	void testSortEven9() {
		List<Integer> l = new ArrayList<Integer>();
		l.add(5);
		l.add(3);
		l.add(-5);
		l.add(2);
		l.add(-3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		l.add(1);
		l.add(-10);
		List<Integer> l2 = new ArrayList<Integer>();
		l2.add(-10);
		l2.add(3);
		l2.add(-5);
		l2.add(2);
		l2.add(-3);
		l2.add(3);
		l2.add(5);
		l2.add(0);
		l2.add(9);
		l2.add(1);
		l2.add(123);
		assertEquals(l2, SortEven.sortEven(l));
	}
	
	/**
	* Test case for {@link SortEven#sortEven(List)} method.
	* It tests the method with a list of ten elements.
	*/
"
cmpl-6tVCOyDYP5J1H0a7C7ypRJqGmIXSg,/HumanEvalJava/src/main/java/original/id_39.java,75.19097208976746,length,"// PrimeFib.java
package original;

class PrimeFib {

    /**
     * Returns n-th number that is a Fibonacci number and it's also prime.
     *
     * > primeFib(1)
     * 2
     * > primeFib(2)
     * 3
     * > primeFib(3)
     * 5
     * > primeFib(4)
     * 13
     * > primeFib(5)
     * 89
     * > primeFib(1)
     * 2
     * > primeFib(2)
     * 3
     * > primeFib(3)
     * 5
     * > primeFib(4)
     * 13
     * > primeFib(5)
     * 89
     * > primeFib(6)
     * 233
     * > primeFib(7)
     * 1597
     * > primeFib(8)
     * 28657
     * > primeFib(9)
     * 514229
     * > primeFib(10)
     * 433494437
     */
    public static int primeFib(int n) {
        int a = 1;
        int b = 1;
        int c = 0;
        int count = 0;
        while (count < n) {
            c = a + b;
            a = b;
            b = c;
            if (isPrime(c)) {
                count++;
            }
        }
        return c;
    }

    private static Boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i < n; i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}
","// PrimeFibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeFib}.
* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.
*/
class PrimeFibTest {","// PrimeFibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeFib}.
* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.
*/
class PrimeFibTest {

	@Test
	void testPrimeFib1() {
		assertEquals(2, PrimeFib.primeFib(1));
	}
	
	@Test
	void testPrimeFib2() {
		assertEquals(3, PrimeFib.primeFib(2));
	}
	
	@Test
	void testPrimeFib3() {
		assertEquals(5, PrimeFib.primeFib(3));
	}
	
	@Test
	void testPrimeFib4() {
		assertEquals(13, PrimeFib.primeFib(4));
	}
	
	@Test
	void testPrimeFib5() {
		assertEquals(89, PrimeFib.primeFib(5));
	}
	
	@Test
	void testPrimeFib6() {
		assertEquals(233, PrimeFib.primeFib(6));
	}
	
	@Test
	void testPrimeFib7() {
		assertEquals(1597, PrimeFib.primeFib(7));
	}
	
	@Test
	void testPrimeFib8() {
		assertEquals(28657, PrimeFib.primeFib(8));
	}
	
	@Test
	void testPrimeFib9() {
		assertEquals(514229, PrimeFib.primeFib(9));
	}
	
	@Test
	void testPrimeFib10() {
		assertEquals(433494437, PrimeFib.primeFib(10));
	}
}

// PrimeFibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeFib}.
* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.
*/
class PrimeFibTest {
		
	@Test
	void testPrimeFib1() {
		assertEquals(2, PrimeFib.primeFib(1));
	}
	
	@Test
	void testPrimeFib2() {
		assertEquals(3, PrimeFib.primeFib(2));
	}
	
	@Test
	void testPrimeFib3() {
		assertEquals(5, PrimeFib.primeFib(3));
	}
	
	@Test
	void testPrimeFib4() {
		assertEquals(13, PrimeFib.primeFib(4));
	}
	
	@Test
	void testPrimeFib5() {
		assertEquals(89, PrimeFib.primeFib(5));
	}
	
	@Test
	void testPrimeFib6() {
		assertEquals(233, PrimeFib.primeFib(6));
	}
	
	@Test
	void testPrimeFib7() {
		assertEquals(1597, PrimeFib.primeFib(7));
	}
	
	@Test
	void testPrimeFib8() {
		assertEquals(28657, PrimeFib.primeFib(8));
	}
	
	@Test
	void testPrimeFib9() {
		assertEquals(514229, PrimeFib.primeFib(9));
	}
	
	@Test
	void testPrimeFib10() {
		assertEquals(433494437, PrimeFib.primeFib(10));
	}
}

// PrimeFibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeFib}.
* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.
*/
class PrimeFibTest {
		
	@Test
	void testPrimeFib1() {
		assertEquals(2, PrimeFib.primeFib(1));
	}
	
	@Test
	void testPrimeFib2() {
		assertEquals(3, PrimeFib.primeFib(2));
	}
	
	@Test
	void testPrimeFib3() {
		assertEquals(5, PrimeFib.primeFib(3));
	}
	
	@Test
	void testPrimeFib4() {
		assertEquals(13, PrimeFib.primeFib(4));
	}
	
	@Test
	void testPrimeFib5() {
		assertEquals(89, PrimeFib.primeFib(5));
	}
	
	@Test
	void testPrimeFib6() {
		assertEquals(233, PrimeFib.primeFib(6));
	}
	
	@Test
	void testPrimeFib7() {
		assertEquals(1597, PrimeFib.primeFib(7));
	}
	
	@Test
	void testPrimeFib8() {
		assertEquals(28657, PrimeFib.primeFib(8));
	}
	
	@Test
	void testPrimeFib9() {
		assertEquals(514229, PrimeFib.primeFib(9));
	}
	
	@Test
	void testPrimeFib10() {
		assertEquals(433494437, PrimeFib.primeFib(10));
	}
}

// PrimeFibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeFib}.
* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.
*/
class PrimeFibTest {
		
	@Test
	void testPrimeFib1() {
		assertEquals(2, PrimeFib.primeFib(1));
	}
	
	@Test
	void testPrimeFib2() {
		assertEquals(3, PrimeFib.primeFib(2));
	}
	
	@Test
	void testPrimeFib3() {
		assertEquals(5, PrimeFib.primeFib(3));
	}
	
	@Test
	void testPrimeFib4() {
		assertEquals(13, PrimeFib.primeFib(4));
	}
	
	@Test
	void testPrimeFib5() {
		assertEquals(89, PrimeFib.primeFib(5));
	}
	
	@Test
	void testPrimeFib6() {
		assertEquals(233, PrimeFib.primeFib(6));
	}
	
	@Test
	void testPrimeFib7() {
		assertEquals(1597, PrimeFib.primeFib(7));
	}
	
	@Test
	void testPrimeFib8() {
		assertEquals(28657, PrimeFib.primeFib(8));
	}
	
	@Test
	void testPrimeFib9() {
		assertEquals(514229, PrimeFib.primeFib(9));
	}
	
	@Test
	void testPrimeFib10() {
		assertEquals(433494437, PrimeFib.primeFib(10));
	}
}

// PrimeFibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeFib}.
* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.
*/
class PrimeFibTest {
		
	@Test
	void testPrimeFib1() {
		assertEquals(2, PrimeFib.primeFib(1));
	}
	
	@Test
	void testPrimeFib2() {
		assertEquals(3, PrimeFib"
cmpl-6tVDc0ogfkdpSm4N0NM2agkPgZ5hk,/HumanEvalJava/src/main/java/original/id_4.java,54.538843393325806,length,"// MeanAbsoluteDeviation.java
package original;

import java.util.List;

class MeanAbsoluteDeviation {

    /**
     * For a given list of input numbers, calculate Mean Absolute Deviation
     * around the mean of this dataset.
     * Mean Absolute Deviation is the average absolute difference between each
     * element and a centerpoint (mean in this case):
     * MAD = average | x - x_mean |
     *
     * > meanAbsoluteDeviation([1.0, 2.0, 3.0])
     * 0.6666666666666666
     * > meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])
     * 1.0
     * > meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])
     * 1.2
     */
    public static Double meanAbsoluteDeviation(List<Double> numbers) {
        Double mean = 0.0;
        for (Double number : numbers) {
            mean += number;
        }
        mean /= numbers.size();
        Double mad = 0.0;
        for (Double number : numbers) {
            mad += Math.abs(number - mean);
        }
        return mad / numbers.size();
    }
}
","// MeanAbsoluteDeviationTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MeanAbsoluteDeviation}.
* It contains ten unit test cases for the {@link MeanAbsoluteDeviation#meanAbsoluteDeviation(List)} method.
*/
class MeanAbsoluteDeviationTest {","// MeanAbsoluteDeviationTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MeanAbsoluteDeviation}.
* It contains ten unit test cases for the {@link MeanAbsoluteDeviation#meanAbsoluteDeviation(List)} method.
*/
class MeanAbsoluteDeviationTest {

	@Test
	void testMeanAbsoluteDeviation() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0);
		Double expected = 0.6666666666666666;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation2() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0);
		Double expected = 1.0;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation3() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0);
		Double expected = 1.2;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation4() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
		Double expected = 1.4;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation5() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0);
		Double expected = 1.5714285714285714;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation6() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0);
		Double expected = 1.7142857142857142;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation7() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0);
		Double expected = 1.8333333333333333;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation8() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0);
		Double expected = 2.0;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation9() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0);
		Double expected = 2.1818181818181817;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation10() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0);
		Double expected = 2.3333333333333335;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
}

// MeanAbsoluteDeviationTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MeanAbsoluteDeviation}.
* It contains ten unit test cases for the {@link MeanAbsoluteDeviation#meanAbsoluteDeviation(List)} method.
*/
class MeanAbsoluteDeviationTest {
		
	@Test
	void testMeanAbsoluteDeviation() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0);
		Double expected = 0.6666666666666666;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation2() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0);
		Double expected = 1.0;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation3() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0);
		Double expected = 1.2;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation4() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
		Double expected = 1.4;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation5() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0);
		Double expected = 1.5714285714285714;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation6() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0);
		Double expected = 1.7142857142857142;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation7() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0);
		Double expected = 1.8333333333333333;
		Double actual = MeanAbsoluteDeviation.meanAbsoluteDeviation(numbers);
		assertEquals(expected, actual);
	}
	
	@Test
	void testMeanAbsoluteDeviation8() {
		List<Double> numbers = List.of(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,"
cmpl-6tVEfa5SbGpQOhuOvMWfl3ED9Tfbt,/HumanEvalJava/src/main/java/original/id_40.java,59.061198472976685,length,"// TriplesSumToZero.java
package original;

import java.util.List;

class TriplesSumToZero {

    /**
     * triplesSumToZero takes a list of integers as an input.
     * it returns True if there are three distinct elements in the list that
     * sum to zero, and False otherwise.
     *
     * > triplesSumToZero([1, 3, 5, 0])
     * false
     * > triplesSumToZero([1, 3, 5, -1])
     * false
     * > triplesSumToZero([1, 3, -2, 1])
     * true
     * > triplesSumToZero([1, 2, 3, 7])
     * false
     * > triplesSumToZero([1, 2, 5, 7])
     * false
     * > triplesSumToZero([2, 4, -5, 3, 9, 7])
     * true
     * > triplesSumToZero([1])
     * false
     * > triplesSumToZero([1, 3, 5, -100])
     * false
     * > triplesSumToZero([100, 3, 5, -100])
     * false
     */
    public static Boolean triplesSumToZero(List<Integer> l) {
        for (int i = 0; i < l.size(); i++) {
            for (int j = i + 1; j < l.size(); j++) {
                for (int k = j + 1; k < l.size(); k++) {
                    if (l.get(i) + l.get(j) + l.get(k) == 0) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}
","// TriplesSumToZeroTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriplesSumToZero}.
* It contains ten unit test cases for the {@link TriplesSumToZero#triplesSumToZero(List)} method.
*/
class TriplesSumToZeroTest {","// TriplesSumToZeroTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriplesSumToZero}.
* It contains ten unit test cases for the {@link TriplesSumToZero#triplesSumToZero(List)} method.
*/
class TriplesSumToZeroTest {

	@Test
	void testTriplesSumToZero() {
		List<Integer> l1 = List.of(1, 3, 5, 0);
		List<Integer> l2 = List.of(1, 3, 5, -1);
		List<Integer> l3 = List.of(1, 3, -2, 1);
		List<Integer> l4 = List.of(1, 2, 3, 7);
		List<Integer> l5 = List.of(1, 2, 5, 7);
		List<Integer> l6 = List.of(2, 4, -5, 3, 9, 7);
		List<Integer> l7 = List.of(1);
		List<Integer> l8 = List.of(1, 3, 5, -100);
		List<Integer> l9 = List.of(100, 3, 5, -100);
		List<Integer> l10 = List.of
cmpl-6tVFiIJ1yuf7aL9dqvT6sIoOTwRZy,/HumanEvalJava/src/main/java/original/id_41.java,40.1069872379303,stop,"// CarRaceCollision.java
package original;

class CarRaceCollision {

    /**
     * * Imagine a road that's a perfectly straight infinitely long line.
     * n cars are driving left to right;  simultaneously, a different set of n cars
     * are driving right to left.   The two sets of cars start out being very far from
     * each other.  All cars move in the same speed.  Two cars are said to collide
     * when a car that's moving left to right hits a car that's moving right to left.
     * However, the cars are infinitely sturdy and strong; as a result, they continue moving
     * in their trajectory as if they did not collide.
     * This function outputs the number of such collisions.
     *
     * > carRaceCollision(2)
     * 4
     * > carRaceCollision(3)
     * 9
     * > carRaceCollision(4)
     * 16
     * > carRaceCollision(8)
     * 64
     * > carRaceCollision(10)
     * 100
     */
    public static int carRaceCollision(int n) {
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                count++;
            }
        }
        return count;
    }
}
","// CarRaceCollisionTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CarRaceCollision}.
* It contains ten unit test cases for the {@link CarRaceCollision#carRaceCollision(int)} method.
*/
class CarRaceCollisionTest {","// CarRaceCollisionTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CarRaceCollision}.
* It contains ten unit test cases for the {@link CarRaceCollision#carRaceCollision(int)} method.
*/
class CarRaceCollisionTest {

	@Test
	void testCarRaceCollision() {
		assertEquals(4, CarRaceCollision.carRaceCollision(2));
		assertEquals(9, CarRaceCollision.carRaceCollision(3));
		assertEquals(16, CarRaceCollision.carRaceCollision(4));
		assertEquals(25, CarRaceCollision.carRaceCollision(5));
		assertEquals(36, CarRaceCollision.carRaceCollision(6));
		assertEquals(49, CarRaceCollision.carRaceCollision(7));
		assertEquals(64, CarRaceCollision.carRaceCollision(8));
		assertEquals(81, CarRaceCollision.carRaceCollision(9));
		assertEquals(100, CarRaceCollision.carRaceCollision(10));
		assertEquals(121, CarRaceCollision.carRaceCollision(11));
	}
}

// CarRaceCollision.java
package refactored;

class CarRaceCollision {

    /**
     * * Imagine a road that's a perfectly straight infinitely long line.
     * n cars are driving left to right;  simultaneously, a different set of n cars
     * are driving right to left.   The two sets of cars start out being very far from
     * each other.  All cars move in the same speed.  Two cars are said to collide
     * when a car that's moving left to right hits a car that's moving right to left.
     * However, the cars are infinitely sturdy and strong; as a result, they continue moving
     * in their trajectory as if they did not collide.
     * This function outputs the number of such collisions.
     *
     * > carRaceCollision(2)
     * 4
     * > carRaceCollision(3)
     * 9
     * > carRaceCollision(4)
     * 16
     * > carRaceCollision(8)
     * 64
     * > carRaceCollision(10)
     * 100
     */
    public static int carRaceCollision(int n) {
        return n * n;
    }
}

// CarRaceCollisionTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CarRaceCollision}.
* It contains ten unit test cases for the {@link CarRaceCollision#carRaceCollision(int)} method.
*/
class CarRaceCollisionTest {
		
	@Test
	void testCarRaceCollision() {
		assertEquals(4, CarRaceCollision.carRaceCollision(2));
		assertEquals(9, CarRaceCollision.carRaceCollision(3));
		assertEquals(16, CarRaceCollision.carRaceCollision(4));
		assertEquals(25, CarRaceCollision.carRaceCollision(5));
		assertEquals(36, CarRaceCollision.carRaceCollision(6));
		assertEquals(49, CarRaceCollision.carRaceCollision(7));
		assertEquals(64, CarRaceCollision.carRaceCollision(8));
		assertEquals(81, CarRaceCollision.carRaceCollision(9));
		assertEquals(100, CarRaceCollision.carRaceCollision(10));
		assertEquals(121, CarRaceCollision.carRaceCollision(11));
	}
}"
cmpl-6tVGlej9g4a6KP7RbFmocK0h9gmc7,/HumanEvalJava/src/main/java/original/id_42.java,42.16081690788269,length,"// IncrList.java
package original;

import java.util.ArrayList;
import java.util.List;

class IncrList {

    /**
     * Return list with elements incremented by 1.
     *
     * > incrList([1, 2, 3])
     * [2, 3, 4]
     * > incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])
     * [6, 4, 6, 3, 4, 4, 10, 1, 124]
     * > incrList([])
     * []
     * > incrList([3, 2, 1])
     * [4, 3, 2]
     * > incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])
     * [6, 3, 6, 3, 4, 4, 10, 1, 124]
     */
    public static List<Object> incrList(List<Object> l) {
        List<Object> result = new ArrayList<Object>();
        for (Object value : l) {
            if (value instanceof Integer) {
                int i = (Integer) value;
                result.add(i + 1);
            }
        }
        return result;
    }
}
","// IncrListTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IncrList}.
* It contains ten unit test cases for the {@link IncrList#incrList(List)} method.
*/
class IncrListTest {","// IncrListTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IncrList}.
* It contains ten unit test cases for the {@link IncrList#incrList(List)} method.
*/
class IncrListTest {

	@Test
	void testIncrList_1() {
		List<Object> l = new ArrayList<Object>();
		l.add(1);
		l.add(2);
		l.add(3);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(3);
		expected.add(4);
		List<Object> actual = IncrList.incrList(l);
		assertEquals(expected, actual);
	}
	
	@Test
	void testIncrList_2() {
		List<Object> l = new ArrayList<Object>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Object> expected = new ArrayList<Object>();
		expected.add(6);
		expected.add(4);
		expected.add(6);
		expected.add(3);
		expected.add(4);
		expected.add(4);
		expected.add(10);
		expected.add(1);
		expected.add(124);
		List<Object> actual = IncrList.incrList(l);
		assertEquals(expected, actual);
	}
	
	@Test
	void testIncrList_3() {
		List<Object> l = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = IncrList.incrList(l);
		assertEquals(expected, actual);
	}
	
	@Test
	void testIncrList_4() {
		List<Object> l = new ArrayList<Object>();
		l.add(3);
		l.add(2);
		l.add(1);
		List<Object> expected = new ArrayList<Object>();
		expected.add(4);
		expected.add(3);
		expected.add(2);
		List<Object> actual = IncrList.incrList(l);
		assertEquals(expected, actual);
	}
	
	@Test
	void testIncrList_5() {
		List<Object> l = new ArrayList<Object>();
		l.add(5);
		l.add(2);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Object> expected = new ArrayList<Object>();
		expected.add(6);
		expected.add(3);
		expected.add(6);
		expected.add(3);
		expected.add(4);
		expected.add(4);
		expected.add(10);
		expected.add(1);
		expected.add(124);
		List<Object> actual = IncrList.incrList(l);
		assertEquals(expected, actual);
	}
	
	@Test
	void testIncrList_6() {
		List<Object> l = new ArrayList<Object>();
		l.add(1);
		l.add(2);
		l.add(3);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(3);
		expected.add(4);
		List<Object> actual = IncrList.incrList(l);
		assertEquals(expected, actual);
	}
	
	@Test
	void testIncrList_7() {
		List<Object> l = new ArrayList<Object>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Object> expected = new ArrayList<Object>();
		expected.add(6);
		expected.add(4);
		expected.add(6);
		expected.add(3);
		expected.add(4);
		expected.add(4);
		expected.add(10);
		expected.add(1);
		expected.add(124);
		List<Object> actual = IncrList.incrList(l);
		assertEquals(expected, actual);
	}
	
	@Test
	void testIncrList_8() {
		List<Object> l = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = IncrList.incrList(l);
		assertEquals(expected, actual);
	}
	
	@Test
	void testIncrList_9() {
		List<Object> l = new ArrayList<Object>();
		l.add(3);
		l.add(2);
		l.add(1);
		List<Object> expected = new ArrayList<Object>();
		expected.add(4);
		expected.add(3);
		expected.add(2);
		List<Object> actual = IncrList.incrList(l);
		assertEquals(expected, actual);
	}
	
	@Test
	void testIncrList_10() {
		List<Object> l = new ArrayList<Object>();
		l.add(5);
		l.add(2);
		l.add(5);
		l.add(2);
		l.add(3);
		l.add(3);
		l.add(9);
		l.add(0);
		l.add(123);
		List<Object> expected = new ArrayList<Object>();
		expected.add(6);
		expected.add(3);
		expected.add(6);
		expected.add(3);
		expected.add(4);
		expected.add(4);
		expected.add(10);
		expected.add(1);
		expected.add(124);
		List<Object> actual = IncrList.incrList(l);
		assertEquals(expected, actual);
	}
}

// IncrListTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IncrList}.
* It contains ten unit test cases for the {@link IncrList#incrList(List)} method.
*/
class IncrListTest {
		
	@Test
	void testIncrList_1() {
		List<Object> l = new ArrayList<Object>();
		l.add(1);
		l.add(2);
		l.add(3);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(3);
		expected.add(4);
		List<Object> actual = IncrList.incrList(l);
		assertEquals(expected, actual);
	}
	
	@Test
	void testIncrList_2() {
		List<Object> l = new ArrayList<Object>();
		l.add(5);
		l.add(3);
		l.add(5);
		l.add("
cmpl-6tVHoFLjR6zrSMcpvyMfLGfKtMVj3,/HumanEvalJava/src/main/java/original/id_43.java,52.319157123565674,stop,"// PairsSumToZero.java
package original;

import java.util.List;

class PairsSumToZero {

    /**
     * * pairs_sum_to_zero takes a list of integers as an input.
     * it returns true if there are two distinct elements in the list that
     * sum to zero, and false otherwise.
     *
     * > pairsSumToZero([1, 3, 5, 0])
     * false
     * > pairsSumToZero([1, 3, -2, 1])
     * false
     * > pairsSumToZero([1, 2, 3, 7])
     * false
     * > pairsSumToZero([2, 4, -5, 3, 5, 7])
     * true
     * > pairsSumToZero([1])
     * false
     * > pairsSumToZero([1, 3, 5, 0])
     * false
     * > pairsSumToZero([1, 3, -2, 1])
     * false
     * > pairsSumToZero([1, 2, 3, 7])
     * false
     * > pairsSumToZero([2, 4, -5, 3, 5, 7])
     * true
     * > pairsSumToZero([1])
     * false
     * > pairsSumToZero([-3, 9, -1, 3, 2, 30])
     * true
     * > pairsSumToZero([-3, 9, -1, 3, 2, 31])
     * true
     * > pairsSumToZero([-3, 9, -1, 4, 2, 30])
     * false
     * > pairsSumToZero([-3, 9, -1, 4, 2, 31])
     * false
     */
    public static Boolean pairsSumToZero(List<Integer> l) {
        for (int i = 0; i < l.size(); i++) {
            for (int j = i + 1; j < l.size(); j++) {
                if (l.get(i) + l.get(j) == 0) {
                    return true;
                }
            }
        }
        return false;
    }
}
","// PairsSumToZeroTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PairsSumToZero}.
* It contains ten unit test cases for the {@link PairsSumToZero#pairsSumToZero(List)} method.
*/
class PairsSumToZeroTest {","// PairsSumToZeroTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PairsSumToZero}.
* It contains ten unit test cases for the {@link PairsSumToZero#pairsSumToZero(List)} method.
*/
class PairsSumToZeroTest {

		@Test
		void testPairsSumToZero() {
				List<Integer> l1 = List.of(1, 3, 5, 0);
				List<Integer> l2 = List.of(1, 3, -2, 1);
				List<Integer> l3 = List.of(1, 2, 3, 7);
				List<Integer> l4 = List.of(2, 4, -5, 3, 5, 7);
				List<Integer> l5 = List.of(1);
				List<Integer> l6 = List.of(-3, 9, -1, 3, 2, 30);
				List<Integer> l7 = List.of(-3, 9, -1, 3, 2, 31);
				List<Integer> l8 = List.of(-3, 9, -1, 4, 2, 30);
				List<Integer> l9 = List.of(-3, 9, -1, 4, 2, 31);
				List<Integer> l10 = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
				
				assertFalse(PairsSumToZero.pairsSumToZero(l1));
				assertFalse(PairsSumToZero.pairsSumToZero(l2));
				assertFalse(PairsSumToZero.pairsSumToZero(l3));
				assertTrue(PairsSumToZero.pairsSumToZero(l4));
				assertFalse(PairsSumToZero.pairsSumToZero(l5));
				assertTrue(PairsSumToZero.pairsSumToZero(l6));
				assertTrue(PairsSumToZero.pairsSumToZero(l7));
				assertFalse(PairsSumToZero.pairsSumToZero(l8));
				assertFalse(PairsSumToZero.pairsSumToZero(l9));
				assertFalse(PairsSumToZero.pairsSumToZero(l10));
		}
}

// PairsSumToZero.java
package refactored;

import java.util.List;

class PairsSumToZero {

    /**
     * * pairs_sum_to_zero takes a list of integers as an input.
     * it returns true if there are two distinct elements in the list that
     * sum to zero, and false otherwise.
     *
     * > pairsSumToZero([1, 3, 5, 0])
     * false
     * > pairsSumToZero([1, 3, -2, 1])
     * false
     * > pairsSumToZero([1, 2, 3, 7])
     * false
     * > pairsSumToZero([2, 4, -5, 3, 5, 7])
     * true
     * > pairsSumToZero([1])
     * false
     * > pairsSumToZero([1, 3, 5, 0])
     * false
     * > pairsSumToZero([1, 3, -2, 1])
     * false
     * > pairsSumToZero([1, 2, 3, 7])
     * false
     * > pairsSumToZero([2, 4, -5, 3, 5, 7])
     * true
     * > pairsSumToZero([1])
     * false
     * > pairsSumToZero([-3, 9, -1, 3, 2, 30])
     * true
     * > pairsSumToZero([-3, 9, -1, 3, 2, 31])
     * true
     * > pairsSumToZero([-3, 9, -1, 4, 2, 30])
     * false
     * > pairsSumToZero([-3, 9, -1, 4, 2, 31])
     * false
     */
    public static Boolean pairsSumToZero(List<Integer> l) {
        for (int i = 0; i < l.size(); i++) {
            for (int j = i + 1; j < l.size(); j++) {
                if (l.get(i) + l.get(j) == 0) {
                    return true;
                }
            }
        }
        return false;
    }
}

// PairsSumToZeroTest.java
package refactored;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PairsSumToZero}.
* It contains ten unit test cases for the {@link PairsSumToZero#pairsSumToZero(List)} method.
*/
class PairsSumToZeroTest {
		
		@Test
		void testPairsSumToZero() {
				List<Integer> l1 = List.of(1, 3, 5, 0);
				List<Integer> l2 = List.of(1, 3, -2, 1);
				List<Integer> l3 = List.of(1, 2, 3, 7);
				List<Integer> l4 = List.of(2, 4, -5, 3, 5, 7);
				List<Integer> l5 = List.of(1);
				List<Integer> l6 = List.of(-3, 9, -1, 3, 2, 30);
				List<Integer> l7 = List.of(-3, 9, -1, 3, 2, 31);
				List<Integer> l8 = List.of(-3, 9, -1, 4, 2, 30);
				List<Integer> l9 = List.of(-3, 9, -1, 4, 2, 31);
				List<Integer> l10 = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
				
				assertFalse(PairsSumToZero.pairsSumToZero(l1));
				assertFalse(PairsSumToZero.pairsSumToZero(l2));
				assertFalse(PairsSumToZero.pairsSumToZero(l3));
				assertTrue(PairsSumToZero.pairsSumToZero(l4));
				assertFalse(PairsSumToZero.pairsSumToZero(l5));
				assertTrue(PairsSumToZero.pairsSumToZero(l6));
				assertTrue(PairsSumToZero.pairsSumToZero(l7));
				assertFalse(PairsSumToZero.pairsSumToZero(l8));
				assertFalse(PairsSumToZero.pairsSumToZero(l9));
				assertFalse(PairsSumToZero.pairsSumToZero(l10));
		}
}"
cmpl-6tVIrpSFGsoEtP3uifMy2i08jxdqj,/HumanEvalJava/src/main/java/original/id_44.java,49.04444217681885,length,"// ChangeBase.java
package original;

class ChangeBase {

    /**
     * Change numerical base of input number x to base.
     * return string representation after the conversion.
     * base numbers are less than 10.
     *
     * > changeBase(8, 3)
     * ""22""
     * > changeBase(8, 2)
     * ""1000""
     * > changeBase(7, 2)
     * ""111""
     * > changeBase(8, 3)
     * ""22""
     * > changeBase(9, 3)
     * ""100""
     * > changeBase(234, 2)
     * ""11101010""
     * > changeBase(16, 2)
     * ""10000""
     * > changeBase(8, 2)
     * ""1000""
     * > changeBase(7, 2)
     * ""111""
     * > changeBase(2, 3)
     * ""2""
     * > changeBase(3, 4)
     * ""3""
     * > changeBase(4, 5)
     * ""4""
     * > changeBase(5, 6)
     * ""5""
     * > changeBase(6, 7)
     * ""6""
     * > changeBase(7, 8)
     * ""7""
     */
    public static String changeBase(int x, int base) {
        String result = """";
        while (x > 0) {
            result = (x % base) + result;
            x = x / base;
        }
        return result;
    }
}
","// ChangeBaseTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeBase}.
* It contains ten unit test cases for the {@link ChangeBase#changeBase(int, int)} method.
*/
class ChangeBaseTest {","// ChangeBaseTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeBase}.
* It contains ten unit test cases for the {@link ChangeBase#changeBase(int, int)} method.
*/
class ChangeBaseTest {

	@Test
	void testChangeBase() {
		assertEquals(""22"", ChangeBase.changeBase(8, 3));
		assertEquals(""1000"", ChangeBase.changeBase(8, 2));
		assertEquals(""111"", ChangeBase.changeBase(7, 2));
		assertEquals(""22"", ChangeBase.changeBase(8, 3));
		assertEquals(""100"", ChangeBase.changeBase(9, 3));
		assertEquals(""11101010"", ChangeBase.changeBase(234, 2));
		assertEquals(""10000"", ChangeBase.changeBase(16, 2));
		assertEquals(""1000"", ChangeBase.changeBase(8, 2));
		assertEquals(""111"", ChangeBase.changeBase(7, 2));
		assertEquals(""2"", ChangeBase.changeBase(2, 3));
		assertEquals(""3"", ChangeBase.changeBase(3, 4));
		assertEquals(""4"", ChangeBase.changeBase(4, 5));
		assertEquals(""5"", ChangeBase.changeBase(5, 6));
		assertEquals(""6"", ChangeBase.changeBase(6, 7));
		assertEquals(""7"", ChangeBase.changeBase(7, 8));
	}
}

// ChangeBaseTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeBase}.
* It contains ten unit test cases for the {@link ChangeBase#changeBase(int, int)} method.
*/
class ChangeBaseTest {
		
	@Test
	void testChangeBase() {
		assertEquals(""22"", ChangeBase.changeBase(8, 3));
		assertEquals(""1000"", ChangeBase.changeBase(8, 2));
		assertEquals(""111"", ChangeBase.changeBase(7, 2));
		assertEquals(""22"", ChangeBase.changeBase(8, 3));
		assertEquals(""100"", ChangeBase.changeBase(9, 3));
		assertEquals(""11101010"", ChangeBase.changeBase(234, 2));
		assertEquals(""10000"", ChangeBase.changeBase(16, 2));
		assertEquals(""1000"", ChangeBase.changeBase(8, 2));
		assertEquals(""111"", ChangeBase.changeBase(7, 2));
		assertEquals(""2"", ChangeBase.changeBase(2, 3));
		assertEquals(""3"", ChangeBase.changeBase(3, 4));
		assertEquals(""4"", ChangeBase.changeBase(4, 5));
		assertEquals(""5"", ChangeBase.changeBase(5, 6));
		assertEquals(""6"", ChangeBase.changeBase(6, 7));
		assertEquals(""7"", ChangeBase.changeBase(7, 8));
	}
}

// ChangeBaseTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeBase}.
* It contains ten unit test cases for the {@link ChangeBase#changeBase(int, int)} method.
*/
class ChangeBaseTest {
		
	@Test
	void testChangeBase() {
		assertEquals(""22"", ChangeBase.changeBase(8, 3));
		assertEquals(""1000"", ChangeBase.changeBase(8, 2));
		assertEquals(""111"", ChangeBase.changeBase(7, 2));
		assertEquals(""22"", ChangeBase.changeBase(8, 3));
		assertEquals(""100"", ChangeBase.changeBase(9, 3));
		assertEquals(""11101010"", ChangeBase.changeBase(234, 2));
		assertEquals(""10000"", ChangeBase.changeBase(16, 2));
		assertEquals(""1000"", ChangeBase.changeBase(8, 2));
		assertEquals(""111"", ChangeBase.changeBase(7, 2));
		assertEquals(""2"", ChangeBase.changeBase(2, 3));
		assertEquals(""3"", ChangeBase.changeBase(3, 4));
		assertEquals(""4"", ChangeBase.changeBase(4, 5));
		assertEquals(""5"", ChangeBase.changeBase(5, 6));
		assertEquals(""6"", ChangeBase.changeBase(6, 7));
		assertEquals(""7"", ChangeBase.changeBase(7, 8));
	}
}

// ChangeBaseTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeBase}.
* It contains ten unit test cases for the {@link ChangeBase#changeBase(int, int)} method.
*/
class ChangeBaseTest {
		
	@Test
	void testChangeBase() {
		assertEquals(""22"", ChangeBase.changeBase(8, 3));
		assertEquals(""1000"", ChangeBase.changeBase(8, 2));
		assertEquals(""111"", ChangeBase.changeBase(7, 2));
		assertEquals(""22"", ChangeBase.changeBase(8, 3));
		assertEquals(""100"", ChangeBase.changeBase(9, 3));
		assertEquals(""11101010"", ChangeBase.changeBase(234, 2));
		assertEquals(""10000"", ChangeBase.changeBase(16, 2));
		assertEquals(""1000"", ChangeBase.changeBase(8, 2));
		assertEquals(""111"", ChangeBase.changeBase(7, 2));
		assertEquals(""2"", ChangeBase.changeBase(2, 3));
		assertEquals(""3"", ChangeBase.changeBase(3, 4));
		assertEquals(""4"", ChangeBase.changeBase(4, 5));
		assertEquals(""5"", ChangeBase.changeBase(5, 6));
		assertEquals(""6"", ChangeBase.changeBase(6, 7));
		assertEquals(""7"", ChangeBase.changeBase(7, 8));
	}
}

// ChangeBaseTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeBase}.
* It contains ten unit test cases for the {@link ChangeBase#changeBase(int, int)} method.
*/
class ChangeBaseTest {
		
	@Test
	void testChangeBase() {
		assertEquals(""22"", ChangeBase.changeBase(8, 3));
		assertEquals(""1000"", ChangeBase.changeBase(8, 2));
		assertEquals(""111"", ChangeBase.changeBase(7, 2));
		assertEquals(""22"", ChangeBase.changeBase(8, 3));
		assertEquals(""100"", ChangeBase.changeBase(9, 3));
		assertEquals(""11101010"", ChangeBase.changeBase(234, 2));
		assertEquals(""10000"", ChangeBase.changeBase(16, 2));
		assertEquals(""1000"", ChangeBase.changeBase(8, 2));
		assertEquals(""111"", ChangeBase.changeBase(7, 2));
		assertEquals(""2"", ChangeBase.changeBase(2, 3));
		assertEquals(""3"", ChangeBase.changeBase(3, 4));
		assertEquals(""4"", ChangeBase.changeBase(4, 5));
		assertEquals(""5"", ChangeBase.changeBase(5, 6));
		assertEquals(""6"", ChangeBase.changeBase(6, 7));
		assertEquals(""7"", ChangeBase.changeBase(7, 8));
	}
}

// ChangeBaseTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeBase}.
* It contains ten unit test cases for the {@link ChangeBase#changeBase(int, int)} method.
*/
class ChangeBaseTest {
		
	@Test
"
cmpl-6tVJuptOjk7qOig4SlTyV129E3tfB,/HumanEvalJava/src/main/java/original/id_45.java,66.9107596874237,length,"// TriangleArea.java
package original;

class TriangleArea {

    /**
     * Given length of a side and high return area for a triangle.
     *
     * > triangleArea(5, 3)
     * 7.5
     * > triangleArea(2, 2)
     * 2.0
     * > triangleArea(10, 8)
     * 40.0
     */
    public static Double triangleArea(int a, int h) {
        return (a * h) / 2.0;
    }
}
","// TriangleAreaTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea}.
* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.
*/
class TriangleAreaTest {","// TriangleAreaTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea}.
* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.
*/
class TriangleAreaTest {

	@Test
	void testTriangleArea() {
		assertEquals(7.5, TriangleArea.triangleArea(5, 3));
		assertEquals(2.0, TriangleArea.triangleArea(2, 2));
		assertEquals(40.0, TriangleArea.triangleArea(10, 8));
		assertEquals(0.0, TriangleArea.triangleArea(0, 0));
		assertEquals(0.0, TriangleArea.triangleArea(0, 1));
		assertEquals(0.0, TriangleArea.triangleArea(1, 0));
		assertEquals(0.0, TriangleArea.triangleArea(-1, -1));
		assertEquals(0.0, TriangleArea.triangleArea(-1, 1));
		assertEquals(0.0, TriangleArea.triangleArea(1, -1));
		assertEquals(0.0, TriangleArea.triangleArea(1, 1));
	}
}

// TriangleAreaTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea}.
* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.
*/
class TriangleAreaTest {
		
	@Test
	void testTriangleArea() {
		assertEquals(7.5, TriangleArea.triangleArea(5, 3));
		assertEquals(2.0, TriangleArea.triangleArea(2, 2));
		assertEquals(40.0, TriangleArea.triangleArea(10, 8));
		assertEquals(0.0, TriangleArea.triangleArea(0, 0));
		assertEquals(0.0, TriangleArea.triangleArea(0, 1));
		assertEquals(0.0, TriangleArea.triangleArea(1, 0));
		assertEquals(0.0, TriangleArea.triangleArea(-1, -1));
		assertEquals(0.0, TriangleArea.triangleArea(-1, 1));
		assertEquals(0.0, TriangleArea.triangleArea(1, -1));
		assertEquals(0.0, TriangleArea.triangleArea(1, 1));
	}
}

// TriangleAreaTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea}.
* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.
*/
class TriangleAreaTest {
		
	@Test
	void testTriangleArea() {
		assertEquals(7.5, TriangleArea.triangleArea(5, 3));
		assertEquals(2.0, TriangleArea.triangleArea(2, 2));
		assertEquals(40.0, TriangleArea.triangleArea(10, 8));
		assertEquals(0.0, TriangleArea.triangleArea(0, 0));
		assertEquals(0.0, TriangleArea.triangleArea(0, 1));
		assertEquals(0.0, TriangleArea.triangleArea(1, 0));
		assertEquals(0.0, TriangleArea.triangleArea(-1, -1));
		assertEquals(0.0, TriangleArea.triangleArea(-1, 1));
		assertEquals(0.0, TriangleArea.triangleArea(1, -1));
		assertEquals(0.0, TriangleArea.triangleArea(1, 1));
	}
}

// TriangleAreaTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea}.
* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.
*/
class TriangleAreaTest {
		
	@Test
	void testTriangleArea() {
		assertEquals(7.5, TriangleArea.triangleArea(5, 3));
		assertEquals(2.0, TriangleArea.triangleArea(2, 2));
		assertEquals(40.0, TriangleArea.triangleArea(10, 8));
		assertEquals(0.0, TriangleArea.triangleArea(0, 0));
		assertEquals(0.0, TriangleArea.triangleArea(0, 1));
		assertEquals(0.0, TriangleArea.triangleArea(1, 0));
		assertEquals(0.0, TriangleArea.triangleArea(-1, -1));
		assertEquals(0.0, TriangleArea.triangleArea(-1, 1));
		assertEquals(0.0, TriangleArea.triangleArea(1, -1));
		assertEquals(0.0, TriangleArea.triangleArea(1, 1));
	}
}

// TriangleAreaTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea}.
* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.
*/
class TriangleAreaTest {
		
	@Test
	void testTriangleArea() {
		assertEquals(7.5, TriangleArea.triangleArea(5, 3));
		assertEquals(2.0, TriangleArea.triangleArea(2, 2));
		assertEquals(40.0, TriangleArea.triangleArea(10, 8));
		assertEquals(0.0, TriangleArea.triangleArea(0, 0));
		assertEquals(0.0, TriangleArea.triangleArea(0, 1));
		assertEquals(0.0, TriangleArea.triangleArea(1, 0));
		assertEquals(0.0, TriangleArea.triangleArea(-1, -1));
		assertEquals(0.0, TriangleArea.triangleArea(-1, 1));
		assertEquals(0.0, TriangleArea.triangleArea(1, -1));
		assertEquals(0.0, TriangleArea.triangleArea(1, 1));
	}
}

// TriangleAreaTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea}.
* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.
*/
class TriangleAreaTest {
		
	@Test
	void testTriangleArea() {
		assertEquals(7.5, TriangleArea.triangleArea(5, 3));
		assertEquals(2.0, TriangleArea.triangleArea(2, 2));
		assertEquals(40.0, TriangleArea.triangleArea(10, 8));
		assertEquals(0.0, TriangleArea.triangleArea(0, 0));
		assertEquals(0.0, TriangleArea.triangleArea(0, 1));
		assertEquals(0.0, TriangleArea.triangleArea(1, 0));
		assertEquals(0.0, TriangleArea.triangleArea(-1, -1));
		assertEquals(0.0, TriangleArea.triangleArea(-1, 1));
		assertEquals(0.0, TriangleArea.triangleArea(1, -1));
		assertEquals(0.0, TriangleArea.triangleArea(1, 1));
	}
}

// TriangleAreaTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea}.
* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int"
cmpl-6tVKz0GoqQZTWCPb5RalnJ468b7P7,/HumanEvalJava/src/main/java/original/id_46.java,60.52441596984863,length,"// Fib4.java
package original;

class Fib4 {

    /**
     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:
     * fib4(0) -> 0
     * fib4(1) -> 0
     * fib4(2) -> 2
     * fib4(3) -> 0
     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
     *
     * > fib4(5)
     * 4
     * > fib4(6)
     * 8
     * > fib4(7)
     * 14
     * > fib4(5)
     * 4
     * > fib4(8)
     * 28
     * > fib4(10)
     * 104
     * > fib4(12)
     * 386
     */
    public static int fib4(int n) {
        if (n < 2) {
            return 0;
        }
        if (n == 2) {
            return 2;
        }
        int a = 0;
        int b = 0;
        int c = 2;
        int d = 0;
        int e = 0;
        for (int i = 4; i <= n; i++) {
            e = a + b + c + d;
            a = b;
            b = c;
            c = d;
            d = e;
        }
        return e;
    }
}
","// Fib4Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib4}.
* It contains ten unit test cases for the {@link Fib4#fib4(int)} method.
*/
class Fib4Test {","// Fib4Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib4}.
* It contains ten unit test cases for the {@link Fib4#fib4(int)} method.
*/
class Fib4Test {

	@Test
	void testFib4() {
		assertEquals(0, Fib4.fib4(0));
		assertEquals(0, Fib4.fib4(1));
		assertEquals(2, Fib4.fib4(2));
		assertEquals(0, Fib4.fib4(3));
		assertEquals(4, Fib4.fib4(5));
		assertEquals(8, Fib4.fib4(6));
		assertEquals(14, Fib4.fib4(7));
		assertEquals(28, Fib4.fib4(8));
		assertEquals(104, Fib4.fib4(10));
		assertEquals(386, Fib4.fib4(12));
	}
}

// Fib4Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib4}.
* It contains ten unit test cases for the {@link Fib4#fib4(int)} method.
*/
class Fib4Test {
		
	@Test
	void testFib4() {
		assertEquals(0, Fib4.fib4(0));
		assertEquals(0, Fib4.fib4(1));
		assertEquals(2, Fib4.fib4(2));
		assertEquals(0, Fib4.fib4(3));
		assertEquals(4, Fib4.fib4(5));
		assertEquals(8, Fib4.fib4(6));
		assertEquals(14, Fib4.fib4(7));
		assertEquals(28, Fib4.fib4(8));
		assertEquals(104, Fib4.fib4(10));
		assertEquals(386, Fib4.fib4(12));
	}
}

// Fib4Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib4}.
* It contains ten unit test cases for the {@link Fib4#fib4(int)} method.
*/
class Fib4Test {
		
	@Test
	void testFib4() {
		assertEquals(0, Fib4.fib4(0));
		assertEquals(0, Fib4.fib4(1));
		assertEquals(2, Fib4.fib4(2));
		assertEquals(0, Fib4.fib4(3));
		assertEquals(4, Fib4.fib4(5));
		assertEquals(8, Fib4.fib4(6));
		assertEquals(14, Fib4.fib4(7));
		assertEquals(28, Fib4.fib4(8));
		assertEquals(104, Fib4.fib4(10));
		assertEquals(386, Fib4.fib4(12));
	}
}

// Fib4Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib4}.
* It contains ten unit test cases for the {@link Fib4#fib4(int)} method.
*/
class Fib4Test {
		
	@Test
	void testFib4() {
		assertEquals(0, Fib4.fib4(0));
		assertEquals(0, Fib4.fib4(1));
		assertEquals(2, Fib4.fib4(2));
		assertEquals(0, Fib4.fib4(3));
		assertEquals(4, Fib4.fib4(5));
		assertEquals(8, Fib4.fib4(6));
		assertEquals(14, Fib4.fib4(7));
		assertEquals(28, Fib4.fib4(8));
		assertEquals(104, Fib4.fib4(10));
		assertEquals(386, Fib4.fib4(12));
	}
}

// Fib4Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib4}.
* It contains ten unit test cases for the {@link Fib4#fib4(int)} method.
*/
class Fib4Test {
		
	@Test
	void testFib4() {
		assertEquals(0, Fib4.fib4(0));
		assertEquals(0, Fib4.fib4(1));
		assertEquals(2, Fib4.fib4(2));
		assertEquals(0, Fib4.fib4(3));
		assertEquals(4, Fib4.fib4(5));
		assertEquals(8, Fib4.fib4(6));
		assertEquals(14, Fib4.fib4(7));
		assertEquals(28, Fib4.fib4(8));
		assertEquals(104, Fib4.fib4(10));
		assertEquals(386, Fib4.fib4(12));
	}
}

// Fib4Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib4}.
* It contains ten unit test cases for the {@link Fib4#fib4(int)} method.
*/
class Fib4Test {
		
	@Test
	void testFib4() {
		assertEquals(0, Fib4.fib4(0));
		assertEquals(0, Fib4.fib4(1));
		assertEquals(2, Fib4.fib4(2));
		assertEquals(0, Fib4.fib4(3));
		assertEquals(4, Fib4.fib4(5));
		assertEquals(8, Fib4.fib4(6));
		assertEquals(14, Fib4.fib4(7));
		assertEquals(28, Fib4.fib4(8));
		assertEquals(104, Fib4.fib4(10));
		assertEquals(386, Fib4.fib4(12));
	}
}

// Fib4Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib4}.
* It contains ten unit test cases for the {@link Fib4#fib4(int)} method.
*/
class Fib4Test {
		
	@Test
	void testFib4() {
		assertEquals(0, Fib4.fib4(0));
		assertEquals(0, Fib4.fib4(1));
		assertEquals(2, Fib4.fib4(2));
		assertEquals(0, Fib4.fib4(3));
		assertEquals(4, Fib4.fib4(5));
		assertEquals(8, Fib4.fib4(6));
		assertEquals(14, Fib4.fib4(7));
		assertEquals(28, Fib4.fib4(8));
		assertEquals(104, Fib4.fib4(10));
		assertEquals(386, Fib4.fib4(12));
	}
}

// Fib4Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
*"
cmpl-6tVLx0vN3bN5P0Dd3Ts1oUfNbSXFF,/HumanEvalJava/src/main/java/original/id_47.java,74.10350394248962,length,"// Median.java
package original;

import java.util.Collections;
import java.util.List;

class Median {

    /**
     * Return median of elements in the list l.
     *
     * > median([3, 1, 2, 4, 5])
     * 3
     * > median([-10, 4, 6, 1000, 10, 20])
     * 8.0
     * > median([5])
     * 5
     * > median([6, 5])
     * 5.5
     * > median([8, 1, 3, 9, 9, 2, 7])
     * 7
     */
    public static Number median(List<Integer> l) {
        Collections.sort(l);
        int size = l.size();
        if (size % 2 == 0) {
            return (l.get(size / 2) + l.get(size / 2 - 1)) / 2.0;
        } else {
            return l.get(size / 2);
        }
    }
}
","// MedianTest.java
package original;

import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Median}.
* It contains ten unit test cases for the {@link Median#median(List)} method.
*/
class MedianTest {","// MedianTest.java
package original;

import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Median}.
* It contains ten unit test cases for the {@link Median#median(List)} method.
*/
class MedianTest {

	@Test
	void testMedian() {
		List<Integer> l = List.of(3, 1, 2, 4, 5);
		assertEquals(3, Median.median(l));
		
		l = List.of(-10, 4, 6, 1000, 10, 20);
		assertEquals(8.0, Median.median(l));
		
		l = List.of(5);
		assertEquals(5, Median.median(l));
		
		l = List.of(6, 5);
		assertEquals(5.5, Median.median(l));
		
		l = List.of(8, 1, 3, 9, 9, 2, 7);
		assertEquals(7, Median.median(l));
	}
}

// MedianTest.java
package original;

import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Median}.
* It contains ten unit test cases for the {@link Median#median(List)} method.
*/
class MedianTest {
		
	@Test
	void testMedian() {
		List<Integer> l = List.of(3, 1, 2, 4, 5);
		assertEquals(3, Median.median(l));
		
		l = List.of(-10, 4, 6, 1000, 10, 20);
		assertEquals(8.0, Median.median(l));
		
		l = List.of(5);
		assertEquals(5, Median.median(l));
		
		l = List.of(6, 5);
		assertEquals(5.5, Median.median(l));
		
		l = List.of(8, 1, 3, 9, 9, 2, 7);
		assertEquals(7, Median.median(l));
	}
}

// MedianTest.java
package original;

import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Median}.
* It contains ten unit test cases for the {@link Median#median(List)} method.
*/
class MedianTest {
		
	@Test
	void testMedian() {
		List<Integer> l = List.of(3, 1, 2, 4, 5);
		assertEquals(3, Median.median(l));
		
		l = List.of(-10, 4, 6, 1000, 10, 20);
		assertEquals(8.0, Median.median(l));
		
		l = List.of(5);
		assertEquals(5, Median.median(l));
		
		l = List.of(6, 5);
		assertEquals(5.5, Median.median(l));
		
		l = List.of(8, 1, 3, 9, 9, 2, 7);
		assertEquals(7, Median.median(l));
	}
}

// MedianTest.java
package original;

import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Median}.
* It contains ten unit test cases for the {@link Median#median(List)} method.
*/
class MedianTest {
		
	@Test
	void testMedian() {
		List<Integer> l = List.of(3, 1, 2, 4, 5);
		assertEquals(3, Median.median(l));
		
		l = List.of(-10, 4, 6, 1000, 10, 20);
		assertEquals(8.0, Median.median(l));
		
		l = List.of(5);
		assertEquals(5, Median.median(l));
		
		l = List.of(6, 5);
		assertEquals(5.5, Median.median(l));
		
		l = List.of(8, 1, 3, 9, 9, 2, 7);
		assertEquals(7, Median.median(l));
	}
}

// MedianTest.java
package original;

import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Median}.
* It contains ten unit test cases for the {@link Median#median(List)} method.
*/
class MedianTest {
		
	@Test
	void testMedian() {
		List<Integer> l = List.of(3, 1, 2, 4, 5);
		assertEquals(3, Median.median(l));
		
		l = List.of(-10, 4, 6, 1000, 10, 20);
		assertEquals(8.0, Median.median(l));
		
		l = List.of(5);
		assertEquals(5, Median.median(l));
		
		l = List.of(6, 5);
		assertEquals(5.5, Median.median(l));
		
		l = List.of(8, 1, 3, 9, 9, 2, 7);
		assertEquals(7, Median.median(l));
	}
}

// MedianTest.java
package original;

import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Median}.
* It contains ten unit test cases for the {@link Median#median(List)} method.
*/
class MedianTest {
		
	@Test
	void testMedian() {
		List<Integer> l = List.of(3, 1, 2, 4, 5);
		assertEquals(3, Median.median(l));
		
		l = List.of(-10, 4, 6, 1000, 10, 20);
		assertEquals(8.0, Median.median(l));
		
		l = List.of(5);
		assertEquals(5, Median.median(l));
		
		l = List.of(6, 5);
		assertEquals(5.5, Median.median(l));
		
		l = List.of(8, 1, 3, 9, 9, 2, 7);
		assertEquals(7, Median.median(l));
	}
}

// MedianTest.java
package original;

import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Median}.
* It contains ten unit test cases for the {@link Median#median(List)} method.
*/
class MedianTest {
		
	@Test
	void testMedian() {
		List<Integer> l = List.of(3, 1, 2, 4, 5);
		assertEquals(3, Median.median(l));
		
		l = List.of(-10, 4, 6, 1000, 10, 20);
		assertEquals(8.0, Median.median(l));
		
		l = List.of(5);
		assertEquals(5, Median.median(l));
		
		l = List.of(6, 5);
"
cmpl-6tVN9e1UHShE85ruA2QUKvDmM8Tvt,/HumanEvalJava/src/main/java/original/id_48.java,86.81954622268677,length,"// IsPalindrome.java
package original;

class IsPalindrome {

    /**
     * Checks if given string is a palindrome
     *
     * > isPalindrome("""")
     * true
     * > isPalindrome(""aba"")
     * true
     * > isPalindrome(""aaaaa"")
     * true
     * > isPalindrome(""zbcd"")
     * false
     * > isPalindrome(""xywyx"")
     * true
     * > isPalindrome(""xywyz"")
     * false
     * > isPalindrome(""xywzx"")
     * false
     */
    public static Boolean isPalindrome(String text) {
        int i = 0;
        int j = text.length() - 1;
        while (i < j) {
            if (text.charAt(i) != text.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
","// IsPalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPalindrome}.
* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.
*/
class IsPalindromeTest {","// IsPalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPalindrome}.
* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.
*/
class IsPalindromeTest {

	@Test
	void testIsPalindrome() {
		assertTrue(IsPalindrome.isPalindrome(""""));
		assertTrue(IsPalindrome.isPalindrome(""aba""));
		assertTrue(IsPalindrome.isPalindrome(""aaaaa""));
		assertFalse(IsPalindrome.isPalindrome(""zbcd""));
		assertTrue(IsPalindrome.isPalindrome(""xywyx""));
		assertFalse(IsPalindrome.isPalindrome(""xywyz""));
		assertFalse(IsPalindrome.isPalindrome(""xywzx""));
	}
}

// IsPalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPalindrome}.
* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.
*/
class IsPalindromeTest {
		
	@Test
	void testIsPalindrome() {
		assertTrue(IsPalindrome.isPalindrome(""""));
		assertTrue(IsPalindrome.isPalindrome(""aba""));
		assertTrue(IsPalindrome.isPalindrome(""aaaaa""));
		assertFalse(IsPalindrome.isPalindrome(""zbcd""));
		assertTrue(IsPalindrome.isPalindrome(""xywyx""));
		assertFalse(IsPalindrome.isPalindrome(""xywyz""));
		assertFalse(IsPalindrome.isPalindrome(""xywzx""));
	}
}

// IsPalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPalindrome}.
* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.
*/
class IsPalindromeTest {
		
	@Test
	void testIsPalindrome() {
		assertTrue(IsPalindrome.isPalindrome(""""));
		assertTrue(IsPalindrome.isPalindrome(""aba""));
		assertTrue(IsPalindrome.isPalindrome(""aaaaa""));
		assertFalse(IsPalindrome.isPalindrome(""zbcd""));
		assertTrue(IsPalindrome.isPalindrome(""xywyx""));
		assertFalse(IsPalindrome.isPalindrome(""xywyz""));
		assertFalse(IsPalindrome.isPalindrome(""xywzx""));
	}
}

// IsPalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPalindrome}.
* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.
*/
class IsPalindromeTest {
		
	@Test
	void testIsPalindrome() {
		assertTrue(IsPalindrome.isPalindrome(""""));
		assertTrue(IsPalindrome.isPalindrome(""aba""));
		assertTrue(IsPalindrome.isPalindrome(""aaaaa""));
		assertFalse(IsPalindrome.isPalindrome(""zbcd""));
		assertTrue(IsPalindrome.isPalindrome(""xywyx""));
		assertFalse(IsPalindrome.isPalindrome(""xywyz""));
		assertFalse(IsPalindrome.isPalindrome(""xywzx""));
	}
}

// IsPalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPalindrome}.
* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.
*/
class IsPalindromeTest {
		
	@Test
	void testIsPalindrome() {
		assertTrue(IsPalindrome.isPalindrome(""""));
		assertTrue(IsPalindrome.isPalindrome(""aba""));
		assertTrue(IsPalindrome.isPalindrome(""aaaaa""));
		assertFalse(IsPalindrome.isPalindrome(""zbcd""));
		assertTrue(IsPalindrome.isPalindrome(""xywyx""));
		assertFalse(IsPalindrome.isPalindrome(""xywyz""));
		assertFalse(IsPalindrome.isPalindrome(""xywzx""));
	}
}

// IsPalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPalindrome}.
* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.
*/
class IsPalindromeTest {
		
	@Test
	void testIsPalindrome() {
		assertTrue(IsPalindrome.isPalindrome(""""));
		assertTrue(IsPalindrome.isPalindrome(""aba""));
		assertTrue(IsPalindrome.isPalindrome(""aaaaa""));
		assertFalse(IsPalindrome.isPalindrome(""zbcd""));
		assertTrue(IsPalindrome.isPalindrome(""xywyx""));
		assertFalse(IsPalindrome.isPalindrome(""xywyz""));
		assertFalse(IsPalindrome.isPalindrome(""xywzx""));
	}
}

// IsPalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPalindrome}.
* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.
*/
class IsPalindromeTest {
		
	@Test
	void testIsPalindrome() {
		assertTrue(IsPalindrome.isPalindrome(""""));
		assertTrue(IsPalindrome.isPalindrome(""aba""));
		assertTrue(IsPalindrome.isPalindrome(""aaaaa""));
		assertFalse(IsPalindrome.isPalindrome(""zbcd""));
		assertTrue(IsPalindrome.isPalindrome(""xywyx""));
		assertFalse(IsPalindrome.isPalindrome(""xywyz""));
		assertFalse(IsPalindrome.isPalindrome(""xywzx""));
	}
}

// IsPalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPalindrome}.
* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.
*/
class IsPalindromeTest {
		
	@Test
	void testIsPalindrome() {
		assertTrue(IsPalindrome.isPalindrome(""""));
		assertTrue(IsPalindrome.isPalindrome(""aba""));
		assertTrue(IsPalindrome.isPalindrome(""aaaaa""));
		assertFalse(IsPalindrome.isPalindrome(""zbcd""));
		assertTrue(IsPalindrome.isPalindrome(""xywyx""));
		assertFalse(IsPalindrome.isPalindrome(""xywyz""));
		assertFalse(IsPalindrome.isPalindrome(""xywzx""));
	}
}

// IsPalindrome"
cmpl-6tVOYAIUewq4RJZ98kMgQqKsLUEEI,/HumanEvalJava/src/main/java/original/id_49.java,10.01473069190979,,"// Modp.java
package original;

class Modp {

    /**
     * Return 2^n modulo p (be aware of numerics).
     * >>> modp(3, 5)
     * 3
     * >>> modp(1101, 101)
     * 2
     * >>> modp(0, 101)
     * 1
     * >>> modp(3, 11)
     * 8
     * >>> modp(100, 101)
     * 1
     * > modp(3, 5)
     * 3
     * > modp(1101, 101)
     * 2
     * > modp(0, 101)
     * 1
     * > modp(3, 11)
     * 8
     * > modp(100, 101)
     * 1
     * > modp(30, 5)
     * 4
     * > modp(31, 5)
     * 3
     */
    public static int modp(int n, int p) {
        int result = 1;
        for (int i = 0; i < n; i++) {
            result = (result * 2) % p;
        }
        return result;
    }
}
","// ModpTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Modp}.
* It contains ten unit test cases for the {@link Modp#modp(int, int)} method.
*/
class ModpTest {","// ModpTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Modp}.
* It contains ten unit test cases for the {@link Modp#modp(int, int)} method.
*/
class ModpTest {

		/**
		* Test case for {@link Modp#modp(int, int)} method.
		* It checks if the method returns the correct value for the given input.
		*/
		@Test
		void testModp() {
				assertEquals(3, Modp.modp(3, 5));
				assertEquals(2, Modp.modp(1101, 101));
				assertEquals(1, Modp.modp(0, 101));
				assertEquals(8, Modp.modp(3, 11));
				assertEquals(1, Modp.modp(100, 101));
				assertEquals(4, Modp.modp(30, 5));
				assertEquals(3, Modp.modp(31, 5));
				assertEquals(1, Modp.modp(1, 5));
				assertEquals(2, Modp.modp(2, 5));
				assertEquals(4, Modp.modp(4, 5));
		}
}"
cmpl-6tVPbZRaM0HyBkEfOZoLxjdysdKY5,/HumanEvalJava/src/main/java/original/id_5.java,61.618194818496704,length,"// Intersperse.java
package original;

import java.util.ArrayList;
import java.util.List;

class Intersperse {

    /**
     * Insert a number 'delimiter' between every two consecutive elements of input list `numbers'.
     *
     * > intersperse([], 4)
     * []
     * > intersperse([1, 2, 3], 4)
     * [1, 4, 2, 4, 3]
     * > intersperse([], 7)
     * []
     * > intersperse([5, 6, 3, 2], 8)
     * [5, 8, 6, 8, 3, 8, 2]
     * > intersperse([2, 2, 2], 2)
     * [2, 2, 2, 2, 2]
     */
    public static List<Object> intersperse(List<Object> numbers, int delimiter) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 0; i < numbers.size(); i++) {
            result.add(numbers.get(i));
            if (i < numbers.size() - 1) {
                result.add(delimiter);
            }
        }
        return result;
    }
}
","// IntersperseTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Intersperse}.
* It contains ten unit test cases for the {@link Intersperse#intersperse(List, int)} method.
*/
class IntersperseTest {","// IntersperseTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Intersperse}.
* It contains ten unit test cases for the {@link Intersperse#intersperse(List, int)} method.
*/
class IntersperseTest {

	@Test
	void testIntersperse_emptyList() {
		List<Object> numbers = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, Intersperse.intersperse(numbers, 4));
	}
	
	@Test
	void testIntersperse_oneElement() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		assertEquals(expected, Intersperse.intersperse(numbers, 4));
	}
	
	@Test
	void testIntersperse_twoElements() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(4);
		expected.add(2);
		assertEquals(expected, Intersperse.intersperse(numbers, 4));
	}
	
	@Test
	void testIntersperse_threeElements() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(4);
		expected.add(2);
		expected.add(4);
		expected.add(3);
		assertEquals(expected, Intersperse.intersperse(numbers, 4));
	}
	
	@Test
	void testIntersperse_fourElements() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(4);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(4);
		expected.add(2);
		expected.add(4);
		expected.add(3);
		expected.add(4);
		expected.add(4);
		assertEquals(expected, Intersperse.intersperse(numbers, 4));
	}
	
	@Test
	void testIntersperse_fiveElements() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(4);
		numbers.add(5);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(4);
		expected.add(2);
		expected.add(4);
		expected.add(3);
		expected.add(4);
		expected.add(4);
		expected.add(5);
		assertEquals(expected, Intersperse.intersperse(numbers, 4));
	}
	
	@Test
	void testIntersperse_sixElements() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(4);
		numbers.add(5);
		numbers.add(6);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(4);
		expected.add(2);
		expected.add(4);
		expected.add(3);
		expected.add(4);
		expected.add(4);
		expected.add(5);
		expected.add(4);
		expected.add(6);
		assertEquals(expected, Intersperse.intersperse(numbers, 4));
	}
	
	@Test
	void testIntersperse_sevenElements() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(4);
		numbers.add(5);
		numbers.add(6);
		numbers.add(7);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(4);
		expected.add(2);
		expected.add(4);
		expected.add(3);
		expected.add(4);
		expected.add(4);
		expected.add(5);
		expected.add(4);
		expected.add(6);
		expected.add(4);
		expected.add(7);
		assertEquals(expected, Intersperse.intersperse(numbers, 4));
	}
	
	@Test
	void testIntersperse_eightElements() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(4);
		numbers.add(5);
		numbers.add(6);
		numbers.add(7);
		numbers.add(8);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(4);
		expected.add(2);
		expected.add(4);
		expected.add(3);
		expected.add(4);
		expected.add(4);
		expected.add(5);
		expected.add(4);
		expected.add(6);
		expected.add(4);
		expected.add(7);
		expected.add(4);
		expected.add(8);
		assertEquals(expected, Intersperse.intersperse(numbers, 4));
	}
	
	@Test
	void testIntersperse_nineElements() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(4);
		numbers.add(5);
		numbers.add(6);
		numbers.add(7);
		numbers.add(8);
		numbers.add(9);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(4);
		expected.add(2);
		expected.add(4);
		expected.add(3);
		expected.add(4);
		expected.add(4);
		expected.add(5);
		expected.add(4);
		expected.add(6);
		expected.add(4);
		expected.add(7);
		expected.add(4);
		expected.add(8);
		expected.add(4);
		expected.add(9);
		assertEquals(expected, Intersperse.intersperse(numbers, 4));
	}
	
	@Test
	void testIntersperse_tenElements() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(4);
		numbers.add(5);
		numbers.add(6);
		numbers.add(7);
		numbers.add(8);
		numbers"
cmpl-6tVQb44bhnq7RSNsN5PiWGqbF2ih3,/HumanEvalJava/src/main/java/original/id_51.java,72.9074559211731,length,"// RemoveVowels.java
package original;

class RemoveVowels {

    /**
     * removeVowels is a function that takes string and returns string without vowels.
     *
     * > removeVowels(""abcdef"")
     * ""bcdf""
     * > removeVowels(""aaaaa"")
     * """"
     * > removeVowels(""aaBAA"")
     * ""B""
     * > removeVowels(""zbcd"")
     * ""zbcd""
     * > removeVowels("""")
     * """"
     * > removeVowels(""abcdef\nghijklm"")
     * ""bcdf\nghjklm""
     * > removeVowels(""fedcba"")
     * ""fdcb""
     * > removeVowels(""eeeee"")
     * """"
     * > removeVowels(""acBAA"")
     * ""cB""
     * > removeVowels(""EcBOO"")
     * ""cB""
     * > removeVowels(""ybcd"")
     * ""ybcd""
     */
    public static String removeVowels(String text) {
        String result = """";
        for (int i = 0; i < text.length(); i++) {
            char c = text.charAt(i);
            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {
                result += c;
            }
        }
        return result;
    }
}
","// RemoveVowelsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveVowels}.
* It contains ten unit test cases for the {@link RemoveVowels#removeVowels(String)} method.
*/
class RemoveVowelsTest {","// RemoveVowelsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveVowels}.
* It contains ten unit test cases for the {@link RemoveVowels#removeVowels(String)} method.
*/
class RemoveVowelsTest {

	@Test
	void testRemoveVowels() {
		assertEquals(""bcdf"", RemoveVowels.removeVowels(""abcdef""));
		assertEquals("""", RemoveVowels.removeVowels(""aaaaa""));
		assertEquals(""B"", RemoveVowels.removeVowels(""aaBAA""));
		assertEquals(""zbcd"", RemoveVowels.removeVowels(""zbcd""));
		assertEquals("""", RemoveVowels.removeVowels(""""));
		assertEquals(""bcdf\nghjklm"", RemoveVowels.removeVowels(""abcdef\nghijklm""));
		assertEquals(""fdcb"", RemoveVowels.removeVowels(""fedcba""));
		assertEquals("""", RemoveVowels.removeVowels(""eeeee""));
		assertEquals(""cB"", RemoveVowels.removeVowels(""acBAA""));
		assertEquals(""cB"", RemoveVowels.removeVowels(""EcBOO""));
		assertEquals(""ybcd"", RemoveVowels.removeVowels(""ybcd""));
	}
}

// RemoveVowelsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveVowels}.
* It contains ten unit test cases for the {@link RemoveVowels#removeVowels(String)} method.
*/
class RemoveVowelsTest {
		
	@Test
	void testRemoveVowels() {
		assertEquals(""bcdf"", RemoveVowels.removeVowels(""abcdef""));
		assertEquals("""", RemoveVowels.removeVowels(""aaaaa""));
		assertEquals(""B"", RemoveVowels.removeVowels(""aaBAA""));
		assertEquals(""zbcd"", RemoveVowels.removeVowels(""zbcd""));
		assertEquals("""", RemoveVowels.removeVowels(""""));
		assertEquals(""bcdf\nghjklm"", RemoveVowels.removeVowels(""abcdef\nghijklm""));
		assertEquals(""fdcb"", RemoveVowels.removeVowels(""fedcba""));
		assertEquals("""", RemoveVowels.removeVowels(""eeeee""));
		assertEquals(""cB"", RemoveVowels.removeVowels(""acBAA""));
		assertEquals(""cB"", RemoveVowels.removeVowels(""EcBOO""));
		assertEquals(""ybcd"", RemoveVowels.removeVowels(""ybcd""));
	}
}

// RemoveVowelsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveVowels}.
* It contains ten unit test cases for the {@link RemoveVowels#removeVowels(String)} method.
*/
class RemoveVowelsTest {
		
	@Test
	void testRemoveVowels() {
		assertEquals(""bcdf"", RemoveVowels.removeVowels(""abcdef""));
		assertEquals("""", RemoveVowels.removeVowels(""aaaaa""));
		assertEquals(""B"", RemoveVowels.removeVowels(""aaBAA""));
		assertEquals(""zbcd"", RemoveVowels.removeVowels(""zbcd""));
		assertEquals("""", RemoveVowels.removeVowels(""""));
		assertEquals(""bcdf\nghjklm"", RemoveVowels.removeVowels(""abcdef\nghijklm""));
		assertEquals(""fdcb"", RemoveVowels.removeVowels(""fedcba""));
		assertEquals("""", RemoveVowels.removeVowels(""eeeee""));
		assertEquals(""cB"", RemoveVowels.removeVowels(""acBAA""));
		assertEquals(""cB"", RemoveVowels.removeVowels(""EcBOO""));
		assertEquals(""ybcd"", RemoveVowels.removeVowels(""ybcd""));
	}
}

// RemoveVowelsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveVowels}.
* It contains ten unit test cases for the {@link RemoveVowels#removeVowels(String)} method.
*/
class RemoveVowelsTest {
		
	@Test
	void testRemoveVowels() {
		assertEquals(""bcdf"", RemoveVowels.removeVowels(""abcdef""));
		assertEquals("""", RemoveVowels.removeVowels(""aaaaa""));
		assertEquals(""B"", RemoveVowels.removeVowels(""aaBAA""));
		assertEquals(""zbcd"", RemoveVowels.removeVowels(""zbcd""));
		assertEquals("""", RemoveVowels.removeVowels(""""));
		assertEquals(""bcdf\nghjklm"", RemoveVowels.removeVowels(""abcdef\nghijklm""));
		assertEquals(""fdcb"", RemoveVowels.removeVowels(""fedcba""));
		assertEquals("""", RemoveVowels.removeVowels(""eeeee""));
		assertEquals(""cB"", RemoveVowels.removeVowels(""acBAA""));
		assertEquals(""cB"", RemoveVowels.removeVowels(""EcBOO""));
		assertEquals(""ybcd"", RemoveVowels.removeVowels(""ybcd""));
	}
}

// RemoveVowelsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveVowels}.
* It contains ten unit test cases for the {@link RemoveVowels#removeVowels(String)} method.
*/
class RemoveVowelsTest {
		
	@Test
	void testRemoveVowels() {
		assertEquals(""bcdf"", RemoveVowels.removeVowels(""abcdef""));
		assertEquals("""", RemoveVowels.removeVowels(""aaaaa""));
		assertEquals(""B"", RemoveVowels.removeVowels(""aaBAA""));
		assertEquals(""zbcd"", RemoveVowels.removeVowels(""zbcd""));
		assertEquals("""", RemoveVowels.removeVowels(""""));
		assertEquals(""bcdf\nghjklm"", RemoveVowels.removeVowels(""abcdef\nghijklm""));
		assertEquals(""fdcb"", RemoveVowels.removeVowels(""fedcba""));
		assertEquals("""", RemoveVowels.removeVowels(""eeeee""));
		assertEquals(""cB"", RemoveVowels.removeVowels(""acBAA""));
		assertEquals(""cB"", RemoveVowels.removeVowels(""EcBOO""));
		assertEquals(""ybcd"", RemoveVowels.removeVowels(""ybcd""));
	}
}

// RemoveVowelsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveVowels}.
* It contains ten unit test cases for the {@link RemoveVowels#removeVowels(String)} method.
*/
class RemoveVowelsTest {
		
	@Test
	void testRemoveVowels() {
		assertEquals(""bcdf"", Remove"
cmpl-6tVRmSL4SUvXSdNR5neLV8dU1UUCm,/HumanEvalJava/src/main/java/original/id_52.java,60.457823514938354,length,"// BelowThreshold.java
package original;

import java.util.List;

class BelowThreshold {

    /**
     * Return True if all numbers in the list l are below threshold t.
     *
     * > belowThreshold([1, 2, 4, 10], 100)
     * true
     * > belowThreshold([1, 20, 4, 10], 5)
     * false
     * > belowThreshold([1, 20, 4, 10], 21)
     * true
     * > belowThreshold([1, 20, 4, 10], 22)
     * true
     * > belowThreshold([1, 8, 4, 10], 11)
     * true
     * > belowThreshold([1, 8, 4, 10], 10)
     * false
     */
    public static Boolean belowThreshold(List<Integer> l, int t) {
        for (int i = 0; i < l.size(); i++) {
            if (l.get(i) >= t) {
                return false;
            }
        }
        return true;
    }
}
","// BelowThresholdTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowThreshold}.
* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.
*/
class BelowThresholdTest {","// BelowThresholdTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowThreshold}.
* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.
*/
class BelowThresholdTest {

	@Test
	void testBelowThreshold() {
		List<Integer> l = List.of(1, 2, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 100));
		l = List.of(1, 20, 4, 10);
		assertFalse(BelowThreshold.belowThreshold(l, 5));
		l = List.of(1, 20, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 21));
		l = List.of(1, 20, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 22));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 11));
		l = List.of(1, 8, 4, 10);
		assertFalse(BelowThreshold.belowThreshold(l, 10));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 9));
		l = List.of(1, 8, 4, 10);
		assertFalse(BelowThreshold.belowThreshold(l, 8));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 7));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 6));
	}
}

// BelowThresholdTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowThreshold}.
* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.
*/
class BelowThresholdTest {
		
	@Test
	void testBelowThreshold() {
		List<Integer> l = List.of(1, 2, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 100));
		l = List.of(1, 20, 4, 10);
		assertFalse(BelowThreshold.belowThreshold(l, 5));
		l = List.of(1, 20, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 21));
		l = List.of(1, 20, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 22));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 11));
		l = List.of(1, 8, 4, 10);
		assertFalse(BelowThreshold.belowThreshold(l, 10));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 9));
		l = List.of(1, 8, 4, 10);
		assertFalse(BelowThreshold.belowThreshold(l, 8));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 7));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 6));
	}
}

// BelowThresholdTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowThreshold}.
* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.
*/
class BelowThresholdTest {
		
	@Test
	void testBelowThreshold() {
		List<Integer> l = List.of(1, 2, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 100));
		l = List.of(1, 20, 4, 10);
		assertFalse(BelowThreshold.belowThreshold(l, 5));
		l = List.of(1, 20, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 21));
		l = List.of(1, 20, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 22));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 11));
		l = List.of(1, 8, 4, 10);
		assertFalse(BelowThreshold.belowThreshold(l, 10));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 9));
		l = List.of(1, 8, 4, 10);
		assertFalse(BelowThreshold.belowThreshold(l, 8));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 7));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 6));
	}
}

// BelowThresholdTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowThreshold}.
* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.
*/
class BelowThresholdTest {
		
	@Test
	void testBelowThreshold() {
		List<Integer> l = List.of(1, 2, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 100));
		l = List.of(1, 20, 4, 10);
		assertFalse(BelowThreshold.belowThreshold(l, 5));
		l = List.of(1, 20, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 21));
		l = List.of(1, 20, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 22));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 11));
		l = List.of(1, 8, 4, 10);
		assertFalse(BelowThreshold.belowThreshold(l, 10));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 9));
		l = List.of(1, 8, 4, 10);
		assertFalse(BelowThreshold.belowThreshold(l, 8));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 7));
		l = List.of(1, 8, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 6));
	}
}

// BelowThresholdTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowThreshold}.
* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.
*/
class BelowThresholdTest {
		
	@Test
	void testBelowThreshold() {
		List<Integer> l = List.of(1, 2, 4, 10);
		assertTrue(BelowThreshold.belowThreshold(l, 100));
		l = List.of(1, 20, 4, 10);
		assertFalse(BelowThreshold.below"
cmpl-6tVSkv1fmBMD4J4NSP9m0SIcr13fi,/HumanEvalJava/src/main/java/original/id_53.java,55.86816716194153,length,"// Add.java
package original;

class Add {

    /**
     * Add two numbers x and y
     *
     * > add(0, 1)
     * 1
     * > add(1, 0)
     * 1
     * > add(2, 3)
     * 5
     * > add(5, 7)
     * 12
     * > add(7, 5)
     * 12
     * > add(572, 725)
     * 1297
     * > add(51, 804)
     * 855
     * > add(645, 96)
     * 741
     * > add(712, 853)
     * 1565
     * > add(223, 101)
     * 324
     * > add(76, 29)
     * 105
     * > add(416, 149)
     * 565
     * > add(145, 409)
     * 554
     * > add(535, 430)
     * 965
     * > add(118, 303)
     * 421
     * > add(287, 94)
     * 381
     * > add(768, 257)
     * 1025
     * > add(421, 677)
     * 1098
     * > add(802, 814)
     * 1616
     * > add(510, 922)
     * 1432
     * > add(345, 819)
     * 1164
     * > add(895, 436)
     * 1331
     * > add(123, 424)
     * 547
     * > add(923, 245)
     * 1168
     * > add(23, 438)
     * 461
     * > add(565, 133)
     * 698
     * > add(945, 925)
     * 1870
     * > add(261, 983)
     * 1244
     * > add(139, 577)
     * 716
     * > add(763, 178)
     * 941
     * > add(147, 892)
     * 1039
     * > add(436, 402)
     * 838
     * > add(610, 581)
     * 1191
     * > add(103, 416)
     * 519
     * > add(339, 990)
     * 1329
     * > add(130, 504)
     * 634
     * > add(242, 717)
     * 959
     * > add(562, 110)
     * 672
     * > add(396, 909)
     * 1305
     * > add(887, 703)
     * 1590
     * > add(870, 551)
     * 1421
     * > add(422, 391)
     * 813
     * > add(299, 505)
     * 804
     * > add(346, 56)
     * 402
     * > add(36, 706)
     * 742
     * > add(738, 411)
     * 1149
     * > add(679, 87)
     * 766
     * > add(25, 303)
     * 328
     * > add(161, 612)
     * 773
     * > add(306, 841)
     * 1147
     * > add(973, 411)
     * 1384
     * > add(711, 157)
     * 868
     * > add(471, 27)
     * 498
     * > add(714, 792)
     * 1506
     * > add(38, 206)
     * 244
     * > add(907, 343)
     * 1250
     * > add(23, 760)
     * 783
     * > add(524, 859)
     * 1383
     * > add(30, 529)
     * 559
     * > add(341, 691)
     * 1032
     * > add(167, 729)
     * 896
     * > add(636, 289)
     * 925
     * > add(503, 144)
     * 647
     * > add(51, 985)
     * 1036
     * > add(287, 149)
     * 436
     * > add(659, 75)
     * 734
     * > add(462, 797)
     * 1259
     * > add(406, 141)
     * 547
     * > add(106, 44)
     * 150
     * > add(300, 934)
     * 1234
     * > add(471, 524)
     * 995
     * > add(122, 429)
     * 551
     * > add(735, 195)
     * 930
     * > add(335, 484)
     * 819
     * > add(28, 809)
     * 837
     * > add(430, 20)
     * 450
     * > add(916, 635)
     * 1551
     * > add(301, 999)
     * 1300
     * > add(454, 466)
     * 920
     * > add(905, 259)
     * 1164
     * > add(168, 205)
     * 373
     * > add(570, 434)
     * 1004
     * > add(64, 959)
     * 1023
     * > add(957, 510)
     * 1467
     * > add(722, 598)
     * 1320
     * > add(770, 226)
     * 996
     * > add(579, 66)
     * 645
     * > add(117, 674)
     * 791
     * > add(530, 30)
     * 560
     * > add(776, 345)
     * 1121
     * > add(327, 389)
     * 716
     * > add(596, 12)
     * 608
     * > add(599, 511)
     * 1110
     * > add(936, 476)
     * 1412
     * > add(461, 14)
     * 475
     * > add(966, 157)
     * 1123
     * > add(326, 91)
     * 417
     * > add(392, 455)
     * 847
     * > add(446, 477)
     * 923
     * > add(324, 860)
     * 1184
     * > add(945, 85)
     * 1030
     * > add(886, 582)
     * 1468
     * > add(886, 712)
     * 1598
     * > add(842, 953)
     * 1795
     */
    public static int add(int x, int y) {
        return x + y;
    }
}
","// AddTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the {@link Add#add(int, int)} method.
*/
class AddTest {","// AddTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the {@link Add#add(int, int)} method.
*/
class AddTest {

	@Test
	void testAdd() {
		assertEquals(1, Add.add(0, 1));
		assertEquals(1, Add.add(1, 0));
		assertEquals(5, Add.add(2, 3));
		assertEquals(12, Add.add(5, 7));
		assertEquals(12, Add.add(7, 5));
		assertEquals(1297, Add.add(572, 725));
		assertEquals(855, Add.add(51, 804));
		assertEquals(741, Add.add(645, 96));
		assertEquals(1565, Add.add(712, 853));
		assertEquals(324, Add.add(223, 101));
	}
}

// AddTest2.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the {@link Add#add(int, int)} method.
*/
class AddTest2 {
		
	@Test
	void testAdd() {
		assertEquals(105, Add.add(76, 29));
		assertEquals(565, Add.add(416, 149));
		assertEquals(554, Add.add(145, 409));
		assertEquals(965, Add.add(535, 430));
		assertEquals(421, Add.add(118, 303));
		assertEquals(381, Add.add(287, 94));
		assertEquals(1025, Add.add(768, 257));
		assertEquals(1098, Add.add(421, 677));
		assertEquals(1616, Add.add(802, 814));
		assertEquals(1432, Add.add(510, 922));
	}
}

// AddTest3.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the {@link Add#add(int, int)} method.
*/
class AddTest3 {
		
	@Test
	void testAdd() {
		assertEquals(1164, Add.add(345, 819));
		assertEquals(1331, Add.add(895, 436));
		assertEquals(547, Add.add(123, 424));
		assertEquals(1168, Add.add(923, 245));
		assertEquals(461, Add.add(23, 438));
		assertEquals(698, Add.add(565, 133));
		assertEquals(1870, Add.add(945, 925));
		assertEquals(1244, Add.add(261, 983));
		assertEquals(716, Add.add(139, 577));
		assertEquals(941, Add.add(763, 178));
	}
}

// AddTest4.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the {@link Add#add(int, int)} method.
*/
class AddTest4 {
		
	@Test
	void testAdd() {
		assertEquals(1039, Add.add(147, 892));
		assertEquals(838, Add.add(436, 402));
		assertEquals(1191, Add.add(610, 581));
		assertEquals(519, Add.add(103, 416));
		assertEquals(1329, Add.add(339, 990));
		assertEquals(634, Add.add(130, 504));
		assertEquals(959, Add.add(242, 717));
		assertEquals(672, Add.add(562, 110));
		assertEquals(1305, Add.add(396, 909));
		assertEquals(1590, Add.add(887, 703));
	}
}

// AddTest5.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the {@link Add#add(int, int)} method.
*/
class AddTest5 {
		
	@Test
	void testAdd() {
		assertEquals(1421, Add.add(870, 551));
		assertEquals(813, Add.add(422, 391));
		assertEquals(804, Add.add(299, 505));
		assertEquals(402, Add.add(346, 56));
		assertEquals(742, Add.add(36, 706));
		assertEquals(1149, Add.add(738, 411));
		assertEquals(766, Add.add(679, 87));
		assertEquals(328, Add.add(25, 303));
		assertEquals(773, Add.add(161, 612));
		assertEquals(1147, Add.add(306, 841));
	}
}

// AddTest6.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the {@link Add#add(int, int)} method.
*/
class AddTest6 {
		
	@Test
	void testAdd() {
		assertEquals(1384, Add.add(973, 411));
		assertEquals(868, Add.add(711, 157));
		assertEquals(498, Add.add(471, 27));
		assertEquals(1506, Add.add(714, 792));
		assertEquals(244, Add.add(38, 206));
		assertEquals(1250, Add.add(907, 343));
		assertEquals(783, Add.add(23, 760));
		assertEquals(1383, Add.add(524, 859));
		assertEquals(559, Add.add(30, 529));
		assertEquals(1032, Add.add(341, 691));
	}
}

// AddTest7.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the {@link Add#add(int, int)} method.
*/
class AddTest7 {
		
	@Test
	void testAdd() {
		assertEquals(896, Add.add(167, 729));
		assertEquals(925, Add.add(636, 289));
		assertEquals(647, Add.add(503, 144));
		assertEquals(1036, Add.add(51, 985));
		assertEquals(436, Add.add(287, 149));
		assertEquals(734, Add.add(659, 75));
		assertEquals(1259, Add.add(462, 797));
		assertEquals(547, Add.add(406, 141));
		assertEquals(150, Add.add(106, 44));
		assertEquals(1234, Add.add(300, 934));
	}
}

// AddTest8.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add}.
* It contains ten unit test cases for the"
cmpl-6tVTnyQgQ5akenNxn9P2wUVr7JrNH,/HumanEvalJava/src/main/java/original/id_54.java,51.81966304779053,length,"// SameChars.java
package original;

class SameChars {

    /**
     * Check if two words have the same characters.
     *
     * > sameChars(""abcd"", ""dddddddabce"")
     * false
     * > sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
     * true
     * > sameChars(""abcd"", ""dddddddabc"")
     * true
     * > sameChars(""dddddddabc"", ""abcd"")
     * true
     * > sameChars(""eabcd"", ""dddddddabc"")
     * false
     * > sameChars(""abcd"", ""dddddddabcf"")
     * false
     * > sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
     * false
     * > sameChars(""aabb"", ""aaccc"")
     * false
     */
    public static Boolean sameChars(String s0, String s1) {
        int[] count0 = new int[26];
        int[] count1 = new int[26];
        for (int i = 0; i < s0.length(); i++) {
            count0[s0.charAt(i) - 'a'] = 1;
        }
        for (int i = 0; i < s1.length(); i++) {
            count1[s1.charAt(i) - 'a'] = 1;
        }
        for (int i = 0; i < 26; i++) {
            if (count0[i] != count1[i]) {
                return false;
            }
        }
        return true;
    }
}
","// SameCharsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SameChars}.
* It contains ten unit test cases for the {@link SameChars#sameChars(String, String)} method.
*/
class SameCharsTest {","// SameCharsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SameChars}.
* It contains ten unit test cases for the {@link SameChars#sameChars(String, String)} method.
*/
class SameCharsTest {

		@Test
		void testSameChars() {
			assertFalse(SameChars.sameChars(""abcd"", ""dddddddabce""));
			assertTrue(SameChars.sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc""));
			assertTrue(SameChars.sameChars(""abcd"", ""dddddddabc""));
			assertTrue(SameChars.sameChars(""dddddddabc"", ""abcd""));
			assertFalse(SameChars.sameChars(""eabcd"", ""dddddddabc""));
			assertFalse(SameChars.sameChars(""abcd"", ""dddddddabcf""));
			assertFalse(SameChars.sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc""));
			assertFalse(SameChars.sameChars(""aabb"", ""aaccc""));
		}
}

// SameChars.java
package refactored;

class SameChars {

    /**
     * Check if two words have the same characters.
     *
     * > sameChars(""abcd"", ""dddddddabce"")
     * false
     * > sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
     * true
     * > sameChars(""abcd"", ""dddddddabc"")
     * true
     * > sameChars(""dddddddabc"", ""abcd"")
     * true
     * > sameChars(""eabcd"", ""dddddddabc"")
     * false
     * > sameChars(""abcd"", ""dddddddabcf"")
     * false
     * > sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
     * false
     * > sameChars(""aabb"", ""aaccc"")
     * false
     */
    public static Boolean sameChars(String s0, String s1) {
        int[] count0 = new int[26];
        int[] count1 = new int[26];
        for (int i = 0; i < s0.length(); i++) {
            count0[s0.charAt(i) - 'a'] = 1;
        }
        for (int i = 0; i < s1.length(); i++) {
            count1[s1.charAt(i) - 'a'] = 1;
        }
        for (int i = 0; i < 26; i++) {
            if (count0[i] != count1[i]) {
                return false;
            }
        }
        return true;
    }
}

// SameCharsTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SameChars}.
* It contains ten unit test cases for the {@link SameChars#sameChars(String, String)} method.
*/
class SameCharsTest {
		
		@Test
		void testSameChars() {
			assertFalse(SameChars.sameChars(""abcd"", ""dddddddabce""));
			assertTrue(SameChars.sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc""));
			assertTrue(SameChars.sameChars(""abcd"", ""dddddddabc""));
			assertTrue(SameChars.sameChars(""dddddddabc"", ""abcd""));
			assertFalse(SameChars.sameChars(""eabcd"", ""dddddddabc""));
			assertFalse(SameChars.sameChars(""abcd"", ""dddddddabcf""));
			assertFalse(SameChars.sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc""));
			assertFalse(SameChars.sameChars(""aabb"", ""aaccc""));
		}
}

// SameChars.java
package refactored;

class SameChars {

    /**
     * Check if two words have the same characters.
     *
     * > sameChars(""abcd"", ""dddddddabce"")
     * false
     * > sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
     * true
     * > sameChars(""abcd"", ""dddddddabc"")
     * true
     * > sameChars(""dddddddabc"", ""abcd"")
     * true
     * > sameChars(""eabcd"", ""dddddddabc"")
     * false
     * > sameChars(""abcd"", ""dddddddabcf"")
     * false
     * > sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
     * false
     * > sameChars(""aabb"", ""aaccc"")
     * false
     */
    public static Boolean sameChars(String s0, String s1) {
        int[] count0 = new int[26];
        int[] count1 = new int[26];
        for (int i = 0; i < s0.length(); i++) {
            count0[s0.charAt(i) - 'a'] = 1;
        }
        for (int i = 0; i < s1.length(); i++) {
            count1[s1.charAt(i) - 'a'] = 1;
        }
        for (int i = 0; i < 26; i++) {
            if (count0[i] != count1[i]) {
                return false;
            }
        }
        return true;
    }
}

// SameCharsTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SameChars}.
* It contains ten unit test cases for the {@link SameChars#sameChars(String, String)} method.
*/
class SameCharsTest {
		
		@Test
		void testSameChars() {
			assertFalse(SameChars.sameChars(""abcd"", ""dddddddabce""));
			assertTrue(SameChars.sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc""));
			assertTrue(SameChars.sameChars(""abcd"", ""dddddddabc""));
			assertTrue(SameChars.sameChars(""dddddddabc"", ""abcd""));
			assertFalse(SameChars.sameChars(""eabcd"", ""dddddddabc""));
			assertFalse(SameChars.sameChars(""abcd"", ""dddddddabcf""));
			assertFalse(SameChars.sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc""));
			assertFalse(SameChars.sameChars(""aabb"", ""aaccc""));
		}
}

// SameChars.java
package refactored;

class SameChars {

    /**
     * Check if two words have the same characters.
     *
     * > sameChars(""abcd"", ""dddddddabce"")
     * false
     * > sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
     * true
     * > sameChars(""abcd"", ""dddddddabc"")
     * true
     * > sameChars(""dddddddabc"", ""abcd"")
     * true
     * > sameChars(""eabcd"", ""dddddddabc"")
     * false
     * > sameChars(""abcd"", ""dddddddabcf"")
     * false
     * > sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
     * false
     * > sameChars(""aabb"", ""aaccc"")
     * false
     */
    public static Boolean sameCh"
cmpl-6tVUqVwbKiPRbIbPy7CgdhyDebXnB,/HumanEvalJava/src/main/java/original/id_55.java,51.898858070373535,length,"// Fib.java
package original;

class Fib {

    /**
     * Return n-th Fibonacci number.
     *
     * > fib(10)
     * 55
     * > fib(1)
     * 1
     * > fib(8)
     * 21
     * > fib(11)
     * 89
     * > fib(12)
     * 144
     */
    public static int fib(int n) {
        int a = 0;
        int b = 1;
        int c = 1;
        for (int i = 0; i < n - 1; i++) {
            c = a + b;
            a = b;
            b = c;
        }
        return c;
    }
}
","// FibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {","// FibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {

	@Test
	void testFib() {
		assertEquals(1, Fib.fib(1));
		assertEquals(1, Fib.fib(2));
		assertEquals(2, Fib.fib(3));
		assertEquals(3, Fib.fib(4));
		assertEquals(5, Fib.fib(5));
		assertEquals(8, Fib.fib(6));
		assertEquals(13, Fib.fib(7));
		assertEquals(21, Fib.fib(8));
		assertEquals(34, Fib.fib(9));
		assertEquals(55, Fib.fib(10));
	}
}

// FibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {
		
	@Test
	void testFib() {
		assertEquals(1, Fib.fib(1));
		assertEquals(1, Fib.fib(2));
		assertEquals(2, Fib.fib(3));
		assertEquals(3, Fib.fib(4));
		assertEquals(5, Fib.fib(5));
		assertEquals(8, Fib.fib(6));
		assertEquals(13, Fib.fib(7));
		assertEquals(21, Fib.fib(8));
		assertEquals(34, Fib.fib(9));
		assertEquals(55, Fib.fib(10));
	}
}

// FibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {
		
	@Test
	void testFib() {
		assertEquals(1, Fib.fib(1));
		assertEquals(1, Fib.fib(2));
		assertEquals(2, Fib.fib(3));
		assertEquals(3, Fib.fib(4));
		assertEquals(5, Fib.fib(5));
		assertEquals(8, Fib.fib(6));
		assertEquals(13, Fib.fib(7));
		assertEquals(21, Fib.fib(8));
		assertEquals(34, Fib.fib(9));
		assertEquals(55, Fib.fib(10));
	}
}

// FibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {
		
	@Test
	void testFib() {
		assertEquals(1, Fib.fib(1));
		assertEquals(1, Fib.fib(2));
		assertEquals(2, Fib.fib(3));
		assertEquals(3, Fib.fib(4));
		assertEquals(5, Fib.fib(5));
		assertEquals(8, Fib.fib(6));
		assertEquals(13, Fib.fib(7));
		assertEquals(21, Fib.fib(8));
		assertEquals(34, Fib.fib(9));
		assertEquals(55, Fib.fib(10));
	}
}

// FibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {
		
	@Test
	void testFib() {
		assertEquals(1, Fib.fib(1));
		assertEquals(1, Fib.fib(2));
		assertEquals(2, Fib.fib(3));
		assertEquals(3, Fib.fib(4));
		assertEquals(5, Fib.fib(5));
		assertEquals(8, Fib.fib(6));
		assertEquals(13, Fib.fib(7));
		assertEquals(21, Fib.fib(8));
		assertEquals(34, Fib.fib(9));
		assertEquals(55, Fib.fib(10));
	}
}

// FibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {
		
	@Test
	void testFib() {
		assertEquals(1, Fib.fib(1));
		assertEquals(1, Fib.fib(2));
		assertEquals(2, Fib.fib(3));
		assertEquals(3, Fib.fib(4));
		assertEquals(5, Fib.fib(5));
		assertEquals(8, Fib.fib(6));
		assertEquals(13, Fib.fib(7));
		assertEquals(21, Fib.fib(8));
		assertEquals(34, Fib.fib(9));
		assertEquals(55, Fib.fib(10));
	}
}

// FibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {
		
	@Test
	void testFib() {
		assertEquals(1, Fib.fib(1));
		assertEquals(1, Fib.fib(2));
		assertEquals(2, Fib.fib(3));
		assertEquals(3, Fib.fib(4));
		assertEquals(5, Fib.fib(5));
		assertEquals(8, Fib.fib(6));
		assertEquals(13, Fib.fib(7));
		assertEquals(21, Fib.fib(8));
		assertEquals(34, Fib.fib(9));
		assertEquals(55, Fib.fib(10));
	}
}

// FibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib}.
* It contains ten unit test cases for the {@link Fib#fib(int)} method.
*/
class FibTest {
		
	@Test
	void testFib() {
		assertEquals(1, Fib.fib(1));
		assertEquals(1, Fib.fib(2));
		assertEquals(2, Fib.fib(3));
		assertEquals(3, Fib.fib(4));
		assertEquals(5, Fib.fib(5));
		assertEquals(8, Fib.fib(6));
		assertEquals(13, Fib.fib(7));
		assertEquals(21, Fib.fib("
cmpl-6tVVtfsb2bjLNcE5hjJpJkmKIOYis,/HumanEvalJava/src/main/java/original/id_56.java,58.372637033462524,length,"// CorrectBracketing.java
package original;

class CorrectBracketing {

    /**
     * Brackets is a string of ""<"" and "">"".
     * return true if every opening bracket has a corresponding closing bracket.
     *
     * > correctBracketing(""<>"")
     * true
     * > correctBracketing(""<<><>>"")
     * true
     * > correctBracketing(""<><><<><>><>"")
     * true
     * > correctBracketing(""<><><<<><><>><>><<><><<>>>"")
     * true
     * > correctBracketing(""<<<><>>>>"")
     * false
     * > correctBracketing(""><<>"")
     * false
     * > correctBracketing(""<"")
     * false
     * > correctBracketing(""<<<<"")
     * false
     * > correctBracketing("">"")
     * false
     * > correctBracketing(""<<>"")
     * false
     * > correctBracketing(""<><><<><>><>><<>"")
     * false
     * > correctBracketing(""<><><<><>><>>><>"")
     * false
     */
    public static Boolean correctBracketing(String brackets) {
        int count = 0;
        for (int i = 0; i < brackets.length(); i++) {
            if (brackets.charAt(i) == '<') {
                count++;
            } else {
                count--;
            }
            if (count < 0) {
                return false;
            }
        }
        return count == 0;
    }
}
","// CorrectBracketingTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing}.
* It contains ten unit test cases for the {@link CorrectBracketing#correctBracketing(String)} method.
*/
class CorrectBracketingTest {","// CorrectBracketingTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing}.
* It contains ten unit test cases for the {@link CorrectBracketing#correctBracketing(String)} method.
*/
class CorrectBracketingTest {

	@Test
	void testCorrectBracketing1() {
		assertTrue(CorrectBracketing.correctBracketing(""<>""));
	}
	
	@Test
	void testCorrectBracketing2() {
		assertTrue(CorrectBracketing.correctBracketing(""<<><>>""));
	}
	
	@Test
	void testCorrectBracketing3() {
		assertTrue(CorrectBracketing.correctBracketing(""<><><<><>><>""));
	}
	
	@Test
	void testCorrectBracketing4() {
		assertTrue(CorrectBracketing.correctBracketing(""<><><<<><><>><>><<><><<>>>""));
	}
	
	@Test
	void testCorrectBracketing5() {
		assertFalse(CorrectBracketing.correctBracketing(""<<<><>>>>""));
	}
	
	@Test
	void testCorrectBracketing6() {
		assertFalse(CorrectBracketing.correctBracketing(""><<>""));
	}
	
	@Test
	void testCorrectBracketing7() {
		assertFalse(CorrectBracketing.correctBracketing(""<""));
	}
	
	@Test
	void testCorrectBracketing8() {
		assertFalse(CorrectBracketing.correctBracketing(""<<<<""));
	}
	
	@Test
	void testCorrectBracketing9() {
		assertFalse(CorrectBracketing.correctBracketing("">""));
	}
	
	@Test
	void testCorrectBracketing10() {
		assertFalse(CorrectBracketing.correctBracketing(""<<>""));
	}
	
}

// CorrectBracketingTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing}.
* It contains ten unit test cases for the {@link CorrectBracketing#correctBracketing(String)} method.
*/
class CorrectBracketingTest {
		
	@Test
	void testCorrectBracketing1() {
		assertTrue(CorrectBracketing.correctBracketing(""<>""));
	}
	
	@Test
	void testCorrectBracketing2() {
		assertTrue(CorrectBracketing.correctBracketing(""<<><>>""));
	}
	
	@Test
	void testCorrectBracketing3() {
		assertTrue(CorrectBracketing.correctBracketing(""<><><<><>><>""));
	}
	
	@Test
	void testCorrectBracketing4() {
		assertTrue(CorrectBracketing.correctBracketing(""<><><<<><><>><>><<><><<>>>""));
	}
	
	@Test
	void testCorrectBracketing5() {
		assertFalse(CorrectBracketing.correctBracketing(""<<<><>>>>""));
	}
	
	@Test
	void testCorrectBracketing6() {
		assertFalse(CorrectBracketing.correctBracketing(""><<>""));
	}
	
	@Test
	void testCorrectBracketing7() {
		assertFalse(CorrectBracketing.correctBracketing(""<""));
	}
	
	@Test
	void testCorrectBracketing8() {
		assertFalse(CorrectBracketing.correctBracketing(""<<<<""));
	}
	
	@Test
	void testCorrectBracketing9() {
		assertFalse(CorrectBracketing.correctBracketing("">""));
	}
	
	@Test
	void testCorrectBracketing10() {
		assertFalse(CorrectBracketing.correctBracketing(""<<>""));
	}
	
}

// CorrectBracketingTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing}.
* It contains ten unit test cases for the {@link CorrectBracketing#correctBracketing(String)} method.
*/
class CorrectBracketingTest {
		
	@Test
	void testCorrectBracketing1() {
		assertTrue(CorrectBracketing.correctBracketing(""<>""));
	}
	
	@Test
	void testCorrectBracketing2() {
		assertTrue(CorrectBracketing.correctBracketing(""<<><>>""));
	}
	
	@Test
	void testCorrectBracketing3() {
		assertTrue(CorrectBracketing.correctBracketing(""<><><<><>><>""));
	}
	
	@Test
	void testCorrectBracketing4() {
		assertTrue(CorrectBracketing.correctBracketing(""<><><<<><><>><>><<><><<>>>""));
	}
	
	@Test
	void testCorrectBracketing5() {
		assertFalse(CorrectBracketing.correctBracketing(""<<<><>>>>""));
	}
	
	@Test
	void testCorrectBracketing6() {
		assertFalse(CorrectBracketing.correctBracketing(""><<>""));
	}
	
	@Test
	void testCorrectBracketing7() {
		assertFalse(CorrectBracketing.correctBracketing(""<""));
	}
	
	@Test
	void testCorrectBracketing8() {
		assertFalse(CorrectBracketing.correctBracketing(""<<<<""));
	}
	
	@Test
	void testCorrectBracketing9() {
		assertFalse(CorrectBracketing.correctBracketing("">""));
	}
	
	@Test
	void testCorrectBracketing10() {
		assertFalse(CorrectBracketing.correctBracketing(""<<>""));
	}
	
}

// CorrectBracketingTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing}.
* It contains ten unit test cases for the {@link CorrectBracketing#correctBracketing(String)} method.
*/
class CorrectBracketingTest {
		
	@Test
	void testCorrectBracketing1() {
		assertTrue(CorrectBracketing.correctBracketing(""<>""));
	}
	
	@Test
	void testCorrectBracketing2() {
		assertTrue(CorrectBracketing.correctBracketing(""<<><>>""));
	}
	
	@Test
	void testCorrectBracketing3() {
		assertTrue(CorrectBracketing.correctBracketing(""<><><<><>><>""));
	}
	
	@Test
	void testCorrectBracketing4() {
		assertTrue(CorrectBracketing.correctBracketing(""<><><<<><><>><>><<><><<>>>""));
	}
	
	@Test
	void testCorrectBracketing5() {
		assertFalse(CorrectBracketing.correctBracketing(""<<<><>>>>""));
	}
	
	@Test
	void testCorrectBracketing6() {
		assertFalse(CorrectBracketing.correctBracketing(""><<>""));
	}
	
	@Test
	void testCorrectBracketing7() {
		assertFalse(CorrectBracketing.correctBracketing(""<""));
	}
	
	@Test
	void testCorrectBracketing8() {
		assertFalse(CorrectBracketing.correctBracketing(""<<<<""));
	}
	
	@Test
	void testCorrectBracketing9() {
		assertFalse(CorrectBracketing.correctBracketing("">""));
	}
	
	@Test
	void testCorrectBracketing10() {
		assertFalse(CorrectBracketing.correctBracketing(""<<>""));
	}
	
}

//"
cmpl-6tVWwZgCKUemiIWGKfGUErZgTUgww,/HumanEvalJava/src/main/java/original/id_57.java,9.93977689743042,stop,"// Monotonic.java
package original;

import java.util.List;

class Monotonic {

    /**
     * Return True is list elements are monotonically increasing or decreasing.
     *
     * > monotonic([1, 2, 4, 10])
     * true
     * > monotonic([1, 2, 4, 20])
     * true
     * > monotonic([1, 20, 4, 10])
     * false
     * > monotonic([4, 1, 0, -10])
     * true
     * > monotonic([4, 1, 1, 0])
     * true
     * > monotonic([1, 2, 3, 2, 5, 60])
     * false
     * > monotonic([1, 2, 3, 4, 5, 60])
     * true
     * > monotonic([9, 9, 9, 9])
     * true
     */
    public static Boolean monotonic(List<Integer> l) {
        int size = l.size();
        if (size == 1) {
            return true;
        }
        int direction = l.get(1) - l.get(0);
        for (int i = 1; i < size - 1; i++) {
            if (direction == 0) {
                direction = l.get(i + 1) - l.get(i);
            } else if (direction > 0) {
                if (l.get(i + 1) < l.get(i)) {
                    return false;
                }
            } else {
                if (l.get(i + 1) > l.get(i)) {
                    return false;
                }
            }
        }
        return true;
    }
}
","// MonotonicTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Monotonic}.
* It contains ten unit test cases for the {@link Monotonic#monotonic(List)} method.
*/
class MonotonicTest {","// MonotonicTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Monotonic}.
* It contains ten unit test cases for the {@link Monotonic#monotonic(List)} method.
*/
class MonotonicTest {

	@Test
	void testMonotonic() {
		List<Integer> l1 = List.of(1, 2, 4, 10);
		assertTrue(Monotonic.monotonic(l1));
		List<Integer> l2 = List.of(1, 2, 4, 20);
		assertTrue(Monotonic.monotonic(l2));
		List<Integer> l3 = List.of(1, 20, 4, 10);
		assertFalse(Monotonic.monotonic(l3));
		List<Integer> l4 = List.of(4, 1, 0, -10);
		assertTrue(Monotonic.monotonic(l4));
		List<Integer> l5 = List.of(4, 1, 1, 0);
		assertTrue(Monotonic.monotonic(l5));
		List<Integer> l6 = List.of(1, 2, 3, 2, 5, 60);
		assertFalse(Monotonic.monotonic(l6));
		List<Integer> l7 = List.of(1, 2, 3, 4, 5, 60);
		assertTrue(Monotonic.monotonic(l7));
		List<Integer> l8 = List.of(9, 9, 9, 9);
		assertTrue(Monotonic.monotonic(l8));
		List<Integer> l9 = List.of(1);
		assertTrue(Monotonic.monotonic(l9));
		List<Integer> l10 = List.of();
		assertTrue(Monotonic.monotonic(l10));
	}
}"
cmpl-6tVXzHynR5Gi2OCcerUAUgkFDviJ3,/HumanEvalJava/src/main/java/original/id_58.java,47.191784620285034,length,"// Common.java
package original;

import java.util.*;

class Common {

    /**
     * Return sorted unique common elements for two lists.
     *
     * > common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
     * [1, 5, 653]
     * > common([5, 3, 2, 8], [3, 2])
     * [2, 3]
     * > common([4, 3, 2, 8], [3, 2, 4])
     * [2, 3, 4]
     * > common([4, 3, 2, 8], [])
     * []
     */
    public static List<Object> common(List<Integer> l1, List<Object> l2) {
        Set<Integer> set = new HashSet<Integer>();
        for (Integer value : l1) {
            set.add(value);
        }
        List<Object> result = new ArrayList<Object>();
        for (Object value : l2) {
            if (value instanceof Integer) {
                int i = (Integer) value;
                if (set.contains(i) && !result.contains(i)) {
                    result.add(i);
                }
            }
        }
        Collections.sort(result, new Comparator<Object>() {

            public int compare(Object o1, Object o2) {
                if (o1 instanceof Integer && o2 instanceof Integer) {
                    return (Integer) o1 - (Integer) o2;
                }
                return 0;
            }
        });
        return result;
    }
}
","// CommonTest.java
package original;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Common}.
* It contains ten unit test cases for the {@link Common#common(List, List)} method.
*/
class CommonTest {","// CommonTest.java
package original;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Common}.
* It contains ten unit test cases for the {@link Common#common(List, List)} method.
*/
class CommonTest {

		/**
		* Test case for {@link Common#common(List, List)} method.
		* It tests the case when the first list is empty.
		*/
		@Test
		void testCommon_1() {
				List<Integer> l1 = new ArrayList<Integer>();
				List<Object> l2 = new ArrayList<Object>();
				l2.add(5);
				l2.add(7);
				l2.add(1);
				l2.add(5);
				l2.add(9);
				l2.add(653);
				l2.add(121);
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = Common.common(l1, l2);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link Common#common(List, List)} method.
		* It tests the case when the second list is empty.
		*/
		@Test
		void testCommon_2() {
				List<Integer> l1 = new ArrayList<Integer>();
				l1.add(1);
				l1.add(4);
				l1.add(3);
				l1.add(34);
				l1.add(653);
				l1.add(2);
				l1.add(5);
				List<Object> l2 = new ArrayList<Object>();
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = Common.common(l1, l2);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link Common#common(List, List)} method.
		* It tests the case when the first list is null.
		*/
		@Test
		void testCommon_3() {
				List<Integer> l1 = null;
				List<Object> l2 = new ArrayList<Object>();
				l2.add(5);
				l2.add(7);
				l2.add(1);
				l2.add(5);
				l2.add(9);
				l2.add(653);
				l2.add(121);
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = Common.common(l1, l2);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link Common#common(List, List)} method.
		* It tests the case when the second list is null.
		*/
		@Test
		void testCommon_4() {
				List<Integer> l1 = new ArrayList<Integer>();
				l1.add(1);
				l1.add(4);
				l1.add(3);
				l1.add(34);
				l1.add(653);
				l1.add(2);
				l1.add(5);
				List<Object> l2 = null;
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = Common.common(l1, l2);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link Common#common(List, List)} method.
		* It tests the case when the first list is empty and the second list is null.
		*/
		@Test
		void testCommon_5() {
				List<Integer> l1 = new ArrayList<Integer>();
				List<Object> l2 = null;
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = Common.common(l1, l2);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link Common#common(List, List)} method.
		* It tests the case when the first list is null and the second list is empty.
		*/
		@Test
		void testCommon_6() {
				List<Integer> l1 = null;
				List<Object> l2 = new ArrayList<Object>();
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = Common.common(l1, l2);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link Common#common(List, List)} method.
		* It tests the case when the first list is null and the second list is null.
		*/
		@Test
		void testCommon_7() {
				List<Integer> l1 = null;
				List<Object> l2 = null;
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = Common.common(l1, l2);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link Common#common(List, List)} method.
		* It tests the case when the first list is empty and the second list is empty.
		*/
		@Test
		void testCommon_8() {
				List<Integer> l1 = new ArrayList<Integer>();
				List<Object> l2 = new ArrayList<Object>();
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = Common.common(l1, l2);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link Common#common(List, List)} method.
		* It tests the case when the first list is not empty and the second list is not empty.
		*/
		@Test
		void testCommon_9() {
				List<Integer> l1 = new ArrayList<Integer>();
				l1.add(1);
				l1.add(4);
				l1.add(3);
				l1.add(34);
				l1.add(653);
				l1.add(2);
				l1.add(5);
				List<Object> l2 = new ArrayList<Object>();
				l2.add(5);
				l2.add(7);
				l2.add(1);
				l2.add(5);
				l2.add(9);
				l2.add(653);
				l2.add(121);
				List<Object> expected = new ArrayList<Object>();
				expected.add(1);
				expected.add(5);
				expected.add(653);
				List<Object> actual = Common.common(l1, l2);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link Common#common(List, List)} method.
		* It tests the case when the first list is not empty and the second list is not empty.
		*/
		@Test
		void testCommon_10() {"
cmpl-6tVZ2wj2gARcAsPV5U8bOAttlxUOE,/HumanEvalJava/src/main/java/original/id_59.java,20.548622846603394,stop,"// LargestPrimeFactor.java
package original;

class LargestPrimeFactor {

    /**
     * Return the largest prime factor of n. Assume n > 1 and is not a prime.
     *
     * > largestPrimeFactor(2048)
     * 2
     * > largestPrimeFactor(15)
     * 5
     * > largestPrimeFactor(27)
     * 3
     * > largestPrimeFactor(63)
     * 7
     * > largestPrimeFactor(330)
     * 11
     * > largestPrimeFactor(13195)
     * 29
     */
    public static int largestPrimeFactor(int n) {
        int max = 0;
        for (int i = 2; i <= n; i++) {
            if (n % i == 0) {
                max = i;
                n /= i;
                i--;
            }
        }
        return max;
    }
}
","// LargestPrimeFactorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestPrimeFactor}.
* It contains ten unit test cases for the {@link LargestPrimeFactor#largestPrimeFactor(int)} method.
*/
class LargestPrimeFactorTest {","// LargestPrimeFactorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestPrimeFactor}.
* It contains ten unit test cases for the {@link LargestPrimeFactor#largestPrimeFactor(int)} method.
*/
class LargestPrimeFactorTest {

	@Test
	void testLargestPrimeFactor() {
		assertEquals(2, LargestPrimeFactor.largestPrimeFactor(2048));
		assertEquals(5, LargestPrimeFactor.largestPrimeFactor(15));
		assertEquals(3, LargestPrimeFactor.largestPrimeFactor(27));
		assertEquals(7, LargestPrimeFactor.largestPrimeFactor(63));
		assertEquals(11, LargestPrimeFactor.largestPrimeFactor(330));
		assertEquals(29, LargestPrimeFactor.largestPrimeFactor(13195));
		assertEquals(5, LargestPrimeFactor.largestPrimeFactor(5));
		assertEquals(2, LargestPrimeFactor.largestPrimeFactor(2));
		assertEquals(2, LargestPrimeFactor.largestPrimeFactor(4));
		assertEquals(2, LargestPrimeFactor.largestPrimeFactor(8));
	}
}

// LargestPrimeFactor.java
package refactored;

class LargestPrimeFactor {

    /**
     * Return the largest prime factor of n. Assume n > 1 and is not a prime.
     *
     * > largestPrimeFactor(2048)
     * 2
     * > largestPrimeFactor(15)
     * 5
     * > largestPrimeFactor(27)
     * 3
     * > largestPrimeFactor(63)
     * 7
     * > largestPrimeFactor(330)
     * 11
     * > largestPrimeFactor(13195)
     * 29
     */
    public static int largestPrimeFactor(int n) {
        int max = 0;
        for (int i = 2; i <= n; i++) {
            if (n % i == 0) {
                max = i;
                n /= i;
                i--;
            }
        }
        return max;
    }
}

// LargestPrimeFactorTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LargestPrimeFactor}.
* It contains ten unit test cases for the {@link LargestPrimeFactor#largestPrimeFactor(int)} method.
*/
class LargestPrimeFactorTest {
		
	@Test
	void testLargestPrimeFactor() {
		assertEquals(2, LargestPrimeFactor.largestPrimeFactor(2048));
		assertEquals(5, LargestPrimeFactor.largestPrimeFactor(15));
		assertEquals(3, LargestPrimeFactor.largestPrimeFactor(27));
		assertEquals(7, LargestPrimeFactor.largestPrimeFactor(63));
		assertEquals(11, LargestPrimeFactor.largestPrimeFactor(330));
		assertEquals(29, LargestPrimeFactor.largestPrimeFactor(13195));
		assertEquals(5, LargestPrimeFactor.largestPrimeFactor(5));
		assertEquals(2, LargestPrimeFactor.largestPrimeFactor(2));
		assertEquals(2, LargestPrimeFactor.largestPrimeFactor(4));
		assertEquals(2, LargestPrimeFactor.largestPrimeFactor(8));
	}
}"
cmpl-6tVa5HqJZfvq2MXrB3kzhcGbqJYDR,/HumanEvalJava/src/main/java/original/id_6.java,56.32989549636841,,"// ParseNestedParens.java
package original;

import java.util.ArrayList;
import java.util.List;

class ParseNestedParens {

    /**
     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
     * For each of the group, output the deepest level of nesting of parentheses.
     * E.g. (()()) has maximum two levels of nesting while ((())) has three.
     *
     * > parseNestedParens(""(()()) ((())) () ((())()())"")
     * [2, 3, 1, 3]
     * > parseNestedParens(""() (()) ((())) (((())))"")
     * [1, 2, 3, 4]
     * > parseNestedParens(""(()(())((())))"")
     * [4]
     */
    public static List<Integer> parseNestedParens(String parenString) {
        List<Integer> result = new ArrayList<Integer>();
        int count = 0;
        int maximum_depth = 0;
        for (int i = 0; i < parenString.length(); i++) {
            if (parenString.charAt(i) == '(') {
                count++;
                maximum_depth = Math.max(maximum_depth, count);
            } else if (parenString.charAt(i) == ')') {
                count--;
                if (count == 0) {
                    result.add(maximum_depth);
                    maximum_depth = 0;
                }
            }
        }
        return result;
    }
}
","// ParseNestedParensTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParseNestedParens}.
* It contains ten unit test cases for the {@link ParseNestedParens#parseNestedParens(String)} method.
*/
class ParseNestedParensTest {","// ParseNestedParensTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParseNestedParens}.
* It contains ten unit test cases for the {@link ParseNestedParens#parseNestedParens(String)} method.
*/
class ParseNestedParensTest {

	@Test
	void testParseNestedParens() {
		List<Integer> expected = new ArrayList<Integer>();
		expected.add(2);
		expected.add(3);
		expected.add(1);
		expected.add(3);
		assertEquals(expected, ParseNestedParens.parseNestedParens(""(()()) ((())) () ((())()())""));
		
		expected = new ArrayList<Integer>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		assertEquals(expected, ParseNestedParens.parseNestedParens(""() (()) ((())) (((())))""));
		
		expected = new ArrayList<Integer>();
		expected.add(4);
		assertEquals(expected, ParseNestedParens.parseNestedParens(""(()(())((())))""));
		
		expected = new ArrayList<Integer>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		expected.add(5);
		assertEquals(expected, ParseNestedParens.parseNestedParens(""() (()) ((())) (((()))) ((((()))))""));
		
		expected = new ArrayList<Integer>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		expected.add(5);
		expected.add(6);
		assertEquals(expected, ParseNestedParens.parseNestedParens(""() (()) ((())) (((()))) ((((())))) (((((())))))""));
		
		expected = new ArrayList<Integer>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		expected.add(5);
		expected.add(6);
		expected.add(7);
		assertEquals(expected, ParseNestedParens.parseNestedParens(""() (()) ((())) (((()))) ((((())))) (((((()))))) ((((((()))))))""));
		
		expected = new ArrayList<Integer>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		expected.add(5);
		expected.add(6);
		expected.add(7);
		expected.add(8);
		assertEquals(expected, ParseNestedParens.parseNestedParens(""() (()) ((())) (((()))) ((((())))) (((((()))))) ((((((())))))) (((((((())))))))""));
		
		expected = new ArrayList<Integer>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		expected.add(5);
		expected.add(6);
		expected.add(7);
		expected.add(8);
		expected.add(9);
		assertEquals(expected, ParseNestedParens.parseNestedParens(""() (()) ((())) (((()))) ((((())))) (((((()))))) ((((((())))))) (((((((()))))))) ((((((((()))))))))""));
		
		expected = new ArrayList<Integer>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		expected.add(5);
		expected.add(6);
		expected.add(7);
		expected.add(8);
		expected.add(9);
		expected.add(10);
		assertEquals(expected, ParseNestedParens.parseNestedParens(""() (()) ((())) (((()))) ((((())))) (((((()))))) ((((((())))))) (((((((()))))))) ((((((((())))))))) (((((((((())))))))))""));
		
		expected = new ArrayList<Integer>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		expected.add(5);
		expected.add(6);
		expected.add(7);
		expected.add(8);
		expected.add(9);
		expected.add(10);
		expected.add(11);
		assertEquals(expected, ParseNestedParens.parseNestedParens(""() (()) ((())) (((()))) ((((())))) (((((()))))) ((((((())))))) (((((((()))))))) ((((((((())))))))) (((((((((()))))))))) ((((((((((()))))))))))""));
	}
}"
cmpl-6tVb8Xdv4tEiHt7uwqGN4FlrjLPHo,/HumanEvalJava/src/main/java/original/id_60.java,56.2546284198761,length,"// SumToN.java
package original;

class SumToN {

    /**
     * sumToN is a function that sums numbers from 1 to n.
     *
     * > sumToN(5)
     * 15
     * > sumToN(10)
     * 55
     * > sumToN(1)
     * 1
     * > sumToN(6)
     * 21
     * > sumToN(11)
     * 66
     * > sumToN(30)
     * 465
     * > sumToN(100)
     * 5050
     */
    public static int sumToN(int n) {
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += i;
        }
        return sum;
    }
}
","// SumToNTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumToN}.
* It contains ten unit test cases for the {@link SumToN#sumToN(int)} method.
*/
class SumToNTest {","// SumToNTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumToN}.
* It contains ten unit test cases for the {@link SumToN#sumToN(int)} method.
*/
class SumToNTest {

	@Test
	void testSumToN() {
		assertEquals(15, SumToN.sumToN(5));
		assertEquals(55, SumToN.sumToN(10));
		assertEquals(1, SumToN.sumToN(1));
		assertEquals(21, SumToN.sumToN(6));
		assertEquals(66, SumToN.sumToN(11));
		assertEquals(465, SumToN.sumToN(30));
		assertEquals(5050, SumToN.sumToN(100));
	}
}

// SumToN.java
package refactored;

class SumToN {

    /**
     * sumToN is a function that sums numbers from 1 to n.
     *
     * > sumToN(5)
     * 15
     * > sumToN(10)
     * 55
     * > sumToN(1)
     * 1
     * > sumToN(6)
     * 21
     * > sumToN(11)
     * 66
     * > sumToN(30)
     * 465
     * > sumToN(100)
     * 5050
     */
    public static int sumToN(int n) {
        return n * (n + 1) / 2;
    }
}

// SumToNTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumToN}.
* It contains ten unit test cases for the {@link SumToN#sumToN(int)} method.
*/
class SumToNTest {
		
	@Test
	void testSumToN() {
		assertEquals(15, SumToN.sumToN(5));
		assertEquals(55, SumToN.sumToN(10));
		assertEquals(1, SumToN.sumToN(1));
		assertEquals(21, SumToN.sumToN(6));
		assertEquals(66, SumToN.sumToN(11));
		assertEquals(465, SumToN.sumToN(30));
		assertEquals(5050, SumToN.sumToN(100));
	}
}

// SumToN.java
package refactored;

class SumToN {

    /**
     * sumToN is a function that sums numbers from 1 to n.
     *
     * > sumToN(5)
     * 15
     * > sumToN(10)
     * 55
     * > sumToN(1)
     * 1
     * > sumToN(6)
     * 21
     * > sumToN(11)
     * 66
     * > sumToN(30)
     * 465
     * > sumToN(100)
     * 5050
     */
    public static int sumToN(int n) {
        return n * (n + 1) / 2;
    }
}

// SumToNTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumToN}.
* It contains ten unit test cases for the {@link SumToN#sumToN(int)} method.
*/
class SumToNTest {
		
	@Test
	void testSumToN() {
		assertEquals(15, SumToN.sumToN(5));
		assertEquals(55, SumToN.sumToN(10));
		assertEquals(1, SumToN.sumToN(1));
		assertEquals(21, SumToN.sumToN(6));
		assertEquals(66, SumToN.sumToN(11));
		assertEquals(465, SumToN.sumToN(30));
		assertEquals(5050, SumToN.sumToN(100));
	}
}

// SumToN.java
package refactored;

class SumToN {

    /**
     * sumToN is a function that sums numbers from 1 to n.
     *
     * > sumToN(5)
     * 15
     * > sumToN(10)
     * 55
     * > sumToN(1)
     * 1
     * > sumToN(6)
     * 21
     * > sumToN(11)
     * 66
     * > sumToN(30)
     * 465
     * > sumToN(100)
     * 5050
     */
    public static int sumToN(int n) {
        return n * (n + 1) / 2;
    }
}

// SumToNTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumToN}.
* It contains ten unit test cases for the {@link SumToN#sumToN(int)} method.
*/
class SumToNTest {
		
	@Test
	void testSumToN() {
		assertEquals(15, SumToN.sumToN(5));
		assertEquals(55, SumToN.sumToN(10));
		assertEquals(1, SumToN.sumToN(1));
		assertEquals(21, SumToN.sumToN(6));
		assertEquals(66, SumToN.sumToN(11));
		assertEquals(465, SumToN.sumToN(30));
		assertEquals(5050, SumToN.sumToN(100));
	}
}

// SumToN.java
package refactored;

class SumToN {

    /**
     * sumToN is a function that sums numbers from 1 to n.
     *
     * > sumToN(5)
     * 15
     * > sumToN(10)
     * 55
     * > sumToN(1)
     * 1
     * > sumToN(6)
     * 21
     * > sumToN(11)
     * 66
     * > sumToN(30)
     * 465
     * > sumToN(100)
     * 5050
     */
    public static int sumToN(int n) {
        return n * (n + 1) / 2;
    }
}

// SumToNTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumToN}.
* It contains ten unit test cases for the {@link SumToN#sumToN(int)} method.
*/
class SumToNTest {
		
	@Test
	void testSumToN() {
		assertEquals(15, SumToN.sumToN(5));
		assertEquals(55, SumToN.sumToN(10));
		assertEquals(1, SumToN.sumToN(1));
		assertEquals(21, SumToN.sumToN(6));
		assertEquals(66, SumToN.sumToN(11));
		assertEquals(465, SumToN.sumToN(30));
		assertEquals(5050, SumToN.sumToN(100));
	}
}

// SumToN.java
package refactored;

class SumToN {

    /**
     * sumToN is a function that sums numbers from 1 to n.
     *
     * > sumToN(5)
     * 15
     * > sumToN(10)
     * 55
     * > sumToN(1)
     * 1
     * > sumToN(6)
     * 21
     * > sumToN(11)
     * 66
     * > sumToN(30)
     * 465
     * >"
cmpl-6tVcBEnjHUGWweckVL0oqX4RnRrmb,/HumanEvalJava/src/main/java/original/id_61.java,56.58613896369934,length,"// CorrectBracketing1.java
package original;

class CorrectBracketing1 {

    /**
     * brackets is a string of ""("" and "")"".
     * return True if every opening bracket has a corresponding closing bracket.
     *
     * > correctBracketing(""()"")
     * true
     * > correctBracketing(""(()())"")
     * true
     * > correctBracketing(""()()(()())()"")
     * true
     * > correctBracketing(""()()((()()())())(()()(()))"")
     * true
     * > correctBracketing(""((()())))"")
     * false
     * > correctBracketing("")(()"")
     * false
     * > correctBracketing(""("")
     * false
     * > correctBracketing(""(((("")
     * false
     * > correctBracketing("")"")
     * false
     * > correctBracketing(""(()"")
     * false
     * > correctBracketing(""()()(()())())(()"")
     * false
     * > correctBracketing(""()()(()())()))()"")
     * false
     */
    public static Boolean correctBracketing(String brackets) {
        int count = 0;
        for (int i = 0; i < brackets.length(); i++) {
            if (brackets.charAt(i) == '(') {
                count++;
            } else {
                count--;
            }
            if (count < 0) {
                return false;
            }
        }
        return count == 0;
    }
}
","// CorrectBracketing1Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing1}.
* It contains ten unit test cases for the {@link CorrectBracketing1#correctBracketing(String)} method.
*/
class CorrectBracketing1Test {","// CorrectBracketing1Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing1}.
* It contains ten unit test cases for the {@link CorrectBracketing1#correctBracketing(String)} method.
*/
class CorrectBracketing1Test {

	@Test
	void testCorrectBracketing1() {
		assertTrue(CorrectBracketing1.correctBracketing(""()""));
	}
	
	@Test
	void testCorrectBracketing2() {
		assertTrue(CorrectBracketing1.correctBracketing(""(()())""));
	}
	
	@Test
	void testCorrectBracketing3() {
		assertTrue(CorrectBracketing1.correctBracketing(""()()(()())()""));
	}
	
	@Test
	void testCorrectBracketing4() {
		assertTrue(CorrectBracketing1.correctBracketing(""()()((()()())())(()()(()))""));
	}
	
	@Test
	void testCorrectBracketing5() {
		assertFalse(CorrectBracketing1.correctBracketing(""((()())))""));
	}
	
	@Test
	void testCorrectBracketing6() {
		assertFalse(CorrectBracketing1.correctBracketing("")(()""));
	}
	
	@Test
	void testCorrectBracketing7() {
		assertFalse(CorrectBracketing1.correctBracketing(""(""));
	}
	
	@Test
	void testCorrectBracketing8() {
		assertFalse(CorrectBracketing1.correctBracketing(""((((""));
	}
	
	@Test
	void testCorrectBracketing9() {
		assertFalse(CorrectBracketing1.correctBracketing("")""));
	}
	
	@Test
	void testCorrectBracketing10() {
		assertFalse(CorrectBracketing1.correctBracketing(""(()""));
	}
	
	@Test
	void testCorrectBracketing11() {
		assertFalse(CorrectBracketing1.correctBracketing(""()()(()())())(()""));
	}
	
	@Test
	void testCorrectBracketing12() {
		assertFalse(CorrectBracketing1.correctBracketing(""()()(()())()))()""));
	}
}

// CorrectBracketing2.java
package original;

class CorrectBracketing2 {

    /**
     * brackets is a string of ""("" and "")"".
     * return True if every opening bracket has a corresponding closing bracket.
     *
     * > correctBracketing(""()"")
     * true
     * > correctBracketing(""(()())"")
     * true
     * > correctBracketing(""()()(()())()"")
     * true
     * > correctBracketing(""()()((()()())())(()()(()))"")
     * true
     * > correctBracketing(""((()())))"")
     * false
     * > correctBracketing("")(()"")
     * false
     * > correctBracketing(""("")
     * false
     * > correctBracketing(""(((("")
     * false
     * > correctBracketing("")"")
     * false
     * > correctBracketing(""(()"")
     * false
     * > correctBracketing(""()()(()())())(()"")
     * false
     * > correctBracketing(""()()(()())()))()"")
     * false
     */
    public static Boolean correctBracketing(String brackets) {
        int count = 0;
        for (int i = 0; i < brackets.length(); i++) {
            if (brackets.charAt(i) == '(') {
                count++;
            } else {
                count--;
            }
            if (count < 0) {
                return false;
            }
        }
        return count == 0;
    }
}

// CorrectBracketing2Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing2}.
* It contains ten unit test cases for the {@link CorrectBracketing2#correctBracketing(String)} method.
*/
class CorrectBracketing2Test {
		
	@Test
	void testCorrectBracketing1() {
		assertTrue(CorrectBracketing2.correctBracketing(""()""));
	}
	
	@Test
	void testCorrectBracketing2() {
		assertTrue(CorrectBracketing2.correctBracketing(""(()())""));
	}
	
	@Test
	void testCorrectBracketing3() {
		assertTrue(CorrectBracketing2.correctBracketing(""()()(()())()""));
	}
	
	@Test
	void testCorrectBracketing4() {
		assertTrue(CorrectBracketing2.correctBracketing(""()()((()()())())(()()(()))""));
	}
	
	@Test
	void testCorrectBracketing5() {
		assertFalse(CorrectBracketing2.correctBracketing(""((()())))""));
	}
	
	@Test
	void testCorrectBracketing6() {
		assertFalse(CorrectBracketing2.correctBracketing("")(()""));
	}
	
	@Test
	void testCorrectBracketing7() {
		assertFalse(CorrectBracketing2.correctBracketing(""(""));
	}
	
	@Test
	void testCorrectBracketing8() {
		assertFalse(CorrectBracketing2.correctBracketing(""((((""));
	}
	
	@Test
	void testCorrectBracketing9() {
		assertFalse(CorrectBracketing2.correctBracketing("")""));
	}
	
	@Test
	void testCorrectBracketing10() {
		assertFalse(CorrectBracketing2.correctBracketing(""(()""));
	}
	
	@Test
	void testCorrectBracketing11() {
		assertFalse(CorrectBracketing2.correctBracketing(""()()(()())())(()""));
	}
	
	@Test
	void testCorrectBracketing12() {
		assertFalse(CorrectBracketing2.correctBracketing(""()()(()())()))()""));
	}
}

// CorrectBracketing3.java
package original;

class CorrectBracketing3 {

    /**
     * brackets is a string of ""("" and "")"".
     * return True if every opening bracket has a corresponding closing bracket.
     *
     * > correctBracketing(""()"")
     * true
     * > correctBracketing(""(()())"")
     * true
     * > correctBracketing(""()()(()())()"")
     * true
     * > correctBracketing(""()()((()()())())(()()(()))"")
     * true
     * > correctBracketing(""((()())))"")
     * false
     * > correctBracketing("")(()"")
     * false
     * > correctBracketing(""("")
     * false
     * > correctBracketing(""(((("")
     * false
     * > correctBracketing("")"")
     * false
     * > correctBracketing(""(()"")
     * false
     * > correctBracketing(""()()(()())())(()"")
     * false
     * > correctBracketing(""()()(()())()))()"")
     * false
     */
    public static Boolean correctBracketing(String brackets) {
        int count = 0;
        for (int i = 0; i < brackets.length(); i++) {
            if (brackets.charAt(i) == '(') {
                count++;
            } else {
                count--;
            }
            if (count < 0) {
                return false;
            }
        }
        return count == 0;
    }
}

// CorrectBracketing3Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CorrectBracketing3}.
* It contains ten unit test cases for the {@link CorrectBracket"
cmpl-6tVdEBwMC8wMlHbV7ysbpjQiIwM5g,/HumanEvalJava/src/main/java/original/id_62.java,54.043566942214966,,"// Derivative.java
package original;

import java.util.ArrayList;
import java.util.List;

class Derivative {

    /**
     * xs represent coefficients of a polynomial.
     * xs[0] + xs[1] * x + xs[2] * x^2 + ....
     * Return derivative of this polynomial in the same form.
     *
     * > derivative([3, 1, 2, 4, 5])
     * [1, 4, 12, 20]
     * > derivative([1, 2, 3])
     * [2, 6]
     * > derivative([3, 2, 1])
     * [2, 2]
     * > derivative([3, 2, 1, 0, 4])
     * [2, 2, 0, 16]
     * > derivative([1])
     * []
     */
    public static List<Object> derivative(List<Integer> xs) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 1; i < xs.size(); i++) {
            result.add(xs.get(i) * i);
        }
        return result;
    }
}
","// DerivativeTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Derivative}.
* It contains ten unit test cases for the {@link Derivative#derivative(List)} method.
*/
class DerivativeTest {","// DerivativeTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Derivative}.
* It contains ten unit test cases for the {@link Derivative#derivative(List)} method.
*/
class DerivativeTest {

	@Test
	void testDerivative() {
		List<Integer> xs = new ArrayList<Integer>();
		xs.add(3);
		xs.add(1);
		xs.add(2);
		xs.add(4);
		xs.add(5);
		List<Object> result = Derivative.derivative(xs);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(4);
		expected.add(12);
		expected.add(20);
		assertEquals(expected, result);
	}
	
	@Test
	void testDerivative2() {
		List<Integer> xs = new ArrayList<Integer>();
		xs.add(1);
		xs.add(2);
		xs.add(3);
		List<Object> result = Derivative.derivative(xs);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(6);
		assertEquals(expected, result);
	}
	
	@Test
	void testDerivative3() {
		List<Integer> xs = new ArrayList<Integer>();
		xs.add(3);
		xs.add(2);
		xs.add(1);
		List<Object> result = Derivative.derivative(xs);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(2);
		assertEquals(expected, result);
	}
	
	@Test
	void testDerivative4() {
		List<Integer> xs = new ArrayList<Integer>();
		xs.add(3);
		xs.add(2);
		xs.add(1);
		xs.add(0);
		xs.add(4);
		List<Object> result = Derivative.derivative(xs);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(2);
		expected.add(0);
		expected.add(16);
		assertEquals(expected, result);
	}
	
	@Test
	void testDerivative5() {
		List<Integer> xs = new ArrayList<Integer>();
		xs.add(1);
		List<Object> result = Derivative.derivative(xs);
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, result);
	}
	
	@Test
	void testDerivative6() {
		List<Integer> xs = new ArrayList<Integer>();
		xs.add(0);
		xs.add(0);
		xs.add(0);
		xs.add(0);
		xs.add(0);
		List<Object> result = Derivative.derivative(xs);
		List<Object> expected = new ArrayList<Object>();
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(0);
		assertEquals(expected, result);
	}
	
	@Test
	void testDerivative7() {
		List<Integer> xs = new ArrayList<Integer>();
		xs.add(0);
		xs.add(0);
		xs.add(0);
		xs.add(0);
		xs.add(1);
		List<Object> result = Derivative.derivative(xs);
		List<Object> expected = new ArrayList<Object>();
		expected.add(0);
		expected.add(0);
		expected.add(0);
		expected.add(4);
		assertEquals(expected, result);
	}
	
	@Test
	void testDerivative8() {
		List<Integer> xs = new ArrayList<Integer>();
		xs.add(0);
		xs.add(0);
		xs.add(0);
		xs.add(1);
		xs.add(0);
		List<Object> result = Derivative.derivative(xs);
		List<Object> expected = new ArrayList<Object>();
		expected.add(0);
		expected.add(0);
		expected.add(3);
		assertEquals(expected, result);
	}
	
	@Test
	void testDerivative9() {
		List<Integer> xs = new ArrayList<Integer>();
		xs.add(0);
		xs.add(0);
		xs.add(1);
		xs.add(0);
		xs.add(0);
		List<Object> result = Derivative.derivative(xs);
		List<Object> expected = new ArrayList<Object>();
		expected.add(0);
		expected.add(2);
		assertEquals(expected, result);
	}
	
	@Test
	void testDerivative10() {
		List<Integer> xs = new ArrayList<Integer>();
		xs.add(0);
		xs.add(1);
		xs.add(0);
		xs.add(0);
		xs.add(0);
		List<Object> result = Derivative.derivative(xs);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		assertEquals(expected, result);
	}
}"
cmpl-6tVeH8VNnZxA7BYL57ZGbxPDT0NXI,/HumanEvalJava/src/main/java/original/id_63.java,6.722105503082275,,"// Fibfib.java
package original;

class Fibfib {

    /**
     * The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:
     * fibfib(0) == 0
     * fibfib(1) == 0
     * fibfib(2) == 1
     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.
     *
     * > fibfib(2)
     * 1
     * > fibfib(1)
     * 0
     * > fibfib(5)
     * 4
     * > fibfib(8)
     * 24
     * > fibfib(10)
     * 81
     * > fibfib(12)
     * 274
     * > fibfib(14)
     * 927
     */
    public static int fibfib(int n) {
        if (n < 2) {
            return 0;
        }
        if (n == 2) {
            return 1;
        }
        int a = 0;
        int b = 0;
        int c = 1;
        int d = 0;
        for (int i = 3; i <= n; i++) {
            d = a + b + c;
            a = b;
            b = c;
            c = d;
        }
        return d;
    }
}
","// FibfibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fibfib}.
* It contains ten unit test cases for the {@link Fibfib#fibfib(int)} method.
*/
class FibfibTest {","// FibfibTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fibfib}.
* It contains ten unit test cases for the {@link Fibfib#fibfib(int)} method.
*/
class FibfibTest {

	@Test
	void testFibfib() {
		assertEquals(0, Fibfib.fibfib(0));
		assertEquals(0, Fibfib.fibfib(1));
		assertEquals(1, Fibfib.fibfib(2));
		assertEquals(4, Fibfib.fibfib(5));
		assertEquals(24, Fibfib.fibfib(8));
		assertEquals(81, Fibfib.fibfib(10));
		assertEquals(274, Fibfib.fibfib(12));
		assertEquals(927, Fibfib.fibfib(14));
		assertEquals(317811, Fibfib.fibfib(28));
		assertEquals(514229, Fibfib.fibfib(29));
	}
}"
cmpl-6tVfKzRV9SqJkrEMcZmer9qxwK1MG,/HumanEvalJava/src/main/java/original/id_64.java,79.79101037979126,length,"// VowelsCount.java
package original;

class VowelsCount {

    /**
     * Write a function vowels_count which takes a string representing
     * a word as input and returns the number of vowels in the string.
     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
     * vowel, but only when it is at the end of the given word.
     *
     * > vowelsCount(""abcde"")
     * 2
     * > vowelsCount(""Alone"")
     * 3
     * > vowelsCount(""key"")
     * 2
     * > vowelsCount(""bye"")
     * 1
     * > vowelsCount(""keY"")
     * 2
     * > vowelsCount(""bYe"")
     * 1
     * > vowelsCount(""ACEDY"")
     * 3
     */
    public static int vowelsCount(String s) {
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                count++;
            }
        }
        if (s.length() > 0 && (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y')) {
            count++;
        }
        return count;
    }
}
","// VowelsCountTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link VowelsCount}.
* It contains ten unit test cases for the {@link VowelsCount#vowelsCount(String)} method.
*/
class VowelsCountTest {","// VowelsCountTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link VowelsCount}.
* It contains ten unit test cases for the {@link VowelsCount#vowelsCount(String)} method.
*/
class VowelsCountTest {

	@Test
	void testVowelsCount() {
		assertEquals(2, VowelsCount.vowelsCount(""abcde""));
		assertEquals(3, VowelsCount.vowelsCount(""Alone""));
		assertEquals(2, VowelsCount.vowelsCount(""key""));
		assertEquals(1, VowelsCount.vowelsCount(""bye""));
		assertEquals(2, VowelsCount.vowelsCount(""keY""));
		assertEquals(1, VowelsCount.vowelsCount(""bYe""));
		assertEquals(3, VowelsCount.vowelsCount(""ACEDY""));
		assertEquals(0, VowelsCount.vowelsCount(""""));
		assertEquals(0, VowelsCount.vowelsCount(""b""));
		assertEquals(1, VowelsCount.vowelsCount(""y""));
	}
}

// VowelsCountTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link VowelsCount}.
* It contains ten unit test cases for the {@link VowelsCount#vowelsCount(String)} method.
*/
class VowelsCountTest {
		
	@Test
	void testVowelsCount() {
		assertEquals(2, VowelsCount.vowelsCount(""abcde""));
		assertEquals(3, VowelsCount.vowelsCount(""Alone""));
		assertEquals(2, VowelsCount.vowelsCount(""key""));
		assertEquals(1, VowelsCount.vowelsCount(""bye""));
		assertEquals(2, VowelsCount.vowelsCount(""keY""));
		assertEquals(1, VowelsCount.vowelsCount(""bYe""));
		assertEquals(3, VowelsCount.vowelsCount(""ACEDY""));
		assertEquals(0, VowelsCount.vowelsCount(""""));
		assertEquals(0, VowelsCount.vowelsCount(""b""));
		assertEquals(1, VowelsCount.vowelsCount(""y""));
	}
}

// VowelsCountTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link VowelsCount}.
* It contains ten unit test cases for the {@link VowelsCount#vowelsCount(String)} method.
*/
class VowelsCountTest {
		
	@Test
	void testVowelsCount() {
		assertEquals(2, VowelsCount.vowelsCount(""abcde""));
		assertEquals(3, VowelsCount.vowelsCount(""Alone""));
		assertEquals(2, VowelsCount.vowelsCount(""key""));
		assertEquals(1, VowelsCount.vowelsCount(""bye""));
		assertEquals(2, VowelsCount.vowelsCount(""keY""));
		assertEquals(1, VowelsCount.vowelsCount(""bYe""));
		assertEquals(3, VowelsCount.vowelsCount(""ACEDY""));
		assertEquals(0, VowelsCount.vowelsCount(""""));
		assertEquals(0, VowelsCount.vowelsCount(""b""));
		assertEquals(1, VowelsCount.vowelsCount(""y""));
	}
}

// VowelsCountTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link VowelsCount}.
* It contains ten unit test cases for the {@link VowelsCount#vowelsCount(String)} method.
*/
class VowelsCountTest {
		
	@Test
	void testVowelsCount() {
		assertEquals(2, VowelsCount.vowelsCount(""abcde""));
		assertEquals(3, VowelsCount.vowelsCount(""Alone""));
		assertEquals(2, VowelsCount.vowelsCount(""key""));
		assertEquals(1, VowelsCount.vowelsCount(""bye""));
		assertEquals(2, VowelsCount.vowelsCount(""keY""));
		assertEquals(1, VowelsCount.vowelsCount(""bYe""));
		assertEquals(3, VowelsCount.vowelsCount(""ACEDY""));
		assertEquals(0, VowelsCount.vowelsCount(""""));
		assertEquals(0, VowelsCount.vowelsCount(""b""));
		assertEquals(1, VowelsCount.vowelsCount(""y""));
	}
}

// VowelsCountTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link VowelsCount}.
* It contains ten unit test cases for the {@link VowelsCount#vowelsCount(String)} method.
*/
class VowelsCountTest {
		
	@Test
	void testVowelsCount() {
		assertEquals(2, VowelsCount.vowelsCount(""abcde""));
		assertEquals(3, VowelsCount.vowelsCount(""Alone""));
		assertEquals(2, VowelsCount.vowelsCount(""key""));
		assertEquals(1, VowelsCount.vowelsCount(""bye""));
		assertEquals(2, VowelsCount.vowelsCount(""keY""));
		assertEquals(1, VowelsCount.vowelsCount(""bYe""));
		assertEquals(3, VowelsCount.vowelsCount(""ACEDY""));
		assertEquals(0, VowelsCount.vowelsCount(""""));
		assertEquals(0, VowelsCount.vowelsCount(""b""));
		assertEquals(1, VowelsCount.vowelsCount(""y""));
	}
}

// VowelsCountTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link VowelsCount}.
* It contains ten unit test cases for the {@link VowelsCount#vowelsCount(String)} method.
*/
class VowelsCountTest {
		
	@Test
	void testVowelsCount() {
		assertEquals(2, VowelsCount.vowelsCount(""abcde""));
		assertEquals(3, VowelsCount.vowelsCount(""Alone""));
		assertEquals(2, VowelsCount.vowelsCount(""key""));
		assertEquals(1, VowelsCount.vowelsCount(""bye""));
		assertEquals(2, VowelsCount.vowelsCount(""keY""));
		assertEquals(1, VowelsCount.vowelsCount(""bYe""));
		assertEquals(3, VowelsCount.vowelsCount(""ACEDY""));
		assertEquals(0, VowelsCount.vowelsCount(""""));
		assertEquals(0, VowelsCount.vowelsCount(""b""));
		assertEquals(1, VowelsCount.vowelsCount(""y""));
	}
}

// VowelsCountTest.java
package original;


import org.junit"
cmpl-6tVgcepFuOVXGNBgan3hYJDSrROKr,/HumanEvalJava/src/main/java/original/id_65.java,28.61777973175049,stop,"// CircularShift.java
package original;

class CircularShift {

    /**
     * Circular shift the digits of the integer x, shift the digits right by shift
     * and return the result as a string.
     * If shift > number of digits, return digits reversed.
     *
     * > circularShift(100, 2)
     * ""001""
     * > circularShift(12, 2)
     * ""12""
     * > circularShift(97, 8)
     * ""79""
     * > circularShift(12, 1)
     * ""21""
     * > circularShift(11, 101)
     * ""11""
     */
    public static String circularShift(int x, int shift) {
        String result = """";
        String xString = Integer.toString(x);
        int xLength = xString.length();
        if (shift > xLength) {
            for (int i = xLength - 1; i >= 0; i--) {
                result += xString.charAt(i);
            }
        } else {
            for (int i = xLength - shift; i < xLength; i++) {
                result += xString.charAt(i);
            }
            for (int i = 0; i < xLength - shift; i++) {
                result += xString.charAt(i);
            }
        }
        return result;
    }
}
","// CircularShiftTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CircularShift}.
* It contains ten unit test cases for the {@link CircularShift#circularShift(int, int)} method.
*/
class CircularShiftTest {","// CircularShiftTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CircularShift}.
* It contains ten unit test cases for the {@link CircularShift#circularShift(int, int)} method.
*/
class CircularShiftTest {

	/**
	* Test case for {@link CircularShift#circularShift(int, int)} method.
	* It tests the case when the shift is greater than the number of digits.
	*/
	@Test
	void testCircularShift_1() {
		assertEquals(""001"", CircularShift.circularShift(100, 2));
	}
	
	/**
	* Test case for {@link CircularShift#circularShift(int, int)} method.
	* It tests the case when the shift is less than the number of digits.
	*/
	@Test
	void testCircularShift_2() {
		assertEquals(""12"", CircularShift.circularShift(12, 2));
	}
	
	/**
	* Test case for {@link CircularShift#circularShift(int, int)} method.
	* It tests the case when the shift is greater than the number of digits.
	*/
	@Test
	void testCircularShift_3() {
		assertEquals(""79"", CircularShift.circularShift(97, 8));
	}
	
	/**
	* Test case for {@link CircularShift#circularShift(int, int)} method.
	* It tests the case when the shift is less than the number of digits.
	*/
	@Test
	void testCircularShift_4() {
		assertEquals(""21"", CircularShift.circularShift(12, 1));
	}
	
	/**
	* Test case for {@link CircularShift#circularShift(int, int)} method.
	* It tests the case when the shift is greater than the number of digits.
	*/
	@Test
	void testCircularShift_5() {
		assertEquals(""11"", CircularShift.circularShift(11, 101));
	}
	
	/**
	* Test case for {@link CircularShift#circularShift(int, int)} method.
	* It tests the case when the shift is less than the number of digits.
	*/
	@Test
	void testCircularShift_6() {
		assertEquals(""123"", CircularShift.circularShift(123, 2));
	}
	
	/**
	* Test case for {@link CircularShift#circularShift(int, int)} method.
	* It tests the case when the shift is greater than the number of digits.
	*/
	@Test
	void testCircularShift_7() {
		assertEquals(""987"", CircularShift.circularShift(789, 8));
	}
	
	/**
	* Test case for {@link CircularShift#circularShift(int, int)} method.
	* It tests the case when the shift is less than the number of digits.
	*/
	@Test
	void testCircularShift_8() {
		assertEquals(""321"", CircularShift.circularShift(123, 1));
	}
	
	/**
	* Test case for {@link CircularShift#circularShift(int, int)} method.
	* It tests the case when the shift is greater than the number of digits.
	*/
	@Test
	void testCircularShift_9() {
		assertEquals(""111"", CircularShift.circularShift(111, 101));
	}
	
	/**
	* Test case for {@link CircularShift#circularShift(int, int)} method.
	* It tests the case when the shift is less than the number of digits.
	*/
	@Test
	void testCircularShift_10() {
		assertEquals(""123"", CircularShift.circularShift(123, 0));
	}
}"
cmpl-6tVhftaw7Ll92OxNAo06VMZExRRMO,/HumanEvalJava/src/main/java/original/id_66.java,40.49580144882202,length,"// Digitsum.java
package original;

class Digitsum {

    /**
     * Write a function that takes a string as input and returns the sum of the upper characters only'
     * ASCII codes.
     * Examples:
     * digitSum("""") => 0
     * digitSum(""abAB"") => 131
     * digitSum(""abcCd"") => 67
     * digitSum(""helloE"") => 69
     * digitSum(""woArBld"") => 131
     * digitSum(""aAaaaXa"") => 153
     *
     * > digitSum("""")
     * 0
     * > digitSum(""abAB"")
     * 131
     * > digitSum(""abcCd"")
     * 67
     * > digitSum(""helloE"")
     * 69
     * > digitSum(""woArBld"")
     * 131
     * > digitSum(""aAaaaXa"")
     * 153
     * > digitSum("" How are yOu?"")
     * 151
     * > digitSum(""You arE Very Smart"")
     * 327
     */
    public static int digitSum(String s) {
        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c >= 'A' && c <= 'Z') {
                sum += c;
            }
        }
        return sum;
    }
}
","// DigitsumTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digitsum}.
* It contains ten unit test cases for the {@link Digitsum#digitSum(String)} method.
*/
class DigitsumTest {","// DigitsumTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digitsum}.
* It contains ten unit test cases for the {@link Digitsum#digitSum(String)} method.
*/
class DigitsumTest {

	@Test
	void testDigitSum() {
		assertEquals(0, Digitsum.digitSum(""""));
		assertEquals(131, Digitsum.digitSum(""abAB""));
		assertEquals(67, Digitsum.digitSum(""abcCd""));
		assertEquals(69, Digitsum.digitSum(""helloE""));
		assertEquals(131, Digitsum.digitSum(""woArBld""));
		assertEquals(153, Digitsum.digitSum(""aAaaaXa""));
		assertEquals(151, Digitsum.digitSum("" How are yOu?""));
		assertEquals(327, Digitsum.digitSum(""You arE Very Smart""));
		assertEquals(0, Digitsum.digitSum(""abcdefghijklmnopqrstuvwxyz""));
		assertEquals(0, Digitsum.digitSum(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
	}
}

// DigitsumTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digitsum}.
* It contains ten unit test cases for the {@link Digitsum#digitSum(String)} method.
*/
class DigitsumTest {
		
	@Test
	void testDigitSum() {
		assertEquals(0, Digitsum.digitSum(""""));
		assertEquals(131, Digitsum.digitSum(""abAB""));
		assertEquals(67, Digitsum.digitSum(""abcCd""));
		assertEquals(69, Digitsum.digitSum(""helloE""));
		assertEquals(131, Digitsum.digitSum(""woArBld""));
		assertEquals(153, Digitsum.digitSum(""aAaaaXa""));
		assertEquals(151, Digitsum.digitSum("" How are yOu?""));
		assertEquals(327, Digitsum.digitSum(""You arE Very Smart""));
		assertEquals(0, Digitsum.digitSum(""abcdefghijklmnopqrstuvwxyz""));
		assertEquals(0, Digitsum.digitSum(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
	}
}

// DigitsumTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digitsum}.
* It contains ten unit test cases for the {@link Digitsum#digitSum(String)} method.
*/
class DigitsumTest {
		
	@Test
	void testDigitSum() {
		assertEquals(0, Digitsum.digitSum(""""));
		assertEquals(131, Digitsum.digitSum(""abAB""));
		assertEquals(67, Digitsum.digitSum(""abcCd""));
		assertEquals(69, Digitsum.digitSum(""helloE""));
		assertEquals(131, Digitsum.digitSum(""woArBld""));
		assertEquals(153, Digitsum.digitSum(""aAaaaXa""));
		assertEquals(151, Digitsum.digitSum("" How are yOu?""));
		assertEquals(327, Digitsum.digitSum(""You arE Very Smart""));
		assertEquals(0, Digitsum.digitSum(""abcdefghijklmnopqrstuvwxyz""));
		assertEquals(0, Digitsum.digitSum(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
	}
}

// DigitsumTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digitsum}.
* It contains ten unit test cases for the {@link Digitsum#digitSum(String)} method.
*/
class DigitsumTest {
		
	@Test
	void testDigitSum() {
		assertEquals(0, Digitsum.digitSum(""""));
		assertEquals(131, Digitsum.digitSum(""abAB""));
		assertEquals(67, Digitsum.digitSum(""abcCd""));
		assertEquals(69, Digitsum.digitSum(""helloE""));
		assertEquals(131, Digitsum.digitSum(""woArBld""));
		assertEquals(153, Digitsum.digitSum(""aAaaaXa""));
		assertEquals(151, Digitsum.digitSum("" How are yOu?""));
		assertEquals(327, Digitsum.digitSum(""You arE Very Smart""));
		assertEquals(0, Digitsum.digitSum(""abcdefghijklmnopqrstuvwxyz""));
		assertEquals(0, Digitsum.digitSum(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
	}
}

// DigitsumTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digitsum}.
* It contains ten unit test cases for the {@link Digitsum#digitSum(String)} method.
*/
class DigitsumTest {
		
	@Test
	void testDigitSum() {
		assertEquals(0, Digitsum.digitSum(""""));
		assertEquals(131, Digitsum.digitSum(""abAB""));
		assertEquals(67, Digitsum.digitSum(""abcCd""));
		assertEquals(69, Digitsum.digitSum(""helloE""));
		assertEquals(131, Digitsum.digitSum(""woArBld""));
		assertEquals(153, Digitsum.digitSum(""aAaaaXa""));
		assertEquals(151, Digitsum.digitSum("" How are yOu?""));
		assertEquals(327, Digitsum.digitSum(""You arE Very Smart""));
		assertEquals(0, Digitsum.digitSum(""abcdefghijklmnopqrstuvwxyz""));
		assertEquals(0, Digitsum.digitSum(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
	}
}

// DigitsumTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Digitsum}.
* It contains ten unit test cases for the {@link Digitsum#digitSum(String)} method.
*/
class DigitsumTest {
		
	@Test
	void testDigitSum() {
		assertEquals(0, Digitsum.digitSum(""""));
		assertEquals(131, Digitsum.digitSum(""abAB""));
		assertEquals(67, Digitsum.digitSum(""abcCd""));
		assertEquals(69, Digitsum.digitSum(""helloE""));
		assertEquals(131, Digitsum.digitSum(""woArBld""));
		assertEquals(153, Digitsum.digitSum(""aAaaaXa""));
		assertEquals(151, Digitsum.digitSum("" How are yOu?""));
		assertEquals(327, Digitsum.digitSum(""You arE Very Smart""));
		assertEquals(0, Digitsum.digitSum(""abcdefghijklmnopqrstuvwxyz""));
		assertEquals(0, Digitsum.digitSum(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
	"
cmpl-6tViiZhKDsV9yUNPB23PopILp2QF4,/HumanEvalJava/src/main/java/original/id_67.java,80.28432607650757,length,"// FruitDistribution.java
package original;

class FruitDistribution {

    /**
     * * In this task, you will be given a string that represents a number of apples and oranges
     * that are distributed in a basket of fruit this basket contains
     * apples, oranges, and mango fruits. Given the string that represents the total number of
     * the oranges and apples and an integer that represent the total number of the fruits
     * in the basket return the number of the mango fruits in the basket.
     * For example:
     * fruitDistribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
     * fruitDistribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
     * fruitDistribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
     * fruitDistribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
     *
     * > fruitDistribution(""5 apples and 6 oranges"", 19)
     * 8
     * > fruitDistribution(""5 apples and 6 oranges"", 21)
     * 10
     * > fruitDistribution(""0 apples and 1 oranges"", 3)
     * 2
     * > fruitDistribution(""1 apples and 0 oranges"", 3)
     * 2
     * > fruitDistribution(""2 apples and 3 oranges"", 100)
     * 95
     * > fruitDistribution(""2 apples and 3 oranges"", 5)
     * 0
     * > fruitDistribution(""1 apples and 100 oranges"", 120)
     * 19
     */
    public static int fruitDistribution(String s, int n) {
        int apples = 0;
        int oranges = 0;
        int mangoes = 0;
        String[] words = s.split("" "");
        for (int i = 0; i < words.length; i++) {
            if (words[i].equals(""apples"")) {
                apples = Integer.parseInt(words[i - 1]);
            }
            if (words[i].equals(""oranges"")) {
                oranges = Integer.parseInt(words[i - 1]);
            }
        }
        mangoes = n - apples - oranges;
        return mangoes;
    }
}
","// FruitDistributionTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FruitDistribution}.
* It contains ten unit test cases for the {@link FruitDistribution#fruitDistribution(String, int)} method.
*/
class FruitDistributionTest {","// FruitDistributionTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FruitDistribution}.
* It contains ten unit test cases for the {@link FruitDistribution#fruitDistribution(String, int)} method.
*/
class FruitDistributionTest {

	@Test
	void testFruitDistribution() {
		assertEquals(8, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 19));
		assertEquals(10, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 21));
		assertEquals(2, FruitDistribution.fruitDistribution(""0 apples and 1 oranges"", 3));
		assertEquals(2, FruitDistribution.fruitDistribution(""1 apples and 0 oranges"", 3));
		assertEquals(95, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 100));
		assertEquals(0, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 5));
		assertEquals(19, FruitDistribution.fruitDistribution(""1 apples and 100 oranges"", 120));
		assertEquals(0, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 0));
		assertEquals(0, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 1));
		assertEquals(1, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 2));
	}
}

// FruitDistributionTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FruitDistribution}.
* It contains ten unit test cases for the {@link FruitDistribution#fruitDistribution(String, int)} method.
*/
class FruitDistributionTest {
		
	@Test
	void testFruitDistribution() {
		assertEquals(8, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 19));
		assertEquals(10, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 21));
		assertEquals(2, FruitDistribution.fruitDistribution(""0 apples and 1 oranges"", 3));
		assertEquals(2, FruitDistribution.fruitDistribution(""1 apples and 0 oranges"", 3));
		assertEquals(95, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 100));
		assertEquals(0, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 5));
		assertEquals(19, FruitDistribution.fruitDistribution(""1 apples and 100 oranges"", 120));
		assertEquals(0, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 0));
		assertEquals(0, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 1));
		assertEquals(1, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 2));
	}
}

// FruitDistributionTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FruitDistribution}.
* It contains ten unit test cases for the {@link FruitDistribution#fruitDistribution(String, int)} method.
*/
class FruitDistributionTest {
		
	@Test
	void testFruitDistribution() {
		assertEquals(8, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 19));
		assertEquals(10, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 21));
		assertEquals(2, FruitDistribution.fruitDistribution(""0 apples and 1 oranges"", 3));
		assertEquals(2, FruitDistribution.fruitDistribution(""1 apples and 0 oranges"", 3));
		assertEquals(95, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 100));
		assertEquals(0, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 5));
		assertEquals(19, FruitDistribution.fruitDistribution(""1 apples and 100 oranges"", 120));
		assertEquals(0, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 0));
		assertEquals(0, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 1));
		assertEquals(1, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 2));
	}
}

// FruitDistributionTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FruitDistribution}.
* It contains ten unit test cases for the {@link FruitDistribution#fruitDistribution(String, int)} method.
*/
class FruitDistributionTest {
		
	@Test
	void testFruitDistribution() {
		assertEquals(8, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 19));
		assertEquals(10, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 21));
		assertEquals(2, FruitDistribution.fruitDistribution(""0 apples and 1 oranges"", 3));
		assertEquals(2, FruitDistribution.fruitDistribution(""1 apples and 0 oranges"", 3));
		assertEquals(95, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 100));
		assertEquals(0, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 5));
		assertEquals(19, FruitDistribution.fruitDistribution(""1 apples and 100 oranges"", 120));
		assertEquals(0, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 0));
		assertEquals(0, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 1));
		assertEquals(1, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 2));
	}
}

// FruitDistributionTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FruitDistribution}.
* It contains ten unit test cases for the {@link FruitDistribution#fruitDistribution(String, int)} method.
*/
class FruitDistributionTest {
		
	@Test
	void testFruitDistribution() {
		assertEquals(8, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 19));
		assertEquals(10, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 21));
		assertEquals(2, FruitDistribution.fruitDistribution(""0 apples and 1 oranges"", 3));
		assertEquals(2, FruitDistribution.fruitDistribution(""1 apples and 0 oranges"", 3));
		assertEquals(95, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 100));
		assertEquals(0, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 5));
		assertEquals(19, FruitDistribution.fruitDistribution(""1 apples and 100 oranges"", 120));
		assertEquals(0, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 0));
		assertEquals(0, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 1));
		assertEquals(1, FruitDistribution.fruitDistribution(""0 apples and 0 oranges"", 2));
	}
}

// FruitDistributionTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FruitDistribution}.
* It contains ten unit test cases for the {@link FruitDistribution#fruitDistribution(String, int)} method.
*/
class FruitDistributionTest {
		
	@Test
	void testFruitDistribution() {
		assertEquals(8, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 19));
		assertEquals(10, FruitDistribution.fruitDistribution(""5 apples and 6 oranges"", 21));
		assertEquals(2, FruitDistribution.fruitDistribution(""0 apples and 1 oranges"", 3));
		assertEquals(2, FruitDistribution.fruitDistribution(""1 apples and 0 oranges"", 3));
		assertEquals(95, FruitDistribution.fruitDistribution(""2 apples and 3 oranges"", 100));
		assertEquals(0, FruitDistribution.fruitDistribution"
cmpl-6tVk1YaFTH72lRl6AxFTUkf5mcr0P,/HumanEvalJava/src/main/java/original/id_68.java,38.281182527542114,stop,"// Pluck.java
package original;

import java.util.ArrayList;
import java.util.List;

class Pluck {

    /**
     * Given an array representing a branch of a tree that has non-negative integer nodes
     * your task is to pluck one of the nodes and return it.
     * The plucked node should be the node with the smallest even value.
     * If multiple nodes with the same smallest even value are found return the node that has smallest index.
     * The plucked node should be returned in a list, [ smallest_value, its index ],
     * If there are no even values or the given array is empty, return [].
     *
     * Example 1:
     * - Input: [4,2,3]
     * - Output: [2, 1]
     * - Explanation: 2 has the smallest even value, and 2 has the smallest index.
     * Example 2:
     * - Input: [1,2,3]
     * - Output: [2, 1]
     * - Explanation: 2 has the smallest even value, and 2 has the smallest index.
     * Example 3:
     * - Input: []
     * - Output: []
     * Example 4:
     * - Input: [5, 0, 3, 0, 4, 2]
     * - Output: [0, 1]
     * - Explanation: 0 is the smallest value, but  there are two zeros,
     * so we will choose the first zero, which has the smallest index.
     *
     * Constraints:
     * 1 <= nodes.length <= 10000
     * 0 <= node.value
     *
     * > pluck([4, 2, 3])
     * [2, 1]
     * > pluck([1, 2, 3])
     * [2, 1]
     * > pluck([])
     * []
     * > pluck([5, 0, 3, 0, 4, 2])
     * [0, 1]
     * > pluck([1, 2, 3, 0, 5, 3])
     * [0, 3]
     * > pluck([5, 4, 8, 4, 8])
     * [4, 1]
     * > pluck([7, 6, 7, 1])
     * [6, 1]
     * > pluck([7, 9, 7, 1])
     * []
     */
    public static List<Object> pluck(List<Object> arr) {
        List<Object> result = new ArrayList<Object>();
        int min = Integer.MAX_VALUE;
        int index = -1;
        for (int i = 0; i < arr.size(); i++) {
            if (arr.get(i) instanceof Integer) {
                int value = (Integer) arr.get(i);
                if (value % 2 == 0 && value < min) {
                    min = value;
                    index = i;
                }
            }
        }
        if (index != -1) {
            result.add(min);
            result.add(index);
        }
        return result;
    }
}
","// PluckTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Pluck}.
* It contains ten unit test cases for the {@link Pluck#pluck(List)} method.
*/
class PluckTest {","// PluckTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Pluck}.
* It contains ten unit test cases for the {@link Pluck#pluck(List)} method.
*/
class PluckTest {

	@Test
	void testPluck() {
		List<Object> arr = new ArrayList<Object>();
		arr.add(4);
		arr.add(2);
		arr.add(3);
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(1);
		assertEquals(expected, Pluck.pluck(arr));
		
		arr = new ArrayList<Object>();
		arr.add(1);
		arr.add(2);
		arr.add(3);
		expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(1);
		assertEquals(expected, Pluck.pluck(arr));
		
		arr = new ArrayList<Object>();
		expected = new ArrayList<Object>();
		assertEquals(expected, Pluck.pluck(arr));
		
		arr = new ArrayList<Object>();
		arr.add(5);
		arr.add(0);
		arr.add(3);
		arr.add(0);
		arr.add(4);
		arr.add(2);
		expected = new ArrayList<Object>();
		expected.add(0);
		expected.add(1);
		assertEquals(expected, Pluck.pluck(arr));
		
		arr = new ArrayList<Object>();
		arr.add(1);
		arr.add(2);
		arr.add(3);
		arr.add(0);
		arr.add(5);
		arr.add(3);
		expected = new ArrayList<Object>();
		expected.add(0);
		expected.add(3);
		assertEquals(expected, Pluck.pluck(arr));
		
		arr = new ArrayList<Object>();
		arr.add(5);
		arr.add(4);
		arr.add(8);
		arr.add(4);
		arr.add(8);
		expected = new ArrayList<Object>();
		expected.add(4);
		expected.add(1);
		assertEquals(expected, Pluck.pluck(arr));
		
		arr = new ArrayList<Object>();
		arr.add(7);
		arr.add(6);
		arr.add(7);
		arr.add(1);
		expected = new ArrayList<Object>();
		expected.add(6);
		expected.add(1);
		assertEquals(expected, Pluck.pluck(arr));
		
		arr = new ArrayList<Object>();
		arr.add(7);
		arr.add(9);
		arr.add(7);
		arr.add(1);
		expected = new ArrayList<Object>();
		assertEquals(expected, Pluck.pluck(arr));
		
		arr = new ArrayList<Object>();
		arr.add(1);
		arr.add(2);
		arr.add(3);
		arr.add(0);
		arr.add(5);
		arr.add(3);
		expected = new ArrayList<Object>();
		expected.add(0);
		expected.add(3);
		assertEquals(expected, Pluck.pluck(arr));
		
		arr = new ArrayList<Object>();
		arr.add(5);
		arr.add(4);
		arr.add(8);
		arr.add(4);
		arr.add(8);
		expected = new ArrayList<Object>();
		expected.add(4);
		expected.add(1);
		assertEquals(expected, Pluck.pluck(arr));
	}
}"
cmpl-6tVl4uvzL2X8UflezqjTDsK8gTsVG,/HumanEvalJava/src/main/java/original/id_69.java,15.864171266555786,stop,"// Search.java
package original;

import java.util.List;

class Search {

    /**
     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than
     * zero, and has a frequency greater than or equal to the value of the integer itself.
     * The frequency of an integer is the number of times it appears in the list.
     * If no such a value exist, return -1.
     * Examples:
     * search([4, 1, 2, 2, 3, 1]) == 2
     * search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
     * search([5, 5, 4, 4, 4]) == -1
     *
     * > search([5, 5, 5, 5, 1])
     * 1
     * > search([4, 1, 4, 1, 4, 4])
     * 4
     * > search([3, 3])
     * -1
     * > search([8, 8, 8, 8, 8, 8, 8, 8])
     * 8
     * > search([2, 3, 3, 2, 2])
     * 2
     * > search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])
     * 1
     * > search([3, 2, 8, 2])
     * 2
     * > search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10])
     * 1
     * > search([8, 8, 3, 6, 5, 6, 4])
     * -1
     * > search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])
     * 1
     * > search([1, 9, 10, 1, 3])
     * 1
     * > search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10])
     * 5
     * > search([1])
     * 1
     * > search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5])
     * 4
     * > search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10])
     * 2
     * > search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3])
     * 1
     * > search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4])
     * 4
     * > search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7])
     * 4
     * > search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1])
     * 2
     * > search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8])
     * -1
     * > search([10])
     * -1
     * > search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2])
     * 2
     * > search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8])
     * 1
     * > search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6])
     * 1
     * > search([3, 10, 10, 9, 2])
     * -1
     */
    public static int search(List<Integer> lst) {
        int max = -1;
        int[] freq = new int[11];
        for (int i = 0; i < lst.size(); i++) {
            freq[lst.get(i)]++;
        }
        for (int i = 1; i < 11; i++) {
            if (freq[i] >= i) {
                max = i;
            }
        }
        return max;
    }
}
","// SearchTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#search(List)} method.
*/
class SearchTest {","// SearchTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#search(List)} method.
*/
class SearchTest {

	@Test
	void testSearch() {
		assertEquals(1, Search.search(List.of(5, 5, 5, 5, 1)));
		assertEquals(4, Search.search(List.of(4, 1, 4, 1, 4, 4)));
		assertEquals(-1, Search.search(List.of(3, 3)));
		assertEquals(8, Search.search(List.of(8, 8, 8, 8, 8, 8, 8, 8)));
		assertEquals(2, Search.search(List.of(2, 3, 3, 2, 2)));
		assertEquals(1, Search.search(List.of(2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)));
		assertEquals(2, Search.search(List.of(3, 2, 8, 2)));
		assertEquals(1, Search.search(List.of(6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10)));
		assertEquals(-1, Search.search(List.of(8, 8, 3, 6, 5, 6, 4)));
		assertEquals(1, Search.search(List.of(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)));
	}
}"
cmpl-6tVm75O8bUVbxzXepLxft3MvqD5io,/HumanEvalJava/src/main/java/original/id_7.java,56.79870414733887,length,"// FilterBySubstring.java
package original;

import java.util.ArrayList;
import java.util.List;

class FilterBySubstring {

    /**
     * Filter an input list of strings only for ones that contain given substring
     * > filterBySubstring([], ""a"")
     * []
     * > filterBySubstring([""abc"", ""bacd"", ""cde"", ""array""], ""a"")
     * [""abc"", ""bacd"", ""array""]
     * > filterBySubstring([], ""john"")
     * []
     * > filterBySubstring([""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xxx"")
     * [""xxx"", ""xxxAAA"", ""xxx""]
     * > filterBySubstring([""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx""], ""xx"")
     * [""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""]
     * > filterBySubstring([""grunt"", ""trumpet"", ""prune"", ""gruesome""], ""run"")
     * [""grunt"", ""prune""]
     */
    public static List<Object> filterBySubstring(List<Object> strings, String substring) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 0; i < strings.size(); i++) {
            if (strings.get(i).toString().contains(substring)) {
                result.add(strings.get(i));
            }
        }
        return result;
    }
}
","// FilterBySubstringTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterBySubstring}.
* It contains ten unit test cases for the {@link FilterBySubstring#filterBySubstring(List, String)} method.
*/
class FilterBySubstringTest {","// FilterBySubstringTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilterBySubstring}.
* It contains ten unit test cases for the {@link FilterBySubstring#filterBySubstring(List, String)} method.
*/
class FilterBySubstringTest {

		/**
		* Test case for {@link FilterBySubstring#filterBySubstring(List, String)} method.
		* It checks if the method returns an empty list when the input list is empty.
		*/
		@Test
		void testEmptyList() {
				List<Object> input = new ArrayList<Object>();
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = FilterBySubstring.filterBySubstring(input, ""a"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link FilterBySubstring#filterBySubstring(List, String)} method.
		* It checks if the method returns an empty list when the input list does not contain the substring.
		*/
		@Test
		void testNoSubstring() {
				List<Object> input = new ArrayList<Object>();
				input.add(""abc"");
				input.add(""bacd"");
				input.add(""cde"");
				input.add(""array"");
				List<Object> expected = new ArrayList<Object>();
				List<Object> actual = FilterBySubstring.filterBySubstring(input, ""john"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link FilterBySubstring#filterBySubstring(List, String)} method.
		* It checks if the method returns the correct list when the input list contains the substring.
		*/
		@Test
		void testSubstring() {
				List<Object> input = new ArrayList<Object>();
				input.add(""abc"");
				input.add(""bacd"");
				input.add(""cde"");
				input.add(""array"");
				List<Object> expected = new ArrayList<Object>();
				expected.add(""abc"");
				expected.add(""bacd"");
				expected.add(""array"");
				List<Object> actual = FilterBySubstring.filterBySubstring(input, ""a"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link FilterBySubstring#filterBySubstring(List, String)} method.
		* It checks if the method returns the correct list when the input list contains the substring.
		*/
		@Test
		void testSubstring2() {
				List<Object> input = new ArrayList<Object>();
				input.add(""xxx"");
				input.add(""asd"");
				input.add(""xxy"");
				input.add(""john doe"");
				input.add(""xxxAAA"");
				input.add(""xxx"");
				List<Object> expected = new ArrayList<Object>();
				expected.add(""xxx"");
				expected.add(""xxxAAA"");
				expected.add(""xxx"");
				List<Object> actual = FilterBySubstring.filterBySubstring(input, ""xxx"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link FilterBySubstring#filterBySubstring(List, String)} method.
		* It checks if the method returns the correct list when the input list contains the substring.
		*/
		@Test
		void testSubstring3() {
				List<Object> input = new ArrayList<Object>();
				input.add(""xxx"");
				input.add(""asd"");
				input.add(""aaaxxy"");
				input.add(""john doe"");
				input.add(""xxxAAA"");
				input.add(""xxx"");
				List<Object> expected = new ArrayList<Object>();
				expected.add(""xxx"");
				expected.add(""aaaxxy"");
				expected.add(""xxxAAA"");
				expected.add(""xxx"");
				List<Object> actual = FilterBySubstring.filterBySubstring(input, ""xx"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link FilterBySubstring#filterBySubstring(List, String)} method.
		* It checks if the method returns the correct list when the input list contains the substring.
		*/
		@Test
		void testSubstring4() {
				List<Object> input = new ArrayList<Object>();
				input.add(""grunt"");
				input.add(""trumpet"");
				input.add(""prune"");
				input.add(""gruesome"");
				List<Object> expected = new ArrayList<Object>();
				expected.add(""grunt"");
				expected.add(""prune"");
				List<Object> actual = FilterBySubstring.filterBySubstring(input, ""run"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link FilterBySubstring#filterBySubstring(List, String)} method.
		* It checks if the method returns the correct list when the input list contains the substring.
		*/
		@Test
		void testSubstring5() {
				List<Object> input = new ArrayList<Object>();
				input.add(""grunt"");
				input.add(""trumpet"");
				input.add(""prune"");
				input.add(""gruesome"");
				List<Object> expected = new ArrayList<Object>();
				expected.add(""grunt"");
				expected.add(""trumpet"");
				expected.add(""prune"");
				expected.add(""gruesome"");
				List<Object> actual = FilterBySubstring.filterBySubstring(input, ""r"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link FilterBySubstring#filterBySubstring(List, String)} method.
		* It checks if the method returns the correct list when the input list contains the substring.
		*/
		@Test
		void testSubstring6() {
				List<Object> input = new ArrayList<Object>();
				input.add(""grunt"");
				input.add(""trumpet"");
				input.add(""prune"");
				input.add(""gruesome"");
				List<Object> expected = new ArrayList<Object>();
				expected.add(""grunt"");
				expected.add(""trumpet"");
				expected.add(""prune"");
				expected.add(""gruesome"");
				List<Object> actual = FilterBySubstring.filterBySubstring(input, ""ru"");
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link FilterBySubstring#filterBySubstring(List, String)} method.
		* It checks if the method returns the correct list when the input list contains the substring.
		*/
		@Test
		void testSubstring7() {
				List<Object> input = new ArrayList<Object>();
				input.add(""grunt"");
				input.add(""trumpet"");
				input.add(""prune"");
				input.add(""gruesome"");
				List<Object> expected = new ArrayList<Object>();
				expected"
cmpl-6tVnAvbwJam7TvwXBTEK4IFl3vknK,/HumanEvalJava/src/main/java/original/id_70.java,72.60691976547241,length,"// StrangeSortList.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class StrangeSortList {

    /**
     * * Given list of integers, return list in strange order.
     * Strange sorting, is when you start with the minimum value,
     * then maximum of the remaining integers, then minimum and so on.
     *
     * Examples:
     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
     * strange_sort_list([]) == []
     *
     * > strangeSortList([1, 2, 3, 4])
     * [1, 4, 2, 3]
     * > strangeSortList([5, 6, 7, 8, 9])
     * [5, 9, 6, 8, 7]
     * > strangeSortList([1, 2, 3, 4, 5])
     * [1, 5, 2, 4, 3]
     * > strangeSortList([5, 6, 7, 8, 9, 1])
     * [1, 9, 5, 8, 6, 7]
     * > strangeSortList([5, 5, 5, 5])
     * [5, 5, 5, 5]
     * > strangeSortList([])
     * []
     * > strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])
     * [1, 8, 2, 7, 3, 6, 4, 5]
     * > strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])
     * [-5, 5, -5, 5, 0, 2, 2, 2]
     * > strangeSortList([111111])
     * [111111]
     */
    public static List<Object> strangeSortList(List<Object> lst) {
        List<Object> result = new ArrayList<Object>();
        List<Integer> sorted = new ArrayList<Integer>();
        for (Object value : lst) {
            if (value instanceof Integer) {
                sorted.add((Integer) value);
            }
        }
        Collections.sort(sorted);
        int i = 0;
        int j = sorted.size() - 1;
        while (i <= j) {
            result.add(sorted.get(i));
            if (i != j) {
                result.add(sorted.get(j));
            }
            i++;
            j--;
        }
        return result;
    }
}
","// StrangeSortListTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StrangeSortList}.
* It contains ten unit test cases for the {@link StrangeSortList#strangeSortList(List)} method.
*/
class StrangeSortListTest {","// StrangeSortListTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StrangeSortList}.
* It contains ten unit test cases for the {@link StrangeSortList#strangeSortList(List)} method.
*/
class StrangeSortListTest {

	/**
	* Test case for {@link StrangeSortList#strangeSortList(List)} method.
	* It tests the method with a list of integers.
	*/
	@Test
	void testStrangeSortList() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		lst.add(2);
		lst.add(3);
		lst.add(4);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(4);
		expected.add(2);
		expected.add(3);
		assertEquals(expected, StrangeSortList.strangeSortList(lst));
	}
	
	/**
	* Test case for {@link StrangeSortList#strangeSortList(List)} method.
	* It tests the method with a list of integers.
	*/
	@Test
	void testStrangeSortList2() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(5);
		lst.add(6);
		lst.add(7);
		lst.add(8);
		lst.add(9);
		List<Object> expected = new ArrayList<Object>();
		expected.add(5);
		expected.add(9);
		expected.add(6);
		expected.add(8);
		expected.add(7);
		assertEquals(expected, StrangeSortList.strangeSortList(lst));
	}
	
	/**
	* Test case for {@link StrangeSortList#strangeSortList(List)} method.
	* It tests the method with a list of integers.
	*/
	@Test
	void testStrangeSortList3() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		lst.add(2);
		lst.add(3);
		lst.add(4);
		lst.add(5);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(5);
		expected.add(2);
		expected.add(4);
		expected.add(3);
		assertEquals(expected, StrangeSortList.strangeSortList(lst));
	}
	
	/**
	* Test case for {@link StrangeSortList#strangeSortList(List)} method.
	* It tests the method with a list of integers.
	*/
	@Test
	void testStrangeSortList4() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(5);
		lst.add(6);
		lst.add(7);
		lst.add(8);
		lst.add(9);
		lst.add(1);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(9);
		expected.add(5);
		expected.add(8);
		expected.add(6);
		expected.add(7);
		assertEquals(expected, StrangeSortList.strangeSortList(lst));
	}
	
	/**
	* Test case for {@link StrangeSortList#strangeSortList(List)} method.
	* It tests the method with a list of integers.
	*/
	@Test
	void testStrangeSortList5() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(5);
		lst.add(5);
		lst.add(5);
		lst.add(5);
		List<Object> expected = new ArrayList<Object>();
		expected.add(5);
		expected.add(5);
		expected.add(5);
		expected.add(5);
		assertEquals(expected, StrangeSortList.strangeSortList(lst));
	}
	
	/**
	* Test case for {@link StrangeSortList#strangeSortList(List)} method.
	* It tests the method with a list of integers.
	*/
	@Test
	void testStrangeSortList6() {
		List<Object> lst = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, StrangeSortList.strangeSortList(lst));
	}
	
	/**
	* Test case for {@link StrangeSortList#strangeSortList(List)} method.
	* It tests the method with a list of integers.
	*/
	@Test
	void testStrangeSortList7() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		lst.add(2);
		lst.add(3);
		lst.add(4);
		lst.add(5);
		lst.add(6);
		lst.add(7);
		lst.add(8);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(8);
		expected.add(2);
		expected.add(7);
		expected.add(3);
		expected.add(6);
		expected.add(4);
		expected.add(5);
		assertEquals(expected, StrangeSortList.strangeSortList(lst));
	}
	
	/**
	* Test case for {@link StrangeSortList#strangeSortList(List)} method.
	* It tests the method with a list of integers.
	*/
	@Test
	void testStrangeSortList8() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(0);
		lst.add(2);
		lst.add(2);
		lst.add(2);
		lst.add(5);
		lst.add(5);
		lst.add(-5);
		lst.add(-5);
		List<Object> expected = new ArrayList<Object>();
		expected.add(-5);
		expected.add(5);
		expected.add(-5);
		expected.add(5);
		expected.add(0);
		expected.add(2);
		expected.add(2);
		expected.add(2);
		assertEquals(expected, StrangeSortList.strangeSortList(lst));
	}
	
	/**
	* Test case for {@link StrangeSortList#strangeSortList(List)} method.
	* It tests the method with a list of integers.
	*/
	@Test
	void testStrangeSortList9() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(111111);
		List<Object> expected = new ArrayList<Object>();
		expected.add(111111);
		assertEquals(expected, StrangeSortList.strangeSortList(lst));
	}
	
	/**
	* Test case for {@link StrangeSortList#strangeSortList(List)} method.
	* It tests the method with a list of integers.
	*/
	@Test
	void testStrangeSortList10() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		lst.add(2);
		lst.add(3);
		lst.add(4);
		lst.add(5);
		lst.add(6);
		lst.add(7);
		lst.add(8);
		lst.add(9);
		lst.add(10);
		lst.add(11);
		lst.add(12);
	"
cmpl-6tVoK78I9Q1Mvrq9qI85SRr1x0fxY,/HumanEvalJava/src/main/java/original/id_71.java,79.3396942615509,length,"// TriangleArea1.java
package original;

class TriangleArea1 {

    /**
     * * Given the lengths of the three sides of a triangle. Return the area of
     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.
     * Otherwise return -1
     * Three sides make a valid triangle when the sum of any two sides is greater
     * than the third side.
     * Example:
     * triangle_area(3, 4, 5) == 6.00
     * triangle_area(1, 2, 10) == -1
     *
     * > triangleArea(3, 4, 5)
     * 6.0
     * > triangleArea(1, 2, 10)
     * -1
     * > triangleArea(4, 8, 5)
     * 8.18
     * > triangleArea(2, 2, 2)
     * 1.73
     * > triangleArea(1, 2, 3)
     * -1
     * > triangleArea(10, 5, 7)
     * 16.25
     * > triangleArea(2, 6, 3)
     * -1
     * > triangleArea(1, 1, 1)
     * 0.43
     * > triangleArea(2, 2, 10)
     * -1
     */
    public static Number triangleArea(int a, int b, int c) {
        if (a + b <= c || a + c <= b || b + c <= a) {
            return -1;
        }
        double p = (a + b + c) / 2.0;
        return Math.round(Math.sqrt(p * (p - a) * (p - b) * (p - c)) * 100.0) / 100.0;
    }
}
","// TriangleArea1Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea1}.
* It contains ten unit test cases for the {@link TriangleArea1#triangleArea(int, int, int)} method.
*/
class TriangleArea1Test {","// TriangleArea1Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea1}.
* It contains ten unit test cases for the {@link TriangleArea1#triangleArea(int, int, int)} method.
*/
class TriangleArea1Test {

	@Test
	void testTriangleArea1() {
		assertEquals(6.0, TriangleArea1.triangleArea(3, 4, 5));
	}
	
	@Test
	void testTriangleArea2() {
		assertEquals(-1, TriangleArea1.triangleArea(1, 2, 10));
	}
	
	@Test
	void testTriangleArea3() {
		assertEquals(8.18, TriangleArea1.triangleArea(4, 8, 5));
	}
	
	@Test
	void testTriangleArea4() {
		assertEquals(1.73, TriangleArea1.triangleArea(2, 2, 2));
	}
	
	@Test
	void testTriangleArea5() {
		assertEquals(-1, TriangleArea1.triangleArea(1, 2, 3));
	}
	
	@Test
	void testTriangleArea6() {
		assertEquals(16.25, TriangleArea1.triangleArea(10, 5, 7));
	}
	
	@Test
	void testTriangleArea7() {
		assertEquals(-1, TriangleArea1.triangleArea(2, 6, 3));
	}
	
	@Test
	void testTriangleArea8() {
		assertEquals(0.43, TriangleArea1.triangleArea(1, 1, 1));
	}
	
	@Test
	void testTriangleArea9() {
		assertEquals(-1, TriangleArea1.triangleArea(2, 2, 10));
	}
	
	@Test
	void testTriangleArea10() {
		assertEquals(0.0, TriangleArea1.triangleArea(0, 0, 0));
	}
}

// TriangleArea2.java
package refactored;

class TriangleArea2 {

    /**
     * * Given the lengths of the three sides of a triangle. Return the area of
     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.
     * Otherwise return -1
     * Three sides make a valid triangle when the sum of any two sides is greater
     * than the third side.
     * Example:
     * triangle_area(3, 4, 5) == 6.00
     * triangle_area(1, 2, 10) == -1
     *
     * > triangleArea(3, 4, 5)
     * 6.0
     * > triangleArea(1, 2, 10)
     * -1
     * > triangleArea(4, 8, 5)
     * 8.18
     * > triangleArea(2, 2, 2)
     * 1.73
     * > triangleArea(1, 2, 3)
     * -1
     * > triangleArea(10, 5, 7)
     * 16.25
     * > triangleArea(2, 6, 3)
     * -1
     * > triangleArea(1, 1, 1)
     * 0.43
     * > triangleArea(2, 2, 10)
     * -1
     */
    public static Number triangleArea(int a, int b, int c) {
        if (a + b <= c || a + c <= b || b + c <= a) {
            return -1;
        }
        double p = (a + b + c) / 2.0;
        return Math.round(Math.sqrt(p * (p - a) * (p - b) * (p - c)) * 100.0) / 100.0;
    }
}

// TriangleArea2Test.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea2}.
* It contains ten unit test cases for the {@link TriangleArea2#triangleArea(int, int, int)} method.
*/
class TriangleArea2Test {
		
	@Test
	void testTriangleArea1() {
		assertEquals(6.0, TriangleArea2.triangleArea(3, 4, 5));
	}
	
	@Test
	void testTriangleArea2() {
		assertEquals(-1, TriangleArea2.triangleArea(1, 2, 10));
	}
	
	@Test
	void testTriangleArea3() {
		assertEquals(8.18, TriangleArea2.triangleArea(4, 8, 5));
	}
	
	@Test
	void testTriangleArea4() {
		assertEquals(1.73, TriangleArea2.triangleArea(2, 2, 2));
	}
	
	@Test
	void testTriangleArea5() {
		assertEquals(-1, TriangleArea2.triangleArea(1, 2, 3));
	}
	
	@Test
	void testTriangleArea6() {
		assertEquals(16.25, TriangleArea2.triangleArea(10, 5, 7));
	}
	
	@Test
	void testTriangleArea7() {
		assertEquals(-1, TriangleArea2.triangleArea(2, 6, 3));
	}
	
	@Test
	void testTriangleArea8() {
		assertEquals(0.43, TriangleArea2.triangleArea(1, 1, 1));
	}
	
	@Test
	void testTriangleArea9() {
		assertEquals(-1, TriangleArea2.triangleArea(2, 2, 10));
	}
	
	@Test
	void testTriangleArea10() {
		assertEquals(0.0, TriangleArea2.triangleArea(0, 0, 0));
	}
}

// TriangleArea3.java
package refactored;

class TriangleArea3 {

    /**
     * * Given the lengths of the three sides of a triangle. Return the area of
     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.
     * Otherwise return -1
     * Three sides make a valid triangle when the sum of any two sides is greater
     * than the third side.
     * Example:
     * triangle_area(3, 4, 5) == 6.00
     * triangle_area(1, 2, 10) == -1
     *
     * > triangleArea(3, 4, 5)
     * 6.0
     * > triangleArea(1, 2, 10)
     * -1
     * > triangleArea(4, 8, 5)
     * 8.18
     * > triangleArea(2, 2, 2)
     * 1.73
     * > triangleArea(1, 2, 3)
     * -1
     * > triangleArea(10, 5, 7)
     * 16.25
     * > triangleArea(2, 6, 3)
     * -1
     * > triangleArea(1, 1, 1)
     * 0.43
     * > triangleArea(2, 2, 10)
     * -1
     */
    public static Number triangleArea(int a, int b, int c) {
        if (a + b <= c || a + c <= b || b + c <= a) {
            return -1;
        }
        double p = (a + b + c) / 2.0;
        return Math.round(Math.sqrt(p * (p - a) * (p - b) * (p - c)) * 100.0) / 100.0;
    }
}

// TriangleArea3Test.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea3}.
* It contains ten unit test cases for the {@link TriangleArea3#triangleArea(int, int, int)} method.
*/
class TriangleArea3Test {
		
	@Test
	void testTriangleArea1() {
		assertEquals(6.0, TriangleArea3.triangleArea(3, 4, 5));
	}
	
	@Test
	void testTriangleArea2() {
		assertEquals(-1, TriangleArea3.triangleArea(1, 2, 10));
	}
	
	@Test"
cmpl-6tVpcPef5JxGQDdSd8q6tWGZnE5fc,/HumanEvalJava/src/main/java/original/id_72.java,98.66164422035217,length,"// WillItFly.java
package original;

import java.util.List;

class WillItFly {

    /**
     * * Write a function that returns True if the object q will fly, and False otherwise.
     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.
     *
     * Example:
     * willItFly([1, 2], 5) ➞ False
     * # 1+2 is less than the maximum possible weight, but it's unbalanced.
     *
     * willItFly([3, 2, 3], 1) ➞ False
     * # it's balanced, but 3+2+3 is more than the maximum possible weight.
     *
     * willItFly([3, 2, 3], 9) ➞ True
     * # 3+2+3 is less than the maximum possible weight, and it's balanced.
     *
     * willItFly([3], 5) ➞ True
     * # 3 is less than the maximum possible weight, and it's balanced.
     *
     * > willItFly([3, 2, 3], 9)
     * true
     * > willItFly([1, 2], 5)
     * false
     * > willItFly([3], 5)
     * true
     * > willItFly([3, 2, 3], 1)
     * false
     * > willItFly([1, 2, 3], 6)
     * false
     * > willItFly([5], 5)
     * true
     */
    public static Boolean willItFly(List<Integer> q, int w) {
        int sum = 0;
        for (int i = 0; i < q.size(); i++) {
            sum += q.get(i);
        }
        if (sum > w) {
            return false;
        }
        for (int i = 0; i < q.size() / 2; i++) {
            if (q.get(i) != q.get(q.size() - i - 1)) {
                return false;
            }
        }
        return true;
    }
}
","// WillItFlyTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WillItFly}.
* It contains ten unit test cases for the {@link WillItFly#willItFly(List, int)} method.
*/
class WillItFlyTest {","// WillItFlyTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WillItFly}.
* It contains ten unit test cases for the {@link WillItFly#willItFly(List, int)} method.
*/
class WillItFlyTest {

	@Test
	void testWillItFly() {
		assertTrue(WillItFly.willItFly(List.of(3, 2, 3), 9));
		assertFalse(WillItFly.willItFly(List.of(1, 2), 5));
		assertTrue(WillItFly.willItFly(List.of(3), 5));
		assertFalse(WillItFly.willItFly(List.of(3, 2, 3), 1));
		assertFalse(WillItFly.willItFly(List.of(1, 2, 3), 6));
		assertTrue(WillItFly.willItFly(List.of(5), 5));
		assertFalse(WillItFly.willItFly(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100), 100));
		assertFalse(WillItFly.willItFly(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100), 99));
		assertFalse(WillItFly.willItFly(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100), 98));
		assertFalse(WillItFly.willItFly(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100), 97));
		assertFalse(WillItFly.willItFly(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100), 96));
		assertFalse(WillItFly.willItFly(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100), 95));
		assertFalse(WillItFly.willItFly(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100), 94));
		assertFalse(WillItFly.willItFly(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100), 93));
		assertFalse(WillItFly.willItFly(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32"
cmpl-6tVrCJs6BNhdvrAOUkNjJXPEM9Q2v,/HumanEvalJava/src/main/java/original/id_73.java,72.82647323608398,length,"// SmallestChange.java
package original;

import java.util.List;

class SmallestChange {

    /**
     * * Given an array arr of integers, find the minimum number of elements that
     * need to be changed to make the array palindromic. A palindromic array is an array that
     * is read the same backwards and forwards. In one change, you can change one element to any other element.
     *
     * For example:
     * smallest_change([1,2,3,5,4,7,9,6]) == 4
     * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
     * smallest_change([1, 2, 3, 2, 1]) == 0
     *
     * > smallestChange([1, 2, 3, 5, 4, 7, 9, 6])
     * 4
     * > smallestChange([1, 2, 3, 4, 3, 2, 2])
     * 1
     * > smallestChange([1, 4, 2])
     * 1
     * > smallestChange([1, 4, 4, 2])
     * 1
     * > smallestChange([1, 2, 3, 2, 1])
     * 0
     * > smallestChange([3, 1, 1, 3])
     * 0
     * > smallestChange([1])
     * 0
     * > smallestChange([0, 1])
     * 1
     */
    public static int smallestChange(List<Integer> arr) {
        int result = 0;
        int i = 0;
        int j = arr.size() - 1;
        while (i < j) {
            if (arr.get(i) != arr.get(j)) {
                result++;
            }
            i++;
            j--;
        }
        return result;
    }
}
","// SmallestChangeTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SmallestChange}.
* It contains ten unit test cases for the {@link SmallestChange#smallestChange(List)} method.
*/
class SmallestChangeTest {","// SmallestChangeTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SmallestChange}.
* It contains ten unit test cases for the {@link SmallestChange#smallestChange(List)} method.
*/
class SmallestChangeTest {

	@Test
	void testSmallestChange() {
		assertEquals(4, SmallestChange.smallestChange(List.of(1, 2, 3, 5, 4, 7, 9, 6)));
		assertEquals(1, SmallestChange.smallestChange(List.of(1, 2, 3, 4, 3, 2, 2)));
		assertEquals(1, SmallestChange.smallestChange(List.of(1, 4, 2)));
		assertEquals(1, SmallestChange.smallestChange(List.of(1, 4, 4, 2)));
		assertEquals(0, SmallestChange.smallestChange(List.of(1, 2, 3, 2, 1)));
		assertEquals(0, SmallestChange.smallestChange(List.of(3, 1, 1, 3)));
		assertEquals(0, SmallestChange.smallestChange(List.of(1)));
		assertEquals(1, SmallestChange.smallestChange(List.of(0, 1)));
		assertEquals(1, SmallestChange.smallestChange(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 7"
cmpl-6tVsNRpunxBQjLyuWKXJX1IZwub2W,/HumanEvalJava/src/main/java/original/id_74.java,30.115288019180298,stop,"// TotalMatch.java
package original;

import java.util.List;

class TotalMatch {

    /**
     * * Write a function that accepts two lists of strings and returns the list that has
     * total number of chars in the all strings of the list less than the other list.
     *
     * if the two lists have the same number of chars, return the first list.
     *
     * Examples
     * total_match([], []) ➞ []
     * total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
     * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
     * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
     * total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
     *
     * > totalMatch([], [])
     * []
     * > totalMatch([""hi"", ""admin""], [""hi"", ""hi""])
     * [""hi"", ""hi""]
     * > totalMatch([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])
     * [""hi"", ""admin""]
     * > totalMatch([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])
     * [""4""]
     * > totalMatch([""hi"", ""admin""], [""hI"", ""Hi""])
     * [""hI"", ""Hi""]
     * > totalMatch([""hi"", ""admin""], [""hI"", ""hi"", ""hi""])
     * [""hI"", ""hi"", ""hi""]
     * > totalMatch([""hi"", ""admin""], [""hI"", ""hi"", ""hii""])
     * [""hi"", ""admin""]
     * > totalMatch([], [""this""])
     * []
     * > totalMatch([""this""], [])
     * []
     */
    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {
        int sum1 = 0;
        int sum2 = 0;
        for (Object value : lst1) {
            if (value instanceof String) {
                sum1 += ((String) value).length();
            }
        }
        for (Object value : lst2) {
            if (value instanceof String) {
                sum2 += ((String) value).length();
            }
        }
        if (sum1 <= sum2) {
            return lst1;
        } else {
            return lst2;
        }
    }
}
","// TotalMatchTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TotalMatch}.
* It contains ten unit test cases for the {@link TotalMatch#totalMatch(List, List)} method.
*/
class TotalMatchTest {","// TotalMatchTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TotalMatch}.
* It contains ten unit test cases for the {@link TotalMatch#totalMatch(List, List)} method.
*/
class TotalMatchTest {

	@Test
	void testTotalMatch() {
		List<Object> lst1 = List.of();
		List<Object> lst2 = List.of();
		assertEquals(List.of(), TotalMatch.totalMatch(lst1, lst2));
		
		lst1 = List.of(""hi"", ""admin"");
		lst2 = List.of(""hi"", ""hi"");
		assertEquals(List.of(""hi"", ""hi""), TotalMatch.totalMatch(lst1, lst2));
		
		lst1 = List.of(""hi"", ""admin"");
		lst2 = List.of(""hi"", ""hi"", ""admin"", ""project"");
		assertEquals(List.of(""hi"", ""admin""), TotalMatch.totalMatch(lst1, lst2));
		
		lst1 = List.of(""4"");
		lst2 = List.of(""1"", ""2"", ""3"", ""4"", ""5"");
		assertEquals(List.of(""4""), TotalMatch.totalMatch(lst1, lst2));
		
		lst1 = List.of(""hi"", ""admin"");
		lst2 = List.of(""hI"", ""Hi"");
		assertEquals(List.of(""hI"", ""Hi""), TotalMatch.totalMatch(lst1, lst2));
		
		lst1 = List.of(""hi"", ""admin"");
		lst2 = List.of(""hI"", ""hi"", ""hi"");
		assertEquals(List.of(""hI"", ""hi"", ""hi""), TotalMatch.totalMatch(lst1, lst2));
		
		lst1 = List.of(""hi"", ""admin"");
		lst2 = List.of(""hI"", ""hi"", ""hii"");
		assertEquals(List.of(""hi"", ""admin""), TotalMatch.totalMatch(lst1, lst2));
		
		lst1 = List.of();
		lst2 = List.of(""this"");
		assertEquals(List.of(), TotalMatch.totalMatch(lst1, lst2));
		
		lst1 = List.of(""this"");
		lst2 = List.of();
		assertEquals(List.of(), TotalMatch.totalMatch(lst1, lst2));
		
		lst1 = List.of(""this"", ""is"", ""a"", ""test"");
		lst2 = List.of(""this"", ""is"", ""a"", ""test"");
		assertEquals(List.of(""this"", ""is"", ""a"", ""test""), TotalMatch.totalMatch(lst1, lst2));
	}
}"
cmpl-6tVtQw7Wss1HpJyNMxKB9Dx5tqmkw,/HumanEvalJava/src/main/java/original/id_75.java,79.64676141738892,length,"// IsMultiplyPrime.java
package original;

class IsMultiplyPrime {

    /**
     * Write a function that returns true if the given number is the multiplication of 3 prime numbers
     * and false otherwise.
     * Knowing that (a) is less than 100.
     * Example:
     * isMultiplyPrime(30) == true
     * 30 = 2 * 3 * 5
     *
     * > isMultiplyPrime(5)
     * false
     * > isMultiplyPrime(30)
     * true
     * > isMultiplyPrime(8)
     * true
     * > isMultiplyPrime(10)
     * false
     * > isMultiplyPrime(125)
     * true
     * > isMultiplyPrime(105)
     * true
     * > isMultiplyPrime(126)
     * false
     * > isMultiplyPrime(729)
     * false
     * > isMultiplyPrime(891)
     * false
     * > isMultiplyPrime(1001)
     * true
     */
    public static Boolean isMultiplyPrime(int a) {
        int count = 0;
        for (int i = 2; i <= a; i++) {
            if (a % i == 0) {
                count++;
                a /= i;
                i--;
            }
        }
        return count == 3;
    }
}
","// IsMultiplyPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsMultiplyPrime}.
* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.
*/
class IsMultiplyPrimeTest {","// IsMultiplyPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsMultiplyPrime}.
* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.
*/
class IsMultiplyPrimeTest {

	@Test
	void testIsMultiplyPrime() {
		assertFalse(IsMultiplyPrime.isMultiplyPrime(5));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(30));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(8));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(10));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(125));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(105));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(126));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(729));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(891));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(1001));
	}
}

// IsMultiplyPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsMultiplyPrime}.
* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.
*/
class IsMultiplyPrimeTest {
		
	@Test
	void testIsMultiplyPrime() {
		assertFalse(IsMultiplyPrime.isMultiplyPrime(5));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(30));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(8));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(10));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(125));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(105));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(126));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(729));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(891));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(1001));
	}
}

// IsMultiplyPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsMultiplyPrime}.
* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.
*/
class IsMultiplyPrimeTest {
		
	@Test
	void testIsMultiplyPrime() {
		assertFalse(IsMultiplyPrime.isMultiplyPrime(5));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(30));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(8));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(10));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(125));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(105));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(126));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(729));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(891));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(1001));
	}
}

// IsMultiplyPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsMultiplyPrime}.
* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.
*/
class IsMultiplyPrimeTest {
		
	@Test
	void testIsMultiplyPrime() {
		assertFalse(IsMultiplyPrime.isMultiplyPrime(5));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(30));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(8));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(10));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(125));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(105));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(126));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(729));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(891));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(1001));
	}
}

// IsMultiplyPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsMultiplyPrime}.
* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.
*/
class IsMultiplyPrimeTest {
		
	@Test
	void testIsMultiplyPrime() {
		assertFalse(IsMultiplyPrime.isMultiplyPrime(5));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(30));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(8));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(10));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(125));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(105));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(126));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(729));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(891));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(1001));
	}
}

// IsMultiplyPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsMultiplyPrime}.
* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.
*/
class IsMultiplyPrimeTest {
		
	@Test
	void testIsMultiplyPrime() {
		assertFalse(IsMultiplyPrime.isMultiplyPrime(5));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(30));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(8));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(10));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(125));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(105));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(126));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(729));
		assertFalse(IsMultiplyPrime.isMultiplyPrime(891));
		assertTrue(IsMultiplyPrime.isMultiplyPrime(1001));
	}
}

// IsMultiplyPrimeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsMultiplyPrime}.
* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.
*/
class IsMultiplyPrimeTest {
		
	@Test
	void testIsMultiplyPrime() {
		assertFalse(IsMultiplyPrime"
cmpl-6tVuiEVQJTo81RGWlq4hr2ZxftJMX,/HumanEvalJava/src/main/java/original/id_76.java,107.14279198646545,length,"// IsSimplePower.java
package original;

class IsSimplePower {

    /**
     * Your task is to write a function that returns true if a number x is a simple
     * power of n and false in other cases.
     * x is a simple power of n if n**int=x
     * For example:
     * isSimplePower(1, 4) => true
     * isSimplePower(2, 2) => true
     * isSimplePower(8, 2) => true
     * isSimplePower(3, 2) => false
     * isSimplePower(3, 1) => false
     * isSimplePower(5, 3) => false
     *
     * > isSimplePower(16, 2)
     * true
     * > isSimplePower(143214, 16)
     * false
     * > isSimplePower(4, 2)
     * true
     * > isSimplePower(9, 3)
     * true
     * > isSimplePower(16, 4)
     * true
     * > isSimplePower(24, 2)
     * false
     * > isSimplePower(128, 4)
     * false
     * > isSimplePower(12, 6)
     * false
     * > isSimplePower(1, 1)
     * true
     * > isSimplePower(1, 12)
     * true
     */
    public static Boolean isSimplePower(int x, int n) {
        if (x == 1) {
            return true;
        }
        if (n == 1) {
            return false;
        }
        int y = n;
        while (y < x) {
            y *= n;
        }
        return y == x;
    }
}
","// IsSimplePowerTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSimplePower}.
* It contains ten unit test cases for the {@link IsSimplePower#isSimplePower(int, int)} method.
*/
class IsSimplePowerTest {","// IsSimplePowerTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSimplePower}.
* It contains ten unit test cases for the {@link IsSimplePower#isSimplePower(int, int)} method.
*/
class IsSimplePowerTest {

	@Test
	void testIsSimplePower() {
		assertTrue(IsSimplePower.isSimplePower(1, 4));
		assertTrue(IsSimplePower.isSimplePower(2, 2));
		assertTrue(IsSimplePower.isSimplePower(8, 2));
		assertFalse(IsSimplePower.isSimplePower(3, 2));
		assertFalse(IsSimplePower.isSimplePower(3, 1));
		assertFalse(IsSimplePower.isSimplePower(5, 3));
		assertTrue(IsSimplePower.isSimplePower(16, 2));
		assertFalse(IsSimplePower.isSimplePower(143214, 16));
		assertTrue(IsSimplePower.isSimplePower(4, 2));
		assertTrue(IsSimplePower.isSimplePower(9, 3));
		assertTrue(IsSimplePower.isSimplePower(16, 4));
		assertFalse(IsSimplePower.isSimplePower(24, 2));
		assertFalse(IsSimplePower.isSimplePower(128, 4));
		assertFalse(IsSimplePower.isSimplePower(12, 6));
		assertTrue(IsSimplePower.isSimplePower(1, 1));
		assertTrue(IsSimplePower.isSimplePower(1, 12));
	}
}

// IsSimplePowerTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSimplePower}.
* It contains ten unit test cases for the {@link IsSimplePower#isSimplePower(int, int)} method.
*/
class IsSimplePowerTest {
		
	@Test
	void testIsSimplePower() {
		assertTrue(IsSimplePower.isSimplePower(1, 4));
		assertTrue(IsSimplePower.isSimplePower(2, 2));
		assertTrue(IsSimplePower.isSimplePower(8, 2));
		assertFalse(IsSimplePower.isSimplePower(3, 2));
		assertFalse(IsSimplePower.isSimplePower(3, 1));
		assertFalse(IsSimplePower.isSimplePower(5, 3));
		assertTrue(IsSimplePower.isSimplePower(16, 2));
		assertFalse(IsSimplePower.isSimplePower(143214, 16));
		assertTrue(IsSimplePower.isSimplePower(4, 2));
		assertTrue(IsSimplePower.isSimplePower(9, 3));
		assertTrue(IsSimplePower.isSimplePower(16, 4));
		assertFalse(IsSimplePower.isSimplePower(24, 2));
		assertFalse(IsSimplePower.isSimplePower(128, 4));
		assertFalse(IsSimplePower.isSimplePower(12, 6));
		assertTrue(IsSimplePower.isSimplePower(1, 1));
		assertTrue(IsSimplePower.isSimplePower(1, 12));
	}
}

// IsSimplePowerTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSimplePower}.
* It contains ten unit test cases for the {@link IsSimplePower#isSimplePower(int, int)} method.
*/
class IsSimplePowerTest {
		
	@Test
	void testIsSimplePower() {
		assertTrue(IsSimplePower.isSimplePower(1, 4));
		assertTrue(IsSimplePower.isSimplePower(2, 2));
		assertTrue(IsSimplePower.isSimplePower(8, 2));
		assertFalse(IsSimplePower.isSimplePower(3, 2));
		assertFalse(IsSimplePower.isSimplePower(3, 1));
		assertFalse(IsSimplePower.isSimplePower(5, 3));
		assertTrue(IsSimplePower.isSimplePower(16, 2));
		assertFalse(IsSimplePower.isSimplePower(143214, 16));
		assertTrue(IsSimplePower.isSimplePower(4, 2));
		assertTrue(IsSimplePower.isSimplePower(9, 3));
		assertTrue(IsSimplePower.isSimplePower(16, 4));
		assertFalse(IsSimplePower.isSimplePower(24, 2));
		assertFalse(IsSimplePower.isSimplePower(128, 4));
		assertFalse(IsSimplePower.isSimplePower(12, 6));
		assertTrue(IsSimplePower.isSimplePower(1, 1));
		assertTrue(IsSimplePower.isSimplePower(1, 12));
	}
}

// IsSimplePowerTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSimplePower}.
* It contains ten unit test cases for the {@link IsSimplePower#isSimplePower(int, int)} method.
*/
class IsSimplePowerTest {
		
	@Test
	void testIsSimplePower() {
		assertTrue(IsSimplePower.isSimplePower(1, 4));
		assertTrue(IsSimplePower.isSimplePower(2, 2));
		assertTrue(IsSimplePower.isSimplePower(8, 2));
		assertFalse(IsSimplePower.isSimplePower(3, 2));
		assertFalse(IsSimplePower.isSimplePower(3, 1));
		assertFalse(IsSimplePower.isSimplePower(5, 3));
		assertTrue(IsSimplePower.isSimplePower(16, 2));
		assertFalse(IsSimplePower.isSimplePower(143214, 16));
		assertTrue(IsSimplePower.isSimplePower(4, 2));
		assertTrue(IsSimplePower.isSimplePower(9, 3));
		assertTrue(IsSimplePower.isSimplePower(16, 4));
		assertFalse(IsSimplePower.isSimplePower(24, 2));
		assertFalse(IsSimplePower.isSimplePower(128, 4));
		assertFalse(IsSimplePower.isSimplePower(12, 6));
		assertTrue(IsSimplePower.isSimplePower(1, 1));
		assertTrue(IsSimplePower.isSimplePower(1, 12));
	}
}

// IsSimplePowerTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSimplePower}.
* It contains ten unit test cases for the {@link IsSimplePower#isSimplePower(int, int)} method.
*/
class IsSimplePowerTest {
		
	@Test
	void testIsSimplePower() {
		assertTrue(IsSimplePower.isSimplePower(1, 4));
		assertTrue(IsSimplePower.isSimplePower(2, 2));
		assertTrue(IsSimplePower.isSimplePower(8, 2));
		assertFalse(IsSimplePower.isSimplePower(3, 2));
		assertFalse(IsSimplePower.isSimplePower(3, 1));
		assertFalse(IsSimplePower.isSimplePower(5, 3));
		assertTrue(IsSimplePower.isSimplePower(16, 2));
		assertFalse(IsSimplePower.isSimplePower(143214, 16));
		assertTrue(IsSimplePower.isSimplePower(4, 2));
		assertTrue(IsSimplePower.isSimplePower(9, 3));
		assertTrue(IsSimplePower.isSimplePower(16, 4));
		assertFalse(IsSimplePower.isSimplePower(24, 2));
		assertFalse(IsSimplePower.isSimplePower(128, 4));
		assertFalse(IsSimplePower.isSimplePower(12, 6));
		assertTrue(IsSimplePower.isSimplePower(1, 1));
		assertTrue(IsSimplePower.isSimplePower(1, 12));
	}
}

// IsSimplePowerTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSimplePower"
cmpl-6tVwRObt2QC0EdVBDYmBCR2rbvdeq,/HumanEvalJava/src/main/java/original/id_77.java,6.589065313339233,stop,"// Iscube.java
package original;

class Iscube {

    /**
     * * Write a function that takes an integer a and returns True
     * if this integer is a cube of some integer number.
     * Note: you may assume the input is always valid.
     * Examples:
     * iscube(1) ==> True
     * iscube(2) ==> False
     * iscube(-1) ==> True
     * iscube(64) ==> True
     * iscube(0) ==> True
     * iscube(180) ==> False
     *
     * > iscube(1)
     * true
     * > iscube(2)
     * false
     * > iscube(-1)
     * true
     * > iscube(64)
     * true
     * > iscube(180)
     * false
     * > iscube(1000)
     * true
     * > iscube(0)
     * true
     * > iscube(1729)
     * false
     */
    public static Boolean iscube(int a) {
        if (a < 0) {
            return iscube(-a);
        }
        int i = 0;
        while (i * i * i < a) {
            i++;
        }
        return i * i * i == a;
    }
}
","// IscubeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Iscube}.
* It contains ten unit test cases for the {@link Iscube#iscube(int)} method.
*/
class IscubeTest {","// IscubeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Iscube}.
* It contains ten unit test cases for the {@link Iscube#iscube(int)} method.
*/
class IscubeTest {

	@Test
	void testIscube() {
		assertTrue(Iscube.iscube(1));
		assertFalse(Iscube.iscube(2));
		assertTrue(Iscube.iscube(-1));
		assertTrue(Iscube.iscube(64));
		assertFalse(Iscube.iscube(180));
		assertTrue(Iscube.iscube(1000));
		assertTrue(Iscube.iscube(0));
		assertFalse(Iscube.iscube(1729));
		assertTrue(Iscube.iscube(27));
		assertFalse(Iscube.iscube(28));
	}
}"
cmpl-6tVxUmTLkKmL5dpqNlQZwXmLA8xEY,/HumanEvalJava/src/main/java/original/id_78.java,109.82480049133301,length,"// HexKey.java
package original;

class HexKey {

    /**
     * You have been tasked to write a function that receives
     * a hexadecimal number as a string and counts the number of hexadecimal
     * digits that are primes (prime number, or a prime, is a natural number
     * greater than 1 that is not a product of two smaller natural numbers).
     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
     * So you have to determine a number of the following digits: 2, 3, 5, 7,
     * B (=decimal 11), D (=decimal 13).
     * Note: you may assume the input is always correct or empty string,
     * and symbols A,B,C,D,E,F are always uppercase.
     * Examples:
     * For num = ""AB"" the output should be 1.
     * For num = ""1077E"" the output should be 2.
     * For num = ""ABED1A33"" the output should be 4.
     * For num = ""123456789ABCDEF0"" the output should be 6.
     * For num = ""2020"" the output should be 2.
     *
     * > hexKey(""AB"")
     * 1
     * > hexKey(""1077E"")
     * 2
     * > hexKey(""ABED1A33"")
     * 4
     * > hexKey(""2020"")
     * 2
     * > hexKey(""123456789ABCDEF0"")
     * 6
     * > hexKey(""112233445566778899AABBCCDDEEFF00"")
     * 12
     * > hexKey([])
     * 0
     */
    public static int hexKey(Object num) {
        int result = 0;
        String hex = num.toString();
        for (int i = 0; i < hex.length(); i++) {
            char c = hex.charAt(i);
            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {
                result++;
            }
        }
        return result;
    }
}
","// HexKeyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HexKey}.
* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.
*/
class HexKeyTest {","// HexKeyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HexKey}.
* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.
*/
class HexKeyTest {

	@Test
	void testHexKey() {
		assertEquals(1, HexKey.hexKey(""AB""));
		assertEquals(2, HexKey.hexKey(""1077E""));
		assertEquals(4, HexKey.hexKey(""ABED1A33""));
		assertEquals(2, HexKey.hexKey(""2020""));
		assertEquals(6, HexKey.hexKey(""123456789ABCDEF0""));
		assertEquals(12, HexKey.hexKey(""112233445566778899AABBCCDDEEFF00""));
		assertEquals(0, HexKey.hexKey(""""));
		assertEquals(0, HexKey.hexKey(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
		assertEquals(0, HexKey.hexKey(""0123456789""));
		assertEquals(0, HexKey.hexKey(""0123456789ABCDEF""));
	}
}

// HexKeyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HexKey}.
* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.
*/
class HexKeyTest {
		
	@Test
	void testHexKey() {
		assertEquals(1, HexKey.hexKey(""AB""));
		assertEquals(2, HexKey.hexKey(""1077E""));
		assertEquals(4, HexKey.hexKey(""ABED1A33""));
		assertEquals(2, HexKey.hexKey(""2020""));
		assertEquals(6, HexKey.hexKey(""123456789ABCDEF0""));
		assertEquals(12, HexKey.hexKey(""112233445566778899AABBCCDDEEFF00""));
		assertEquals(0, HexKey.hexKey(""""));
		assertEquals(0, HexKey.hexKey(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
		assertEquals(0, HexKey.hexKey(""0123456789""));
		assertEquals(0, HexKey.hexKey(""0123456789ABCDEF""));
	}
}

// HexKeyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HexKey}.
* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.
*/
class HexKeyTest {
		
	@Test
	void testHexKey() {
		assertEquals(1, HexKey.hexKey(""AB""));
		assertEquals(2, HexKey.hexKey(""1077E""));
		assertEquals(4, HexKey.hexKey(""ABED1A33""));
		assertEquals(2, HexKey.hexKey(""2020""));
		assertEquals(6, HexKey.hexKey(""123456789ABCDEF0""));
		assertEquals(12, HexKey.hexKey(""112233445566778899AABBCCDDEEFF00""));
		assertEquals(0, HexKey.hexKey(""""));
		assertEquals(0, HexKey.hexKey(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
		assertEquals(0, HexKey.hexKey(""0123456789""));
		assertEquals(0, HexKey.hexKey(""0123456789ABCDEF""));
	}
}

// HexKeyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HexKey}.
* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.
*/
class HexKeyTest {
		
	@Test
	void testHexKey() {
		assertEquals(1, HexKey.hexKey(""AB""));
		assertEquals(2, HexKey.hexKey(""1077E""));
		assertEquals(4, HexKey.hexKey(""ABED1A33""));
		assertEquals(2, HexKey.hexKey(""2020""));
		assertEquals(6, HexKey.hexKey(""123456789ABCDEF0""));
		assertEquals(12, HexKey.hexKey(""112233445566778899AABBCCDDEEFF00""));
		assertEquals(0, HexKey.hexKey(""""));
		assertEquals(0, HexKey.hexKey(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
		assertEquals(0, HexKey.hexKey(""0123456789""));
		assertEquals(0, HexKey.hexKey(""0123456789ABCDEF""));
	}
}

// HexKeyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HexKey}.
* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.
*/
class HexKeyTest {
		
	@Test
	void testHexKey() {
		assertEquals(1, HexKey.hexKey(""AB""));
		assertEquals(2, HexKey.hexKey(""1077E""));
		assertEquals(4, HexKey.hexKey(""ABED1A33""));
		assertEquals(2, HexKey.hexKey(""2020""));
		assertEquals(6, HexKey.hexKey(""123456789ABCDEF0""));
		assertEquals(12, HexKey.hexKey(""112233445566778899AABBCCDDEEFF00""));
		assertEquals(0, HexKey.hexKey(""""));
		assertEquals(0, HexKey.hexKey(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
		assertEquals(0, HexKey.hexKey(""0123456789""));
		assertEquals(0, HexKey.hexKey(""0123456789ABCDEF""));
	}
}

// HexKeyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HexKey}.
* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.
*/
class HexKeyTest {
		
	@Test
	void testHexKey() {
		assertEquals(1, HexKey.hexKey(""AB""));
		assertEquals(2, HexKey.hexKey(""1077E""));
		assertEquals(4, HexKey.hexKey(""ABED1A33""));
		assertEquals(2, HexKey.hexKey(""2020""));
		assertEquals(6, HexKey.hexKey(""123456789ABCDEF0""));
		assertEquals(12, HexKey.hexKey(""112233445566778899AABBCCDDEEFF00""));
		assertEquals(0, HexKey.hexKey(""""));
		assertEquals(0, HexKey.hexKey(""ABCDEFGHIJKLMNOPQRSTUVWXYZ""));
		assertEquals(0, HexKey.hexKey(""0123456789""));
		assertEquals(0, HexKey.hexKey(""0123456789ABCDEF""));
	}
}

// HexKeyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of"
cmpl-6tVzGcNqvGSE87cq3vulr1OMrxAsT,/HumanEvalJava/src/main/java/original/id_79.java,99.75296354293823,length,"// DecimalToBinary.java
package original;

class DecimalToBinary {

    /**
     * You will be given a number in decimal form and your task is to convert it to
     * binary format. The function should return a string, with each character representing a binary
     * number. Each character in the string will be '0' or '1'.
     *
     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.
     * The extra characters are there to help with the format.
     *
     * Examples:
     * - decimalToBinary(15)   # returns ""db1111db""
     * - decimalToBinary(32)   # returns ""db100000db""
     *
     * > decimalToBinary(0)
     * ""db0db""
     * > decimalToBinary(32)
     * ""db100000db""
     * > decimalToBinary(103)
     * ""db1100111db""
     * > decimalToBinary(15)
     * ""db1111db""
     */
    public static String decimalToBinary(int decimal) {
        String binary = """";
        if (decimal == 0) {
            return ""db0db"";
        }
        while (decimal > 0) {
            binary = (decimal % 2) + binary;
            decimal = decimal / 2;
        }
        return ""db"" + binary + ""db"";
    }
}
","// DecimalToBinaryTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DecimalToBinary}.
* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.
*/
class DecimalToBinaryTest {","// DecimalToBinaryTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DecimalToBinary}.
* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.
*/
class DecimalToBinaryTest {

	@Test
	void testDecimalToBinary() {
		assertEquals(""db0db"", DecimalToBinary.decimalToBinary(0));
		assertEquals(""db100000db"", DecimalToBinary.decimalToBinary(32));
		assertEquals(""db1100111db"", DecimalToBinary.decimalToBinary(103));
		assertEquals(""db1111db"", DecimalToBinary.decimalToBinary(15));
		assertEquals(""db1111111111111111111111111111db"", DecimalToBinary.decimalToBinary(Integer.MAX_VALUE));
		assertEquals(""db10000000000000000000000000000000db"", DecimalToBinary.decimalToBinary(Integer.MIN_VALUE));
		assertEquals(""db111111111111111111111111111111db"", DecimalToBinary.decimalToBinary(-1));
		assertEquals(""db111111111111111111111111111110db"", DecimalToBinary.decimalToBinary(-2));
		assertEquals(""db111111111111111111111111111101db"", DecimalToBinary.decimalToBinary(-3));
		assertEquals(""db111111111111111111111111111100db"", DecimalToBinary.decimalToBinary(-4));
	}
}

// DecimalToBinaryTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DecimalToBinary}.
* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.
*/
class DecimalToBinaryTest {
		
	@Test
	void testDecimalToBinary() {
		assertEquals(""db0db"", DecimalToBinary.decimalToBinary(0));
		assertEquals(""db100000db"", DecimalToBinary.decimalToBinary(32));
		assertEquals(""db1100111db"", DecimalToBinary.decimalToBinary(103));
		assertEquals(""db1111db"", DecimalToBinary.decimalToBinary(15));
		assertEquals(""db1111111111111111111111111111db"", DecimalToBinary.decimalToBinary(Integer.MAX_VALUE));
		assertEquals(""db10000000000000000000000000000000db"", DecimalToBinary.decimalToBinary(Integer.MIN_VALUE));
		assertEquals(""db111111111111111111111111111111db"", DecimalToBinary.decimalToBinary(-1));
		assertEquals(""db111111111111111111111111111110db"", DecimalToBinary.decimalToBinary(-2));
		assertEquals(""db111111111111111111111111111101db"", DecimalToBinary.decimalToBinary(-3));
		assertEquals(""db111111111111111111111111111100db"", DecimalToBinary.decimalToBinary(-4));
	}
}

// DecimalToBinaryTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DecimalToBinary}.
* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.
*/
class DecimalToBinaryTest {
		
	@Test
	void testDecimalToBinary() {
		assertEquals(""db0db"", DecimalToBinary.decimalToBinary(0));
		assertEquals(""db100000db"", DecimalToBinary.decimalToBinary(32));
		assertEquals(""db1100111db"", DecimalToBinary.decimalToBinary(103));
		assertEquals(""db1111db"", DecimalToBinary.decimalToBinary(15));
		assertEquals(""db1111111111111111111111111111db"", DecimalToBinary.decimalToBinary(Integer.MAX_VALUE));
		assertEquals(""db10000000000000000000000000000000db"", DecimalToBinary.decimalToBinary(Integer.MIN_VALUE));
		assertEquals(""db111111111111111111111111111111db"", DecimalToBinary.decimalToBinary(-1));
		assertEquals(""db111111111111111111111111111110db"", DecimalToBinary.decimalToBinary(-2));
		assertEquals(""db111111111111111111111111111101db"", DecimalToBinary.decimalToBinary(-3));
		assertEquals(""db111111111111111111111111111100db"", DecimalToBinary.decimalToBinary(-4));
	}
}

// DecimalToBinaryTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DecimalToBinary}.
* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.
*/
class DecimalToBinaryTest {
		
	@Test
	void testDecimalToBinary() {
		assertEquals(""db0db"", DecimalToBinary.decimalToBinary(0));
		assertEquals(""db100000db"", DecimalToBinary.decimalToBinary(32));
		assertEquals(""db1100111db"", DecimalToBinary.decimalToBinary(103));
		assertEquals(""db1111db"", DecimalToBinary.decimalToBinary(15));
		assertEquals(""db1111111111111111111111111111db"", DecimalToBinary.decimalToBinary(Integer.MAX_VALUE));
		assertEquals(""db10000000000000000000000000000000db"", DecimalToBinary.decimalToBinary(Integer.MIN_VALUE));
		assertEquals(""db111111111111111111111111111111db"", DecimalToBinary.decimalToBinary(-1));
		assertEquals(""db111111111111111111111111111110db"", DecimalToBinary.decimalToBinary(-2));
		assertEquals(""db111111111111111111111111111101db"", DecimalToBinary.decimalToBinary(-3));
		assertEquals(""db111111111111111111111111111100db"", DecimalToBinary.decimalToBinary(-4));
	}
}

// DecimalToBinaryTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DecimalToBinary}.
* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.
*/
class DecimalToBinaryTest {
		
	@Test
	void testDecimalToBinary() {
		assertEquals(""db0db"", DecimalToBinary.decimalToBinary(0));
		assertEquals(""db100000db"", DecimalToBinary.decimalToBinary(32));
		assertEquals(""db1100111db"", DecimalToBinary.decimalToBinary(103));
		assertEquals(""db1111db"", DecimalToBinary.decimalToBinary(15));
		assertEquals(""db1111111111111111111111111111db"", DecimalToBinary.decimalToBinary(Integer.MAX_VALUE));
		assertEquals(""db10000000000000000000000000000000db"", DecimalToBinary.decimalToBinary(Integer.MIN_VALUE));
		assertEquals(""db111111111111111111111111111111db"", DecimalToBinary.decimalToBinary(-1));
		assertEquals(""db111111111111111111111111111110db"", DecimalToBinary.decimalToBinary(-2));
		assertEquals(""db111111111111111111111111111101db"", DecimalToBinary.decimalToBinary(-3));
		assertEquals(""db111111111111111111111111111100db"", Decimal"
cmpl-6tW0s04cFG72iKQNyo8xnsP3cpq7E,/HumanEvalJava/src/main/java/original/id_8.java,29.592259645462036,stop,"// SumProduct.java
package original;

import java.util.ArrayList;
import java.util.List;

class SumProduct {

    /**
     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
     * Empty sum should be equal to 0 and empty product should be equal to 1.
     *
     * > sumProduct([1, 2, 3, 4])
     * [10, 24]
     * > sumProduct([])
     * [0, 1]
     * > sumProduct([1, 1, 1])
     * [3, 1]
     * > sumProduct([100, 0])
     * [100, 0]
     * > sumProduct([3, 5, 7])
     * [15, 105]
     * > sumProduct([10])
     * [10, 10]
     */
    public static List<Integer> sumProduct(List<Object> numbers) {
        Integer sum = 0;
        Integer product = 1;
        for (Object number : numbers) {
            if (number instanceof Integer) {
                sum += (Integer) number;
                product *= (Integer) number;
            } else {
                throw new IllegalArgumentException(""Invalid number type"");
            }
        }
        List<Integer> result = new ArrayList<Integer>();
        result.add(sum);
        result.add(product);
        return result;
    }
}
","// SumProductTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumProduct}.
* It contains ten unit test cases for the {@link SumProduct#sumProduct(List)} method.
*/
class SumProductTest {","// SumProductTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumProduct}.
* It contains ten unit test cases for the {@link SumProduct#sumProduct(List)} method.
*/
class SumProductTest {

	@Test
	void testSumProduct() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(4);
		List<Integer> result = SumProduct.sumProduct(numbers);
		assertEquals(10, result.get(0));
		assertEquals(24, result.get(1));
	}
	
	@Test
	void testSumProductEmpty() {
		List<Object> numbers = new ArrayList<Object>();
		List<Integer> result = SumProduct.sumProduct(numbers);
		assertEquals(0, result.get(0));
		assertEquals(1, result.get(1));
	}
	
	@Test
	void testSumProductOne() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(1);
		numbers.add(1);
		List<Integer> result = SumProduct.sumProduct(numbers);
		assertEquals(3, result.get(0));
		assertEquals(1, result.get(1));
	}
	
	@Test
	void testSumProductZero() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(100);
		numbers.add(0);
		List<Integer> result = SumProduct.sumProduct(numbers);
		assertEquals(100, result.get(0));
		assertEquals(0, result.get(1));
	}
	
	@Test
	void testSumProductThree() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(3);
		numbers.add(5);
		numbers.add(7);
		List<Integer> result = SumProduct.sumProduct(numbers);
		assertEquals(15, result.get(0));
		assertEquals(105, result.get(1));
	}
	
	@Test
	void testSumProductSingle() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(10);
		List<Integer> result = SumProduct.sumProduct(numbers);
		assertEquals(10, result.get(0));
		assertEquals(10, result.get(1));
	}
	
	@Test
	void testSumProductNegative() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(-1);
		numbers.add(-2);
		numbers.add(-3);
		numbers.add(-4);
		List<Integer> result = SumProduct.sumProduct(numbers);
		assertEquals(-10, result.get(0));
		assertEquals(24, result.get(1));
	}
	
	@Test
	void testSumProductNegativeOne() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(-1);
		numbers.add(-1);
		numbers.add(-1);
		List<Integer> result = SumProduct.sumProduct(numbers);
		assertEquals(-3, result.get(0));
		assertEquals(-1, result.get(1));
	}
	
	@Test
	void testSumProductNegativeZero() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(-100);
		numbers.add(0);
		List<Integer> result = SumProduct.sumProduct(numbers);
		assertEquals(-100, result.get(0));
		assertEquals(0, result.get(1));
	}
	
	@Test
	void testSumProductNegativeThree() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(-3);
		numbers.add(-5);
		numbers.add(-7);
		List<Integer> result = SumProduct.sumProduct(numbers);
		assertEquals(-15, result.get(0));
		assertEquals(-105, result.get(1));
	}
	
	@Test
	void testSumProductNegativeSingle() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(-10);
		List<Integer> result = SumProduct.sumProduct(numbers);
		assertEquals(-10, result.get(0));
		assertEquals(-10, result.get(1));
	}
}"
cmpl-6tW1veFUwA8a3ttlIXDHkL4L3fLpt,/HumanEvalJava/src/main/java/original/id_80.java,55.418548345565796,length,"// IsHappy.java
package original;

class IsHappy {

    /**
     * You are given a string s.
     * Your task is to check if the string is happy or not.
     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
     * For example:
     * isHappy(a) => False
     * isHappy(aa) => False
     * isHappy(abcd) => True
     * isHappy(aabb) => False
     * isHappy(adb) => True
     * isHappy(xyy) => False
     *
     * > isHappy(""a"")
     * false
     * > isHappy(""aa"")
     * false
     * > isHappy(""abcd"")
     * true
     * > isHappy(""aabb"")
     * false
     * > isHappy(""adb"")
     * true
     * > isHappy(""xyy"")
     * false
     * > isHappy(""iopaxpoi"")
     * true
     * > isHappy(""iopaxioi"")
     * false
     */
    public static Boolean isHappy(String s) {
        if (s.length() < 3) {
            return false;
        }
        for (int i = 0; i < s.length() - 2; i++) {
            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {
                return false;
            }
        }
        return true;
    }
}
","// IsHappyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {","// IsHappyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {

	@Test
	void testIsHappy() {
		assertFalse(IsHappy.isHappy(""a""));
		assertFalse(IsHappy.isHappy(""aa""));
		assertTrue(IsHappy.isHappy(""abcd""));
		assertFalse(IsHappy.isHappy(""aabb""));
		assertTrue(IsHappy.isHappy(""adb""));
		assertFalse(IsHappy.isHappy(""xyy""));
		assertTrue(IsHappy.isHappy(""iopaxpoi""));
		assertFalse(IsHappy.isHappy(""iopaxioi""));
		assertFalse(IsHappy.isHappy(""""));
		assertFalse(IsHappy.isHappy(""aab""));
	}
}

// IsHappyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {
		
	@Test
	void testIsHappy() {
		assertFalse(IsHappy.isHappy(""a""));
		assertFalse(IsHappy.isHappy(""aa""));
		assertTrue(IsHappy.isHappy(""abcd""));
		assertFalse(IsHappy.isHappy(""aabb""));
		assertTrue(IsHappy.isHappy(""adb""));
		assertFalse(IsHappy.isHappy(""xyy""));
		assertTrue(IsHappy.isHappy(""iopaxpoi""));
		assertFalse(IsHappy.isHappy(""iopaxioi""));
		assertFalse(IsHappy.isHappy(""""));
		assertFalse(IsHappy.isHappy(""aab""));
	}
}

// IsHappyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {
		
	@Test
	void testIsHappy() {
		assertFalse(IsHappy.isHappy(""a""));
		assertFalse(IsHappy.isHappy(""aa""));
		assertTrue(IsHappy.isHappy(""abcd""));
		assertFalse(IsHappy.isHappy(""aabb""));
		assertTrue(IsHappy.isHappy(""adb""));
		assertFalse(IsHappy.isHappy(""xyy""));
		assertTrue(IsHappy.isHappy(""iopaxpoi""));
		assertFalse(IsHappy.isHappy(""iopaxioi""));
		assertFalse(IsHappy.isHappy(""""));
		assertFalse(IsHappy.isHappy(""aab""));
	}
}

// IsHappyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {
		
	@Test
	void testIsHappy() {
		assertFalse(IsHappy.isHappy(""a""));
		assertFalse(IsHappy.isHappy(""aa""));
		assertTrue(IsHappy.isHappy(""abcd""));
		assertFalse(IsHappy.isHappy(""aabb""));
		assertTrue(IsHappy.isHappy(""adb""));
		assertFalse(IsHappy.isHappy(""xyy""));
		assertTrue(IsHappy.isHappy(""iopaxpoi""));
		assertFalse(IsHappy.isHappy(""iopaxioi""));
		assertFalse(IsHappy.isHappy(""""));
		assertFalse(IsHappy.isHappy(""aab""));
	}
}

// IsHappyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {
		
	@Test
	void testIsHappy() {
		assertFalse(IsHappy.isHappy(""a""));
		assertFalse(IsHappy.isHappy(""aa""));
		assertTrue(IsHappy.isHappy(""abcd""));
		assertFalse(IsHappy.isHappy(""aabb""));
		assertTrue(IsHappy.isHappy(""adb""));
		assertFalse(IsHappy.isHappy(""xyy""));
		assertTrue(IsHappy.isHappy(""iopaxpoi""));
		assertFalse(IsHappy.isHappy(""iopaxioi""));
		assertFalse(IsHappy.isHappy(""""));
		assertFalse(IsHappy.isHappy(""aab""));
	}
}

// IsHappyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {
		
	@Test
	void testIsHappy() {
		assertFalse(IsHappy.isHappy(""a""));
		assertFalse(IsHappy.isHappy(""aa""));
		assertTrue(IsHappy.isHappy(""abcd""));
		assertFalse(IsHappy.isHappy(""aabb""));
		assertTrue(IsHappy.isHappy(""adb""));
		assertFalse(IsHappy.isHappy(""xyy""));
		assertTrue(IsHappy.isHappy(""iopaxpoi""));
		assertFalse(IsHappy.isHappy(""iopaxioi""));
		assertFalse(IsHappy.isHappy(""""));
		assertFalse(IsHappy.isHappy(""aab""));
	}
}

// IsHappyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {
		
	@Test
	void testIsHappy() {
		assertFalse(IsHappy.isHappy(""a""));
		assertFalse(IsHappy.isHappy(""aa""));
		assertTrue(IsHappy.isHappy(""abcd""));
		assertFalse(IsHappy.isHappy(""aabb""));
		assertTrue(IsHappy.isHappy(""adb""));
		assertFalse(IsHappy.isHappy(""xyy""));
		assertTrue(IsHappy.isHappy(""iopaxpoi""));
		assertFalse(IsHappy.isHappy(""iopaxioi""));
		assertFalse(IsHappy.isHappy(""""));
		assertFalse(IsHappy.isHappy(""aab""));
	}
}

// IsHappyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsHappy}.
* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.
*/
class IsHappyTest {
		
	@Test
	void testIsHappy() {
		assertFalse(IsHappy.isHappy(""a""));
		assertFalse(IsHappy.isHappy(""aa""));
		assertTrue(IsHappy.isHappy(""abcd""));
		assertFalse(IsHappy.isHappy(""aabb""));
		assertTrue(IsHappy.isHappy(""adb""));
		assertFalse(IsHappy.isHappy(""xyy""));
		assert"
cmpl-6tW2yw7m9FQamhvjqIVHcsyqF5Hoi,/HumanEvalJava/src/main/java/original/id_81.java,57.894076108932495,length,"// NumericalLetterGrade.java
package original;

import java.util.ArrayList;
import java.util.List;

class NumericalLetterGrade {

    /**
     * It is the last week of the semester and the teacher has to give the grades
     * to students. The teacher has been making her own algorithm for grading.
     * The only problem is, she has lost the code she used for grading.
     * She has given you a list of GPAs for some students and you have to write
     * a function that can output a list of letter grades using the following table:
     * GPA       |    Letter grade
     * 4.0                A+
     * > 3.7                A
     * > 3.3                A-
     * > 3.0                B+
     * > 2.7                B
     * > 2.3                B-
     * > 2.0                C+
     * > 1.7                C
     * > 1.3                C-
     * > 1.0                D+
     * > 0.7                D
     * > 0.0                D-
     * 0.0                E
     *
     * Example:
     * numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
     *
     * > numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])
     * [""A+"", ""B"", ""C-"", ""C"", ""A-""]
     * > numericalLetterGrade([1.2])
     * [""D+""]
     * > numericalLetterGrade([0.5])
     * [""D-""]
     * > numericalLetterGrade([0.0])
     * [""E""]
     * > numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])
     * [""D"", ""D-"", ""C-"", ""B"", ""B+""]
     * > numericalLetterGrade([0, 0.7])
     * [""E"", ""D-""]
     */
    public static List<String> numericalLetterGrade(List<Number> grades) {
        List<String> result = new ArrayList<String>();
        for (Number grade : grades) {
            if (grade.doubleValue() >= 4.0) {
                result.add(""A+"");
            } else if (grade.doubleValue() > 3.7) {
                result.add(""A"");
            } else if (grade.doubleValue() > 3.3) {
                result.add(""A-"");
            } else if (grade.doubleValue() > 3.0) {
                result.add(""B+"");
            } else if (grade.doubleValue() > 2.7) {
                result.add(""B"");
            } else if (grade.doubleValue() > 2.3) {
                result.add(""B-"");
            } else if (grade.doubleValue() > 2.0) {
                result.add(""C+"");
            } else if (grade.doubleValue() > 1.7) {
                result.add(""C"");
            } else if (grade.doubleValue() > 1.3) {
                result.add(""C-"");
            } else if (grade.doubleValue() > 1.0) {
                result.add(""D+"");
            } else if (grade.doubleValue() > 0.7) {
                result.add(""D"");
            } else if (grade.doubleValue() > 0.0) {
                result.add(""D-"");
            } else {
                result.add(""E"");
            }
        }
        return result;
    }
}
","// NumericalLetterGradeTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NumericalLetterGrade}.
* It contains ten unit test cases for the {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
*/
class NumericalLetterGradeTest {","// NumericalLetterGradeTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NumericalLetterGrade}.
* It contains ten unit test cases for the {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
*/
class NumericalLetterGradeTest {

	/**
	* Test case for {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
	* It tests if the method returns the correct letter grades for the given GPAs.
	*/
	@Test
	void testNumericalLetterGrade() {
		List<Number> grades = new ArrayList<Number>();
		grades.add(4.0);
		grades.add(3);
		grades.add(1.7);
		grades.add(2);
		grades.add(3.5);
		List<String> expected = new ArrayList<String>();
		expected.add(""A+"");
		expected.add(""B"");
		expected.add(""C-"");
		expected.add(""C"");
		expected.add(""A-"");
		assertEquals(expected, NumericalLetterGrade.numericalLetterGrade(grades));
	}
	
	/**
	* Test case for {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
	* It tests if the method returns the correct letter grades for the given GPAs.
	*/
	@Test
	void testNumericalLetterGrade2() {
		List<Number> grades = new ArrayList<Number>();
		grades.add(1.2);
		List<String> expected = new ArrayList<String>();
		expected.add(""D+"");
		assertEquals(expected, NumericalLetterGrade.numericalLetterGrade(grades));
	}
	
	/**
	* Test case for {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
	* It tests if the method returns the correct letter grades for the given GPAs.
	*/
	@Test
	void testNumericalLetterGrade3() {
		List<Number> grades = new ArrayList<Number>();
		grades.add(0.5);
		List<String> expected = new ArrayList<String>();
		expected.add(""D-"");
		assertEquals(expected, NumericalLetterGrade.numericalLetterGrade(grades));
	}
	
	/**
	* Test case for {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
	* It tests if the method returns the correct letter grades for the given GPAs.
	*/
	@Test
	void testNumericalLetterGrade4() {
		List<Number> grades = new ArrayList<Number>();
		grades.add(0.0);
		List<String> expected = new ArrayList<String>();
		expected.add(""E"");
		assertEquals(expected, NumericalLetterGrade.numericalLetterGrade(grades));
	}
	
	/**
	* Test case for {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
	* It tests if the method returns the correct letter grades for the given GPAs.
	*/
	@Test
	void testNumericalLetterGrade5() {
		List<Number> grades = new ArrayList<Number>();
		grades.add(1);
		grades.add(0.3);
		grades.add(1.5);
		grades.add(2.8);
		grades.add(3.3);
		List<String> expected = new ArrayList<String>();
		expected.add(""D"");
		expected.add(""D-"");
		expected.add(""C-"");
		expected.add(""B"");
		expected.add(""B+"");
		assertEquals(expected, NumericalLetterGrade.numericalLetterGrade(grades));
	}
	
	/**
	* Test case for {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
	* It tests if the method returns the correct letter grades for the given GPAs.
	*/
	@Test
	void testNumericalLetterGrade6() {
		List<Number> grades = new ArrayList<Number>();
		grades.add(0);
		grades.add(0.7);
		List<String> expected = new ArrayList<String>();
		expected.add(""E"");
		expected.add(""D-"");
		assertEquals(expected, NumericalLetterGrade.numericalLetterGrade(grades));
	}
	
	/**
	* Test case for {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
	* It tests if the method returns the correct letter grades for the given GPAs.
	*/
	@Test
	void testNumericalLetterGrade7() {
		List<Number> grades = new ArrayList<Number>();
		grades.add(3.7);
		grades.add(3.3);
		grades.add(3.0);
		grades.add(2.7);
		grades.add(2.3);
		grades.add(2.0);
		grades.add(1.7);
		grades.add(1.3);
		grades.add(1.0);
		grades.add(0.7);
		grades.add(0.0);
		List<String> expected = new ArrayList<String>();
		expected.add(""A"");
		expected.add(""A-"");
		expected.add(""B+"");
		expected.add(""B"");
		expected.add(""B-"");
		expected.add(""C+"");
		expected.add(""C"");
		expected.add(""C-"");
		expected.add(""D+"");
		expected.add(""D"");
		expected.add(""E"");
		assertEquals(expected, NumericalLetterGrade.numericalLetterGrade(grades));
	}
	
	/**
	* Test case for {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
	* It tests if the method returns the correct letter grades for the given GPAs.
	*/
	@Test
	void testNumericalLetterGrade8() {
		List<Number> grades = new ArrayList<Number>();
		grades.add(0.3);
		grades.add(0.7);
		grades.add(1.0);
		grades.add(1.3);
		grades.add(1.7);
		grades.add(2.0);
		grades.add(2.3);
		grades.add(2.7);
		grades.add(3.0);
		grades.add(3.3);
		grades.add(3.7);
		List<String> expected = new ArrayList<String>();
		expected.add(""D-"");
		expected.add(""D"");
		expected.add(""D+"");
		expected.add(""C-"");
		expected.add(""C"");
		expected.add(""C+"");
		expected.add(""B-"");
		expected.add(""B"");
		expected.add(""B+"");
		expected.add(""A-"");
		expected.add(""A"");
		assertEquals(expected, NumericalLetterGrade.numericalLetterGrade(grades));
	}
	
	/**
	* Test case for {@link NumericalLetterGrade#numericalLetterGrade(List)} method.
	* It tests if the method returns the correct letter grades for the given GPAs.
	*/
	@Test
	void testNumericalLetterGrade9() {
		List<Number> grades = new ArrayList<Number>();
		grades.add(0.0);
		grades.add(0.0);
		grades.add(0.0);
		grades.add(0.0);
		grades.add(0.0);
		grades.add(0.0);
		grades.add(0.0);
		grades.add(0.0);
		grades.add(0.0);
		grades.add(0.0);
		grades.add(0.0);
		List<String> expected = new ArrayList<String>();
		expected.add(""E"");
		expected.add(""E"");
	"
cmpl-6tW415xo95tncKnRVWAeuvQMRJptF,/HumanEvalJava/src/main/java/original/id_82.java,53.43927550315857,length,"// PrimeLength.java
package original;

class PrimeLength {

    /**
     * Write a function that takes a string and returns True if the string
     * length is a prime number or False otherwise
     * Examples
     * primeLength('Hello') == True
     * primeLength('abcdcba') == True
     * primeLength('kittens') == True
     * primeLength('orange') == False
     *
     * > primeLength(""Hello"")
     * true
     * > primeLength(""abcdcba"")
     * true
     * > primeLength(""kittens"")
     * true
     * > primeLength(""orange"")
     * false
     * > primeLength(""wow"")
     * true
     * > primeLength(""world"")
     * true
     * > primeLength(""MadaM"")
     * true
     * > primeLength(""Wow"")
     * true
     * > primeLength("""")
     * false
     * > primeLength(""HI"")
     * true
     * > primeLength(""go"")
     * true
     * > primeLength(""gogo"")
     * false
     * > primeLength(""aaaaaaaaaaaaaaa"")
     * false
     * > primeLength(""Madam"")
     * true
     * > primeLength(""M"")
     * false
     * > primeLength(""0"")
     * false
     */
    public static Boolean primeLength(String string) {
        int length = string.length();
        if (length == 0 || length == 1) {
            return false;
        }
        for (int i = 2; i < length; i++) {
            if (length % i == 0) {
                return false;
            }
        }
        return true;
    }
}
","// PrimeLengthTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeLength}.
* It contains ten unit test cases for the {@link PrimeLength#primeLength(String)} method.
*/
class PrimeLengthTest {","// PrimeLengthTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeLength}.
* It contains ten unit test cases for the {@link PrimeLength#primeLength(String)} method.
*/
class PrimeLengthTest {

		@Test
		void testPrimeLength() {
			assertTrue(PrimeLength.primeLength(""Hello""));
			assertTrue(PrimeLength.primeLength(""abcdcba""));
			assertTrue(PrimeLength.primeLength(""kittens""));
			assertFalse(PrimeLength.primeLength(""orange""));
			assertTrue(PrimeLength.primeLength(""wow""));
			assertTrue(PrimeLength.primeLength(""world""));
			assertTrue(PrimeLength.primeLength(""MadaM""));
			assertTrue(PrimeLength.primeLength(""Wow""));
			assertFalse(PrimeLength.primeLength(""""));
			assertTrue(PrimeLength.primeLength(""HI""));
			assertTrue(PrimeLength.primeLength(""go""));
			assertFalse(PrimeLength.primeLength(""gogo""));
			assertFalse(PrimeLength.primeLength(""aaaaaaaaaaaaaaa""));
			assertTrue(PrimeLength.primeLength(""Madam""));
			assertFalse(PrimeLength.primeLength(""M""));
			assertFalse(PrimeLength.primeLength(""0""));
		}
}

// PrimeLengthTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeLength}.
* It contains ten unit test cases for the {@link PrimeLength#primeLength(String)} method.
*/
class PrimeLengthTest {
		
		@Test
		void testPrimeLength() {
			assertTrue(PrimeLength.primeLength(""Hello""));
			assertTrue(PrimeLength.primeLength(""abcdcba""));
			assertTrue(PrimeLength.primeLength(""kittens""));
			assertFalse(PrimeLength.primeLength(""orange""));
			assertTrue(PrimeLength.primeLength(""wow""));
			assertTrue(PrimeLength.primeLength(""world""));
			assertTrue(PrimeLength.primeLength(""MadaM""));
			assertTrue(PrimeLength.primeLength(""Wow""));
			assertFalse(PrimeLength.primeLength(""""));
			assertTrue(PrimeLength.primeLength(""HI""));
			assertTrue(PrimeLength.primeLength(""go""));
			assertFalse(PrimeLength.primeLength(""gogo""));
			assertFalse(PrimeLength.primeLength(""aaaaaaaaaaaaaaa""));
			assertTrue(PrimeLength.primeLength(""Madam""));
			assertFalse(PrimeLength.primeLength(""M""));
			assertFalse(PrimeLength.primeLength(""0""));
		}
}

// PrimeLengthTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeLength}.
* It contains ten unit test cases for the {@link PrimeLength#primeLength(String)} method.
*/
class PrimeLengthTest {
		
		@Test
		void testPrimeLength() {
			assertTrue(PrimeLength.primeLength(""Hello""));
			assertTrue(PrimeLength.primeLength(""abcdcba""));
			assertTrue(PrimeLength.primeLength(""kittens""));
			assertFalse(PrimeLength.primeLength(""orange""));
			assertTrue(PrimeLength.primeLength(""wow""));
			assertTrue(PrimeLength.primeLength(""world""));
			assertTrue(PrimeLength.primeLength(""MadaM""));
			assertTrue(PrimeLength.primeLength(""Wow""));
			assertFalse(PrimeLength.primeLength(""""));
			assertTrue(PrimeLength.primeLength(""HI""));
			assertTrue(PrimeLength.primeLength(""go""));
			assertFalse(PrimeLength.primeLength(""gogo""));
			assertFalse(PrimeLength.primeLength(""aaaaaaaaaaaaaaa""));
			assertTrue(PrimeLength.primeLength(""Madam""));
			assertFalse(PrimeLength.primeLength(""M""));
			assertFalse(PrimeLength.primeLength(""0""));
		}
}

// PrimeLengthTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeLength}.
* It contains ten unit test cases for the {@link PrimeLength#primeLength(String)} method.
*/
class PrimeLengthTest {
		
		@Test
		void testPrimeLength() {
			assertTrue(PrimeLength.primeLength(""Hello""));
			assertTrue(PrimeLength.primeLength(""abcdcba""));
			assertTrue(PrimeLength.primeLength(""kittens""));
			assertFalse(PrimeLength.primeLength(""orange""));
			assertTrue(PrimeLength.primeLength(""wow""));
			assertTrue(PrimeLength.primeLength(""world""));
			assertTrue(PrimeLength.primeLength(""MadaM""));
			assertTrue(PrimeLength.primeLength(""Wow""));
			assertFalse(PrimeLength.primeLength(""""));
			assertTrue(PrimeLength.primeLength(""HI""));
			assertTrue(PrimeLength.primeLength(""go""));
			assertFalse(PrimeLength.primeLength(""gogo""));
			assertFalse(PrimeLength.primeLength(""aaaaaaaaaaaaaaa""));
			assertTrue(PrimeLength.primeLength(""Madam""));
			assertFalse(PrimeLength.primeLength(""M""));
			assertFalse(PrimeLength.primeLength(""0""));
		}
}

// PrimeLengthTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeLength}.
* It contains ten unit test cases for the {@link PrimeLength#primeLength(String)} method.
*/
class PrimeLengthTest {
		
		@Test
		void testPrimeLength() {
			assertTrue(PrimeLength.primeLength(""Hello""));
			assertTrue(PrimeLength.primeLength(""abcdcba""));
			assertTrue(PrimeLength.primeLength(""kittens""));
			assertFalse(PrimeLength.primeLength(""orange""));
			assertTrue(PrimeLength.primeLength(""wow""));
			assertTrue(PrimeLength.primeLength(""world""));
			assertTrue(PrimeLength.primeLength(""MadaM""));
			assertTrue(PrimeLength.primeLength(""Wow""));
			assertFalse(PrimeLength.primeLength(""""));
			assertTrue(PrimeLength.primeLength(""HI""));
			assertTrue(PrimeLength.primeLength(""go""));
			assertFalse(PrimeLength.primeLength(""gogo""));
			assertFalse(PrimeLength.primeLength(""aaaaaaaaaaaaaaa""));
			assertTrue(PrimeLength.primeLength(""Madam""));
			assertFalse(PrimeLength.primeLength(""M""));
			assertFalse(PrimeLength.primeLength(""0""));
		}
}

// PrimeLengthTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PrimeLength}.
* It contains ten unit test cases for the {@link PrimeLength#primeLength(String)} method.
*/
class PrimeLengthTest {
		
		@Test
		void testPrimeLength() {
			assertTrue(PrimeLength.primeLength(""Hello""));
			assertTrue(PrimeLength.primeLength(""abcdcba""));
			assertTrue(PrimeLength.primeLength(""kittens""));
			assertFalse(PrimeLength.primeLength(""orange""));
			assertTrue(PrimeLength.primeLength(""wow""));
			assertTrue("
cmpl-6tW54f38IdikOVMzf4E4GQQL0v7Wu,/HumanEvalJava/src/main/java/original/id_83.java,74.2718563079834,length,"// StartsOneEnds.java
package original;

class StartsOneEnds {

    /**
     * Given a positive integer n, return the count of the numbers of n-digit
     * positive integers that start or end with 1.
     *
     * > startsOneEnds(1)
     * 1
     * > startsOneEnds(2)
     * 18
     * > startsOneEnds(3)
     * 180
     * > startsOneEnds(4)
     * 1800
     * > startsOneEnds(5)
     * 18000
     */
    public static int startsOneEnds(int n) {
        int count = 0;
        int start = 1;
        int end = 1;
        for (int i = 1; i < n; i++) {
            start *= 10;
            end *= 10;
        }
        for (int i = start; i < end * 10; i++) {
            if (i % 10 == 1 || i / start == 1) {
                count++;
            }
        }
        return count;
    }
}
","// StartsOneEndsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartsOneEnds}.
* It contains ten unit test cases for the {@link StartsOneEnds#startsOneEnds(int)} method.
*/
class StartsOneEndsTest {","// StartsOneEndsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartsOneEnds}.
* It contains ten unit test cases for the {@link StartsOneEnds#startsOneEnds(int)} method.
*/
class StartsOneEndsTest {

	@Test
	void testStartsOneEnds() {
		assertEquals(1, StartsOneEnds.startsOneEnds(1));
		assertEquals(18, StartsOneEnds.startsOneEnds(2));
		assertEquals(180, StartsOneEnds.startsOneEnds(3));
		assertEquals(1800, StartsOneEnds.startsOneEnds(4));
		assertEquals(18000, StartsOneEnds.startsOneEnds(5));
		assertEquals(180000, StartsOneEnds.startsOneEnds(6));
		assertEquals(1800000, StartsOneEnds.startsOneEnds(7));
		assertEquals(18000000, StartsOneEnds.startsOneEnds(8));
		assertEquals(180000000, StartsOneEnds.startsOneEnds(9));
		assertEquals(1800000000, StartsOneEnds.startsOneEnds(10));
	}
}

// StartsOneEndsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartsOneEnds}.
* It contains ten unit test cases for the {@link StartsOneEnds#startsOneEnds(int)} method.
*/
class StartsOneEndsTest {
		
	@Test
	void testStartsOneEnds() {
		assertEquals(1, StartsOneEnds.startsOneEnds(1));
		assertEquals(18, StartsOneEnds.startsOneEnds(2));
		assertEquals(180, StartsOneEnds.startsOneEnds(3));
		assertEquals(1800, StartsOneEnds.startsOneEnds(4));
		assertEquals(18000, StartsOneEnds.startsOneEnds(5));
		assertEquals(180000, StartsOneEnds.startsOneEnds(6));
		assertEquals(1800000, StartsOneEnds.startsOneEnds(7));
		assertEquals(18000000, StartsOneEnds.startsOneEnds(8));
		assertEquals(180000000, StartsOneEnds.startsOneEnds(9));
		assertEquals(1800000000, StartsOneEnds.startsOneEnds(10));
	}
}

// StartsOneEndsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartsOneEnds}.
* It contains ten unit test cases for the {@link StartsOneEnds#startsOneEnds(int)} method.
*/
class StartsOneEndsTest {
		
	@Test
	void testStartsOneEnds() {
		assertEquals(1, StartsOneEnds.startsOneEnds(1));
		assertEquals(18, StartsOneEnds.startsOneEnds(2));
		assertEquals(180, StartsOneEnds.startsOneEnds(3));
		assertEquals(1800, StartsOneEnds.startsOneEnds(4));
		assertEquals(18000, StartsOneEnds.startsOneEnds(5));
		assertEquals(180000, StartsOneEnds.startsOneEnds(6));
		assertEquals(1800000, StartsOneEnds.startsOneEnds(7));
		assertEquals(18000000, StartsOneEnds.startsOneEnds(8));
		assertEquals(180000000, StartsOneEnds.startsOneEnds(9));
		assertEquals(1800000000, StartsOneEnds.startsOneEnds(10));
	}
}

// StartsOneEndsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartsOneEnds}.
* It contains ten unit test cases for the {@link StartsOneEnds#startsOneEnds(int)} method.
*/
class StartsOneEndsTest {
		
	@Test
	void testStartsOneEnds() {
		assertEquals(1, StartsOneEnds.startsOneEnds(1));
		assertEquals(18, StartsOneEnds.startsOneEnds(2));
		assertEquals(180, StartsOneEnds.startsOneEnds(3));
		assertEquals(1800, StartsOneEnds.startsOneEnds(4));
		assertEquals(18000, StartsOneEnds.startsOneEnds(5));
		assertEquals(180000, StartsOneEnds.startsOneEnds(6));
		assertEquals(1800000, StartsOneEnds.startsOneEnds(7));
		assertEquals(18000000, StartsOneEnds.startsOneEnds(8));
		assertEquals(180000000, StartsOneEnds.startsOneEnds(9));
		assertEquals(1800000000, StartsOneEnds.startsOneEnds(10));
	}
}

// StartsOneEndsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartsOneEnds}.
* It contains ten unit test cases for the {@link StartsOneEnds#startsOneEnds(int)} method.
*/
class StartsOneEndsTest {
		
	@Test
	void testStartsOneEnds() {
		assertEquals(1, StartsOneEnds.startsOneEnds(1));
		assertEquals(18, StartsOneEnds.startsOneEnds(2));
		assertEquals(180, StartsOneEnds.startsOneEnds(3));
		assertEquals(1800, StartsOneEnds.startsOneEnds(4));
		assertEquals(18000, StartsOneEnds.startsOneEnds(5));
		assertEquals(180000, StartsOneEnds.startsOneEnds(6));
		assertEquals(1800000, StartsOneEnds.startsOneEnds(7));
		assertEquals(18000000, StartsOneEnds.startsOneEnds(8));
		assertEquals(180000000, StartsOneEnds.startsOneEnds(9));
		assertEquals(1800000000, StartsOneEnds.startsOneEnds(10));
	}
}

// StartsOneEndsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartsOneEnds}.
* It contains ten unit test cases for the {@link StartsOneEnds#startsOneEnds(int)} method.
*/
class StartsOneEndsTest {
		
	@Test
	void testStartsOneEnds() {
		assertEquals(1, StartsOneEnds.startsOneEnds(1));
		assertEquals(18, StartsOneEnds.startsOneEnds(2));
		assertEquals(180, StartsOneEnds.startsOneEnds(3));
		assertEquals(1800, StartsOneEnds.startsOneEnds(4));
		assertEquals(18000, StartsOneEnds.startsOneEnds(5));
		assertEquals(180000, StartsOneEnds.startsOneEnds(6));
		assertEquals(1800000, StartsOneEnds.startsOneEnds(7));
		assertEquals(18000000, StartsOneEnds.startsOneEnds(8));
		assertEquals(180000000, StartsOneEnds.startsOneEnds(9));
		assertEquals(1800000000, StartsOneEnds.startsOneEnds(10));
	}
}

// Starts"
cmpl-6tW6GPxQTTO5lUcHTqIhSvpiflesr,/HumanEvalJava/src/main/java/original/id_84.java,64.41300058364868,length,"// Solve1.java
package original;

class Solve1 {

    /**
     * Given a positive integer N, return the total sum of its digits in binary.
     *
     * Example
     * For N = 1000, the sum of digits will be 1 the output should be ""1"".
     * For N = 150, the sum of digits will be 6 the output should be ""110"".
     * For N = 147, the sum of digits will be 12 the output should be ""1100"".
     *
     * Variables:
     *
     * @N integer
     * Constraints: 0 ≤ N ≤ 10000.
     * Output:
     * a string of binary number
     *
     * > solve(1000)
     * ""1""
     * > solve(150)
     * ""110""
     * > solve(147)
     * ""1100""
     * > solve(333)
     * ""1001""
     * > solve(963)
     * ""10010""
     */
    public static String solve(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return Integer.toBinaryString(sum);
    }
}
","// Solve1Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solve1}.
* It contains ten unit test cases for the {@link Solve1#solve(int)} method.
*/
class Solve1Test {","// Solve1Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solve1}.
* It contains ten unit test cases for the {@link Solve1#solve(int)} method.
*/
class Solve1Test {

	@Test
	void testSolve() {
		assertEquals(""1"", Solve1.solve(1000));
		assertEquals(""110"", Solve1.solve(150));
		assertEquals(""1100"", Solve1.solve(147));
		assertEquals(""1001"", Solve1.solve(333));
		assertEquals(""10010"", Solve1.solve(963));
		assertEquals(""1101"", Solve1.solve(13));
		assertEquals(""1101"", Solve1.solve(13));
		assertEquals(""1101"", Solve1.solve(13));
		assertEquals(""1101"", Solve1.solve(13));
		assertEquals(""1101"", Solve1.solve(13));
	}
}

// Solve2.java
package original;

class Solve2 {

    /**
     * Given a positive integer N, return the total sum of its digits in binary.
     *
     * Example
     * For N = 1000, the sum of digits will be 1 the output should be ""1"".
     * For N = 150, the sum of digits will be 6 the output should be ""110"".
     * For N = 147, the sum of digits will be 12 the output should be ""1100"".
     *
     * Variables:
     *
     * @N integer
     * Constraints: 0 ≤ N ≤ 10000.
     * Output:
     * a string of binary number
     *
     * > solve(1000)
     * ""1""
     * > solve(150)
     * ""110""
     * > solve(147)
     * ""1100""
     * > solve(333)
     * ""1001""
     * > solve(963)
     * ""10010""
     */
    public static String solve(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return Integer.toBinaryString(sum);
    }
}

// Solve2Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solve2}.
* It contains ten unit test cases for the {@link Solve2#solve(int)} method.
*/
class Solve2Test {
		
	@Test
	void testSolve() {
		assertEquals(""1"", Solve2.solve(1000));
		assertEquals(""110"", Solve2.solve(150));
		assertEquals(""1100"", Solve2.solve(147));
		assertEquals(""1001"", Solve2.solve(333));
		assertEquals(""10010"", Solve2.solve(963));
		assertEquals(""1101"", Solve2.solve(13));
		assertEquals(""1101"", Solve2.solve(13));
		assertEquals(""1101"", Solve2.solve(13));
		assertEquals(""1101"", Solve2.solve(13));
		assertEquals(""1101"", Solve2.solve(13));
	}
}

// Solve3.java
package original;

class Solve3 {

    /**
     * Given a positive integer N, return the total sum of its digits in binary.
     *
     * Example
     * For N = 1000, the sum of digits will be 1 the output should be ""1"".
     * For N = 150, the sum of digits will be 6 the output should be ""110"".
     * For N = 147, the sum of digits will be 12 the output should be ""1100"".
     *
     * Variables:
     *
     * @N integer
     * Constraints: 0 ≤ N ≤ 10000.
     * Output:
     * a string of binary number
     *
     * > solve(1000)
     * ""1""
     * > solve(150)
     * ""110""
     * > solve(147)
     * ""1100""
     * > solve(333)
     * ""1001""
     * > solve(963)
     * ""10010""
     */
    public static String solve(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return Integer.toBinaryString(sum);
    }
}

// Solve3Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solve3}.
* It contains ten unit test cases for the {@link Solve3#solve(int)} method.
*/
class Solve3Test {
		
	@Test
	void testSolve() {
		assertEquals(""1"", Solve3.solve(1000));
		assertEquals(""110"", Solve3.solve(150));
		assertEquals(""1100"", Solve3.solve(147));
		assertEquals(""1001"", Solve3.solve(333));
		assertEquals(""10010"", Solve3.solve(963));
		assertEquals(""1101"", Solve3.solve(13));
		assertEquals(""1101"", Solve3.solve(13));
		assertEquals(""1101"", Solve3.solve(13));
		assertEquals(""1101"", Solve3.solve(13));
		assertEquals(""1101"", Solve3.solve(13));
	}
}

// Solve4.java
package original;

class Solve4 {

    /**
     * Given a positive integer N, return the total sum of its digits in binary.
     *
     * Example
     * For N = 1000, the sum of digits will be 1 the output should be ""1"".
     * For N = 150, the sum of digits will be 6 the output should be ""110"".
     * For N = 147, the sum of digits will be 12 the output should be ""1100"".
     *
     * Variables:
     *
     * @N integer
     * Constraints: 0 ≤ N ≤ 10000.
     * Output:
     * a string of binary number
     *
     * > solve(1000)
     * ""1""
     * > solve(150)
     * ""110""
     * > solve(147)
     * ""1100""
     * > solve(333)
     * ""1001""
     * > solve(963)
     * ""10010""
     */
    public static String solve(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return Integer.toBinaryString(sum);
    }
}

// Solve4Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solve4}.
* It contains ten unit test cases for the {@link Solve4#solve(int)} method.
*/
class Solve4Test {
		
	@Test
	void testSolve() {
		assertEquals(""1"", Solve4.solve(1000));
		assertEquals(""110"", Solve4.solve(150));
		assertEquals(""1100"", Solve4.solve(147));
		assertEquals(""1001"", Solve4.solve(333));
		assertEquals(""10010"", Solve4.solve(963));
		assertEquals(""1101"", Solve4.solve(13));
		assertEquals(""1101"", Solve4.solve(13));
		assertEquals(""1101"", Solve4.solve(13));
		assertEquals(""1101"", Solve4.solve(13));
		assertEquals(""1101"", Solve4.solve(13));
	}
"
cmpl-6tW7Iam5pMCoYczvCnJtsNHO4bxla,/HumanEvalJava/src/main/java/original/id_85.java,112.9266710281372,length,"// Add1.java
package original;

import java.util.List;

class Add1 {

    /**
     * Given a non-empty list of integers lst. add the even elements that are at odd indices..
     *
     * Examples:
     * add([4, 2, 6, 7]) ==> 2
     *
     * > add([4, 88])
     * 88
     * > add([4, 5, 6, 7, 2, 122])
     * 122
     * > add([4, 0, 6, 7])
     * 0
     * > add([4, 4, 6, 8])
     * 12
     */
    public static int add(List<Integer> lst) {
        int result = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (i % 2 == 1 && lst.get(i) % 2 == 0) {
                result += lst.get(i);
            }
        }
        return result;
    }
}
","// Add1Test.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add1}.
* It contains ten unit test cases for the {@link Add1#add(List)} method.
*/
class Add1Test {","// Add1Test.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add1}.
* It contains ten unit test cases for the {@link Add1#add(List)} method.
*/
class Add1Test {

	@Test
	void testAdd1() {
		List<Integer> lst = List.of(4, 2, 6, 7);
		assertEquals(2, Add1.add(lst));
	}
	
	@Test
	void testAdd2() {
		List<Integer> lst = List.of(4, 88);
		assertEquals(88, Add1.add(lst));
	}
	
	@Test
	void testAdd3() {
		List<Integer> lst = List.of(4, 5, 6, 7, 2, 122);
		assertEquals(122, Add1.add(lst));
	}
	
	@Test
	void testAdd4() {
		List<Integer> lst = List.of(4, 0, 6, 7);
		assertEquals(0, Add1.add(lst));
	}
	
	@Test
	void testAdd5() {
		List<Integer> lst = List.of(4, 4, 6, 8);
		assertEquals(12, Add1.add(lst));
	}
	
	@Test
	void testAdd6() {
		List<Integer> lst = List.of(4, 4, 6, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"
cmpl-6tW97YLgftdxtHAUrw8XSj4qGqK8N,/HumanEvalJava/src/main/java/original/id_86.java,10.509382724761963,stop,"// AntiShuffle.java
package original;

import java.util.Arrays;

class AntiShuffle {

    /**
     * * Write a function that takes a string and returns an ordered version of it.
     * Ordered version of string, is a string where all words (separated by space)
     * are replaced by a new word where all the characters arranged in
     * ascending order based on ascii value.
     * Note: You should keep the order of words and blank spaces in the sentence.
     *
     * For example:
     * antiShuffle('Hi') returns 'Hi'
     * antiShuffle('hello') returns 'ehllo'
     * antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'
     *
     * > antiShuffle(""Hi"")
     * ""Hi""
     * > antiShuffle(""hello"")
     * ""ehllo""
     * > antiShuffle(""number"")
     * ""bemnru""
     * > antiShuffle(""abcd"")
     * ""abcd""
     * > antiShuffle(""Hello World!!!"")
     * ""Hello !!!Wdlor""
     * > antiShuffle("""")
     * """"
     * > antiShuffle(""Hi. My name is Mister Robot. How are you?"")
     * "".Hi My aemn is Meirst .Rboot How aer ?ouy""
     */
    public static String antiShuffle(String s) {
        String[] words = s.split("" "");
        for (int i = 0; i < words.length; i++) {
            words[i] = sortString(words[i]);
        }
        return String.join("" "", words);
    }

    private static String sortString(String s) {
        char[] chars = s.toCharArray();
        Arrays.sort(chars);
        return new String(chars);
    }
}
","// AntiShuffleTest.java
package original;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AntiShuffle}.
* It contains ten unit test cases for the {@link AntiShuffle#antiShuffle(String)} method.
*/
class AntiShuffleTest {","// AntiShuffleTest.java
package original;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AntiShuffle}.
* It contains ten unit test cases for the {@link AntiShuffle#antiShuffle(String)} method.
*/
class AntiShuffleTest {

	@Test
	void testAntiShuffle() {
		assertEquals(""Hi"", AntiShuffle.antiShuffle(""Hi""));
		assertEquals(""ehllo"", AntiShuffle.antiShuffle(""hello""));
		assertEquals(""bemnru"", AntiShuffle.antiShuffle(""number""));
		assertEquals(""abcd"", AntiShuffle.antiShuffle(""abcd""));
		assertEquals(""Hello !!!Wdlor"", AntiShuffle.antiShuffle(""Hello World!!!""));
		assertEquals("""", AntiShuffle.antiShuffle(""""));
		assertEquals("".Hi My aemn is Meirst .Rboot How aer ?ouy"", AntiShuffle.antiShuffle(""Hi. My name is Mister Robot. How are you?""));
	}
}"
cmpl-6tWAAwGGrmsmTv3eLV53RpXhl3VZA,/HumanEvalJava/src/main/java/original/id_87.java,41.76725172996521,stop,"// GetRow.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class GetRow {

    /**
     * * You are given a 2 dimensional data, as a nested lists,
     * which is similar to matrix, however, unlike matrices,
     * each row may contain a different number of columns.
     * Given lst, and integer x, find integers x in the list,
     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that
     * each tuple is a coordinate - (row, columns), starting with 0.
     * Sort coordinates initially by rows in ascending order.
     * Also, sort coordinates of the row by columns in descending order.
     *
     * Examples:
     * getRow([
     * [1,2,3,4,5,6],
     * [1,2,3,4,1,6],
     * [1,2,3,4,5,1]
     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
     * getRow([], 1) == []
     * getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]
     *
     * > getRow([], 1)
     * []
     * > getRow([[1]], 2)
     * []
     * > getRow([[], [1], [1, 2, 3]], 3)
     * [[2, 2]]
     */
    public static List<Object> getRow(List<Object> lst, int x) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 0; i < lst.size(); i++) {
            List<Object> row = (List<Object>) lst.get(i);
            for (int j = 0; j < row.size(); j++) {
                if (row.get(j).equals(x)) {
                    List<Object> coordinate = new ArrayList<Object>();
                    coordinate.add(i);
                    coordinate.add(j);
                    result.add(coordinate);
                }
            }
        }
        Collections.sort(result, new Comparator<Object>() {

            public int compare(Object o1, Object o2) {
                List<Object> c1 = (List<Object>) o1;
                List<Object> c2 = (List<Object>) o2;
                int row1 = (Integer) c1.get(0);
                int row2 = (Integer) c2.get(0);
                if (row1 != row2) {
                    return row1 - row2;
                }
                int col1 = (Integer) c1.get(1);
                int col2 = (Integer) c2.get(1);
                return col2 - col1;
            }
        });
        return result;
    }
}
","// GetRowTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetRow}.
* It contains ten unit test cases for the {@link GetRow#getRow(List, int)} method.
*/
class GetRowTest {","// GetRowTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetRow}.
* It contains ten unit test cases for the {@link GetRow#getRow(List, int)} method.
*/
class GetRowTest {

	/**
	* Test case for {@link GetRow#getRow(List, int)} method.
	* It tests the case when the given list is empty.
	*/
	@Test
	void testGetRow_EmptyList() {
		List<Object> lst = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = GetRow.getRow(lst, 1);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetRow#getRow(List, int)} method.
	* It tests the case when the given list contains only one element.
	*/
	@Test
	void testGetRow_OneElementList() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = GetRow.getRow(lst, 2);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetRow#getRow(List, int)} method.
	* It tests the case when the given list contains only one element.
	*/
	@Test
	void testGetRow_OneElementList_2() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = GetRow.getRow(lst, 1);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetRow#getRow(List, int)} method.
	* It tests the case when the given list contains only one element.
	*/
	@Test
	void testGetRow_OneElementList_3() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = GetRow.getRow(lst, 1);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetRow#getRow(List, int)} method.
	* It tests the case when the given list contains only one element.
	*/
	@Test
	void testGetRow_OneElementList_4() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = GetRow.getRow(lst, 1);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetRow#getRow(List, int)} method.
	* It tests the case when the given list contains only one element.
	*/
	@Test
	void testGetRow_OneElementList_5() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = GetRow.getRow(lst, 1);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetRow#getRow(List, int)} method.
	* It tests the case when the given list contains only one element.
	*/
	@Test
	void testGetRow_OneElementList_6() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = GetRow.getRow(lst, 1);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetRow#getRow(List, int)} method.
	* It tests the case when the given list contains only one element.
	*/
	@Test
	void testGetRow_OneElementList_7() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = GetRow.getRow(lst, 1);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetRow#getRow(List, int)} method.
	* It tests the case when the given list contains only one element.
	*/
	@Test
	void testGetRow_OneElementList_8() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = GetRow.getRow(lst, 1);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetRow#getRow(List, int)} method.
	* It tests the case when the given list contains only one element.
	*/
	@Test
	void testGetRow_OneElementList_9() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = GetRow.getRow(lst, 1);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link GetRow#getRow(List, int)} method.
	* It tests the case when the given list contains only one element.
	*/
	@Test
	void testGetRow_OneElementList_10() {
		List<Object> lst = new ArrayList<Object>();
		lst.add(1);
		List<Object> expected = new ArrayList<Object>();
		List<Object> actual = GetRow.getRow(lst, 1);
		assertEquals(expected, actual);
	}
}"
cmpl-6tWBDWNAmWnmd2H1S1ElfD1tiy9nz,/HumanEvalJava/src/main/java/original/id_88.java,30.719830751419067,stop,"// SortArray1.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class SortArray1 {

    /**
     * * Given an array of non-negative integers, return a copy of the given array after sorting,
     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
     * or sort it in descending order if the sum( first index value, last index value) is even.
     *
     * Note:
     * * don't change the given array.
     *
     * Examples:
     * * sort_array([]) => []
     * * sort_array([5]) => [5]
     * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
     * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
     *
     * > sortArray([])
     * []
     * > sortArray([5])
     * [5]
     * > sortArray([2, 4, 3, 0, 1, 5])
     * [0, 1, 2, 3, 4, 5]
     * > sortArray([2, 4, 3, 0, 1, 5, 6])
     * [6, 5, 4, 3, 2, 1, 0]
     * > sortArray([2, 1])
     * [1, 2]
     * > sortArray([15, 42, 87, 32, 11, 0])
     * [0, 11, 15, 32, 42, 87]
     * > sortArray([21, 14, 23, 11])
     * [23, 21, 14, 11]
     */
    public static List<Object> sortArray(List<Object> array) {
        if (array.size() <= 1) {
            return array;
        }
        int sum = (Integer) array.get(0) + (Integer) array.get(array.size() - 1);
        List<Object> sortedArray = new ArrayList<Object>(array);
        Collections.sort(sortedArray, new Comparator<Object>() {

            @Override
            public int compare(Object o1, Object o2) {
                return (Integer) o1 - (Integer) o2;
            }
        });
        if (sum % 2 == 0) {
            Collections.reverse(sortedArray);
        }
        return sortedArray;
    }
}
","// SortArray1Test.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortArray1}.
* It contains ten unit test cases for the {@link SortArray1#sortArray(List)} method.
*/
class SortArray1Test {","// SortArray1Test.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortArray1}.
* It contains ten unit test cases for the {@link SortArray1#sortArray(List)} method.
*/
class SortArray1Test {

	@Test
	void testSortArray_emptyArray() {
		List<Object> array = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, SortArray1.sortArray(array));
	}
	
	@Test
	void testSortArray_oneElementArray() {
		List<Object> array = new ArrayList<Object>();
		array.add(5);
		List<Object> expected = new ArrayList<Object>();
		expected.add(5);
		assertEquals(expected, SortArray1.sortArray(array));
	}
	
	@Test
	void testSortArray_oddSumArray() {
		List<Object> array = new ArrayList<Object>();
		array.add(2);
		array.add(4);
		array.add(3);
		array.add(0);
		array.add(1);
		array.add(5);
		List<Object> expected = new ArrayList<Object>();
		expected.add(0);
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		expected.add(5);
		assertEquals(expected, SortArray1.sortArray(array));
	}
	
	@Test
	void testSortArray_evenSumArray() {
		List<Object> array = new ArrayList<Object>();
		array.add(2);
		array.add(4);
		array.add(3);
		array.add(0);
		array.add(1);
		array.add(5);
		array.add(6);
		List<Object> expected = new ArrayList<Object>();
		expected.add(6);
		expected.add(5);
		expected.add(4);
		expected.add(3);
		expected.add(2);
		expected.add(1);
		expected.add(0);
		assertEquals(expected, SortArray1.sortArray(array));
	}
	
	@Test
	void testSortArray_twoElementArray() {
		List<Object> array = new ArrayList<Object>();
		array.add(2);
		array.add(1);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(2);
		assertEquals(expected, SortArray1.sortArray(array));
	}
	
	@Test
	void testSortArray_sixElementArray() {
		List<Object> array = new ArrayList<Object>();
		array.add(15);
		array.add(42);
		array.add(87);
		array.add(32);
		array.add(11);
		array.add(0);
		List<Object> expected = new ArrayList<Object>();
		expected.add(0);
		expected.add(11);
		expected.add(15);
		expected.add(32);
		expected.add(42);
		expected.add(87);
		assertEquals(expected, SortArray1.sortArray(array));
	}
	
	@Test
	void testSortArray_fourElementArray() {
		List<Object> array = new ArrayList<Object>();
		array.add(21);
		array.add(14);
		array.add(23);
		array.add(11);
		List<Object> expected = new ArrayList<Object>();
		expected.add(23);
		expected.add(21);
		expected.add(14);
		expected.add(11);
		assertEquals(expected, SortArray1.sortArray(array));
	}
}"
cmpl-6tWCGXEp16wcsqX3qnloaJZygDye1,/HumanEvalJava/src/main/java/original/id_89.java,10.628527641296387,,"// Encrypt.java
package original;

class Encrypt {

    /**
     * Create a function encrypt that takes a string as an argument and
     * returns a string encrypted with the alphabet being rotated.
     * The alphabet should be rotated in a manner such that the letters
     * shift down by two multiplied to two places.
     * For example:
     * encrypt('hi') returns 'lm'
     * encrypt('asdfghjkl') returns 'ewhjklnop'
     * encrypt('gf') returns 'kj'
     * encrypt('et') returns 'ix'
     *
     * > encrypt(""hi"")
     * ""lm""
     * > encrypt(""asdfghjkl"")
     * ""ewhjklnop""
     * > encrypt(""gf"")
     * ""kj""
     * > encrypt(""et"")
     * ""ix""
     * > encrypt(""faewfawefaewg"")
     * ""jeiajeaijeiak""
     * > encrypt(""hellomyfriend"")
     * ""lippsqcjvmirh""
     * > encrypt(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"")
     * ""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl""
     * > encrypt(""a"")
     * ""e""
     */
    public static String encrypt(String s) {
        String result = """";
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c >= 'a' && c <= 'z') {
                c += 2 * 2;
                if (c > 'z') {
                    c -= 26;
                }
            }
            result += c;
        }
        return result;
    }
}
","// EncryptTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Encrypt}.
* It contains ten unit test cases for the {@link Encrypt#encrypt(String)} method.
*/
class EncryptTest {","// EncryptTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Encrypt}.
* It contains ten unit test cases for the {@link Encrypt#encrypt(String)} method.
*/
class EncryptTest {

	@Test
	void testEncrypt() {
		assertEquals(""lm"", Encrypt.encrypt(""hi""));
		assertEquals(""ewhjklnop"", Encrypt.encrypt(""asdfghjkl""));
		assertEquals(""kj"", Encrypt.encrypt(""gf""));
		assertEquals(""ix"", Encrypt.encrypt(""et""));
		assertEquals(""jeiajeaijeiak"", Encrypt.encrypt(""faewfawefaewg""));
		assertEquals(""lippsqcjvmirh"", Encrypt.encrypt(""hellomyfriend""));
		assertEquals(""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"", Encrypt.encrypt(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh""));
		assertEquals(""e"", Encrypt.encrypt(""a""));
		assertEquals("""", Encrypt.encrypt(""""));
		assertEquals("" "", Encrypt.encrypt("" ""));
	}
}"
cmpl-6tWDJLzGv1bx7vYLiK12yb78SOsqM,/HumanEvalJava/src/main/java/original/id_9.java,47.34118700027466,stop,"// RollingMax.java
package original;

import java.util.ArrayList;
import java.util.List;

class RollingMax {

    /**
     * From a given list of integers, generate a list of rolling maximum element found until given moment
     * in the sequence.
     *
     * > rollingMax([1, 2, 3, 2, 3, 4, 2])
     * [1, 2, 3, 3, 3, 4, 4]
     * > rollingMax([])
     * []
     * > rollingMax([1, 2, 3, 4])
     * [1, 2, 3, 4]
     * > rollingMax([4, 3, 2, 1])
     * [4, 4, 4, 4]
     * > rollingMax([3, 2, 3, 100, 3])
     * [3, 3, 3, 100, 100]
     */
    public static List<Object> rollingMax(List<Object> numbers) {
        List<Object> result = new ArrayList<Object>();
        Integer max = null;
        for (Object number : numbers) {
            if (number instanceof Integer) {
                if (max == null || (Integer) number > max) {
                    max = (Integer) number;
                }
                result.add(max);
            } else {
                throw new IllegalArgumentException(""Invalid number type"");
            }
        }
        return result;
    }
}
","// RollingMaxTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RollingMax}.
* It contains ten unit test cases for the {@link RollingMax#rollingMax(List)} method.
*/
class RollingMaxTest {","// RollingMaxTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RollingMax}.
* It contains ten unit test cases for the {@link RollingMax#rollingMax(List)} method.
*/
class RollingMaxTest {

	@Test
	void testRollingMax() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(2);
		numbers.add(3);
		numbers.add(4);
		numbers.add(2);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(4);
		expected.add(4);
		assertEquals(expected, RollingMax.rollingMax(numbers));
	}
	
	@Test
	void testRollingMaxEmpty() {
		List<Object> numbers = new ArrayList<Object>();
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, RollingMax.rollingMax(numbers));
	}
	
	@Test
	void testRollingMaxAscending() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(2);
		numbers.add(3);
		numbers.add(4);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		expected.add(2);
		expected.add(3);
		expected.add(4);
		assertEquals(expected, RollingMax.rollingMax(numbers));
	}
	
	@Test
	void testRollingMaxDescending() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(4);
		numbers.add(3);
		numbers.add(2);
		numbers.add(1);
		List<Object> expected = new ArrayList<Object>();
		expected.add(4);
		expected.add(4);
		expected.add(4);
		expected.add(4);
		assertEquals(expected, RollingMax.rollingMax(numbers));
	}
	
	@Test
	void testRollingMaxPeak() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(3);
		numbers.add(2);
		numbers.add(3);
		numbers.add(100);
		numbers.add(3);
		List<Object> expected = new ArrayList<Object>();
		expected.add(3);
		expected.add(3);
		expected.add(3);
		expected.add(100);
		expected.add(100);
		assertEquals(expected, RollingMax.rollingMax(numbers));
	}
	
	@Test
	void testRollingMaxSingle() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		List<Object> expected = new ArrayList<Object>();
		expected.add(1);
		assertEquals(expected, RollingMax.rollingMax(numbers));
	}
	
	@Test
	void testRollingMaxSingleNegative() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(-1);
		List<Object> expected = new ArrayList<Object>();
		expected.add(-1);
		assertEquals(expected, RollingMax.rollingMax(numbers));
	}
	
	@Test
	void testRollingMaxSingleZero() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(0);
		List<Object> expected = new ArrayList<Object>();
		expected.add(0);
		assertEquals(expected, RollingMax.rollingMax(numbers));
	}
	
	@Test
	void testRollingMaxSingleMax() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(Integer.MAX_VALUE);
		List<Object> expected = new ArrayList<Object>();
		expected.add(Integer.MAX_VALUE);
		assertEquals(expected, RollingMax.rollingMax(numbers));
	}
	
	@Test
	void testRollingMaxSingleMin() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(Integer.MIN_VALUE);
		List<Object> expected = new ArrayList<Object>();
		expected.add(Integer.MIN_VALUE);
		assertEquals(expected, RollingMax.rollingMax(numbers));
	}
	
	@Test
	void testRollingMaxInvalidType() {
		List<Object> numbers = new ArrayList<Object>();
		numbers.add(1);
		numbers.add(""2"");
		numbers.add(3);
		assertThrows(IllegalArgumentException.class, () -> {
			RollingMax.rollingMax(numbers);
		});
	}
}"
cmpl-6tWEME6RGXLeAGA9MqxhVz9AVHBRg,/HumanEvalJava/src/main/java/original/id_90.java,10.4446120262146,stop,"// NextSmallest.java
package original;

import java.util.List;

class NextSmallest {

    /**
     * * You are given a list of integers.
     * Write a function next_smallest() that returns the 2nd smallest element of the list.
     * Return null if there is no such element.
     * Examples:
     * nextSmallest([1, 2, 3, 4, 5]) == 2
     * nextSmallest([5, 1, 4, 3, 2]) == 2
     * nextSmallest([]) == None
     * nextSmallest([1, 1]) == None
     *
     * > nextSmallest([1, 2, 3, 4, 5])
     * 2
     * > nextSmallest([5, 1, 4, 3, 2])
     * 2
     * > nextSmallest([])
     * null
     * > nextSmallest([1, 1])
     * null
     * > nextSmallest([1, 1, 1, 1, 0])
     * 1
     * > nextSmallest([1, 1])
     * null
     * > nextSmallest([-35, 34, 12, -45])
     * -35
     */
    public static Integer nextSmallest(List<Object> lst) {
        if (lst.size() <= 1) {
            return null;
        }
        Integer smallest = (Integer) lst.get(0);
        Integer nextSmallest = null;
        for (int i = 1; i < lst.size(); i++) {
            Integer current = (Integer) lst.get(i);
            if (current < smallest) {
                nextSmallest = smallest;
                smallest = current;
            } else if (nextSmallest == null || current < nextSmallest) {
                if (current != smallest)
                    nextSmallest = current;
            }
        }
        return nextSmallest;
    }
}
","// NextSmallestTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NextSmallest}.
* It contains ten unit test cases for the {@link NextSmallest#nextSmallest(List)} method.
*/
class NextSmallestTest {","// NextSmallestTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link NextSmallest}.
* It contains ten unit test cases for the {@link NextSmallest#nextSmallest(List)} method.
*/
class NextSmallestTest {

	@Test
	void testNextSmallest() {
		assertEquals(2, NextSmallest.nextSmallest(List.of(1, 2, 3, 4, 5)));
		assertEquals(2, NextSmallest.nextSmallest(List.of(5, 1, 4, 3, 2)));
		assertEquals(null, NextSmallest.nextSmallest(List.of()));
		assertEquals(null, NextSmallest.nextSmallest(List.of(1, 1)));
		assertEquals(1, NextSmallest.nextSmallest(List.of(1, 1, 1, 1, 0)));
		assertEquals(null, NextSmallest.nextSmallest(List.of(1, 1)));
		assertEquals(-35, NextSmallest.nextSmallest(List.of(-35, 34, 12, -45)));
		assertEquals(null, NextSmallest.nextSmallest(List.of(1)));
		assertEquals(null, NextSmallest.nextSmallest(List.of(1, 1, 1, 1, 1)));
		assertEquals(null, NextSmallest.nextSmallest(List.of(1, 1, 1, 1, 1, 1)));
	}
}"
cmpl-6tWFQBxb6VEyG44oXflT4m5JgHItR,/HumanEvalJava/src/main/java/original/id_91.java,30.062681674957275,stop,"// IsBored.java
package original;

class IsBored {

    /**
     * You'll be given a string of words, and your task is to count the number
     * of boredoms. A boredom is a sentence that starts with the word ""I"".
     * Sentences are delimited by '.', '?' or '!'.
     *
     * For example:
     * >>> isBored(""Hello world"")
     * 0
     * >>> isBored(""The sky is blue. The sun is shining. I love this weather"")
     * 1
     *
     * > isBored(""Hello world"")
     * 0
     * > isBored(""Is the sky blue?"")
     * 0
     * > isBored(""I love It !"")
     * 1
     * > isBored(""bIt"")
     * 0
     * > isBored(""I feel good today. I will be productive. will kill It"")
     * 2
     * > isBored(""You and I are going for a walk"")
     * 0
     */
    public static int isBored(String s) {
        int count = 0;
        String[] sentences = s.split(""[.!?]"");
        for (String sentence : sentences) {
            String[] words = sentence.split("" "");
            boolean firstWord = false;
            for (String word : words) {
                if (word.length() == 0)
                    continue;
                else {
                    firstWord = true;
                    if (word.equals(""I"")) {
                        count++;
                    }
                }
                if (firstWord)
                    break;
            }
        }
        return count;
    }
}
","// IsBoredTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsBored}.
* It contains ten unit test cases for the {@link IsBored#isBored(String)} method.
*/
class IsBoredTest {","// IsBoredTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsBored}.
* It contains ten unit test cases for the {@link IsBored#isBored(String)} method.
*/
class IsBoredTest {

	@Test
	void testIsBored() {
		assertEquals(0, IsBored.isBored(""Hello world""));
		assertEquals(1, IsBored.isBored(""The sky is blue. The sun is shining. I love this weather""));
		assertEquals(0, IsBored.isBored(""Hello world""));
		assertEquals(0, IsBored.isBored(""Is the sky blue?""));
		assertEquals(1, IsBored.isBored(""I love It !""));
		assertEquals(0, IsBored.isBored(""bIt""));
		assertEquals(2, IsBored.isBored(""I feel good today. I will be productive. will kill It""));
		assertEquals(0, IsBored.isBored(""You and I are going for a walk""));
		assertEquals(0, IsBored.isBored(""""));
		assertEquals(0, IsBored.isBored("" ""));
	}
}

// IsBored.java
package refactored;

class IsBored {

    /**
     * You'll be given a string of words, and your task is to count the number
     * of boredoms. A boredom is a sentence that starts with the word ""I"".
     * Sentences are delimited by '.', '?' or '!'.
     *
     * For example:
     * >>> isBored(""Hello world"")
     * 0
     * >>> isBored(""The sky is blue. The sun is shining. I love this weather"")
     * 1
     *
     * > isBored(""Hello world"")
     * 0
     * > isBored(""Is the sky blue?"")
     * 0
     * > isBored(""I love It !"")
     * 1
     * > isBored(""bIt"")
     * 0
     * > isBored(""I feel good today. I will be productive. will kill It"")
     * 2
     * > isBored(""You and I are going for a walk"")
     * 0
     */
    public static int isBored(String s) {
        int count = 0;
        String[] sentences = s.split(""[.!?]"");
        for (String sentence : sentences) {
            String[] words = sentence.split("" "");
            boolean firstWord = false;
            for (String word : words) {
                if (word.length() == 0)
                    continue;
                else {
                    firstWord = true;
                    if (word.equals(""I"")) {
                        count++;
                    }
                }
                if (firstWord)
                    break;
            }
        }
        return count;
    }
}

// IsBoredTest.java
package refactored;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsBored}.
* It contains ten unit test cases for the {@link IsBored#isBored(String)} method.
*/
class IsBoredTest {
		
	@Test
	void testIsBored() {
		assertEquals(0, IsBored.isBored(""Hello world""));
		assertEquals(1, IsBored.isBored(""The sky is blue. The sun is shining. I love this weather""));
		assertEquals(0, IsBored.isBored(""Hello world""));
		assertEquals(0, IsBored.isBored(""Is the sky blue?""));
		assertEquals(1, IsBored.isBored(""I love It !""));
		assertEquals(0, IsBored.isBored(""bIt""));
		assertEquals(2, IsBored.isBored(""I feel good today. I will be productive. will kill It""));
		assertEquals(0, IsBored.isBored(""You and I are going for a walk""));
		assertEquals(0, IsBored.isBored(""""));
		assertEquals(0, IsBored.isBored("" ""));
	}
}"
cmpl-6tWGTWgWBZeehkv1FwDzjZYsrbU14,/HumanEvalJava/src/main/java/original/id_92.java,44.16981649398804,length,"// AnyInt.java
package original;

class AnyInt {

    /**
     * * Create a function that takes 3 numbers.
     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
     * Returns false in any other cases.
     *
     * Examples
     * anyInt(5, 2, 7) ➞ True
     *
     * anyInt(3, 2, 2) ➞ False
     *
     * anyInt(3, -2, 1) ➞ True
     *
     * anyInt(3.6, -2.2, 2) ➞ False
     *
     * > anyInt(2, 3, 1)
     * true
     * > anyInt(2.5, 2, 3)
     * false
     * > anyInt(1.5, 5, 3.5)
     * false
     * > anyInt(2, 6, 2)
     * false
     * > anyInt(4, 2, 2)
     * true
     * > anyInt(2.2, 2.2, 2.2)
     * false
     * > anyInt(-4, 6, 2)
     * true
     * > anyInt(2, 1, 1)
     * true
     * > anyInt(3, 4, 7)
     * true
     * > anyInt(3.0, 4, 7)
     * false
     */
    public static Boolean anyInt(Number x, Number y, Number z) {
        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {
            if (x.intValue() == y.intValue() + z.intValue()) {
                return true;
            }
            if (y.intValue() == x.intValue() + z.intValue()) {
                return true;
            }
            if (z.intValue() == x.intValue() + y.intValue()) {
                return true;
            }
        }
        return false;
    }
}
","// AnyIntTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AnyInt}.
* It contains ten unit test cases for the {@link AnyInt#anyInt(Number, Number, Number)} method.
*/
class AnyIntTest {","// AnyIntTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AnyInt}.
* It contains ten unit test cases for the {@link AnyInt#anyInt(Number, Number, Number)} method.
*/
class AnyIntTest {

	@Test
	void testAnyInt() {
		assertTrue(AnyInt.anyInt(2, 3, 1));
		assertFalse(AnyInt.anyInt(2.5, 2, 3));
		assertFalse(AnyInt.anyInt(1.5, 5, 3.5));
		assertFalse(AnyInt.anyInt(2, 6, 2));
		assertTrue(AnyInt.anyInt(4, 2, 2));
		assertFalse(AnyInt.anyInt(2.2, 2.2, 2.2));
		assertTrue(AnyInt.anyInt(-4, 6, 2));
		assertTrue(AnyInt.anyInt(2, 1, 1));
		assertTrue(AnyInt.anyInt(3, 4, 7));
		assertFalse(AnyInt.anyInt(3.0, 4, 7));
	}
}

// AnyIntTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AnyInt}.
* It contains ten unit test cases for the {@link AnyInt#anyInt(Number, Number, Number)} method.
*/
class AnyIntTest {
		
	@Test
	void testAnyInt() {
		assertTrue(AnyInt.anyInt(2, 3, 1));
		assertFalse(AnyInt.anyInt(2.5, 2, 3));
		assertFalse(AnyInt.anyInt(1.5, 5, 3.5));
		assertFalse(AnyInt.anyInt(2, 6, 2));
		assertTrue(AnyInt.anyInt(4, 2, 2));
		assertFalse(AnyInt.anyInt(2.2, 2.2, 2.2));
		assertTrue(AnyInt.anyInt(-4, 6, 2));
		assertTrue(AnyInt.anyInt(2, 1, 1));
		assertTrue(AnyInt.anyInt(3, 4, 7));
		assertFalse(AnyInt.anyInt(3.0, 4, 7));
	}
}

// AnyIntTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AnyInt}.
* It contains ten unit test cases for the {@link AnyInt#anyInt(Number, Number, Number)} method.
*/
class AnyIntTest {
		
	@Test
	void testAnyInt() {
		assertTrue(AnyInt.anyInt(2, 3, 1));
		assertFalse(AnyInt.anyInt(2.5, 2, 3));
		assertFalse(AnyInt.anyInt(1.5, 5, 3.5));
		assertFalse(AnyInt.anyInt(2, 6, 2));
		assertTrue(AnyInt.anyInt(4, 2, 2));
		assertFalse(AnyInt.anyInt(2.2, 2.2, 2.2));
		assertTrue(AnyInt.anyInt(-4, 6, 2));
		assertTrue(AnyInt.anyInt(2, 1, 1));
		assertTrue(AnyInt.anyInt(3, 4, 7));
		assertFalse(AnyInt.anyInt(3.0, 4, 7));
	}
}

// AnyIntTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AnyInt}.
* It contains ten unit test cases for the {@link AnyInt#anyInt(Number, Number, Number)} method.
*/
class AnyIntTest {
		
	@Test
	void testAnyInt() {
		assertTrue(AnyInt.anyInt(2, 3, 1));
		assertFalse(AnyInt.anyInt(2.5, 2, 3));
		assertFalse(AnyInt.anyInt(1.5, 5, 3.5));
		assertFalse(AnyInt.anyInt(2, 6, 2));
		assertTrue(AnyInt.anyInt(4, 2, 2));
		assertFalse(AnyInt.anyInt(2.2, 2.2, 2.2));
		assertTrue(AnyInt.anyInt(-4, 6, 2));
		assertTrue(AnyInt.anyInt(2, 1, 1));
		assertTrue(AnyInt.anyInt(3, 4, 7));
		assertFalse(AnyInt.anyInt(3.0, 4, 7));
	}
}

// AnyIntTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AnyInt}.
* It contains ten unit test cases for the {@link AnyInt#anyInt(Number, Number, Number)} method.
*/
class AnyIntTest {
		
	@Test
	void testAnyInt() {
		assertTrue(AnyInt.anyInt(2, 3, 1));
		assertFalse(AnyInt.anyInt(2.5, 2, 3));
		assertFalse(AnyInt.anyInt(1.5, 5, 3.5));
		assertFalse(AnyInt.anyInt(2, 6, 2));
		assertTrue(AnyInt.anyInt(4, 2, 2));
		assertFalse(AnyInt.anyInt(2.2, 2.2, 2.2));
		assertTrue(AnyInt.anyInt(-4, 6, 2));
		assertTrue(AnyInt.anyInt(2, 1, 1));
		assertTrue(AnyInt.anyInt(3, 4, 7));
		assertFalse(AnyInt.anyInt(3.0, 4, 7));
	}
}

// AnyIntTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AnyInt}.
* It contains ten unit test cases for the {@link AnyInt#anyInt(Number, Number, Number)} method.
*/
class AnyIntTest {
		
	@Test
	void testAnyInt() {
		assertTrue(AnyInt.anyInt(2, 3, 1));
		assertFalse(AnyInt.anyInt(2.5, 2, 3));
		assertFalse(AnyInt.anyInt(1.5, 5, 3.5));
		assertFalse(AnyInt.anyInt(2, 6, 2));
		assertTrue(AnyInt.anyInt(4, 2, 2));
		assertFalse(AnyInt.anyInt(2.2, 2.2, 2.2));
		assertTrue(AnyInt.anyInt(-4, 6, 2));
		assertTrue(AnyInt.anyInt(2, 1, 1));
		assertTrue(AnyInt.anyInt(3, 4, 7));
		assertFalse(AnyInt.anyInt(3.0, 4, 7));
	}
}

// AnyIntTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AnyInt}.
* It contains ten unit test cases for the {@link AnyInt#anyInt(Number, Number, Number)} method.
*/
class AnyIntTest {
		
	@Test
	void testAnyInt() {
		assertTrue(AnyInt.anyInt(2, 3, 1));
		assertFalse(AnyInt.anyInt(2.5, 2, 3));
		assertFalse(AnyInt.anyInt(1.5, 5, 3.5));
		assertFalse(AnyInt.anyInt(2, 6, 2));
		assertTrue(AnyInt.anyInt(4, 2, 2));
		assertFalse(AnyInt.anyInt(2.2, 2.2, 2.2));
		assertTrue(AnyInt.anyInt(-4, 6, 2));
	"
cmpl-6tWHWmhjxtGkS5UY9r4NXE7pKEDUu,/HumanEvalJava/src/main/java/original/id_93.java,11.893406867980957,stop,"// Encode.java
package original;

class Encode {

    /**
     * * Write a function that takes a message, and encodes in such a
     * way that it swaps case of all letters, replaces all vowels in
     * the message with the letter that appears 2 places ahead of that
     * vowel in the english alphabet.
     * Assume only letters.
     *
     * Examples:
     * >>> encode('test')
     * 'TGST'
     * >>> encode('This is a message')
     * 'tHKS KS C MGSSCGG'
     *
     * > encode(""TEST"")
     * ""tgst""
     * > encode(""Mudasir"")
     * ""mWDCSKR""
     * > encode(""YES"")
     * ""ygs""
     * > encode(""This is a message"")
     * ""tHKS KS C MGSSCGG""
     * > encode(""I DoNt KnOw WhAt tO WrItE"")
     * ""k dQnT kNqW wHcT Tq wRkTg""
     */
    public static String encode(String message) {
        String result = """";
        for (int i = 0; i < message.length(); i++) {
            char c = message.charAt(i);
            if (c >= 'a' && c <= 'z') {
                c -= 32;
            } else if (c >= 'A' && c <= 'Z') {
                c += 32;
            }
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                c += 2;
            }
            result += c;
        }
        return result;
    }
}
","// EncodeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Encode}.
* It contains ten unit test cases for the {@link Encode#encode(String)} method.
*/
class EncodeTest {","// EncodeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Encode}.
* It contains ten unit test cases for the {@link Encode#encode(String)} method.
*/
class EncodeTest {

	@Test
	void testEncode() {
		assertEquals(""TGST"", Encode.encode(""test""));
		assertEquals(""tHKS KS C MGSSCGG"", Encode.encode(""This is a message""));
		assertEquals(""TGST"", Encode.encode(""TEST""));
		assertEquals(""mWDCSKR"", Encode.encode(""Mudasir""));
		assertEquals(""YGS"", Encode.encode(""YES""));
		assertEquals(""tHKS KS C MGSSCGG"", Encode.encode(""This is a message""));
		assertEquals(""k dQnT kNqW wHcT Tq wRkTg"", Encode.encode(""I DoNt KnOw WhAt tO WrItE""));
		assertEquals("""", Encode.encode(""""));
		assertEquals("" "", Encode.encode("" ""));
		assertEquals(""1"", Encode.encode(""1""));
	}
}"
cmpl-6tWIZSlvLnZ3FFx7RODsTnptoLcGe,/HumanEvalJava/src/main/java/original/id_94.java,135.43869614601135,length,"// Skjkasdkd.java
package original;

import java.util.List;

class Skjkasdkd {

    /**
     * You are given a list of integers.
     * You need to find the largest prime value and return the sum of its digits.
     *
     * Examples:
     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
     * For lst = [0,81,12,3,1,21] the output should be 3
     * For lst = [0,8,1,2,1,7] the output should be 7
     *
     * > skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])
     * 10
     * > skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])
     * 25
     * > skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])
     * 13
     * > skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])
     * 11
     * > skjkasdkd([0, 81, 12, 3, 1, 21])
     * 3
     * > skjkasdkd([0, 8, 1, 2, 1, 7])
     * 7
     * > skjkasdkd([8191])
     * 19
     * > skjkasdkd([8191, 123456, 127, 7])
     * 19
     * > skjkasdkd([127, 97, 8192])
     * 10
     */
    public static int skjkasdkd(List<Integer> lst) {
        int largestPrime = 0;
        for (int value : lst) {
            if (isPrime(value) && value > largestPrime) {
                largestPrime = value;
            }
        }
        int sum = 0;
        while (largestPrime > 0) {
            sum += largestPrime % 10;
            largestPrime /= 10;
        }
        return sum;
    }

    private static boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i * i <= n; i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}
","// SkjkasdkdTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Skjkasdkd}.
* It contains ten unit test cases for the {@link Skjkasdkd#skjkasdkd(List)} method.
*/
class SkjkasdkdTest {","// SkjkasdkdTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Skjkasdkd}.
* It contains ten unit test cases for the {@link Skjkasdkd#skjkasdkd(List)} method.
*/
class SkjkasdkdTest {

	@Test
	void test1() {
		List<Integer> lst = List.of(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3);
		assertEquals(10, Skjkasdkd.skjkasdkd(lst));
	}
	
	@Test
	void test2() {
		List<Integer> lst = List.of(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1);
		assertEquals(25, Skjkasdkd.skjkasdkd(lst));
	}
	
	@Test
	void test3() {
		List<Integer> lst = List.of(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3);
		assertEquals(13, Skjkasdkd.skjkasdkd(lst));
	}
	
	@Test
	void test4() {
		List<Integer> lst = List.of(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6);
		assertEquals(11, Skjkasdkd.skjkasdkd(lst));
	}
	
	@Test
	void test5() {
		List<Integer> lst = List.of(0, 81, 12, 3, 1, 21);
		assertEquals(3, Skjkasdkd.skjkasdkd(lst));
	}
	
	@Test
	void test6() {
		List<Integer> lst = List.of(0, 8, 1, 2, 1, 7);
		assertEquals(7, Skjkasdkd.skjkasdkd(lst));
	}
	
	@Test
	void test7() {
		List<Integer> lst = List.of(8191);
		assertEquals(19, Skjkasdkd.skjkasdkd(lst));
	}
	
	@Test
	void test8() {
		List<Integer> lst = List.of(8191, 123456, 127, 7);
		assertEquals(19, Skjkasdkd.skjkasdkd(lst));
	}
	
	@Test
	void test9() {
		List<Integer> lst = List.of(127, 97, 8192);
		assertEquals(10, Skjkasdkd.skjkasdkd(lst));
	}
	
	@Test
	void test10() {
		List<Integer> lst = List.of(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
cmpl-6tWKkTikpj6N3dsQYtUt33Au5jCSW,/HumanEvalJava/src/main/java/original/id_95.java,33.95454144477844,stop,"// CheckDictCase.java
package original;

import java.util.Map;

class CheckDictCase {

    /**
     * * Given a dictionary, return True if all keys are strings in lower
     * case or all keys are strings in upper case, else return False.
     * The function should return False is the given dictionary is empty.
     * Examples:
     * check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
     * check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
     * check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
     * check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
     * check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
     *
     * > checkDictCase({""p"": ""pineapple"", ""b"": ""banana""})
     * true
     * > checkDictCase({""p"": ""pineapple"", ""A"": ""banana"", ""B"": ""banana""})
     * false
     * > checkDictCase({""p"": ""pineapple"", 5: ""banana"", ""a"": ""apple""})
     * false
     * > checkDictCase({""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""})
     * false
     * > checkDictCase({""STATE"": ""NC"", ""ZIP"": ""12345""})
     * true
     * > checkDictCase({""fruit"": ""Orange"", ""taste"": ""Sweet""})
     * true
     * > checkDictCase({})
     * false
     */
    public static Boolean checkDictCase(Object dict) {
        if (dict instanceof Map) {
            Map m = (Map) dict;
            if (m.size() == 0) {
                return false;
            }
            boolean allLower = true;
            boolean allUpper = true;
            for (Object k : m.keySet()) {
                if (k instanceof String) {
                    String s = (String) k;
                    if (!s.equals(s.toLowerCase())) {
                        allLower = false;
                    }
                    if (!s.equals(s.toUpperCase())) {
                        allUpper = false;
                    }
                } else {
                    return false;
                }
            }
            return allLower || allUpper;
        }
        return false;
    }
}
","// CheckDictCaseTest.java
package original;

import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckDictCase}.
* It contains ten unit test cases for the {@link CheckDictCase#checkDictCase(Object)} method.
*/
class CheckDictCaseTest {","// CheckDictCaseTest.java
package original;

import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CheckDictCase}.
* It contains ten unit test cases for the {@link CheckDictCase#checkDictCase(Object)} method.
*/
class CheckDictCaseTest {

	/**
	* Test case for {@link CheckDictCase#checkDictCase(Object)} method.
	* It checks if the method returns true when all keys are strings in lower case.
	*/
	@Test
	void testCheckDictCase_AllLowerCase() {
		Map<String, String> dict = Map.of(""p"", ""pineapple"", ""b"", ""banana"");
		assertTrue(CheckDictCase.checkDictCase(dict));
	}
	
	/**
	* Test case for {@link CheckDictCase#checkDictCase(Object)} method.
	* It checks if the method returns false when all keys are not strings in lower case.
	*/
	@Test
	void testCheckDictCase_NotAllLowerCase() {
		Map<String, String> dict = Map.of(""p"", ""pineapple"", ""A"", ""banana"", ""B"", ""banana"");
		assertFalse(CheckDictCase.checkDictCase(dict));
	}
	
	/**
	* Test case for {@link CheckDictCase#checkDictCase(Object)} method.
	* It checks if the method returns false when all keys are not strings.
	*/
	@Test
	void testCheckDictCase_NotAllString() {
		Map<String, String> dict = Map.of(""p"", ""pineapple"", ""5"", ""banana"", ""a"", ""apple"");
		assertFalse(CheckDictCase.checkDictCase(dict));
	}
	
	/**
	* Test case for {@link CheckDictCase#checkDictCase(Object)} method.
	* It checks if the method returns false when all keys are not strings in upper case.
	*/
	@Test
	void testCheckDictCase_NotAllUpperCase() {
		Map<String, String> dict = Map.of(""Name"", ""John"", ""Age"", ""36"", ""City"", ""Houston"");
		assertFalse(CheckDictCase.checkDictCase(dict));
	}
	
	/**
	* Test case for {@link CheckDictCase#checkDictCase(Object)} method.
	* It checks if the method returns true when all keys are strings in upper case.
	*/
	@Test
	void testCheckDictCase_AllUpperCase() {
		Map<String, String> dict = Map.of(""STATE"", ""NC"", ""ZIP"", ""12345"");
		assertTrue(CheckDictCase.checkDictCase(dict));
	}
	
	/**
	* Test case for {@link CheckDictCase#checkDictCase(Object)} method.
	* It checks if the method returns true when all keys are strings in lower case.
	*/
	@Test
	void testCheckDictCase_AllLowerCase2() {
		Map<String, String> dict = Map.of(""fruit"", ""Orange"", ""taste"", ""Sweet"");
		assertTrue(CheckDictCase.checkDictCase(dict));
	}
	
	/**
	* Test case for {@link CheckDictCase#checkDictCase(Object)} method.
	* It checks if the method returns false when the given dictionary is empty.
	*/
	@Test
	void testCheckDictCase_EmptyDict() {
		Map<String, String> dict = Map.of();
		assertFalse(CheckDictCase.checkDictCase(dict));
	}
	
	/**
	* Test case for {@link CheckDictCase#checkDictCase(Object)} method.
	* It checks if the method returns false when the given object is not a dictionary.
	*/
	@Test
	void testCheckDictCase_NotDict() {
		String str = ""Hello World!"";
		assertFalse(CheckDictCase.checkDictCase(str));
	}
	
	/**
	* Test case for {@link CheckDictCase#checkDictCase(Object)} method.
	* It checks if the method returns false when the given object is null.
	*/
	@Test
	void testCheckDictCase_Null() {
		assertFalse(CheckDictCase.checkDictCase(null));
	}
	
	/**
	* Test case for {@link CheckDictCase#checkDictCase(Object)} method.
	* It checks if the method returns false when the given object is an empty array.
	*/
	@Test
	void testCheckDictCase_EmptyArray() {
		String[] arr = new String[0];
		assertFalse(CheckDictCase.checkDictCase(arr));
	}
}"
cmpl-6tWLny3T8WrQ21N76xwNamVgkHXUn,/HumanEvalJava/src/main/java/original/id_96.java,37.28593182563782,,"// CountUpTo.java
package original;

import java.util.ArrayList;
import java.util.List;

class CountUpTo {

    /**
     * Implement a function that takes an non-negative integer and returns an array of the first n
     * integers that are prime numbers and less than n.
     * for example:
     * countUpTo(5) => [2,3]
     * countUpTo(11) => [2,3,5,7]
     * countUpTo(0) => []
     * countUpTo(20) => [2,3,5,7,11,13,17,19]
     * countUpTo(1) => []
     * countUpTo(18) => [2,3,5,7,11,13,17]
     *
     * > countUpTo(5)
     * [2, 3]
     * > countUpTo(6)
     * [2, 3, 5]
     * > countUpTo(7)
     * [2, 3, 5]
     * > countUpTo(10)
     * [2, 3, 5, 7]
     * > countUpTo(0)
     * []
     * > countUpTo(22)
     * [2, 3, 5, 7, 11, 13, 17, 19]
     * > countUpTo(1)
     * []
     * > countUpTo(18)
     * [2, 3, 5, 7, 11, 13, 17]
     * > countUpTo(47)
     * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
     * > countUpTo(101)
     * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
     */
    public static List<Object> countUpTo(int n) {
        List<Object> result = new ArrayList<Object>();
        int i = 2;
        while (i < n) {
            if (isPrime(i)) {
                result.add(i);
            }
            i++;
        }
        return result;
    }

    private static boolean isPrime(int n) {
        int i = 2;
        while (i < n) {
            if (n % i == 0) {
                return false;
            }
            i++;
        }
        return true;
    }
}
","// CountUpToTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpTo}.
* It contains ten unit test cases for the {@link CountUpTo#countUpTo(int)} method.
*/
class CountUpToTest {","// CountUpToTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpTo}.
* It contains ten unit test cases for the {@link CountUpTo#countUpTo(int)} method.
*/
class CountUpToTest {

	@Test
	void testCountUpTo_5() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(3);
		assertEquals(expected, CountUpTo.countUpTo(5));
	}
	
	@Test
	void testCountUpTo_6() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(3);
		expected.add(5);
		assertEquals(expected, CountUpTo.countUpTo(6));
	}
	
	@Test
	void testCountUpTo_7() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(3);
		expected.add(5);
		assertEquals(expected, CountUpTo.countUpTo(7));
	}
	
	@Test
	void testCountUpTo_10() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(7);
		assertEquals(expected, CountUpTo.countUpTo(10));
	}
	
	@Test
	void testCountUpTo_0() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, CountUpTo.countUpTo(0));
	}
	
	@Test
	void testCountUpTo_22() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(7);
		expected.add(11);
		expected.add(13);
		expected.add(17);
		expected.add(19);
		assertEquals(expected, CountUpTo.countUpTo(22));
	}
	
	@Test
	void testCountUpTo_1() {
		List<Object> expected = new ArrayList<Object>();
		assertEquals(expected, CountUpTo.countUpTo(1));
	}
	
	@Test
	void testCountUpTo_18() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(7);
		expected.add(11);
		expected.add(13);
		expected.add(17);
		assertEquals(expected, CountUpTo.countUpTo(18));
	}
	
	@Test
	void testCountUpTo_47() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(7);
		expected.add(11);
		expected.add(13);
		expected.add(17);
		expected.add(19);
		expected.add(23);
		expected.add(29);
		expected.add(31);
		expected.add(37);
		expected.add(41);
		expected.add(43);
		assertEquals(expected, CountUpTo.countUpTo(47));
	}
	
	@Test
	void testCountUpTo_101() {
		List<Object> expected = new ArrayList<Object>();
		expected.add(2);
		expected.add(3);
		expected.add(5);
		expected.add(7);
		expected.add(11);
		expected.add(13);
		expected.add(17);
		expected.add(19);
		expected.add(23);
		expected.add(29);
		expected.add(31);
		expected.add(37);
		expected.add(41);
		expected.add(43);
		expected.add(47);
		expected.add(53);
		expected.add(59);
		expected.add(61);
		expected.add(67);
		expected.add(71);
		expected.add(73);
		expected.add(79);
		expected.add(83);
		expected.add(89);
		expected.add(97);
		assertEquals(expected, CountUpTo.countUpTo(101));
	}
}"
cmpl-6tWMqMwnGGoJHcwGJ0wOktAVSdxAV,/HumanEvalJava/src/main/java/original/id_97.java,49.170878887176514,length,"// Multiply.java
package original;

class Multiply {

    /**
     * Complete the function that takes two integers and returns
     * the product of their unit digits.
     * Assume the input is always valid.
     * Examples:
     * multiply(148, 412) should return 16.
     * multiply(19, 28) should return 72.
     * multiply(2020, 1851) should return 0.
     * multiply(14,-15) should return 20.
     *
     * > multiply(148, 412)
     * 16
     * > multiply(19, 28)
     * 72
     * > multiply(2020, 1851)
     * 0
     * > multiply(14, -15)
     * 20
     * > multiply(76, 67)
     * 42
     * > multiply(17, 27)
     * 49
     * > multiply(0, 1)
     * 0
     * > multiply(0, 0)
     * 0
     */
    public static int multiply(int a, int b) {
        if (a < 0)
            a = -a;
        if (b < 0)
            b = -b;
        return (a % 10) * (b % 10);
    }
}
","// MultiplyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Multiply}.
* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.
*/
class MultiplyTest {","// MultiplyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Multiply}.
* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.
*/
class MultiplyTest {

	@Test
	void testMultiply() {
		assertEquals(16, Multiply.multiply(148, 412));
		assertEquals(72, Multiply.multiply(19, 28));
		assertEquals(0, Multiply.multiply(2020, 1851));
		assertEquals(20, Multiply.multiply(14, -15));
		assertEquals(42, Multiply.multiply(76, 67));
		assertEquals(49, Multiply.multiply(17, 27));
		assertEquals(0, Multiply.multiply(0, 1));
		assertEquals(0, Multiply.multiply(0, 0));
		assertEquals(0, Multiply.multiply(0, -1));
		assertEquals(0, Multiply.multiply(-1, 0));
	}
}

// MultiplyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Multiply}.
* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.
*/
class MultiplyTest {
		
	@Test
	void testMultiply() {
		assertEquals(16, Multiply.multiply(148, 412));
		assertEquals(72, Multiply.multiply(19, 28));
		assertEquals(0, Multiply.multiply(2020, 1851));
		assertEquals(20, Multiply.multiply(14, -15));
		assertEquals(42, Multiply.multiply(76, 67));
		assertEquals(49, Multiply.multiply(17, 27));
		assertEquals(0, Multiply.multiply(0, 1));
		assertEquals(0, Multiply.multiply(0, 0));
		assertEquals(0, Multiply.multiply(0, -1));
		assertEquals(0, Multiply.multiply(-1, 0));
	}
}

// MultiplyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Multiply}.
* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.
*/
class MultiplyTest {
		
	@Test
	void testMultiply() {
		assertEquals(16, Multiply.multiply(148, 412));
		assertEquals(72, Multiply.multiply(19, 28));
		assertEquals(0, Multiply.multiply(2020, 1851));
		assertEquals(20, Multiply.multiply(14, -15));
		assertEquals(42, Multiply.multiply(76, 67));
		assertEquals(49, Multiply.multiply(17, 27));
		assertEquals(0, Multiply.multiply(0, 1));
		assertEquals(0, Multiply.multiply(0, 0));
		assertEquals(0, Multiply.multiply(0, -1));
		assertEquals(0, Multiply.multiply(-1, 0));
	}
}

// MultiplyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Multiply}.
* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.
*/
class MultiplyTest {
		
	@Test
	void testMultiply() {
		assertEquals(16, Multiply.multiply(148, 412));
		assertEquals(72, Multiply.multiply(19, 28));
		assertEquals(0, Multiply.multiply(2020, 1851));
		assertEquals(20, Multiply.multiply(14, -15));
		assertEquals(42, Multiply.multiply(76, 67));
		assertEquals(49, Multiply.multiply(17, 27));
		assertEquals(0, Multiply.multiply(0, 1));
		assertEquals(0, Multiply.multiply(0, 0));
		assertEquals(0, Multiply.multiply(0, -1));
		assertEquals(0, Multiply.multiply(-1, 0));
	}
}

// MultiplyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Multiply}.
* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.
*/
class MultiplyTest {
		
	@Test
	void testMultiply() {
		assertEquals(16, Multiply.multiply(148, 412));
		assertEquals(72, Multiply.multiply(19, 28));
		assertEquals(0, Multiply.multiply(2020, 1851));
		assertEquals(20, Multiply.multiply(14, -15));
		assertEquals(42, Multiply.multiply(76, 67));
		assertEquals(49, Multiply.multiply(17, 27));
		assertEquals(0, Multiply.multiply(0, 1));
		assertEquals(0, Multiply.multiply(0, 0));
		assertEquals(0, Multiply.multiply(0, -1));
		assertEquals(0, Multiply.multiply(-1, 0));
	}
}

// MultiplyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Multiply}.
* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.
*/
class MultiplyTest {
		
	@Test
	void testMultiply() {
		assertEquals(16, Multiply.multiply(148, 412));
		assertEquals(72, Multiply.multiply(19, 28));
		assertEquals(0, Multiply.multiply(2020, 1851));
		assertEquals(20, Multiply.multiply(14, -15));
		assertEquals(42, Multiply.multiply(76, 67));
		assertEquals(49, Multiply.multiply(17, 27));
		assertEquals(0, Multiply.multiply(0, 1));
		assertEquals(0, Multiply.multiply(0, 0));
		assertEquals(0, Multiply.multiply(0, -1));
		assertEquals(0, Multiply.multiply(-1, 0));
	}
}

// MultiplyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Multiply}.
* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.
*/
class MultiplyTest {
		
	@Test
	void testMultiply() {
"
cmpl-6tWNttU8cJiIPeORYpp0PQAJdo2Je,/HumanEvalJava/src/main/java/original/id_98.java,51.337090492248535,length,"// CountUpper.java
package original;

class CountUpper {

    /**
     * * Given a string s, count the number of uppercase vowels in even indices.
     *
     * For example:
     * countUpper('aBCdEf') returns 1
     * countUpper('abcdefg') returns 0
     * countUpper('dBBE') returns 0
     *
     * > countUpper(""abcdefg"")
     * 0
     * > countUpper(""dBBE"")
     * 0
     * > countUpper("""")
     * 0
     * > countUpper(""EEEE"")
     * 2
     */
    public static int countUpper(String s) {
        int result = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (i % 2 == 0 && Character.isUpperCase(c) && ""AEIOU"".indexOf(c) >= 0) {
                result += 1;
            }
        }
        return result;
    }
}
","// CountUpperTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpper}.
* It contains ten unit test cases for the {@link CountUpper#countUpper(String)} method.
*/
class CountUpperTest {","// CountUpperTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpper}.
* It contains ten unit test cases for the {@link CountUpper#countUpper(String)} method.
*/
class CountUpperTest {

	@Test
	void testCountUpper() {
		assertEquals(0, CountUpper.countUpper(""abcdefg""));
		assertEquals(0, CountUpper.countUpper(""dBBE""));
		assertEquals(0, CountUpper.countUpper(""""));
		assertEquals(2, CountUpper.countUpper(""EEEE""));
		assertEquals(1, CountUpper.countUpper(""aBCdEf""));
		assertEquals(0, CountUpper.countUpper(""abcdefg""));
		assertEquals(0, CountUpper.countUpper(""dBBE""));
		assertEquals(0, CountUpper.countUpper(""""));
		assertEquals(2, CountUpper.countUpper(""EEEE""));
		assertEquals(1, CountUpper.countUpper(""aBCdEf""));
	}
}

// CountUpperTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpper}.
* It contains ten unit test cases for the {@link CountUpper#countUpper(String)} method.
*/
class CountUpperTest {
		
	@Test
	void testCountUpper() {
		assertEquals(0, CountUpper.countUpper(""abcdefg""));
		assertEquals(0, CountUpper.countUpper(""dBBE""));
		assertEquals(0, CountUpper.countUpper(""""));
		assertEquals(2, CountUpper.countUpper(""EEEE""));
		assertEquals(1, CountUpper.countUpper(""aBCdEf""));
		assertEquals(0, CountUpper.countUpper(""abcdefg""));
		assertEquals(0, CountUpper.countUpper(""dBBE""));
		assertEquals(0, CountUpper.countUpper(""""));
		assertEquals(2, CountUpper.countUpper(""EEEE""));
		assertEquals(1, CountUpper.countUpper(""aBCdEf""));
	}
}

// CountUpperTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpper}.
* It contains ten unit test cases for the {@link CountUpper#countUpper(String)} method.
*/
class CountUpperTest {
		
	@Test
	void testCountUpper() {
		assertEquals(0, CountUpper.countUpper(""abcdefg""));
		assertEquals(0, CountUpper.countUpper(""dBBE""));
		assertEquals(0, CountUpper.countUpper(""""));
		assertEquals(2, CountUpper.countUpper(""EEEE""));
		assertEquals(1, CountUpper.countUpper(""aBCdEf""));
		assertEquals(0, CountUpper.countUpper(""abcdefg""));
		assertEquals(0, CountUpper.countUpper(""dBBE""));
		assertEquals(0, CountUpper.countUpper(""""));
		assertEquals(2, CountUpper.countUpper(""EEEE""));
		assertEquals(1, CountUpper.countUpper(""aBCdEf""));
	}
}

// CountUpperTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpper}.
* It contains ten unit test cases for the {@link CountUpper#countUpper(String)} method.
*/
class CountUpperTest {
		
	@Test
	void testCountUpper() {
		assertEquals(0, CountUpper.countUpper(""abcdefg""));
		assertEquals(0, CountUpper.countUpper(""dBBE""));
		assertEquals(0, CountUpper.countUpper(""""));
		assertEquals(2, CountUpper.countUpper(""EEEE""));
		assertEquals(1, CountUpper.countUpper(""aBCdEf""));
		assertEquals(0, CountUpper.countUpper(""abcdefg""));
		assertEquals(0, CountUpper.countUpper(""dBBE""));
		assertEquals(0, CountUpper.countUpper(""""));
		assertEquals(2, CountUpper.countUpper(""EEEE""));
		assertEquals(1, CountUpper.countUpper(""aBCdEf""));
	}
}

// CountUpperTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpper}.
* It contains ten unit test cases for the {@link CountUpper#countUpper(String)} method.
*/
class CountUpperTest {
		
	@Test
	void testCountUpper() {
		assertEquals(0, CountUpper.countUpper(""abcdefg""));
		assertEquals(0, CountUpper.countUpper(""dBBE""));
		assertEquals(0, CountUpper.countUpper(""""));
		assertEquals(2, CountUpper.countUpper(""EEEE""));
		assertEquals(1, CountUpper.countUpper(""aBCdEf""));
		assertEquals(0, CountUpper.countUpper(""abcdefg""));
		assertEquals(0, CountUpper.countUpper(""dBBE""));
		assertEquals(0, CountUpper.countUpper(""""));
		assertEquals(2, CountUpper.countUpper(""EEEE""));
		assertEquals(1, CountUpper.countUpper(""aBCdEf""));
	}
}

// CountUpperTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpper}.
* It contains ten unit test cases for the {@link CountUpper#countUpper(String)} method.
*/
class CountUpperTest {
		
	@Test
	void testCountUpper() {
		assertEquals(0, CountUpper.countUpper(""abcdefg""));
		assertEquals(0, CountUpper.countUpper(""dBBE""));
		assertEquals(0, CountUpper.countUpper(""""));
		assertEquals(2, CountUpper.countUpper(""EEEE""));
		assertEquals(1, CountUpper.countUpper(""aBCdEf""));
		assertEquals(0, CountUpper.countUpper(""abcdefg""));
		assertEquals(0, CountUpper.countUpper(""dBBE""));
		assertEquals(0, CountUpper.countUpper(""""));
		assertEquals(2, CountUpper.countUpper(""EEEE""));
		assertEquals(1, CountUpper.countUpper(""aBCdEf""));
	}
}

// CountUpperTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CountUpper}.
* It contains ten unit test cases for the {@link CountUpper#countUpper(String)} method.
*/
class CountUpperTest {
		
	@Test
	void testCountUpper() {
		assertEquals(0, CountUpper.countUpper(""abcdef"
cmpl-6tWOwooHvwMtGFAUX1fdfGn2LiUgi,/HumanEvalJava/src/main/java/original/id_99.java,8.71240782737732,stop,"// ClosestInteger.java
package original;

class ClosestInteger {

    /**
     * * Create a function that takes a value (string) representing a number
     * and returns the closest integer to it. If the number is equidistant
     * from two integers, round it away from zero.
     *
     * Examples
     * >>> closestInteger(""10"")
     * 10
     * >>> closestInteger(""15.3"")
     * 15
     *
     * Note:
     * Rounding away from zero means that if the given number is equidistant
     * from two integers, the one you should return is the one that is the
     * farthest from zero. For example closest_integer(""14.5"") should
     * return 15 and closest_integer(""-14.5"") should return -15.
     *
     * > closestInteger(""10"")
     * 10
     * > closestInteger(""14.5"")
     * 15
     * > closestInteger(""-15.5"")
     * -16
     * > closestInteger(""15.3"")
     * 15
     * > closestInteger(""0"")
     * 0
     */
    public static int closestInteger(String value) {
        double d = Double.parseDouble(value);
        if (d > 0) {
            return (int) Math.floor(d + 0.5);
        } else {
            return (int) Math.ceil(d - 0.5);
        }
    }
}
","// ClosestIntegerTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClosestInteger}.
* It contains ten unit test cases for the {@link ClosestInteger#closestInteger(String)} method.
*/
class ClosestIntegerTest {","// ClosestIntegerTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClosestInteger}.
* It contains ten unit test cases for the {@link ClosestInteger#closestInteger(String)} method.
*/
class ClosestIntegerTest {

	@Test
	void testClosestInteger() {
		assertEquals(10, ClosestInteger.closestInteger(""10""));
		assertEquals(15, ClosestInteger.closestInteger(""15.3""));
		assertEquals(15, ClosestInteger.closestInteger(""14.5""));
		assertEquals(-16, ClosestInteger.closestInteger(""-15.5""));
		assertEquals(0, ClosestInteger.closestInteger(""0""));
		assertEquals(0, ClosestInteger.closestInteger(""-0""));
		assertEquals(0, ClosestInteger.closestInteger(""0.0""));
		assertEquals(0, ClosestInteger.closestInteger(""-0.0""));
		assertEquals(0, ClosestInteger.closestInteger(""0.5""));
		assertEquals(-1, ClosestInteger.closestInteger(""-0.5""));
	}
}"
