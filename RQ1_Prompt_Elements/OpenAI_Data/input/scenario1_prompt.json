[
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CorrectBracketing {\n\n    public static Boolean correctBracketing(String brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;\n    }\n}\n",
		"id": "56",
		"test_prompt": "// CorrectBracketingTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CorrectBracketing}.\n* It contains ten test cases for the {@link CorrectBracketing#correctBracketing()} method.\n*/\nclass CorrectBracketingTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriplesSumToZero {\n\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "40",
		"test_prompt": "// TriplesSumToZeroTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link TriplesSumToZero}.\n* It contains ten test cases for the {@link TriplesSumToZero#triplesSumToZero()} method.\n*/\nclass TriplesSumToZeroTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ParseMusic {\n\n    public static List<Object> parseMusic(String musicString) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < musicString.length(); i++) {\n            if (musicString.charAt(i) == 'o') {\n                if (i < musicString.length() - 1 && musicString.charAt(i + 1) == '|') {\n                    result.add(2);\n                    i++;\n                } else {\n                    result.add(4);\n                }\n            } else if (musicString.charAt(i) == '.') {\n                result.add(1);\n                i++;\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "17",
		"test_prompt": "// ParseMusicTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link ParseMusic}.\n* It contains ten test cases for the {@link ParseMusic#parseMusic()} method.\n*/\nclass ParseMusicTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StartsOneEnds {\n\n    public static int startsOneEnds(int n) {\n        int count = 0;\n        int start = 1;\n        int end = 1;\n        for (int i = 1; i < n; i++) {\n            start *= 10;\n            end *= 10;\n        }\n        for (int i = start; i < end * 10; i++) {\n            if (i % 10 == 1 || i / start == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "83",
		"test_prompt": "// StartsOneEndsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link StartsOneEnds}.\n* It contains ten test cases for the {@link StartsOneEnds#startsOneEnds()} method.\n*/\nclass StartsOneEndsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumProduct {\n\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        Integer sum = 0;\n        Integer product = 1;\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                sum += (Integer) number;\n                product *= (Integer) number;\n            } else {\n                throw new IllegalArgumentException(\"Invalid number type\");\n            }\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n}\n",
		"id": "8",
		"test_prompt": "// SumProductTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SumProduct}.\n* It contains ten test cases for the {@link SumProduct#sumProduct()} method.\n*/\nclass SumProductTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IntToMiniRoman {\n\n    public static String intToMiniRoman(int number) {\n        String result = \"\";\n        int[] values = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        String[] symbols = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                result += symbols[i];\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "156",
		"test_prompt": "// IntToMiniRomanTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link IntToMiniRoman}.\n* It contains ten test cases for the {@link IntToMiniRoman#intToMiniRoman()} method.\n*/\nclass IntToMiniRomanTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass WordsString {\n\n    public static List<Object> wordsString(String s) {\n        if (s.length() == 0)\n            return new ArrayList<Object>();\n        String[] words = s.split(\"[, ]+\");\n        return Arrays.asList(words);\n    }\n}\n",
		"id": "101",
		"test_prompt": "// WordsStringTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link WordsString}.\n* It contains ten test cases for the {@link WordsString#wordsString()} method.\n*/\nclass WordsStringTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SelectWords {\n\n    public static List<Object> selectWords(String s, int n) {\n        List<Object> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonants = 0;\n            for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "117",
		"test_prompt": "// SelectWordsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SelectWords}.\n* It contains ten test cases for the {@link SelectWords#selectWords()} method.\n*/\nclass SelectWordsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CheckDictCase {\n\n    public static Boolean checkDictCase(Object dict) {\n        if (dict instanceof Map) {\n            Map m = (Map) dict;\n            if (m.size() == 0) {\n                return false;\n            }\n            boolean allLower = true;\n            boolean allUpper = true;\n            for (Object k : m.keySet()) {\n                if (k instanceof String) {\n                    String s = (String) k;\n                    if (!s.equals(s.toLowerCase())) {\n                        allLower = false;\n                    }\n                    if (!s.equals(s.toUpperCase())) {\n                        allUpper = false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n            return allLower || allUpper;\n        }\n        return false;\n    }\n}\n",
		"id": "95",
		"test_prompt": "// CheckDictCaseTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CheckDictCase}.\n* It contains ten test cases for the {@link CheckDictCase#checkDictCase()} method.\n*/\nclass CheckDictCaseTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FixSpaces {\n\n    public static String fixSpaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    new_text += \"-\" + text.charAt(i);\n                } else if (end - start > 0) {\n                    new_text += \"_\".repeat(end - start) + text.charAt(i);\n                } else {\n                    new_text += text.charAt(i);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n        if (end - start > 2) {\n            new_text += \"-\";\n        } else if (end - start > 0) {\n            new_text += \"_\";\n        }\n        return new_text;\n    }\n}\n",
		"id": "140",
		"test_prompt": "// FixSpacesTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link FixSpaces}.\n* It contains ten test cases for the {@link FixSpaces#fixSpaces()} method.\n*/\nclass FixSpacesTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CompareOne {\n\n    public static Object compareOne(Object a, Object b) {\n        Object temp_a = a;\n        Object temp_b = b;\n        if (temp_a instanceof String) {\n            temp_a = ((String) temp_a).replace(',', '.');\n        }\n        if (temp_b instanceof String) {\n            temp_b = ((String) temp_b).replace(',', '.');\n        }\n        if (Float.parseFloat(temp_a.toString()) == Float.parseFloat(temp_b.toString())) {\n            return null;\n        }\n        return Float.parseFloat(temp_a.toString()) > Float.parseFloat(temp_b.toString()) ? a : b;\n    }\n}\n",
		"id": "137",
		"test_prompt": "// CompareOneTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CompareOne}.\n* It contains ten test cases for the {@link CompareOne#compareOne()} method.\n*/\nclass CompareOneTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Solution {\n\n    public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
		"id": "121",
		"test_prompt": "// SolutionTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Solution}.\n* It contains ten test cases for the {@link Solution#solution()} method.\n*/\nclass SolutionTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MeanAbsoluteDeviation {\n\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n        Double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        Double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        return mad / numbers.size();\n    }\n}\n",
		"id": "4",
		"test_prompt": "// MeanAbsoluteDeviationTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link MeanAbsoluteDeviation}.\n* It contains ten test cases for the {@link MeanAbsoluteDeviation#meanAbsoluteDeviation()} method.\n*/\nclass MeanAbsoluteDeviationTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumToN {\n\n    public static int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n",
		"id": "60",
		"test_prompt": "// SumToNTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SumToN}.\n* It contains ten test cases for the {@link SumToN#sumToN()} method.\n*/\nclass SumToNTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortEven {\n\n    public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>(l);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                List<Integer> subl = new ArrayList<Integer>();\n                for (int j = 0; j < l.size(); j++) {\n                    if (j % 2 == 0) {\n                        subl.add(l.get(j));\n                    }\n                }\n                Collections.sort(subl);\n                l2.set(i, subl.get(i / 2));\n            }\n        }\n        return l2;\n    }\n}\n",
		"id": "37",
		"test_prompt": "// SortEvenTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SortEven}.\n* It contains ten test cases for the {@link SortEven#sortEven()} method.\n*/\nclass SortEvenTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RescaleToUnit {\n\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n        }\n        return result;\n    }\n}\n",
		"id": "21",
		"test_prompt": "// RescaleToUnitTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link RescaleToUnit}.\n* It contains ten test cases for the {@link RescaleToUnit#rescaleToUnit()} method.\n*/\nclass RescaleToUnitTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ClosestInteger {\n\n    public static int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n        if (d > 0) {\n            return (int) Math.floor(d + 0.5);\n        } else {\n            return (int) Math.ceil(d - 0.5);\n        }\n    }\n}\n",
		"id": "99",
		"test_prompt": "// ClosestIntegerTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link ClosestInteger}.\n* It contains ten test cases for the {@link ClosestInteger#closestInteger()} method.\n*/\nclass ClosestIntegerTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsSimplePower {\n\n    public static Boolean isSimplePower(int x, int n) {\n        if (x == 1) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        int y = n;\n        while (y < x) {\n            y *= n;\n        }\n        return y == x;\n    }\n}\n",
		"id": "76",
		"test_prompt": "// IsSimplePowerTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link IsSimplePower}.\n* It contains ten test cases for the {@link IsSimplePower#isSimplePower()} method.\n*/\nclass IsSimplePowerTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CountUpper {\n\n    public static int countUpper(String s) {\n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (i % 2 == 0 && Character.isUpperCase(c) && \"AEIOU\".indexOf(c) >= 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "98",
		"test_prompt": "// CountUpperTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CountUpper}.\n* It contains ten test cases for the {@link CountUpper#countUpper()} method.\n*/\nclass CountUpperTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Iscube {\n\n    public static Boolean iscube(int a) {\n        if (a < 0) {\n            return iscube(-a);\n        }\n        int i = 0;\n        while (i * i * i < a) {\n            i++;\n        }\n        return i * i * i == a;\n    }\n}\n",
		"id": "77",
		"test_prompt": "// IscubeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Iscube}.\n* It contains ten test cases for the {@link Iscube#iscube()} method.\n*/\nclass IscubeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FindClosestElements {\n\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double minDiff = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    result.clear();\n                    result.add(numbers.get(i));\n                    result.add(numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
		"id": "20",
		"test_prompt": "// FindClosestElementsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link FindClosestElements}.\n* It contains ten test cases for the {@link FindClosestElements#findClosestElements()} method.\n*/\nclass FindClosestElementsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FizzBuzz {\n\n    public static int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String s = Integer.toString(i);\n                for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "36",
		"test_prompt": "// FizzBuzzTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link FizzBuzz}.\n* It contains ten test cases for the {@link FizzBuzz#fizzBuzz()} method.\n*/\nclass FizzBuzzTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Intersperse {\n\n    public static List<Object> intersperse(List<Object> numbers, int delimeter) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimeter);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "5",
		"test_prompt": "// IntersperseTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Intersperse}.\n* It contains ten test cases for the {@link Intersperse#intersperse()} method.\n*/\nclass IntersperseTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CorrectBracketing1 {\n\n    public static Boolean correctBracketing(String brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;\n    }\n}\n",
		"id": "61",
		"test_prompt": "// CorrectBracketing1Test.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CorrectBracketing1}.\n* It contains ten test cases for the {@link CorrectBracketing1#correctBracketing()} method.\n*/\nclass CorrectBracketing1Test {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Maximum1 {\n\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        int n = arr.size();\n        if (n == 0 || k == 0) {\n            return new ArrayList<Object>();\n        }\n        if (n <= k) {\n            Collections.sort(arr);\n            return new ArrayList<Object>(arr);\n        }\n        List<Object> res = new ArrayList<Object>();\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>(k);\n        for (int i = 0; i < n; i++) {\n            if (i < k) {\n                heap.add(arr.get(i));\n            } else {\n                if (arr.get(i) > heap.peek()) {\n                    heap.poll();\n                    heap.add(arr.get(i));\n                }\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            res.add(heap.poll());\n        }\n        Collections.sort(res, new Comparator<Object>() {\n\n            public int compare(Object o1, Object o2) {\n                return (int) o1 - (int) o2;\n            }\n        });\n        return res;\n    }\n}\n",
		"id": "120",
		"test_prompt": "// Maximum1Test.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Maximum1}.\n* It contains ten test cases for the {@link Maximum1#compare()} method.\n*/\nclass Maximum1Test {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Solve {\n\n    public static String solve(String s) {\n        String result = \"\";\n        boolean hasLetters = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                hasLetters = true;\n                if (Character.isUpperCase(s.charAt(i))) {\n                    result += Character.toLowerCase(s.charAt(i));\n                } else {\n                    result += Character.toUpperCase(s.charAt(i));\n                }\n            } else {\n                result += s.charAt(i);\n            }\n        }\n        if (!hasLetters) {\n            result = new StringBuilder(result).reverse().toString();\n        }\n        return result;\n    }\n}\n",
		"id": "161",
		"test_prompt": "// SolveTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Solve}.\n* It contains ten test cases for the {@link Solve#solve()} method.\n*/\nclass SolveTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestSmallestIntegers {\n\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n        int largestNegative = Integer.MIN_VALUE;\n        int smallestPositive = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.size(); i++) {\n            int curr = (Integer) lst.get(i);\n            if (curr < 0) {\n                if (curr > largestNegative) {\n                    largestNegative = curr;\n                }\n            } else if (curr > 0) {\n                if (curr < smallestPositive) {\n                    smallestPositive = curr;\n                }\n            }\n        }\n        if (largestNegative == Integer.MIN_VALUE) {\n            result.add(null);\n        } else {\n            result.add(largestNegative);\n        }\n        if (smallestPositive == Integer.MAX_VALUE) {\n            result.add(null);\n        } else {\n            result.add(smallestPositive);\n        }\n        return result;\n    }\n}\n",
		"id": "136",
		"test_prompt": "// LargestSmallestIntegersTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link LargestSmallestIntegers}.\n* It contains ten test cases for the {@link LargestSmallestIntegers#largestSmallestIntegers()} method.\n*/\nclass LargestSmallestIntegersTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FileNameCheck {\n\n    public static String fileNameCheck(String fileName) {\n        String[] suf = { \"txt\", \"exe\", \"dll\" };\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2) {\n            return \"No\";\n        }\n        if (!Arrays.asList(suf).contains(lst[1])) {\n            return \"No\";\n        }\n        if (lst[0].length() == 0) {\n            return \"No\";\n        }\n        if (!Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = 0;\n        for (int i = 0; i < lst[0].length(); i++) {\n            if (Character.isDigit(lst[0].charAt(i))) {\n                t++;\n            }\n        }\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
		"id": "141",
		"test_prompt": "// FileNameCheckTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link FileNameCheck}.\n* It contains ten test cases for the {@link FileNameCheck#fileNameCheck()} method.\n*/\nclass FileNameCheckTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Skjkasdkd {\n\n    public static int skjkasdkd(List<Integer> lst) {\n        int largestPrime = 0;\n        for (int value : lst) {\n            if (isPrime(value) && value > largestPrime) {\n                largestPrime = value;\n            }\n        }\n        int sum = 0;\n        while (largestPrime > 0) {\n            sum += largestPrime % 10;\n            largestPrime /= 10;\n        }\n        return sum;\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "94",
		"test_prompt": "// SkjkasdkdTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Skjkasdkd}.\n* It contains ten test cases for the {@link Skjkasdkd#skjkasdkd()} method.\n*/\nclass SkjkasdkdTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortArray {\n\n    public static List<Object> sortArray(List<Object> arr) {\n        List<Object> sorted = new ArrayList<Object>();\n        for (int i = 0; i < arr.size(); i++) {\n            int num = ((Number) arr.get(i)).intValue();\n            int ones = 0;\n            while (num > 0) {\n                ones += num % 2;\n                num /= 2;\n            }\n            sorted.add(new int[] { ones, ((Number) arr.get(i)).intValue() });\n        }\n        Collections.sort(sorted, new Comparator<Object>() {\n\n            public int compare(Object o1, Object o2) {\n                int[] a1 = (int[]) o1;\n                int[] a2 = (int[]) o2;\n                if (a1[0] == a2[0]) {\n                    return a1[1] - a2[1];\n                }\n                return a1[0] - a2[0];\n            }\n        });\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < sorted.size(); i++) {\n            result.add(((int[]) sorted.get(i))[1]);\n        }\n        return result;\n    }\n}\n",
		"id": "116",
		"test_prompt": "// SortArrayTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SortArray}.\n* It contains ten test cases for the {@link SortArray#compare()} method.\n*/\nclass SortArrayTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MakeAPile {\n\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (i == 1) {\n                result.add(n);\n            } else {\n                if (n % 2 == 0) {\n                    result.add(result.get(i - 2) + 2);\n                } else {\n                    result.add(result.get(i - 2) + 2);\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n}\n",
		"id": "100",
		"test_prompt": "// MakeAPileTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link MakeAPile}.\n* It contains ten test cases for the {@link MakeAPile#makeAPile()} method.\n*/\nclass MakeAPileTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RightAngleTriangle {\n\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        if (a > b && a > c) {\n            return a * a == b * b + c * c;\n        }\n        if (b > a && b > c) {\n            return b * b == a * a + c * c;\n        }\n        return c * c == a * a + b * b;\n    }\n}\n",
		"id": "157",
		"test_prompt": "// RightAngleTriangleTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link RightAngleTriangle}.\n* It contains ten test cases for the {@link RightAngleTriangle#rightAngleTriangle()} method.\n*/\nclass RightAngleTriangleTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass PrimeLength {\n\n    public static Boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 0 || length == 1) {\n            return false;\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "82",
		"test_prompt": "// PrimeLengthTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link PrimeLength}.\n* It contains ten test cases for the {@link PrimeLength#primeLength()} method.\n*/\nclass PrimeLengthTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RollingMax {\n\n    public static List<Object> rollingMax(List<Object> numbers) {\n        List<Object> result = new ArrayList<Object>();\n        Integer max = null;\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                if (max == null || (Integer) number > max) {\n                    max = (Integer) number;\n                }\n                result.add(max);\n            } else {\n                throw new IllegalArgumentException(\"Invalid number type\");\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "9",
		"test_prompt": "// RollingMaxTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link RollingMax}.\n* It contains ten test cases for the {@link RollingMax#rollingMax()} method.\n*/\nclass RollingMaxTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CountDistinctCharacters {\n\n    public static int countDistinctCharacters(String string) {\n        Set<Character> distinctCharacters = new HashSet<Character>();\n        for (int i = 0; i < string.length(); i++) {\n            distinctCharacters.add(Character.toLowerCase(string.charAt(i)));\n        }\n        return distinctCharacters.size();\n    }\n}\n",
		"id": "16",
		"test_prompt": "// CountDistinctCharactersTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CountDistinctCharacters}.\n* It contains ten test cases for the {@link CountDistinctCharacters#countDistinctCharacters()} method.\n*/\nclass CountDistinctCharactersTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CarRaceCollision {\n\n    public static int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "41",
		"test_prompt": "// CarRaceCollisionTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CarRaceCollision}.\n* It contains ten test cases for the {@link CarRaceCollision#carRaceCollision()} method.\n*/\nclass CarRaceCollisionTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Monotonic {\n\n    public static Boolean monotonic(List<Integer> l) {\n        int size = l.size();\n        if (size == 1) {\n            return true;\n        }\n        int direction = l.get(1) - l.get(0);\n        for (int i = 1; i < size - 1; i++) {\n            if (direction == 0) {\n                direction = l.get(i + 1) - l.get(i);\n            } else if (direction > 0) {\n                if (l.get(i + 1) < l.get(i)) {\n                    return false;\n                }\n            } else {\n                if (l.get(i + 1) > l.get(i)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "57",
		"test_prompt": "// MonotonicTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Monotonic}.\n* It contains ten test cases for the {@link Monotonic#monotonic()} method.\n*/\nclass MonotonicTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Digits {\n\n    public static int digits(int n) {\n        int res = 1;\n        boolean hasOdd = false;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                res *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n        return hasOdd ? res : 0;\n    }\n}\n",
		"id": "131",
		"test_prompt": "// DigitsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Digits}.\n* It contains ten test cases for the {@link Digits#digits()} method.\n*/\nclass DigitsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Intersection {\n\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        if (start > end) {\n            return \"NO\";\n        }\n        if (isPrime(end - start)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}\n",
		"id": "127",
		"test_prompt": "// IntersectionTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Intersection}.\n* It contains ten test cases for the {@link Intersection#intersection()} method.\n*/\nclass IntersectionTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Encrypt {\n\n    public static String encrypt(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                c += 2 * 2;\n                if (c > 'z') {\n                    c -= 26;\n                }\n            }\n            result += c;\n        }\n        return result;\n    }\n}\n",
		"id": "89",
		"test_prompt": "// EncryptTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Encrypt}.\n* It contains ten test cases for the {@link Encrypt#encrypt()} method.\n*/\nclass EncryptTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Digitsum {\n\n    public static int digitsum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}\n",
		"id": "66",
		"test_prompt": "// DigitsumTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Digitsum}.\n* It contains ten test cases for the {@link Digitsum#digitsum()} method.\n*/\nclass DigitsumTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TruncateNumber {\n\n    public static Double truncateNumber(Double number) {\n        // return number - Math.floor(number);\n        return Math.round((number - Math.floor(number)) * 1000.0) / 1000.0;\n    }\n}\n",
		"id": "2",
		"test_prompt": "// TruncateNumberTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link TruncateNumber}.\n* It contains ten test cases for the {@link TruncateNumber#truncateNumber()} method.\n*/\nclass TruncateNumberTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsPrime {\n\n    public static Boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "31",
		"test_prompt": "// IsPrimeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link IsPrime}.\n* It contains ten test cases for the {@link IsPrime#isPrime()} method.\n*/\nclass IsPrimeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FlipCase {\n\n    public static String flipCase(String string) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        return result.toString();\n    }\n}\n",
		"id": "27",
		"test_prompt": "// FlipCaseTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link FlipCase}.\n* It contains ten test cases for the {@link FlipCase#flipCase()} method.\n*/\nclass FlipCaseTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StrangeSortList {\n\n    public static List<Object> strangeSortList(List<Object> lst) {\n        List<Object> result = new ArrayList<Object>();\n        List<Integer> sorted = new ArrayList<Integer>();\n        for (Object value : lst) {\n            if (value instanceof Integer) {\n                sorted.add((Integer) value);\n            }\n        }\n        Collections.sort(sorted);\n        int i = 0;\n        int j = sorted.size() - 1;\n        while (i <= j) {\n            result.add(sorted.get(i));\n            if (i != j) {\n                result.add(sorted.get(j));\n            }\n            i++;\n            j--;\n        }\n        return result;\n    }\n}\n",
		"id": "70",
		"test_prompt": "// StrangeSortListTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link StrangeSortList}.\n* It contains ten test cases for the {@link StrangeSortList#strangeSortList()} method.\n*/\nclass StrangeSortListTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Fib4 {\n\n    public static int fib4(int n) {\n        if (n < 2) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 2;\n        int d = 0;\n        int e = 0;\n        for (int i = 4; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n        }\n        return e;\n    }\n}\n",
		"id": "46",
		"test_prompt": "// Fib4Test.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Fib4}.\n* It contains ten test cases for the {@link Fib4#fib4()} method.\n*/\nclass Fib4Test {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StringXor {\n\n    public static String stringXor(String a, String b) {\n        String result = \"\";\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "11",
		"test_prompt": "// StringXorTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link StringXor}.\n* It contains ten test cases for the {@link StringXor#stringXor()} method.\n*/\nclass StringXorTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add1 {\n\n    public static int add(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "85",
		"test_prompt": "// Add1Test.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Add1}.\n* It contains ten test cases for the {@link Add1#add()} method.\n*/\nclass Add1Test {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass XOrY {\n\n    public static int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
		"id": "150",
		"test_prompt": "// XOrYTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link XOrY}.\n* It contains ten test cases for the {@link XOrY#xOrY()} method.\n*/\nclass XOrYTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass EvenOddPalindrome {\n\n    public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}\n",
		"id": "107",
		"test_prompt": "// EvenOddPalindromeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link EvenOddPalindrome}.\n* It contains ten test cases for the {@link EvenOddPalindrome#evenOddPalindrome()} method.\n*/\nclass EvenOddPalindromeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Histogram {\n\n    public static Object histogram(String test) {\n        HashMap<String, Integer> map = new HashMap<>();\n        String[] arr = test.split(\" \");\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].equals(\"\")) {\n                continue;\n            }\n            if (map.containsKey(arr[i])) {\n                map.put(arr[i], map.get(arr[i]) + 1);\n            } else {\n                map.put(arr[i], 1);\n            }\n        }\n        return map;\n    }\n}\n",
		"id": "111",
		"test_prompt": "// HistogramTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Histogram}.\n* It contains ten test cases for the {@link Histogram#histogram()} method.\n*/\nclass HistogramTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Encode {\n\n    public static String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                c -= 32;\n            } else if (c >= 'A' && c <= 'Z') {\n                c += 32;\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                c += 2;\n            }\n            result += c;\n        }\n        return result;\n    }\n}\n",
		"id": "93",
		"test_prompt": "// EncodeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Encode}.\n* It contains ten test cases for the {@link Encode#encode()} method.\n*/\nclass EncodeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Specialfilter {\n\n    public static int specialfilter(List<Object> nums) {\n        int count = 0;\n        for (Object num : nums) {\n            if ((int) num > 10) {\n                Set odd_digits = new HashSet<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n                String number_as_string = Integer.toString((int) num);\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1))) && odd_digits.contains(Integer.parseInt(number_as_string.substring(number_as_string.length() - 1)))) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "146",
		"test_prompt": "// SpecialfilterTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Specialfilter}.\n* It contains ten test cases for the {@link Specialfilter#specialfilter()} method.\n*/\nclass SpecialfilterTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetMaxTriples {\n\n    public static int getMaxTriples(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "147",
		"test_prompt": "// GetMaxTriplesTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link GetMaxTriples}.\n* It contains ten test cases for the {@link GetMaxTriples#getMaxTriples()} method.\n*/\nclass GetMaxTriplesTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AnyInt {\n\n    public static Boolean anyInt(Number x, Number y, Number z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            if (x.intValue() == y.intValue() + z.intValue()) {\n                return true;\n            }\n            if (y.intValue() == x.intValue() + z.intValue()) {\n                return true;\n            }\n            if (z.intValue() == x.intValue() + y.intValue()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "92",
		"test_prompt": "// AnyIntTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link AnyInt}.\n* It contains ten test cases for the {@link AnyInt#anyInt()} method.\n*/\nclass AnyIntTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Exchange {\n\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int count = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 == 0) {\n                count--;\n            }\n        }\n        if (count <= 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n",
		"id": "110",
		"test_prompt": "// ExchangeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Exchange}.\n* It contains ten test cases for the {@link Exchange#exchange()} method.\n*/\nclass ExchangeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass F {\n\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "106",
		"test_prompt": "// FTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link F}.\n* It contains ten test cases for the {@link F#f()} method.\n*/\nclass FTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass DoubleTheDifference {\n\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) instanceof Integer) {\n                int num = (int) lst.get(i);\n                if (num % 2 != 0 && num > 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n",
		"id": "151",
		"test_prompt": "// DoubleTheDifferenceTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link DoubleTheDifference}.\n* It contains ten test cases for the {@link DoubleTheDifference#doubleTheDifference()} method.\n*/\nclass DoubleTheDifferenceTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Solve1 {\n\n    public static String solve(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n",
		"id": "84",
		"test_prompt": "// Solve1Test.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Solve1}.\n* It contains ten test cases for the {@link Solve1#solve()} method.\n*/\nclass Solve1Test {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MakePalindrome {\n\n    public static String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        String reversed = new StringBuilder(string).reverse().toString();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).equals(reversed.substring(0, string.length() - i))) {\n                return string + reversed.substring(string.length() - i);\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "10",
		"test_prompt": "// MakePalindromeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link MakePalindrome}.\n* It contains ten test cases for the {@link MakePalindrome#makePalindrome()} method.\n*/\nclass MakePalindromeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Median {\n\n    public static Number median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2) + l.get(size / 2 - 1)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}\n",
		"id": "47",
		"test_prompt": "// MedianTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Median}.\n* It contains ten test cases for the {@link Median#median()} method.\n*/\nclass MedianTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RemoveVowels {\n\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "51",
		"test_prompt": "// RemoveVowelsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link RemoveVowels}.\n* It contains ten test cases for the {@link RemoveVowels#removeVowels()} method.\n*/\nclass RemoveVowelsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea1 {\n\n    public static Number triangleArea(int a, int b, int c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double p = (a + b + c) / 2.0;\n        return Math.round(Math.sqrt(p * (p - a) * (p - b) * (p - c)) * 100.0) / 100.0;\n    }\n}\n",
		"id": "71",
		"test_prompt": "// TriangleArea1Test.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link TriangleArea1}.\n* It contains ten test cases for the {@link TriangleArea1#triangleArea()} method.\n*/\nclass TriangleArea1Test {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RemoveDuplicates {\n\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.indexOf(numbers.get(i)) == numbers.lastIndexOf(numbers.get(i))) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "26",
		"test_prompt": "// RemoveDuplicatesTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link RemoveDuplicates}.\n* It contains ten test cases for the {@link RemoveDuplicates#removeDuplicates()} method.\n*/\nclass RemoveDuplicatesTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetPositive {\n\n    public static List<Object> getPositive(List<Object> l) {\n        List<Object> result = new ArrayList<Object>();\n        for (Object value : l) {\n            if (value instanceof Integer) {\n                int i = (Integer) value;\n                if (i > 0) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "30",
		"test_prompt": "// GetPositiveTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link GetPositive}.\n* It contains ten test cases for the {@link GetPositive#getPositive()} method.\n*/\nclass GetPositiveTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortArray1 {\n\n    public static List<Object> sortArray(List<Object> array) {\n        if (array.size() <= 1) {\n            return array;\n        }\n        int sum = (Integer) array.get(0) + (Integer) array.get(array.size() - 1);\n        List<Object> sortedArray = new ArrayList<Object>(array);\n        Collections.sort(sortedArray, new Comparator<Object>() {\n\n            @Override\n            public int compare(Object o1, Object o2) {\n                return (Integer) o1 - (Integer) o2;\n            }\n        });\n        if (sum % 2 == 0) {\n            Collections.reverse(sortedArray);\n        }\n        return sortedArray;\n    }\n}\n",
		"id": "88",
		"test_prompt": "// SortArray1Test.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SortArray1}.\n* It contains ten test cases for the {@link SortArray1#compare()} method.\n*/\nclass SortArray1Test {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FruitDistribution {\n\n    public static int fruitDistribution(String s, int n) {\n        int apples = 0;\n        int oranges = 0;\n        int mangoes = 0;\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"apples\")) {\n                apples = Integer.parseInt(words[i - 1]);\n            }\n            if (words[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(words[i - 1]);\n            }\n        }\n        mangoes = n - apples - oranges;\n        return mangoes;\n    }\n}\n",
		"id": "67",
		"test_prompt": "// FruitDistributionTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link FruitDistribution}.\n* It contains ten test cases for the {@link FruitDistribution#fruitDistribution()} method.\n*/\nclass FruitDistributionTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass BelowZero {\n\n    public static Boolean belowZero(List<Object> operations) {\n        Double balance = 0.0;\n        for (Object operation : operations) {\n            if (operation instanceof Double) {\n                balance += (Double) operation;\n            } else if (operation instanceof Integer) {\n                balance += (Integer) operation;\n            } else {\n                throw new IllegalArgumentException(\"Invalid operation type\");\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "3",
		"test_prompt": "// BelowZeroTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link BelowZero}.\n* It contains ten test cases for the {@link BelowZero#belowZero()} method.\n*/\nclass BelowZeroTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsSorted {\n\n    public static Boolean isSorted(List<Object> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size() - 1; i++) {\n            int curr = (int) lst.get(i);\n            map.put(curr, map.getOrDefault(curr, 0) + 1);\n            if (map.get(curr) > 2) {\n                return false;\n            }\n        }\n        int prev = (int) lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            int curr = (int) lst.get(i);\n            if (curr < prev) {\n                return false;\n            }\n            prev = curr;\n        }\n        return true;\n    }\n}\n",
		"id": "126",
		"test_prompt": "// IsSortedTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link IsSorted}.\n* It contains ten test cases for the {@link IsSorted#isSorted()} method.\n*/\nclass IsSortedTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Tri {\n\n    public static List<Number> tri(int n) {\n        if (n == 0) {\n            return Arrays.asList(1);\n        }\n        List<Number> my_tri = new ArrayList<>();\n        my_tri.add(1);\n        my_tri.add(3);\n        for (int i = 2; i < n + 1; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1.0);\n            } else {\n                my_tri.add(my_tri.get(i - 1).doubleValue() + my_tri.get(i - 2).doubleValue() + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n",
		"id": "130",
		"test_prompt": "// TriTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Tri}.\n* It contains ten test cases for the {@link Tri#tri()} method.\n*/\nclass TriTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass WillItFly {\n\n    public static Boolean willItFly(List<Integer> q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "72",
		"test_prompt": "// WillItFlyTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link WillItFly}.\n* It contains ten test cases for the {@link WillItFly#willItFly()} method.\n*/\nclass WillItFlyTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Bf {\n\n    public static List<Object> bf(String planet1, String planet2) {\n        List<Object> planets = new ArrayList<Object>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        List<Object> result = new ArrayList<Object>();\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if (index1 < index2) {\n                for (int i = index1 + 1; i < index2; i++) {\n                    result.add(planets.get(i));\n                }\n            } else {\n                for (int i = index2 + 1; i < index1; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "148",
		"test_prompt": "// BfTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Bf}.\n* It contains ten test cases for the {@link Bf#bf()} method.\n*/\nclass BfTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Factorize {\n\n    public static List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n                n /= i;\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "25",
		"test_prompt": "// FactorizeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Factorize}.\n* It contains ten test cases for the {@link Factorize#factorize()} method.\n*/\nclass FactorizeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortThird {\n\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>(l);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> subl = new ArrayList<Integer>();\n                for (int j = 0; j < l.size(); j++) {\n                    if (j % 3 == 0) {\n                        subl.add(l.get(j));\n                    }\n                }\n                Collections.sort(subl);\n                l2.set(i, subl.get(i / 3));\n            }\n        }\n        return l2;\n    }\n}\n",
		"id": "33",
		"test_prompt": "// SortThirdTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SortThird}.\n* It contains ten test cases for the {@link SortThird#sortThird()} method.\n*/\nclass SortThirdTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MoveOneBall {\n\n    public static Boolean moveOneBall(List<Object> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if ((int) arr.get(i) > (int) arr.get((i + 1) % arr.size())) {\n                count++;\n            }\n        }\n        if (count <= 1) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "109",
		"test_prompt": "// MoveOneBallTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link MoveOneBall}.\n* It contains ten test cases for the {@link MoveOneBall#moveOneBall()} method.\n*/\nclass MoveOneBallTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass HasCloseElements {\n\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "0",
		"test_prompt": "// HasCloseElementsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link HasCloseElements}.\n* It contains ten test cases for the {@link HasCloseElements#hasCloseElements()} method.\n*/\nclass HasCloseElementsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass VowelsCount {\n\n    public static int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        if (s.length() > 0 && (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y')) {\n            count++;\n        }\n        return count;\n    }\n}\n",
		"id": "64",
		"test_prompt": "// VowelsCountTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link VowelsCount}.\n* It contains ten test cases for the {@link VowelsCount#vowelsCount()} method.\n*/\nclass VowelsCountTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SplitWords {\n\n    public static Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                if (txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z' && (txt.charAt(i) - 'a') % 2 == 1) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n",
		"id": "125",
		"test_prompt": "// SplitWordsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SplitWords}.\n* It contains ten test cases for the {@link SplitWords#splitWords()} method.\n*/\nclass SplitWordsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsPalindrome {\n\n    public static Boolean isPalindrome(String text) {\n        int i = 0;\n        int j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n",
		"id": "48",
		"test_prompt": "// IsPalindromeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link IsPalindrome}.\n* It contains ten test cases for the {@link IsPalindrome#isPalindrome()} method.\n*/\nclass IsPalindromeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumSquares {\n\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number n : lst) {\n            sum += Math.pow(Math.ceil(n.doubleValue()), 2);\n        }\n        return sum;\n    }\n}\n",
		"id": "133",
		"test_prompt": "// SumSquaresTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SumSquares}.\n* It contains ten test cases for the {@link SumSquares#sumSquares()} method.\n*/\nclass SumSquaresTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Simplify {\n\n    public static Boolean simplify(String x, String n) {\n        String[] a = x.split(\"/\");\n        String[] b = n.split(\"/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        if (numerator % denom == 0) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "144",
		"test_prompt": "// SimplifyTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Simplify}.\n* It contains ten test cases for the {@link Simplify#simplify()} method.\n*/\nclass SimplifyTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsBored {\n\n    public static int isBored(String s) {\n        int count = 0;\n        String[] sentences = s.split(\"[.!?]\");\n        for (String sentence : sentences) {\n            String[] words = sentence.split(\" \");\n            boolean firstWord = false;\n            for (String word : words) {\n                if (word.length() == 0)\n                    continue;\n                else {\n                    firstWord = true;\n                    if (word.startsWith(\"I\")) {\n                        count++;\n                    }\n                }\n                if (firstWord)\n                    break;\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "91",
		"test_prompt": "// IsBoredTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link IsBored}.\n* It contains ten test cases for the {@link IsBored#isBored()} method.\n*/\nclass IsBoredTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass OddCount {\n\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for (int j = 0; j < lst.get(i).length(); j++) {\n                if (Integer.parseInt(lst.get(i).substring(j, j + 1)) % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n        }\n        return result;\n    }\n}\n",
		"id": "113",
		"test_prompt": "// OddCountTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link OddCount}.\n* It contains ten test cases for the {@link OddCount#oddCount()} method.\n*/\nclass OddCountTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FilterByPrefix {\n\n    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {\n        List<Object> result = new ArrayList<Object>();\n        for (Object string : strings) {\n            if (string.toString().startsWith(prefix)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "29",
		"test_prompt": "// FilterByPrefixTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link FilterByPrefix}.\n* It contains ten test cases for the {@link FilterByPrefix#filterByPrefix()} method.\n*/\nclass FilterByPrefixTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ByLength {\n\n    public static List<Object> byLength(List<Object> arr) {\n        List<Integer> sorted = new ArrayList<Integer>();\n        for (Object value : arr) {\n            if (value instanceof Integer) {\n                sorted.add((Integer) value);\n            }\n        }\n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n        List<Object> result = new ArrayList<Object>();\n        for (Integer value : sorted) {\n            if (value >= 1 && value <= 9) {\n                switch(value) {\n                    case 1:\n                        result.add(\"One\");\n                        break;\n                    case 2:\n                        result.add(\"Two\");\n                        break;\n                    case 3:\n                        result.add(\"Three\");\n                        break;\n                    case 4:\n                        result.add(\"Four\");\n                        break;\n                    case 5:\n                        result.add(\"Five\");\n                        break;\n                    case 6:\n                        result.add(\"Six\");\n                        break;\n                    case 7:\n                        result.add(\"Seven\");\n                        break;\n                    case 8:\n                        result.add(\"Eight\");\n                        break;\n                    case 9:\n                        result.add(\"Nine\");\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "105",
		"test_prompt": "// ByLengthTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link ByLength}.\n* It contains ten test cases for the {@link ByLength#byLength()} method.\n*/\nclass ByLengthTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Compare {\n\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n",
		"id": "152",
		"test_prompt": "// CompareTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Compare}.\n* It contains ten test cases for the {@link Compare#compare()} method.\n*/\nclass CompareTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Pluck {\n\n    public static List<Object> pluck(List<Object> arr) {\n        List<Object> result = new ArrayList<Object>();\n        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) instanceof Integer) {\n                int value = (Integer) arr.get(i);\n                if (value % 2 == 0 && value < min) {\n                    min = value;\n                    index = i;\n                }\n            }\n        }\n        if (index != -1) {\n            result.add(min);\n            result.add(index);\n        }\n        return result;\n    }\n}\n",
		"id": "68",
		"test_prompt": "// PluckTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Pluck}.\n* It contains ten test cases for the {@link Pluck#pluck()} method.\n*/\nclass PluckTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetRow {\n\n    public static List<Object> getRow(List<Object> lst, int x) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Object> row = (List<Object>) lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j).equals(x)) {\n                    List<Object> coordinate = new ArrayList<Object>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n\n            public int compare(Object o1, Object o2) {\n                List<Object> c1 = (List<Object>) o1;\n                List<Object> c2 = (List<Object>) o2;\n                int row1 = (Integer) c1.get(0);\n                int row2 = (Integer) c2.get(0);\n                if (row1 != row2) {\n                    return row1 - row2;\n                }\n                int col1 = (Integer) c1.get(1);\n                int col2 = (Integer) c2.get(1);\n                return col2 - col1;\n            }\n        });\n        return result;\n    }\n}\n",
		"id": "87",
		"test_prompt": "// GetRowTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link GetRow}.\n* It contains ten test cases for the {@link GetRow#compare()} method.\n*/\nclass GetRowTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Minpath {\n\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n",
		"id": "129",
		"test_prompt": "// MinpathTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Minpath}.\n* It contains ten test cases for the {@link Minpath#minpath()} method.\n*/\nclass MinpathTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GreatestCommonDivisor {\n\n    public static int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        return greatestCommonDivisor(b % a, a);\n    }\n}\n",
		"id": "13",
		"test_prompt": "// GreatestCommonDivisorTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link GreatestCommonDivisor}.\n* It contains ten test cases for the {@link GreatestCommonDivisor#greatestCommonDivisor()} method.\n*/\nclass GreatestCommonDivisorTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ChangeBase {\n\n    public static String changeBase(int x, int base) {\n        String result = \"\";\n        while (x > 0) {\n            result = (x % base) + result;\n            x = x / base;\n        }\n        return result;\n    }\n}\n",
		"id": "44",
		"test_prompt": "// ChangeBaseTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link ChangeBase}.\n* It contains ten test cases for the {@link ChangeBase#changeBase()} method.\n*/\nclass ChangeBaseTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass BelowThreshold {\n\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "52",
		"test_prompt": "// BelowThresholdTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link BelowThreshold}.\n* It contains ten test cases for the {@link BelowThreshold#belowThreshold()} method.\n*/\nclass BelowThresholdTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add {\n\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
		"id": "53",
		"test_prompt": "// AddTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Add}.\n* It contains ten test cases for the {@link Add#add()} method.\n*/\nclass AddTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea {\n\n    public static Double triangleArea(int a, int h) {\n        return (a * h) / 2.0;\n    }\n}\n",
		"id": "45",
		"test_prompt": "// TriangleAreaTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link TriangleArea}.\n* It contains ten test cases for the {@link TriangleArea#triangleArea()} method.\n*/\nclass TriangleAreaTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Longest {\n\n    public static String longest(List<Object> strings) {\n        if (strings.size() == 0) {\n            return null;\n        }\n        String longest = strings.get(0).toString();\n        for (int i = 1; i < strings.size(); i++) {\n            if (strings.get(i).toString().length() > longest.length()) {\n                longest = strings.get(i).toString();\n            }\n        }\n        return longest;\n    }\n}\n",
		"id": "12",
		"test_prompt": "// LongestTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Longest}.\n* It contains ten test cases for the {@link Longest#longest()} method.\n*/\nclass LongestTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ProdSigns {\n\n    public static Integer prodSigns(List<Object> arr) {\n        if (arr.isEmpty()) {\n            return null;\n        }\n        int prod = 1;\n        int sum = 0;\n        for (Object value : arr) {\n            if (value instanceof Integer) {\n                int num = (Integer) value;\n                if (num > 0) {\n                    prod *= 1;\n                } else if (num < 0) {\n                    prod *= -1;\n                } else {\n                    prod *= 0;\n                }\n                sum += Math.abs(num);\n            }\n        }\n        return sum * prod;\n    }\n}\n",
		"id": "128",
		"test_prompt": "// ProdSignsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link ProdSigns}.\n* It contains ten test cases for the {@link ProdSigns#prodSigns()} method.\n*/\nclass ProdSignsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Search {\n\n    public static int search(List<Integer> lst) {\n        int max = -1;\n        int[] freq = new int[11];\n        for (int i = 0; i < lst.size(); i++) {\n            freq[lst.get(i)]++;\n        }\n        for (int i = 1; i < 11; i++) {\n            if (freq[i] >= i) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n",
		"id": "69",
		"test_prompt": "// SearchTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Search}.\n* It contains ten test cases for the {@link Search#search()} method.\n*/\nclass SearchTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AntiShuffle {\n\n    public static String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            words[i] = sortString(words[i]);\n        }\n        return String.join(\" \", words);\n    }\n\n    private static String sortString(String s) {\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n}\n",
		"id": "86",
		"test_prompt": "// AntiShuffleTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link AntiShuffle}.\n* It contains ten test cases for the {@link AntiShuffle#antiShuffle()} method.\n*/\nclass AntiShuffleTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StrongestExtension {\n\n    public static String strongestExtension(String className, List<String> extensions) {\n        int max = Integer.MIN_VALUE;\n        String result = \"\";\n        for (int i = 0; i < extensions.size(); i++) {\n            int cap = 0;\n            int sm = 0;\n            for (int j = 0; j < extensions.get(i).length(); j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j))) {\n                    cap++;\n                } else if (Character.isLowerCase(extensions.get(i).charAt(j))) {\n                    sm++;\n                }\n            }\n            if (cap - sm > max) {\n                max = cap - sm;\n                result = className + \".\" + extensions.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "153",
		"test_prompt": "// StrongestExtensionTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link StrongestExtension}.\n* It contains ten test cases for the {@link StrongestExtension#strongestExtension()} method.\n*/\nclass StrongestExtensionTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass UniqueDigits {\n\n    public static List<Object> uniqueDigits(List<Integer> x) {\n        List<Object> result = new ArrayList<Object>();\n        for (int value : x) {\n            boolean hasEven = false;\n            int oldValue = value;\n            while (value > 0) {\n                if (value % 2 == 0) {\n                    hasEven = true;\n                    break;\n                }\n                value /= 10;\n            }\n            if (!hasEven) {\n                result.add(oldValue);\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n\n            public int compare(Object a, Object b) {\n                return (Integer) a - (Integer) b;\n            }\n        });\n        return result;\n    }\n}\n",
		"id": "104",
		"test_prompt": "// UniqueDigitsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link UniqueDigits}.\n* It contains ten test cases for the {@link UniqueDigits#compare()} method.\n*/\nclass UniqueDigitsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Concatenate {\n\n    public static String concatenate(List<Object> strings) {\n        String result = \"\";\n        for (Object string : strings) {\n            result += string.toString();\n        }\n        return result;\n    }\n}\n",
		"id": "28",
		"test_prompt": "// ConcatenateTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Concatenate}.\n* It contains ten test cases for the {@link Concatenate#concatenate()} method.\n*/\nclass ConcatenateTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ReverseDelete {\n\n    public static List<Object> reverseDelete(String s, String c) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                result += s.charAt(i);\n            }\n        }\n        boolean isPalindrome = true;\n        for (int i = 0; i < result.length() / 2; i++) {\n            if (result.charAt(i) != result.charAt(result.length() - i - 1)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        return Arrays.asList(result, isPalindrome);\n    }\n}\n",
		"id": "112",
		"test_prompt": "// ReverseDeleteTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link ReverseDelete}.\n* It contains ten test cases for the {@link ReverseDelete#reverseDelete()} method.\n*/\nclass ReverseDeleteTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass NextSmallest {\n\n    public static Integer nextSmallest(List<Object> lst) {\n        if (lst.size() <= 1) {\n            return null;\n        }\n        Integer smallest = (Integer) lst.get(0);\n        Integer nextSmallest = null;\n        for (int i = 1; i < lst.size(); i++) {\n            Integer current = (Integer) lst.get(i);\n            if (current < smallest) {\n                nextSmallest = smallest;\n                smallest = current;\n            } else if (nextSmallest == null || current < nextSmallest) {\n                if (current != smallest)\n                    nextSmallest = current;\n            }\n        }\n        return nextSmallest;\n    }\n}\n",
		"id": "90",
		"test_prompt": "// NextSmallestTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link NextSmallest}.\n* It contains ten test cases for the {@link NextSmallest#nextSmallest()} method.\n*/\nclass NextSmallestTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass OrderByPoints {\n\n    public static List<Object> orderByPoints(List<Object> nums) {\n        Collections.sort(nums, new Comparator<Object>() {\n\n            int digitsum(int n) {\n                boolean neg = false;\n                if (n < 0) {\n                    neg = true;\n                    n = -n;\n                }\n                int sum = 0;\n                while (n > 0) {\n                    if (n / 10 == 0 && neg)\n                        sum -= n % 10;\n                    else\n                        sum += n % 10;\n                    n = n / 10;\n                }\n                return sum;\n            }\n\n            public int compare(Object o1, Object o2) {\n                return digitsum((int) o1) - digitsum((int) o2);\n            }\n        });\n        return nums;\n    }\n}\n",
		"id": "145",
		"test_prompt": "// OrderByPointsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link OrderByPoints}.\n* It contains ten test cases for the {@link OrderByPoints#digitsum()} method.\n*/\nclass OrderByPointsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsNested {\n\n    public static Boolean isNested(String string) {\n        ArrayList<Integer> opening_bracket_index = new ArrayList<Integer>();\n        ArrayList<Integer> closing_bracket_index = new ArrayList<Integer>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int cnt = 0;\n        int i = 0;\n        int l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
		"id": "132",
		"test_prompt": "// IsNestedTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link IsNested}.\n* It contains ten test cases for the {@link IsNested#isNested()} method.\n*/\nclass IsNestedTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Modp {\n\n    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * 2) % p;\n        }\n        return result;\n    }\n}\n",
		"id": "49",
		"test_prompt": "// ModpTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Modp}.\n* It contains ten test cases for the {@link Modp#modp()} method.\n*/\nclass ModpTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ValidDate {\n\n    public static Boolean validDate(String date) {\n        if (date.length() != 10) {\n            return false;\n        }\n        String[] dateArr = date.split(\"-\");\n        if (dateArr.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "124",
		"test_prompt": "// ValidDateTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link ValidDate}.\n* It contains ten test cases for the {@link ValidDate#validDate()} method.\n*/\nclass ValidDateTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SeparateParenGroups {\n\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> result = new ArrayList<String>();\n        int count = 0;\n        StringBuilder curString = new StringBuilder();\n        for (int i = 0; i < parenString.length(); i++) {\n            if (parenString.charAt(i) == '(') {\n                count++;\n                curString.append('(');\n            } else if (parenString.charAt(i) == ')') {\n                count--;\n                curString.append(')');\n                if (count == 0) {\n                    result.add(curString.toString());\n                    curString = new StringBuilder();\n                }\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "1",
		"test_prompt": "// SeparateParenGroupsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SeparateParenGroups}.\n* It contains ten test cases for the {@link SeparateParenGroups#separateParenGroups()} method.\n*/\nclass SeparateParenGroupsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CircularShift {\n\n    public static String circularShift(int x, int shift) {\n        String result = \"\";\n        String xString = Integer.toString(x);\n        int xLength = xString.length();\n        if (shift > xLength) {\n            for (int i = xLength - 1; i >= 0; i--) {\n                result += xString.charAt(i);\n            }\n        } else {\n            for (int i = xLength - shift; i < xLength; i++) {\n                result += xString.charAt(i);\n            }\n            for (int i = 0; i < xLength - shift; i++) {\n                result += xString.charAt(i);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "65",
		"test_prompt": "// CircularShiftTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CircularShift}.\n* It contains ten test cases for the {@link CircularShift#circularShift()} method.\n*/\nclass CircularShiftTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CountNums {\n\n    public static int countNums(List<Object> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            int num = (int) arr.get(i);\n            boolean isNegative = num < 0;\n            if (isNegative) {\n                num = -num;\n            }\n            while (num != 0) {\n                if (isNegative && num / 10 == 0) {\n                    sum -= num % 10;\n                } else {\n                    sum += num % 10;\n                }\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "108",
		"test_prompt": "// CountNumsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CountNums}.\n* It contains ten test cases for the {@link CountNums#countNums()} method.\n*/\nclass CountNumsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestDivisor {\n\n    public static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}\n",
		"id": "24",
		"test_prompt": "// LargestDivisorTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link LargestDivisor}.\n* It contains ten test cases for the {@link LargestDivisor#largestDivisor()} method.\n*/\nclass LargestDivisorTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortedListSum {\n\n    public static List<Object> sortedListSum(List<String> lst) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).length() % 2 == 0) {\n                result.add(lst.get(i));\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n\n            @Override\n            public int compare(Object o1, Object o2) {\n                if (o1.toString().length() == o2.toString().length()) {\n                    return o1.toString().compareTo(o2.toString());\n                } else {\n                    return o1.toString().length() - o2.toString().length();\n                }\n            }\n        });\n        return result;\n    }\n}\n",
		"id": "149",
		"test_prompt": "// SortedListSumTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SortedListSum}.\n* It contains ten test cases for the {@link SortedListSum#compare()} method.\n*/\nclass SortedListSumTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SmallestChange {\n\n    public static int smallestChange(List<Integer> arr) {\n        int result = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n            if (arr.get(i) != arr.get(j)) {\n                result++;\n            }\n            i++;\n            j--;\n        }\n        return result;\n    }\n}\n",
		"id": "73",
		"test_prompt": "// SmallestChangeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SmallestChange}.\n* It contains ten test cases for the {@link SmallestChange#smallestChange()} method.\n*/\nclass SmallestChangeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumSquares1 {\n\n    public static int sumSquares(List<Object> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add((int) lst.get(i) * (int) lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                result.add((int) lst.get(i) * (int) lst.get(i) * (int) lst.get(i));\n            } else {\n                result.add((int) lst.get(i));\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < result.size(); i++) {\n            sum += result.get(i);\n        }\n        return sum;\n    }\n}\n",
		"id": "142",
		"test_prompt": "// SumSquares1Test.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SumSquares1}.\n* It contains ten test cases for the {@link SumSquares1#sumSquares()} method.\n*/\nclass SumSquares1Test {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass HexKey {\n\n    public static int hexKey(Object num) {\n        int result = 0;\n        String hex = num.toString();\n        for (int i = 0; i < hex.length(); i++) {\n            char c = hex.charAt(i);\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "78",
		"test_prompt": "// HexKeyTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link HexKey}.\n* It contains ten test cases for the {@link HexKey#hexKey()} method.\n*/\nclass HexKeyTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Multiply {\n\n    public static int multiply(int a, int b) {\n        if (a < 0)\n            a = -a;\n        if (b < 0)\n            b = -b;\n        return (a % 10) * (b % 10);\n    }\n}\n",
		"id": "97",
		"test_prompt": "// MultiplyTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Multiply}.\n* It contains ten test cases for the {@link Multiply#multiply()} method.\n*/\nclass MultiplyTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MaxFill {\n\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (List<Integer> arr : grid) {\n            int sumArr = 0;\n            for (Integer i : arr) {\n                sumArr += i;\n            }\n            sum += Math.ceil((double) sumArr / capacity);\n        }\n        return sum;\n    }\n}\n",
		"id": "115",
		"test_prompt": "// MaxFillTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link MaxFill}.\n* It contains ten test cases for the {@link MaxFill#maxFill()} method.\n*/\nclass MaxFillTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RoundedAvg {\n\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        double avg = (sum * 1.0) / (m - n + 1);\n        int roundedAvg = (int) Math.round(avg);\n        return \"0b\" + Integer.toBinaryString(roundedAvg);\n    }\n}\n",
		"id": "103",
		"test_prompt": "// RoundedAvgTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link RoundedAvg}.\n* It contains ten test cases for the {@link RoundedAvg#roundedAvg()} method.\n*/\nclass RoundedAvgTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass PrimeFib {\n\n    public static int primeFib(int n) {\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        int count = 0;\n        while (count < n) {\n            c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c)) {\n                count++;\n            }\n        }\n        return c;\n    }\n}\n",
		"id": "39",
		"test_prompt": "// PrimeFibTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link PrimeFib}.\n* It contains ten test cases for the {@link PrimeFib#primeFib()} method.\n*/\nclass PrimeFibTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CycpatternCheck {\n\n    public static Boolean cycpatternCheck(String a, String b) {\n        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i < a.length() - l + 1; i++) {\n            for (int j = 0; j < l + 1; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "154",
		"test_prompt": "// CycpatternCheckTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CycpatternCheck}.\n* It contains ten test cases for the {@link CycpatternCheck#cycpatternCheck()} method.\n*/\nclass CycpatternCheckTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass NumericalLetterGrade {\n\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> result = new ArrayList<String>();\n        for (Number grade : grades) {\n            if (grade.doubleValue() >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade.doubleValue() > 3.7) {\n                result.add(\"A\");\n            } else if (grade.doubleValue() > 3.3) {\n                result.add(\"A-\");\n            } else if (grade.doubleValue() > 3.0) {\n                result.add(\"B+\");\n            } else if (grade.doubleValue() > 2.7) {\n                result.add(\"B\");\n            } else if (grade.doubleValue() > 2.3) {\n                result.add(\"B-\");\n            } else if (grade.doubleValue() > 2.0) {\n                result.add(\"C+\");\n            } else if (grade.doubleValue() > 1.7) {\n                result.add(\"C\");\n            } else if (grade.doubleValue() > 1.3) {\n                result.add(\"C-\");\n            } else if (grade.doubleValue() > 1.0) {\n                result.add(\"D+\");\n            } else if (grade.doubleValue() > 0.7) {\n                result.add(\"D\");\n            } else if (grade.doubleValue() > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "81",
		"test_prompt": "// NumericalLetterGradeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link NumericalLetterGrade}.\n* It contains ten test cases for the {@link NumericalLetterGrade#numericalLetterGrade()} method.\n*/\nclass NumericalLetterGradeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StringSequence {\n\n    public static String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result.trim();\n    }\n}\n",
		"id": "15",
		"test_prompt": "// StringSequenceTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link StringSequence}.\n* It contains ten test cases for the {@link StringSequence#stringSequence()} method.\n*/\nclass StringSequenceTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IncrList {\n\n    public static List<Object> incrList(List<Object> l) {\n        List<Object> result = new ArrayList<Object>();\n        for (Object value : l) {\n            if (value instanceof Integer) {\n                int i = (Integer) value;\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "42",
		"test_prompt": "// IncrListTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link IncrList}.\n* It contains ten test cases for the {@link IncrList#incrList()} method.\n*/\nclass IncrListTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SameChars {\n\n    public static Boolean sameChars(String s0, String s1) {\n        int[] count0 = new int[26];\n        int[] count1 = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            count0[s0.charAt(i) - 'a'] = 1;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            count1[s1.charAt(i) - 'a'] = 1;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count0[i] != count1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "54",
		"test_prompt": "// SameCharsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SameChars}.\n* It contains ten test cases for the {@link SameChars#sameChars()} method.\n*/\nclass SameCharsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SpecialFactorial {\n\n    public static long specialFactorial(int n) {\n        long res = 1;\n        for (int i = 1; i <= n; i++) {\n            res *= factorial(i);\n        }\n        return res;\n    }\n}\n",
		"id": "139",
		"test_prompt": "// SpecialFactorialTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SpecialFactorial}.\n* It contains ten test cases for the {@link SpecialFactorial#specialFactorial()} method.\n*/\nclass SpecialFactorialTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TotalMatch {\n\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n        for (Object value : lst1) {\n            if (value instanceof String) {\n                sum1 += ((String) value).length();\n            }\n        }\n        for (Object value : lst2) {\n            if (value instanceof String) {\n                sum2 += ((String) value).length();\n            }\n        }\n        if (sum1 <= sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n",
		"id": "74",
		"test_prompt": "// TotalMatchTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link TotalMatch}.\n* It contains ten test cases for the {@link TotalMatch#totalMatch()} method.\n*/\nclass TotalMatchTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Strlen {\n\n    public static int strlen(String string) {\n        return string.length();\n    }\n}\n",
		"id": "23",
		"test_prompt": "// StrlenTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Strlen}.\n* It contains ten test cases for the {@link Strlen#strlen()} method.\n*/\nclass StrlenTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MatchParens {\n\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        String s1s2 = s1 + s2;\n        String s2s1 = s2 + s1;\n        int count = 0;\n        boolean flag = true;\n        for (int i = 0; i < s1s2.length(); i++) {\n            if (s1s2.charAt(i) == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                flag = false;\n            }\n        }\n        if (flag && count == 0) {\n            return \"Yes\";\n        }\n        count = 0;\n        for (int i = 0; i < s2s1.length(); i++) {\n            if (s2s1.charAt(i) == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return \"No\";\n            }\n        }\n        if (count == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n",
		"id": "119",
		"test_prompt": "// MatchParensTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link MatchParens}.\n* It contains ten test cases for the {@link MatchParens#matchParens()} method.\n*/\nclass MatchParensTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MaxElement {\n\n    public static int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n",
		"id": "35",
		"test_prompt": "// MaxElementTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link MaxElement}.\n* It contains ten test cases for the {@link MaxElement#maxElement()} method.\n*/\nclass MaxElementTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Derivative {\n\n    public static List<Object> derivative(List<Integer> xs) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
		"id": "62",
		"test_prompt": "// DerivativeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Derivative}.\n* It contains ten test cases for the {@link Derivative#derivative()} method.\n*/\nclass DerivativeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ParseNestedParens {\n\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        int maximum_depth = 0;\n        for (int i = 0; i < parenString.length(); i++) {\n            if (parenString.charAt(i) == '(') {\n                count++;\n                maximum_depth = Math.max(maximum_depth, count);\n            } else if (parenString.charAt(i) == ')') {\n                count--;\n                if (count == 0) {\n                    result.add(maximum_depth);\n                    maximum_depth = 0;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "6",
		"test_prompt": "// ParseNestedParensTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link ParseNestedParens}.\n* It contains ten test cases for the {@link ParseNestedParens#parseNestedParens()} method.\n*/\nclass ParseNestedParensTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FindMax {\n\n    public static String findMax(List<String> words) {\n        String max = \"\";\n        for (int i = 0; i < words.size(); i++) {\n            if (words.get(i).length() >= max.length()) {\n                if (words.get(i).length() == max.length() && words.get(i).compareTo(max) >= 0)\n                    continue;\n                max = words.get(i);\n            }\n        }\n        return max;\n    }\n}\n",
		"id": "158",
		"test_prompt": "// FindMaxTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link FindMax}.\n* It contains ten test cases for the {@link FindMax#findMax()} method.\n*/\nclass FindMaxTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortNumbers {\n\n    public static String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        int[] numbersInt = new int[numbersArray.length];\n        for (int i = 0; i < numbersArray.length; i++) {\n            if (numbersArray[i].equals(\"zero\")) {\n                numbersInt[i] = 0;\n            } else if (numbersArray[i].equals(\"one\")) {\n                numbersInt[i] = 1;\n            } else if (numbersArray[i].equals(\"two\")) {\n                numbersInt[i] = 2;\n            } else if (numbersArray[i].equals(\"three\")) {\n                numbersInt[i] = 3;\n            } else if (numbersArray[i].equals(\"four\")) {\n                numbersInt[i] = 4;\n            } else if (numbersArray[i].equals(\"five\")) {\n                numbersInt[i] = 5;\n            } else if (numbersArray[i].equals(\"six\")) {\n                numbersInt[i] = 6;\n            } else if (numbersArray[i].equals(\"seven\")) {\n                numbersInt[i] = 7;\n            } else if (numbersArray[i].equals(\"eight\")) {\n                numbersInt[i] = 8;\n            } else if (numbersArray[i].equals(\"nine\")) {\n                numbersInt[i] = 9;\n            } else {\n                numbersInt[i] = -1;\n            }\n        }\n        Arrays.sort(numbersInt);\n        String result = \"\";\n        for (int i = 0; i < numbersInt.length; i++) {\n            if (numbersInt[i] == 0) {\n                result += \"zero \";\n            } else if (numbersInt[i] == 1) {\n                result += \"one \";\n            } else if (numbersInt[i] == 2) {\n                result += \"two \";\n            } else if (numbersInt[i] == 3) {\n                result += \"three \";\n            } else if (numbersInt[i] == 4) {\n                result += \"four \";\n            } else if (numbersInt[i] == 5) {\n                result += \"five \";\n            } else if (numbersInt[i] == 6) {\n                result += \"six \";\n            } else if (numbersInt[i] == 7) {\n                result += \"seven \";\n            } else if (numbersInt[i] == 8) {\n                result += \"eight \";\n            } else if (numbersInt[i] == 9) {\n                result += \"nine \";\n            }\n        }\n        return result.trim();\n    }\n}\n",
		"id": "19",
		"test_prompt": "// SortNumbersTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link SortNumbers}.\n* It contains ten test cases for the {@link SortNumbers#sortNumbers()} method.\n*/\nclass SortNumbersTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetOddCollatz {\n\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                result.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
		"id": "123",
		"test_prompt": "// GetOddCollatzTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link GetOddCollatz}.\n* It contains ten test cases for the {@link GetOddCollatz#getOddCollatz()} method.\n*/\nclass GetOddCollatzTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Common {\n\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (Integer value : l1) {\n            set.add(value);\n        }\n        List<Object> result = new ArrayList<Object>();\n        for (Object value : l2) {\n            if (value instanceof Integer) {\n                int i = (Integer) value;\n                if (set.contains(i) && !result.contains(i)) {\n                    result.add(i);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n\n            public int compare(Object o1, Object o2) {\n                if (o1 instanceof Integer && o2 instanceof Integer) {\n                    return (Integer) o1 - (Integer) o2;\n                }\n                return 0;\n            }\n        });\n        return result;\n    }\n}\n",
		"id": "58",
		"test_prompt": "// CommonTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Common}.\n* It contains ten test cases for the {@link Common#compare()} method.\n*/\nclass CommonTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nclass StringToMd5 {\n\n    public static String stringToMd5(String text) {\n        if (text.equals(\"\")) {\n            return null;\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            BigInteger number = new BigInteger(1, messageDigest);\n            String hashText = number.toString(16);\n            while (hashText.length() < 32) {\n                hashText = \"0\" + hashText;\n            }\n            return hashText;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n",
		"id": "162",
		"test_prompt": "// StringToMd5Test.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link StringToMd5}.\n* It contains ten test cases for the {@link StringToMd5#stringToMd5()} method.\n*/\nclass StringToMd5Test {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CanArrange {\n\n    public static int canArrange(List<Object> arr) {\n        int max = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) instanceof Integer) {\n                if (i > 0 && (int) arr.get(i) < (int) arr.get(i - 1)) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}\n",
		"id": "135",
		"test_prompt": "// CanArrangeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CanArrange}.\n* It contains ten test cases for the {@link CanArrange#canArrange()} method.\n*/\nclass CanArrangeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CheckIfLastCharIsALetter {\n\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            if (txt.length() == 1) {\n                return true;\n            }\n            char secondLastChar = txt.charAt(txt.length() - 2);\n            if (Character.isLetter(secondLastChar)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "134",
		"test_prompt": "// CheckIfLastCharIsALetterTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CheckIfLastCharIsALetter}.\n* It contains ten test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter()} method.\n*/\nclass CheckIfLastCharIsALetterTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GenerateIntegers {\n\n    public static List<Object> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        List<Object> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "163",
		"test_prompt": "// GenerateIntegersTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link GenerateIntegers}.\n* It contains ten test cases for the {@link GenerateIntegers#generateIntegers()} method.\n*/\nclass GenerateIntegersTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestPrimeFactor {\n\n    public static int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n                n /= i;\n                i--;\n            }\n        }\n        return max;\n    }\n}\n",
		"id": "59",
		"test_prompt": "// LargestPrimeFactorTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link LargestPrimeFactor}.\n* It contains ten test cases for the {@link LargestPrimeFactor#largestPrimeFactor()} method.\n*/\nclass LargestPrimeFactorTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AddElements {\n\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
		"id": "122",
		"test_prompt": "// AddElementsTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link AddElements}.\n* It contains ten test cases for the {@link AddElements#addElements()} method.\n*/\nclass AddElementsTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass HowManyTimes {\n\n    public static int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        return count;\n    }\n}\n",
		"id": "18",
		"test_prompt": "// HowManyTimesTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link HowManyTimes}.\n* It contains ten test cases for the {@link HowManyTimes#howManyTimes()} method.\n*/\nclass HowManyTimesTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Eat {\n\n    public static List<Integer> eat(int number, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}\n",
		"id": "159",
		"test_prompt": "// EatTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Eat}.\n* It contains ten test cases for the {@link Eat#eat()} method.\n*/\nclass EatTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Fibfib {\n\n    public static int fibfib(int n) {\n        if (n < 2) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 0;\n        for (int i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return d;\n    }\n}\n",
		"id": "63",
		"test_prompt": "// FibfibTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Fibfib}.\n* It contains ten test cases for the {@link Fibfib#fibfib()} method.\n*/\nclass FibfibTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FilterBySubstring {\n\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).toString().contains(substring)) {\n                result.add(strings.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "7",
		"test_prompt": "// FilterBySubstringTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link FilterBySubstring}.\n* It contains ten test cases for the {@link FilterBySubstring#filterBySubstring()} method.\n*/\nclass FilterBySubstringTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Unique {\n\n    public static List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i : l) {\n            set.add(i);\n        }\n        List<Integer> result = new ArrayList<Integer>(set);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
		"id": "34",
		"test_prompt": "// UniqueTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Unique}.\n* It contains ten test cases for the {@link Unique#unique()} method.\n*/\nclass UniqueTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetClosestVowel {\n\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        int i = word.length() - 2;\n        while (i > 0) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                if (vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                    return word.substring(i, i + 1);\n                }\n            }\n            i--;\n        }\n        return \"\";\n    }\n}\n",
		"id": "118",
		"test_prompt": "// GetClosestVowelTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link GetClosestVowel}.\n* It contains ten test cases for the {@link GetClosestVowel#getClosestVowel()} method.\n*/\nclass GetClosestVowelTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FilterIntegers {\n\n    public static List<Object> filterIntegers(List<Object> values) {\n        List<Object> result = new ArrayList<Object>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add(value);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "22",
		"test_prompt": "// FilterIntegersTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link FilterIntegers}.\n* It contains ten test cases for the {@link FilterIntegers#filterIntegers()} method.\n*/\nclass FilterIntegersTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsMultiplyPrime {\n\n    public static Boolean isMultiplyPrime(int a) {\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                count++;\n                a /= i;\n                i--;\n            }\n        }\n        return count == 3;\n    }\n}\n",
		"id": "75",
		"test_prompt": "// IsMultiplyPrimeTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link IsMultiplyPrime}.\n* It contains ten test cases for the {@link IsMultiplyPrime#isMultiplyPrime()} method.\n*/\nclass IsMultiplyPrimeTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsEqualToSumEven {\n\n    public static Boolean isEqualToSumEven(int n) {\n        if (n < 8) {\n            return false;\n        }\n        return n % 2 == 0;\n    }\n}\n",
		"id": "138",
		"test_prompt": "// IsEqualToSumEvenTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link IsEqualToSumEven}.\n* It contains ten test cases for the {@link IsEqualToSumEven#isEqualToSumEven()} method.\n*/\nclass IsEqualToSumEvenTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Fib {\n\n    public static int fib(int n) {\n        int a = 0;\n        int b = 1;\n        int c = 1;\n        for (int i = 0; i < n - 1; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}\n",
		"id": "55",
		"test_prompt": "// FibTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Fib}.\n* It contains ten test cases for the {@link Fib#fib()} method.\n*/\nclass FibTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass PairsSumToZero {\n\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "43",
		"test_prompt": "// PairsSumToZeroTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link PairsSumToZero}.\n* It contains ten test cases for the {@link PairsSumToZero#pairsSumToZero()} method.\n*/\nclass PairsSumToZeroTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AllPrefixes {\n\n    public static List<Object> allPrefixes(String string) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < string.length(); i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;\n    }\n}\n",
		"id": "14",
		"test_prompt": "// AllPrefixesTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link AllPrefixes}.\n* It contains ten test cases for the {@link AllPrefixes#allPrefixes()} method.\n*/\nclass AllPrefixesTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsHappy {\n\n    public static Boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "80",
		"test_prompt": "// IsHappyTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link IsHappy}.\n* It contains ten test cases for the {@link IsHappy#isHappy()} method.\n*/\nclass IsHappyTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass EvenOddCount {\n\n    public static List<Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n        if (num == 0) {\n            even++;\n        }\n        while (num != 0) {\n            if (num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        return Arrays.asList(even, odd);\n    }\n}\n",
		"id": "155",
		"test_prompt": "// EvenOddCountTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link EvenOddCount}.\n* It contains ten test cases for the {@link EvenOddCount#evenOddCount()} method.\n*/\nclass EvenOddCountTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ChooseNum {\n\n    public static int chooseNum(int x, int y) {\n        int max = -1;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0 && i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n",
		"id": "102",
		"test_prompt": "// ChooseNumTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link ChooseNum}.\n* It contains ten test cases for the {@link ChooseNum#chooseNum()} method.\n*/\nclass ChooseNumTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Minsubarraysum {\n\n    public static long minsubarraysum(List<Object> nums) {\n        long s = 0;\n        long max_sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            long num = ((Number) nums.get(i)).longValue();\n            s -= num;\n            if (s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if (max_sum == 0) {\n            max_sum = -((Number) nums.get(0)).longValue();\n            for (int i = 0; i < nums.size(); i++) {\n                max_sum = Math.max(-((Number) nums.get(i)).longValue(), max_sum);\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n}\n",
		"id": "114",
		"test_prompt": "// MinsubarraysumTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link Minsubarraysum}.\n* It contains ten test cases for the {@link Minsubarraysum#minsubarraysum()} method.\n*/\nclass MinsubarraysumTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass DecimalToBinary {\n\n    public static String decimalToBinary(int decimal) {\n        String binary = \"\";\n        if (decimal == 0) {\n            return \"db0db\";\n        }\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}\n",
		"id": "79",
		"test_prompt": "// DecimalToBinaryTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link DecimalToBinary}.\n* It contains ten test cases for the {@link DecimalToBinary#decimalToBinary()} method.\n*/\nclass DecimalToBinaryTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CountUpTo {\n\n    public static List<Object> countUpTo(int n) {\n        List<Object> result = new ArrayList<Object>();\n        int i = 2;\n        while (i < n) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n}\n",
		"id": "96",
		"test_prompt": "// CountUpToTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link CountUpTo}.\n* It contains ten test cases for the {@link CountUpTo#countUpTo()} method.\n*/\nclass CountUpToTest {"
	},
	{
		"original_code": "package scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass WordsInSentence {\n\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            if (isPrime(words[i].length())) {\n                result += words[i] + \" \";\n            }\n        }\n        return result.trim();\n    }\n}\n",
		"id": "143",
		"test_prompt": "// WordsInSentenceTest.java\npackage scenario1;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n/**\n* Unit tests of {@link WordsInSentence}.\n* It contains ten test cases for the {@link WordsInSentence#wordsInSentence()} method.\n*/\nclass WordsInSentenceTest {"
	}
]