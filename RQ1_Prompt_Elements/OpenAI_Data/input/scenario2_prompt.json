[
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CorrectBracketing {\n\n    \/**\n     * brackets is a string of \"<\" and \">\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\/\n    public static Boolean correctBracketing(String brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;\n    }\n}\n",
        "id": "56",
        "test_prompt": "\/\/ CorrectBracketingTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CorrectBracketing}.\n * It contains ten test cases for the {@link scenario2.CorrectBracketing#correctBracketing()} method.\n *\/\nclass CorrectBracketingTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriplesSumToZero {\n\n    \/**\n     * * triples_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n     *\/\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
        "id": "40",
        "test_prompt": "\/\/ TriplesSumToZeroTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link TriplesSumToZero}.\n * It contains ten test cases for the {@link scenario2.TriplesSumToZero#triplesSumToZero()} method.\n *\/\nclass TriplesSumToZeroTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ParseMusic {\n\n    \/**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats does each\n     * not last.\n     *\n     * Here is a legend:\n     * 'o' - whole note, lasts four beats\n     * 'o|' - half note, lasts two beats\n     * '.|' - quater note, lasts one beat\n     *\/\n    public static List<Object> parseMusic(String musicString) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < musicString.length(); i++) {\n            if (musicString.charAt(i) == 'o') {\n                if (i < musicString.length() - 1 && musicString.charAt(i + 1) == '|') {\n                    result.add(2);\n                    i++;\n                } else {\n                    result.add(4);\n                }\n            } else if (musicString.charAt(i) == '.') {\n                result.add(1);\n                i++;\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "17",
        "test_prompt": "\/\/ ParseMusicTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link ParseMusic}.\n * It contains ten test cases for the {@link scenario2.ParseMusic#parseMusic()} method.\n *\/\nclass ParseMusicTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StartsOneEnds {\n\n    \/**\n     * * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     *\/\n    public static int startsOneEnds(int n) {\n        int count = 0;\n        int start = 1;\n        int end = 1;\n        for (int i = 1; i < n; i++) {\n            start *= 10;\n            end *= 10;\n        }\n        for (int i = start; i < end * 10; i++) {\n            if (i % 10 == 1 || i \/ start == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
        "id": "83",
        "test_prompt": "\/\/ StartsOneEndsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link StartsOneEnds}.\n * It contains ten test cases for the {@link scenario2.StartsOneEnds#startsOneEnds()} method.\n *\/\nclass StartsOneEndsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumProduct {\n\n    \/**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     *\/\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        Integer sum = 0;\n        Integer product = 1;\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                sum += (Integer) number;\n                product *= (Integer) number;\n            } else {\n                throw new IllegalArgumentException(\"Invalid number type\");\n            }\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n}\n",
        "id": "8",
        "test_prompt": "\/\/ SumProductTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SumProduct}.\n * It contains ten test cases for the {@link scenario2.SumProduct#sumProduct()} method.\n *\/\nclass SumProductTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IntToMiniRoman {\n\n    \/**\n     * * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n     *\/\n    public static String intToMiniRoman(int number) {\n        String result = \"\";\n        int[] values = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        String[] symbols = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                result += symbols[i];\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "156",
        "test_prompt": "\/\/ IntToMiniRomanTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link IntToMiniRoman}.\n * It contains ten test cases for the {@link scenario2.IntToMiniRoman#intToMiniRoman()} method.\n *\/\nclass IntToMiniRomanTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass WordsString {\n\n    \/**\n     * * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     *\/\n    public static List<Object> wordsString(String s) {\n        if (s.length() == 0)\n            return new ArrayList<Object>();\n        String[] words = s.split(\"[, ]+\");\n        return Arrays.asList(words);\n    }\n}\n",
        "id": "101",
        "test_prompt": "\/\/ WordsStringTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link WordsString}.\n * It contains ten test cases for the {@link scenario2.WordsString#wordsString()} method.\n *\/\nclass WordsStringTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SelectWords {\n\n    \/**\n     * Given a string s and a natural number n, you have been tasked to implement\n     * a function that returns a list of all words from string s that contain exactly\n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     *\/\n    public static List<Object> selectWords(String s, int n) {\n        List<Object> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonants = 0;\n            for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "117",
        "test_prompt": "\/\/ SelectWordsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SelectWords}.\n * It contains ten test cases for the {@link scenario2.SelectWords#selectWords()} method.\n *\/\nclass SelectWordsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CheckDictCase {\n\n    \/**\n     * * Given a dictionary, return True if all keys are strings in lower\n     * case or all keys are strings in upper case, else return False.\n     * The function should return False is the given dictionary is empty.\n     *\/\n    public static Boolean checkDictCase(Object dict) {\n        if (dict instanceof Map) {\n            Map m = (Map) dict;\n            if (m.size() == 0) {\n                return false;\n            }\n            boolean allLower = true;\n            boolean allUpper = true;\n            for (Object k : m.keySet()) {\n                if (k instanceof String) {\n                    String s = (String) k;\n                    if (!s.equals(s.toLowerCase())) {\n                        allLower = false;\n                    }\n                    if (!s.equals(s.toUpperCase())) {\n                        allUpper = false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n            return allLower || allUpper;\n        }\n        return false;\n    }\n}\n",
        "id": "95",
        "test_prompt": "\/\/ CheckDictCaseTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CheckDictCase}.\n * It contains ten test cases for the {@link scenario2.CheckDictCase#checkDictCase()} method.\n *\/\nclass CheckDictCaseTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FixSpaces {\n\n    \/**\n     * * Given a string text, replace all spaces in it with underscores,\n     * and if a string has more than 2 consecutive spaces,\n     * then replace all consecutive spaces with -\n     *\/\n    public static String fixSpaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    new_text += \"-\" + text.charAt(i);\n                } else if (end - start > 0) {\n                    new_text += \"_\".repeat(end - start) + text.charAt(i);\n                } else {\n                    new_text += text.charAt(i);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n        if (end - start > 2) {\n            new_text += \"-\";\n        } else if (end - start > 0) {\n            new_text += \"_\";\n        }\n        return new_text;\n    }\n}\n",
        "id": "140",
        "test_prompt": "\/\/ FixSpacesTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link FixSpaces}.\n * It contains ten test cases for the {@link scenario2.FixSpaces#fixSpaces()} method.\n *\/\nclass FixSpacesTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CompareOne {\n\n    \/**\n     * * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return null if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n     *\/\n    public static Object compareOne(Object a, Object b) {\n        Object temp_a = a;\n        Object temp_b = b;\n        if (temp_a instanceof String) {\n            temp_a = ((String) temp_a).replace(',', '.');\n        }\n        if (temp_b instanceof String) {\n            temp_b = ((String) temp_b).replace(',', '.');\n        }\n        if (Float.parseFloat(temp_a.toString()) == Float.parseFloat(temp_b.toString())) {\n            return null;\n        }\n        return Float.parseFloat(temp_a.toString()) > Float.parseFloat(temp_b.toString()) ? a : b;\n    }\n}\n",
        "id": "137",
        "test_prompt": "\/\/ CompareOneTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CompareOne}.\n * It contains ten test cases for the {@link scenario2.CompareOne#compareOne()} method.\n *\/\nclass CompareOneTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Solution {\n\n    \/**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     *\/\n    public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
        "id": "121",
        "test_prompt": "\/\/ SolutionTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Solution}.\n * It contains ten test cases for the {@link scenario2.Solution#solution()} method.\n *\/\nclass SolutionTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MeanAbsoluteDeviation {\n\n    \/**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     *\/\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n        Double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean \/= numbers.size();\n        Double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        return mad \/ numbers.size();\n    }\n}\n",
        "id": "4",
        "test_prompt": "\/\/ MeanAbsoluteDeviationTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link MeanAbsoluteDeviation}.\n * It contains ten test cases for the {@link scenario2.MeanAbsoluteDeviation#meanAbsoluteDeviation()} method.\n *\/\nclass MeanAbsoluteDeviationTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumToN {\n\n    \/**\n     * sum_to_n is a function that sums numbers from 1 to n.\n     *\/\n    public static int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n",
        "id": "60",
        "test_prompt": "\/\/ SumToNTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SumToN}.\n * It contains ten test cases for the {@link scenario2.SumToN#sumToN()} method.\n *\/\nclass SumToNTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortEven {\n\n    \/**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n     * to the values of the even indicies of l, but sorted.\n     *\/\n    public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>(l);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                List<Integer> subl = new ArrayList<Integer>();\n                for (int j = 0; j < l.size(); j++) {\n                    if (j % 2 == 0) {\n                        subl.add(l.get(j));\n                    }\n                }\n                Collections.sort(subl);\n                l2.set(i, subl.get(i \/ 2));\n            }\n        }\n        return l2;\n    }\n}\n",
        "id": "37",
        "test_prompt": "\/\/ SortEvenTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SortEven}.\n * It contains ten test cases for the {@link scenario2.SortEven#sortEven()} method.\n *\/\nclass SortEvenTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RescaleToUnit {\n\n    \/**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     *\/\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i) - min) \/ (max - min));\n        }\n        return result;\n    }\n}\n",
        "id": "21",
        "test_prompt": "\/\/ RescaleToUnitTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link RescaleToUnit}.\n * It contains ten test cases for the {@link scenario2.RescaleToUnit#rescaleToUnit()} method.\n *\/\nclass RescaleToUnitTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ClosestInteger {\n\n    \/**\n     * * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n     *\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\/\n    public static int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n        if (d > 0) {\n            return (int) Math.floor(d + 0.5);\n        } else {\n            return (int) Math.ceil(d - 0.5);\n        }\n    }\n}\n",
        "id": "99",
        "test_prompt": "\/\/ ClosestIntegerTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link ClosestInteger}.\n * It contains ten test cases for the {@link scenario2.ClosestInteger#closestInteger()} method.\n *\/\nclass ClosestIntegerTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsSimplePower {\n\n    \/**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     *\/\n    public static Boolean isSimplePower(int x, int n) {\n        if (x == 1) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        int y = n;\n        while (y < x) {\n            y *= n;\n        }\n        return y == x;\n    }\n}\n",
        "id": "76",
        "test_prompt": "\/\/ IsSimplePowerTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link IsSimplePower}.\n * It contains ten test cases for the {@link scenario2.IsSimplePower#isSimplePower()} method.\n *\/\nclass IsSimplePowerTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CountUpper {\n\n    \/**\n     * * Given a string s, count the number of uppercase vowels in even indices.\n     *\/\n    public static int countUpper(String s) {\n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (i % 2 == 0 && Character.isUpperCase(c) && \"AEIOU\".indexOf(c) >= 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "98",
        "test_prompt": "\/\/ CountUpperTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CountUpper}.\n * It contains ten test cases for the {@link scenario2.CountUpper#countUpper()} method.\n *\/\nclass CountUpperTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Iscube {\n\n    \/**\n     * * Write a function that takes an integer a and returns True\n     * if this ingeger is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     *\/\n    public static Boolean iscube(int a) {\n        if (a < 0) {\n            return iscube(-a);\n        }\n        int i = 0;\n        while (i * i * i < a) {\n            i++;\n        }\n        return i * i * i == a;\n    }\n}\n",
        "id": "77",
        "test_prompt": "\/\/ IscubeTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Iscube}.\n * It contains ten test cases for the {@link scenario2.Iscube#iscube()} method.\n *\/\nclass IscubeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FindClosestElements {\n\n    \/**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     *\/\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double minDiff = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    result.clear();\n                    result.add(numbers.get(i));\n                    result.add(numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
        "id": "20",
        "test_prompt": "\/\/ FindClosestElementsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link FindClosestElements}.\n * It contains ten test cases for the {@link scenario2.FindClosestElements#findClosestElements()} method.\n *\/\nclass FindClosestElementsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FizzBuzz {\n\n    \/**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     *\/\n    public static int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String s = Integer.toString(i);\n                for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n",
        "id": "36",
        "test_prompt": "\/\/ FizzBuzzTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link FizzBuzz}.\n * It contains ten test cases for the {@link scenario2.FizzBuzz#fizzBuzz()} method.\n *\/\nclass FizzBuzzTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Intersperse {\n\n    \/**\n     * Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n     *\/\n    public static List<Object> intersperse(List<Object> numbers, int delimeter) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimeter);\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "5",
        "test_prompt": "\/\/ IntersperseTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Intersperse}.\n * It contains ten test cases for the {@link scenario2.Intersperse#intersperse()} method.\n *\/\nclass IntersperseTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CorrectBracketing1 {\n\n    \/**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\/\n    public static Boolean correctBracketing(String brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;\n    }\n}\n",
        "id": "61",
        "test_prompt": "\/\/ CorrectBracketing1Test.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CorrectBracketing1}.\n * It contains ten test cases for the {@link scenario2.CorrectBracketing1#correctBracketing()} method.\n *\/\nclass CorrectBracketing1Test {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Maximum1 {\n\n    \/**\n     * * Given an array arr of integers and a positive integer k, return a sorted list\n     * of length k with the maximum k numbers in arr.\n     *\n     * Note:\n     *     1. The length of the array will be in the range of [1, 1000].\n     *     2. The elements in the array will be in the range of [-1000, 1000].\n     *     3. 0 <= k <= len(arr)\n     *\/\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        int n = arr.size();\n        if (n == 0 || k == 0) {\n            return new ArrayList<Object>();\n        }\n        if (n <= k) {\n            Collections.sort(arr);\n            return new ArrayList<Object>(arr);\n        }\n        List<Object> res = new ArrayList<Object>();\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>(k);\n        for (int i = 0; i < n; i++) {\n            if (i < k) {\n                heap.add(arr.get(i));\n            } else {\n                if (arr.get(i) > heap.peek()) {\n                    heap.poll();\n                    heap.add(arr.get(i));\n                }\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            res.add(heap.poll());\n        }\n        Collections.sort(res, new Comparator<Object>() {\n\n            public int compare(Object o1, Object o2) {\n                return (int) o1 - (int) o2;\n            }\n        });\n        return res;\n    }\n}\n",
        "id": "120",
        "test_prompt": "\/\/ Maximum1Test.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Maximum1}.\n * It contains ten test cases for the {@link scenario2.Maximum1#compare()} method.\n *\/\nclass Maximum1Test {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Solve {\n\n    \/**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa,\n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     *\/\n    public static String solve(String s) {\n        String result = \"\";\n        boolean hasLetters = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                hasLetters = true;\n                if (Character.isUpperCase(s.charAt(i))) {\n                    result += Character.toLowerCase(s.charAt(i));\n                } else {\n                    result += Character.toUpperCase(s.charAt(i));\n                }\n            } else {\n                result += s.charAt(i);\n            }\n        }\n        if (!hasLetters) {\n            result = new StringBuilder(result).reverse().toString();\n        }\n        return result;\n    }\n}\n",
        "id": "161",
        "test_prompt": "\/\/ SolveTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Solve}.\n * It contains ten test cases for the {@link scenario2.Solve#solve()} method.\n *\/\nclass SolveTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestSmallestIntegers {\n\n    \/**\n     * * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n     *\/\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n        int largestNegative = Integer.MIN_VALUE;\n        int smallestPositive = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.size(); i++) {\n            int curr = (Integer) lst.get(i);\n            if (curr < 0) {\n                if (curr > largestNegative) {\n                    largestNegative = curr;\n                }\n            } else if (curr > 0) {\n                if (curr < smallestPositive) {\n                    smallestPositive = curr;\n                }\n            }\n        }\n        if (largestNegative == Integer.MIN_VALUE) {\n            result.add(null);\n        } else {\n            result.add(largestNegative);\n        }\n        if (smallestPositive == Integer.MAX_VALUE) {\n            result.add(null);\n        } else {\n            result.add(smallestPositive);\n        }\n        return result;\n    }\n}\n",
        "id": "136",
        "test_prompt": "\/\/ LargestSmallestIntegersTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link LargestSmallestIntegers}.\n * It contains ten test cases for the {@link scenario2.LargestSmallestIntegers#largestSmallestIntegers()} method.\n *\/\nclass LargestSmallestIntegersTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FileNameCheck {\n\n    \/**\n     * Create a function which takes a string representing a file's name, and returns\n     * 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions\n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from\n     * the latin alphapet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n     *\/\n    public static String fileNameCheck(String fileName) {\n        String[] suf = { \"txt\", \"exe\", \"dll\" };\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2) {\n            return \"No\";\n        }\n        if (!Arrays.asList(suf).contains(lst[1])) {\n            return \"No\";\n        }\n        if (lst[0].length() == 0) {\n            return \"No\";\n        }\n        if (!Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = 0;\n        for (int i = 0; i < lst[0].length(); i++) {\n            if (Character.isDigit(lst[0].charAt(i))) {\n                t++;\n            }\n        }\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
        "id": "141",
        "test_prompt": "\/\/ FileNameCheckTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link FileNameCheck}.\n * It contains ten test cases for the {@link scenario2.FileNameCheck#fileNameCheck()} method.\n *\/\nclass FileNameCheckTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Skjkasdkd {\n\n    \/**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n     *\/\n    public static int skjkasdkd(List<Integer> lst) {\n        int largestPrime = 0;\n        for (int value : lst) {\n            if (isPrime(value) && value > largestPrime) {\n                largestPrime = value;\n            }\n        }\n        int sum = 0;\n        while (largestPrime > 0) {\n            sum += largestPrime % 10;\n            largestPrime \/= 10;\n        }\n        return sum;\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "id": "94",
        "test_prompt": "\/\/ SkjkasdkdTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Skjkasdkd}.\n * It contains ten test cases for the {@link scenario2.Skjkasdkd#skjkasdkd()} method.\n *\/\nclass SkjkasdkdTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortArray {\n\n    \/**\n     * * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n     *\/\n    public static List<Object> sortArray(List<Object> arr) {\n        List<Object> sorted = new ArrayList<Object>();\n        for (int i = 0; i < arr.size(); i++) {\n            int num = ((Number) arr.get(i)).intValue();\n            int ones = 0;\n            while (num > 0) {\n                ones += num % 2;\n                num \/= 2;\n            }\n            sorted.add(new int[] { ones, ((Number) arr.get(i)).intValue() });\n        }\n        Collections.sort(sorted, new Comparator<Object>() {\n\n            public int compare(Object o1, Object o2) {\n                int[] a1 = (int[]) o1;\n                int[] a2 = (int[]) o2;\n                if (a1[0] == a2[0]) {\n                    return a1[1] - a2[1];\n                }\n                return a1[0] - a2[0];\n            }\n        });\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < sorted.size(); i++) {\n            result.add(((int[]) sorted.get(i))[1]);\n        }\n        return result;\n    }\n}\n",
        "id": "116",
        "test_prompt": "\/\/ SortArrayTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SortArray}.\n * It contains ten test cases for the {@link scenario2.SortArray#compare()} method.\n *\/\nclass SortArrayTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MakeAPile {\n\n    \/**\n     * * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     *     - the next odd number if n is odd.\n     *     - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n     *\/\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (i == 1) {\n                result.add(n);\n            } else {\n                if (n % 2 == 0) {\n                    result.add(result.get(i - 2) + 2);\n                } else {\n                    result.add(result.get(i - 2) + 2);\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n}\n",
        "id": "100",
        "test_prompt": "\/\/ MakeAPileTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link MakeAPile}.\n * It contains ten test cases for the {@link scenario2.MakeAPile#makeAPile()} method.\n *\/\nclass MakeAPileTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RightAngleTriangle {\n\n    \/**\n     * * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or\n     * 90 degree.\n     *\/\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        if (a > b && a > c) {\n            return a * a == b * b + c * c;\n        }\n        if (b > a && b > c) {\n            return b * b == a * a + c * c;\n        }\n        return c * c == a * a + b * b;\n    }\n}\n",
        "id": "157",
        "test_prompt": "\/\/ RightAngleTriangleTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link RightAngleTriangle}.\n * It contains ten test cases for the {@link scenario2.RightAngleTriangle#rightAngleTriangle()} method.\n *\/\nclass RightAngleTriangleTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass PrimeLength {\n\n    \/**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     *\/\n    public static Boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 0 || length == 1) {\n            return false;\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "id": "82",
        "test_prompt": "\/\/ PrimeLengthTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link PrimeLength}.\n * It contains ten test cases for the {@link scenario2.PrimeLength#primeLength()} method.\n *\/\nclass PrimeLengthTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RollingMax {\n\n    \/**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     *\/\n    public static List<Object> rollingMax(List<Object> numbers) {\n        List<Object> result = new ArrayList<Object>();\n        Integer max = null;\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                if (max == null || (Integer) number > max) {\n                    max = (Integer) number;\n                }\n                result.add(max);\n            } else {\n                throw new IllegalArgumentException(\"Invalid number type\");\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "9",
        "test_prompt": "\/\/ RollingMaxTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link RollingMax}.\n * It contains ten test cases for the {@link scenario2.RollingMax#rollingMax()} method.\n *\/\nclass RollingMaxTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CountDistinctCharacters {\n\n    \/**\n     * Given a string, find out how many distinct characters (regardless of case) does it consist of\n     *\/\n    public static int countDistinctCharacters(String string) {\n        Set<Character> distinctCharacters = new HashSet<Character>();\n        for (int i = 0; i < string.length(); i++) {\n            distinctCharacters.add(Character.toLowerCase(string.charAt(i)));\n        }\n        return distinctCharacters.size();\n    }\n}\n",
        "id": "16",
        "test_prompt": "\/\/ CountDistinctCharactersTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CountDistinctCharacters}.\n * It contains ten test cases for the {@link scenario2.CountDistinctCharacters#countDistinctCharacters()} method.\n *\/\nclass CountDistinctCharactersTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CarRaceCollision {\n\n    \/**\n     * * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right;  simultaneously, a different set of n cars\n     * are driving right to left.   The two sets of cars start out being very far from\n     * each other.  All cars move in the same speed.  Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n     *\n     * This function outputs the number of such collisions.\n     *\/\n    public static int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
        "id": "41",
        "test_prompt": "\/\/ CarRaceCollisionTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CarRaceCollision}.\n * It contains ten test cases for the {@link scenario2.CarRaceCollision#carRaceCollision()} method.\n *\/\nclass CarRaceCollisionTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Monotonic {\n\n    \/**\n     * Return True is list elements are monotonically increasing or decreasing.\n     *\/\n    public static Boolean monotonic(List<Integer> l) {\n        int size = l.size();\n        if (size == 1) {\n            return true;\n        }\n        int direction = l.get(1) - l.get(0);\n        for (int i = 1; i < size - 1; i++) {\n            if (direction == 0) {\n                direction = l.get(i + 1) - l.get(i);\n            } else if (direction > 0) {\n                if (l.get(i + 1) < l.get(i)) {\n                    return false;\n                }\n            } else {\n                if (l.get(i + 1) > l.get(i)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n",
        "id": "57",
        "test_prompt": "\/\/ MonotonicTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Monotonic}.\n * It contains ten test cases for the {@link scenario2.Monotonic#monotonic()} method.\n *\/\nclass MonotonicTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Digits {\n\n    \/**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     *\/\n    public static int digits(int n) {\n        int res = 1;\n        boolean hasOdd = false;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                res *= digit;\n                hasOdd = true;\n            }\n            n \/= 10;\n        }\n        return hasOdd ? res : 0;\n    }\n}\n",
        "id": "131",
        "test_prompt": "\/\/ DigitsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Digits}.\n * It contains ten test cases for the {@link scenario2.Digits#digits()} method.\n *\/\nclass DigitsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Intersection {\n\n    \/**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two\n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n     *\/\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        if (start > end) {\n            return \"NO\";\n        }\n        if (isPrime(end - start)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "id": "127",
        "test_prompt": "\/\/ IntersectionTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Intersection}.\n * It contains ten test cases for the {@link scenario2.Intersection#intersection()} method.\n *\/\nclass IntersectionTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Encrypt {\n\n    \/**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated.\n     * The alphabet should be rotated in a manner such that the letters\n     * shift down by two multiplied to two places.\n     *\/\n    public static String encrypt(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                c += 2 * 2;\n                if (c > 'z') {\n                    c -= 26;\n                }\n            }\n            result += c;\n        }\n        return result;\n    }\n}\n",
        "id": "89",
        "test_prompt": "\/\/ EncryptTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Encrypt}.\n * It contains ten test cases for the {@link scenario2.Encrypt#encrypt()} method.\n *\/\nclass EncryptTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Digitsum {\n\n    \/**\n     * Task\n     * Write a function that takes a string as input and returns the sum of the upper characters only'\n     * ASCII codes.\n     *\/\n    public static int digitsum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}\n",
        "id": "66",
        "test_prompt": "\/\/ DigitsumTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Digitsum}.\n * It contains ten test cases for the {@link scenario2.Digitsum#digitsum()} method.\n *\/\nclass DigitsumTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TruncateNumber {\n\n    \/**\n     * Given a positive floating point number, it can be decomposed into\n     * and integer part (largest integer smaller than given number) and decimals\n     * (leftover part always smaller than 1).\n     *\/\n    \/\/ write a code with solving floating point issue\n    public static Double truncateNumber(Double number) {\n        \/\/ return number - Math.floor(number);\n        return Math.round((number - Math.floor(number)) * 1000.0) \/ 1000.0;\n    }\n}\n",
        "id": "2",
        "test_prompt": "\/\/ TruncateNumberTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link TruncateNumber}.\n * It contains ten test cases for the {@link scenario2.TruncateNumber#truncateNumber()} method.\n *\/\nclass TruncateNumberTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport static junit.framework.TestCase.assertTrue;\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsPrime {\n\n    \/**\n     * Return true if a given number is prime, and false otherwise.\n     *\/\n    public static Boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "id": "31",
        "test_prompt": "\/\/ IsPrimeTest.java\npackage scenario2;\n\nimport junit.framework.TestCase.assertTrue.*;\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link IsPrime}.\n * It contains ten test cases for the {@link scenario2.IsPrime#isPrime()} method.\n *\/\nclass IsPrimeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FlipCase {\n\n    \/**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     *\/\n    public static String flipCase(String string) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        return result.toString();\n    }\n}\n",
        "id": "27",
        "test_prompt": "\/\/ FlipCaseTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link FlipCase}.\n * It contains ten test cases for the {@link scenario2.FlipCase#flipCase()} method.\n *\/\nclass FlipCaseTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StrangeSortList {\n\n    \/**\n     * * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n     *\/\n    public static List<Object> strangeSortList(List<Object> lst) {\n        List<Object> result = new ArrayList<Object>();\n        List<Integer> sorted = new ArrayList<Integer>();\n        for (Object value : lst) {\n            if (value instanceof Integer) {\n                sorted.add((Integer) value);\n            }\n        }\n        Collections.sort(sorted);\n        int i = 0;\n        int j = sorted.size() - 1;\n        while (i <= j) {\n            result.add(sorted.get(i));\n            if (i != j) {\n                result.add(sorted.get(j));\n            }\n            i++;\n            j--;\n        }\n        return result;\n    }\n}\n",
        "id": "70",
        "test_prompt": "\/\/ StrangeSortListTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link StrangeSortList}.\n * It contains ten test cases for the {@link scenario2.StrangeSortList#strangeSortList()} method.\n *\/\nclass StrangeSortListTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Fib4 {\n\n    \/**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     *\/\n    public static int fib4(int n) {\n        if (n < 2) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 2;\n        int d = 0;\n        int e = 0;\n        for (int i = 4; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n        }\n        return e;\n    }\n}\n",
        "id": "46",
        "test_prompt": "\/\/ Fib4Test.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Fib4}.\n * It contains ten test cases for the {@link scenario2.Fib4#fib4()} method.\n *\/\nclass Fib4Test {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StringXor {\n\n    \/**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     *\/\n    public static String stringXor(String a, String b) {\n        String result = \"\";\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "11",
        "test_prompt": "\/\/ StringXorTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link StringXor}.\n * It contains ten test cases for the {@link scenario2.StringXor#stringXor()} method.\n *\/\nclass StringXorTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add1 {\n\n    \/**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n     *\/\n    public static int add(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "85",
        "test_prompt": "\/\/ Add1Test.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Add1}.\n * It contains ten test cases for the {@link scenario2.Add1#add()} method.\n *\/\nclass Add1Test {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass XOrY {\n\n    \/**\n     * A simple program which should return the value of x if n is\n     * a prime number and should return the value of y otherwise.\n     *\/\n    public static int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
        "id": "150",
        "test_prompt": "\/\/ XOrYTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link XOrY}.\n * It contains ten test cases for the {@link scenario2.XOrY#xOrY()} method.\n *\/\nclass XOrYTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass EvenOddPalindrome {\n\n    \/**\n     * * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n     *\n     * Note:\n     *     1. 1 <= n <= 10^3\n     *     2. returned tuple has the number of even and odd integer palindromes respectively.\n     *\/\n    public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    public static boolean isPalindrome(int n) {\n        int m = n;\n        int reversed = 0;\n        while (m > 0) {\n            reversed = reversed * 10 + m % 10;\n            m \/= 10;\n        }\n        return n == reversed;\n    }\n}\n",
        "id": "107",
        "test_prompt": "\/\/ EvenOddPalindromeTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link EvenOddPalindrome}.\n * It contains ten test cases for the {@link scenario2.EvenOddPalindrome#evenOddPalindrome()} method.\n *\/\nclass EvenOddPalindromeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Histogram {\n\n    \/**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     *\/\n    public static Object histogram(String test) {\n        HashMap<String, Integer> map = new HashMap<>();\n        String[] arr = test.split(\" \");\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].equals(\"\")) {\n                continue;\n            }\n            if (map.containsKey(arr[i])) {\n                map.put(arr[i], map.get(arr[i]) + 1);\n            } else {\n                map.put(arr[i], 1);\n            }\n        }\n        return map;\n    }\n}\n",
        "id": "111",
        "test_prompt": "\/\/ HistogramTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Histogram}.\n * It contains ten test cases for the {@link scenario2.Histogram#histogram()} method.\n *\/\nclass HistogramTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Encode {\n\n    \/**\n     * * Write a function that takes a message, and encodes in such a\n     * way that it swaps case of all letters, replaces all vowels in\n     * the message with the letter that appears 2 places ahead of that\n     * vowel in the english alphabet.\n     * Assume only letters.\n     *\/\n    public static String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                c -= 32;\n            } else if (c >= 'A' && c <= 'Z') {\n                c += 32;\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                c += 2;\n            }\n            result += c;\n        }\n        return result;\n    }\n}\n",
        "id": "93",
        "test_prompt": "\/\/ EncodeTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Encode}.\n * It contains ten test cases for the {@link scenario2.Encode#encode()} method.\n *\/\nclass EncodeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Specialfilter {\n\n    \/**\n     * Write a function that takes an array of numbers as input and returns\n     * the number of elements in the array that are greater than 10 and both\n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     *\/\n    public static int specialfilter(List<Object> nums) {\n        \/\/ count = 0\n        \/\/ for num in nums:\n        \/\/     if num > 10:\n        \/\/         odd_digits = (1, 3, 5, 7, 9)\n        \/\/         number_as_string = str(num)\n        \/\/         if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n        \/\/             count += 1\n        \/\/ return count\n        \/\/ convert to java\n        int count = 0;\n        for (Object num : nums) {\n            if ((int) num > 10) {\n                Set odd_digits = new HashSet<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n                String number_as_string = Integer.toString((int) num);\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1))) && odd_digits.contains(Integer.parseInt(number_as_string.substring(number_as_string.length() - 1)))) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n",
        "id": "146",
        "test_prompt": "\/\/ SpecialfilterTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Specialfilter}.\n * It contains ten test cases for the {@link scenario2.Specialfilter#specialfilter()} method.\n *\/\nclass SpecialfilterTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetMaxTriples {\n\n    \/**\n     * * You are given a positive integer n. You have to create an integer array a of length n.\n     *     For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n     *     Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     *\/\n    public static int getMaxTriples(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n",
        "id": "147",
        "test_prompt": "\/\/ GetMaxTriplesTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link GetMaxTriples}.\n * It contains ten test cases for the {@link scenario2.GetMaxTriples#getMaxTriples()} method.\n *\/\nclass GetMaxTriplesTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AnyInt {\n\n    \/**\n     * * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     *\/\n    public static Boolean anyInt(Number x, Number y, Number z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            if (x.intValue() == y.intValue() + z.intValue()) {\n                return true;\n            }\n            if (y.intValue() == x.intValue() + z.intValue()) {\n                return true;\n            }\n            if (z.intValue() == x.intValue() + y.intValue()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
        "id": "92",
        "test_prompt": "\/\/ AnyIntTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link AnyInt}.\n * It contains ten test cases for the {@link scenario2.AnyInt#anyInt()} method.\n *\/\nclass AnyIntTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Exchange {\n\n    \/**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     *\/\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int count = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 == 0) {\n                count--;\n            }\n        }\n        if (count <= 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n",
        "id": "110",
        "test_prompt": "\/\/ ExchangeTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Exchange}.\n * It contains ten test cases for the {@link scenario2.Exchange#exchange()} method.\n *\/\nclass ExchangeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass F {\n\n    \/**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     *\/\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private static int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private static int sum(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n",
        "id": "106",
        "test_prompt": "\/\/ FTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link F}.\n * It contains ten test cases for the {@link scenario2.F#f()} method.\n *\/\nclass FTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass DoubleTheDifference {\n\n    \/**\n     * * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     *\/\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) instanceof Integer) {\n                int num = (int) lst.get(i);\n                if (num % 2 != 0 && num > 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n",
        "id": "151",
        "test_prompt": "\/\/ DoubleTheDifferenceTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link DoubleTheDifference}.\n * It contains ten test cases for the {@link scenario2.DoubleTheDifference#doubleTheDifference()} method.\n *\/\nclass DoubleTheDifferenceTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Solve1 {\n\n    \/**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     *\n     * Variables:\n     *     @N integer\n     *          Constraints: 0 ≤ N ≤ 10000.\n     * Output:\n     *      a string of binary number\n     *\/\n    public static String solve(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n \/= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n",
        "id": "84",
        "test_prompt": "\/\/ Solve1Test.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Solve1}.\n * It contains ten test cases for the {@link scenario2.Solve1#solve()} method.\n *\/\nclass Solve1Test {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MakePalindrome {\n\n    \/**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     *\/\n    public static String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        String reversed = new StringBuilder(string).reverse().toString();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).equals(reversed.substring(0, string.length() - i))) {\n                return string + reversed.substring(string.length() - i);\n            }\n        }\n        return null;\n    }\n}\n",
        "id": "10",
        "test_prompt": "\/\/ MakePalindromeTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link MakePalindrome}.\n * It contains ten test cases for the {@link scenario2.MakePalindrome#makePalindrome()} method.\n *\/\nclass MakePalindromeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Median {\n\n    \/**\n     * Return median of elements in the list l.\n     *\/\n    public static Number median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size \/ 2) + l.get(size \/ 2 - 1)) \/ 2.0;\n        } else {\n            return l.get(size \/ 2);\n        }\n    }\n}\n",
        "id": "47",
        "test_prompt": "\/\/ MedianTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Median}.\n * It contains ten test cases for the {@link scenario2.Median#median()} method.\n *\/\nclass MedianTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RemoveVowels {\n\n    \/**\n     * * remove_vowels is a function that takes string and returns string without vowels.\n     *\/\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "51",
        "test_prompt": "\/\/ RemoveVowelsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link RemoveVowels}.\n * It contains ten test cases for the {@link scenario2.RemoveVowels#removeVowels()} method.\n *\/\nclass RemoveVowelsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea1 {\n\n    \/**\n     * * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater\n     * than the third side.\n     *\/\n    public static Number triangleArea(int a, int b, int c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double p = (a + b + c) \/ 2.0;\n        return Math.round(Math.sqrt(p * (p - a) * (p - b) * (p - c)) * 100.0) \/ 100.0;\n    }\n}\n",
        "id": "71",
        "test_prompt": "\/\/ TriangleArea1Test.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link TriangleArea1}.\n * It contains ten test cases for the {@link scenario2.TriangleArea1#triangleArea()} method.\n *\/\nclass TriangleArea1Test {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RemoveDuplicates {\n\n    \/**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     *\/\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.indexOf(numbers.get(i)) == numbers.lastIndexOf(numbers.get(i))) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "26",
        "test_prompt": "\/\/ RemoveDuplicatesTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link RemoveDuplicates}.\n * It contains ten test cases for the {@link scenario2.RemoveDuplicates#removeDuplicates()} method.\n *\/\nclass RemoveDuplicatesTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetPositive {\n\n    \/**\n     * Return only positive numbers in the list.\n     *\/\n    public static List<Object> getPositive(List<Object> l) {\n        List<Object> result = new ArrayList<Object>();\n        for (Object value : l) {\n            if (value instanceof Integer) {\n                int i = (Integer) value;\n                if (i > 0) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "30",
        "test_prompt": "\/\/ GetPositiveTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link GetPositive}.\n * It contains ten test cases for the {@link scenario2.GetPositive#getPositive()} method.\n *\/\nclass GetPositiveTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortArray1 {\n\n    \/**\n     * * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n     * <p>\n     * Note:\n     * * don't change the given array.\n     *\/\n    public static List<Object> sortArray(List<Object> array) {\n        if (array.size() <= 1) {\n            return array;\n        }\n        int sum = (Integer) array.get(0) + (Integer) array.get(array.size() - 1);\n        List<Object> sortedArray = new ArrayList<Object>(array);\n        Collections.sort(sortedArray, new Comparator<Object>() {\n\n            @Override\n            public int compare(Object o1, Object o2) {\n                return (Integer) o1 - (Integer) o2;\n            }\n        });\n        if (sum % 2 == 0) {\n            Collections.reverse(sortedArray);\n        }\n        return sortedArray;\n    }\n}\n",
        "id": "88",
        "test_prompt": "\/\/ SortArray1Test.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SortArray1}.\n * It contains ten test cases for the {@link scenario2.SortArray1#compare()} method.\n *\/\nclass SortArray1Test {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FruitDistribution {\n\n    \/**\n     * * In this task, you will be given a string that represents a number of apples and oranges\n     * that are distributed in a basket of fruit this basket contains\n     * apples, oranges, and mango fruits. Given the string that represents the total number of\n     * the oranges and apples and an integer that represent the total number of the fruits\n     * in the basket return the number of the mango fruits in the basket.\n     *\/\n    public static int fruitDistribution(String s, int n) {\n        int apples = 0;\n        int oranges = 0;\n        int mangoes = 0;\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"apples\")) {\n                apples = Integer.parseInt(words[i - 1]);\n            }\n            if (words[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(words[i - 1]);\n            }\n        }\n        mangoes = n - apples - oranges;\n        return mangoes;\n    }\n}\n",
        "id": "67",
        "test_prompt": "\/\/ FruitDistributionTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link FruitDistribution}.\n * It contains ten test cases for the {@link scenario2.FruitDistribution#fruitDistribution()} method.\n *\/\nclass FruitDistributionTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass BelowZero {\n\n    \/**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n     * at that point function should return True. Otherwise it should return False.\n     *\/\n    public static Boolean belowZero(List<Object> operations) {\n        Double balance = 0.0;\n        for (Object operation : operations) {\n            if (operation instanceof Double) {\n                balance += (Double) operation;\n            } else if (operation instanceof Integer) {\n                balance += (Integer) operation;\n            } else {\n                throw new IllegalArgumentException(\"Invalid operation type\");\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
        "id": "3",
        "test_prompt": "\/\/ BelowZeroTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link BelowZero}.\n * It contains ten test cases for the {@link scenario2.BelowZero#belowZero()} method.\n *\/\nclass BelowZeroTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsSorted {\n\n    \/**\n     * * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If list has more than 1 duplicate of the same\n     * number, return False. Assume no negative numbers and only integers.\n     *\/\n    public static Boolean isSorted(List<Object> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size() - 1; i++) {\n            int curr = (int) lst.get(i);\n            map.put(curr, map.getOrDefault(curr, 0) + 1);\n            if (map.get(curr) > 2) {\n                return false;\n            }\n        }\n        int prev = (int) lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            int curr = (int) lst.get(i);\n            if (curr < prev) {\n                return false;\n            }\n            prev = curr;\n        }\n        return true;\n    }\n}\n",
        "id": "126",
        "test_prompt": "\/\/ IsSortedTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link IsSorted}.\n * It contains ten test cases for the {@link scenario2.IsSorted#isSorted()} method.\n *\/\nclass IsSortedTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Tri {\n\n    \/**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n \/ 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 \/ 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     *        = 2 + 3 + 3 = 8\n     * You are given a non-negative integer number n, you have to a return a list of the\n     * first n + 1 numbers of the Tribonacci sequence.\n     *\/\n    public static List<Number> tri(int n) {\n        if (n == 0) {\n            return Arrays.asList(1);\n        }\n        List<Number> my_tri = new ArrayList<>();\n        my_tri.add(1);\n        my_tri.add(3);\n        for (int i = 2; i < n + 1; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i \/ 2 + 1.0);\n            } else {\n                my_tri.add(my_tri.get(i - 1).doubleValue() + my_tri.get(i - 2).doubleValue() + (i + 3) \/ 2);\n            }\n        }\n        return my_tri;\n    }\n}\n",
        "id": "130",
        "test_prompt": "\/\/ TriTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Tri}.\n * It contains ten test cases for the {@link scenario2.Tri#tri()} method.\n *\/\nclass TriTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass WillItFly {\n\n    \/**\n     * * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n     *\/\n    public static Boolean willItFly(List<Integer> q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        for (int i = 0; i < q.size() \/ 2; i++) {\n            if (q.get(i) != q.get(q.size() - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "id": "72",
        "test_prompt": "\/\/ WillItFlyTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link WillItFly}.\n * It contains ten test cases for the {@link scenario2.WillItFly#willItFly()} method.\n *\/\nclass WillItFlyTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Bf {\n\n    \/**\n     * * There are eight planets in our solar system: the closerst to the Sun\n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2.\n     * The function should return a tuple containing all planets whose orbits are\n     * located between the orbit of planet1 and the orbit of planet2, sorted by\n     * the proximity to the sun.\n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names.\n     *\/\n    public static List<Object> bf(String planet1, String planet2) {\n        List<Object> planets = new ArrayList<Object>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        List<Object> result = new ArrayList<Object>();\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if (index1 < index2) {\n                for (int i = index1 + 1; i < index2; i++) {\n                    result.add(planets.get(i));\n                }\n            } else {\n                for (int i = index2 + 1; i < index1; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "148",
        "test_prompt": "\/\/ BfTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Bf}.\n * It contains ten test cases for the {@link scenario2.Bf#bf()} method.\n *\/\nclass BfTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Factorize {\n\n    \/**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n     * Input number should be equal to the product of all factors\n     *\/\n    public static List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n                n \/= i;\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "25",
        "test_prompt": "\/\/ FactorizeTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Factorize}.\n * It contains ten test cases for the {@link scenario2.Factorize#factorize()} method.\n *\/\nclass FactorizeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortThird {\n\n    \/**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     * to the values of the corresponding indicies of l, but sorted.\n     *\/\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>(l);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> subl = new ArrayList<Integer>();\n                for (int j = 0; j < l.size(); j++) {\n                    if (j % 3 == 0) {\n                        subl.add(l.get(j));\n                    }\n                }\n                Collections.sort(subl);\n                l2.set(i, subl.get(i \/ 3));\n            }\n        }\n        return l2;\n    }\n}\n",
        "id": "33",
        "test_prompt": "\/\/ SortThirdTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SortThird}.\n * It contains ten test cases for the {@link scenario2.SortThird#sortThird()} method.\n *\/\nclass SortThirdTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MoveOneBall {\n\n    \/**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing\n     * the following operation on the given array:\n     *     You are allowed to perform right shift operation any number of times.\n     *\n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index.\n     *\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n     *\n     * Note: The given list is guaranteed to have unique elements.\n     *\/\n    public static Boolean moveOneBall(List<Object> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if ((int) arr.get(i) > (int) arr.get((i + 1) % arr.size())) {\n                count++;\n            }\n        }\n        if (count <= 1) {\n            return true;\n        }\n        return false;\n    }\n}\n",
        "id": "109",
        "test_prompt": "\/\/ MoveOneBallTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link MoveOneBall}.\n * It contains ten test cases for the {@link scenario2.MoveOneBall#moveOneBall()} method.\n *\/\nclass MoveOneBallTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass HasCloseElements {\n\n    \/**\n     * Check if in given list of numbers, are any two numbers closer to each other than\n     * given threshold.\n     *\/\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
        "id": "0",
        "test_prompt": "\/\/ HasCloseElementsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link HasCloseElements}.\n * It contains ten test cases for the {@link scenario2.HasCloseElements#hasCloseElements()} method.\n *\/\nclass HasCloseElementsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass VowelsCount {\n\n    \/**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n     *\/\n    public static int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        if (s.length() > 0 && (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y')) {\n            count++;\n        }\n        return count;\n    }\n}\n",
        "id": "64",
        "test_prompt": "\/\/ VowelsCountTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link VowelsCount}.\n * It contains ten test cases for the {@link scenario2.VowelsCount#vowelsCount()} method.\n *\/\nclass VowelsCountTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SplitWords {\n\n    \/**\n     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     *\/\n    public static Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                if (txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z' && (txt.charAt(i) - 'a') % 2 == 1) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n",
        "id": "125",
        "test_prompt": "\/\/ SplitWordsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SplitWords}.\n * It contains ten test cases for the {@link scenario2.SplitWords#splitWords()} method.\n *\/\nclass SplitWordsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsPalindrome {\n\n    \/**\n     * * Checks if given string is a palindrome\n     *\/\n    public static Boolean isPalindrome(String text) {\n        int i = 0;\n        int j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n",
        "id": "48",
        "test_prompt": "\/\/ IsPalindromeTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link IsPalindrome}.\n * It contains ten test cases for the {@link scenario2.IsPalindrome#isPalindrome()} method.\n *\/\nclass IsPalindromeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumSquares {\n\n    \/**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     *\/\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number n : lst) {\n            sum += Math.pow(Math.ceil(n.doubleValue()), 2);\n        }\n        return sum;\n    }\n}\n",
        "id": "133",
        "test_prompt": "\/\/ SumSquaresTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SumSquares}.\n * It contains ten test cases for the {@link scenario2.SumSquares#sumSquares()} method.\n *\/\nclass SumSquaresTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Simplify {\n\n    \/**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>\/<denominator> where both numerator and denominator are positive whole numbers.\n     *\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n     *\/\n    public static Boolean simplify(String x, String n) {\n        \/\/ a, b = x.split(\"\/\")\n        \/\/ c, d = n.split(\"\/\")\n        \/\/ numerator = int(a) * int(c)\n        \/\/ denom = int(b) * int(d)\n        \/\/ if (numerator\/denom == int(numerator\/denom)):\n        \/\/     return True\n        \/\/ return False\n        \/\/ convert to java\n        String[] a = x.split(\"\/\");\n        String[] b = n.split(\"\/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        if (numerator % denom == 0) {\n            return true;\n        }\n        return false;\n    }\n}\n",
        "id": "144",
        "test_prompt": "\/\/ SimplifyTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Simplify}.\n * It contains ten test cases for the {@link scenario2.Simplify#simplify()} method.\n *\/\nclass SimplifyTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsBored {\n\n    \/**\n     * * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n     *\/\n    public static int isBored(String s) {\n        int count = 0;\n        String[] sentences = s.split(\"[.!?]\");\n        for (String sentence : sentences) {\n            String[] words = sentence.split(\" \");\n            boolean firstWord = false;\n            for (String word : words) {\n                if (word.length() == 0)\n                    continue;\n                else {\n                    firstWord = true;\n                    if (word.startsWith(\"I\")) {\n                        count++;\n                    }\n                }\n                if (firstWord)\n                    break;\n            }\n        }\n        return count;\n    }\n}\n",
        "id": "91",
        "test_prompt": "\/\/ IsBoredTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link IsBored}.\n * It contains ten test cases for the {@link scenario2.IsBored#isBored()} method.\n *\/\nclass IsBoredTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass OddCount {\n\n    \/**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i'th string of the input.\n     *\/\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for (int j = 0; j < lst.get(i).length(); j++) {\n                if (Integer.parseInt(lst.get(i).substring(j, j + 1)) % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n        }\n        return result;\n    }\n}\n",
        "id": "113",
        "test_prompt": "\/\/ OddCountTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link OddCount}.\n * It contains ten test cases for the {@link scenario2.OddCount#oddCount()} method.\n *\/\nclass OddCountTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FilterByPrefix {\n\n    \/**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     *\/\n    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {\n        List<Object> result = new ArrayList<Object>();\n        for (Object string : strings) {\n            if (string.toString().startsWith(prefix)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "29",
        "test_prompt": "\/\/ FilterByPrefixTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link FilterByPrefix}.\n * It contains ten test cases for the {@link scenario2.FilterByPrefix#filterByPrefix()} method.\n *\/\nclass FilterByPrefixTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ByLength {\n\n    \/**\n     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n     *\/\n    public static List<Object> byLength(List<Object> arr) {\n        List<Integer> sorted = new ArrayList<Integer>();\n        for (Object value : arr) {\n            if (value instanceof Integer) {\n                sorted.add((Integer) value);\n            }\n        }\n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n        List<Object> result = new ArrayList<Object>();\n        for (Integer value : sorted) {\n            if (value >= 1 && value <= 9) {\n                switch(value) {\n                    case 1:\n                        result.add(\"One\");\n                        break;\n                    case 2:\n                        result.add(\"Two\");\n                        break;\n                    case 3:\n                        result.add(\"Three\");\n                        break;\n                    case 4:\n                        result.add(\"Four\");\n                        break;\n                    case 5:\n                        result.add(\"Five\");\n                        break;\n                    case 6:\n                        result.add(\"Six\");\n                        break;\n                    case 7:\n                        result.add(\"Seven\");\n                        break;\n                    case 8:\n                        result.add(\"Eight\");\n                        break;\n                    case 9:\n                        result.add(\"Nine\");\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "105",
        "test_prompt": "\/\/ ByLengthTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link ByLength}.\n * It contains ten test cases for the {@link scenario2.ByLength#byLength()} method.\n *\/\nclass ByLengthTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Compare {\n\n    \/**\n     * I think we all remember that feeling when the result of some long-awaited\n     * event is finally known. The feelings and thoughts you have at that moment are\n     * definitely worth noting down and comparing.\n     * Your task is to determine if a person correctly guessed the results of a number of matches.\n     * You are given two arrays of scores and guesses of equal length, where each index shows a match.\n     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n     * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n     *\/\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n",
        "id": "152",
        "test_prompt": "\/\/ CompareTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Compare}.\n * It contains ten test cases for the {@link scenario2.Compare#compare()} method.\n *\/\nclass CompareTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Pluck {\n\n    \/**\n     * * \"Given an array representing a branch of a tree that has non-negative integer nodes\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n     *\n     * The plucked node should be returned in a list, [ smalest_value, its index ],\n     * If there are no even values or the given array is empty, return [].\n     *\n     * Constraints:\n     *     * 1 <= nodes.length <= 10000\n     *     * 0 <= node.value\n     *\/\n    public static List<Object> pluck(List<Object> arr) {\n        List<Object> result = new ArrayList<Object>();\n        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) instanceof Integer) {\n                int value = (Integer) arr.get(i);\n                if (value % 2 == 0 && value < min) {\n                    min = value;\n                    index = i;\n                }\n            }\n        }\n        if (index != -1) {\n            result.add(min);\n            result.add(index);\n        }\n        return result;\n    }\n}\n",
        "id": "68",
        "test_prompt": "\/\/ PluckTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Pluck}.\n * It contains ten test cases for the {@link scenario2.Pluck#pluck()} method.\n *\/\nclass PluckTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetRow {\n\n    \/**\n     * * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     *\/\n    public static List<Object> getRow(List<Object> lst, int x) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Object> row = (List<Object>) lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j).equals(x)) {\n                    List<Object> coordinate = new ArrayList<Object>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n\n            public int compare(Object o1, Object o2) {\n                List<Object> c1 = (List<Object>) o1;\n                List<Object> c2 = (List<Object>) o2;\n                int row1 = (Integer) c1.get(0);\n                int row2 = (Integer) c2.get(0);\n                if (row1 != row2) {\n                    return row1 - row2;\n                }\n                int col1 = (Integer) c1.get(1);\n                int col2 = (Integer) c2.get(1);\n                return col2 - col1;\n            }\n        });\n        return result;\n    }\n}\n",
        "id": "87",
        "test_prompt": "\/\/ GetRowTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link GetRow}.\n * It contains ten test cases for the {@link scenario2.GetRow#compare()} method.\n *\/\nclass GetRowTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Minpath {\n\n    \/**\n     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n     * each cell of the grid contains a value. Every integer in the range [1, N * N]\n     * inclusive appears exactly once on the cells of the grid.\n     *\n     * You have to find the minimum path of length k in the grid. You can start\n     * from any cell, and in each step you can move to any of the neighbor cells,\n     * in other words, you can go to cells which share an edge with you current\n     * cell.\n     * Please note that a path of length k means visiting exactly k cells (not\n     * necessarily distinct).\n     * You CANNOT go off the grid.\n     * A path A (of length k) is considered less than a path B (of length k) if\n     * after making the ordered lists of the values on the cells that A and B go\n     * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     * lst_A[j] = lst_B[j].\n     * It is guaranteed that the answer is unique.\n     * Return an ordered list of the values on the cells that the minimum path go through.\n     *\/\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n",
        "id": "129",
        "test_prompt": "\/\/ MinpathTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Minpath}.\n * It contains ten test cases for the {@link scenario2.Minpath#minpath()} method.\n *\/\nclass MinpathTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GreatestCommonDivisor {\n\n    \/**\n     * Return a greatest common divisor of two integers a and b\n     *\/\n    public static int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        return greatestCommonDivisor(b % a, a);\n    }\n}\n",
        "id": "13",
        "test_prompt": "\/\/ GreatestCommonDivisorTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link GreatestCommonDivisor}.\n * It contains ten test cases for the {@link scenario2.GreatestCommonDivisor#greatestCommonDivisor()} method.\n *\/\nclass GreatestCommonDivisorTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ChangeBase {\n\n    \/**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     *\/\n    public static String changeBase(int x, int base) {\n        String result = \"\";\n        while (x > 0) {\n            result = (x % base) + result;\n            x = x \/ base;\n        }\n        return result;\n    }\n}\n",
        "id": "44",
        "test_prompt": "\/\/ ChangeBaseTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link ChangeBase}.\n * It contains ten test cases for the {@link scenario2.ChangeBase#changeBase()} method.\n *\/\nclass ChangeBaseTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass BelowThreshold {\n\n    \/**\n     * Return True if all numbers in the list l are below threshold t.\n     *\/\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "id": "52",
        "test_prompt": "\/\/ BelowThresholdTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link BelowThreshold}.\n * It contains ten test cases for the {@link scenario2.BelowThreshold#belowThreshold()} method.\n *\/\nclass BelowThresholdTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Add {\n\n    \/**\n     * Add two numbers x and y\n     *\/\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
        "id": "53",
        "test_prompt": "\/\/ AddTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Add}.\n * It contains ten test cases for the {@link scenario2.Add#add()} method.\n *\/\nclass AddTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TriangleArea {\n\n    \/**\n     * Given length of a side and high return area for a triangle.\n     *\/\n    public static Double triangleArea(int a, int h) {\n        return (a * h) \/ 2.0;\n    }\n}\n",
        "id": "45",
        "test_prompt": "\/\/ TriangleAreaTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link TriangleArea}.\n * It contains ten test cases for the {@link scenario2.TriangleArea#triangleArea()} method.\n *\/\nclass TriangleAreaTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Longest {\n\n    \/**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     *\/\n    public static String longest(List<Object> strings) {\n        if (strings.size() == 0) {\n            return null;\n        }\n        String longest = strings.get(0).toString();\n        for (int i = 1; i < strings.size(); i++) {\n            if (strings.get(i).toString().length() > longest.length()) {\n                longest = strings.get(i).toString();\n            }\n        }\n        return longest;\n    }\n}\n",
        "id": "12",
        "test_prompt": "\/\/ LongestTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Longest}.\n * It contains ten test cases for the {@link scenario2.Longest#longest()} method.\n *\/\nclass LongestTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ProdSigns {\n\n    \/**\n     * * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n     *\/\n    public static Integer prodSigns(List<Object> arr) {\n        if (arr.isEmpty()) {\n            return null;\n        }\n        int prod = 1;\n        int sum = 0;\n        for (Object value : arr) {\n            if (value instanceof Integer) {\n                int num = (Integer) value;\n                if (num > 0) {\n                    prod *= 1;\n                } else if (num < 0) {\n                    prod *= -1;\n                } else {\n                    prod *= 0;\n                }\n                sum += Math.abs(num);\n            }\n        }\n        return sum * prod;\n    }\n}\n",
        "id": "128",
        "test_prompt": "\/\/ ProdSignsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link ProdSigns}.\n * It contains ten test cases for the {@link scenario2.ProdSigns#prodSigns()} method.\n *\/\nclass ProdSignsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Search {\n\n    \/**\n     * * You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n     * zero, and has a frequency greater than or equal to the value of the integer itself.\n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     *\/\n    public static int search(List<Integer> lst) {\n        int max = -1;\n        int[] freq = new int[11];\n        for (int i = 0; i < lst.size(); i++) {\n            freq[lst.get(i)]++;\n        }\n        for (int i = 1; i < 11; i++) {\n            if (freq[i] >= i) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n",
        "id": "69",
        "test_prompt": "\/\/ SearchTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Search}.\n * It contains ten test cases for the {@link scenario2.Search#search()} method.\n *\/\nclass SearchTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AntiShuffle {\n\n    \/**\n     * * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n     *\/\n    public static String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            words[i] = sortString(words[i]);\n        }\n        return String.join(\" \", words);\n    }\n\n    private static String sortString(String s) {\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n}\n",
        "id": "86",
        "test_prompt": "\/\/ AntiShuffleTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link AntiShuffle}.\n * It contains ten test cases for the {@link scenario2.AntiShuffle#antiShuffle()} method.\n *\/\nclass AntiShuffleTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StrongestExtension {\n\n    \/**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters\n     * in the extension's name, the strength is given by the fraction CAP - SM.\n     * You should find the strongest extension and return a string in this\n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     *\/\n    public static String strongestExtension(String className, List<String> extensions) {\n        int max = Integer.MIN_VALUE;\n        String result = \"\";\n        for (int i = 0; i < extensions.size(); i++) {\n            int cap = 0;\n            int sm = 0;\n            for (int j = 0; j < extensions.get(i).length(); j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j))) {\n                    cap++;\n                } else if (Character.isLowerCase(extensions.get(i).charAt(j))) {\n                    sm++;\n                }\n            }\n            if (cap - sm > max) {\n                max = cap - sm;\n                result = className + \".\" + extensions.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "153",
        "test_prompt": "\/\/ StrongestExtensionTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link StrongestExtension}.\n * It contains ten test cases for the {@link scenario2.StrongestExtension#strongestExtension()} method.\n *\/\nclass StrongestExtensionTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass UniqueDigits {\n\n    \/**\n     * Given a list of positive integers x. return a sorted list of all\n     * elements that hasn't any even digit.\n     *\n     * Note: Returned list should be sorted in increasing order.\n     *\/\n    public static List<Object> uniqueDigits(List<Integer> x) {\n        List<Object> result = new ArrayList<Object>();\n        for (int value : x) {\n            boolean hasEven = false;\n            int oldValue = value;\n            while (value > 0) {\n                if (value % 2 == 0) {\n                    hasEven = true;\n                    break;\n                }\n                value \/= 10;\n            }\n            if (!hasEven) {\n                result.add(oldValue);\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n\n            public int compare(Object a, Object b) {\n                return (Integer) a - (Integer) b;\n            }\n        });\n        return result;\n    }\n}\n",
        "id": "104",
        "test_prompt": "\/\/ UniqueDigitsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link UniqueDigits}.\n * It contains ten test cases for the {@link scenario2.UniqueDigits#compare()} method.\n *\/\nclass UniqueDigitsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Concatenate {\n\n    \/**\n     * Concatenate list of strings into a single string\n     *\/\n    public static String concatenate(List<Object> strings) {\n        String result = \"\";\n        for (Object string : strings) {\n            result += string.toString();\n        }\n        return result;\n    }\n}\n",
        "id": "28",
        "test_prompt": "\/\/ ConcatenateTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Concatenate}.\n * It contains ten test cases for the {@link scenario2.Concatenate#concatenate()} method.\n *\/\nclass ConcatenateTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ReverseDelete {\n\n    \/**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True\/False for the check.\n     *\/\n    public static List<Object> reverseDelete(String s, String c) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                result += s.charAt(i);\n            }\n        }\n        boolean isPalindrome = true;\n        for (int i = 0; i < result.length() \/ 2; i++) {\n            if (result.charAt(i) != result.charAt(result.length() - i - 1)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        return Arrays.asList(result, isPalindrome);\n    }\n}\n",
        "id": "112",
        "test_prompt": "\/\/ ReverseDeleteTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link ReverseDelete}.\n * It contains ten test cases for the {@link scenario2.ReverseDelete#reverseDelete()} method.\n *\/\nclass ReverseDeleteTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass NextSmallest {\n\n    \/**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     *\/\n    public static Integer nextSmallest(List<Object> lst) {\n        if (lst.size() <= 1) {\n            return null;\n        }\n        Integer smallest = (Integer) lst.get(0);\n        Integer nextSmallest = null;\n        for (int i = 1; i < lst.size(); i++) {\n            Integer current = (Integer) lst.get(i);\n            if (current < smallest) {\n                nextSmallest = smallest;\n                smallest = current;\n            } else if (nextSmallest == null || current < nextSmallest) {\n                if (current != smallest)\n                    nextSmallest = current;\n            }\n        }\n        return nextSmallest;\n    }\n}\n",
        "id": "90",
        "test_prompt": "\/\/ NextSmallestTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link NextSmallest}.\n * It contains ten test cases for the {@link scenario2.NextSmallest#nextSmallest()} method.\n *\/\nclass NextSmallestTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass OrderByPoints {\n\n    \/**\n     * * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n     *\/\n    public static List<Object> orderByPoints(List<Object> nums) {\n        Collections.sort(nums, new Comparator<Object>() {\n\n            int digitsum(int n) {\n                boolean neg = false;\n                if (n < 0) {\n                    neg = true;\n                    n = -n;\n                }\n                int sum = 0;\n                while (n > 0) {\n                    if (n \/ 10 == 0 && neg)\n                        sum -= n % 10;\n                    else\n                        sum += n % 10;\n                    n = n \/ 10;\n                }\n                return sum;\n            }\n\n            public int compare(Object o1, Object o2) {\n                return digitsum((int) o1) - digitsum((int) o2);\n            }\n        });\n        return nums;\n    }\n}\n",
        "id": "145",
        "test_prompt": "\/\/ OrderByPointsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link OrderByPoints}.\n * It contains ten test cases for the {@link scenario2.OrderByPoints#digitsum()} method.\n *\/\nclass OrderByPointsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsNested {\n\n    \/**\n     * * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets\n     * where at least one bracket in the subsequence is nested.\n     *\/\n    public static Boolean isNested(String string) {\n        ArrayList<Integer> opening_bracket_index = new ArrayList<Integer>();\n        ArrayList<Integer> closing_bracket_index = new ArrayList<Integer>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int cnt = 0;\n        int i = 0;\n        int l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
        "id": "132",
        "test_prompt": "\/\/ IsNestedTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link IsNested}.\n * It contains ten test cases for the {@link scenario2.IsNested#isNested()} method.\n *\/\nclass IsNestedTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Modp {\n\n    \/**\n     * Return 2^n modulo p (be aware of numerics).\n     *\/\n    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * 2) % p;\n        }\n        return result;\n    }\n}\n",
        "id": "49",
        "test_prompt": "\/\/ ModpTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Modp}.\n * It contains ten test cases for the {@link scenario2.Modp#modp()} method.\n *\/\nclass ModpTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ValidDate {\n\n    \/**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n     *\/\n    public static Boolean validDate(String date) {\n        if (date.length() != 10) {\n            return false;\n        }\n        String[] dateArr = date.split(\"-\");\n        if (dateArr.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "id": "124",
        "test_prompt": "\/\/ ValidDateTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link ValidDate}.\n * It contains ten test cases for the {@link scenario2.ValidDate#validDate()} method.\n *\/\nclass ValidDateTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport static junit.framework.TestCase.assertTrue;\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SeparateParenGroups {\n\n    \/**\n     * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n     * separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n     * Ignore any spaces in the input string\n     *\/\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> result = new ArrayList<String>();\n        int count = 0;\n        StringBuilder curString = new StringBuilder();\n        for (int i = 0; i < parenString.length(); i++) {\n            if (parenString.charAt(i) == '(') {\n                count++;\n                curString.append('(');\n            } else if (parenString.charAt(i) == ')') {\n                count--;\n                curString.append(')');\n                if (count == 0) {\n                    result.add(curString.toString());\n                    curString = new StringBuilder();\n                }\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "1",
        "test_prompt": "\/\/ SeparateParenGroupsTest.java\npackage scenario2;\n\nimport junit.framework.TestCase.assertTrue.*;\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SeparateParenGroups}.\n * It contains ten test cases for the {@link scenario2.SeparateParenGroups#separateParenGroups()} method.\n *\/\nclass SeparateParenGroupsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CircularShift {\n\n    \/**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     *\/\n    public static String circularShift(int x, int shift) {\n        String result = \"\";\n        String xString = Integer.toString(x);\n        int xLength = xString.length();\n        if (shift > xLength) {\n            for (int i = xLength - 1; i >= 0; i--) {\n                result += xString.charAt(i);\n            }\n        } else {\n            for (int i = xLength - shift; i < xLength; i++) {\n                result += xString.charAt(i);\n            }\n            for (int i = 0; i < xLength - shift; i++) {\n                result += xString.charAt(i);\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "65",
        "test_prompt": "\/\/ CircularShiftTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CircularShift}.\n * It contains ten test cases for the {@link scenario2.CircularShift#circularShift()} method.\n *\/\nclass CircularShiftTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CountNums {\n\n    \/**\n     * * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     *\/\n    public static int countNums(List<Object> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            int num = (int) arr.get(i);\n            boolean isNegative = num < 0;\n            if (isNegative) {\n                num = -num;\n            }\n            while (num != 0) {\n                if (isNegative && num \/ 10 == 0) {\n                    sum -= num % 10;\n                } else {\n                    sum += num % 10;\n                }\n                num \/= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
        "id": "108",
        "test_prompt": "\/\/ CountNumsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CountNums}.\n * It contains ten test cases for the {@link scenario2.CountNums#countNums()} method.\n *\/\nclass CountNumsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestDivisor {\n\n    \/**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     *\/\n    public static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}\n",
        "id": "24",
        "test_prompt": "\/\/ LargestDivisorTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link LargestDivisor}.\n * It contains ten test cases for the {@link scenario2.LargestDivisor#largestDivisor()} method.\n *\/\nclass LargestDivisorTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortedListSum {\n\n    \/**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     *\/\n    public static List<Object> sortedListSum(List<String> lst) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).length() % 2 == 0) {\n                result.add(lst.get(i));\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n\n            @Override\n            public int compare(Object o1, Object o2) {\n                if (o1.toString().length() == o2.toString().length()) {\n                    return o1.toString().compareTo(o2.toString());\n                } else {\n                    return o1.toString().length() - o2.toString().length();\n                }\n            }\n        });\n        return result;\n    }\n}\n",
        "id": "149",
        "test_prompt": "\/\/ SortedListSumTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SortedListSum}.\n * It contains ten test cases for the {@link scenario2.SortedListSum#compare()} method.\n *\/\nclass SortedListSumTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SmallestChange {\n\n    \/**\n     * * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     *\/\n    public static int smallestChange(List<Integer> arr) {\n        int result = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n            if (arr.get(i) != arr.get(j)) {\n                result++;\n            }\n            i++;\n            j--;\n        }\n        return result;\n    }\n}\n",
        "id": "73",
        "test_prompt": "\/\/ SmallestChangeTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SmallestChange}.\n * It contains ten test cases for the {@link scenario2.SmallestChange#smallestChange()} method.\n *\/\nclass SmallestChangeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SumSquares1 {\n\n    \/**\n     * \"\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n     *\/\n    public static int sumSquares(List<Object> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add((int) lst.get(i) * (int) lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                result.add((int) lst.get(i) * (int) lst.get(i) * (int) lst.get(i));\n            } else {\n                result.add((int) lst.get(i));\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < result.size(); i++) {\n            sum += result.get(i);\n        }\n        return sum;\n    }\n}\n",
        "id": "142",
        "test_prompt": "\/\/ SumSquares1Test.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SumSquares1}.\n * It contains ten test cases for the {@link scenario2.SumSquares1#sumSquares()} method.\n *\/\nclass SumSquares1Test {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass HexKey {\n\n    \/**\n     * You have been tasked to write a function that receives\n     * a hexadecimal number as a string and counts the number of hexadecimal\n     * digits that are primes (prime number, or a prime, is a natural number\n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7,\n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string,\n     * and symbols A,B,C,D,E,F are always uppercase.\n     *\/\n    public static int hexKey(Object num) {\n        int result = 0;\n        String hex = num.toString();\n        for (int i = 0; i < hex.length(); i++) {\n            char c = hex.charAt(i);\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "78",
        "test_prompt": "\/\/ HexKeyTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link HexKey}.\n * It contains ten test cases for the {@link scenario2.HexKey#hexKey()} method.\n *\/\nclass HexKeyTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Multiply {\n\n    \/**\n     * Complete the function that takes two integers and returns\n     * the product of their unit digits.\n     * Assume the input is always valid.\n     *\/\n    public static int multiply(int a, int b) {\n        if (a < 0)\n            a = -a;\n        if (b < 0)\n            b = -b;\n        return (a % 10) * (b % 10);\n    }\n}\n",
        "id": "97",
        "test_prompt": "\/\/ MultiplyTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Multiply}.\n * It contains ten test cases for the {@link scenario2.Multiply#multiply()} method.\n *\/\nclass MultiplyTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MaxFill {\n\n    \/**\n     * * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it,\n     * and all buckets have the same capacity.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n     *\n     * Constraints:\n     *     * all wells have the same length\n     *     * 1 <= grid.length <= 10^2\n     *     * 1 <= grid[:,1].length <= 10^2\n     *     * grid[i][j] -> 0 | 1\n     *     * 1 <= capacity <= 10\n     *\/\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (List<Integer> arr : grid) {\n            int sumArr = 0;\n            for (Integer i : arr) {\n                sumArr += i;\n            }\n            sum += Math.ceil((double) sumArr \/ capacity);\n        }\n        return sum;\n    }\n}\n",
        "id": "115",
        "test_prompt": "\/\/ MaxFillTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link MaxFill}.\n * It contains ten test cases for the {@link scenario2.MaxFill#maxFill()} method.\n *\/\nclass MaxFillTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass RoundedAvg {\n\n    \/**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m).\n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     *\/\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        double avg = (sum * 1.0) \/ (m - n + 1);\n        int roundedAvg = (int) Math.round(avg);\n        return \"0b\" + Integer.toBinaryString(roundedAvg);\n    }\n}\n",
        "id": "103",
        "test_prompt": "\/\/ RoundedAvgTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link RoundedAvg}.\n * It contains ten test cases for the {@link scenario2.RoundedAvg#roundedAvg()} method.\n *\/\nclass RoundedAvgTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass PrimeFib {\n\n    \/**\n     * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n     *\/\n    public static int primeFib(int n) {\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        int count = 0;\n        while (count < n) {\n            c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c)) {\n                count++;\n            }\n        }\n        return c;\n    }\n\n    public static Boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "id": "39",
        "test_prompt": "\/\/ PrimeFibTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link PrimeFib}.\n * It contains ten test cases for the {@link scenario2.PrimeFib#primeFib()} method.\n *\/\nclass PrimeFibTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CycpatternCheck {\n\n    \/**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     *\/\n    public static Boolean cycpatternCheck(String a, String b) {\n        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i < a.length() - l + 1; i++) {\n            for (int j = 0; j < l + 1; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
        "id": "154",
        "test_prompt": "\/\/ CycpatternCheckTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CycpatternCheck}.\n * It contains ten test cases for the {@link scenario2.CycpatternCheck#cycpatternCheck()} method.\n *\/\nclass CycpatternCheckTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass NumericalLetterGrade {\n\n    \/**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write\n     * a function that can output a list of letter grades using the following table:\n     *          GPA       |    Letter grade\n     *           4.0                A+\n     *         > 3.7                A\n     *         > 3.3                A-\n     *         > 3.0                B+\n     *         > 2.7                B\n     *         > 2.3                B-\n     *         > 2.0                C+\n     *         > 1.7                C\n     *         > 1.3                C-\n     *         > 1.0                D+\n     *         > 0.7                D\n     *         > 0.0                D-\n     *           0.0                E\n     *\/\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> result = new ArrayList<String>();\n        for (Number grade : grades) {\n            if (grade.doubleValue() >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade.doubleValue() > 3.7) {\n                result.add(\"A\");\n            } else if (grade.doubleValue() > 3.3) {\n                result.add(\"A-\");\n            } else if (grade.doubleValue() > 3.0) {\n                result.add(\"B+\");\n            } else if (grade.doubleValue() > 2.7) {\n                result.add(\"B\");\n            } else if (grade.doubleValue() > 2.3) {\n                result.add(\"B-\");\n            } else if (grade.doubleValue() > 2.0) {\n                result.add(\"C+\");\n            } else if (grade.doubleValue() > 1.7) {\n                result.add(\"C\");\n            } else if (grade.doubleValue() > 1.3) {\n                result.add(\"C-\");\n            } else if (grade.doubleValue() > 1.0) {\n                result.add(\"D+\");\n            } else if (grade.doubleValue() > 0.7) {\n                result.add(\"D\");\n            } else if (grade.doubleValue() > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "81",
        "test_prompt": "\/\/ NumericalLetterGradeTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link NumericalLetterGrade}.\n * It contains ten test cases for the {@link scenario2.NumericalLetterGrade#numericalLetterGrade()} method.\n *\/\nclass NumericalLetterGradeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass StringSequence {\n\n    \/**\n     * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n     *\/\n    public static String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result.trim();\n    }\n}\n",
        "id": "15",
        "test_prompt": "\/\/ StringSequenceTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link StringSequence}.\n * It contains ten test cases for the {@link scenario2.StringSequence#stringSequence()} method.\n *\/\nclass StringSequenceTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IncrList {\n\n    \/**\n     * Return list with elements incremented by 1.\n     *\/\n    public static List<Object> incrList(List<Object> l) {\n        List<Object> result = new ArrayList<Object>();\n        for (Object value : l) {\n            if (value instanceof Integer) {\n                int i = (Integer) value;\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "42",
        "test_prompt": "\/\/ IncrListTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link IncrList}.\n * It contains ten test cases for the {@link scenario2.IncrList#incrList()} method.\n *\/\nclass IncrListTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SameChars {\n\n    \/**\n     * * Check if two words have the same characters.\n     *\/\n    public static Boolean sameChars(String s0, String s1) {\n        int[] count0 = new int[26];\n        int[] count1 = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            count0[s0.charAt(i) - 'a'] = 1;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            count1[s1.charAt(i) - 'a'] = 1;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count0[i] != count1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "id": "54",
        "test_prompt": "\/\/ SameCharsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SameChars}.\n * It contains ten test cases for the {@link scenario2.SameChars#sameChars()} method.\n *\/\nclass SameCharsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SpecialFactorial {\n\n    \/**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n     *\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\/\n    public static long specialFactorial(int n) {\n        long res = 1;\n        for (int i = 1; i <= n; i++) {\n            res *= factorial(i);\n        }\n        return res;\n    }\n\n    private static long factorial(int n) {\n        long res = 1;\n        for (int i = 1; i <= n; i++) {\n            res *= i;\n        }\n        return res;\n    }\n}\n",
        "id": "139",
        "test_prompt": "\/\/ SpecialFactorialTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SpecialFactorial}.\n * It contains ten test cases for the {@link scenario2.SpecialFactorial#specialFactorial()} method.\n *\/\nclass SpecialFactorialTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass TotalMatch {\n\n    \/**\n     * * Write a function that accepts two lists of strings and returns the list that has\n     * total number of chars in the all strings of the list less than the other list.\n     *\n     * if the two lists have the same number of chars, return the first list.\n     *\/\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n        for (Object value : lst1) {\n            if (value instanceof String) {\n                sum1 += ((String) value).length();\n            }\n        }\n        for (Object value : lst2) {\n            if (value instanceof String) {\n                sum2 += ((String) value).length();\n            }\n        }\n        if (sum1 <= sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n",
        "id": "74",
        "test_prompt": "\/\/ TotalMatchTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link TotalMatch}.\n * It contains ten test cases for the {@link scenario2.TotalMatch#totalMatch()} method.\n *\/\nclass TotalMatchTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Strlen {\n\n    \/**\n     * Return length of given string\n     *\/\n    public static int strlen(String string) {\n        return string.length();\n    }\n}\n",
        "id": "23",
        "test_prompt": "\/\/ StrlenTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Strlen}.\n * It contains ten test cases for the {@link scenario2.Strlen#strlen()} method.\n *\/\nclass StrlenTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MatchParens {\n\n    \/**\n     * * You are given a list of two strings, both strings consist of open\n     * parentheses '(' or close parentheses ')' only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string '(())()' is good, while the string\n     * '())' is not.\n     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n     *\/\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        String s1s2 = s1 + s2;\n        String s2s1 = s2 + s1;\n        int count = 0;\n        boolean flag = true;\n        for (int i = 0; i < s1s2.length(); i++) {\n            if (s1s2.charAt(i) == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                flag = false;\n            }\n        }\n        if (flag && count == 0) {\n            return \"Yes\";\n        }\n        count = 0;\n        for (int i = 0; i < s2s1.length(); i++) {\n            if (s2s1.charAt(i) == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return \"No\";\n            }\n        }\n        if (count == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n",
        "id": "119",
        "test_prompt": "\/\/ MatchParensTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link MatchParens}.\n * It contains ten test cases for the {@link scenario2.MatchParens#matchParens()} method.\n *\/\nclass MatchParensTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass MaxElement {\n\n    \/**\n     * Return maximum element in the list.\n     *\/\n    public static int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n",
        "id": "35",
        "test_prompt": "\/\/ MaxElementTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link MaxElement}.\n * It contains ten test cases for the {@link scenario2.MaxElement#maxElement()} method.\n *\/\nclass MaxElementTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Derivative {\n\n    \/**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     *  Return derivative of this polynomial in the same form.\n     *\/\n    public static List<Object> derivative(List<Integer> xs) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
        "id": "62",
        "test_prompt": "\/\/ DerivativeTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Derivative}.\n * It contains ten test cases for the {@link scenario2.Derivative#derivative()} method.\n *\/\nclass DerivativeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ParseNestedParens {\n\n    \/**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     *\/\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        int maximum_depth = 0;\n        for (int i = 0; i < parenString.length(); i++) {\n            if (parenString.charAt(i) == '(') {\n                count++;\n                maximum_depth = Math.max(maximum_depth, count);\n            } else if (parenString.charAt(i) == ')') {\n                count--;\n                if (count == 0) {\n                    result.add(maximum_depth);\n                    maximum_depth = 0;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "6",
        "test_prompt": "\/\/ ParseNestedParensTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link ParseNestedParens}.\n * It contains ten test cases for the {@link scenario2.ParseNestedParens#parseNestedParens()} method.\n *\/\nclass ParseNestedParensTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FindMax {\n\n    \/**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n     *\/\n    public static String findMax(List<String> words) {\n        String max = \"\";\n        for (int i = 0; i < words.size(); i++) {\n            if (words.get(i).length() >= max.length()) {\n                if (words.get(i).length() == max.length() && words.get(i).compareTo(max) >= 0)\n                    continue;\n                max = words.get(i);\n            }\n        }\n        return max;\n    }\n}\n",
        "id": "158",
        "test_prompt": "\/\/ FindMaxTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link FindMax}.\n * It contains ten test cases for the {@link scenario2.FindMax#findMax()} method.\n *\/\nclass FindMaxTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass SortNumbers {\n\n    \/**\n     * Input is a space-delimited string of numberals from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     *\/\n    public static String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        int[] numbersInt = new int[numbersArray.length];\n        for (int i = 0; i < numbersArray.length; i++) {\n            if (numbersArray[i].equals(\"zero\")) {\n                numbersInt[i] = 0;\n            } else if (numbersArray[i].equals(\"one\")) {\n                numbersInt[i] = 1;\n            } else if (numbersArray[i].equals(\"two\")) {\n                numbersInt[i] = 2;\n            } else if (numbersArray[i].equals(\"three\")) {\n                numbersInt[i] = 3;\n            } else if (numbersArray[i].equals(\"four\")) {\n                numbersInt[i] = 4;\n            } else if (numbersArray[i].equals(\"five\")) {\n                numbersInt[i] = 5;\n            } else if (numbersArray[i].equals(\"six\")) {\n                numbersInt[i] = 6;\n            } else if (numbersArray[i].equals(\"seven\")) {\n                numbersInt[i] = 7;\n            } else if (numbersArray[i].equals(\"eight\")) {\n                numbersInt[i] = 8;\n            } else if (numbersArray[i].equals(\"nine\")) {\n                numbersInt[i] = 9;\n            } else {\n                numbersInt[i] = -1;\n            }\n        }\n        Arrays.sort(numbersInt);\n        String result = \"\";\n        for (int i = 0; i < numbersInt.length; i++) {\n            if (numbersInt[i] == 0) {\n                result += \"zero \";\n            } else if (numbersInt[i] == 1) {\n                result += \"one \";\n            } else if (numbersInt[i] == 2) {\n                result += \"two \";\n            } else if (numbersInt[i] == 3) {\n                result += \"three \";\n            } else if (numbersInt[i] == 4) {\n                result += \"four \";\n            } else if (numbersInt[i] == 5) {\n                result += \"five \";\n            } else if (numbersInt[i] == 6) {\n                result += \"six \";\n            } else if (numbersInt[i] == 7) {\n                result += \"seven \";\n            } else if (numbersInt[i] == 8) {\n                result += \"eight \";\n            } else if (numbersInt[i] == 9) {\n                result += \"nine \";\n            }\n        }\n        return result.trim();\n    }\n}\n",
        "id": "19",
        "test_prompt": "\/\/ SortNumbersTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link SortNumbers}.\n * It contains ten test cases for the {@link scenario2.SortNumbers#sortNumbers()} method.\n *\/\nclass SortNumbersTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetOddCollatz {\n\n    \/**\n     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n     *\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the\n     * previous term as follows: if the previous term is even, the next term is one half of\n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n     *\n     * Note:\n     *     1. Collatz(1) is [1].\n     *     2. returned list sorted in increasing order.\n     *\/\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                result.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n \/ 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
        "id": "123",
        "test_prompt": "\/\/ GetOddCollatzTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link GetOddCollatz}.\n * It contains ten test cases for the {@link scenario2.GetOddCollatz#getOddCollatz()} method.\n *\/\nclass GetOddCollatzTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Common {\n\n    \/**\n     * Return sorted unique common elements for two lists.\n     *\/\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (Integer value : l1) {\n            set.add(value);\n        }\n        List<Object> result = new ArrayList<Object>();\n        for (Object value : l2) {\n            if (value instanceof Integer) {\n                int i = (Integer) value;\n                if (set.contains(i) && !result.contains(i)) {\n                    result.add(i);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n\n            public int compare(Object o1, Object o2) {\n                if (o1 instanceof Integer && o2 instanceof Integer) {\n                    return (Integer) o1 - (Integer) o2;\n                }\n                return 0;\n            }\n        });\n        return result;\n    }\n}\n",
        "id": "58",
        "test_prompt": "\/\/ CommonTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Common}.\n * It contains ten test cases for the {@link scenario2.Common#compare()} method.\n *\/\nclass CommonTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nclass StringToMd5 {\n\n    \/**\n     * * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n     *\/\n    public static String stringToMd5(String text) {\n        if (text.equals(\"\")) {\n            return null;\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            BigInteger number = new BigInteger(1, messageDigest);\n            String hashText = number.toString(16);\n            while (hashText.length() < 32) {\n                hashText = \"0\" + hashText;\n            }\n            return hashText;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n",
        "id": "162",
        "test_prompt": "\/\/ StringToMd5Test.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport java.security.MessageDigest.*;\nimport java.security.NoSuchAlgorithmException.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link StringToMd5}.\n * It contains ten test cases for the {@link scenario2.StringToMd5#stringToMd5()} method.\n *\/\nclass StringToMd5Test {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CanArrange {\n\n    \/**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     *\/\n    public static int canArrange(List<Object> arr) {\n        int max = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) instanceof Integer) {\n                if (i > 0 && (int) arr.get(i) < (int) arr.get(i - 1)) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}\n",
        "id": "135",
        "test_prompt": "\/\/ CanArrangeTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CanArrange}.\n * It contains ten test cases for the {@link scenario2.CanArrange#canArrange()} method.\n *\/\nclass CanArrangeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CheckIfLastCharIsALetter {\n\n    \/**\n     * * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n     *\/\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            if (txt.length() == 1) {\n                return true;\n            }\n            char secondLastChar = txt.charAt(txt.length() - 2);\n            if (Character.isLetter(secondLastChar)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n",
        "id": "134",
        "test_prompt": "\/\/ CheckIfLastCharIsALetterTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CheckIfLastCharIsALetter}.\n * It contains ten test cases for the {@link scenario2.CheckIfLastCharIsALetter#checkIfLastCharIsALetter()} method.\n *\/\nclass CheckIfLastCharIsALetterTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GenerateIntegers {\n\n    \/**\n     * * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n     *\/\n    public static List<Object> generateIntegers(int a, int b) {\n        \/\/ lower = max(2, min(a, b))\n        \/\/ upper = min(8, max(a, b))\n        \/\/ return [i for i in range(lower, upper+1) if i % 2 == 0]\n        \/\/ convert to java\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        List<Object> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "163",
        "test_prompt": "\/\/ GenerateIntegersTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link GenerateIntegers}.\n * It contains ten test cases for the {@link scenario2.GenerateIntegers#generateIntegers()} method.\n *\/\nclass GenerateIntegersTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass LargestPrimeFactor {\n\n    \/**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     *\/\n    public static int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n                n \/= i;\n                i--;\n            }\n        }\n        return max;\n    }\n}\n",
        "id": "59",
        "test_prompt": "\/\/ LargestPrimeFactorTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link LargestPrimeFactor}.\n * It contains ten test cases for the {@link scenario2.LargestPrimeFactor#largestPrimeFactor()} method.\n *\/\nclass LargestPrimeFactorTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AddElements {\n\n    \/**\n     * * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n     *\/\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
        "id": "122",
        "test_prompt": "\/\/ AddElementsTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link AddElements}.\n * It contains ten test cases for the {@link scenario2.AddElements#addElements()} method.\n *\/\nclass AddElementsTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass HowManyTimes {\n\n    \/**\n     * Find how many times a given substring can be found in the original string. Count overlaping cases.\n     *\/\n    public static int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        return count;\n    }\n}\n",
        "id": "18",
        "test_prompt": "\/\/ HowManyTimesTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link HowManyTimes}.\n * It contains ten test cases for the {@link scenario2.HowManyTimes#howManyTimes()} method.\n *\/\nclass HowManyTimesTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Eat {\n\n    \/**\n     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     *                                 the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     *\n     * Variables:\n     * @number : integer\n     *     the number of carrots that you have eaten.\n     * @need : integer\n     *     the number of carrots that you need to eat.\n     * @remaining : integer\n     *     the number of remaining carrots thet exist in stock\n     *\n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n     *\/\n    public static List<Integer> eat(int number, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}\n",
        "id": "159",
        "test_prompt": "\/\/ EatTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Eat}.\n * It contains ten test cases for the {@link scenario2.Eat#eat()} method.\n *\/\nclass EatTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Fibfib {\n\n    \/**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     *\/\n    public static int fibfib(int n) {\n        if (n < 2) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 0;\n        for (int i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return d;\n    }\n}\n",
        "id": "63",
        "test_prompt": "\/\/ FibfibTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Fibfib}.\n * It contains ten test cases for the {@link scenario2.Fibfib#fibfib()} method.\n *\/\nclass FibfibTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FilterBySubstring {\n\n    \/**\n     * Filter an input list of strings only for ones that contain given substring\n     *\/\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).toString().contains(substring)) {\n                result.add(strings.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "7",
        "test_prompt": "\/\/ FilterBySubstringTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link FilterBySubstring}.\n * It contains ten test cases for the {@link scenario2.FilterBySubstring#filterBySubstring()} method.\n *\/\nclass FilterBySubstringTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Unique {\n\n    \/**\n     * Return sorted unique elements in a list\n     *\/\n    public static List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i : l) {\n            set.add(i);\n        }\n        List<Integer> result = new ArrayList<Integer>(set);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
        "id": "34",
        "test_prompt": "\/\/ UniqueTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Unique}.\n * It contains ten test cases for the {@link scenario2.Unique#unique()} method.\n *\/\nclass UniqueTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass GetClosestVowel {\n\n    \/**\n     * You are given a word. Your task is to find the closest vowel that stands between\n     * two consonants from the right side of the word (case sensitive).\n     *\n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition.\n     *\n     * You may assume that the given string contains English letter only.\n     *\/\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        int i = word.length() - 2;\n        while (i > 0) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                if (vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                    return word.substring(i, i + 1);\n                }\n            }\n            i--;\n        }\n        return \"\";\n    }\n}\n",
        "id": "118",
        "test_prompt": "\/\/ GetClosestVowelTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link GetClosestVowel}.\n * It contains ten test cases for the {@link scenario2.GetClosestVowel#getClosestVowel()} method.\n *\/\nclass GetClosestVowelTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass FilterIntegers {\n\n    \/**\n     * Filter given list of any Java values only for integers\n     *\/\n    public static List<Object> filterIntegers(List<Object> values) {\n        List<Object> result = new ArrayList<Object>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add(value);\n            }\n        }\n        return result;\n    }\n}\n",
        "id": "22",
        "test_prompt": "\/\/ FilterIntegersTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link FilterIntegers}.\n * It contains ten test cases for the {@link scenario2.FilterIntegers#filterIntegers()} method.\n *\/\nclass FilterIntegersTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsMultiplyPrime {\n\n    \/**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less then 100.\n     *\/\n    public static Boolean isMultiplyPrime(int a) {\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                count++;\n                a \/= i;\n                i--;\n            }\n        }\n        return count == 3;\n    }\n}\n",
        "id": "75",
        "test_prompt": "\/\/ IsMultiplyPrimeTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link IsMultiplyPrime}.\n * It contains ten test cases for the {@link scenario2.IsMultiplyPrime#isMultiplyPrime()} method.\n *\/\nclass IsMultiplyPrimeTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsEqualToSumEven {\n\n    \/**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     *\/\n    public static Boolean isEqualToSumEven(int n) {\n        if (n < 8) {\n            return false;\n        }\n        return n % 2 == 0;\n    }\n}\n",
        "id": "138",
        "test_prompt": "\/\/ IsEqualToSumEvenTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link IsEqualToSumEven}.\n * It contains ten test cases for the {@link scenario2.IsEqualToSumEven#isEqualToSumEven()} method.\n *\/\nclass IsEqualToSumEvenTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Fib {\n\n    \/**\n     * Return n-th Fibonacci number.\n     *\/\n    public static int fib(int n) {\n        int a = 0;\n        int b = 1;\n        int c = 1;\n        for (int i = 0; i < n - 1; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}\n",
        "id": "55",
        "test_prompt": "\/\/ FibTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Fib}.\n * It contains ten test cases for the {@link scenario2.Fib#fib()} method.\n *\/\nclass FibTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass PairsSumToZero {\n\n    \/**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns True if there are two distinct elements in the list that\n     * sum to zero, and False otherwise.\n     *\/\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
        "id": "43",
        "test_prompt": "\/\/ PairsSumToZeroTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link PairsSumToZero}.\n * It contains ten test cases for the {@link scenario2.PairsSumToZero#pairsSumToZero()} method.\n *\/\nclass PairsSumToZeroTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass AllPrefixes {\n\n    \/**\n     * Return list of all prefixes from shortest to longest of the input string\n     *\/\n    public static List<Object> allPrefixes(String string) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < string.length(); i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;\n    }\n}\n",
        "id": "14",
        "test_prompt": "\/\/ AllPrefixesTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link AllPrefixes}.\n * It contains ten test cases for the {@link scenario2.AllPrefixes#allPrefixes()} method.\n *\/\nclass AllPrefixesTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass IsHappy {\n\n    \/**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     *\/\n    public static Boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "id": "80",
        "test_prompt": "\/\/ IsHappyTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link IsHappy}.\n * It contains ten test cases for the {@link scenario2.IsHappy#isHappy()} method.\n *\/\nclass IsHappyTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass EvenOddCount {\n\n    \/**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n     *\/\n    public static List<Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n        if (num == 0) {\n            even++;\n        }\n        while (num != 0) {\n            if (num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num \/= 10;\n        }\n        return Arrays.asList(even, odd);\n    }\n}\n",
        "id": "155",
        "test_prompt": "\/\/ EvenOddCountTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link EvenOddCount}.\n * It contains ten test cases for the {@link scenario2.EvenOddCount#evenOddCount()} method.\n *\/\nclass EvenOddCountTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass ChooseNum {\n\n    \/**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If\n     * there's no such number, then the function should return -1.\n     *\/\n    public static int chooseNum(int x, int y) {\n        int max = -1;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0 && i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n",
        "id": "102",
        "test_prompt": "\/\/ ChooseNumTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link ChooseNum}.\n * It contains ten test cases for the {@link scenario2.ChooseNum#chooseNum()} method.\n *\/\nclass ChooseNumTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass Minsubarraysum {\n\n    \/**\n     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     *\/\n    public static long minsubarraysum(List<Object> nums) {\n        long s = 0;\n        long max_sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            long num = ((Number) nums.get(i)).longValue();\n            s -= num;\n            if (s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if (max_sum == 0) {\n            max_sum = -((Number) nums.get(0)).longValue();\n            for (int i = 0; i < nums.size(); i++) {\n                max_sum = Math.max(-((Number) nums.get(i)).longValue(), max_sum);\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n}\n",
        "id": "114",
        "test_prompt": "\/\/ MinsubarraysumTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link Minsubarraysum}.\n * It contains ten test cases for the {@link scenario2.Minsubarraysum#minsubarraysum()} method.\n *\/\nclass MinsubarraysumTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass DecimalToBinary {\n\n    \/**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n     *\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n     *\/\n    public static String decimalToBinary(int decimal) {\n        String binary = \"\";\n        if (decimal == 0) {\n            return \"db0db\";\n        }\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal \/ 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}\n",
        "id": "79",
        "test_prompt": "\/\/ DecimalToBinaryTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link DecimalToBinary}.\n * It contains ten test cases for the {@link scenario2.DecimalToBinary#decimalToBinary()} method.\n *\/\nclass DecimalToBinaryTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass CountUpTo {\n\n    \/**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     *\/\n    public static List<Object> countUpTo(int n) {\n        List<Object> result = new ArrayList<Object>();\n        int i = 2;\n        while (i < n) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n\n    public static boolean isPrime(int n) {\n        int i = 2;\n        while (i < n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}\n",
        "id": "96",
        "test_prompt": "\/\/ CountUpToTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link CountUpTo}.\n * It contains ten test cases for the {@link scenario2.CountUpTo#countUpTo()} method.\n *\/\nclass CountUpToTest {\n\t\t"
    },
    {
        "original_code": "package scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\nclass WordsInSentence {\n\n    \/**\n     * * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n     *\n     * Constraints:\n     *     * 1 <= len(sentence) <= 100\n     *     * sentence contains only letters\n     *\/\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            if (isPrime(words[i].length())) {\n                result += words[i] + \" \";\n            }\n        }\n        return result.trim();\n    }\n\n    public static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "id": "143",
        "test_prompt": "\/\/ WordsInSentenceTest.java\npackage scenario2;\n\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\/**\n * Unit tests of {@link WordsInSentence}.\n * It contains ten test cases for the {@link scenario2.WordsInSentence#wordsInSentence()} method.\n *\/\nclass WordsInSentenceTest {\n\t\t"
    }
]